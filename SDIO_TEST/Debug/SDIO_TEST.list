
SDIO_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008540  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008978  08008978  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008978  08008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008980  08008980  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008980  08008980  00018980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002238  20000070  080089f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022a8  080089f8  000222a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011386  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002939  00000000  00000000  00031426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00033d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00034bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244f2  00000000  00000000  00035918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134da  00000000  00000000  00059e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d098f  00000000  00000000  0006d2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013dc73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000428c  00000000  00000000  0013dcc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080086f8 	.word	0x080086f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080086f8 	.word	0x080086f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d013      	beq.n	80005f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00b      	beq.n	80005f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	e000      	b.n	80005e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0f9      	beq.n	80005de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f4:	687b      	ldr	r3, [r7, #4]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <_write>:
UINT br, bw;
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

int _write(int file, char *ptr, int length) {
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
	int i = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

	for(i = 0; i < length; i++) {
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	e009      	b.n	800062c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	60ba      	str	r2, [r7, #8]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffc7 	bl	80005b4 <ITM_SendChar>
	for(i = 0; i < length; i++) {
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3301      	adds	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	dbf1      	blt.n	8000618 <_write+0x16>
	}

	return length;
 8000634:	687b      	ldr	r3, [r7, #4]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <bufclear>:
	return i;
}


// Clear UART buffer for debugging
void bufclear(void) {
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e007      	b.n	800065c <bufclear+0x1c>
		buffer[i] = '\0';
 800064c:	4a08      	ldr	r2, [pc, #32]	; (8000670 <bufclear+0x30>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3301      	adds	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b7f      	cmp	r3, #127	; 0x7f
 8000660:	ddf4      	ble.n	800064c <bufclear+0xc>
	}
}
 8000662:	bf00      	nop
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	20000154 	.word	0x20000154

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fbb7 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f86f 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f000 f92d 	bl	80008e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000686:	f000 f901 	bl	800088c <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 800068a:	f000 f8dd 	bl	8000848 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800068e:	f004 f9f9 	bl	8004a84 <MX_FATFS_Init>
  // Start DMA buffer
  // Might need to stop DMA at some point
//  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_data, ADC_BUFFER_SIZE);

  // Mount SD card
  fresult = f_mount(&fs, "", 0);
 8000692:	2200      	movs	r2, #0
 8000694:	4926      	ldr	r1, [pc, #152]	; (8000730 <main+0xbc>)
 8000696:	4827      	ldr	r0, [pc, #156]	; (8000734 <main+0xc0>)
 8000698:	f006 f928 	bl	80068ec <f_mount>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <main+0xc4>)
 80006a2:	701a      	strb	r2, [r3, #0]

  if(fresult != FR_OK){
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <main+0xc4>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d003      	beq.n	80006b4 <main+0x40>
	  printf("ERROR in mounting SD card...\n");
 80006ac:	4823      	ldr	r0, [pc, #140]	; (800073c <main+0xc8>)
 80006ae:	f007 f8a5 	bl	80077fc <puts>
 80006b2:	e002      	b.n	80006ba <main+0x46>
  }
  else {
	  printf("SD card mounted successfully...\n");
 80006b4:	4822      	ldr	r0, [pc, #136]	; (8000740 <main+0xcc>)
 80006b6:	f007 f8a1 	bl	80077fc <puts>
//  bufclear();
//  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
//  printf("SD card free space: \t%lu\n", free_space);
//  bufclear();

  char *name = "ADCDATA.csv";
 80006ba:	4b22      	ldr	r3, [pc, #136]	; (8000744 <main+0xd0>)
 80006bc:	607b      	str	r3, [r7, #4]

  fresult = f_stat(name, &fno);
 80006be:	4922      	ldr	r1, [pc, #136]	; (8000748 <main+0xd4>)
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f006 fcb9 	bl	8007038 <f_stat>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <main+0xc4>)
 80006cc:	701a      	strb	r2, [r3, #0]

  if (fresult == FR_OK) {
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <main+0xc4>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d106      	bne.n	80006e4 <main+0x70>
	  printf("*%s* already exists!!!!\n",name);
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	481c      	ldr	r0, [pc, #112]	; (800074c <main+0xd8>)
 80006da:	f007 f809 	bl	80076f0 <iprintf>
	  bufclear();
 80006de:	f7ff ffaf 	bl	8000640 <bufclear>
 80006e2:	e008      	b.n	80006f6 <main+0x82>
  }
  else {
	  fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80006e4:	220b      	movs	r2, #11
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	4819      	ldr	r0, [pc, #100]	; (8000750 <main+0xdc>)
 80006ea:	f006 f945 	bl	8006978 <f_open>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <main+0xc4>)
 80006f4:	701a      	strb	r2, [r3, #0]
  }
	  if(fresult != FR_OK) {
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <main+0xc4>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d009      	beq.n	8000712 <main+0x9e>
		  printf ("ERROR: no %d in creating file *%s*\n", fresult, name);
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <main+0xc4>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	4619      	mov	r1, r3
 8000706:	4813      	ldr	r0, [pc, #76]	; (8000754 <main+0xe0>)
 8000708:	f006 fff2 	bl	80076f0 <iprintf>
		  bufclear();
 800070c:	f7ff ff98 	bl	8000640 <bufclear>
 8000710:	e005      	b.n	800071e <main+0xaa>
	  }
	  else {
		  printf ("*%s* created successfully\n",name);
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	4810      	ldr	r0, [pc, #64]	; (8000758 <main+0xe4>)
 8000716:	f006 ffeb 	bl	80076f0 <iprintf>
		  bufclear();
 800071a:	f7ff ff91 	bl	8000640 <bufclear>
	  }

  fresult = f_printf(&fil, "time, explosion, audio, pressure, acceleration\r\n");
 800071e:	490f      	ldr	r1, [pc, #60]	; (800075c <main+0xe8>)
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <main+0xdc>)
 8000722:	f006 fd39 	bl	8007198 <f_printf>
 8000726:	4603      	mov	r3, r0
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b03      	ldr	r3, [pc, #12]	; (8000738 <main+0xc4>)
 800072c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072e:	e7fe      	b.n	800072e <main+0xba>
 8000730:	08008710 	.word	0x08008710
 8000734:	200001d4 	.word	0x200001d4
 8000738:	20002250 	.word	0x20002250
 800073c:	08008714 	.word	0x08008714
 8000740:	08008734 	.word	0x08008734
 8000744:	08008754 	.word	0x08008754
 8000748:	20002238 	.word	0x20002238
 800074c:	08008760 	.word	0x08008760
 8000750:	20001208 	.word	0x20001208
 8000754:	0800877c 	.word	0x0800877c
 8000758:	080087a0 	.word	0x080087a0
 800075c:	080087bc 	.word	0x080087bc

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2234      	movs	r2, #52	; 0x34
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f006 ffb6 	bl	80076e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <SystemClock_Config+0xe0>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a2c      	ldr	r2, [pc, #176]	; (8000840 <SystemClock_Config+0xe0>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <SystemClock_Config+0xe0>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <SystemClock_Config+0xe4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a26      	ldr	r2, [pc, #152]	; (8000844 <SystemClock_Config+0xe4>)
 80007aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <SystemClock_Config+0xe4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007bc:	2302      	movs	r3, #2
 80007be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2310      	movs	r3, #16
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007d0:	2310      	movs	r3, #16
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80007d4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80007d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007de:	2309      	movs	r3, #9
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fcec 	bl	80021c8 <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007f6:	f000 f8ef 	bl	80009d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007fa:	f000 fe21 	bl	8001440 <HAL_PWREx_EnableOverDrive>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000804:	f000 f8e8 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2302      	movs	r3, #2
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000814:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000818:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2105      	movs	r1, #5
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fe5a 	bl	80014e0 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000832:	f000 f8d1 	bl	80009d8 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	; 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_SDIO_SD_Init+0x3c>)
 800084e:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <MX_SDIO_SD_Init+0x40>)
 8000850:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_SDIO_SD_Init+0x3c>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_SDIO_SD_Init+0x3c>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_SDIO_SD_Init+0x3c>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_SDIO_SD_Init+0x3c>)
 8000866:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800086a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <MX_SDIO_SD_Init+0x3c>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 78;
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <MX_SDIO_SD_Init+0x3c>)
 8000874:	224e      	movs	r2, #78	; 0x4e
 8000876:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	2000008c 	.word	0x2000008c
 8000888:	40012c00 	.word	0x40012c00

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_USART2_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f003 f8a9 	bl	8003a1a <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f000 f883 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000110 	.word	0x20000110
 80008dc:	40004400 	.word	0x40004400

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b34      	ldr	r3, [pc, #208]	; (80009cc <MX_GPIO_Init+0xec>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a33      	ldr	r2, [pc, #204]	; (80009cc <MX_GPIO_Init+0xec>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <MX_GPIO_Init+0xec>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <MX_GPIO_Init+0xec>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a2c      	ldr	r2, [pc, #176]	; (80009cc <MX_GPIO_Init+0xec>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <MX_GPIO_Init+0xec>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_GPIO_Init+0xec>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a25      	ldr	r2, [pc, #148]	; (80009cc <MX_GPIO_Init+0xec>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <MX_GPIO_Init+0xec>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_GPIO_Init+0xec>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <MX_GPIO_Init+0xec>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_GPIO_Init+0xec>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_GPIO_Init+0xec>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a17      	ldr	r2, [pc, #92]	; (80009cc <MX_GPIO_Init+0xec>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_GPIO_Init+0xec>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2120      	movs	r1, #32
 8000986:	4812      	ldr	r0, [pc, #72]	; (80009d0 <MX_GPIO_Init+0xf0>)
 8000988:	f000 fd40 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000992:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_GPIO_Init+0xf4>)
 80009a4:	f000 fb9e 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a8:	2320      	movs	r3, #32
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_GPIO_Init+0xf0>)
 80009c0:	f000 fb90 	bl	80010e4 <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020800 	.word	0x40020800

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a22:	2007      	movs	r0, #7
 8000a24:	f000 fb2a 	bl	800107c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0a2      	sub	sp, #136	; 0x88
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	225c      	movs	r2, #92	; 0x5c
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f006 fe43 	bl	80076e0 <memset>
  if(hsd->Instance==SDIO)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a43      	ldr	r2, [pc, #268]	; (8000b6c <HAL_SD_MspInit+0x138>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d17f      	bne.n	8000b64 <HAL_SD_MspInit+0x130>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000a64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a72:	f107 0318 	add.w	r3, r7, #24
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fe4c 	bl	8001714 <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000a82:	f7ff ffa9 	bl	80009d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <HAL_SD_MspInit+0x13c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <HAL_SD_MspInit+0x13c>)
 8000a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <HAL_SD_MspInit+0x13c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <HAL_SD_MspInit+0x13c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a31      	ldr	r2, [pc, #196]	; (8000b70 <HAL_SD_MspInit+0x13c>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <HAL_SD_MspInit+0x13c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <HAL_SD_MspInit+0x13c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a2a      	ldr	r2, [pc, #168]	; (8000b70 <HAL_SD_MspInit+0x13c>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <HAL_SD_MspInit+0x13c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <HAL_SD_MspInit+0x13c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <HAL_SD_MspInit+0x13c>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <HAL_SD_MspInit+0x13c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000af6:	2307      	movs	r3, #7
 8000af8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b12:	4619      	mov	r1, r3
 8000b14:	4817      	ldr	r0, [pc, #92]	; (8000b74 <HAL_SD_MspInit+0x140>)
 8000b16:	f000 fae5 	bl	80010e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000b1a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000b1e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b2e:	230c      	movs	r3, #12
 8000b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480f      	ldr	r0, [pc, #60]	; (8000b78 <HAL_SD_MspInit+0x144>)
 8000b3c:	f000 fad2 	bl	80010e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b40:	2304      	movs	r3, #4
 8000b42:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b52:	230c      	movs	r3, #12
 8000b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <HAL_SD_MspInit+0x148>)
 8000b60:	f000 fac0 	bl	80010e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3788      	adds	r7, #136	; 0x88
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40012c00 	.word	0x40012c00
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020400 	.word	0x40020400
 8000b78:	40020800 	.word	0x40020800
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_UART_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12b      	bne.n	8000bfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bea:	2307      	movs	r3, #7
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_UART_MspInit+0x8c>)
 8000bf6:	f000 fa75 	bl	80010e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40004400 	.word	0x40004400
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f918 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	e00a      	b.n	8000c8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c76:	f3af 8000 	nop.w
 8000c7a:	4601      	mov	r1, r0
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	60ba      	str	r2, [r7, #8]
 8000c82:	b2ca      	uxtb	r2, r1
 8000c84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbf0      	blt.n	8000c76 <_read+0x12>
  }

  return len;
 8000c94:	687b      	ldr	r3, [r7, #4]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_isatty>:

int _isatty(int file)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f006 fca8 	bl	800768c <__errno>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20020000 	.word	0x20020000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	20002254 	.word	0x20002254
 8000d70:	200022a8 	.word	0x200022a8

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db4:	4c0b      	ldr	r4, [pc, #44]	; (8000de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc2:	f7ff ffd7 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f006 fc67 	bl	8007698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fc53 	bl	8000674 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ddc:	08008988 	.word	0x08008988
  ldr r2, =_sbss
 8000de0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000de4:	200022a8 	.word	0x200022a8

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f931 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fde0 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f93b 	bl	80010ca <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f911 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20002258 	.word	0x20002258

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20002258 	.word	0x20002258

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008

08000f18 <__NVIC_SetPriorityGrouping>:
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_SetPriority>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff47 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff5c 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffb0 	bl	8001038 <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e165      	b.n	80013cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	429a      	cmp	r2, r3
 800111a:	f040 8154 	bne.w	80013c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d005      	beq.n	8001136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	2b02      	cmp	r3, #2
 8001134:	d130      	bne.n	8001198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800116c:	2201      	movs	r2, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	f003 0201 	and.w	r2, r3, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d017      	beq.n	80011d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d123      	bne.n	8001228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	08da      	lsrs	r2, r3, #3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3208      	adds	r2, #8
 80011e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	69b9      	ldr	r1, [r7, #24]
 8001224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0203 	and.w	r2, r3, #3
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80ae 	beq.w	80013c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <HAL_GPIO_Init+0x300>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a5c      	ldr	r2, [pc, #368]	; (80013e4 <HAL_GPIO_Init+0x300>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b5a      	ldr	r3, [pc, #360]	; (80013e4 <HAL_GPIO_Init+0x300>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001286:	4a58      	ldr	r2, [pc, #352]	; (80013e8 <HAL_GPIO_Init+0x304>)
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4f      	ldr	r2, [pc, #316]	; (80013ec <HAL_GPIO_Init+0x308>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d025      	beq.n	80012fe <HAL_GPIO_Init+0x21a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4e      	ldr	r2, [pc, #312]	; (80013f0 <HAL_GPIO_Init+0x30c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d01f      	beq.n	80012fa <HAL_GPIO_Init+0x216>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4d      	ldr	r2, [pc, #308]	; (80013f4 <HAL_GPIO_Init+0x310>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d019      	beq.n	80012f6 <HAL_GPIO_Init+0x212>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4c      	ldr	r2, [pc, #304]	; (80013f8 <HAL_GPIO_Init+0x314>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0x20e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4b      	ldr	r2, [pc, #300]	; (80013fc <HAL_GPIO_Init+0x318>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00d      	beq.n	80012ee <HAL_GPIO_Init+0x20a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4a      	ldr	r2, [pc, #296]	; (8001400 <HAL_GPIO_Init+0x31c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d007      	beq.n	80012ea <HAL_GPIO_Init+0x206>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a49      	ldr	r2, [pc, #292]	; (8001404 <HAL_GPIO_Init+0x320>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_GPIO_Init+0x202>
 80012e2:	2306      	movs	r3, #6
 80012e4:	e00c      	b.n	8001300 <HAL_GPIO_Init+0x21c>
 80012e6:	2307      	movs	r3, #7
 80012e8:	e00a      	b.n	8001300 <HAL_GPIO_Init+0x21c>
 80012ea:	2305      	movs	r3, #5
 80012ec:	e008      	b.n	8001300 <HAL_GPIO_Init+0x21c>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x21c>
 80012f2:	2303      	movs	r3, #3
 80012f4:	e004      	b.n	8001300 <HAL_GPIO_Init+0x21c>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e002      	b.n	8001300 <HAL_GPIO_Init+0x21c>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <HAL_GPIO_Init+0x21c>
 80012fe:	2300      	movs	r3, #0
 8001300:	69fa      	ldr	r2, [r7, #28]
 8001302:	f002 0203 	and.w	r2, r2, #3
 8001306:	0092      	lsls	r2, r2, #2
 8001308:	4093      	lsls	r3, r2
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001310:	4935      	ldr	r1, [pc, #212]	; (80013e8 <HAL_GPIO_Init+0x304>)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3302      	adds	r3, #2
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131e:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <HAL_GPIO_Init+0x324>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001342:	4a31      	ldr	r2, [pc, #196]	; (8001408 <HAL_GPIO_Init+0x324>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <HAL_GPIO_Init+0x324>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800136c:	4a26      	ldr	r2, [pc, #152]	; (8001408 <HAL_GPIO_Init+0x324>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <HAL_GPIO_Init+0x324>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <HAL_GPIO_Init+0x324>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_GPIO_Init+0x324>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <HAL_GPIO_Init+0x324>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3301      	adds	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	2b0f      	cmp	r3, #15
 80013d0:	f67f ae96 	bls.w	8001100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40013800 	.word	0x40013800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020c00 	.word	0x40020c00
 80013fc:	40021000 	.word	0x40021000
 8001400:	40021400 	.word	0x40021400
 8001404:	40021800 	.word	0x40021800
 8001408:	40013c00 	.word	0x40013c00

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800146c:	f7ff fd24 	bl	8000eb8 <HAL_GetTick>
 8001470:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001472:	e009      	b.n	8001488 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001474:	f7ff fd20 	bl	8000eb8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001482:	d901      	bls.n	8001488 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e01f      	b.n	80014c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d1ee      	bne.n	8001474 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800149c:	f7ff fd0c 	bl	8000eb8 <HAL_GetTick>
 80014a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014a2:	e009      	b.n	80014b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014a4:	f7ff fd08 	bl	8000eb8 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b2:	d901      	bls.n	80014b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e007      	b.n	80014c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014c4:	d1ee      	bne.n	80014a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40023800 	.word	0x40023800
 80014d4:	420e0040 	.word	0x420e0040
 80014d8:	40007000 	.word	0x40007000
 80014dc:	420e0044 	.word	0x420e0044

080014e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0cc      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f4:	4b68      	ldr	r3, [pc, #416]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d90c      	bls.n	800151c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b63      	ldr	r3, [pc, #396]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0b8      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d020      	beq.n	800156a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a58      	ldr	r2, [pc, #352]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800153e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a52      	ldr	r2, [pc, #328]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001558:	4b50      	ldr	r3, [pc, #320]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	494d      	ldr	r1, [pc, #308]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d044      	beq.n	8001600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d119      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e07f      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d003      	beq.n	800159e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800159a:	2b03      	cmp	r3, #3
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e06f      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e067      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015be:	4b37      	ldr	r3, [pc, #220]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f023 0203 	bic.w	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4934      	ldr	r1, [pc, #208]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d0:	f7ff fc72 	bl	8000eb8 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7ff fc6e 	bl	8000eb8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e04f      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 020c 	and.w	r2, r3, #12
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1eb      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d20c      	bcs.n	8001628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e032      	b.n	800168e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4916      	ldr	r1, [pc, #88]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	4313      	orrs	r3, r2
 8001644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	490e      	ldr	r1, [pc, #56]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001666:	f000 fb7f 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 800166a:	4602      	mov	r2, r0
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	490a      	ldr	r1, [pc, #40]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	5ccb      	ldrb	r3, [r1, r3]
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fbd2 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023c00 	.word	0x40023c00
 800169c:	40023800 	.word	0x40023800
 80016a0:	08008834 	.word	0x08008834
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000000 	.word	0x20000000

080016c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016c8:	f7ff fff0 	bl	80016ac <HAL_RCC_GetHCLKFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	0a9b      	lsrs	r3, r3, #10
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	4903      	ldr	r1, [pc, #12]	; (80016e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	08008844 	.word	0x08008844

080016ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016f0:	f7ff ffdc 	bl	80016ac <HAL_RCC_GetHCLKFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_RCC_GetPCLK2Freq+0x20>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	0b5b      	lsrs	r3, r3, #13
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	4903      	ldr	r1, [pc, #12]	; (8001710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001708:	4618      	mov	r0, r3
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	08008844 	.word	0x08008844

08001714 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	; 0x30
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d010      	beq.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800174c:	4b6f      	ldr	r3, [pc, #444]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800174e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001752:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175a:	496c      	ldr	r1, [pc, #432]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800175c:	4313      	orrs	r3, r2
 800175e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800176a:	2301      	movs	r3, #1
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d010      	beq.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800177a:	4b64      	ldr	r3, [pc, #400]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800177c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001780:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001788:	4960      	ldr	r1, [pc, #384]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800178a:	4313      	orrs	r3, r2
 800178c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001798:	2301      	movs	r3, #1
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d017      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017a8:	4b58      	ldr	r3, [pc, #352]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4955      	ldr	r1, [pc, #340]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017c6:	d101      	bne.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80017d4:	2301      	movs	r3, #1
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d017      	beq.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80017e4:	4b49      	ldr	r3, [pc, #292]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f2:	4946      	ldr	r1, [pc, #280]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001802:	d101      	bne.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001804:	2301      	movs	r3, #1
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001810:	2301      	movs	r3, #1
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0320 	and.w	r3, r3, #32
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 808a 	beq.w	8001936 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a38      	ldr	r2, [pc, #224]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800183e:	4b34      	ldr	r3, [pc, #208]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a33      	ldr	r2, [pc, #204]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800184a:	f7ff fb35 	bl	8000eb8 <HAL_GetTick>
 800184e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001852:	f7ff fb31 	bl	8000eb8 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e278      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001870:	4b26      	ldr	r3, [pc, #152]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001878:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d02f      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001888:	6a3a      	ldr	r2, [r7, #32]
 800188a:	429a      	cmp	r2, r3
 800188c:	d028      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001896:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d114      	bne.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff faff 	bl	8000eb8 <HAL_GetTick>
 80018ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff fafb 	bl	8000eb8 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e240      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ee      	beq.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018ec:	d114      	bne.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80018fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001902:	4902      	ldr	r1, [pc, #8]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001904:	4313      	orrs	r3, r2
 8001906:	608b      	str	r3, [r1, #8]
 8001908:	e00c      	b.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40007000 	.word	0x40007000
 8001914:	42470e40 	.word	0x42470e40
 8001918:	4b4a      	ldr	r3, [pc, #296]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a49      	ldr	r2, [pc, #292]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800191e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001922:	6093      	str	r3, [r2, #8]
 8001924:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001930:	4944      	ldr	r1, [pc, #272]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001932:	4313      	orrs	r3, r2
 8001934:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001948:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800194a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00a      	beq.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001958:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800195a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	4937      	ldr	r1, [pc, #220]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001968:	4313      	orrs	r3, r2
 800196a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00a      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800197a:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800197c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001980:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001988:	492e      	ldr	r1, [pc, #184]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800198a:	4313      	orrs	r3, r2
 800198c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d011      	beq.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800199e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019aa:	4926      	ldr	r1, [pc, #152]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019ba:	d101      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80019bc:	2301      	movs	r3, #1
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00a      	beq.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	491a      	ldr	r1, [pc, #104]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d011      	beq.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fc:	4911      	ldr	r1, [pc, #68]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d005      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a20:	f040 80ff 	bne.w	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a2a:	f7ff fa45 	bl	8000eb8 <HAL_GetTick>
 8001a2e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a30:	e00e      	b.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001a32:	f7ff fa41 	bl	8000eb8 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d907      	bls.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e188      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001a44:	40023800 	.word	0x40023800
 8001a48:	424711e0 	.word	0x424711e0
 8001a4c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a50:	4b7e      	ldr	r3, [pc, #504]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ea      	bne.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d009      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d028      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d124      	bne.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a84:	4b71      	ldr	r3, [pc, #452]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a8a:	0c1b      	lsrs	r3, r3, #16
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	3301      	adds	r3, #1
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a96:	4b6d      	ldr	r3, [pc, #436]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a9c:	0e1b      	lsrs	r3, r3, #24
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	019b      	lsls	r3, r3, #6
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	061b      	lsls	r3, r3, #24
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	071b      	lsls	r3, r3, #28
 8001ac6:	4961      	ldr	r1, [pc, #388]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ae2:	d00a      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d035      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001af8:	d130      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001afa:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	3301      	adds	r3, #1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b0c:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b12:	0f1b      	lsrs	r3, r3, #28
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	019b      	lsls	r3, r3, #6
 8001b24:	431a      	orrs	r2, r3
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	041b      	lsls	r3, r3, #16
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	431a      	orrs	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	071b      	lsls	r3, r3, #28
 8001b3c:	4943      	ldr	r1, [pc, #268]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b44:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b4a:	f023 021f 	bic.w	r2, r3, #31
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	3b01      	subs	r3, #1
 8001b54:	493d      	ldr	r1, [pc, #244]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d029      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b70:	d124      	bne.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b72:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b78:	0c1b      	lsrs	r3, r3, #16
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b8a:	0f1b      	lsrs	r3, r3, #28
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	019b      	lsls	r3, r3, #6
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	085b      	lsrs	r3, r3, #1
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	041b      	lsls	r3, r3, #16
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	061b      	lsls	r3, r3, #24
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	071b      	lsls	r3, r3, #28
 8001bb4:	4925      	ldr	r1, [pc, #148]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d016      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	019b      	lsls	r3, r3, #6
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	041b      	lsls	r3, r3, #16
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	071b      	lsls	r3, r3, #28
 8001bee:	4917      	ldr	r1, [pc, #92]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f95c 	bl	8000eb8 <HAL_GetTick>
 8001c00:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c04:	f7ff f958 	bl	8000eb8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e09f      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	f040 8095 	bne.w	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c30:	f7ff f942 	bl	8000eb8 <HAL_GetTick>
 8001c34:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c36:	e00f      	b.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c38:	f7ff f93e 	bl	8000eb8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d908      	bls.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e085      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	42470068 	.word	0x42470068
 8001c54:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c58:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c64:	d0e8      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d02b      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d127      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001c8e:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	431a      	orrs	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	041b      	lsls	r3, r3, #16
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	061b      	lsls	r3, r3, #24
 8001cbc:	4928      	ldr	r1, [pc, #160]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001cc4:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	4922      	ldr	r1, [pc, #136]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01d      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cf2:	d118      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	0e1b      	lsrs	r3, r3, #24
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699a      	ldr	r2, [r3, #24]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	019b      	lsls	r3, r3, #6
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	3b01      	subs	r3, #1
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	4910      	ldr	r1, [pc, #64]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7ff f8c4 	bl	8000eb8 <HAL_GetTick>
 8001d30:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001d34:	f7ff f8c0 	bl	8000eb8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e007      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d52:	d1ef      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3730      	adds	r7, #48	; 0x30
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	42470070 	.word	0x42470070

08001d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d6c:	b0ae      	sub	sp, #184	; 0xb8
 8001d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d8e:	4bcb      	ldr	r3, [pc, #812]	; (80020bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	f200 8206 	bhi.w	80021a8 <HAL_RCC_GetSysClockFreq+0x440>
 8001d9c:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da2:	bf00      	nop
 8001da4:	08001dd9 	.word	0x08001dd9
 8001da8:	080021a9 	.word	0x080021a9
 8001dac:	080021a9 	.word	0x080021a9
 8001db0:	080021a9 	.word	0x080021a9
 8001db4:	08001de1 	.word	0x08001de1
 8001db8:	080021a9 	.word	0x080021a9
 8001dbc:	080021a9 	.word	0x080021a9
 8001dc0:	080021a9 	.word	0x080021a9
 8001dc4:	08001de9 	.word	0x08001de9
 8001dc8:	080021a9 	.word	0x080021a9
 8001dcc:	080021a9 	.word	0x080021a9
 8001dd0:	080021a9 	.word	0x080021a9
 8001dd4:	08001fd9 	.word	0x08001fd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4bb9      	ldr	r3, [pc, #740]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001dde:	e1e7      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001de0:	4bb8      	ldr	r3, [pc, #736]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001de6:	e1e3      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001de8:	4bb4      	ldr	r3, [pc, #720]	; (80020bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001df4:	4bb1      	ldr	r3, [pc, #708]	; (80020bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d071      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e00:	4bae      	ldr	r3, [pc, #696]	; (80020bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	099b      	lsrs	r3, r3, #6
 8001e06:	2200      	movs	r2, #0
 8001e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e0c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e26:	4622      	mov	r2, r4
 8001e28:	462b      	mov	r3, r5
 8001e2a:	f04f 0000 	mov.w	r0, #0
 8001e2e:	f04f 0100 	mov.w	r1, #0
 8001e32:	0159      	lsls	r1, r3, #5
 8001e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e38:	0150      	lsls	r0, r2, #5
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4621      	mov	r1, r4
 8001e40:	1a51      	subs	r1, r2, r1
 8001e42:	6439      	str	r1, [r7, #64]	; 0x40
 8001e44:	4629      	mov	r1, r5
 8001e46:	eb63 0301 	sbc.w	r3, r3, r1
 8001e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001e58:	4649      	mov	r1, r9
 8001e5a:	018b      	lsls	r3, r1, #6
 8001e5c:	4641      	mov	r1, r8
 8001e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e62:	4641      	mov	r1, r8
 8001e64:	018a      	lsls	r2, r1, #6
 8001e66:	4641      	mov	r1, r8
 8001e68:	1a51      	subs	r1, r2, r1
 8001e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001e80:	4649      	mov	r1, r9
 8001e82:	00cb      	lsls	r3, r1, #3
 8001e84:	4641      	mov	r1, r8
 8001e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e8a:	4641      	mov	r1, r8
 8001e8c:	00ca      	lsls	r2, r1, #3
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	4622      	mov	r2, r4
 8001e96:	189b      	adds	r3, r3, r2
 8001e98:	633b      	str	r3, [r7, #48]	; 0x30
 8001e9a:	462b      	mov	r3, r5
 8001e9c:	460a      	mov	r2, r1
 8001e9e:	eb42 0303 	adc.w	r3, r2, r3
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001eb0:	4629      	mov	r1, r5
 8001eb2:	024b      	lsls	r3, r1, #9
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eba:	4621      	mov	r1, r4
 8001ebc:	024a      	lsls	r2, r1, #9
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ecc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ed0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ed4:	f7fe f9ec 	bl	80002b0 <__aeabi_uldivmod>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4613      	mov	r3, r2
 8001ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ee2:	e067      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee4:	4b75      	ldr	r3, [pc, #468]	; (80020bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	2200      	movs	r2, #0
 8001eec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ef0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efc:	67bb      	str	r3, [r7, #120]	; 0x78
 8001efe:	2300      	movs	r3, #0
 8001f00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f02:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001f06:	4622      	mov	r2, r4
 8001f08:	462b      	mov	r3, r5
 8001f0a:	f04f 0000 	mov.w	r0, #0
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	0159      	lsls	r1, r3, #5
 8001f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f18:	0150      	lsls	r0, r2, #5
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4621      	mov	r1, r4
 8001f20:	1a51      	subs	r1, r2, r1
 8001f22:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f24:	4629      	mov	r1, r5
 8001f26:	eb63 0301 	sbc.w	r3, r3, r1
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001f38:	4649      	mov	r1, r9
 8001f3a:	018b      	lsls	r3, r1, #6
 8001f3c:	4641      	mov	r1, r8
 8001f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f42:	4641      	mov	r1, r8
 8001f44:	018a      	lsls	r2, r1, #6
 8001f46:	4641      	mov	r1, r8
 8001f48:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f4c:	4649      	mov	r1, r9
 8001f4e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f5e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f66:	4692      	mov	sl, r2
 8001f68:	469b      	mov	fp, r3
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	eb1a 0303 	adds.w	r3, sl, r3
 8001f70:	623b      	str	r3, [r7, #32]
 8001f72:	462b      	mov	r3, r5
 8001f74:	eb4b 0303 	adc.w	r3, fp, r3
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f86:	4629      	mov	r1, r5
 8001f88:	028b      	lsls	r3, r1, #10
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f90:	4621      	mov	r1, r4
 8001f92:	028a      	lsls	r2, r1, #10
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8001fa0:	677a      	str	r2, [r7, #116]	; 0x74
 8001fa2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001fa6:	f7fe f983 	bl	80002b0 <__aeabi_uldivmod>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4613      	mov	r3, r2
 8001fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fb4:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001fc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001fd6:	e0eb      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d06b      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff0:	4b32      	ldr	r3, [pc, #200]	; (80020bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ffa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002002:	663b      	str	r3, [r7, #96]	; 0x60
 8002004:	2300      	movs	r3, #0
 8002006:	667b      	str	r3, [r7, #100]	; 0x64
 8002008:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800200c:	4622      	mov	r2, r4
 800200e:	462b      	mov	r3, r5
 8002010:	f04f 0000 	mov.w	r0, #0
 8002014:	f04f 0100 	mov.w	r1, #0
 8002018:	0159      	lsls	r1, r3, #5
 800201a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800201e:	0150      	lsls	r0, r2, #5
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4621      	mov	r1, r4
 8002026:	1a51      	subs	r1, r2, r1
 8002028:	61b9      	str	r1, [r7, #24]
 800202a:	4629      	mov	r1, r5
 800202c:	eb63 0301 	sbc.w	r3, r3, r1
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800203e:	4659      	mov	r1, fp
 8002040:	018b      	lsls	r3, r1, #6
 8002042:	4651      	mov	r1, sl
 8002044:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002048:	4651      	mov	r1, sl
 800204a:	018a      	lsls	r2, r1, #6
 800204c:	4651      	mov	r1, sl
 800204e:	ebb2 0801 	subs.w	r8, r2, r1
 8002052:	4659      	mov	r1, fp
 8002054:	eb63 0901 	sbc.w	r9, r3, r1
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002064:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002068:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800206c:	4690      	mov	r8, r2
 800206e:	4699      	mov	r9, r3
 8002070:	4623      	mov	r3, r4
 8002072:	eb18 0303 	adds.w	r3, r8, r3
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	462b      	mov	r3, r5
 800207a:	eb49 0303 	adc.w	r3, r9, r3
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800208c:	4629      	mov	r1, r5
 800208e:	024b      	lsls	r3, r1, #9
 8002090:	4621      	mov	r1, r4
 8002092:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002096:	4621      	mov	r1, r4
 8002098:	024a      	lsls	r2, r1, #9
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020a2:	2200      	movs	r2, #0
 80020a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80020a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020ac:	f7fe f900 	bl	80002b0 <__aeabi_uldivmod>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4613      	mov	r3, r2
 80020b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020ba:	e065      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x420>
 80020bc:	40023800 	.word	0x40023800
 80020c0:	00f42400 	.word	0x00f42400
 80020c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c8:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	099b      	lsrs	r3, r3, #6
 80020ce:	2200      	movs	r2, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	4611      	mov	r1, r2
 80020d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020d8:	653b      	str	r3, [r7, #80]	; 0x50
 80020da:	2300      	movs	r3, #0
 80020dc:	657b      	str	r3, [r7, #84]	; 0x54
 80020de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80020e2:	4642      	mov	r2, r8
 80020e4:	464b      	mov	r3, r9
 80020e6:	f04f 0000 	mov.w	r0, #0
 80020ea:	f04f 0100 	mov.w	r1, #0
 80020ee:	0159      	lsls	r1, r3, #5
 80020f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020f4:	0150      	lsls	r0, r2, #5
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4641      	mov	r1, r8
 80020fc:	1a51      	subs	r1, r2, r1
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	4649      	mov	r1, r9
 8002102:	eb63 0301 	sbc.w	r3, r3, r1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002114:	4659      	mov	r1, fp
 8002116:	018b      	lsls	r3, r1, #6
 8002118:	4651      	mov	r1, sl
 800211a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800211e:	4651      	mov	r1, sl
 8002120:	018a      	lsls	r2, r1, #6
 8002122:	4651      	mov	r1, sl
 8002124:	1a54      	subs	r4, r2, r1
 8002126:	4659      	mov	r1, fp
 8002128:	eb63 0501 	sbc.w	r5, r3, r1
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	00eb      	lsls	r3, r5, #3
 8002136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800213a:	00e2      	lsls	r2, r4, #3
 800213c:	4614      	mov	r4, r2
 800213e:	461d      	mov	r5, r3
 8002140:	4643      	mov	r3, r8
 8002142:	18e3      	adds	r3, r4, r3
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	464b      	mov	r3, r9
 8002148:	eb45 0303 	adc.w	r3, r5, r3
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800215a:	4629      	mov	r1, r5
 800215c:	028b      	lsls	r3, r1, #10
 800215e:	4621      	mov	r1, r4
 8002160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002164:	4621      	mov	r1, r4
 8002166:	028a      	lsls	r2, r1, #10
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002170:	2200      	movs	r2, #0
 8002172:	64bb      	str	r3, [r7, #72]	; 0x48
 8002174:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002176:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800217a:	f7fe f899 	bl	80002b0 <__aeabi_uldivmod>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4613      	mov	r3, r2
 8002184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	0f1b      	lsrs	r3, r3, #28
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800219a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021a6:	e003      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80021aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	37b8      	adds	r7, #184	; 0xb8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	00f42400 	.word	0x00f42400

080021c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e28d      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8083 	beq.w	80022ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021e8:	4b94      	ldr	r3, [pc, #592]	; (800243c <HAL_RCC_OscConfig+0x274>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d019      	beq.n	8002228 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021f4:	4b91      	ldr	r3, [pc, #580]	; (800243c <HAL_RCC_OscConfig+0x274>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002200:	4b8e      	ldr	r3, [pc, #568]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800220c:	d00c      	beq.n	8002228 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220e:	4b8b      	ldr	r3, [pc, #556]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d112      	bne.n	8002240 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221a:	4b88      	ldr	r3, [pc, #544]	; (800243c <HAL_RCC_OscConfig+0x274>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002226:	d10b      	bne.n	8002240 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	4b84      	ldr	r3, [pc, #528]	; (800243c <HAL_RCC_OscConfig+0x274>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d05b      	beq.n	80022ec <HAL_RCC_OscConfig+0x124>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d157      	bne.n	80022ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e25a      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002248:	d106      	bne.n	8002258 <HAL_RCC_OscConfig+0x90>
 800224a:	4b7c      	ldr	r3, [pc, #496]	; (800243c <HAL_RCC_OscConfig+0x274>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7b      	ldr	r2, [pc, #492]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e01d      	b.n	8002294 <HAL_RCC_OscConfig+0xcc>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0xb4>
 8002262:	4b76      	ldr	r3, [pc, #472]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a75      	ldr	r2, [pc, #468]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b73      	ldr	r3, [pc, #460]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a72      	ldr	r2, [pc, #456]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0xcc>
 800227c:	4b6f      	ldr	r3, [pc, #444]	; (800243c <HAL_RCC_OscConfig+0x274>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a6e      	ldr	r2, [pc, #440]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b6c      	ldr	r3, [pc, #432]	; (800243c <HAL_RCC_OscConfig+0x274>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6b      	ldr	r2, [pc, #428]	; (800243c <HAL_RCC_OscConfig+0x274>)
 800228e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe fe0c 	bl	8000eb8 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a4:	f7fe fe08 	bl	8000eb8 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e21f      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b61      	ldr	r3, [pc, #388]	; (800243c <HAL_RCC_OscConfig+0x274>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0xdc>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe fdf8 	bl	8000eb8 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fdf4 	bl	8000eb8 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e20b      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	4b57      	ldr	r3, [pc, #348]	; (800243c <HAL_RCC_OscConfig+0x274>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x104>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d06f      	beq.n	80023da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022fa:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCC_OscConfig+0x274>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b00      	cmp	r3, #0
 8002304:	d017      	beq.n	8002336 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002306:	4b4d      	ldr	r3, [pc, #308]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800230e:	2b08      	cmp	r3, #8
 8002310:	d105      	bne.n	800231e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d11c      	bne.n	8002364 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232a:	4b44      	ldr	r3, [pc, #272]	; (800243c <HAL_RCC_OscConfig+0x274>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d116      	bne.n	8002364 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	4b41      	ldr	r3, [pc, #260]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_RCC_OscConfig+0x186>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e1d3      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4937      	ldr	r1, [pc, #220]	; (800243c <HAL_RCC_OscConfig+0x274>)
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	e03a      	b.n	80023da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236c:	4b34      	ldr	r3, [pc, #208]	; (8002440 <HAL_RCC_OscConfig+0x278>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7fe fda1 	bl	8000eb8 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800237a:	f7fe fd9d 	bl	8000eb8 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e1b4      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_OscConfig+0x274>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002398:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_RCC_OscConfig+0x274>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4925      	ldr	r1, [pc, #148]	; (800243c <HAL_RCC_OscConfig+0x274>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]
 80023ac:	e015      	b.n	80023da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ae:	4b24      	ldr	r3, [pc, #144]	; (8002440 <HAL_RCC_OscConfig+0x278>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fd80 	bl	8000eb8 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023bc:	f7fe fd7c 	bl	8000eb8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e193      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_RCC_OscConfig+0x274>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d036      	beq.n	8002454 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d016      	beq.n	800241c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_RCC_OscConfig+0x27c>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7fe fd60 	bl	8000eb8 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023fc:	f7fe fd5c 	bl	8000eb8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e173      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x234>
 800241a:	e01b      	b.n	8002454 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_OscConfig+0x27c>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7fe fd49 	bl	8000eb8 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002428:	e00e      	b.n	8002448 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242a:	f7fe fd45 	bl	8000eb8 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d907      	bls.n	8002448 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e15c      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
 800243c:	40023800 	.word	0x40023800
 8002440:	42470000 	.word	0x42470000
 8002444:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	4b8a      	ldr	r3, [pc, #552]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 800244a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1ea      	bne.n	800242a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8097 	beq.w	8002590 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002466:	4b83      	ldr	r3, [pc, #524]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10f      	bne.n	8002492 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	4b7f      	ldr	r3, [pc, #508]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a7e      	ldr	r2, [pc, #504]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248e:	2301      	movs	r3, #1
 8002490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	4b79      	ldr	r3, [pc, #484]	; (8002678 <HAL_RCC_OscConfig+0x4b0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d118      	bne.n	80024d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249e:	4b76      	ldr	r3, [pc, #472]	; (8002678 <HAL_RCC_OscConfig+0x4b0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a75      	ldr	r2, [pc, #468]	; (8002678 <HAL_RCC_OscConfig+0x4b0>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024aa:	f7fe fd05 	bl	8000eb8 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b2:	f7fe fd01 	bl	8000eb8 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e118      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	4b6c      	ldr	r3, [pc, #432]	; (8002678 <HAL_RCC_OscConfig+0x4b0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x31e>
 80024d8:	4b66      	ldr	r3, [pc, #408]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	4a65      	ldr	r2, [pc, #404]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6713      	str	r3, [r2, #112]	; 0x70
 80024e4:	e01c      	b.n	8002520 <HAL_RCC_OscConfig+0x358>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x340>
 80024ee:	4b61      	ldr	r3, [pc, #388]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a60      	ldr	r2, [pc, #384]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	4b5e      	ldr	r3, [pc, #376]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a5d      	ldr	r2, [pc, #372]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0x358>
 8002508:	4b5a      	ldr	r3, [pc, #360]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4a59      	ldr	r2, [pc, #356]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	6713      	str	r3, [r2, #112]	; 0x70
 8002514:	4b57      	ldr	r3, [pc, #348]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a56      	ldr	r2, [pc, #344]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 800251a:	f023 0304 	bic.w	r3, r3, #4
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7fe fcc6 	bl	8000eb8 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252e:	e00a      	b.n	8002546 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002530:	f7fe fcc2 	bl	8000eb8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	; 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e0d7      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002546:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0ee      	beq.n	8002530 <HAL_RCC_OscConfig+0x368>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7fe fcb0 	bl	8000eb8 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255a:	e00a      	b.n	8002572 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255c:	f7fe fcac 	bl	8000eb8 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e0c1      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002572:	4b40      	ldr	r3, [pc, #256]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ee      	bne.n	800255c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800257e:	7dfb      	ldrb	r3, [r7, #23]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	4a3a      	ldr	r2, [pc, #232]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800258e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80ad 	beq.w	80026f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800259a:	4b36      	ldr	r3, [pc, #216]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d060      	beq.n	8002668 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d145      	bne.n	800263a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ae:	4b33      	ldr	r3, [pc, #204]	; (800267c <HAL_RCC_OscConfig+0x4b4>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fc80 	bl	8000eb8 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fc7c 	bl	8000eb8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e093      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	4b29      	ldr	r3, [pc, #164]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	019b      	lsls	r3, r3, #6
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	3b01      	subs	r3, #1
 80025f4:	041b      	lsls	r3, r3, #16
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	061b      	lsls	r3, r3, #24
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	071b      	lsls	r3, r3, #28
 8002606:	491b      	ldr	r1, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_RCC_OscConfig+0x4b4>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe fc51 	bl	8000eb8 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe fc4d 	bl	8000eb8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e064      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x452>
 8002638:	e05c      	b.n	80026f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <HAL_RCC_OscConfig+0x4b4>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fc3a 	bl	8000eb8 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe fc36 	bl	8000eb8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e04d      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_RCC_OscConfig+0x4ac>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x480>
 8002666:	e045      	b.n	80026f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d107      	bne.n	8002680 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e040      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
 8002674:	40023800 	.word	0x40023800
 8002678:	40007000 	.word	0x40007000
 800267c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002680:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <HAL_RCC_OscConfig+0x538>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d030      	beq.n	80026f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d129      	bne.n	80026f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d122      	bne.n	80026f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026b0:	4013      	ands	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d119      	bne.n	80026f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	3b01      	subs	r3, #1
 80026ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d10f      	bne.n	80026f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800

08002704 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e022      	b.n	800275c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7fe f983 	bl	8000a34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2203      	movs	r2, #3
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f814 	bl	8002764 <HAL_SD_InitCard>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e00a      	b.n	800275c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002764:	b5b0      	push	{r4, r5, r7, lr}
 8002766:	b08e      	sub	sp, #56	; 0x38
 8002768:	af04      	add	r7, sp, #16
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002780:	2376      	movs	r3, #118	; 0x76
 8002782:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681d      	ldr	r5, [r3, #0]
 8002788:	466c      	mov	r4, sp
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002796:	f107 0308 	add.w	r3, r7, #8
 800279a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800279c:	4628      	mov	r0, r5
 800279e:	f001 fbfd 	bl	8003f9c <SDIO_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80027a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e04f      	b.n	8002854 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80027b4:	4b29      	ldr	r3, [pc, #164]	; (800285c <HAL_SD_InitCard+0xf8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 fc35 	bl	800402e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_SD_InitCard+0xf8>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80027ca:	2002      	movs	r0, #2
 80027cc:	f7fe fb80 	bl	8000ed0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 ff03 	bl	80035dc <SD_PowerON>
 80027d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e02e      	b.n	8002854 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fe22 	bl	8003440 <SD_InitCard>
 80027fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00b      	beq.n	800281c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e01b      	b.n	8002854 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002824:	4618      	mov	r0, r3
 8002826:	f001 fc94 	bl	8004152 <SDMMC_CmdBlockLength>
 800282a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00f      	beq.n	8002852 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <HAL_SD_InitCard+0xfc>)
 8002838:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3728      	adds	r7, #40	; 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bdb0      	pop	{r4, r5, r7, pc}
 800285c:	422580a0 	.word	0x422580a0
 8002860:	004005ff 	.word	0x004005ff

08002864 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b092      	sub	sp, #72	; 0x48
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002872:	f7fe fb21 	bl	8000eb8 <HAL_GetTick>
 8002876:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d107      	bne.n	8002896 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e1bd      	b.n	8002c12 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f040 81b0 	bne.w	8002c04 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80028aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	441a      	add	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d907      	bls.n	80028c8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e1a4      	b.n	8002c12 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2203      	movs	r2, #3
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2200      	movs	r2, #0
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d002      	beq.n	80028e6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80028e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e2:	025b      	lsls	r3, r3, #9
 80028e4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ea:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	025b      	lsls	r3, r3, #9
 80028f0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80028f2:	2390      	movs	r3, #144	; 0x90
 80028f4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80028f6:	2302      	movs	r3, #2
 80028f8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80028fe:	2301      	movs	r3, #1
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f107 0214 	add.w	r2, r7, #20
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f001 fbf4 	bl	80040fa <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d90a      	bls.n	800292e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2202      	movs	r2, #2
 800291c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002924:	4618      	mov	r0, r3
 8002926:	f001 fc58 	bl	80041da <SDMMC_CmdReadMultiBlock>
 800292a:	6478      	str	r0, [r7, #68]	; 0x44
 800292c:	e009      	b.n	8002942 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800293a:	4618      	mov	r0, r3
 800293c:	f001 fc2b 	bl	8004196 <SDMMC_CmdReadSingleBlock>
 8002940:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002944:	2b00      	cmp	r3, #0
 8002946:	d012      	beq.n	800296e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a7a      	ldr	r2, [pc, #488]	; (8002b38 <HAL_SD_ReadBlocks+0x2d4>)
 800294e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002956:	431a      	orrs	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e151      	b.n	8002c12 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002972:	e061      	b.n	8002a38 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d03c      	beq.n	80029fc <HAL_SD_ReadBlocks+0x198>
 8002982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d039      	beq.n	80029fc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002988:	2300      	movs	r3, #0
 800298a:	643b      	str	r3, [r7, #64]	; 0x40
 800298c:	e033      	b.n	80029f6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f001 fb2d 	bl	8003ff2 <SDIO_ReadFIFO>
 8002998:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	b2da      	uxtb	r2, r3
 800299e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80029a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a4:	3301      	adds	r3, #1
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80029a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029aa:	3b01      	subs	r3, #1
 80029ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ba:	3301      	adds	r3, #1
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80029be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c0:	3b01      	subs	r3, #1
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80029ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d0:	3301      	adds	r3, #1
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80029d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d6:	3b01      	subs	r3, #1
 80029d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	0e1b      	lsrs	r3, r3, #24
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80029e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e6:	3301      	adds	r3, #1
 80029e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80029ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ec:	3b01      	subs	r3, #1
 80029ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80029f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f2:	3301      	adds	r3, #1
 80029f4:	643b      	str	r3, [r7, #64]	; 0x40
 80029f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f8:	2b07      	cmp	r3, #7
 80029fa:	d9c8      	bls.n	800298e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80029fc:	f7fe fa5c 	bl	8000eb8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d902      	bls.n	8002a12 <HAL_SD_ReadBlocks+0x1ae>
 8002a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d112      	bne.n	8002a38 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a48      	ldr	r2, [pc, #288]	; (8002b38 <HAL_SD_ReadBlocks+0x2d4>)
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0ec      	b.n	8002c12 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d096      	beq.n	8002974 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d022      	beq.n	8002a9a <HAL_SD_ReadBlocks+0x236>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d91f      	bls.n	8002a9a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d01b      	beq.n	8002a9a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 fc1e 	bl	80042a8 <SDMMC_CmdStopTransfer>
 8002a6c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d012      	beq.n	8002a9a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a2f      	ldr	r2, [pc, #188]	; (8002b38 <HAL_SD_ReadBlocks+0x2d4>)
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a82:	431a      	orrs	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0bb      	b.n	8002c12 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d012      	beq.n	8002ace <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <HAL_SD_ReadBlocks+0x2d4>)
 8002aae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	f043 0208 	orr.w	r2, r3, #8
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0a1      	b.n	8002c12 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d012      	beq.n	8002b02 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a15      	ldr	r2, [pc, #84]	; (8002b38 <HAL_SD_ReadBlocks+0x2d4>)
 8002ae2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	f043 0202 	orr.w	r2, r3, #2
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e087      	b.n	8002c12 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d064      	beq.n	8002bda <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <HAL_SD_ReadBlocks+0x2d4>)
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e06d      	b.n	8002c12 <HAL_SD_ReadBlocks+0x3ae>
 8002b36:	bf00      	nop
 8002b38:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f001 fa56 	bl	8003ff2 <SDIO_ReadFIFO>
 8002b46:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b52:	3301      	adds	r3, #1
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b64:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b68:	3301      	adds	r3, #1
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7e:	3301      	adds	r3, #1
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b84:	3b01      	subs	r3, #1
 8002b86:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	0e1b      	lsrs	r3, r3, #24
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b94:	3301      	adds	r3, #1
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002b9e:	f7fe f98b 	bl	8000eb8 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d902      	bls.n	8002bb4 <HAL_SD_ReadBlocks+0x350>
 8002bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d112      	bne.n	8002bda <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_SD_ReadBlocks+0x3b8>)
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e01b      	b.n	8002c12 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HAL_SD_ReadBlocks+0x38a>
 8002be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1a6      	bne.n	8002b3c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f240 523a 	movw	r2, #1338	; 0x53a
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e006      	b.n	8002c12 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3748      	adds	r7, #72	; 0x48
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	004005ff 	.word	0x004005ff

08002c20 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b092      	sub	sp, #72	; 0x48
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002c2e:	f7fe f943 	bl	8000eb8 <HAL_GetTick>
 8002c32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d107      	bne.n	8002c52 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e165      	b.n	8002f1e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	f040 8158 	bne.w	8002f10 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	441a      	add	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d907      	bls.n	8002c84 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e14c      	b.n	8002f1e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2203      	movs	r2, #3
 8002c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2200      	movs	r2, #0
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d002      	beq.n	8002ca2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	025b      	lsls	r3, r3, #9
 8002ca0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	025b      	lsls	r3, r3, #9
 8002cac:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002cae:	2390      	movs	r3, #144	; 0x90
 8002cb0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f107 0218 	add.w	r2, r7, #24
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 fa16 	bl	80040fa <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d90a      	bls.n	8002cea <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f001 fabe 	bl	8004262 <SDMMC_CmdWriteMultiBlock>
 8002ce6:	6478      	str	r0, [r7, #68]	; 0x44
 8002ce8:	e009      	b.n	8002cfe <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2210      	movs	r2, #16
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f001 fa91 	bl	800421e <SDMMC_CmdWriteSingleBlock>
 8002cfc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d012      	beq.n	8002d2a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a87      	ldr	r2, [pc, #540]	; (8002f28 <HAL_SD_WriteBlocks+0x308>)
 8002d0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d12:	431a      	orrs	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e0f9      	b.n	8002f1e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002d2e:	e065      	b.n	8002dfc <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d040      	beq.n	8002dc0 <HAL_SD_WriteBlocks+0x1a0>
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d03d      	beq.n	8002dc0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	643b      	str	r3, [r7, #64]	; 0x40
 8002d48:	e037      	b.n	8002dba <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d52:	3301      	adds	r3, #1
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	021a      	lsls	r2, r3, #8
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d70:	3b01      	subs	r3, #1
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d82:	3301      	adds	r3, #1
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	061a      	lsls	r2, r3, #24
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da0:	3b01      	subs	r3, #1
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f107 0214 	add.w	r2, r7, #20
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 f92c 	bl	800400c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db6:	3301      	adds	r3, #1
 8002db8:	643b      	str	r3, [r7, #64]	; 0x40
 8002dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbc:	2b07      	cmp	r3, #7
 8002dbe:	d9c4      	bls.n	8002d4a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002dc0:	f7fe f87a 	bl	8000eb8 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d902      	bls.n	8002dd6 <HAL_SD_WriteBlocks+0x1b6>
 8002dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d112      	bne.n	8002dfc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a53      	ldr	r2, [pc, #332]	; (8002f28 <HAL_SD_WriteBlocks+0x308>)
 8002ddc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e090      	b.n	8002f1e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e02:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d092      	beq.n	8002d30 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d022      	beq.n	8002e5e <HAL_SD_WriteBlocks+0x23e>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d91f      	bls.n	8002e5e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d01b      	beq.n	8002e5e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 fa3c 	bl	80042a8 <SDMMC_CmdStopTransfer>
 8002e30:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d012      	beq.n	8002e5e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a3a      	ldr	r2, [pc, #232]	; (8002f28 <HAL_SD_WriteBlocks+0x308>)
 8002e3e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e46:	431a      	orrs	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e05f      	b.n	8002f1e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d012      	beq.n	8002e92 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a2d      	ldr	r2, [pc, #180]	; (8002f28 <HAL_SD_WriteBlocks+0x308>)
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	f043 0208 	orr.w	r2, r3, #8
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e045      	b.n	8002f1e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d012      	beq.n	8002ec6 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a20      	ldr	r2, [pc, #128]	; (8002f28 <HAL_SD_WriteBlocks+0x308>)
 8002ea6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	f043 0202 	orr.w	r2, r3, #2
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e02b      	b.n	8002f1e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d012      	beq.n	8002efa <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <HAL_SD_WriteBlocks+0x308>)
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	f043 0210 	orr.w	r2, r3, #16
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e011      	b.n	8002f1e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e006      	b.n	8002f1e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3748      	adds	r7, #72	; 0x48
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	004005ff 	.word	0x004005ff

08002f2c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f3a:	0f9b      	lsrs	r3, r3, #30
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f46:	0e9b      	lsrs	r3, r3, #26
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f58:	0e1b      	lsrs	r3, r3, #24
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f8c:	0d1b      	lsrs	r3, r3, #20
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f98:	0c1b      	lsrs	r3, r3, #16
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002faa:	0bdb      	lsrs	r3, r3, #15
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fbc:	0b9b      	lsrs	r3, r3, #14
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fce:	0b5b      	lsrs	r3, r3, #13
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe0:	0b1b      	lsrs	r3, r3, #12
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d163      	bne.n	80030c4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003000:	009a      	lsls	r2, r3, #2
 8003002:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003006:	4013      	ands	r3, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800300c:	0f92      	lsrs	r2, r2, #30
 800300e:	431a      	orrs	r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003018:	0edb      	lsrs	r3, r3, #27
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	b2da      	uxtb	r2, r3
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302a:	0e1b      	lsrs	r3, r3, #24
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	b2da      	uxtb	r2, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303c:	0d5b      	lsrs	r3, r3, #21
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	b2da      	uxtb	r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800304e:	0c9b      	lsrs	r3, r3, #18
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	b2da      	uxtb	r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003060:	0bdb      	lsrs	r3, r3, #15
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	b2da      	uxtb	r2, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	7e1b      	ldrb	r3, [r3, #24]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	3302      	adds	r3, #2
 8003084:	2201      	movs	r2, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800308e:	fb03 f202 	mul.w	r2, r3, r2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	7a1b      	ldrb	r3, [r3, #8]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	2201      	movs	r2, #1
 80030a2:	409a      	lsls	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80030b0:	0a52      	lsrs	r2, r2, #9
 80030b2:	fb03 f202 	mul.w	r2, r3, r2
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c0:	661a      	str	r2, [r3, #96]	; 0x60
 80030c2:	e031      	b.n	8003128 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d11d      	bne.n	8003108 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030d0:	041b      	lsls	r3, r3, #16
 80030d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030da:	0c1b      	lsrs	r3, r3, #16
 80030dc:	431a      	orrs	r2, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	3301      	adds	r3, #1
 80030e8:	029a      	lsls	r2, r3, #10
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	661a      	str	r2, [r3, #96]	; 0x60
 8003106:	e00f      	b.n	8003128 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_SD_GetCardCSD+0x344>)
 800310e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e09d      	b.n	8003264 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800312c:	0b9b      	lsrs	r3, r3, #14
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	b2da      	uxtb	r2, r3
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800313e:	09db      	lsrs	r3, r3, #7
 8003140:	b2db      	uxtb	r3, r3
 8003142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003146:	b2da      	uxtb	r2, r3
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003156:	b2da      	uxtb	r2, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	0fdb      	lsrs	r3, r3, #31
 8003162:	b2da      	uxtb	r2, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	0f5b      	lsrs	r3, r3, #29
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	b2da      	uxtb	r2, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	0e9b      	lsrs	r3, r3, #26
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	b2da      	uxtb	r2, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	0d9b      	lsrs	r3, r3, #22
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	b2da      	uxtb	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	0d5b      	lsrs	r3, r3, #21
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	0c1b      	lsrs	r3, r3, #16
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	0bdb      	lsrs	r3, r3, #15
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	0b9b      	lsrs	r3, r3, #14
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	0b5b      	lsrs	r3, r3, #13
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	b2da      	uxtb	r2, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	0b1b      	lsrs	r3, r3, #12
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	b2da      	uxtb	r2, r3
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	0a9b      	lsrs	r3, r3, #10
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	b2da      	uxtb	r2, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	b2da      	uxtb	r2, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003252:	b2da      	uxtb	r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	004005ff 	.word	0x004005ff

08003274 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80032cc:	b5b0      	push	{r4, r5, r7, lr}
 80032ce:	b08e      	sub	sp, #56	; 0x38
 80032d0:	af04      	add	r7, sp, #16
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2203      	movs	r2, #3
 80032e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d02e      	beq.n	800334a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f2:	d106      	bne.n	8003302 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38
 8003300:	e029      	b.n	8003356 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003308:	d10a      	bne.n	8003320 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fa1c 	bl	8003748 <SD_WideBus_Enable>
 8003310:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	639a      	str	r2, [r3, #56]	; 0x38
 800331e:	e01a      	b.n	8003356 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fa59 	bl	80037de <SD_WideBus_Disable>
 800332c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	639a      	str	r2, [r3, #56]	; 0x38
 800333a:	e00c      	b.n	8003356 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
 8003348:	e005      	b.n	8003356 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00b      	beq.n	8003376 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a26      	ldr	r2, [pc, #152]	; (80033fc <HAL_SD_ConfigWideBusOperation+0x130>)
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003374:	e01f      	b.n	80033b6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681d      	ldr	r5, [r3, #0]
 800339c:	466c      	mov	r4, sp
 800339e:	f107 0314 	add.w	r3, r7, #20
 80033a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033aa:	f107 0308 	add.w	r3, r7, #8
 80033ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b0:	4628      	mov	r0, r5
 80033b2:	f000 fdf3 	bl	8003f9c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fec7 	bl	8004152 <SDMMC_CmdBlockLength>
 80033c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00c      	beq.n	80033e6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <HAL_SD_ConfigWideBusOperation+0x130>)
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80033ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3728      	adds	r7, #40	; 0x28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bdb0      	pop	{r4, r5, r7, pc}
 80033fa:	bf00      	nop
 80033fc:	004005ff 	.word	0x004005ff

08003400 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800340c:	f107 030c 	add.w	r3, r7, #12
 8003410:	4619      	mov	r1, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f970 	bl	80036f8 <SD_SendStatus>
 8003418:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	0a5b      	lsrs	r3, r3, #9
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003436:	693b      	ldr	r3, [r7, #16]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003440:	b5b0      	push	{r4, r5, r7, lr}
 8003442:	b094      	sub	sp, #80	; 0x50
 8003444:	af04      	add	r7, sp, #16
 8003446:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003448:	2301      	movs	r3, #1
 800344a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fdfa 	bl	800404a <SDIO_GetPowerState>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800345c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003460:	e0b8      	b.n	80035d4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	2b03      	cmp	r3, #3
 8003468:	d02f      	beq.n	80034ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f001 f824 	bl	80044bc <SDMMC_CmdSendCID>
 8003474:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <SD_InitCard+0x40>
    {
      return errorstate;
 800347c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347e:	e0a9      	b.n	80035d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2100      	movs	r1, #0
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fe24 	bl	80040d4 <SDIO_GetResponse>
 800348c:	4602      	mov	r2, r0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2104      	movs	r1, #4
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fe1b 	bl	80040d4 <SDIO_GetResponse>
 800349e:	4602      	mov	r2, r0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2108      	movs	r1, #8
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fe12 	bl	80040d4 <SDIO_GetResponse>
 80034b0:	4602      	mov	r2, r0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	210c      	movs	r1, #12
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fe09 	bl	80040d4 <SDIO_GetResponse>
 80034c2:	4602      	mov	r2, r0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d00d      	beq.n	80034ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f107 020e 	add.w	r2, r7, #14
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 f82a 	bl	8004536 <SDMMC_CmdSetRelAdd>
 80034e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <SD_InitCard+0xae>
    {
      return errorstate;
 80034ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ec:	e072      	b.n	80035d4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d036      	beq.n	8003564 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80034f6:	89fb      	ldrh	r3, [r7, #14]
 80034f8:	461a      	mov	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003506:	041b      	lsls	r3, r3, #16
 8003508:	4619      	mov	r1, r3
 800350a:	4610      	mov	r0, r2
 800350c:	f000 fff4 	bl	80044f8 <SDMMC_CmdSendCSD>
 8003510:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351a:	e05b      	b.n	80035d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fdd6 	bl	80040d4 <SDIO_GetResponse>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2104      	movs	r1, #4
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fdcd 	bl	80040d4 <SDIO_GetResponse>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2108      	movs	r1, #8
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fdc4 	bl	80040d4 <SDIO_GetResponse>
 800354c:	4602      	mov	r2, r0
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	210c      	movs	r1, #12
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fdbb 	bl	80040d4 <SDIO_GetResponse>
 800355e:	4602      	mov	r2, r0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2104      	movs	r1, #4
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fdb2 	bl	80040d4 <SDIO_GetResponse>
 8003570:	4603      	mov	r3, r0
 8003572:	0d1a      	lsrs	r2, r3, #20
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003578:	f107 0310 	add.w	r3, r7, #16
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fcd4 	bl	8002f2c <HAL_SD_GetCardCSD>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800358a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800358e:	e021      	b.n	80035d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6819      	ldr	r1, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003598:	041b      	lsls	r3, r3, #16
 800359a:	2200      	movs	r2, #0
 800359c:	461c      	mov	r4, r3
 800359e:	4615      	mov	r5, r2
 80035a0:	4622      	mov	r2, r4
 80035a2:	462b      	mov	r3, r5
 80035a4:	4608      	mov	r0, r1
 80035a6:	f000 fea1 	bl	80042ec <SDMMC_CmdSelDesel>
 80035aa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80035ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <SD_InitCard+0x176>
  {
    return errorstate;
 80035b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b4:	e00e      	b.n	80035d4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681d      	ldr	r5, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	466c      	mov	r4, sp
 80035be:	f103 0210 	add.w	r2, r3, #16
 80035c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80035c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035c8:	3304      	adds	r3, #4
 80035ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035cc:	4628      	mov	r0, r5
 80035ce:	f000 fce5 	bl	8003f9c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3740      	adds	r7, #64	; 0x40
 80035d8:	46bd      	mov	sp, r7
 80035da:	bdb0      	pop	{r4, r5, r7, pc}

080035dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	2300      	movs	r3, #0
 80035ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fe9c 	bl	8004332 <SDMMC_CmdGoIdleState>
 80035fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	e072      	b.n	80036ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 feaf 	bl	800436e <SDMMC_CmdOperCond>
 8003610:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fe85 	bl	8004332 <SDMMC_CmdGoIdleState>
 8003628:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	e05b      	b.n	80036ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	2b01      	cmp	r3, #1
 8003640:	d137      	bne.n	80036b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f000 feaf 	bl	80043ac <SDMMC_CmdAppCommand>
 800364e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d02d      	beq.n	80036b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003656:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800365a:	e047      	b.n	80036ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fea2 	bl	80043ac <SDMMC_CmdAppCommand>
 8003668:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <SD_PowerON+0x98>
    {
      return errorstate;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	e03b      	b.n	80036ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	491e      	ldr	r1, [pc, #120]	; (80036f4 <SD_PowerON+0x118>)
 800367a:	4618      	mov	r0, r3
 800367c:	f000 feb8 	bl	80043f0 <SDMMC_CmdAppOperCommand>
 8003680:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003688:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800368c:	e02e      	b.n	80036ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fd1d 	bl	80040d4 <SDIO_GetResponse>
 800369a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	0fdb      	lsrs	r3, r3, #31
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <SD_PowerON+0xcc>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <SD_PowerON+0xce>
 80036a8:	2300      	movs	r3, #0
 80036aa:	613b      	str	r3, [r7, #16]

    count++;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	3301      	adds	r3, #1
 80036b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d802      	bhi.n	80036c2 <SD_PowerON+0xe6>
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0cc      	beq.n	800365c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d902      	bls.n	80036d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80036cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036d0:	e00c      	b.n	80036ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44
 80036e2:	e002      	b.n	80036ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	c1100000 	.word	0xc1100000

080036f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003708:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800370c:	e018      	b.n	8003740 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 ff2c 	bl	8004578 <SDMMC_CmdSendStatus>
 8003720:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	e009      	b.n	8003740 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fcce 	bl	80040d4 <SDIO_GetResponse>
 8003738:	4602      	mov	r2, r0
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	2300      	movs	r3, #0
 8003756:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fcb8 	bl	80040d4 <SDIO_GetResponse>
 8003764:	4603      	mov	r3, r0
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800376e:	d102      	bne.n	8003776 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003770:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003774:	e02f      	b.n	80037d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003776:	f107 030c 	add.w	r3, r7, #12
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f879 	bl	8003874 <SD_FindSCR>
 8003782:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	e023      	b.n	80037d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01c      	beq.n	80037d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f000 fe01 	bl	80043ac <SDMMC_CmdAppCommand>
 80037aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	e00f      	b.n	80037d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2102      	movs	r1, #2
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fe3a 	bl	8004436 <SDMMC_CmdBusWidth>
 80037c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	e003      	b.n	80037d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e001      	b.n	80037d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80037d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fc6d 	bl	80040d4 <SDIO_GetResponse>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003804:	d102      	bne.n	800380c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003806:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800380a:	e02f      	b.n	800386c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	4619      	mov	r1, r3
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f82e 	bl	8003874 <SD_FindSCR>
 8003818:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	e023      	b.n	800386c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01c      	beq.n	8003868 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003836:	041b      	lsls	r3, r3, #16
 8003838:	4619      	mov	r1, r3
 800383a:	4610      	mov	r0, r2
 800383c:	f000 fdb6 	bl	80043ac <SDMMC_CmdAppCommand>
 8003840:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	e00f      	b.n	800386c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fdef 	bl	8004436 <SDMMC_CmdBusWidth>
 8003858:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	e003      	b.n	800386c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003864:	2300      	movs	r3, #0
 8003866:	e001      	b.n	800386c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003868:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b08f      	sub	sp, #60	; 0x3c
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800387e:	f7fd fb1b 	bl	8000eb8 <HAL_GetTick>
 8003882:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2108      	movs	r1, #8
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fc59 	bl	8004152 <SDMMC_CmdBlockLength>
 80038a0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <SD_FindSCR+0x38>
  {
    return errorstate;
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	e0b2      	b.n	8003a12 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f000 fd77 	bl	80043ac <SDMMC_CmdAppCommand>
 80038be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <SD_FindSCR+0x56>
  {
    return errorstate;
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	e0a3      	b.n	8003a12 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
 80038ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80038d0:	2308      	movs	r3, #8
 80038d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80038d4:	2330      	movs	r3, #48	; 0x30
 80038d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80038d8:	2302      	movs	r3, #2
 80038da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80038dc:	2300      	movs	r3, #0
 80038de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f107 0210 	add.w	r2, r7, #16
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fc03 	bl	80040fa <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fdbe 	bl	800447a <SDMMC_CmdSendSCR>
 80038fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	d02a      	beq.n	800395c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	e083      	b.n	8003a12 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00f      	beq.n	8003938 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6819      	ldr	r1, [r3, #0]
 800391c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	f107 0208 	add.w	r2, r7, #8
 8003924:	18d4      	adds	r4, r2, r3
 8003926:	4608      	mov	r0, r1
 8003928:	f000 fb63 	bl	8003ff2 <SDIO_ReadFIFO>
 800392c:	4603      	mov	r3, r0
 800392e:	6023      	str	r3, [r4, #0]
      index++;
 8003930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003932:	3301      	adds	r3, #1
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
 8003936:	e006      	b.n	8003946 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d012      	beq.n	800396c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003946:	f7fd fab7 	bl	8000eb8 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d102      	bne.n	800395c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003956:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800395a:	e05a      	b.n	8003a12 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003962:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0cf      	beq.n	800390a <SD_FindSCR+0x96>
 800396a:	e000      	b.n	800396e <SD_FindSCR+0xfa>
      break;
 800396c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2208      	movs	r2, #8
 8003982:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003984:	2308      	movs	r3, #8
 8003986:	e044      	b.n	8003a12 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2202      	movs	r2, #2
 800399c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800399e:	2302      	movs	r3, #2
 80039a0:	e037      	b.n	8003a12 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2220      	movs	r2, #32
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80039b8:	2320      	movs	r3, #32
 80039ba:	e02a      	b.n	8003a12 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	061a      	lsls	r2, r3, #24
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	0e1b      	lsrs	r3, r3, #24
 80039e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	601a      	str	r2, [r3, #0]
    scr++;
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	3304      	adds	r3, #4
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	061a      	lsls	r2, r3, #24
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a04:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	0e1b      	lsrs	r3, r3, #24
 8003a0a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	373c      	adds	r7, #60	; 0x3c
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd90      	pop	{r4, r7, pc}

08003a1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e03f      	b.n	8003aac <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d106      	bne.n	8003a46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7fd f89d 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2224      	movs	r2, #36	; 0x24
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f828 	bl	8003ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab8:	b0c0      	sub	sp, #256	; 0x100
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	68d9      	ldr	r1, [r3, #12]
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	ea40 0301 	orr.w	r3, r0, r1
 8003adc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b0c:	f021 010c 	bic.w	r1, r1, #12
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2e:	6999      	ldr	r1, [r3, #24]
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	ea40 0301 	orr.w	r3, r0, r1
 8003b3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b8f      	ldr	r3, [pc, #572]	; (8003d80 <UART_SetConfig+0x2cc>)
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d005      	beq.n	8003b54 <UART_SetConfig+0xa0>
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4b8d      	ldr	r3, [pc, #564]	; (8003d84 <UART_SetConfig+0x2d0>)
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d104      	bne.n	8003b5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b54:	f7fd fdca 	bl	80016ec <HAL_RCC_GetPCLK2Freq>
 8003b58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b5c:	e003      	b.n	8003b66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b5e:	f7fd fdb1 	bl	80016c4 <HAL_RCC_GetPCLK1Freq>
 8003b62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b70:	f040 810c 	bne.w	8003d8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b86:	4622      	mov	r2, r4
 8003b88:	462b      	mov	r3, r5
 8003b8a:	1891      	adds	r1, r2, r2
 8003b8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b8e:	415b      	adcs	r3, r3
 8003b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b96:	4621      	mov	r1, r4
 8003b98:	eb12 0801 	adds.w	r8, r2, r1
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	eb43 0901 	adc.w	r9, r3, r1
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bb6:	4690      	mov	r8, r2
 8003bb8:	4699      	mov	r9, r3
 8003bba:	4623      	mov	r3, r4
 8003bbc:	eb18 0303 	adds.w	r3, r8, r3
 8003bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bc4:	462b      	mov	r3, r5
 8003bc6:	eb49 0303 	adc.w	r3, r9, r3
 8003bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003be2:	460b      	mov	r3, r1
 8003be4:	18db      	adds	r3, r3, r3
 8003be6:	653b      	str	r3, [r7, #80]	; 0x50
 8003be8:	4613      	mov	r3, r2
 8003bea:	eb42 0303 	adc.w	r3, r2, r3
 8003bee:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bf8:	f7fc fb5a 	bl	80002b0 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4b61      	ldr	r3, [pc, #388]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003c02:	fba3 2302 	umull	r2, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	011c      	lsls	r4, r3, #4
 8003c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	1891      	adds	r1, r2, r2
 8003c22:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c24:	415b      	adcs	r3, r3
 8003c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c32:	4649      	mov	r1, r9
 8003c34:	eb43 0b01 	adc.w	fp, r3, r1
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c4c:	4692      	mov	sl, r2
 8003c4e:	469b      	mov	fp, r3
 8003c50:	4643      	mov	r3, r8
 8003c52:	eb1a 0303 	adds.w	r3, sl, r3
 8003c56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	18db      	adds	r3, r3, r3
 8003c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c7e:	4613      	mov	r3, r2
 8003c80:	eb42 0303 	adc.w	r3, r2, r3
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
 8003c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c8e:	f7fc fb0f 	bl	80002b0 <__aeabi_uldivmod>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4611      	mov	r1, r2
 8003c98:	4b3b      	ldr	r3, [pc, #236]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2264      	movs	r2, #100	; 0x64
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	1acb      	subs	r3, r1, r3
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cae:	4b36      	ldr	r3, [pc, #216]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cbc:	441c      	add	r4, r3
 8003cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ccc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	1891      	adds	r1, r2, r2
 8003cd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cd8:	415b      	adcs	r3, r3
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	1851      	adds	r1, r2, r1
 8003ce4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	414b      	adcs	r3, r1
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cf8:	4659      	mov	r1, fp
 8003cfa:	00cb      	lsls	r3, r1, #3
 8003cfc:	4651      	mov	r1, sl
 8003cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d02:	4651      	mov	r1, sl
 8003d04:	00ca      	lsls	r2, r1, #3
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	189b      	adds	r3, r3, r2
 8003d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d14:	464b      	mov	r3, r9
 8003d16:	460a      	mov	r2, r1
 8003d18:	eb42 0303 	adc.w	r3, r2, r3
 8003d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d34:	460b      	mov	r3, r1
 8003d36:	18db      	adds	r3, r3, r3
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	eb42 0303 	adc.w	r3, r2, r3
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d4a:	f7fc fab1 	bl	80002b0 <__aeabi_uldivmod>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003d54:	fba3 1302 	umull	r1, r3, r3, r2
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	2164      	movs	r1, #100	; 0x64
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	3332      	adds	r3, #50	; 0x32
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	f003 0207 	and.w	r2, r3, #7
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4422      	add	r2, r4
 8003d7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d7c:	e105      	b.n	8003f8a <UART_SetConfig+0x4d6>
 8003d7e:	bf00      	nop
 8003d80:	40011000 	.word	0x40011000
 8003d84:	40011400 	.word	0x40011400
 8003d88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d9e:	4642      	mov	r2, r8
 8003da0:	464b      	mov	r3, r9
 8003da2:	1891      	adds	r1, r2, r2
 8003da4:	6239      	str	r1, [r7, #32]
 8003da6:	415b      	adcs	r3, r3
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
 8003daa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dae:	4641      	mov	r1, r8
 8003db0:	1854      	adds	r4, r2, r1
 8003db2:	4649      	mov	r1, r9
 8003db4:	eb43 0501 	adc.w	r5, r3, r1
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	00eb      	lsls	r3, r5, #3
 8003dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dc6:	00e2      	lsls	r2, r4, #3
 8003dc8:	4614      	mov	r4, r2
 8003dca:	461d      	mov	r5, r3
 8003dcc:	4643      	mov	r3, r8
 8003dce:	18e3      	adds	r3, r4, r3
 8003dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	eb45 0303 	adc.w	r3, r5, r3
 8003dda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	008b      	lsls	r3, r1, #2
 8003dfe:	4621      	mov	r1, r4
 8003e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e04:	4621      	mov	r1, r4
 8003e06:	008a      	lsls	r2, r1, #2
 8003e08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e0c:	f7fc fa50 	bl	80002b0 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4b60      	ldr	r3, [pc, #384]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003e16:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	011c      	lsls	r4, r3, #4
 8003e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e30:	4642      	mov	r2, r8
 8003e32:	464b      	mov	r3, r9
 8003e34:	1891      	adds	r1, r2, r2
 8003e36:	61b9      	str	r1, [r7, #24]
 8003e38:	415b      	adcs	r3, r3
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e40:	4641      	mov	r1, r8
 8003e42:	1851      	adds	r1, r2, r1
 8003e44:	6139      	str	r1, [r7, #16]
 8003e46:	4649      	mov	r1, r9
 8003e48:	414b      	adcs	r3, r1
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e58:	4659      	mov	r1, fp
 8003e5a:	00cb      	lsls	r3, r1, #3
 8003e5c:	4651      	mov	r1, sl
 8003e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e62:	4651      	mov	r1, sl
 8003e64:	00ca      	lsls	r2, r1, #3
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e74:	464b      	mov	r3, r9
 8003e76:	460a      	mov	r2, r1
 8003e78:	eb42 0303 	adc.w	r3, r2, r3
 8003e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e98:	4649      	mov	r1, r9
 8003e9a:	008b      	lsls	r3, r1, #2
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	008a      	lsls	r2, r1, #2
 8003ea6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003eaa:	f7fc fa01 	bl	80002b0 <__aeabi_uldivmod>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	2164      	movs	r1, #100	; 0x64
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	3332      	adds	r3, #50	; 0x32
 8003ec6:	4a34      	ldr	r2, [pc, #208]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed2:	441c      	add	r4, r3
 8003ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ed8:	2200      	movs	r2, #0
 8003eda:	673b      	str	r3, [r7, #112]	; 0x70
 8003edc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ede:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ee2:	4642      	mov	r2, r8
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	1891      	adds	r1, r2, r2
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	415b      	adcs	r3, r3
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	1851      	adds	r1, r2, r1
 8003ef6:	6039      	str	r1, [r7, #0]
 8003ef8:	4649      	mov	r1, r9
 8003efa:	414b      	adcs	r3, r1
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f0a:	4659      	mov	r1, fp
 8003f0c:	00cb      	lsls	r3, r1, #3
 8003f0e:	4651      	mov	r1, sl
 8003f10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f14:	4651      	mov	r1, sl
 8003f16:	00ca      	lsls	r2, r1, #3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4642      	mov	r2, r8
 8003f20:	189b      	adds	r3, r3, r2
 8003f22:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f24:	464b      	mov	r3, r9
 8003f26:	460a      	mov	r2, r1
 8003f28:	eb42 0303 	adc.w	r3, r2, r3
 8003f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	663b      	str	r3, [r7, #96]	; 0x60
 8003f38:	667a      	str	r2, [r7, #100]	; 0x64
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f46:	4649      	mov	r1, r9
 8003f48:	008b      	lsls	r3, r1, #2
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f50:	4641      	mov	r1, r8
 8003f52:	008a      	lsls	r2, r1, #2
 8003f54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f58:	f7fc f9aa 	bl	80002b0 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003f62:	fba3 1302 	umull	r1, r3, r3, r2
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2164      	movs	r1, #100	; 0x64
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	3332      	adds	r3, #50	; 0x32
 8003f74:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4422      	add	r2, r4
 8003f88:	609a      	str	r2, [r3, #8]
}
 8003f8a:	bf00      	nop
 8003f8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f90:	46bd      	mov	sp, r7
 8003f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f96:	bf00      	nop
 8003f98:	51eb851f 	.word	0x51eb851f

08003f9c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	f107 001c 	add.w	r0, r7, #28
 8003faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003fb2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003fb6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003fba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003fbe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003fc2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003fc6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003fd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	b004      	add	sp, #16
 8003ff0:	4770      	bx	lr

08003ff2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2203      	movs	r2, #3
 800403a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0303 	and.w	r3, r3, #3
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004084:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800408a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004090:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80040a0:	f023 030f 	bic.w	r3, r3, #15
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	b2db      	uxtb	r3, r3
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3314      	adds	r3, #20
 80040e2:	461a      	mov	r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	4413      	add	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
}  
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b085      	sub	sp, #20
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004120:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004126:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800412c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004144:	2300      	movs	r3, #0

}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b088      	sub	sp, #32
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004160:	2310      	movs	r3, #16
 8004162:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004164:	2340      	movs	r3, #64	; 0x40
 8004166:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800416c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004170:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004172:	f107 0308 	add.w	r3, r7, #8
 8004176:	4619      	mov	r1, r3
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff ff74 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800417e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004182:	2110      	movs	r1, #16
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fa19 	bl	80045bc <SDMMC_GetCmdResp1>
 800418a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800418c:	69fb      	ldr	r3, [r7, #28]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b088      	sub	sp, #32
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80041a4:	2311      	movs	r3, #17
 80041a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041a8:	2340      	movs	r3, #64	; 0x40
 80041aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041b6:	f107 0308 	add.w	r3, r7, #8
 80041ba:	4619      	mov	r1, r3
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff ff52 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	2111      	movs	r1, #17
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f9f7 	bl	80045bc <SDMMC_GetCmdResp1>
 80041ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041d0:	69fb      	ldr	r3, [r7, #28]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b088      	sub	sp, #32
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80041e8:	2312      	movs	r3, #18
 80041ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041ec:	2340      	movs	r3, #64	; 0x40
 80041ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041fa:	f107 0308 	add.w	r3, r7, #8
 80041fe:	4619      	mov	r1, r3
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ff30 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004206:	f241 3288 	movw	r2, #5000	; 0x1388
 800420a:	2112      	movs	r1, #18
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f9d5 	bl	80045bc <SDMMC_GetCmdResp1>
 8004212:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004214:	69fb      	ldr	r3, [r7, #28]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3720      	adds	r7, #32
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b088      	sub	sp, #32
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800422c:	2318      	movs	r3, #24
 800422e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004230:	2340      	movs	r3, #64	; 0x40
 8004232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800423c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800423e:	f107 0308 	add.w	r3, r7, #8
 8004242:	4619      	mov	r1, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff0e 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	2118      	movs	r1, #24
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f9b3 	bl	80045bc <SDMMC_GetCmdResp1>
 8004256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004258:	69fb      	ldr	r3, [r7, #28]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b088      	sub	sp, #32
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004270:	2319      	movs	r3, #25
 8004272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004274:	2340      	movs	r3, #64	; 0x40
 8004276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800427c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004280:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004282:	f107 0308 	add.w	r3, r7, #8
 8004286:	4619      	mov	r1, r3
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff feec 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800428e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004292:	2119      	movs	r1, #25
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f991 	bl	80045bc <SDMMC_GetCmdResp1>
 800429a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800429c:	69fb      	ldr	r3, [r7, #28]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80042b4:	230c      	movs	r3, #12
 80042b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042b8:	2340      	movs	r3, #64	; 0x40
 80042ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042c6:	f107 0308 	add.w	r3, r7, #8
 80042ca:	4619      	mov	r1, r3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff feca 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80042d2:	4a05      	ldr	r2, [pc, #20]	; (80042e8 <SDMMC_CmdStopTransfer+0x40>)
 80042d4:	210c      	movs	r1, #12
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f970 	bl	80045bc <SDMMC_GetCmdResp1>
 80042dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042de:	69fb      	ldr	r3, [r7, #28]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3720      	adds	r7, #32
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	05f5e100 	.word	0x05f5e100

080042ec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	; 0x28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80042fc:	2307      	movs	r3, #7
 80042fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004300:	2340      	movs	r3, #64	; 0x40
 8004302:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800430c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800430e:	f107 0310 	add.w	r3, r7, #16
 8004312:	4619      	mov	r1, r3
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7ff fea6 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	2107      	movs	r1, #7
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f94b 	bl	80045bc <SDMMC_GetCmdResp1>
 8004326:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800432a:	4618      	mov	r0, r3
 800432c:	3728      	adds	r7, #40	; 0x28
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b088      	sub	sp, #32
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800434a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800434e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004350:	f107 0308 	add.w	r3, r7, #8
 8004354:	4619      	mov	r1, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff fe85 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fb65 	bl	8004a2c <SDMMC_GetCmdError>
 8004362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004364:	69fb      	ldr	r3, [r7, #28]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b088      	sub	sp, #32
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004376:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800437a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800437c:	2308      	movs	r3, #8
 800437e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004380:	2340      	movs	r3, #64	; 0x40
 8004382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800438c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800438e:	f107 0308 	add.w	r3, r7, #8
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff fe66 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 faf8 	bl	8004990 <SDMMC_GetCmdResp7>
 80043a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043a2:	69fb      	ldr	r3, [r7, #28]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80043ba:	2337      	movs	r3, #55	; 0x37
 80043bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043be:	2340      	movs	r3, #64	; 0x40
 80043c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043cc:	f107 0308 	add.w	r3, r7, #8
 80043d0:	4619      	mov	r1, r3
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff fe47 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	2137      	movs	r1, #55	; 0x37
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f8ec 	bl	80045bc <SDMMC_GetCmdResp1>
 80043e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043e6:	69fb      	ldr	r3, [r7, #28]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004406:	2329      	movs	r3, #41	; 0x29
 8004408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800440a:	2340      	movs	r3, #64	; 0x40
 800440c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004416:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004418:	f107 0308 	add.w	r3, r7, #8
 800441c:	4619      	mov	r1, r3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff fe21 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f9ff 	bl	8004828 <SDMMC_GetCmdResp3>
 800442a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800442c:	69fb      	ldr	r3, [r7, #28]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b088      	sub	sp, #32
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004444:	2306      	movs	r3, #6
 8004446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004448:	2340      	movs	r3, #64	; 0x40
 800444a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004454:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004456:	f107 0308 	add.w	r3, r7, #8
 800445a:	4619      	mov	r1, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fe02 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	2106      	movs	r1, #6
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8a7 	bl	80045bc <SDMMC_GetCmdResp1>
 800446e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004470:	69fb      	ldr	r3, [r7, #28]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b088      	sub	sp, #32
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004486:	2333      	movs	r3, #51	; 0x33
 8004488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800448a:	2340      	movs	r3, #64	; 0x40
 800448c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004496:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004498:	f107 0308 	add.w	r3, r7, #8
 800449c:	4619      	mov	r1, r3
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fde1 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80044a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a8:	2133      	movs	r1, #51	; 0x33
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f886 	bl	80045bc <SDMMC_GetCmdResp1>
 80044b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044b2:	69fb      	ldr	r3, [r7, #28]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3720      	adds	r7, #32
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80044c8:	2302      	movs	r3, #2
 80044ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80044cc:	23c0      	movs	r3, #192	; 0xc0
 80044ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044da:	f107 0308 	add.w	r3, r7, #8
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff fdc0 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f956 	bl	8004798 <SDMMC_GetCmdResp2>
 80044ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044ee:	69fb      	ldr	r3, [r7, #28]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3720      	adds	r7, #32
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004506:	2309      	movs	r3, #9
 8004508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800450a:	23c0      	movs	r3, #192	; 0xc0
 800450c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004516:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004518:	f107 0308 	add.w	r3, r7, #8
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fda1 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f937 	bl	8004798 <SDMMC_GetCmdResp2>
 800452a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800452c:	69fb      	ldr	r3, [r7, #28]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b088      	sub	sp, #32
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004544:	2303      	movs	r3, #3
 8004546:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004548:	2340      	movs	r3, #64	; 0x40
 800454a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004554:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004556:	f107 0308 	add.w	r3, r7, #8
 800455a:	4619      	mov	r1, r3
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff fd82 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	2103      	movs	r1, #3
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f99c 	bl	80048a4 <SDMMC_GetCmdResp6>
 800456c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800456e:	69fb      	ldr	r3, [r7, #28]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004586:	230d      	movs	r3, #13
 8004588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800458a:	2340      	movs	r3, #64	; 0x40
 800458c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004596:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004598:	f107 0308 	add.w	r3, r7, #8
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fd61 	bl	8004066 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80045a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a8:	210d      	movs	r1, #13
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f806 	bl	80045bc <SDMMC_GetCmdResp1>
 80045b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045b2:	69fb      	ldr	r3, [r7, #28]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	460b      	mov	r3, r1
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80045ca:	4b70      	ldr	r3, [pc, #448]	; (800478c <SDMMC_GetCmdResp1+0x1d0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a70      	ldr	r2, [pc, #448]	; (8004790 <SDMMC_GetCmdResp1+0x1d4>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	0a5a      	lsrs	r2, r3, #9
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	fb02 f303 	mul.w	r3, r2, r3
 80045dc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	61fa      	str	r2, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d102      	bne.n	80045ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80045e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045ec:	e0c9      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0ef      	beq.n	80045de <SDMMC_GetCmdResp1+0x22>
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ea      	bne.n	80045de <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2204      	movs	r2, #4
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800461a:	2304      	movs	r3, #4
 800461c:	e0b1      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004630:	2301      	movs	r3, #1
 8004632:	e0a6      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	22c5      	movs	r2, #197	; 0xc5
 8004638:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff fd3d 	bl	80040ba <SDIO_GetCommandResponse>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	7afb      	ldrb	r3, [r7, #11]
 8004646:	4293      	cmp	r3, r2
 8004648:	d001      	beq.n	800464e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800464a:	2301      	movs	r3, #1
 800464c:	e099      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800464e:	2100      	movs	r1, #0
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7ff fd3f 	bl	80040d4 <SDIO_GetResponse>
 8004656:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4b4e      	ldr	r3, [pc, #312]	; (8004794 <SDMMC_GetCmdResp1+0x1d8>)
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004662:	2300      	movs	r3, #0
 8004664:	e08d      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	da02      	bge.n	8004672 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800466c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004670:	e087      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800467c:	2340      	movs	r3, #64	; 0x40
 800467e:	e080      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	e079      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800469c:	e071      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80046a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046ac:	e069      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80046b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046bc:	e061      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80046c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046cc:	e059      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80046d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046dc:	e051      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80046e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046ec:	e049      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80046f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046fc:	e041      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470c:	e039      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800471c:	e031      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004728:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800472c:	e029      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004738:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800473c:	e021      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004748:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800474c:	e019      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004758:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800475c:	e011      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004768:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800476c:	e009      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004778:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800477c:	e001      	b.n	8004782 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800477e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000000 	.word	0x20000000
 8004790:	10624dd3 	.word	0x10624dd3
 8004794:	fdffe008 	.word	0xfdffe008

08004798 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047a0:	4b1f      	ldr	r3, [pc, #124]	; (8004820 <SDMMC_GetCmdResp2+0x88>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1f      	ldr	r2, [pc, #124]	; (8004824 <SDMMC_GetCmdResp2+0x8c>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	0a5b      	lsrs	r3, r3, #9
 80047ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1e5a      	subs	r2, r3, #1
 80047ba:	60fa      	str	r2, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047c4:	e026      	b.n	8004814 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ef      	beq.n	80047b6 <SDMMC_GetCmdResp2+0x1e>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ea      	bne.n	80047b6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2204      	movs	r2, #4
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80047f2:	2304      	movs	r3, #4
 80047f4:	e00e      	b.n	8004814 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004808:	2301      	movs	r3, #1
 800480a:	e003      	b.n	8004814 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	22c5      	movs	r2, #197	; 0xc5
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	20000000 	.word	0x20000000
 8004824:	10624dd3 	.word	0x10624dd3

08004828 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004830:	4b1a      	ldr	r3, [pc, #104]	; (800489c <SDMMC_GetCmdResp3+0x74>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1a      	ldr	r2, [pc, #104]	; (80048a0 <SDMMC_GetCmdResp3+0x78>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	0a5b      	lsrs	r3, r3, #9
 800483c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004840:	fb02 f303 	mul.w	r3, r2, r3
 8004844:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1e5a      	subs	r2, r3, #1
 800484a:	60fa      	str	r2, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004850:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004854:	e01b      	b.n	800488e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0ef      	beq.n	8004846 <SDMMC_GetCmdResp3+0x1e>
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1ea      	bne.n	8004846 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d004      	beq.n	8004886 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2204      	movs	r2, #4
 8004880:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004882:	2304      	movs	r3, #4
 8004884:	e003      	b.n	800488e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	22c5      	movs	r2, #197	; 0xc5
 800488a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20000000 	.word	0x20000000
 80048a0:	10624dd3 	.word	0x10624dd3

080048a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	460b      	mov	r3, r1
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80048b2:	4b35      	ldr	r3, [pc, #212]	; (8004988 <SDMMC_GetCmdResp6+0xe4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a35      	ldr	r2, [pc, #212]	; (800498c <SDMMC_GetCmdResp6+0xe8>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	0a5b      	lsrs	r3, r3, #9
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	1e5a      	subs	r2, r3, #1
 80048cc:	61fa      	str	r2, [r7, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80048d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048d6:	e052      	b.n	800497e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0ef      	beq.n	80048c8 <SDMMC_GetCmdResp6+0x24>
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ea      	bne.n	80048c8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d004      	beq.n	8004908 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2204      	movs	r2, #4
 8004902:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004904:	2304      	movs	r3, #4
 8004906:	e03a      	b.n	800497e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d004      	beq.n	800491e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800491a:	2301      	movs	r3, #1
 800491c:	e02f      	b.n	800497e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff fbcb 	bl	80040ba <SDIO_GetCommandResponse>
 8004924:	4603      	mov	r3, r0
 8004926:	461a      	mov	r2, r3
 8004928:	7afb      	ldrb	r3, [r7, #11]
 800492a:	4293      	cmp	r3, r2
 800492c:	d001      	beq.n	8004932 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800492e:	2301      	movs	r3, #1
 8004930:	e025      	b.n	800497e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	22c5      	movs	r2, #197	; 0xc5
 8004936:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004938:	2100      	movs	r1, #0
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff fbca 	bl	80040d4 <SDIO_GetResponse>
 8004940:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d106      	bne.n	800495a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	b29a      	uxth	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004956:	2300      	movs	r3, #0
 8004958:	e011      	b.n	800497e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004968:	e009      	b.n	800497e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004978:	e001      	b.n	800497e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800497a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000000 	.word	0x20000000
 800498c:	10624dd3 	.word	0x10624dd3

08004990 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004998:	4b22      	ldr	r3, [pc, #136]	; (8004a24 <SDMMC_GetCmdResp7+0x94>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a22      	ldr	r2, [pc, #136]	; (8004a28 <SDMMC_GetCmdResp7+0x98>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	0a5b      	lsrs	r3, r3, #9
 80049a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a8:	fb02 f303 	mul.w	r3, r2, r3
 80049ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1e5a      	subs	r2, r3, #1
 80049b2:	60fa      	str	r2, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049bc:	e02c      	b.n	8004a18 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ef      	beq.n	80049ae <SDMMC_GetCmdResp7+0x1e>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ea      	bne.n	80049ae <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2204      	movs	r2, #4
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80049ea:	2304      	movs	r3, #4
 80049ec:	e014      	b.n	8004a18 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e009      	b.n	8004a18 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2240      	movs	r2, #64	; 0x40
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004a16:	2300      	movs	r3, #0
  
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	20000000 	.word	0x20000000
 8004a28:	10624dd3 	.word	0x10624dd3

08004a2c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a34:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <SDMMC_GetCmdError+0x50>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a11      	ldr	r2, [pc, #68]	; (8004a80 <SDMMC_GetCmdError+0x54>)
 8004a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3e:	0a5b      	lsrs	r3, r3, #9
 8004a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a44:	fb02 f303 	mul.w	r3, r2, r3
 8004a48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1e5a      	subs	r2, r3, #1
 8004a4e:	60fa      	str	r2, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d102      	bne.n	8004a5a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a58:	e009      	b.n	8004a6e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f1      	beq.n	8004a4a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	22c5      	movs	r2, #197	; 0xc5
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000000 	.word	0x20000000
 8004a80:	10624dd3 	.word	0x10624dd3

08004a84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004a88:	4904      	ldr	r1, [pc, #16]	; (8004a9c <MX_FATFS_Init+0x18>)
 8004a8a:	4805      	ldr	r0, [pc, #20]	; (8004aa0 <MX_FATFS_Init+0x1c>)
 8004a8c:	f002 fdee 	bl	800766c <FATFS_LinkDriver>
 8004a90:	4603      	mov	r3, r0
 8004a92:	461a      	mov	r2, r3
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <MX_FATFS_Init+0x20>)
 8004a96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004a98:	bf00      	nop
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20002260 	.word	0x20002260
 8004aa0:	0800884c 	.word	0x0800884c
 8004aa4:	2000225c 	.word	0x2000225c

08004aa8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004aac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004ac2:	f000 f879 	bl	8004bb8 <BSP_SD_IsDetected>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d001      	beq.n	8004ad0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e012      	b.n	8004af6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004ad0:	480b      	ldr	r0, [pc, #44]	; (8004b00 <BSP_SD_Init+0x48>)
 8004ad2:	f7fd fe17 	bl	8002704 <HAL_SD_Init>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ae4:	4806      	ldr	r0, [pc, #24]	; (8004b00 <BSP_SD_Init+0x48>)
 8004ae6:	f7fe fbf1 	bl	80032cc <HAL_SD_ConfigWideBusOperation>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004af4:	79fb      	ldrb	r3, [r7, #7]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	2000008c 	.word	0x2000008c

08004b04 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	68f9      	ldr	r1, [r7, #12]
 8004b20:	4806      	ldr	r0, [pc, #24]	; (8004b3c <BSP_SD_ReadBlocks+0x38>)
 8004b22:	f7fd fe9f 	bl	8002864 <HAL_SD_ReadBlocks>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	2000008c 	.word	0x2000008c

08004b40 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	4806      	ldr	r0, [pc, #24]	; (8004b78 <BSP_SD_WriteBlocks+0x38>)
 8004b5e:	f7fe f85f 	bl	8002c20 <HAL_SD_WriteBlocks>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	2000008c 	.word	0x2000008c

08004b7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004b80:	4805      	ldr	r0, [pc, #20]	; (8004b98 <BSP_SD_GetCardState+0x1c>)
 8004b82:	f7fe fc3d 	bl	8003400 <HAL_SD_GetCardState>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	bf14      	ite	ne
 8004b8c:	2301      	movne	r3, #1
 8004b8e:	2300      	moveq	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	2000008c 	.word	0x2000008c

08004b9c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4803      	ldr	r0, [pc, #12]	; (8004bb4 <BSP_SD_GetCardInfo+0x18>)
 8004ba8:	f7fe fb64 	bl	8003274 <HAL_SD_GetCardInfo>
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	2000008c 	.word	0x2000008c

08004bb8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	b2db      	uxtb	r3, r3
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004bde:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <SD_CheckStatus+0x38>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004be4:	f7ff ffca 	bl	8004b7c <BSP_SD_GetCardState>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d107      	bne.n	8004bfe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004bee:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <SD_CheckStatus+0x38>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <SD_CheckStatus+0x38>)
 8004bfc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004bfe:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <SD_CheckStatus+0x38>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	b2db      	uxtb	r3, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20000009 	.word	0x20000009

08004c10 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <SD_initialize+0x38>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004c20:	f7ff ff4a 	bl	8004ab8 <BSP_SD_Init>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d107      	bne.n	8004c3a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ffd1 	bl	8004bd4 <SD_CheckStatus>
 8004c32:	4603      	mov	r3, r0
 8004c34:	461a      	mov	r2, r3
 8004c36:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <SD_initialize+0x38>)
 8004c38:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004c3a:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <SD_initialize+0x38>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	b2db      	uxtb	r3, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20000009 	.word	0x20000009

08004c4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff ffbb 	bl	8004bd4 <SD_CheckStatus>
 8004c5e:	4603      	mov	r3, r0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	68b8      	ldr	r0, [r7, #8]
 8004c86:	f7ff ff3d 	bl	8004b04 <BSP_SD_ReadBlocks>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d107      	bne.n	8004ca0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004c90:	bf00      	nop
 8004c92:	f7ff ff73 	bl	8004b7c <BSP_SD_GetCardState>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1fa      	bne.n	8004c92 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b086      	sub	sp, #24
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	68b8      	ldr	r0, [r7, #8]
 8004cc8:	f7ff ff3a 	bl	8004b40 <BSP_SD_WriteBlocks>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d107      	bne.n	8004ce2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8004cd2:	bf00      	nop
 8004cd4:	f7ff ff52 	bl	8004b7c <BSP_SD_GetCardState>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1fa      	bne.n	8004cd4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08c      	sub	sp, #48	; 0x30
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	603a      	str	r2, [r7, #0]
 8004cf6:	71fb      	strb	r3, [r7, #7]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004d02:	4b25      	ldr	r3, [pc, #148]	; (8004d98 <SD_ioctl+0xac>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <SD_ioctl+0x28>
 8004d10:	2303      	movs	r3, #3
 8004d12:	e03c      	b.n	8004d8e <SD_ioctl+0xa2>

  switch (cmd)
 8004d14:	79bb      	ldrb	r3, [r7, #6]
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d834      	bhi.n	8004d84 <SD_ioctl+0x98>
 8004d1a:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <SD_ioctl+0x34>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d31 	.word	0x08004d31
 8004d24:	08004d39 	.word	0x08004d39
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d6b 	.word	0x08004d6b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004d36:	e028      	b.n	8004d8a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004d38:	f107 030c 	add.w	r3, r7, #12
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff ff2d 	bl	8004b9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004d4e:	e01c      	b.n	8004d8a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004d50:	f107 030c 	add.w	r3, r7, #12
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ff21 	bl	8004b9c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004d68:	e00f      	b.n	8004d8a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004d6a:	f107 030c 	add.w	r3, r7, #12
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff ff14 	bl	8004b9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	0a5a      	lsrs	r2, r3, #9
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004d82:	e002      	b.n	8004d8a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004d84:	2304      	movs	r3, #4
 8004d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3730      	adds	r7, #48	; 0x30
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000009 	.word	0x20000009

08004d9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	4a08      	ldr	r2, [pc, #32]	; (8004dcc <disk_status+0x30>)
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	79fa      	ldrb	r2, [r7, #7]
 8004db4:	4905      	ldr	r1, [pc, #20]	; (8004dcc <disk_status+0x30>)
 8004db6:	440a      	add	r2, r1
 8004db8:	7a12      	ldrb	r2, [r2, #8]
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4798      	blx	r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	2000228c 	.word	0x2000228c

08004dd0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	4a0d      	ldr	r2, [pc, #52]	; (8004e18 <disk_initialize+0x48>)
 8004de2:	5cd3      	ldrb	r3, [r2, r3]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d111      	bne.n	8004e0c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	4a0b      	ldr	r2, [pc, #44]	; (8004e18 <disk_initialize+0x48>)
 8004dec:	2101      	movs	r1, #1
 8004dee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	4a09      	ldr	r2, [pc, #36]	; (8004e18 <disk_initialize+0x48>)
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	79fa      	ldrb	r2, [r7, #7]
 8004dfe:	4906      	ldr	r1, [pc, #24]	; (8004e18 <disk_initialize+0x48>)
 8004e00:	440a      	add	r2, r1
 8004e02:	7a12      	ldrb	r2, [r2, #8]
 8004e04:	4610      	mov	r0, r2
 8004e06:	4798      	blx	r3
 8004e08:	4603      	mov	r3, r0
 8004e0a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	2000228c 	.word	0x2000228c

08004e1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	4603      	mov	r3, r0
 8004e2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	4a0a      	ldr	r2, [pc, #40]	; (8004e58 <disk_read+0x3c>)
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	689c      	ldr	r4, [r3, #8]
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	4a07      	ldr	r2, [pc, #28]	; (8004e58 <disk_read+0x3c>)
 8004e3c:	4413      	add	r3, r2
 8004e3e:	7a18      	ldrb	r0, [r3, #8]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	47a0      	blx	r4
 8004e48:	4603      	mov	r3, r0
 8004e4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd90      	pop	{r4, r7, pc}
 8004e56:	bf00      	nop
 8004e58:	2000228c 	.word	0x2000228c

08004e5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4603      	mov	r3, r0
 8004e6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	4a0a      	ldr	r2, [pc, #40]	; (8004e98 <disk_write+0x3c>)
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	68dc      	ldr	r4, [r3, #12]
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	4a07      	ldr	r2, [pc, #28]	; (8004e98 <disk_write+0x3c>)
 8004e7c:	4413      	add	r3, r2
 8004e7e:	7a18      	ldrb	r0, [r3, #8]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	47a0      	blx	r4
 8004e88:	4603      	mov	r3, r0
 8004e8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd90      	pop	{r4, r7, pc}
 8004e96:	bf00      	nop
 8004e98:	2000228c 	.word	0x2000228c

08004e9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	603a      	str	r2, [r7, #0]
 8004ea6:	71fb      	strb	r3, [r7, #7]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	4a09      	ldr	r2, [pc, #36]	; (8004ed4 <disk_ioctl+0x38>)
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	79fa      	ldrb	r2, [r7, #7]
 8004eba:	4906      	ldr	r1, [pc, #24]	; (8004ed4 <disk_ioctl+0x38>)
 8004ebc:	440a      	add	r2, r1
 8004ebe:	7a10      	ldrb	r0, [r2, #8]
 8004ec0:	79b9      	ldrb	r1, [r7, #6]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	4798      	blx	r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	73fb      	strb	r3, [r7, #15]
  return res;
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	2000228c 	.word	0x2000228c

08004ed8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004ee8:	89fb      	ldrh	r3, [r7, #14]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	b21a      	sxth	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	b21b      	sxth	r3, r3
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	b21b      	sxth	r3, r3
 8004ef8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004efa:	89fb      	ldrh	r3, [r7, #14]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3303      	adds	r3, #3
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	3202      	adds	r2, #2
 8004f20:	7812      	ldrb	r2, [r2, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	3201      	adds	r2, #1
 8004f2e:	7812      	ldrb	r2, [r2, #0]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	7812      	ldrb	r2, [r2, #0]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004f40:	68fb      	ldr	r3, [r7, #12]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	887a      	ldrh	r2, [r7, #2]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	887b      	ldrh	r3, [r7, #2]
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	607a      	str	r2, [r7, #4]
 8004f72:	887a      	ldrh	r2, [r7, #2]
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	0a1b      	lsrs	r3, r3, #8
 8004f9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	0a1b      	lsrs	r3, r3, #8
 8004fc2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	607a      	str	r2, [r7, #4]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00d      	beq.n	8005012 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	1c53      	adds	r3, r2, #1
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	1c59      	adds	r1, r3, #1
 8005000:	6179      	str	r1, [r7, #20]
 8005002:	7812      	ldrb	r2, [r2, #0]
 8005004:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3b01      	subs	r3, #1
 800500a:	607b      	str	r3, [r7, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f1      	bne.n	8004ff6 <mem_cpy+0x1a>
	}
}
 8005012:	bf00      	nop
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800501e:	b480      	push	{r7}
 8005020:	b087      	sub	sp, #28
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	617a      	str	r2, [r7, #20]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3b01      	subs	r3, #1
 800503e:	607b      	str	r3, [r7, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f3      	bne.n	800502e <mem_set+0x10>
}
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	; 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	61fa      	str	r2, [r7, #28]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	4619      	mov	r1, r3
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	61ba      	str	r2, [r7, #24]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	1acb      	subs	r3, r1, r3
 8005080:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3b01      	subs	r3, #1
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <mem_cmp+0x40>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0eb      	beq.n	800506c <mem_cmp+0x18>

	return r;
 8005094:	697b      	ldr	r3, [r7, #20]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3724      	adds	r7, #36	; 0x24
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80050ac:	e002      	b.n	80050b4 <chk_chr+0x12>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3301      	adds	r3, #1
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <chk_chr+0x26>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d1f2      	bne.n	80050ae <chk_chr+0xc>
	return *str;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	781b      	ldrb	r3, [r3, #0]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e029      	b.n	8005140 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80050ec:	4a27      	ldr	r2, [pc, #156]	; (800518c <chk_lock+0xb4>)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	4413      	add	r3, r2
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01d      	beq.n	8005136 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80050fa:	4a24      	ldr	r2, [pc, #144]	; (800518c <chk_lock+0xb4>)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	4413      	add	r3, r2
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d116      	bne.n	800513a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800510c:	4a1f      	ldr	r2, [pc, #124]	; (800518c <chk_lock+0xb4>)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	4413      	add	r3, r2
 8005114:	3304      	adds	r3, #4
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800511c:	429a      	cmp	r2, r3
 800511e:	d10c      	bne.n	800513a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005120:	4a1a      	ldr	r2, [pc, #104]	; (800518c <chk_lock+0xb4>)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	4413      	add	r3, r2
 8005128:	3308      	adds	r3, #8
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005130:	429a      	cmp	r2, r3
 8005132:	d102      	bne.n	800513a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005134:	e007      	b.n	8005146 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005136:	2301      	movs	r3, #1
 8005138:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3301      	adds	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d9d2      	bls.n	80050ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d109      	bne.n	8005160 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d102      	bne.n	8005158 <chk_lock+0x80>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d101      	bne.n	800515c <chk_lock+0x84>
 8005158:	2300      	movs	r3, #0
 800515a:	e010      	b.n	800517e <chk_lock+0xa6>
 800515c:	2312      	movs	r3, #18
 800515e:	e00e      	b.n	800517e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d108      	bne.n	8005178 <chk_lock+0xa0>
 8005166:	4a09      	ldr	r2, [pc, #36]	; (800518c <chk_lock+0xb4>)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	4413      	add	r3, r2
 800516e:	330c      	adds	r3, #12
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005176:	d101      	bne.n	800517c <chk_lock+0xa4>
 8005178:	2310      	movs	r3, #16
 800517a:	e000      	b.n	800517e <chk_lock+0xa6>
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	2000226c 	.word	0x2000226c

08005190 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005196:	2300      	movs	r3, #0
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	e002      	b.n	80051a2 <enq_lock+0x12>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3301      	adds	r3, #1
 80051a0:	607b      	str	r3, [r7, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d806      	bhi.n	80051b6 <enq_lock+0x26>
 80051a8:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <enq_lock+0x40>)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	4413      	add	r3, r2
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f2      	bne.n	800519c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	bf14      	ite	ne
 80051bc:	2301      	movne	r3, #1
 80051be:	2300      	moveq	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	2000226c 	.word	0x2000226c

080051d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	e01f      	b.n	8005224 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80051e4:	4a41      	ldr	r2, [pc, #260]	; (80052ec <inc_lock+0x118>)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	4413      	add	r3, r2
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d113      	bne.n	800521e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80051f6:	4a3d      	ldr	r2, [pc, #244]	; (80052ec <inc_lock+0x118>)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	4413      	add	r3, r2
 80051fe:	3304      	adds	r3, #4
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005206:	429a      	cmp	r2, r3
 8005208:	d109      	bne.n	800521e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800520a:	4a38      	ldr	r2, [pc, #224]	; (80052ec <inc_lock+0x118>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	4413      	add	r3, r2
 8005212:	3308      	adds	r3, #8
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800521a:	429a      	cmp	r2, r3
 800521c:	d006      	beq.n	800522c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3301      	adds	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d9dc      	bls.n	80051e4 <inc_lock+0x10>
 800522a:	e000      	b.n	800522e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800522c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d132      	bne.n	800529a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e002      	b.n	8005240 <inc_lock+0x6c>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3301      	adds	r3, #1
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d806      	bhi.n	8005254 <inc_lock+0x80>
 8005246:	4a29      	ldr	r2, [pc, #164]	; (80052ec <inc_lock+0x118>)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	4413      	add	r3, r2
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f2      	bne.n	800523a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d101      	bne.n	800525e <inc_lock+0x8a>
 800525a:	2300      	movs	r3, #0
 800525c:	e040      	b.n	80052e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4922      	ldr	r1, [pc, #136]	; (80052ec <inc_lock+0x118>)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	440b      	add	r3, r1
 800526a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	491e      	ldr	r1, [pc, #120]	; (80052ec <inc_lock+0x118>)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	440b      	add	r3, r1
 8005278:	3304      	adds	r3, #4
 800527a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	491a      	ldr	r1, [pc, #104]	; (80052ec <inc_lock+0x118>)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	440b      	add	r3, r1
 8005288:	3308      	adds	r3, #8
 800528a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800528c:	4a17      	ldr	r2, [pc, #92]	; (80052ec <inc_lock+0x118>)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	4413      	add	r3, r2
 8005294:	330c      	adds	r3, #12
 8005296:	2200      	movs	r2, #0
 8005298:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d009      	beq.n	80052b4 <inc_lock+0xe0>
 80052a0:	4a12      	ldr	r2, [pc, #72]	; (80052ec <inc_lock+0x118>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	4413      	add	r3, r2
 80052a8:	330c      	adds	r3, #12
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <inc_lock+0xe0>
 80052b0:	2300      	movs	r3, #0
 80052b2:	e015      	b.n	80052e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d108      	bne.n	80052cc <inc_lock+0xf8>
 80052ba:	4a0c      	ldr	r2, [pc, #48]	; (80052ec <inc_lock+0x118>)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	4413      	add	r3, r2
 80052c2:	330c      	adds	r3, #12
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	e001      	b.n	80052d0 <inc_lock+0xfc>
 80052cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052d0:	4906      	ldr	r1, [pc, #24]	; (80052ec <inc_lock+0x118>)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	440b      	add	r3, r1
 80052d8:	330c      	adds	r3, #12
 80052da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3301      	adds	r3, #1
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	2000226c 	.word	0x2000226c

080052f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	e010      	b.n	8005320 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80052fe:	4a0d      	ldr	r2, [pc, #52]	; (8005334 <clear_lock+0x44>)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	4413      	add	r3, r2
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	429a      	cmp	r2, r3
 800530c:	d105      	bne.n	800531a <clear_lock+0x2a>
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <clear_lock+0x44>)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	4413      	add	r3, r2
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d9eb      	bls.n	80052fe <clear_lock+0xe>
	}
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	2000226c 	.word	0x2000226c

08005338 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	78db      	ldrb	r3, [r3, #3]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d034      	beq.n	80053b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	7858      	ldrb	r0, [r3, #1]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800535c:	2301      	movs	r3, #1
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	f7ff fd7c 	bl	8004e5c <disk_write>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <sync_window+0x38>
			res = FR_DISK_ERR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
 800536e:	e022      	b.n	80053b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	1ad2      	subs	r2, r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	429a      	cmp	r2, r3
 8005384:	d217      	bcs.n	80053b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	789b      	ldrb	r3, [r3, #2]
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	e010      	b.n	80053b0 <sync_window+0x78>
					wsect += fs->fsize;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4413      	add	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	7858      	ldrb	r0, [r3, #1]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80053a2:	2301      	movs	r3, #1
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	f7ff fd59 	bl	8004e5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d8eb      	bhi.n	800538e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d01b      	beq.n	8005410 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ffad 	bl	8005338 <sync_window>
 80053de:	4603      	mov	r3, r0
 80053e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d113      	bne.n	8005410 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	7858      	ldrb	r0, [r3, #1]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80053f2:	2301      	movs	r3, #1
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	f7ff fd11 	bl	8004e1c <disk_read>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005400:	f04f 33ff 	mov.w	r3, #4294967295
 8005404:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005406:	2301      	movs	r3, #1
 8005408:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005410:	7bfb      	ldrb	r3, [r7, #15]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	3b02      	subs	r3, #2
 8005428:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	3b02      	subs	r3, #2
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d301      	bcc.n	800543a <clust2sect+0x20>
 8005436:	2300      	movs	r3, #0
 8005438:	e008      	b.n	800544c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	895b      	ldrh	r3, [r3, #10]
 800543e:	461a      	mov	r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	fb03 f202 	mul.w	r2, r3, r2
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	4413      	add	r3, r2
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d904      	bls.n	8005478 <get_fat+0x20>
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <get_fat+0x26>
		val = 1;	/* Internal error */
 8005478:	2301      	movs	r3, #1
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e0bb      	b.n	80055f6 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800547e:	f04f 33ff 	mov.w	r3, #4294967295
 8005482:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b03      	cmp	r3, #3
 800548a:	f000 8083 	beq.w	8005594 <get_fat+0x13c>
 800548e:	2b03      	cmp	r3, #3
 8005490:	f300 80a7 	bgt.w	80055e2 <get_fat+0x18a>
 8005494:	2b01      	cmp	r3, #1
 8005496:	d002      	beq.n	800549e <get_fat+0x46>
 8005498:	2b02      	cmp	r3, #2
 800549a:	d056      	beq.n	800554a <get_fat+0xf2>
 800549c:	e0a1      	b.n	80055e2 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	085b      	lsrs	r3, r3, #1
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	899b      	ldrh	r3, [r3, #12]
 80054b4:	4619      	mov	r1, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80054bc:	4413      	add	r3, r2
 80054be:	4619      	mov	r1, r3
 80054c0:	6938      	ldr	r0, [r7, #16]
 80054c2:	f7ff ff7d 	bl	80053c0 <move_window>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f040 808d 	bne.w	80055e8 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	60fa      	str	r2, [r7, #12]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	8992      	ldrh	r2, [r2, #12]
 80054d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80054dc:	fb01 f202 	mul.w	r2, r1, r2
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	4413      	add	r3, r2
 80054e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054ea:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	899b      	ldrh	r3, [r3, #12]
 80054f4:	4619      	mov	r1, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80054fc:	4413      	add	r3, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	6938      	ldr	r0, [r7, #16]
 8005502:	f7ff ff5d 	bl	80053c0 <move_window>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d16f      	bne.n	80055ec <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	899b      	ldrh	r3, [r3, #12]
 8005510:	461a      	mov	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	fbb3 f1f2 	udiv	r1, r3, r2
 8005518:	fb01 f202 	mul.w	r2, r1, r2
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4413      	add	r3, r2
 8005522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	461a      	mov	r2, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4313      	orrs	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <get_fat+0xe8>
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	091b      	lsrs	r3, r3, #4
 800553e:	e002      	b.n	8005546 <get_fat+0xee>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005546:	617b      	str	r3, [r7, #20]
			break;
 8005548:	e055      	b.n	80055f6 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	899b      	ldrh	r3, [r3, #12]
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	b29b      	uxth	r3, r3
 8005556:	4619      	mov	r1, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	fbb3 f3f1 	udiv	r3, r3, r1
 800555e:	4413      	add	r3, r2
 8005560:	4619      	mov	r1, r3
 8005562:	6938      	ldr	r0, [r7, #16]
 8005564:	f7ff ff2c 	bl	80053c0 <move_window>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d140      	bne.n	80055f0 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	8992      	ldrh	r2, [r2, #12]
 800557c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005580:	fb00 f202 	mul.w	r2, r0, r2
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	440b      	add	r3, r1
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff fca5 	bl	8004ed8 <ld_word>
 800558e:	4603      	mov	r3, r0
 8005590:	617b      	str	r3, [r7, #20]
			break;
 8005592:	e030      	b.n	80055f6 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	899b      	ldrh	r3, [r3, #12]
 800559c:	089b      	lsrs	r3, r3, #2
 800559e:	b29b      	uxth	r3, r3
 80055a0:	4619      	mov	r1, r3
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80055a8:	4413      	add	r3, r2
 80055aa:	4619      	mov	r1, r3
 80055ac:	6938      	ldr	r0, [r7, #16]
 80055ae:	f7ff ff07 	bl	80053c0 <move_window>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d11d      	bne.n	80055f4 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	8992      	ldrh	r2, [r2, #12]
 80055c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80055ca:	fb00 f202 	mul.w	r2, r0, r2
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	440b      	add	r3, r1
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff fc98 	bl	8004f08 <ld_dword>
 80055d8:	4603      	mov	r3, r0
 80055da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80055de:	617b      	str	r3, [r7, #20]
			break;
 80055e0:	e009      	b.n	80055f6 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80055e2:	2301      	movs	r3, #1
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e006      	b.n	80055f6 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055e8:	bf00      	nop
 80055ea:	e004      	b.n	80055f6 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055ec:	bf00      	nop
 80055ee:	e002      	b.n	80055f6 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80055f0:	bf00      	nop
 80055f2:	e000      	b.n	80055f6 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80055f4:	bf00      	nop
		}
	}

	return val;
 80055f6:	697b      	ldr	r3, [r7, #20]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b089      	sub	sp, #36	; 0x24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800560c:	2302      	movs	r3, #2
 800560e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b01      	cmp	r3, #1
 8005614:	f240 8102 	bls.w	800581c <put_fat+0x21c>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	f080 80fc 	bcs.w	800581c <put_fat+0x21c>
		switch (fs->fs_type) {
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b03      	cmp	r3, #3
 800562a:	f000 80b6 	beq.w	800579a <put_fat+0x19a>
 800562e:	2b03      	cmp	r3, #3
 8005630:	f300 80fd 	bgt.w	800582e <put_fat+0x22e>
 8005634:	2b01      	cmp	r3, #1
 8005636:	d003      	beq.n	8005640 <put_fat+0x40>
 8005638:	2b02      	cmp	r3, #2
 800563a:	f000 8083 	beq.w	8005744 <put_fat+0x144>
 800563e:	e0f6      	b.n	800582e <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	4413      	add	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	899b      	ldrh	r3, [r3, #12]
 8005656:	4619      	mov	r1, r3
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	fbb3 f3f1 	udiv	r3, r3, r1
 800565e:	4413      	add	r3, r2
 8005660:	4619      	mov	r1, r3
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff feac 	bl	80053c0 <move_window>
 8005668:	4603      	mov	r3, r0
 800566a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800566c:	7ffb      	ldrb	r3, [r7, #31]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 80d6 	bne.w	8005820 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	61ba      	str	r2, [r7, #24]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	8992      	ldrh	r2, [r2, #12]
 8005684:	fbb3 f0f2 	udiv	r0, r3, r2
 8005688:	fb00 f202 	mul.w	r2, r0, r2
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	440b      	add	r3, r1
 8005690:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00d      	beq.n	80056b8 <put_fat+0xb8>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	b25b      	sxtb	r3, r3
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	b25a      	sxtb	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	b25b      	sxtb	r3, r3
 80056b0:	4313      	orrs	r3, r2
 80056b2:	b25b      	sxtb	r3, r3
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	e001      	b.n	80056bc <put_fat+0xbc>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	899b      	ldrh	r3, [r3, #12]
 80056ce:	4619      	mov	r1, r3
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80056d6:	4413      	add	r3, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff fe70 	bl	80053c0 <move_window>
 80056e0:	4603      	mov	r3, r0
 80056e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056e4:	7ffb      	ldrb	r3, [r7, #31]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f040 809c 	bne.w	8005824 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	899b      	ldrh	r3, [r3, #12]
 80056f6:	461a      	mov	r2, r3
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80056fe:	fb00 f202 	mul.w	r2, r0, r2
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	440b      	add	r3, r1
 8005706:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <put_fat+0x11a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	091b      	lsrs	r3, r3, #4
 8005716:	b2db      	uxtb	r3, r3
 8005718:	e00e      	b.n	8005738 <put_fat+0x138>
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	b25b      	sxtb	r3, r3
 8005720:	f023 030f 	bic.w	r3, r3, #15
 8005724:	b25a      	sxtb	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	0a1b      	lsrs	r3, r3, #8
 800572a:	b25b      	sxtb	r3, r3
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	b25b      	sxtb	r3, r3
 8005732:	4313      	orrs	r3, r2
 8005734:	b25b      	sxtb	r3, r3
 8005736:	b2db      	uxtb	r3, r3
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	70da      	strb	r2, [r3, #3]
			break;
 8005742:	e074      	b.n	800582e <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	899b      	ldrh	r3, [r3, #12]
 800574c:	085b      	lsrs	r3, r3, #1
 800574e:	b29b      	uxth	r3, r3
 8005750:	4619      	mov	r1, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	fbb3 f3f1 	udiv	r3, r3, r1
 8005758:	4413      	add	r3, r2
 800575a:	4619      	mov	r1, r3
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f7ff fe2f 	bl	80053c0 <move_window>
 8005762:	4603      	mov	r3, r0
 8005764:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005766:	7ffb      	ldrb	r3, [r7, #31]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d15d      	bne.n	8005828 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	8992      	ldrh	r2, [r2, #12]
 800577a:	fbb3 f0f2 	udiv	r0, r3, r2
 800577e:	fb00 f202 	mul.w	r2, r0, r2
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	440b      	add	r3, r1
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	b292      	uxth	r2, r2
 800578a:	4611      	mov	r1, r2
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fbde 	bl	8004f4e <st_word>
			fs->wflag = 1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	70da      	strb	r2, [r3, #3]
			break;
 8005798:	e049      	b.n	800582e <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	899b      	ldrh	r3, [r3, #12]
 80057a2:	089b      	lsrs	r3, r3, #2
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	4619      	mov	r1, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ae:	4413      	add	r3, r2
 80057b0:	4619      	mov	r1, r3
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff fe04 	bl	80053c0 <move_window>
 80057b8:	4603      	mov	r3, r0
 80057ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057bc:	7ffb      	ldrb	r3, [r7, #31]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d134      	bne.n	800582c <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	8992      	ldrh	r2, [r2, #12]
 80057d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80057da:	fb00 f202 	mul.w	r2, r0, r2
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	440b      	add	r3, r1
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fb90 	bl	8004f08 <ld_dword>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80057ee:	4323      	orrs	r3, r4
 80057f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	8992      	ldrh	r2, [r2, #12]
 8005800:	fbb3 f0f2 	udiv	r0, r3, r2
 8005804:	fb00 f202 	mul.w	r2, r0, r2
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	440b      	add	r3, r1
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fbb8 	bl	8004f84 <st_dword>
			fs->wflag = 1;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	70da      	strb	r2, [r3, #3]
			break;
 800581a:	e008      	b.n	800582e <put_fat+0x22e>
		}
	}
 800581c:	bf00      	nop
 800581e:	e006      	b.n	800582e <put_fat+0x22e>
			if (res != FR_OK) break;
 8005820:	bf00      	nop
 8005822:	e004      	b.n	800582e <put_fat+0x22e>
			if (res != FR_OK) break;
 8005824:	bf00      	nop
 8005826:	e002      	b.n	800582e <put_fat+0x22e>
			if (res != FR_OK) break;
 8005828:	bf00      	nop
 800582a:	e000      	b.n	800582e <put_fat+0x22e>
			if (res != FR_OK) break;
 800582c:	bf00      	nop
	return res;
 800582e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3724      	adds	r7, #36	; 0x24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd90      	pop	{r4, r7, pc}

08005838 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d904      	bls.n	800585e <remove_chain+0x26>
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	429a      	cmp	r2, r3
 800585c:	d301      	bcc.n	8005862 <remove_chain+0x2a>
 800585e:	2302      	movs	r3, #2
 8005860:	e04b      	b.n	80058fa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00c      	beq.n	8005882 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005868:	f04f 32ff 	mov.w	r2, #4294967295
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	69b8      	ldr	r0, [r7, #24]
 8005870:	f7ff fec6 	bl	8005600 <put_fat>
 8005874:	4603      	mov	r3, r0
 8005876:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005878:	7ffb      	ldrb	r3, [r7, #31]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <remove_chain+0x4a>
 800587e:	7ffb      	ldrb	r3, [r7, #31]
 8005880:	e03b      	b.n	80058fa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff fde7 	bl	8005458 <get_fat>
 800588a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d031      	beq.n	80058f6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <remove_chain+0x64>
 8005898:	2302      	movs	r3, #2
 800589a:	e02e      	b.n	80058fa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d101      	bne.n	80058a8 <remove_chain+0x70>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e028      	b.n	80058fa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80058a8:	2200      	movs	r2, #0
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	69b8      	ldr	r0, [r7, #24]
 80058ae:	f7ff fea7 	bl	8005600 <put_fat>
 80058b2:	4603      	mov	r3, r0
 80058b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80058b6:	7ffb      	ldrb	r3, [r7, #31]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <remove_chain+0x88>
 80058bc:	7ffb      	ldrb	r3, [r7, #31]
 80058be:	e01c      	b.n	80058fa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	695a      	ldr	r2, [r3, #20]
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	3b02      	subs	r3, #2
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d20b      	bcs.n	80058e6 <remove_chain+0xae>
			fs->free_clst++;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	791b      	ldrb	r3, [r3, #4]
 80058dc:	f043 0301 	orr.w	r3, r3, #1
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d3c6      	bcc.n	8005882 <remove_chain+0x4a>
 80058f4:	e000      	b.n	80058f8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80058f6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b088      	sub	sp, #32
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10d      	bne.n	8005934 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <create_chain+0x2c>
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	429a      	cmp	r2, r3
 800592c:	d31b      	bcc.n	8005966 <create_chain+0x64>
 800592e:	2301      	movs	r3, #1
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	e018      	b.n	8005966 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005934:	6839      	ldr	r1, [r7, #0]
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7ff fd8e 	bl	8005458 <get_fat>
 800593c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d801      	bhi.n	8005948 <create_chain+0x46>
 8005944:	2301      	movs	r3, #1
 8005946:	e070      	b.n	8005a2a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594e:	d101      	bne.n	8005954 <create_chain+0x52>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	e06a      	b.n	8005a2a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	429a      	cmp	r2, r3
 800595c:	d201      	bcs.n	8005962 <create_chain+0x60>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	e063      	b.n	8005a2a <create_chain+0x128>
		scl = clst;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3301      	adds	r3, #1
 800596e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	429a      	cmp	r2, r3
 8005978:	d307      	bcc.n	800598a <create_chain+0x88>
				ncl = 2;
 800597a:	2302      	movs	r3, #2
 800597c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	429a      	cmp	r2, r3
 8005984:	d901      	bls.n	800598a <create_chain+0x88>
 8005986:	2300      	movs	r3, #0
 8005988:	e04f      	b.n	8005a2a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800598a:	69f9      	ldr	r1, [r7, #28]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff fd63 	bl	8005458 <get_fat>
 8005992:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00e      	beq.n	80059b8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d003      	beq.n	80059a8 <create_chain+0xa6>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a6:	d101      	bne.n	80059ac <create_chain+0xaa>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	e03e      	b.n	8005a2a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d1da      	bne.n	800596a <create_chain+0x68>
 80059b4:	2300      	movs	r3, #0
 80059b6:	e038      	b.n	8005a2a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80059b8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80059ba:	f04f 32ff 	mov.w	r2, #4294967295
 80059be:	69f9      	ldr	r1, [r7, #28]
 80059c0:	6938      	ldr	r0, [r7, #16]
 80059c2:	f7ff fe1d 	bl	8005600 <put_fat>
 80059c6:	4603      	mov	r3, r0
 80059c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d109      	bne.n	80059e4 <create_chain+0xe2>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d006      	beq.n	80059e4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	6938      	ldr	r0, [r7, #16]
 80059dc:	f7ff fe10 	bl	8005600 <put_fat>
 80059e0:	4603      	mov	r3, r0
 80059e2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d116      	bne.n	8005a18 <create_chain+0x116>
		fs->last_clst = ncl;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	695a      	ldr	r2, [r3, #20]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	3b02      	subs	r3, #2
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d804      	bhi.n	8005a08 <create_chain+0x106>
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	1e5a      	subs	r2, r3, #1
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	791b      	ldrb	r3, [r3, #4]
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	711a      	strb	r2, [r3, #4]
 8005a16:	e007      	b.n	8005a28 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d102      	bne.n	8005a24 <create_chain+0x122>
 8005a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a22:	e000      	b.n	8005a26 <create_chain+0x124>
 8005a24:	2301      	movs	r3, #1
 8005a26:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005a28:	69fb      	ldr	r3, [r7, #28]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3720      	adds	r7, #32
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b087      	sub	sp, #28
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	3304      	adds	r3, #4
 8005a48:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	899b      	ldrh	r3, [r3, #12]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	8952      	ldrh	r2, [r2, #10]
 8005a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	613a      	str	r2, [r7, #16]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <clmt_clust+0x42>
 8005a70:	2300      	movs	r3, #0
 8005a72:	e010      	b.n	8005a96 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d307      	bcc.n	8005a8c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3304      	adds	r3, #4
 8005a88:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a8a:	e7e9      	b.n	8005a60 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005a8c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	4413      	add	r3, r2
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ab8:	d204      	bcs.n	8005ac4 <dir_sdi+0x22>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	f003 031f 	and.w	r3, r3, #31
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e071      	b.n	8005bac <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <dir_sdi+0x46>
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d902      	bls.n	8005ae8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10c      	bne.n	8005b08 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	8912      	ldrh	r2, [r2, #8]
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d301      	bcc.n	8005afe <dir_sdi+0x5c>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e056      	b.n	8005bac <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	61da      	str	r2, [r3, #28]
 8005b06:	e02d      	b.n	8005b64 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	895b      	ldrh	r3, [r3, #10]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	899b      	ldrh	r3, [r3, #12]
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005b18:	e019      	b.n	8005b4e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6979      	ldr	r1, [r7, #20]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fc9a 	bl	8005458 <get_fat>
 8005b24:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d101      	bne.n	8005b32 <dir_sdi+0x90>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e03c      	b.n	8005bac <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d904      	bls.n	8005b42 <dir_sdi+0xa0>
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d301      	bcc.n	8005b46 <dir_sdi+0xa4>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e032      	b.n	8005bac <dir_sdi+0x10a>
			ofs -= csz;
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d2e1      	bcs.n	8005b1a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005b56:	6979      	ldr	r1, [r7, #20]
 8005b58:	6938      	ldr	r0, [r7, #16]
 8005b5a:	f7ff fc5e 	bl	800541a <clust2sect>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <dir_sdi+0xd4>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e01a      	b.n	8005bac <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69da      	ldr	r2, [r3, #28]
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	899b      	ldrh	r3, [r3, #12]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b86:	441a      	add	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	899b      	ldrh	r3, [r3, #12]
 8005b96:	461a      	mov	r2, r3
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b9e:	fb00 f202 	mul.w	r2, r0, r2
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	18ca      	adds	r2, r1, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	3320      	adds	r3, #32
 8005bca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <dir_next+0x28>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bda:	d301      	bcc.n	8005be0 <dir_next+0x2c>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	e0bb      	b.n	8005d58 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	899b      	ldrh	r3, [r3, #12]
 8005be4:	461a      	mov	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bec:	fb01 f202 	mul.w	r2, r1, r2
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f040 809d 	bne.w	8005d32 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	8912      	ldrh	r2, [r2, #8]
 8005c12:	4293      	cmp	r3, r2
 8005c14:	f0c0 808d 	bcc.w	8005d32 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	61da      	str	r2, [r3, #28]
 8005c1e:	2304      	movs	r3, #4
 8005c20:	e09a      	b.n	8005d58 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	899b      	ldrh	r3, [r3, #12]
 8005c26:	461a      	mov	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	8952      	ldrh	r2, [r2, #10]
 8005c32:	3a01      	subs	r2, #1
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d17b      	bne.n	8005d32 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f7ff fc08 	bl	8005458 <get_fat>
 8005c48:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d801      	bhi.n	8005c54 <dir_next+0xa0>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e081      	b.n	8005d58 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	d101      	bne.n	8005c60 <dir_next+0xac>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e07b      	b.n	8005d58 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d359      	bcc.n	8005d1e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	61da      	str	r2, [r3, #28]
 8005c76:	2304      	movs	r3, #4
 8005c78:	e06e      	b.n	8005d58 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f7ff fe3d 	bl	8005902 <create_chain>
 8005c88:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <dir_next+0xe0>
 8005c90:	2307      	movs	r3, #7
 8005c92:	e061      	b.n	8005d58 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <dir_next+0xea>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e05c      	b.n	8005d58 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d101      	bne.n	8005caa <dir_next+0xf6>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e056      	b.n	8005d58 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff fb44 	bl	8005338 <sync_window>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <dir_next+0x106>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e04e      	b.n	8005d58 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	899b      	ldrh	r3, [r3, #12]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	f7ff f9a9 	bl	800501e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ccc:	2300      	movs	r3, #0
 8005cce:	613b      	str	r3, [r7, #16]
 8005cd0:	6979      	ldr	r1, [r7, #20]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff fba1 	bl	800541a <clust2sect>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8005cde:	e012      	b.n	8005d06 <dir_next+0x152>
						fs->wflag = 1;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff fb26 	bl	8005338 <sync_window>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <dir_next+0x142>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e030      	b.n	8005d58 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	895b      	ldrh	r3, [r3, #10]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d3e6      	bcc.n	8005ce0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad2      	subs	r2, r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005d24:	6979      	ldr	r1, [r7, #20]
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f7ff fb77 	bl	800541a <clust2sect>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	899b      	ldrh	r3, [r3, #12]
 8005d42:	461a      	mov	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d4a:	fb00 f202 	mul.w	r2, r0, r2
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	18ca      	adds	r2, r1, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005d70:	2100      	movs	r1, #0
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff fe95 	bl	8005aa2 <dir_sdi>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d12b      	bne.n	8005dda <dir_alloc+0x7a>
		n = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff fb17 	bl	80053c0 <move_window>
 8005d92:	4603      	mov	r3, r0
 8005d94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d11d      	bne.n	8005dd8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2be5      	cmp	r3, #229	; 0xe5
 8005da4:	d004      	beq.n	8005db0 <dir_alloc+0x50>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d107      	bne.n	8005dc0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	3301      	adds	r3, #1
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d102      	bne.n	8005dc4 <dir_alloc+0x64>
 8005dbe:	e00c      	b.n	8005dda <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fef4 	bl	8005bb4 <dir_next>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0d7      	beq.n	8005d86 <dir_alloc+0x26>
 8005dd6:	e000      	b.n	8005dda <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005dd8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d101      	bne.n	8005de4 <dir_alloc+0x84>
 8005de0:	2307      	movs	r3, #7
 8005de2:	75fb      	strb	r3, [r7, #23]
	return res;
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	331a      	adds	r3, #26
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff f86b 	bl	8004ed8 <ld_word>
 8005e02:	4603      	mov	r3, r0
 8005e04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d109      	bne.n	8005e22 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	3314      	adds	r3, #20
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff f860 	bl	8004ed8 <ld_word>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	041b      	lsls	r3, r3, #16
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005e22:	68fb      	ldr	r3, [r7, #12]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	331a      	adds	r3, #26
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	b292      	uxth	r2, r2
 8005e40:	4611      	mov	r1, r2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff f883 	bl	8004f4e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d109      	bne.n	8005e64 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f103 0214 	add.w	r2, r3, #20
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	0c1b      	lsrs	r3, r3, #16
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f7ff f875 	bl	8004f4e <st_word>
	}
}
 8005e64:	bf00      	nop
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff fe10 	bl	8005aa2 <dir_sdi>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <dir_find+0x24>
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	e03e      	b.n	8005f0e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	4619      	mov	r1, r3
 8005e96:	6938      	ldr	r0, [r7, #16]
 8005e98:	f7ff fa92 	bl	80053c0 <move_window>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d12f      	bne.n	8005f06 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d102      	bne.n	8005eba <dir_find+0x4e>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	75fb      	strb	r3, [r7, #23]
 8005eb8:	e028      	b.n	8005f0c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	330b      	adds	r3, #11
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	330b      	adds	r3, #11
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <dir_find+0x86>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a18      	ldr	r0, [r3, #32]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3324      	adds	r3, #36	; 0x24
 8005ee4:	220b      	movs	r2, #11
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	f7ff f8b4 	bl	8005054 <mem_cmp>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00b      	beq.n	8005f0a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff fe5d 	bl	8005bb4 <dir_next>
 8005efa:	4603      	mov	r3, r0
 8005efc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005efe:	7dfb      	ldrb	r3, [r7, #23]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0c5      	beq.n	8005e90 <dir_find+0x24>
 8005f04:	e002      	b.n	8005f0c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005f0a:	bf00      	nop

	return res;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005f24:	2101      	movs	r1, #1
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff ff1a 	bl	8005d60 <dir_alloc>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d11c      	bne.n	8005f70 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	68b8      	ldr	r0, [r7, #8]
 8005f3e:	f7ff fa3f 	bl	80053c0 <move_window>
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d111      	bne.n	8005f70 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	2220      	movs	r2, #32
 8005f52:	2100      	movs	r1, #0
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff f862 	bl	800501e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a18      	ldr	r0, [r3, #32]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3324      	adds	r3, #36	; 0x24
 8005f62:	220b      	movs	r2, #11
 8005f64:	4619      	mov	r1, r3
 8005f66:	f7ff f839 	bl	8004fdc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b086      	sub	sp, #24
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2200      	movs	r2, #0
 8005f88:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d04e      	beq.n	8006030 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8005f9a:	e021      	b.n	8005fe0 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1a      	ldr	r2, [r3, #32]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	1c59      	adds	r1, r3, #1
 8005fa4:	6179      	str	r1, [r7, #20]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d100      	bne.n	8005fb4 <get_fileinfo+0x3a>
 8005fb2:	e015      	b.n	8005fe0 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d101      	bne.n	8005fbe <get_fileinfo+0x44>
 8005fba:	23e5      	movs	r3, #229	; 0xe5
 8005fbc:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b09      	cmp	r3, #9
 8005fc2:	d106      	bne.n	8005fd2 <get_fileinfo+0x58>
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	613a      	str	r2, [r7, #16]
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	4413      	add	r3, r2
 8005fce:	222e      	movs	r2, #46	; 0x2e
 8005fd0:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	613a      	str	r2, [r7, #16]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	4413      	add	r3, r2
 8005fdc:	7bfa      	ldrb	r2, [r7, #15]
 8005fde:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2b0a      	cmp	r3, #10
 8005fe4:	d9da      	bls.n	8005f9c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4413      	add	r3, r2
 8005fec:	3309      	adds	r3, #9
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	7ada      	ldrb	r2, [r3, #11]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	331c      	adds	r3, #28
 8006002:	4618      	mov	r0, r3
 8006004:	f7fe ff80 	bl	8004f08 <ld_dword>
 8006008:	4602      	mov	r2, r0
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	3316      	adds	r3, #22
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe ff77 	bl	8004f08 <ld_dword>
 800601a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	b29a      	uxth	r2, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	80da      	strh	r2, [r3, #6]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	0c1b      	lsrs	r3, r3, #16
 8006028:	b29a      	uxth	r2, r3
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	809a      	strh	r2, [r3, #4]
 800602e:	e000      	b.n	8006032 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006030:	bf00      	nop
}
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3324      	adds	r3, #36	; 0x24
 800604c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800604e:	220b      	movs	r2, #11
 8006050:	2120      	movs	r1, #32
 8006052:	68b8      	ldr	r0, [r7, #8]
 8006054:	f7fe ffe3 	bl	800501e <mem_set>
	si = i = 0; ni = 8;
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	61fb      	str	r3, [r7, #28]
 8006060:	2308      	movs	r3, #8
 8006062:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	61fa      	str	r2, [r7, #28]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006072:	7efb      	ldrb	r3, [r7, #27]
 8006074:	2b20      	cmp	r3, #32
 8006076:	d94e      	bls.n	8006116 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006078:	7efb      	ldrb	r3, [r7, #27]
 800607a:	2b2f      	cmp	r3, #47	; 0x2f
 800607c:	d006      	beq.n	800608c <create_name+0x54>
 800607e:	7efb      	ldrb	r3, [r7, #27]
 8006080:	2b5c      	cmp	r3, #92	; 0x5c
 8006082:	d110      	bne.n	80060a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006084:	e002      	b.n	800608c <create_name+0x54>
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3301      	adds	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b2f      	cmp	r3, #47	; 0x2f
 8006096:	d0f6      	beq.n	8006086 <create_name+0x4e>
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b5c      	cmp	r3, #92	; 0x5c
 80060a2:	d0f0      	beq.n	8006086 <create_name+0x4e>
			break;
 80060a4:	e038      	b.n	8006118 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80060a6:	7efb      	ldrb	r3, [r7, #27]
 80060a8:	2b2e      	cmp	r3, #46	; 0x2e
 80060aa:	d003      	beq.n	80060b4 <create_name+0x7c>
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d30c      	bcc.n	80060ce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2b0b      	cmp	r3, #11
 80060b8:	d002      	beq.n	80060c0 <create_name+0x88>
 80060ba:	7efb      	ldrb	r3, [r7, #27]
 80060bc:	2b2e      	cmp	r3, #46	; 0x2e
 80060be:	d001      	beq.n	80060c4 <create_name+0x8c>
 80060c0:	2306      	movs	r3, #6
 80060c2:	e044      	b.n	800614e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80060c4:	2308      	movs	r3, #8
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	230b      	movs	r3, #11
 80060ca:	617b      	str	r3, [r7, #20]
			continue;
 80060cc:	e022      	b.n	8006114 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80060ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	da04      	bge.n	80060e0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80060d6:	7efb      	ldrb	r3, [r7, #27]
 80060d8:	3b80      	subs	r3, #128	; 0x80
 80060da:	4a1f      	ldr	r2, [pc, #124]	; (8006158 <create_name+0x120>)
 80060dc:	5cd3      	ldrb	r3, [r2, r3]
 80060de:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80060e0:	7efb      	ldrb	r3, [r7, #27]
 80060e2:	4619      	mov	r1, r3
 80060e4:	481d      	ldr	r0, [pc, #116]	; (800615c <create_name+0x124>)
 80060e6:	f7fe ffdc 	bl	80050a2 <chk_chr>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <create_name+0xbc>
 80060f0:	2306      	movs	r3, #6
 80060f2:	e02c      	b.n	800614e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80060f4:	7efb      	ldrb	r3, [r7, #27]
 80060f6:	2b60      	cmp	r3, #96	; 0x60
 80060f8:	d905      	bls.n	8006106 <create_name+0xce>
 80060fa:	7efb      	ldrb	r3, [r7, #27]
 80060fc:	2b7a      	cmp	r3, #122	; 0x7a
 80060fe:	d802      	bhi.n	8006106 <create_name+0xce>
 8006100:	7efb      	ldrb	r3, [r7, #27]
 8006102:	3b20      	subs	r3, #32
 8006104:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	613a      	str	r2, [r7, #16]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	4413      	add	r3, r2
 8006110:	7efa      	ldrb	r2, [r7, #27]
 8006112:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006114:	e7a6      	b.n	8006064 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006116:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	441a      	add	r2, r3
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <create_name+0xf4>
 8006128:	2306      	movs	r3, #6
 800612a:	e010      	b.n	800614e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2be5      	cmp	r3, #229	; 0xe5
 8006132:	d102      	bne.n	800613a <create_name+0x102>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2205      	movs	r2, #5
 8006138:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800613a:	7efb      	ldrb	r3, [r7, #27]
 800613c:	2b20      	cmp	r3, #32
 800613e:	d801      	bhi.n	8006144 <create_name+0x10c>
 8006140:	2204      	movs	r2, #4
 8006142:	e000      	b.n	8006146 <create_name+0x10e>
 8006144:	2200      	movs	r2, #0
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	330b      	adds	r3, #11
 800614a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800614c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800614e:	4618      	mov	r0, r3
 8006150:	3720      	adds	r7, #32
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	08008860 	.word	0x08008860
 800615c:	080087f0 	.word	0x080087f0

08006160 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006174:	e002      	b.n	800617c <follow_path+0x1c>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	3301      	adds	r3, #1
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b2f      	cmp	r3, #47	; 0x2f
 8006182:	d0f8      	beq.n	8006176 <follow_path+0x16>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b5c      	cmp	r3, #92	; 0x5c
 800618a:	d0f4      	beq.n	8006176 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2200      	movs	r2, #0
 8006190:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b1f      	cmp	r3, #31
 8006198:	d80a      	bhi.n	80061b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2280      	movs	r2, #128	; 0x80
 800619e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80061a2:	2100      	movs	r1, #0
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff fc7c 	bl	8005aa2 <dir_sdi>
 80061aa:	4603      	mov	r3, r0
 80061ac:	75fb      	strb	r3, [r7, #23]
 80061ae:	e048      	b.n	8006242 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80061b0:	463b      	mov	r3, r7
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff ff3f 	bl	8006038 <create_name>
 80061ba:	4603      	mov	r3, r0
 80061bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80061be:	7dfb      	ldrb	r3, [r7, #23]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d139      	bne.n	8006238 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff fe51 	bl	8005e6c <dir_find>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80061d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d12c      	bne.n	800623c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80061e2:	7afb      	ldrb	r3, [r7, #11]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d127      	bne.n	800623c <follow_path+0xdc>
 80061ec:	2305      	movs	r3, #5
 80061ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80061f0:	e024      	b.n	800623c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80061f2:	7afb      	ldrb	r3, [r7, #11]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d121      	bne.n	8006240 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	799b      	ldrb	r3, [r3, #6]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b00      	cmp	r3, #0
 8006206:	d102      	bne.n	800620e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006208:	2305      	movs	r3, #5
 800620a:	75fb      	strb	r3, [r7, #23]
 800620c:	e019      	b.n	8006242 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	8992      	ldrh	r2, [r2, #12]
 800621c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006220:	fb00 f202 	mul.w	r2, r0, r2
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	440b      	add	r3, r1
 8006228:	4619      	mov	r1, r3
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7ff fddf 	bl	8005dee <ld_clust>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006236:	e7bb      	b.n	80061b0 <follow_path+0x50>
			if (res != FR_OK) break;
 8006238:	bf00      	nop
 800623a:	e002      	b.n	8006242 <follow_path+0xe2>
				break;
 800623c:	bf00      	nop
 800623e:	e000      	b.n	8006242 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006240:	bf00      	nop
			}
		}
	}

	return res;
 8006242:	7dfb      	ldrb	r3, [r7, #23]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006254:	f04f 33ff 	mov.w	r3, #4294967295
 8006258:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d031      	beq.n	80062c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	e002      	b.n	8006270 <get_ldnumber+0x24>
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	3301      	adds	r3, #1
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b20      	cmp	r3, #32
 8006276:	d903      	bls.n	8006280 <get_ldnumber+0x34>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b3a      	cmp	r3, #58	; 0x3a
 800627e:	d1f4      	bne.n	800626a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b3a      	cmp	r3, #58	; 0x3a
 8006286:	d11c      	bne.n	80062c2 <get_ldnumber+0x76>
			tp = *path;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	60fa      	str	r2, [r7, #12]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	3b30      	subs	r3, #48	; 0x30
 8006298:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b09      	cmp	r3, #9
 800629e:	d80e      	bhi.n	80062be <get_ldnumber+0x72>
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d10a      	bne.n	80062be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d107      	bne.n	80062be <get_ldnumber+0x72>
					vol = (int)i;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	3301      	adds	r3, #1
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	e002      	b.n	80062c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80062c6:	693b      	ldr	r3, [r7, #16]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	70da      	strb	r2, [r3, #3]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff f866 	bl	80053c0 <move_window>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <check_fs+0x2a>
 80062fa:	2304      	movs	r3, #4
 80062fc:	e038      	b.n	8006370 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3334      	adds	r3, #52	; 0x34
 8006302:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe fde6 	bl	8004ed8 <ld_word>
 800630c:	4603      	mov	r3, r0
 800630e:	461a      	mov	r2, r3
 8006310:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006314:	429a      	cmp	r2, r3
 8006316:	d001      	beq.n	800631c <check_fs+0x48>
 8006318:	2303      	movs	r3, #3
 800631a:	e029      	b.n	8006370 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006322:	2be9      	cmp	r3, #233	; 0xe9
 8006324:	d009      	beq.n	800633a <check_fs+0x66>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800632c:	2beb      	cmp	r3, #235	; 0xeb
 800632e:	d11e      	bne.n	800636e <check_fs+0x9a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006336:	2b90      	cmp	r3, #144	; 0x90
 8006338:	d119      	bne.n	800636e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3334      	adds	r3, #52	; 0x34
 800633e:	3336      	adds	r3, #54	; 0x36
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe fde1 	bl	8004f08 <ld_dword>
 8006346:	4603      	mov	r3, r0
 8006348:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800634c:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <check_fs+0xa4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d101      	bne.n	8006356 <check_fs+0x82>
 8006352:	2300      	movs	r3, #0
 8006354:	e00c      	b.n	8006370 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3334      	adds	r3, #52	; 0x34
 800635a:	3352      	adds	r3, #82	; 0x52
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe fdd3 	bl	8004f08 <ld_dword>
 8006362:	4603      	mov	r3, r0
 8006364:	4a05      	ldr	r2, [pc, #20]	; (800637c <check_fs+0xa8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d101      	bne.n	800636e <check_fs+0x9a>
 800636a:	2300      	movs	r3, #0
 800636c:	e000      	b.n	8006370 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800636e:	2302      	movs	r3, #2
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	00544146 	.word	0x00544146
 800637c:	33544146 	.word	0x33544146

08006380 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b096      	sub	sp, #88	; 0x58
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	4613      	mov	r3, r2
 800638c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f7ff ff59 	bl	800624c <get_ldnumber>
 800639a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800639c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	da01      	bge.n	80063a6 <find_volume+0x26>
 80063a2:	230b      	movs	r3, #11
 80063a4:	e262      	b.n	800686c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80063a6:	4a9f      	ldr	r2, [pc, #636]	; (8006624 <find_volume+0x2a4>)
 80063a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <find_volume+0x3a>
 80063b6:	230c      	movs	r3, #12
 80063b8:	e258      	b.n	800686c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	f023 0301 	bic.w	r3, r3, #1
 80063c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01a      	beq.n	8006406 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe fce1 	bl	8004d9c <disk_status>
 80063da:	4603      	mov	r3, r0
 80063dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80063e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10c      	bne.n	8006406 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <find_volume+0x82>
 80063f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80063fe:	230a      	movs	r3, #10
 8006400:	e234      	b.n	800686c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8006402:	2300      	movs	r3, #0
 8006404:	e232      	b.n	800686c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800640c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640e:	b2da      	uxtb	r2, r3
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006416:	785b      	ldrb	r3, [r3, #1]
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe fcd9 	bl	8004dd0 <disk_initialize>
 800641e:	4603      	mov	r3, r0
 8006420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006430:	2303      	movs	r3, #3
 8006432:	e21b      	b.n	800686c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d007      	beq.n	800644a <find_volume+0xca>
 800643a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006446:	230a      	movs	r3, #10
 8006448:	e210      	b.n	800686c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	7858      	ldrb	r0, [r3, #1]
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	330c      	adds	r3, #12
 8006452:	461a      	mov	r2, r3
 8006454:	2102      	movs	r1, #2
 8006456:	f7fe fd21 	bl	8004e9c <disk_ioctl>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <find_volume+0xe4>
 8006460:	2301      	movs	r3, #1
 8006462:	e203      	b.n	800686c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	899b      	ldrh	r3, [r3, #12]
 8006468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646c:	d80d      	bhi.n	800648a <find_volume+0x10a>
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	899b      	ldrh	r3, [r3, #12]
 8006472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006476:	d308      	bcc.n	800648a <find_volume+0x10a>
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	899b      	ldrh	r3, [r3, #12]
 800647c:	461a      	mov	r2, r3
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	899b      	ldrh	r3, [r3, #12]
 8006482:	3b01      	subs	r3, #1
 8006484:	4013      	ands	r3, r2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <find_volume+0x10e>
 800648a:	2301      	movs	r3, #1
 800648c:	e1ee      	b.n	800686c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800648e:	2300      	movs	r3, #0
 8006490:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006492:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006494:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006496:	f7ff ff1d 	bl	80062d4 <check_fs>
 800649a:	4603      	mov	r3, r0
 800649c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80064a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d149      	bne.n	800653c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80064a8:	2300      	movs	r3, #0
 80064aa:	643b      	str	r3, [r7, #64]	; 0x40
 80064ac:	e01e      	b.n	80064ec <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80064b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80064bc:	4413      	add	r3, r2
 80064be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	3304      	adds	r3, #4
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d006      	beq.n	80064d8 <find_volume+0x158>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	3308      	adds	r3, #8
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe fd1a 	bl	8004f08 <ld_dword>
 80064d4:	4602      	mov	r2, r0
 80064d6:	e000      	b.n	80064da <find_volume+0x15a>
 80064d8:	2200      	movs	r2, #0
 80064da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	3358      	adds	r3, #88	; 0x58
 80064e0:	443b      	add	r3, r7
 80064e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80064e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e8:	3301      	adds	r3, #1
 80064ea:	643b      	str	r3, [r7, #64]	; 0x40
 80064ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d9dd      	bls.n	80064ae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80064f2:	2300      	movs	r3, #0
 80064f4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80064f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <find_volume+0x182>
 80064fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064fe:	3b01      	subs	r3, #1
 8006500:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	3358      	adds	r3, #88	; 0x58
 8006508:	443b      	add	r3, r7
 800650a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800650e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006512:	2b00      	cmp	r3, #0
 8006514:	d005      	beq.n	8006522 <find_volume+0x1a2>
 8006516:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006518:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800651a:	f7ff fedb 	bl	80062d4 <check_fs>
 800651e:	4603      	mov	r3, r0
 8006520:	e000      	b.n	8006524 <find_volume+0x1a4>
 8006522:	2303      	movs	r3, #3
 8006524:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006528:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800652c:	2b01      	cmp	r3, #1
 800652e:	d905      	bls.n	800653c <find_volume+0x1bc>
 8006530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006532:	3301      	adds	r3, #1
 8006534:	643b      	str	r3, [r7, #64]	; 0x40
 8006536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006538:	2b03      	cmp	r3, #3
 800653a:	d9e2      	bls.n	8006502 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800653c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006540:	2b04      	cmp	r3, #4
 8006542:	d101      	bne.n	8006548 <find_volume+0x1c8>
 8006544:	2301      	movs	r3, #1
 8006546:	e191      	b.n	800686c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006548:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800654c:	2b01      	cmp	r3, #1
 800654e:	d901      	bls.n	8006554 <find_volume+0x1d4>
 8006550:	230d      	movs	r3, #13
 8006552:	e18b      	b.n	800686c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	3334      	adds	r3, #52	; 0x34
 8006558:	330b      	adds	r3, #11
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fcbc 	bl	8004ed8 <ld_word>
 8006560:	4603      	mov	r3, r0
 8006562:	461a      	mov	r2, r3
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	899b      	ldrh	r3, [r3, #12]
 8006568:	429a      	cmp	r2, r3
 800656a:	d001      	beq.n	8006570 <find_volume+0x1f0>
 800656c:	230d      	movs	r3, #13
 800656e:	e17d      	b.n	800686c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	3334      	adds	r3, #52	; 0x34
 8006574:	3316      	adds	r3, #22
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fcae 	bl	8004ed8 <ld_word>
 800657c:	4603      	mov	r3, r0
 800657e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <find_volume+0x214>
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	3334      	adds	r3, #52	; 0x34
 800658a:	3324      	adds	r3, #36	; 0x24
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe fcbb 	bl	8004f08 <ld_dword>
 8006592:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006598:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80065a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	789b      	ldrb	r3, [r3, #2]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d005      	beq.n	80065b8 <find_volume+0x238>
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	789b      	ldrb	r3, [r3, #2]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d001      	beq.n	80065b8 <find_volume+0x238>
 80065b4:	230d      	movs	r3, #13
 80065b6:	e159      	b.n	800686c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	789b      	ldrb	r3, [r3, #2]
 80065bc:	461a      	mov	r2, r3
 80065be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c0:	fb02 f303 	mul.w	r3, r2, r3
 80065c4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	895b      	ldrh	r3, [r3, #10]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d008      	beq.n	80065ec <find_volume+0x26c>
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	895b      	ldrh	r3, [r3, #10]
 80065de:	461a      	mov	r2, r3
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	895b      	ldrh	r3, [r3, #10]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <find_volume+0x270>
 80065ec:	230d      	movs	r3, #13
 80065ee:	e13d      	b.n	800686c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	3334      	adds	r3, #52	; 0x34
 80065f4:	3311      	adds	r3, #17
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe fc6e 	bl	8004ed8 <ld_word>
 80065fc:	4603      	mov	r3, r0
 80065fe:	461a      	mov	r2, r3
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	891b      	ldrh	r3, [r3, #8]
 8006608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800660a:	8992      	ldrh	r2, [r2, #12]
 800660c:	0952      	lsrs	r2, r2, #5
 800660e:	b292      	uxth	r2, r2
 8006610:	fbb3 f1f2 	udiv	r1, r3, r2
 8006614:	fb01 f202 	mul.w	r2, r1, r2
 8006618:	1a9b      	subs	r3, r3, r2
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <find_volume+0x2a8>
 8006620:	230d      	movs	r3, #13
 8006622:	e123      	b.n	800686c <find_volume+0x4ec>
 8006624:	20002264 	.word	0x20002264

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	3334      	adds	r3, #52	; 0x34
 800662c:	3313      	adds	r3, #19
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe fc52 	bl	8004ed8 <ld_word>
 8006634:	4603      	mov	r3, r0
 8006636:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <find_volume+0x2cc>
 800663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006640:	3334      	adds	r3, #52	; 0x34
 8006642:	3320      	adds	r3, #32
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fc5f 	bl	8004f08 <ld_dword>
 800664a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	3334      	adds	r3, #52	; 0x34
 8006650:	330e      	adds	r3, #14
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fc40 	bl	8004ed8 <ld_word>
 8006658:	4603      	mov	r3, r0
 800665a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800665c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <find_volume+0x2e6>
 8006662:	230d      	movs	r3, #13
 8006664:	e102      	b.n	800686c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006666:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666a:	4413      	add	r3, r2
 800666c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800666e:	8911      	ldrh	r1, [r2, #8]
 8006670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006672:	8992      	ldrh	r2, [r2, #12]
 8006674:	0952      	lsrs	r2, r2, #5
 8006676:	b292      	uxth	r2, r2
 8006678:	fbb1 f2f2 	udiv	r2, r1, r2
 800667c:	b292      	uxth	r2, r2
 800667e:	4413      	add	r3, r2
 8006680:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	429a      	cmp	r2, r3
 8006688:	d201      	bcs.n	800668e <find_volume+0x30e>
 800668a:	230d      	movs	r3, #13
 800668c:	e0ee      	b.n	800686c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800668e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006696:	8952      	ldrh	r2, [r2, #10]
 8006698:	fbb3 f3f2 	udiv	r3, r3, r2
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <find_volume+0x328>
 80066a4:	230d      	movs	r3, #13
 80066a6:	e0e1      	b.n	800686c <find_volume+0x4ec>
		fmt = FS_FAT32;
 80066a8:	2303      	movs	r3, #3
 80066aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d802      	bhi.n	80066be <find_volume+0x33e>
 80066b8:	2302      	movs	r3, #2
 80066ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d802      	bhi.n	80066ce <find_volume+0x34e>
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	1c9a      	adds	r2, r3, #2
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066da:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80066dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80066de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066e0:	441a      	add	r2, r3
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80066e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	441a      	add	r2, r3
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80066f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d11e      	bne.n	8006736 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	3334      	adds	r3, #52	; 0x34
 80066fc:	332a      	adds	r3, #42	; 0x2a
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fe fbea 	bl	8004ed8 <ld_word>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <find_volume+0x38e>
 800670a:	230d      	movs	r3, #13
 800670c:	e0ae      	b.n	800686c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006710:	891b      	ldrh	r3, [r3, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <find_volume+0x39a>
 8006716:	230d      	movs	r3, #13
 8006718:	e0a8      	b.n	800686c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800671a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671c:	3334      	adds	r3, #52	; 0x34
 800671e:	332c      	adds	r3, #44	; 0x2c
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe fbf1 	bl	8004f08 <ld_dword>
 8006726:	4602      	mov	r2, r0
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800672c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	647b      	str	r3, [r7, #68]	; 0x44
 8006734:	e01f      	b.n	8006776 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	891b      	ldrh	r3, [r3, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <find_volume+0x3c2>
 800673e:	230d      	movs	r3, #13
 8006740:	e094      	b.n	800686c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006748:	441a      	add	r2, r3
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800674e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006752:	2b02      	cmp	r3, #2
 8006754:	d103      	bne.n	800675e <find_volume+0x3de>
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	e00a      	b.n	8006774 <find_volume+0x3f4>
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	4613      	mov	r3, r2
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	4413      	add	r3, r2
 8006768:	085a      	lsrs	r2, r3, #1
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006774:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	69da      	ldr	r2, [r3, #28]
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	899b      	ldrh	r3, [r3, #12]
 800677e:	4619      	mov	r1, r3
 8006780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006782:	440b      	add	r3, r1
 8006784:	3b01      	subs	r3, #1
 8006786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006788:	8989      	ldrh	r1, [r1, #12]
 800678a:	fbb3 f3f1 	udiv	r3, r3, r1
 800678e:	429a      	cmp	r2, r3
 8006790:	d201      	bcs.n	8006796 <find_volume+0x416>
 8006792:	230d      	movs	r3, #13
 8006794:	e06a      	b.n	800686c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	f04f 32ff 	mov.w	r2, #4294967295
 800679c:	615a      	str	r2, [r3, #20]
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	695a      	ldr	r2, [r3, #20]
 80067a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80067a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a8:	2280      	movs	r2, #128	; 0x80
 80067aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80067ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d149      	bne.n	8006848 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	3334      	adds	r3, #52	; 0x34
 80067b8:	3330      	adds	r3, #48	; 0x30
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fb8c 	bl	8004ed8 <ld_word>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d140      	bne.n	8006848 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80067c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c8:	3301      	adds	r3, #1
 80067ca:	4619      	mov	r1, r3
 80067cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067ce:	f7fe fdf7 	bl	80053c0 <move_window>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d137      	bne.n	8006848 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	2200      	movs	r2, #0
 80067dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	3334      	adds	r3, #52	; 0x34
 80067e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fb76 	bl	8004ed8 <ld_word>
 80067ec:	4603      	mov	r3, r0
 80067ee:	461a      	mov	r2, r3
 80067f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d127      	bne.n	8006848 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	3334      	adds	r3, #52	; 0x34
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe fb83 	bl	8004f08 <ld_dword>
 8006802:	4603      	mov	r3, r0
 8006804:	4a1b      	ldr	r2, [pc, #108]	; (8006874 <find_volume+0x4f4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d11e      	bne.n	8006848 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680c:	3334      	adds	r3, #52	; 0x34
 800680e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fb78 	bl	8004f08 <ld_dword>
 8006818:	4603      	mov	r3, r0
 800681a:	4a17      	ldr	r2, [pc, #92]	; (8006878 <find_volume+0x4f8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d113      	bne.n	8006848 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	3334      	adds	r3, #52	; 0x34
 8006824:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006828:	4618      	mov	r0, r3
 800682a:	f7fe fb6d 	bl	8004f08 <ld_dword>
 800682e:	4602      	mov	r2, r0
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	3334      	adds	r3, #52	; 0x34
 8006838:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800683c:	4618      	mov	r0, r3
 800683e:	f7fe fb63 	bl	8004f08 <ld_dword>
 8006842:	4602      	mov	r2, r0
 8006844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006846:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800684e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006850:	4b0a      	ldr	r3, [pc, #40]	; (800687c <find_volume+0x4fc>)
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	4b08      	ldr	r3, [pc, #32]	; (800687c <find_volume+0x4fc>)
 800685a:	801a      	strh	r2, [r3, #0]
 800685c:	4b07      	ldr	r3, [pc, #28]	; (800687c <find_volume+0x4fc>)
 800685e:	881a      	ldrh	r2, [r3, #0]
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006864:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006866:	f7fe fd43 	bl	80052f0 <clear_lock>
#endif
	return FR_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3758      	adds	r7, #88	; 0x58
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	41615252 	.word	0x41615252
 8006878:	61417272 	.word	0x61417272
 800687c:	20002268 	.word	0x20002268

08006880 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800688a:	2309      	movs	r3, #9
 800688c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01c      	beq.n	80068ce <validate+0x4e>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d018      	beq.n	80068ce <validate+0x4e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d013      	beq.n	80068ce <validate+0x4e>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	889a      	ldrh	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	88db      	ldrh	r3, [r3, #6]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d10c      	bne.n	80068ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fa6e 	bl	8004d9c <disk_status>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <validate+0x4e>
			res = FR_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <validate+0x5a>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	e000      	b.n	80068dc <validate+0x5c>
 80068da:	2300      	movs	r3, #0
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	6013      	str	r3, [r2, #0]
	return res;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80068fe:	f107 0310 	add.w	r3, r7, #16
 8006902:	4618      	mov	r0, r3
 8006904:	f7ff fca2 	bl	800624c <get_ldnumber>
 8006908:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	2b00      	cmp	r3, #0
 800690e:	da01      	bge.n	8006914 <f_mount+0x28>
 8006910:	230b      	movs	r3, #11
 8006912:	e02b      	b.n	800696c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006914:	4a17      	ldr	r2, [pc, #92]	; (8006974 <f_mount+0x88>)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800691c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d005      	beq.n	8006930 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006924:	69b8      	ldr	r0, [r7, #24]
 8006926:	f7fe fce3 	bl	80052f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2200      	movs	r2, #0
 800692e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	490d      	ldr	r1, [pc, #52]	; (8006974 <f_mount+0x88>)
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <f_mount+0x66>
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d001      	beq.n	8006956 <f_mount+0x6a>
 8006952:	2300      	movs	r3, #0
 8006954:	e00a      	b.n	800696c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006956:	f107 010c 	add.w	r1, r7, #12
 800695a:	f107 0308 	add.w	r3, r7, #8
 800695e:	2200      	movs	r2, #0
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff fd0d 	bl	8006380 <find_volume>
 8006966:	4603      	mov	r3, r0
 8006968:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800696a:	7dfb      	ldrb	r3, [r7, #23]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20002264 	.word	0x20002264

08006978 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b098      	sub	sp, #96	; 0x60
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	4613      	mov	r3, r2
 8006984:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <f_open+0x18>
 800698c:	2309      	movs	r3, #9
 800698e:	e1bb      	b.n	8006d08 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006996:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006998:	79fa      	ldrb	r2, [r7, #7]
 800699a:	f107 0110 	add.w	r1, r7, #16
 800699e:	f107 0308 	add.w	r3, r7, #8
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fcec 	bl	8006380 <find_volume>
 80069a8:	4603      	mov	r3, r0
 80069aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80069ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 819f 	bne.w	8006cf6 <f_open+0x37e>
		dj.obj.fs = fs;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	f107 0314 	add.w	r3, r7, #20
 80069c2:	4611      	mov	r1, r2
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fbcb 	bl	8006160 <follow_path>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80069d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11a      	bne.n	8006a0e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80069d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80069dc:	b25b      	sxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	da03      	bge.n	80069ea <f_open+0x72>
				res = FR_INVALID_NAME;
 80069e2:	2306      	movs	r3, #6
 80069e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80069e8:	e011      	b.n	8006a0e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	f023 0301 	bic.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bf14      	ite	ne
 80069f4:	2301      	movne	r3, #1
 80069f6:	2300      	moveq	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	461a      	mov	r2, r3
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	4611      	mov	r1, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe fb68 	bl	80050d8 <chk_lock>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	f003 031c 	and.w	r3, r3, #28
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d07f      	beq.n	8006b18 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006a18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d017      	beq.n	8006a50 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006a20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d10e      	bne.n	8006a46 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006a28:	f7fe fbb2 	bl	8005190 <enq_lock>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d006      	beq.n	8006a40 <f_open+0xc8>
 8006a32:	f107 0314 	add.w	r3, r7, #20
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff fa6d 	bl	8005f16 <dir_register>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	e000      	b.n	8006a42 <f_open+0xca>
 8006a40:	2312      	movs	r3, #18
 8006a42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	f043 0308 	orr.w	r3, r3, #8
 8006a4c:	71fb      	strb	r3, [r7, #7]
 8006a4e:	e010      	b.n	8006a72 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006a50:	7ebb      	ldrb	r3, [r7, #26]
 8006a52:	f003 0311 	and.w	r3, r3, #17
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <f_open+0xea>
					res = FR_DENIED;
 8006a5a:	2307      	movs	r3, #7
 8006a5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006a60:	e007      	b.n	8006a72 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <f_open+0xfa>
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006a72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d168      	bne.n	8006b4c <f_open+0x1d4>
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d063      	beq.n	8006b4c <f_open+0x1d4>
				dw = GET_FATTIME();
 8006a84:	f7fe f810 	bl	8004aa8 <get_fattime>
 8006a88:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8c:	330e      	adds	r3, #14
 8006a8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe fa77 	bl	8004f84 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a98:	3316      	adds	r3, #22
 8006a9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fe fa71 	bl	8004f84 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa4:	330b      	adds	r3, #11
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aae:	4611      	mov	r1, r2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff f99c 	bl	8005dee <ld_clust>
 8006ab6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006abc:	2200      	movs	r2, #0
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7ff f9b4 	bl	8005e2c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac6:	331c      	adds	r3, #28
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe fa5a 	bl	8004f84 <st_dword>
					fs->wflag = 1;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d037      	beq.n	8006b4c <f_open+0x1d4>
						dw = fs->winsect;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006ae2:	f107 0314 	add.w	r3, r7, #20
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fea4 	bl	8005838 <remove_chain>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006af6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d126      	bne.n	8006b4c <f_open+0x1d4>
							res = move_window(fs, dw);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fc5c 	bl	80053c0 <move_window>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b12:	3a01      	subs	r2, #1
 8006b14:	611a      	str	r2, [r3, #16]
 8006b16:	e019      	b.n	8006b4c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006b18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d115      	bne.n	8006b4c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006b20:	7ebb      	ldrb	r3, [r7, #26]
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006b2a:	2304      	movs	r3, #4
 8006b2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006b30:	e00c      	b.n	8006b4c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d007      	beq.n	8006b4c <f_open+0x1d4>
 8006b3c:	7ebb      	ldrb	r3, [r7, #26]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <f_open+0x1d4>
						res = FR_DENIED;
 8006b46:	2307      	movs	r3, #7
 8006b48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d128      	bne.n	8006ba6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
 8006b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b64:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	bf14      	ite	ne
 8006b7e:	2301      	movne	r3, #1
 8006b80:	2300      	moveq	r3, #0
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	f107 0314 	add.w	r3, r7, #20
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fe fb21 	bl	80051d4 <inc_lock>
 8006b92:	4602      	mov	r2, r0
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <f_open+0x22e>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f040 80a3 	bne.w	8006cf6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff f919 	bl	8005dee <ld_clust>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc4:	331c      	adds	r3, #28
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe f99e 	bl	8004f08 <ld_dword>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	88da      	ldrh	r2, [r3, #6]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	79fa      	ldrb	r2, [r7, #7]
 8006bea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3330      	adds	r3, #48	; 0x30
 8006c02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c06:	2100      	movs	r1, #0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fe fa08 	bl	800501e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d06e      	beq.n	8006cf6 <f_open+0x37e>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d06a      	beq.n	8006cf6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	895b      	ldrh	r3, [r3, #10]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	899b      	ldrh	r3, [r3, #12]
 8006c32:	fb02 f303 	mul.w	r3, r2, r3
 8006c36:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	657b      	str	r3, [r7, #84]	; 0x54
 8006c44:	e016      	b.n	8006c74 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe fc04 	bl	8005458 <get_fat>
 8006c50:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d802      	bhi.n	8006c5e <f_open+0x2e6>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c64:	d102      	bne.n	8006c6c <f_open+0x2f4>
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006c6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	657b      	str	r3, [r7, #84]	; 0x54
 8006c74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d103      	bne.n	8006c84 <f_open+0x30c>
 8006c7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d8e0      	bhi.n	8006c46 <f_open+0x2ce>
				}
				fp->clust = clst;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006c8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d131      	bne.n	8006cf6 <f_open+0x37e>
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	899b      	ldrh	r3, [r3, #12]
 8006c96:	461a      	mov	r2, r3
 8006c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c9e:	fb01 f202 	mul.w	r2, r1, r2
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d026      	beq.n	8006cf6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe fbb4 	bl	800541a <clust2sect>
 8006cb2:	6478      	str	r0, [r7, #68]	; 0x44
 8006cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d103      	bne.n	8006cc2 <f_open+0x34a>
						res = FR_INT_ERR;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006cc0:	e019      	b.n	8006cf6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	899b      	ldrh	r3, [r3, #12]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cca:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd0:	441a      	add	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	7858      	ldrb	r0, [r3, #1]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a1a      	ldr	r2, [r3, #32]
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f7fe f899 	bl	8004e1c <disk_read>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <f_open+0x37e>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <f_open+0x38c>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006d04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3760      	adds	r7, #96	; 0x60
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08c      	sub	sp, #48	; 0x30
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f107 0210 	add.w	r2, r7, #16
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fda5 	bl	8006880 <validate>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d107      	bne.n	8006d54 <f_write+0x44>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	7d5b      	ldrb	r3, [r3, #21]
 8006d48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <f_write+0x4a>
 8006d54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d58:	e16a      	b.n	8007030 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	7d1b      	ldrb	r3, [r3, #20]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <f_write+0x5a>
 8006d66:	2307      	movs	r3, #7
 8006d68:	e162      	b.n	8007030 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	441a      	add	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	f080 814c 	bcs.w	8007014 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	43db      	mvns	r3, r3
 8006d82:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006d84:	e146      	b.n	8007014 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	8992      	ldrh	r2, [r2, #12]
 8006d8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d92:	fb01 f202 	mul.w	r2, r1, r2
 8006d96:	1a9b      	subs	r3, r3, r2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f040 80f1 	bne.w	8006f80 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	8992      	ldrh	r2, [r2, #12]
 8006da6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	8952      	ldrh	r2, [r2, #10]
 8006dae:	3a01      	subs	r2, #1
 8006db0:	4013      	ands	r3, r2
 8006db2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d143      	bne.n	8006e42 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10c      	bne.n	8006ddc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d11a      	bne.n	8006e04 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fe fd95 	bl	8005902 <create_chain>
 8006dd8:	62b8      	str	r0, [r7, #40]	; 0x28
 8006dda:	e013      	b.n	8006e04 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d007      	beq.n	8006df4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	4619      	mov	r1, r3
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7fe fe21 	bl	8005a32 <clmt_clust>
 8006df0:	62b8      	str	r0, [r7, #40]	; 0x28
 8006df2:	e007      	b.n	8006e04 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f7fe fd80 	bl	8005902 <create_chain>
 8006e02:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8109 	beq.w	800701e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d104      	bne.n	8006e1c <f_write+0x10c>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2202      	movs	r2, #2
 8006e16:	755a      	strb	r2, [r3, #21]
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e109      	b.n	8007030 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d104      	bne.n	8006e2e <f_write+0x11e>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	755a      	strb	r2, [r3, #21]
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e100      	b.n	8007030 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e32:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <f_write+0x132>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e40:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	7d1b      	ldrb	r3, [r3, #20]
 8006e46:	b25b      	sxtb	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	da18      	bge.n	8006e7e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	7858      	ldrb	r0, [r3, #1]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1a      	ldr	r2, [r3, #32]
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f7fd fffe 	bl	8004e5c <disk_write>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d004      	beq.n	8006e70 <f_write+0x160>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	755a      	strb	r2, [r3, #21]
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e0df      	b.n	8007030 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	7d1b      	ldrb	r3, [r3, #20]
 8006e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	4619      	mov	r1, r3
 8006e86:	4610      	mov	r0, r2
 8006e88:	f7fe fac7 	bl	800541a <clust2sect>
 8006e8c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d104      	bne.n	8006e9e <f_write+0x18e>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2202      	movs	r2, #2
 8006e98:	755a      	strb	r2, [r3, #21]
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e0c8      	b.n	8007030 <f_write+0x320>
			sect += csect;
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	899b      	ldrh	r3, [r3, #12]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eb2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d043      	beq.n	8006f42 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	8952      	ldrh	r2, [r2, #10]
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d905      	bls.n	8006ed4 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	895b      	ldrh	r3, [r3, #10]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	7858      	ldrb	r0, [r3, #1]
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	69f9      	ldr	r1, [r7, #28]
 8006ede:	f7fd ffbd 	bl	8004e5c <disk_write>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <f_write+0x1e2>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2201      	movs	r2, #1
 8006eec:	755a      	strb	r2, [r3, #21]
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e09e      	b.n	8007030 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6a1a      	ldr	r2, [r3, #32]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	6a3a      	ldr	r2, [r7, #32]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d918      	bls.n	8006f32 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a1a      	ldr	r2, [r3, #32]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	8992      	ldrh	r2, [r2, #12]
 8006f12:	fb02 f303 	mul.w	r3, r2, r3
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	18d1      	adds	r1, r2, r3
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	899b      	ldrh	r3, [r3, #12]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f7fe f85c 	bl	8004fdc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	7d1b      	ldrb	r3, [r3, #20]
 8006f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	899b      	ldrh	r3, [r3, #12]
 8006f36:	461a      	mov	r2, r3
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	fb02 f303 	mul.w	r3, r2, r3
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006f40:	e04b      	b.n	8006fda <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d016      	beq.n	8006f7a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d210      	bcs.n	8006f7a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	7858      	ldrb	r0, [r3, #1]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f62:	2301      	movs	r3, #1
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	f7fd ff59 	bl	8004e1c <disk_read>
 8006f6a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d004      	beq.n	8006f7a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2201      	movs	r2, #1
 8006f74:	755a      	strb	r2, [r3, #21]
 8006f76:	2301      	movs	r3, #1
 8006f78:	e05a      	b.n	8007030 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	899b      	ldrh	r3, [r3, #12]
 8006f84:	4618      	mov	r0, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	8992      	ldrh	r2, [r2, #12]
 8006f8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f92:	fb01 f202 	mul.w	r2, r1, r2
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	1ac3      	subs	r3, r0, r3
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d901      	bls.n	8006fa8 <f_write+0x298>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	8992      	ldrh	r2, [r2, #12]
 8006fb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fba:	fb00 f202 	mul.w	r2, r0, r2
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc4:	69f9      	ldr	r1, [r7, #28]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe f808 	bl	8004fdc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	7d1b      	ldrb	r3, [r3, #20]
 8006fd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	4413      	add	r3, r2
 8006fe0:	61fb      	str	r3, [r7, #28]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	699a      	ldr	r2, [r3, #24]
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	441a      	add	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	619a      	str	r2, [r3, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	bf38      	it	cc
 8006ffa:	461a      	movcc	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	60da      	str	r2, [r3, #12]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	441a      	add	r2, r3
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f47f aeb5 	bne.w	8006d86 <f_write+0x76>
 800701c:	e000      	b.n	8007020 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800701e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	7d1b      	ldrb	r3, [r3, #20]
 8007024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007028:	b2da      	uxtb	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3730      	adds	r7, #48	; 0x30
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b090      	sub	sp, #64	; 0x40
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8007042:	f107 010c 	add.w	r1, r7, #12
 8007046:	1d3b      	adds	r3, r7, #4
 8007048:	2200      	movs	r2, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff f998 	bl	8006380 <find_volume>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8007056:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800705a:	2b00      	cmp	r3, #0
 800705c:	d11f      	bne.n	800709e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	f107 030c 	add.w	r3, r7, #12
 8007064:	4611      	mov	r1, r2
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff f87a 	bl	8006160 <follow_path>
 800706c:	4603      	mov	r3, r0
 800706e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8007072:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007076:	2b00      	cmp	r3, #0
 8007078:	d111      	bne.n	800709e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800707a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800707e:	b25b      	sxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	da03      	bge.n	800708c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8007084:	2306      	movs	r3, #6
 8007086:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800708a:	e008      	b.n	800709e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <f_stat+0x66>
 8007092:	f107 030c 	add.w	r3, r7, #12
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe ff6e 	bl	8005f7a <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800709e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3740      	adds	r7, #64	; 0x40
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	460b      	mov	r3, r1
 80070b4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80070b6:	78fb      	ldrb	r3, [r7, #3]
 80070b8:	2b0a      	cmp	r3, #10
 80070ba:	d103      	bne.n	80070c4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80070bc:	210d      	movs	r1, #13
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff fff3 	bl	80070aa <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	db25      	blt.n	800711c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	60fa      	str	r2, [r7, #12]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	4413      	add	r3, r2
 80070da:	78fa      	ldrb	r2, [r7, #3]
 80070dc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b3c      	cmp	r3, #60	; 0x3c
 80070e2:	dd12      	ble.n	800710a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f103 010c 	add.w	r1, r3, #12
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	f107 0308 	add.w	r3, r7, #8
 80070f4:	f7ff fe0c 	bl	8006d10 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d101      	bne.n	8007104 <putc_bfd+0x5a>
 8007100:	2300      	movs	r3, #0
 8007102:	e001      	b.n	8007108 <putc_bfd+0x5e>
 8007104:	f04f 33ff 	mov.w	r3, #4294967295
 8007108:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	609a      	str	r2, [r3, #8]
 800711a:	e000      	b.n	800711e <putc_bfd+0x74>
	if (i < 0) return;
 800711c:	bf00      	nop
}
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	db16      	blt.n	8007162 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f103 010c 	add.w	r1, r3, #12
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	461a      	mov	r2, r3
 8007144:	f107 030c 	add.w	r3, r7, #12
 8007148:	f7ff fde2 	bl	8006d10 <f_write>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d107      	bne.n	8007162 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4293      	cmp	r3, r2
 800715a:	d102      	bne.n	8007162 <putc_flush+0x3e>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	e001      	b.n	8007166 <putc_flush+0x42>
	return EOF;
 8007162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	605a      	str	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	609a      	str	r2, [r3, #8]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8007198:	b40e      	push	{r1, r2, r3}
 800719a:	b580      	push	{r7, lr}
 800719c:	b0a7      	sub	sp, #156	; 0x9c
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80071a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff ffe0 	bl	800716e <putc_init>

	va_start(arp, fmt);
 80071ae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80071b2:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80071b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80071c4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 81f2 	beq.w	80075b2 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80071ce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80071d2:	2b25      	cmp	r3, #37	; 0x25
 80071d4:	d008      	beq.n	80071e8 <f_printf+0x50>
			putc_bfd(&pb, c);
 80071d6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80071da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071de:	4611      	mov	r1, r2
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff ff62 	bl	80070aa <putc_bfd>
			continue;
 80071e6:	e1e3      	b.n	80075b0 <f_printf+0x418>
		}
		w = f = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80071ee:	2300      	movs	r3, #0
 80071f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 80071f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8007204:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007208:	2b30      	cmp	r3, #48	; 0x30
 800720a:	d10b      	bne.n	8007224 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800720c:	2301      	movs	r3, #1
 800720e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8007222:	e024      	b.n	800726e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8007224:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007228:	2b2d      	cmp	r3, #45	; 0x2d
 800722a:	d120      	bne.n	800726e <f_printf+0xd6>
				f = 2; c = *fmt++;
 800722c:	2302      	movs	r3, #2
 800722e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007232:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8007242:	e014      	b.n	800726e <f_printf+0xd6>
			w = w * 10 + c - '0';
 8007244:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007248:	4613      	mov	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	461a      	mov	r2, r3
 8007252:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007256:	4413      	add	r3, r2
 8007258:	3b30      	subs	r3, #48	; 0x30
 800725a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800725e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800726e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007272:	2b2f      	cmp	r3, #47	; 0x2f
 8007274:	d903      	bls.n	800727e <f_printf+0xe6>
 8007276:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800727a:	2b39      	cmp	r3, #57	; 0x39
 800727c:	d9e2      	bls.n	8007244 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800727e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007282:	2b6c      	cmp	r3, #108	; 0x6c
 8007284:	d003      	beq.n	800728e <f_printf+0xf6>
 8007286:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800728a:	2b4c      	cmp	r3, #76	; 0x4c
 800728c:	d10d      	bne.n	80072aa <f_printf+0x112>
			f |= 4; c = *fmt++;
 800728e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007292:	f043 0304 	orr.w	r3, r3, #4
 8007296:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800729a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 80072aa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 8181 	beq.w	80075b6 <f_printf+0x41e>
		d = c;
 80072b4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80072b8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80072bc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80072c0:	2b60      	cmp	r3, #96	; 0x60
 80072c2:	d908      	bls.n	80072d6 <f_printf+0x13e>
 80072c4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80072c8:	2b7a      	cmp	r3, #122	; 0x7a
 80072ca:	d804      	bhi.n	80072d6 <f_printf+0x13e>
 80072cc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80072d0:	3b20      	subs	r3, #32
 80072d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 80072d6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80072da:	3b42      	subs	r3, #66	; 0x42
 80072dc:	2b16      	cmp	r3, #22
 80072de:	f200 8098 	bhi.w	8007412 <f_printf+0x27a>
 80072e2:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <f_printf+0x150>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	080073f3 	.word	0x080073f3
 80072ec:	080073db 	.word	0x080073db
 80072f0:	08007403 	.word	0x08007403
 80072f4:	08007413 	.word	0x08007413
 80072f8:	08007413 	.word	0x08007413
 80072fc:	08007413 	.word	0x08007413
 8007300:	08007413 	.word	0x08007413
 8007304:	08007413 	.word	0x08007413
 8007308:	08007413 	.word	0x08007413
 800730c:	08007413 	.word	0x08007413
 8007310:	08007413 	.word	0x08007413
 8007314:	08007413 	.word	0x08007413
 8007318:	08007413 	.word	0x08007413
 800731c:	080073fb 	.word	0x080073fb
 8007320:	08007413 	.word	0x08007413
 8007324:	08007413 	.word	0x08007413
 8007328:	08007413 	.word	0x08007413
 800732c:	08007345 	.word	0x08007345
 8007330:	08007413 	.word	0x08007413
 8007334:	08007403 	.word	0x08007403
 8007338:	08007413 	.word	0x08007413
 800733c:	08007413 	.word	0x08007413
 8007340:	0800740b 	.word	0x0800740b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8007344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007346:	1d1a      	adds	r2, r3, #4
 8007348:	67ba      	str	r2, [r7, #120]	; 0x78
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800734e:	2300      	movs	r3, #0
 8007350:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007354:	e004      	b.n	8007360 <f_printf+0x1c8>
 8007356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800735a:	3301      	adds	r3, #1
 800735c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007360:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007366:	4413      	add	r3, r2
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1f3      	bne.n	8007356 <f_printf+0x1be>
			if (!(f & 2)) {
 800736e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d11a      	bne.n	80073b0 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800737a:	e005      	b.n	8007388 <f_printf+0x1f0>
 800737c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007380:	2120      	movs	r1, #32
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff fe91 	bl	80070aa <putc_bfd>
 8007388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007392:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007396:	429a      	cmp	r2, r3
 8007398:	d8f0      	bhi.n	800737c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800739a:	e009      	b.n	80073b0 <f_printf+0x218>
 800739c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073a8:	4611      	mov	r1, r2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7ff fe7d 	bl	80070aa <putc_bfd>
 80073b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1f1      	bne.n	800739c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80073b8:	e005      	b.n	80073c6 <f_printf+0x22e>
 80073ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073be:	2120      	movs	r1, #32
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff fe72 	bl	80070aa <putc_bfd>
 80073c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80073d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d8f0      	bhi.n	80073ba <f_printf+0x222>
			continue;
 80073d8:	e0ea      	b.n	80075b0 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80073da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073dc:	1d1a      	adds	r2, r3, #4
 80073de:	67ba      	str	r2, [r7, #120]	; 0x78
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073e8:	4611      	mov	r1, r2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff fe5d 	bl	80070aa <putc_bfd>
 80073f0:	e0de      	b.n	80075b0 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80073f2:	2302      	movs	r3, #2
 80073f4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80073f8:	e014      	b.n	8007424 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80073fa:	2308      	movs	r3, #8
 80073fc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8007400:	e010      	b.n	8007424 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8007402:	230a      	movs	r3, #10
 8007404:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8007408:	e00c      	b.n	8007424 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800740a:	2310      	movs	r3, #16
 800740c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8007410:	e008      	b.n	8007424 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8007412:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8007416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800741a:	4611      	mov	r1, r2
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff fe44 	bl	80070aa <putc_bfd>
 8007422:	e0c5      	b.n	80075b0 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8007424:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <f_printf+0x2a2>
 8007430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007432:	1d1a      	adds	r2, r3, #4
 8007434:	67ba      	str	r2, [r7, #120]	; 0x78
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	e00c      	b.n	8007454 <f_printf+0x2bc>
 800743a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800743e:	2b44      	cmp	r3, #68	; 0x44
 8007440:	d104      	bne.n	800744c <f_printf+0x2b4>
 8007442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007444:	1d1a      	adds	r2, r3, #4
 8007446:	67ba      	str	r2, [r7, #120]	; 0x78
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	e003      	b.n	8007454 <f_printf+0x2bc>
 800744c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	67ba      	str	r2, [r7, #120]	; 0x78
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8007458:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800745c:	2b44      	cmp	r3, #68	; 0x44
 800745e:	d10e      	bne.n	800747e <f_printf+0x2e6>
 8007460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007464:	2b00      	cmp	r3, #0
 8007466:	da0a      	bge.n	800747e <f_printf+0x2e6>
			v = 0 - v;
 8007468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800746c:	425b      	negs	r3, r3
 800746e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8007472:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007476:	f043 0308 	orr.w	r3, r3, #8
 800747a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8007484:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8007488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800748c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007490:	fb01 f202 	mul.w	r2, r1, r2
 8007494:	1a9b      	subs	r3, r3, r2
 8007496:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800749a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800749e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80074a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80074aa:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80074ae:	2b09      	cmp	r3, #9
 80074b0:	d90b      	bls.n	80074ca <f_printf+0x332>
 80074b2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80074b6:	2b78      	cmp	r3, #120	; 0x78
 80074b8:	d101      	bne.n	80074be <f_printf+0x326>
 80074ba:	2227      	movs	r2, #39	; 0x27
 80074bc:	e000      	b.n	80074c0 <f_printf+0x328>
 80074be:	2207      	movs	r2, #7
 80074c0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80074c4:	4413      	add	r3, r2
 80074c6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80074ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80074d4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80074d8:	3230      	adds	r2, #48	; 0x30
 80074da:	b2d2      	uxtb	r2, r2
 80074dc:	3398      	adds	r3, #152	; 0x98
 80074de:	443b      	add	r3, r7
 80074e0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80074e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <f_printf+0x35c>
 80074ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074f0:	2b1f      	cmp	r3, #31
 80074f2:	d9c7      	bls.n	8007484 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80074f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d009      	beq.n	8007514 <f_printf+0x37c>
 8007500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800750a:	3398      	adds	r3, #152	; 0x98
 800750c:	443b      	add	r3, r7
 800750e:	222d      	movs	r2, #45	; 0x2d
 8007510:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8007514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007518:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800751c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <f_printf+0x394>
 8007528:	2330      	movs	r3, #48	; 0x30
 800752a:	e000      	b.n	800752e <f_printf+0x396>
 800752c:	2320      	movs	r3, #32
 800752e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8007532:	e007      	b.n	8007544 <f_printf+0x3ac>
 8007534:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8007538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800753c:	4611      	mov	r1, r2
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff fdb3 	bl	80070aa <putc_bfd>
 8007544:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d108      	bne.n	8007562 <f_printf+0x3ca>
 8007550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800755a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800755e:	429a      	cmp	r2, r3
 8007560:	d8e8      	bhi.n	8007534 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8007562:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007566:	3b01      	subs	r3, #1
 8007568:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800756c:	f107 020c 	add.w	r2, r7, #12
 8007570:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007574:	4413      	add	r3, r2
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff fd93 	bl	80070aa <putc_bfd>
		} while (i);
 8007584:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1ea      	bne.n	8007562 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800758c:	e007      	b.n	800759e <f_printf+0x406>
 800758e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8007592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007596:	4611      	mov	r1, r2
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff fd86 	bl	80070aa <putc_bfd>
 800759e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d8ee      	bhi.n	800758e <f_printf+0x3f6>
		c = *fmt++;
 80075b0:	e600      	b.n	80071b4 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80075b2:	bf00      	nop
 80075b4:	e000      	b.n	80075b8 <f_printf+0x420>
		if (!c) break;
 80075b6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80075b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075bc:	4618      	mov	r0, r3
 80075be:	f7ff fdb1 	bl	8007124 <putc_flush>
 80075c2:	4603      	mov	r3, r0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	379c      	adds	r7, #156	; 0x9c
 80075c8:	46bd      	mov	sp, r7
 80075ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075ce:	b003      	add	sp, #12
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop

080075d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	4613      	mov	r3, r2
 80075e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80075e2:	2301      	movs	r3, #1
 80075e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80075ea:	4b1f      	ldr	r3, [pc, #124]	; (8007668 <FATFS_LinkDriverEx+0x94>)
 80075ec:	7a5b      	ldrb	r3, [r3, #9]
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d131      	bne.n	8007658 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80075f4:	4b1c      	ldr	r3, [pc, #112]	; (8007668 <FATFS_LinkDriverEx+0x94>)
 80075f6:	7a5b      	ldrb	r3, [r3, #9]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <FATFS_LinkDriverEx+0x94>)
 80075fe:	2100      	movs	r1, #0
 8007600:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007602:	4b19      	ldr	r3, [pc, #100]	; (8007668 <FATFS_LinkDriverEx+0x94>)
 8007604:	7a5b      	ldrb	r3, [r3, #9]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	4a17      	ldr	r2, [pc, #92]	; (8007668 <FATFS_LinkDriverEx+0x94>)
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <FATFS_LinkDriverEx+0x94>)
 8007614:	7a5b      	ldrb	r3, [r3, #9]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	4b13      	ldr	r3, [pc, #76]	; (8007668 <FATFS_LinkDriverEx+0x94>)
 800761c:	4413      	add	r3, r2
 800761e:	79fa      	ldrb	r2, [r7, #7]
 8007620:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007622:	4b11      	ldr	r3, [pc, #68]	; (8007668 <FATFS_LinkDriverEx+0x94>)
 8007624:	7a5b      	ldrb	r3, [r3, #9]
 8007626:	b2db      	uxtb	r3, r3
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	b2d1      	uxtb	r1, r2
 800762c:	4a0e      	ldr	r2, [pc, #56]	; (8007668 <FATFS_LinkDriverEx+0x94>)
 800762e:	7251      	strb	r1, [r2, #9]
 8007630:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007632:	7dbb      	ldrb	r3, [r7, #22]
 8007634:	3330      	adds	r3, #48	; 0x30
 8007636:	b2da      	uxtb	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	3301      	adds	r3, #1
 8007640:	223a      	movs	r2, #58	; 0x3a
 8007642:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	3302      	adds	r3, #2
 8007648:	222f      	movs	r2, #47	; 0x2f
 800764a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	3303      	adds	r3, #3
 8007650:	2200      	movs	r2, #0
 8007652:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
}
 800765a:	4618      	mov	r0, r3
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	2000228c 	.word	0x2000228c

0800766c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007676:	2200      	movs	r2, #0
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff ffaa 	bl	80075d4 <FATFS_LinkDriverEx>
 8007680:	4603      	mov	r3, r0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <__errno>:
 800768c:	4b01      	ldr	r3, [pc, #4]	; (8007694 <__errno+0x8>)
 800768e:	6818      	ldr	r0, [r3, #0]
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	2000000c 	.word	0x2000000c

08007698 <__libc_init_array>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	4d0d      	ldr	r5, [pc, #52]	; (80076d0 <__libc_init_array+0x38>)
 800769c:	4c0d      	ldr	r4, [pc, #52]	; (80076d4 <__libc_init_array+0x3c>)
 800769e:	1b64      	subs	r4, r4, r5
 80076a0:	10a4      	asrs	r4, r4, #2
 80076a2:	2600      	movs	r6, #0
 80076a4:	42a6      	cmp	r6, r4
 80076a6:	d109      	bne.n	80076bc <__libc_init_array+0x24>
 80076a8:	4d0b      	ldr	r5, [pc, #44]	; (80076d8 <__libc_init_array+0x40>)
 80076aa:	4c0c      	ldr	r4, [pc, #48]	; (80076dc <__libc_init_array+0x44>)
 80076ac:	f001 f824 	bl	80086f8 <_init>
 80076b0:	1b64      	subs	r4, r4, r5
 80076b2:	10a4      	asrs	r4, r4, #2
 80076b4:	2600      	movs	r6, #0
 80076b6:	42a6      	cmp	r6, r4
 80076b8:	d105      	bne.n	80076c6 <__libc_init_array+0x2e>
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c0:	4798      	blx	r3
 80076c2:	3601      	adds	r6, #1
 80076c4:	e7ee      	b.n	80076a4 <__libc_init_array+0xc>
 80076c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ca:	4798      	blx	r3
 80076cc:	3601      	adds	r6, #1
 80076ce:	e7f2      	b.n	80076b6 <__libc_init_array+0x1e>
 80076d0:	08008980 	.word	0x08008980
 80076d4:	08008980 	.word	0x08008980
 80076d8:	08008980 	.word	0x08008980
 80076dc:	08008984 	.word	0x08008984

080076e0 <memset>:
 80076e0:	4402      	add	r2, r0
 80076e2:	4603      	mov	r3, r0
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d100      	bne.n	80076ea <memset+0xa>
 80076e8:	4770      	bx	lr
 80076ea:	f803 1b01 	strb.w	r1, [r3], #1
 80076ee:	e7f9      	b.n	80076e4 <memset+0x4>

080076f0 <iprintf>:
 80076f0:	b40f      	push	{r0, r1, r2, r3}
 80076f2:	4b0a      	ldr	r3, [pc, #40]	; (800771c <iprintf+0x2c>)
 80076f4:	b513      	push	{r0, r1, r4, lr}
 80076f6:	681c      	ldr	r4, [r3, #0]
 80076f8:	b124      	cbz	r4, 8007704 <iprintf+0x14>
 80076fa:	69a3      	ldr	r3, [r4, #24]
 80076fc:	b913      	cbnz	r3, 8007704 <iprintf+0x14>
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 fa5e 	bl	8007bc0 <__sinit>
 8007704:	ab05      	add	r3, sp, #20
 8007706:	9a04      	ldr	r2, [sp, #16]
 8007708:	68a1      	ldr	r1, [r4, #8]
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	4620      	mov	r0, r4
 800770e:	f000 fc67 	bl	8007fe0 <_vfiprintf_r>
 8007712:	b002      	add	sp, #8
 8007714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007718:	b004      	add	sp, #16
 800771a:	4770      	bx	lr
 800771c:	2000000c 	.word	0x2000000c

08007720 <_puts_r>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	460e      	mov	r6, r1
 8007724:	4605      	mov	r5, r0
 8007726:	b118      	cbz	r0, 8007730 <_puts_r+0x10>
 8007728:	6983      	ldr	r3, [r0, #24]
 800772a:	b90b      	cbnz	r3, 8007730 <_puts_r+0x10>
 800772c:	f000 fa48 	bl	8007bc0 <__sinit>
 8007730:	69ab      	ldr	r3, [r5, #24]
 8007732:	68ac      	ldr	r4, [r5, #8]
 8007734:	b913      	cbnz	r3, 800773c <_puts_r+0x1c>
 8007736:	4628      	mov	r0, r5
 8007738:	f000 fa42 	bl	8007bc0 <__sinit>
 800773c:	4b2c      	ldr	r3, [pc, #176]	; (80077f0 <_puts_r+0xd0>)
 800773e:	429c      	cmp	r4, r3
 8007740:	d120      	bne.n	8007784 <_puts_r+0x64>
 8007742:	686c      	ldr	r4, [r5, #4]
 8007744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007746:	07db      	lsls	r3, r3, #31
 8007748:	d405      	bmi.n	8007756 <_puts_r+0x36>
 800774a:	89a3      	ldrh	r3, [r4, #12]
 800774c:	0598      	lsls	r0, r3, #22
 800774e:	d402      	bmi.n	8007756 <_puts_r+0x36>
 8007750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007752:	f000 fad3 	bl	8007cfc <__retarget_lock_acquire_recursive>
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	0719      	lsls	r1, r3, #28
 800775a:	d51d      	bpl.n	8007798 <_puts_r+0x78>
 800775c:	6923      	ldr	r3, [r4, #16]
 800775e:	b1db      	cbz	r3, 8007798 <_puts_r+0x78>
 8007760:	3e01      	subs	r6, #1
 8007762:	68a3      	ldr	r3, [r4, #8]
 8007764:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007768:	3b01      	subs	r3, #1
 800776a:	60a3      	str	r3, [r4, #8]
 800776c:	bb39      	cbnz	r1, 80077be <_puts_r+0x9e>
 800776e:	2b00      	cmp	r3, #0
 8007770:	da38      	bge.n	80077e4 <_puts_r+0xc4>
 8007772:	4622      	mov	r2, r4
 8007774:	210a      	movs	r1, #10
 8007776:	4628      	mov	r0, r5
 8007778:	f000 f848 	bl	800780c <__swbuf_r>
 800777c:	3001      	adds	r0, #1
 800777e:	d011      	beq.n	80077a4 <_puts_r+0x84>
 8007780:	250a      	movs	r5, #10
 8007782:	e011      	b.n	80077a8 <_puts_r+0x88>
 8007784:	4b1b      	ldr	r3, [pc, #108]	; (80077f4 <_puts_r+0xd4>)
 8007786:	429c      	cmp	r4, r3
 8007788:	d101      	bne.n	800778e <_puts_r+0x6e>
 800778a:	68ac      	ldr	r4, [r5, #8]
 800778c:	e7da      	b.n	8007744 <_puts_r+0x24>
 800778e:	4b1a      	ldr	r3, [pc, #104]	; (80077f8 <_puts_r+0xd8>)
 8007790:	429c      	cmp	r4, r3
 8007792:	bf08      	it	eq
 8007794:	68ec      	ldreq	r4, [r5, #12]
 8007796:	e7d5      	b.n	8007744 <_puts_r+0x24>
 8007798:	4621      	mov	r1, r4
 800779a:	4628      	mov	r0, r5
 800779c:	f000 f888 	bl	80078b0 <__swsetup_r>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d0dd      	beq.n	8007760 <_puts_r+0x40>
 80077a4:	f04f 35ff 	mov.w	r5, #4294967295
 80077a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077aa:	07da      	lsls	r2, r3, #31
 80077ac:	d405      	bmi.n	80077ba <_puts_r+0x9a>
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	059b      	lsls	r3, r3, #22
 80077b2:	d402      	bmi.n	80077ba <_puts_r+0x9a>
 80077b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077b6:	f000 faa2 	bl	8007cfe <__retarget_lock_release_recursive>
 80077ba:	4628      	mov	r0, r5
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
 80077be:	2b00      	cmp	r3, #0
 80077c0:	da04      	bge.n	80077cc <_puts_r+0xac>
 80077c2:	69a2      	ldr	r2, [r4, #24]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	dc06      	bgt.n	80077d6 <_puts_r+0xb6>
 80077c8:	290a      	cmp	r1, #10
 80077ca:	d004      	beq.n	80077d6 <_puts_r+0xb6>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	6022      	str	r2, [r4, #0]
 80077d2:	7019      	strb	r1, [r3, #0]
 80077d4:	e7c5      	b.n	8007762 <_puts_r+0x42>
 80077d6:	4622      	mov	r2, r4
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 f817 	bl	800780c <__swbuf_r>
 80077de:	3001      	adds	r0, #1
 80077e0:	d1bf      	bne.n	8007762 <_puts_r+0x42>
 80077e2:	e7df      	b.n	80077a4 <_puts_r+0x84>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	250a      	movs	r5, #10
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	6022      	str	r2, [r4, #0]
 80077ec:	701d      	strb	r5, [r3, #0]
 80077ee:	e7db      	b.n	80077a8 <_puts_r+0x88>
 80077f0:	08008904 	.word	0x08008904
 80077f4:	08008924 	.word	0x08008924
 80077f8:	080088e4 	.word	0x080088e4

080077fc <puts>:
 80077fc:	4b02      	ldr	r3, [pc, #8]	; (8007808 <puts+0xc>)
 80077fe:	4601      	mov	r1, r0
 8007800:	6818      	ldr	r0, [r3, #0]
 8007802:	f7ff bf8d 	b.w	8007720 <_puts_r>
 8007806:	bf00      	nop
 8007808:	2000000c 	.word	0x2000000c

0800780c <__swbuf_r>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	460e      	mov	r6, r1
 8007810:	4614      	mov	r4, r2
 8007812:	4605      	mov	r5, r0
 8007814:	b118      	cbz	r0, 800781e <__swbuf_r+0x12>
 8007816:	6983      	ldr	r3, [r0, #24]
 8007818:	b90b      	cbnz	r3, 800781e <__swbuf_r+0x12>
 800781a:	f000 f9d1 	bl	8007bc0 <__sinit>
 800781e:	4b21      	ldr	r3, [pc, #132]	; (80078a4 <__swbuf_r+0x98>)
 8007820:	429c      	cmp	r4, r3
 8007822:	d12b      	bne.n	800787c <__swbuf_r+0x70>
 8007824:	686c      	ldr	r4, [r5, #4]
 8007826:	69a3      	ldr	r3, [r4, #24]
 8007828:	60a3      	str	r3, [r4, #8]
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	071a      	lsls	r2, r3, #28
 800782e:	d52f      	bpl.n	8007890 <__swbuf_r+0x84>
 8007830:	6923      	ldr	r3, [r4, #16]
 8007832:	b36b      	cbz	r3, 8007890 <__swbuf_r+0x84>
 8007834:	6923      	ldr	r3, [r4, #16]
 8007836:	6820      	ldr	r0, [r4, #0]
 8007838:	1ac0      	subs	r0, r0, r3
 800783a:	6963      	ldr	r3, [r4, #20]
 800783c:	b2f6      	uxtb	r6, r6
 800783e:	4283      	cmp	r3, r0
 8007840:	4637      	mov	r7, r6
 8007842:	dc04      	bgt.n	800784e <__swbuf_r+0x42>
 8007844:	4621      	mov	r1, r4
 8007846:	4628      	mov	r0, r5
 8007848:	f000 f926 	bl	8007a98 <_fflush_r>
 800784c:	bb30      	cbnz	r0, 800789c <__swbuf_r+0x90>
 800784e:	68a3      	ldr	r3, [r4, #8]
 8007850:	3b01      	subs	r3, #1
 8007852:	60a3      	str	r3, [r4, #8]
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	6022      	str	r2, [r4, #0]
 800785a:	701e      	strb	r6, [r3, #0]
 800785c:	6963      	ldr	r3, [r4, #20]
 800785e:	3001      	adds	r0, #1
 8007860:	4283      	cmp	r3, r0
 8007862:	d004      	beq.n	800786e <__swbuf_r+0x62>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	07db      	lsls	r3, r3, #31
 8007868:	d506      	bpl.n	8007878 <__swbuf_r+0x6c>
 800786a:	2e0a      	cmp	r6, #10
 800786c:	d104      	bne.n	8007878 <__swbuf_r+0x6c>
 800786e:	4621      	mov	r1, r4
 8007870:	4628      	mov	r0, r5
 8007872:	f000 f911 	bl	8007a98 <_fflush_r>
 8007876:	b988      	cbnz	r0, 800789c <__swbuf_r+0x90>
 8007878:	4638      	mov	r0, r7
 800787a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800787c:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <__swbuf_r+0x9c>)
 800787e:	429c      	cmp	r4, r3
 8007880:	d101      	bne.n	8007886 <__swbuf_r+0x7a>
 8007882:	68ac      	ldr	r4, [r5, #8]
 8007884:	e7cf      	b.n	8007826 <__swbuf_r+0x1a>
 8007886:	4b09      	ldr	r3, [pc, #36]	; (80078ac <__swbuf_r+0xa0>)
 8007888:	429c      	cmp	r4, r3
 800788a:	bf08      	it	eq
 800788c:	68ec      	ldreq	r4, [r5, #12]
 800788e:	e7ca      	b.n	8007826 <__swbuf_r+0x1a>
 8007890:	4621      	mov	r1, r4
 8007892:	4628      	mov	r0, r5
 8007894:	f000 f80c 	bl	80078b0 <__swsetup_r>
 8007898:	2800      	cmp	r0, #0
 800789a:	d0cb      	beq.n	8007834 <__swbuf_r+0x28>
 800789c:	f04f 37ff 	mov.w	r7, #4294967295
 80078a0:	e7ea      	b.n	8007878 <__swbuf_r+0x6c>
 80078a2:	bf00      	nop
 80078a4:	08008904 	.word	0x08008904
 80078a8:	08008924 	.word	0x08008924
 80078ac:	080088e4 	.word	0x080088e4

080078b0 <__swsetup_r>:
 80078b0:	4b32      	ldr	r3, [pc, #200]	; (800797c <__swsetup_r+0xcc>)
 80078b2:	b570      	push	{r4, r5, r6, lr}
 80078b4:	681d      	ldr	r5, [r3, #0]
 80078b6:	4606      	mov	r6, r0
 80078b8:	460c      	mov	r4, r1
 80078ba:	b125      	cbz	r5, 80078c6 <__swsetup_r+0x16>
 80078bc:	69ab      	ldr	r3, [r5, #24]
 80078be:	b913      	cbnz	r3, 80078c6 <__swsetup_r+0x16>
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 f97d 	bl	8007bc0 <__sinit>
 80078c6:	4b2e      	ldr	r3, [pc, #184]	; (8007980 <__swsetup_r+0xd0>)
 80078c8:	429c      	cmp	r4, r3
 80078ca:	d10f      	bne.n	80078ec <__swsetup_r+0x3c>
 80078cc:	686c      	ldr	r4, [r5, #4]
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078d4:	0719      	lsls	r1, r3, #28
 80078d6:	d42c      	bmi.n	8007932 <__swsetup_r+0x82>
 80078d8:	06dd      	lsls	r5, r3, #27
 80078da:	d411      	bmi.n	8007900 <__swsetup_r+0x50>
 80078dc:	2309      	movs	r3, #9
 80078de:	6033      	str	r3, [r6, #0]
 80078e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078e4:	81a3      	strh	r3, [r4, #12]
 80078e6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ea:	e03e      	b.n	800796a <__swsetup_r+0xba>
 80078ec:	4b25      	ldr	r3, [pc, #148]	; (8007984 <__swsetup_r+0xd4>)
 80078ee:	429c      	cmp	r4, r3
 80078f0:	d101      	bne.n	80078f6 <__swsetup_r+0x46>
 80078f2:	68ac      	ldr	r4, [r5, #8]
 80078f4:	e7eb      	b.n	80078ce <__swsetup_r+0x1e>
 80078f6:	4b24      	ldr	r3, [pc, #144]	; (8007988 <__swsetup_r+0xd8>)
 80078f8:	429c      	cmp	r4, r3
 80078fa:	bf08      	it	eq
 80078fc:	68ec      	ldreq	r4, [r5, #12]
 80078fe:	e7e6      	b.n	80078ce <__swsetup_r+0x1e>
 8007900:	0758      	lsls	r0, r3, #29
 8007902:	d512      	bpl.n	800792a <__swsetup_r+0x7a>
 8007904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007906:	b141      	cbz	r1, 800791a <__swsetup_r+0x6a>
 8007908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800790c:	4299      	cmp	r1, r3
 800790e:	d002      	beq.n	8007916 <__swsetup_r+0x66>
 8007910:	4630      	mov	r0, r6
 8007912:	f000 fa5b 	bl	8007dcc <_free_r>
 8007916:	2300      	movs	r3, #0
 8007918:	6363      	str	r3, [r4, #52]	; 0x34
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007920:	81a3      	strh	r3, [r4, #12]
 8007922:	2300      	movs	r3, #0
 8007924:	6063      	str	r3, [r4, #4]
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	89a3      	ldrh	r3, [r4, #12]
 800792c:	f043 0308 	orr.w	r3, r3, #8
 8007930:	81a3      	strh	r3, [r4, #12]
 8007932:	6923      	ldr	r3, [r4, #16]
 8007934:	b94b      	cbnz	r3, 800794a <__swsetup_r+0x9a>
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800793c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007940:	d003      	beq.n	800794a <__swsetup_r+0x9a>
 8007942:	4621      	mov	r1, r4
 8007944:	4630      	mov	r0, r6
 8007946:	f000 fa01 	bl	8007d4c <__smakebuf_r>
 800794a:	89a0      	ldrh	r0, [r4, #12]
 800794c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007950:	f010 0301 	ands.w	r3, r0, #1
 8007954:	d00a      	beq.n	800796c <__swsetup_r+0xbc>
 8007956:	2300      	movs	r3, #0
 8007958:	60a3      	str	r3, [r4, #8]
 800795a:	6963      	ldr	r3, [r4, #20]
 800795c:	425b      	negs	r3, r3
 800795e:	61a3      	str	r3, [r4, #24]
 8007960:	6923      	ldr	r3, [r4, #16]
 8007962:	b943      	cbnz	r3, 8007976 <__swsetup_r+0xc6>
 8007964:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007968:	d1ba      	bne.n	80078e0 <__swsetup_r+0x30>
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	0781      	lsls	r1, r0, #30
 800796e:	bf58      	it	pl
 8007970:	6963      	ldrpl	r3, [r4, #20]
 8007972:	60a3      	str	r3, [r4, #8]
 8007974:	e7f4      	b.n	8007960 <__swsetup_r+0xb0>
 8007976:	2000      	movs	r0, #0
 8007978:	e7f7      	b.n	800796a <__swsetup_r+0xba>
 800797a:	bf00      	nop
 800797c:	2000000c 	.word	0x2000000c
 8007980:	08008904 	.word	0x08008904
 8007984:	08008924 	.word	0x08008924
 8007988:	080088e4 	.word	0x080088e4

0800798c <__sflush_r>:
 800798c:	898a      	ldrh	r2, [r1, #12]
 800798e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007992:	4605      	mov	r5, r0
 8007994:	0710      	lsls	r0, r2, #28
 8007996:	460c      	mov	r4, r1
 8007998:	d458      	bmi.n	8007a4c <__sflush_r+0xc0>
 800799a:	684b      	ldr	r3, [r1, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	dc05      	bgt.n	80079ac <__sflush_r+0x20>
 80079a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	dc02      	bgt.n	80079ac <__sflush_r+0x20>
 80079a6:	2000      	movs	r0, #0
 80079a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079ae:	2e00      	cmp	r6, #0
 80079b0:	d0f9      	beq.n	80079a6 <__sflush_r+0x1a>
 80079b2:	2300      	movs	r3, #0
 80079b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079b8:	682f      	ldr	r7, [r5, #0]
 80079ba:	602b      	str	r3, [r5, #0]
 80079bc:	d032      	beq.n	8007a24 <__sflush_r+0x98>
 80079be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	075a      	lsls	r2, r3, #29
 80079c4:	d505      	bpl.n	80079d2 <__sflush_r+0x46>
 80079c6:	6863      	ldr	r3, [r4, #4]
 80079c8:	1ac0      	subs	r0, r0, r3
 80079ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079cc:	b10b      	cbz	r3, 80079d2 <__sflush_r+0x46>
 80079ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079d0:	1ac0      	subs	r0, r0, r3
 80079d2:	2300      	movs	r3, #0
 80079d4:	4602      	mov	r2, r0
 80079d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079d8:	6a21      	ldr	r1, [r4, #32]
 80079da:	4628      	mov	r0, r5
 80079dc:	47b0      	blx	r6
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	d106      	bne.n	80079f2 <__sflush_r+0x66>
 80079e4:	6829      	ldr	r1, [r5, #0]
 80079e6:	291d      	cmp	r1, #29
 80079e8:	d82c      	bhi.n	8007a44 <__sflush_r+0xb8>
 80079ea:	4a2a      	ldr	r2, [pc, #168]	; (8007a94 <__sflush_r+0x108>)
 80079ec:	40ca      	lsrs	r2, r1
 80079ee:	07d6      	lsls	r6, r2, #31
 80079f0:	d528      	bpl.n	8007a44 <__sflush_r+0xb8>
 80079f2:	2200      	movs	r2, #0
 80079f4:	6062      	str	r2, [r4, #4]
 80079f6:	04d9      	lsls	r1, r3, #19
 80079f8:	6922      	ldr	r2, [r4, #16]
 80079fa:	6022      	str	r2, [r4, #0]
 80079fc:	d504      	bpl.n	8007a08 <__sflush_r+0x7c>
 80079fe:	1c42      	adds	r2, r0, #1
 8007a00:	d101      	bne.n	8007a06 <__sflush_r+0x7a>
 8007a02:	682b      	ldr	r3, [r5, #0]
 8007a04:	b903      	cbnz	r3, 8007a08 <__sflush_r+0x7c>
 8007a06:	6560      	str	r0, [r4, #84]	; 0x54
 8007a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a0a:	602f      	str	r7, [r5, #0]
 8007a0c:	2900      	cmp	r1, #0
 8007a0e:	d0ca      	beq.n	80079a6 <__sflush_r+0x1a>
 8007a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a14:	4299      	cmp	r1, r3
 8007a16:	d002      	beq.n	8007a1e <__sflush_r+0x92>
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f000 f9d7 	bl	8007dcc <_free_r>
 8007a1e:	2000      	movs	r0, #0
 8007a20:	6360      	str	r0, [r4, #52]	; 0x34
 8007a22:	e7c1      	b.n	80079a8 <__sflush_r+0x1c>
 8007a24:	6a21      	ldr	r1, [r4, #32]
 8007a26:	2301      	movs	r3, #1
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b0      	blx	r6
 8007a2c:	1c41      	adds	r1, r0, #1
 8007a2e:	d1c7      	bne.n	80079c0 <__sflush_r+0x34>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0c4      	beq.n	80079c0 <__sflush_r+0x34>
 8007a36:	2b1d      	cmp	r3, #29
 8007a38:	d001      	beq.n	8007a3e <__sflush_r+0xb2>
 8007a3a:	2b16      	cmp	r3, #22
 8007a3c:	d101      	bne.n	8007a42 <__sflush_r+0xb6>
 8007a3e:	602f      	str	r7, [r5, #0]
 8007a40:	e7b1      	b.n	80079a6 <__sflush_r+0x1a>
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a48:	81a3      	strh	r3, [r4, #12]
 8007a4a:	e7ad      	b.n	80079a8 <__sflush_r+0x1c>
 8007a4c:	690f      	ldr	r7, [r1, #16]
 8007a4e:	2f00      	cmp	r7, #0
 8007a50:	d0a9      	beq.n	80079a6 <__sflush_r+0x1a>
 8007a52:	0793      	lsls	r3, r2, #30
 8007a54:	680e      	ldr	r6, [r1, #0]
 8007a56:	bf08      	it	eq
 8007a58:	694b      	ldreq	r3, [r1, #20]
 8007a5a:	600f      	str	r7, [r1, #0]
 8007a5c:	bf18      	it	ne
 8007a5e:	2300      	movne	r3, #0
 8007a60:	eba6 0807 	sub.w	r8, r6, r7
 8007a64:	608b      	str	r3, [r1, #8]
 8007a66:	f1b8 0f00 	cmp.w	r8, #0
 8007a6a:	dd9c      	ble.n	80079a6 <__sflush_r+0x1a>
 8007a6c:	6a21      	ldr	r1, [r4, #32]
 8007a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a70:	4643      	mov	r3, r8
 8007a72:	463a      	mov	r2, r7
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b0      	blx	r6
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	dc06      	bgt.n	8007a8a <__sflush_r+0xfe>
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295
 8007a88:	e78e      	b.n	80079a8 <__sflush_r+0x1c>
 8007a8a:	4407      	add	r7, r0
 8007a8c:	eba8 0800 	sub.w	r8, r8, r0
 8007a90:	e7e9      	b.n	8007a66 <__sflush_r+0xda>
 8007a92:	bf00      	nop
 8007a94:	20400001 	.word	0x20400001

08007a98 <_fflush_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	690b      	ldr	r3, [r1, #16]
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	b913      	cbnz	r3, 8007aa8 <_fflush_r+0x10>
 8007aa2:	2500      	movs	r5, #0
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	b118      	cbz	r0, 8007ab2 <_fflush_r+0x1a>
 8007aaa:	6983      	ldr	r3, [r0, #24]
 8007aac:	b90b      	cbnz	r3, 8007ab2 <_fflush_r+0x1a>
 8007aae:	f000 f887 	bl	8007bc0 <__sinit>
 8007ab2:	4b14      	ldr	r3, [pc, #80]	; (8007b04 <_fflush_r+0x6c>)
 8007ab4:	429c      	cmp	r4, r3
 8007ab6:	d11b      	bne.n	8007af0 <_fflush_r+0x58>
 8007ab8:	686c      	ldr	r4, [r5, #4]
 8007aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0ef      	beq.n	8007aa2 <_fflush_r+0xa>
 8007ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ac4:	07d0      	lsls	r0, r2, #31
 8007ac6:	d404      	bmi.n	8007ad2 <_fflush_r+0x3a>
 8007ac8:	0599      	lsls	r1, r3, #22
 8007aca:	d402      	bmi.n	8007ad2 <_fflush_r+0x3a>
 8007acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ace:	f000 f915 	bl	8007cfc <__retarget_lock_acquire_recursive>
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	f7ff ff59 	bl	800798c <__sflush_r>
 8007ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007adc:	07da      	lsls	r2, r3, #31
 8007ade:	4605      	mov	r5, r0
 8007ae0:	d4e0      	bmi.n	8007aa4 <_fflush_r+0xc>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	059b      	lsls	r3, r3, #22
 8007ae6:	d4dd      	bmi.n	8007aa4 <_fflush_r+0xc>
 8007ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aea:	f000 f908 	bl	8007cfe <__retarget_lock_release_recursive>
 8007aee:	e7d9      	b.n	8007aa4 <_fflush_r+0xc>
 8007af0:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <_fflush_r+0x70>)
 8007af2:	429c      	cmp	r4, r3
 8007af4:	d101      	bne.n	8007afa <_fflush_r+0x62>
 8007af6:	68ac      	ldr	r4, [r5, #8]
 8007af8:	e7df      	b.n	8007aba <_fflush_r+0x22>
 8007afa:	4b04      	ldr	r3, [pc, #16]	; (8007b0c <_fflush_r+0x74>)
 8007afc:	429c      	cmp	r4, r3
 8007afe:	bf08      	it	eq
 8007b00:	68ec      	ldreq	r4, [r5, #12]
 8007b02:	e7da      	b.n	8007aba <_fflush_r+0x22>
 8007b04:	08008904 	.word	0x08008904
 8007b08:	08008924 	.word	0x08008924
 8007b0c:	080088e4 	.word	0x080088e4

08007b10 <std>:
 8007b10:	2300      	movs	r3, #0
 8007b12:	b510      	push	{r4, lr}
 8007b14:	4604      	mov	r4, r0
 8007b16:	e9c0 3300 	strd	r3, r3, [r0]
 8007b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b1e:	6083      	str	r3, [r0, #8]
 8007b20:	8181      	strh	r1, [r0, #12]
 8007b22:	6643      	str	r3, [r0, #100]	; 0x64
 8007b24:	81c2      	strh	r2, [r0, #14]
 8007b26:	6183      	str	r3, [r0, #24]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	2208      	movs	r2, #8
 8007b2c:	305c      	adds	r0, #92	; 0x5c
 8007b2e:	f7ff fdd7 	bl	80076e0 <memset>
 8007b32:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <std+0x38>)
 8007b34:	6263      	str	r3, [r4, #36]	; 0x24
 8007b36:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <std+0x3c>)
 8007b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b3a:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <std+0x40>)
 8007b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b3e:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <std+0x44>)
 8007b40:	6224      	str	r4, [r4, #32]
 8007b42:	6323      	str	r3, [r4, #48]	; 0x30
 8007b44:	bd10      	pop	{r4, pc}
 8007b46:	bf00      	nop
 8007b48:	08008589 	.word	0x08008589
 8007b4c:	080085ab 	.word	0x080085ab
 8007b50:	080085e3 	.word	0x080085e3
 8007b54:	08008607 	.word	0x08008607

08007b58 <_cleanup_r>:
 8007b58:	4901      	ldr	r1, [pc, #4]	; (8007b60 <_cleanup_r+0x8>)
 8007b5a:	f000 b8af 	b.w	8007cbc <_fwalk_reent>
 8007b5e:	bf00      	nop
 8007b60:	08007a99 	.word	0x08007a99

08007b64 <__sfmoreglue>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	2268      	movs	r2, #104	; 0x68
 8007b68:	1e4d      	subs	r5, r1, #1
 8007b6a:	4355      	muls	r5, r2
 8007b6c:	460e      	mov	r6, r1
 8007b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b72:	f000 f997 	bl	8007ea4 <_malloc_r>
 8007b76:	4604      	mov	r4, r0
 8007b78:	b140      	cbz	r0, 8007b8c <__sfmoreglue+0x28>
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8007b80:	300c      	adds	r0, #12
 8007b82:	60a0      	str	r0, [r4, #8]
 8007b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b88:	f7ff fdaa 	bl	80076e0 <memset>
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}

08007b90 <__sfp_lock_acquire>:
 8007b90:	4801      	ldr	r0, [pc, #4]	; (8007b98 <__sfp_lock_acquire+0x8>)
 8007b92:	f000 b8b3 	b.w	8007cfc <__retarget_lock_acquire_recursive>
 8007b96:	bf00      	nop
 8007b98:	20002299 	.word	0x20002299

08007b9c <__sfp_lock_release>:
 8007b9c:	4801      	ldr	r0, [pc, #4]	; (8007ba4 <__sfp_lock_release+0x8>)
 8007b9e:	f000 b8ae 	b.w	8007cfe <__retarget_lock_release_recursive>
 8007ba2:	bf00      	nop
 8007ba4:	20002299 	.word	0x20002299

08007ba8 <__sinit_lock_acquire>:
 8007ba8:	4801      	ldr	r0, [pc, #4]	; (8007bb0 <__sinit_lock_acquire+0x8>)
 8007baa:	f000 b8a7 	b.w	8007cfc <__retarget_lock_acquire_recursive>
 8007bae:	bf00      	nop
 8007bb0:	2000229a 	.word	0x2000229a

08007bb4 <__sinit_lock_release>:
 8007bb4:	4801      	ldr	r0, [pc, #4]	; (8007bbc <__sinit_lock_release+0x8>)
 8007bb6:	f000 b8a2 	b.w	8007cfe <__retarget_lock_release_recursive>
 8007bba:	bf00      	nop
 8007bbc:	2000229a 	.word	0x2000229a

08007bc0 <__sinit>:
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	f7ff fff0 	bl	8007ba8 <__sinit_lock_acquire>
 8007bc8:	69a3      	ldr	r3, [r4, #24]
 8007bca:	b11b      	cbz	r3, 8007bd4 <__sinit+0x14>
 8007bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bd0:	f7ff bff0 	b.w	8007bb4 <__sinit_lock_release>
 8007bd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8007bda:	4b13      	ldr	r3, [pc, #76]	; (8007c28 <__sinit+0x68>)
 8007bdc:	4a13      	ldr	r2, [pc, #76]	; (8007c2c <__sinit+0x6c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007be2:	42a3      	cmp	r3, r4
 8007be4:	bf04      	itt	eq
 8007be6:	2301      	moveq	r3, #1
 8007be8:	61a3      	streq	r3, [r4, #24]
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 f820 	bl	8007c30 <__sfp>
 8007bf0:	6060      	str	r0, [r4, #4]
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f000 f81c 	bl	8007c30 <__sfp>
 8007bf8:	60a0      	str	r0, [r4, #8]
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 f818 	bl	8007c30 <__sfp>
 8007c00:	2200      	movs	r2, #0
 8007c02:	60e0      	str	r0, [r4, #12]
 8007c04:	2104      	movs	r1, #4
 8007c06:	6860      	ldr	r0, [r4, #4]
 8007c08:	f7ff ff82 	bl	8007b10 <std>
 8007c0c:	68a0      	ldr	r0, [r4, #8]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	2109      	movs	r1, #9
 8007c12:	f7ff ff7d 	bl	8007b10 <std>
 8007c16:	68e0      	ldr	r0, [r4, #12]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	2112      	movs	r1, #18
 8007c1c:	f7ff ff78 	bl	8007b10 <std>
 8007c20:	2301      	movs	r3, #1
 8007c22:	61a3      	str	r3, [r4, #24]
 8007c24:	e7d2      	b.n	8007bcc <__sinit+0xc>
 8007c26:	bf00      	nop
 8007c28:	080088e0 	.word	0x080088e0
 8007c2c:	08007b59 	.word	0x08007b59

08007c30 <__sfp>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	4607      	mov	r7, r0
 8007c34:	f7ff ffac 	bl	8007b90 <__sfp_lock_acquire>
 8007c38:	4b1e      	ldr	r3, [pc, #120]	; (8007cb4 <__sfp+0x84>)
 8007c3a:	681e      	ldr	r6, [r3, #0]
 8007c3c:	69b3      	ldr	r3, [r6, #24]
 8007c3e:	b913      	cbnz	r3, 8007c46 <__sfp+0x16>
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7ff ffbd 	bl	8007bc0 <__sinit>
 8007c46:	3648      	adds	r6, #72	; 0x48
 8007c48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	d503      	bpl.n	8007c58 <__sfp+0x28>
 8007c50:	6833      	ldr	r3, [r6, #0]
 8007c52:	b30b      	cbz	r3, 8007c98 <__sfp+0x68>
 8007c54:	6836      	ldr	r6, [r6, #0]
 8007c56:	e7f7      	b.n	8007c48 <__sfp+0x18>
 8007c58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c5c:	b9d5      	cbnz	r5, 8007c94 <__sfp+0x64>
 8007c5e:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <__sfp+0x88>)
 8007c60:	60e3      	str	r3, [r4, #12]
 8007c62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c66:	6665      	str	r5, [r4, #100]	; 0x64
 8007c68:	f000 f847 	bl	8007cfa <__retarget_lock_init_recursive>
 8007c6c:	f7ff ff96 	bl	8007b9c <__sfp_lock_release>
 8007c70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c78:	6025      	str	r5, [r4, #0]
 8007c7a:	61a5      	str	r5, [r4, #24]
 8007c7c:	2208      	movs	r2, #8
 8007c7e:	4629      	mov	r1, r5
 8007c80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c84:	f7ff fd2c 	bl	80076e0 <memset>
 8007c88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c90:	4620      	mov	r0, r4
 8007c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c94:	3468      	adds	r4, #104	; 0x68
 8007c96:	e7d9      	b.n	8007c4c <__sfp+0x1c>
 8007c98:	2104      	movs	r1, #4
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	f7ff ff62 	bl	8007b64 <__sfmoreglue>
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	6030      	str	r0, [r6, #0]
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d1d5      	bne.n	8007c54 <__sfp+0x24>
 8007ca8:	f7ff ff78 	bl	8007b9c <__sfp_lock_release>
 8007cac:	230c      	movs	r3, #12
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	e7ee      	b.n	8007c90 <__sfp+0x60>
 8007cb2:	bf00      	nop
 8007cb4:	080088e0 	.word	0x080088e0
 8007cb8:	ffff0001 	.word	0xffff0001

08007cbc <_fwalk_reent>:
 8007cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	4688      	mov	r8, r1
 8007cc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cc8:	2700      	movs	r7, #0
 8007cca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cce:	f1b9 0901 	subs.w	r9, r9, #1
 8007cd2:	d505      	bpl.n	8007ce0 <_fwalk_reent+0x24>
 8007cd4:	6824      	ldr	r4, [r4, #0]
 8007cd6:	2c00      	cmp	r4, #0
 8007cd8:	d1f7      	bne.n	8007cca <_fwalk_reent+0xe>
 8007cda:	4638      	mov	r0, r7
 8007cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ce0:	89ab      	ldrh	r3, [r5, #12]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d907      	bls.n	8007cf6 <_fwalk_reent+0x3a>
 8007ce6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cea:	3301      	adds	r3, #1
 8007cec:	d003      	beq.n	8007cf6 <_fwalk_reent+0x3a>
 8007cee:	4629      	mov	r1, r5
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	47c0      	blx	r8
 8007cf4:	4307      	orrs	r7, r0
 8007cf6:	3568      	adds	r5, #104	; 0x68
 8007cf8:	e7e9      	b.n	8007cce <_fwalk_reent+0x12>

08007cfa <__retarget_lock_init_recursive>:
 8007cfa:	4770      	bx	lr

08007cfc <__retarget_lock_acquire_recursive>:
 8007cfc:	4770      	bx	lr

08007cfe <__retarget_lock_release_recursive>:
 8007cfe:	4770      	bx	lr

08007d00 <__swhatbuf_r>:
 8007d00:	b570      	push	{r4, r5, r6, lr}
 8007d02:	460e      	mov	r6, r1
 8007d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d08:	2900      	cmp	r1, #0
 8007d0a:	b096      	sub	sp, #88	; 0x58
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	461d      	mov	r5, r3
 8007d10:	da08      	bge.n	8007d24 <__swhatbuf_r+0x24>
 8007d12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	602a      	str	r2, [r5, #0]
 8007d1a:	061a      	lsls	r2, r3, #24
 8007d1c:	d410      	bmi.n	8007d40 <__swhatbuf_r+0x40>
 8007d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d22:	e00e      	b.n	8007d42 <__swhatbuf_r+0x42>
 8007d24:	466a      	mov	r2, sp
 8007d26:	f000 fc95 	bl	8008654 <_fstat_r>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	dbf1      	blt.n	8007d12 <__swhatbuf_r+0x12>
 8007d2e:	9a01      	ldr	r2, [sp, #4]
 8007d30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d38:	425a      	negs	r2, r3
 8007d3a:	415a      	adcs	r2, r3
 8007d3c:	602a      	str	r2, [r5, #0]
 8007d3e:	e7ee      	b.n	8007d1e <__swhatbuf_r+0x1e>
 8007d40:	2340      	movs	r3, #64	; 0x40
 8007d42:	2000      	movs	r0, #0
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	b016      	add	sp, #88	; 0x58
 8007d48:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d4c <__smakebuf_r>:
 8007d4c:	898b      	ldrh	r3, [r1, #12]
 8007d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d50:	079d      	lsls	r5, r3, #30
 8007d52:	4606      	mov	r6, r0
 8007d54:	460c      	mov	r4, r1
 8007d56:	d507      	bpl.n	8007d68 <__smakebuf_r+0x1c>
 8007d58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	6123      	str	r3, [r4, #16]
 8007d60:	2301      	movs	r3, #1
 8007d62:	6163      	str	r3, [r4, #20]
 8007d64:	b002      	add	sp, #8
 8007d66:	bd70      	pop	{r4, r5, r6, pc}
 8007d68:	ab01      	add	r3, sp, #4
 8007d6a:	466a      	mov	r2, sp
 8007d6c:	f7ff ffc8 	bl	8007d00 <__swhatbuf_r>
 8007d70:	9900      	ldr	r1, [sp, #0]
 8007d72:	4605      	mov	r5, r0
 8007d74:	4630      	mov	r0, r6
 8007d76:	f000 f895 	bl	8007ea4 <_malloc_r>
 8007d7a:	b948      	cbnz	r0, 8007d90 <__smakebuf_r+0x44>
 8007d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d80:	059a      	lsls	r2, r3, #22
 8007d82:	d4ef      	bmi.n	8007d64 <__smakebuf_r+0x18>
 8007d84:	f023 0303 	bic.w	r3, r3, #3
 8007d88:	f043 0302 	orr.w	r3, r3, #2
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	e7e3      	b.n	8007d58 <__smakebuf_r+0xc>
 8007d90:	4b0d      	ldr	r3, [pc, #52]	; (8007dc8 <__smakebuf_r+0x7c>)
 8007d92:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	6020      	str	r0, [r4, #0]
 8007d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9c:	81a3      	strh	r3, [r4, #12]
 8007d9e:	9b00      	ldr	r3, [sp, #0]
 8007da0:	6163      	str	r3, [r4, #20]
 8007da2:	9b01      	ldr	r3, [sp, #4]
 8007da4:	6120      	str	r0, [r4, #16]
 8007da6:	b15b      	cbz	r3, 8007dc0 <__smakebuf_r+0x74>
 8007da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dac:	4630      	mov	r0, r6
 8007dae:	f000 fc63 	bl	8008678 <_isatty_r>
 8007db2:	b128      	cbz	r0, 8007dc0 <__smakebuf_r+0x74>
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	f023 0303 	bic.w	r3, r3, #3
 8007dba:	f043 0301 	orr.w	r3, r3, #1
 8007dbe:	81a3      	strh	r3, [r4, #12]
 8007dc0:	89a0      	ldrh	r0, [r4, #12]
 8007dc2:	4305      	orrs	r5, r0
 8007dc4:	81a5      	strh	r5, [r4, #12]
 8007dc6:	e7cd      	b.n	8007d64 <__smakebuf_r+0x18>
 8007dc8:	08007b59 	.word	0x08007b59

08007dcc <_free_r>:
 8007dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dce:	2900      	cmp	r1, #0
 8007dd0:	d044      	beq.n	8007e5c <_free_r+0x90>
 8007dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd6:	9001      	str	r0, [sp, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f1a1 0404 	sub.w	r4, r1, #4
 8007dde:	bfb8      	it	lt
 8007de0:	18e4      	addlt	r4, r4, r3
 8007de2:	f000 fc6b 	bl	80086bc <__malloc_lock>
 8007de6:	4a1e      	ldr	r2, [pc, #120]	; (8007e60 <_free_r+0x94>)
 8007de8:	9801      	ldr	r0, [sp, #4]
 8007dea:	6813      	ldr	r3, [r2, #0]
 8007dec:	b933      	cbnz	r3, 8007dfc <_free_r+0x30>
 8007dee:	6063      	str	r3, [r4, #4]
 8007df0:	6014      	str	r4, [r2, #0]
 8007df2:	b003      	add	sp, #12
 8007df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007df8:	f000 bc66 	b.w	80086c8 <__malloc_unlock>
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	d908      	bls.n	8007e12 <_free_r+0x46>
 8007e00:	6825      	ldr	r5, [r4, #0]
 8007e02:	1961      	adds	r1, r4, r5
 8007e04:	428b      	cmp	r3, r1
 8007e06:	bf01      	itttt	eq
 8007e08:	6819      	ldreq	r1, [r3, #0]
 8007e0a:	685b      	ldreq	r3, [r3, #4]
 8007e0c:	1949      	addeq	r1, r1, r5
 8007e0e:	6021      	streq	r1, [r4, #0]
 8007e10:	e7ed      	b.n	8007dee <_free_r+0x22>
 8007e12:	461a      	mov	r2, r3
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	b10b      	cbz	r3, 8007e1c <_free_r+0x50>
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	d9fa      	bls.n	8007e12 <_free_r+0x46>
 8007e1c:	6811      	ldr	r1, [r2, #0]
 8007e1e:	1855      	adds	r5, r2, r1
 8007e20:	42a5      	cmp	r5, r4
 8007e22:	d10b      	bne.n	8007e3c <_free_r+0x70>
 8007e24:	6824      	ldr	r4, [r4, #0]
 8007e26:	4421      	add	r1, r4
 8007e28:	1854      	adds	r4, r2, r1
 8007e2a:	42a3      	cmp	r3, r4
 8007e2c:	6011      	str	r1, [r2, #0]
 8007e2e:	d1e0      	bne.n	8007df2 <_free_r+0x26>
 8007e30:	681c      	ldr	r4, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	6053      	str	r3, [r2, #4]
 8007e36:	4421      	add	r1, r4
 8007e38:	6011      	str	r1, [r2, #0]
 8007e3a:	e7da      	b.n	8007df2 <_free_r+0x26>
 8007e3c:	d902      	bls.n	8007e44 <_free_r+0x78>
 8007e3e:	230c      	movs	r3, #12
 8007e40:	6003      	str	r3, [r0, #0]
 8007e42:	e7d6      	b.n	8007df2 <_free_r+0x26>
 8007e44:	6825      	ldr	r5, [r4, #0]
 8007e46:	1961      	adds	r1, r4, r5
 8007e48:	428b      	cmp	r3, r1
 8007e4a:	bf04      	itt	eq
 8007e4c:	6819      	ldreq	r1, [r3, #0]
 8007e4e:	685b      	ldreq	r3, [r3, #4]
 8007e50:	6063      	str	r3, [r4, #4]
 8007e52:	bf04      	itt	eq
 8007e54:	1949      	addeq	r1, r1, r5
 8007e56:	6021      	streq	r1, [r4, #0]
 8007e58:	6054      	str	r4, [r2, #4]
 8007e5a:	e7ca      	b.n	8007df2 <_free_r+0x26>
 8007e5c:	b003      	add	sp, #12
 8007e5e:	bd30      	pop	{r4, r5, pc}
 8007e60:	2000229c 	.word	0x2000229c

08007e64 <sbrk_aligned>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	4e0e      	ldr	r6, [pc, #56]	; (8007ea0 <sbrk_aligned+0x3c>)
 8007e68:	460c      	mov	r4, r1
 8007e6a:	6831      	ldr	r1, [r6, #0]
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	b911      	cbnz	r1, 8007e76 <sbrk_aligned+0x12>
 8007e70:	f000 fb7a 	bl	8008568 <_sbrk_r>
 8007e74:	6030      	str	r0, [r6, #0]
 8007e76:	4621      	mov	r1, r4
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f000 fb75 	bl	8008568 <_sbrk_r>
 8007e7e:	1c43      	adds	r3, r0, #1
 8007e80:	d00a      	beq.n	8007e98 <sbrk_aligned+0x34>
 8007e82:	1cc4      	adds	r4, r0, #3
 8007e84:	f024 0403 	bic.w	r4, r4, #3
 8007e88:	42a0      	cmp	r0, r4
 8007e8a:	d007      	beq.n	8007e9c <sbrk_aligned+0x38>
 8007e8c:	1a21      	subs	r1, r4, r0
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f000 fb6a 	bl	8008568 <_sbrk_r>
 8007e94:	3001      	adds	r0, #1
 8007e96:	d101      	bne.n	8007e9c <sbrk_aligned+0x38>
 8007e98:	f04f 34ff 	mov.w	r4, #4294967295
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ea0:	200022a0 	.word	0x200022a0

08007ea4 <_malloc_r>:
 8007ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea8:	1ccd      	adds	r5, r1, #3
 8007eaa:	f025 0503 	bic.w	r5, r5, #3
 8007eae:	3508      	adds	r5, #8
 8007eb0:	2d0c      	cmp	r5, #12
 8007eb2:	bf38      	it	cc
 8007eb4:	250c      	movcc	r5, #12
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	4607      	mov	r7, r0
 8007eba:	db01      	blt.n	8007ec0 <_malloc_r+0x1c>
 8007ebc:	42a9      	cmp	r1, r5
 8007ebe:	d905      	bls.n	8007ecc <_malloc_r+0x28>
 8007ec0:	230c      	movs	r3, #12
 8007ec2:	603b      	str	r3, [r7, #0]
 8007ec4:	2600      	movs	r6, #0
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ecc:	4e2e      	ldr	r6, [pc, #184]	; (8007f88 <_malloc_r+0xe4>)
 8007ece:	f000 fbf5 	bl	80086bc <__malloc_lock>
 8007ed2:	6833      	ldr	r3, [r6, #0]
 8007ed4:	461c      	mov	r4, r3
 8007ed6:	bb34      	cbnz	r4, 8007f26 <_malloc_r+0x82>
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4638      	mov	r0, r7
 8007edc:	f7ff ffc2 	bl	8007e64 <sbrk_aligned>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	d14d      	bne.n	8007f82 <_malloc_r+0xde>
 8007ee6:	6834      	ldr	r4, [r6, #0]
 8007ee8:	4626      	mov	r6, r4
 8007eea:	2e00      	cmp	r6, #0
 8007eec:	d140      	bne.n	8007f70 <_malloc_r+0xcc>
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	eb04 0803 	add.w	r8, r4, r3
 8007ef8:	f000 fb36 	bl	8008568 <_sbrk_r>
 8007efc:	4580      	cmp	r8, r0
 8007efe:	d13a      	bne.n	8007f76 <_malloc_r+0xd2>
 8007f00:	6821      	ldr	r1, [r4, #0]
 8007f02:	3503      	adds	r5, #3
 8007f04:	1a6d      	subs	r5, r5, r1
 8007f06:	f025 0503 	bic.w	r5, r5, #3
 8007f0a:	3508      	adds	r5, #8
 8007f0c:	2d0c      	cmp	r5, #12
 8007f0e:	bf38      	it	cc
 8007f10:	250c      	movcc	r5, #12
 8007f12:	4629      	mov	r1, r5
 8007f14:	4638      	mov	r0, r7
 8007f16:	f7ff ffa5 	bl	8007e64 <sbrk_aligned>
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	d02b      	beq.n	8007f76 <_malloc_r+0xd2>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	442b      	add	r3, r5
 8007f22:	6023      	str	r3, [r4, #0]
 8007f24:	e00e      	b.n	8007f44 <_malloc_r+0xa0>
 8007f26:	6822      	ldr	r2, [r4, #0]
 8007f28:	1b52      	subs	r2, r2, r5
 8007f2a:	d41e      	bmi.n	8007f6a <_malloc_r+0xc6>
 8007f2c:	2a0b      	cmp	r2, #11
 8007f2e:	d916      	bls.n	8007f5e <_malloc_r+0xba>
 8007f30:	1961      	adds	r1, r4, r5
 8007f32:	42a3      	cmp	r3, r4
 8007f34:	6025      	str	r5, [r4, #0]
 8007f36:	bf18      	it	ne
 8007f38:	6059      	strne	r1, [r3, #4]
 8007f3a:	6863      	ldr	r3, [r4, #4]
 8007f3c:	bf08      	it	eq
 8007f3e:	6031      	streq	r1, [r6, #0]
 8007f40:	5162      	str	r2, [r4, r5]
 8007f42:	604b      	str	r3, [r1, #4]
 8007f44:	4638      	mov	r0, r7
 8007f46:	f104 060b 	add.w	r6, r4, #11
 8007f4a:	f000 fbbd 	bl	80086c8 <__malloc_unlock>
 8007f4e:	f026 0607 	bic.w	r6, r6, #7
 8007f52:	1d23      	adds	r3, r4, #4
 8007f54:	1af2      	subs	r2, r6, r3
 8007f56:	d0b6      	beq.n	8007ec6 <_malloc_r+0x22>
 8007f58:	1b9b      	subs	r3, r3, r6
 8007f5a:	50a3      	str	r3, [r4, r2]
 8007f5c:	e7b3      	b.n	8007ec6 <_malloc_r+0x22>
 8007f5e:	6862      	ldr	r2, [r4, #4]
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	bf0c      	ite	eq
 8007f64:	6032      	streq	r2, [r6, #0]
 8007f66:	605a      	strne	r2, [r3, #4]
 8007f68:	e7ec      	b.n	8007f44 <_malloc_r+0xa0>
 8007f6a:	4623      	mov	r3, r4
 8007f6c:	6864      	ldr	r4, [r4, #4]
 8007f6e:	e7b2      	b.n	8007ed6 <_malloc_r+0x32>
 8007f70:	4634      	mov	r4, r6
 8007f72:	6876      	ldr	r6, [r6, #4]
 8007f74:	e7b9      	b.n	8007eea <_malloc_r+0x46>
 8007f76:	230c      	movs	r3, #12
 8007f78:	603b      	str	r3, [r7, #0]
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	f000 fba4 	bl	80086c8 <__malloc_unlock>
 8007f80:	e7a1      	b.n	8007ec6 <_malloc_r+0x22>
 8007f82:	6025      	str	r5, [r4, #0]
 8007f84:	e7de      	b.n	8007f44 <_malloc_r+0xa0>
 8007f86:	bf00      	nop
 8007f88:	2000229c 	.word	0x2000229c

08007f8c <__sfputc_r>:
 8007f8c:	6893      	ldr	r3, [r2, #8]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	b410      	push	{r4}
 8007f94:	6093      	str	r3, [r2, #8]
 8007f96:	da08      	bge.n	8007faa <__sfputc_r+0x1e>
 8007f98:	6994      	ldr	r4, [r2, #24]
 8007f9a:	42a3      	cmp	r3, r4
 8007f9c:	db01      	blt.n	8007fa2 <__sfputc_r+0x16>
 8007f9e:	290a      	cmp	r1, #10
 8007fa0:	d103      	bne.n	8007faa <__sfputc_r+0x1e>
 8007fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa6:	f7ff bc31 	b.w	800780c <__swbuf_r>
 8007faa:	6813      	ldr	r3, [r2, #0]
 8007fac:	1c58      	adds	r0, r3, #1
 8007fae:	6010      	str	r0, [r2, #0]
 8007fb0:	7019      	strb	r1, [r3, #0]
 8007fb2:	4608      	mov	r0, r1
 8007fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <__sfputs_r>:
 8007fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	460f      	mov	r7, r1
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	18d5      	adds	r5, r2, r3
 8007fc4:	42ac      	cmp	r4, r5
 8007fc6:	d101      	bne.n	8007fcc <__sfputs_r+0x12>
 8007fc8:	2000      	movs	r0, #0
 8007fca:	e007      	b.n	8007fdc <__sfputs_r+0x22>
 8007fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd0:	463a      	mov	r2, r7
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7ff ffda 	bl	8007f8c <__sfputc_r>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d1f3      	bne.n	8007fc4 <__sfputs_r+0xa>
 8007fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fe0 <_vfiprintf_r>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	460d      	mov	r5, r1
 8007fe6:	b09d      	sub	sp, #116	; 0x74
 8007fe8:	4614      	mov	r4, r2
 8007fea:	4698      	mov	r8, r3
 8007fec:	4606      	mov	r6, r0
 8007fee:	b118      	cbz	r0, 8007ff8 <_vfiprintf_r+0x18>
 8007ff0:	6983      	ldr	r3, [r0, #24]
 8007ff2:	b90b      	cbnz	r3, 8007ff8 <_vfiprintf_r+0x18>
 8007ff4:	f7ff fde4 	bl	8007bc0 <__sinit>
 8007ff8:	4b89      	ldr	r3, [pc, #548]	; (8008220 <_vfiprintf_r+0x240>)
 8007ffa:	429d      	cmp	r5, r3
 8007ffc:	d11b      	bne.n	8008036 <_vfiprintf_r+0x56>
 8007ffe:	6875      	ldr	r5, [r6, #4]
 8008000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008002:	07d9      	lsls	r1, r3, #31
 8008004:	d405      	bmi.n	8008012 <_vfiprintf_r+0x32>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	059a      	lsls	r2, r3, #22
 800800a:	d402      	bmi.n	8008012 <_vfiprintf_r+0x32>
 800800c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800800e:	f7ff fe75 	bl	8007cfc <__retarget_lock_acquire_recursive>
 8008012:	89ab      	ldrh	r3, [r5, #12]
 8008014:	071b      	lsls	r3, r3, #28
 8008016:	d501      	bpl.n	800801c <_vfiprintf_r+0x3c>
 8008018:	692b      	ldr	r3, [r5, #16]
 800801a:	b9eb      	cbnz	r3, 8008058 <_vfiprintf_r+0x78>
 800801c:	4629      	mov	r1, r5
 800801e:	4630      	mov	r0, r6
 8008020:	f7ff fc46 	bl	80078b0 <__swsetup_r>
 8008024:	b1c0      	cbz	r0, 8008058 <_vfiprintf_r+0x78>
 8008026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008028:	07dc      	lsls	r4, r3, #31
 800802a:	d50e      	bpl.n	800804a <_vfiprintf_r+0x6a>
 800802c:	f04f 30ff 	mov.w	r0, #4294967295
 8008030:	b01d      	add	sp, #116	; 0x74
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008036:	4b7b      	ldr	r3, [pc, #492]	; (8008224 <_vfiprintf_r+0x244>)
 8008038:	429d      	cmp	r5, r3
 800803a:	d101      	bne.n	8008040 <_vfiprintf_r+0x60>
 800803c:	68b5      	ldr	r5, [r6, #8]
 800803e:	e7df      	b.n	8008000 <_vfiprintf_r+0x20>
 8008040:	4b79      	ldr	r3, [pc, #484]	; (8008228 <_vfiprintf_r+0x248>)
 8008042:	429d      	cmp	r5, r3
 8008044:	bf08      	it	eq
 8008046:	68f5      	ldreq	r5, [r6, #12]
 8008048:	e7da      	b.n	8008000 <_vfiprintf_r+0x20>
 800804a:	89ab      	ldrh	r3, [r5, #12]
 800804c:	0598      	lsls	r0, r3, #22
 800804e:	d4ed      	bmi.n	800802c <_vfiprintf_r+0x4c>
 8008050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008052:	f7ff fe54 	bl	8007cfe <__retarget_lock_release_recursive>
 8008056:	e7e9      	b.n	800802c <_vfiprintf_r+0x4c>
 8008058:	2300      	movs	r3, #0
 800805a:	9309      	str	r3, [sp, #36]	; 0x24
 800805c:	2320      	movs	r3, #32
 800805e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008062:	f8cd 800c 	str.w	r8, [sp, #12]
 8008066:	2330      	movs	r3, #48	; 0x30
 8008068:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800822c <_vfiprintf_r+0x24c>
 800806c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008070:	f04f 0901 	mov.w	r9, #1
 8008074:	4623      	mov	r3, r4
 8008076:	469a      	mov	sl, r3
 8008078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800807c:	b10a      	cbz	r2, 8008082 <_vfiprintf_r+0xa2>
 800807e:	2a25      	cmp	r2, #37	; 0x25
 8008080:	d1f9      	bne.n	8008076 <_vfiprintf_r+0x96>
 8008082:	ebba 0b04 	subs.w	fp, sl, r4
 8008086:	d00b      	beq.n	80080a0 <_vfiprintf_r+0xc0>
 8008088:	465b      	mov	r3, fp
 800808a:	4622      	mov	r2, r4
 800808c:	4629      	mov	r1, r5
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff ff93 	bl	8007fba <__sfputs_r>
 8008094:	3001      	adds	r0, #1
 8008096:	f000 80aa 	beq.w	80081ee <_vfiprintf_r+0x20e>
 800809a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800809c:	445a      	add	r2, fp
 800809e:	9209      	str	r2, [sp, #36]	; 0x24
 80080a0:	f89a 3000 	ldrb.w	r3, [sl]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 80a2 	beq.w	80081ee <_vfiprintf_r+0x20e>
 80080aa:	2300      	movs	r3, #0
 80080ac:	f04f 32ff 	mov.w	r2, #4294967295
 80080b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080b4:	f10a 0a01 	add.w	sl, sl, #1
 80080b8:	9304      	str	r3, [sp, #16]
 80080ba:	9307      	str	r3, [sp, #28]
 80080bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080c0:	931a      	str	r3, [sp, #104]	; 0x68
 80080c2:	4654      	mov	r4, sl
 80080c4:	2205      	movs	r2, #5
 80080c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ca:	4858      	ldr	r0, [pc, #352]	; (800822c <_vfiprintf_r+0x24c>)
 80080cc:	f7f8 f8a0 	bl	8000210 <memchr>
 80080d0:	9a04      	ldr	r2, [sp, #16]
 80080d2:	b9d8      	cbnz	r0, 800810c <_vfiprintf_r+0x12c>
 80080d4:	06d1      	lsls	r1, r2, #27
 80080d6:	bf44      	itt	mi
 80080d8:	2320      	movmi	r3, #32
 80080da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080de:	0713      	lsls	r3, r2, #28
 80080e0:	bf44      	itt	mi
 80080e2:	232b      	movmi	r3, #43	; 0x2b
 80080e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080e8:	f89a 3000 	ldrb.w	r3, [sl]
 80080ec:	2b2a      	cmp	r3, #42	; 0x2a
 80080ee:	d015      	beq.n	800811c <_vfiprintf_r+0x13c>
 80080f0:	9a07      	ldr	r2, [sp, #28]
 80080f2:	4654      	mov	r4, sl
 80080f4:	2000      	movs	r0, #0
 80080f6:	f04f 0c0a 	mov.w	ip, #10
 80080fa:	4621      	mov	r1, r4
 80080fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008100:	3b30      	subs	r3, #48	; 0x30
 8008102:	2b09      	cmp	r3, #9
 8008104:	d94e      	bls.n	80081a4 <_vfiprintf_r+0x1c4>
 8008106:	b1b0      	cbz	r0, 8008136 <_vfiprintf_r+0x156>
 8008108:	9207      	str	r2, [sp, #28]
 800810a:	e014      	b.n	8008136 <_vfiprintf_r+0x156>
 800810c:	eba0 0308 	sub.w	r3, r0, r8
 8008110:	fa09 f303 	lsl.w	r3, r9, r3
 8008114:	4313      	orrs	r3, r2
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	46a2      	mov	sl, r4
 800811a:	e7d2      	b.n	80080c2 <_vfiprintf_r+0xe2>
 800811c:	9b03      	ldr	r3, [sp, #12]
 800811e:	1d19      	adds	r1, r3, #4
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	9103      	str	r1, [sp, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	bfbb      	ittet	lt
 8008128:	425b      	neglt	r3, r3
 800812a:	f042 0202 	orrlt.w	r2, r2, #2
 800812e:	9307      	strge	r3, [sp, #28]
 8008130:	9307      	strlt	r3, [sp, #28]
 8008132:	bfb8      	it	lt
 8008134:	9204      	strlt	r2, [sp, #16]
 8008136:	7823      	ldrb	r3, [r4, #0]
 8008138:	2b2e      	cmp	r3, #46	; 0x2e
 800813a:	d10c      	bne.n	8008156 <_vfiprintf_r+0x176>
 800813c:	7863      	ldrb	r3, [r4, #1]
 800813e:	2b2a      	cmp	r3, #42	; 0x2a
 8008140:	d135      	bne.n	80081ae <_vfiprintf_r+0x1ce>
 8008142:	9b03      	ldr	r3, [sp, #12]
 8008144:	1d1a      	adds	r2, r3, #4
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	9203      	str	r2, [sp, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	bfb8      	it	lt
 800814e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008152:	3402      	adds	r4, #2
 8008154:	9305      	str	r3, [sp, #20]
 8008156:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800823c <_vfiprintf_r+0x25c>
 800815a:	7821      	ldrb	r1, [r4, #0]
 800815c:	2203      	movs	r2, #3
 800815e:	4650      	mov	r0, sl
 8008160:	f7f8 f856 	bl	8000210 <memchr>
 8008164:	b140      	cbz	r0, 8008178 <_vfiprintf_r+0x198>
 8008166:	2340      	movs	r3, #64	; 0x40
 8008168:	eba0 000a 	sub.w	r0, r0, sl
 800816c:	fa03 f000 	lsl.w	r0, r3, r0
 8008170:	9b04      	ldr	r3, [sp, #16]
 8008172:	4303      	orrs	r3, r0
 8008174:	3401      	adds	r4, #1
 8008176:	9304      	str	r3, [sp, #16]
 8008178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817c:	482c      	ldr	r0, [pc, #176]	; (8008230 <_vfiprintf_r+0x250>)
 800817e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008182:	2206      	movs	r2, #6
 8008184:	f7f8 f844 	bl	8000210 <memchr>
 8008188:	2800      	cmp	r0, #0
 800818a:	d03f      	beq.n	800820c <_vfiprintf_r+0x22c>
 800818c:	4b29      	ldr	r3, [pc, #164]	; (8008234 <_vfiprintf_r+0x254>)
 800818e:	bb1b      	cbnz	r3, 80081d8 <_vfiprintf_r+0x1f8>
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	3307      	adds	r3, #7
 8008194:	f023 0307 	bic.w	r3, r3, #7
 8008198:	3308      	adds	r3, #8
 800819a:	9303      	str	r3, [sp, #12]
 800819c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819e:	443b      	add	r3, r7
 80081a0:	9309      	str	r3, [sp, #36]	; 0x24
 80081a2:	e767      	b.n	8008074 <_vfiprintf_r+0x94>
 80081a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80081a8:	460c      	mov	r4, r1
 80081aa:	2001      	movs	r0, #1
 80081ac:	e7a5      	b.n	80080fa <_vfiprintf_r+0x11a>
 80081ae:	2300      	movs	r3, #0
 80081b0:	3401      	adds	r4, #1
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	4619      	mov	r1, r3
 80081b6:	f04f 0c0a 	mov.w	ip, #10
 80081ba:	4620      	mov	r0, r4
 80081bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c0:	3a30      	subs	r2, #48	; 0x30
 80081c2:	2a09      	cmp	r2, #9
 80081c4:	d903      	bls.n	80081ce <_vfiprintf_r+0x1ee>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0c5      	beq.n	8008156 <_vfiprintf_r+0x176>
 80081ca:	9105      	str	r1, [sp, #20]
 80081cc:	e7c3      	b.n	8008156 <_vfiprintf_r+0x176>
 80081ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80081d2:	4604      	mov	r4, r0
 80081d4:	2301      	movs	r3, #1
 80081d6:	e7f0      	b.n	80081ba <_vfiprintf_r+0x1da>
 80081d8:	ab03      	add	r3, sp, #12
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	462a      	mov	r2, r5
 80081de:	4b16      	ldr	r3, [pc, #88]	; (8008238 <_vfiprintf_r+0x258>)
 80081e0:	a904      	add	r1, sp, #16
 80081e2:	4630      	mov	r0, r6
 80081e4:	f3af 8000 	nop.w
 80081e8:	4607      	mov	r7, r0
 80081ea:	1c78      	adds	r0, r7, #1
 80081ec:	d1d6      	bne.n	800819c <_vfiprintf_r+0x1bc>
 80081ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081f0:	07d9      	lsls	r1, r3, #31
 80081f2:	d405      	bmi.n	8008200 <_vfiprintf_r+0x220>
 80081f4:	89ab      	ldrh	r3, [r5, #12]
 80081f6:	059a      	lsls	r2, r3, #22
 80081f8:	d402      	bmi.n	8008200 <_vfiprintf_r+0x220>
 80081fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081fc:	f7ff fd7f 	bl	8007cfe <__retarget_lock_release_recursive>
 8008200:	89ab      	ldrh	r3, [r5, #12]
 8008202:	065b      	lsls	r3, r3, #25
 8008204:	f53f af12 	bmi.w	800802c <_vfiprintf_r+0x4c>
 8008208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800820a:	e711      	b.n	8008030 <_vfiprintf_r+0x50>
 800820c:	ab03      	add	r3, sp, #12
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	462a      	mov	r2, r5
 8008212:	4b09      	ldr	r3, [pc, #36]	; (8008238 <_vfiprintf_r+0x258>)
 8008214:	a904      	add	r1, sp, #16
 8008216:	4630      	mov	r0, r6
 8008218:	f000 f880 	bl	800831c <_printf_i>
 800821c:	e7e4      	b.n	80081e8 <_vfiprintf_r+0x208>
 800821e:	bf00      	nop
 8008220:	08008904 	.word	0x08008904
 8008224:	08008924 	.word	0x08008924
 8008228:	080088e4 	.word	0x080088e4
 800822c:	08008944 	.word	0x08008944
 8008230:	0800894e 	.word	0x0800894e
 8008234:	00000000 	.word	0x00000000
 8008238:	08007fbb 	.word	0x08007fbb
 800823c:	0800894a 	.word	0x0800894a

08008240 <_printf_common>:
 8008240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008244:	4616      	mov	r6, r2
 8008246:	4699      	mov	r9, r3
 8008248:	688a      	ldr	r2, [r1, #8]
 800824a:	690b      	ldr	r3, [r1, #16]
 800824c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008250:	4293      	cmp	r3, r2
 8008252:	bfb8      	it	lt
 8008254:	4613      	movlt	r3, r2
 8008256:	6033      	str	r3, [r6, #0]
 8008258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800825c:	4607      	mov	r7, r0
 800825e:	460c      	mov	r4, r1
 8008260:	b10a      	cbz	r2, 8008266 <_printf_common+0x26>
 8008262:	3301      	adds	r3, #1
 8008264:	6033      	str	r3, [r6, #0]
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	0699      	lsls	r1, r3, #26
 800826a:	bf42      	ittt	mi
 800826c:	6833      	ldrmi	r3, [r6, #0]
 800826e:	3302      	addmi	r3, #2
 8008270:	6033      	strmi	r3, [r6, #0]
 8008272:	6825      	ldr	r5, [r4, #0]
 8008274:	f015 0506 	ands.w	r5, r5, #6
 8008278:	d106      	bne.n	8008288 <_printf_common+0x48>
 800827a:	f104 0a19 	add.w	sl, r4, #25
 800827e:	68e3      	ldr	r3, [r4, #12]
 8008280:	6832      	ldr	r2, [r6, #0]
 8008282:	1a9b      	subs	r3, r3, r2
 8008284:	42ab      	cmp	r3, r5
 8008286:	dc26      	bgt.n	80082d6 <_printf_common+0x96>
 8008288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800828c:	1e13      	subs	r3, r2, #0
 800828e:	6822      	ldr	r2, [r4, #0]
 8008290:	bf18      	it	ne
 8008292:	2301      	movne	r3, #1
 8008294:	0692      	lsls	r2, r2, #26
 8008296:	d42b      	bmi.n	80082f0 <_printf_common+0xb0>
 8008298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800829c:	4649      	mov	r1, r9
 800829e:	4638      	mov	r0, r7
 80082a0:	47c0      	blx	r8
 80082a2:	3001      	adds	r0, #1
 80082a4:	d01e      	beq.n	80082e4 <_printf_common+0xa4>
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	68e5      	ldr	r5, [r4, #12]
 80082aa:	6832      	ldr	r2, [r6, #0]
 80082ac:	f003 0306 	and.w	r3, r3, #6
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	bf08      	it	eq
 80082b4:	1aad      	subeq	r5, r5, r2
 80082b6:	68a3      	ldr	r3, [r4, #8]
 80082b8:	6922      	ldr	r2, [r4, #16]
 80082ba:	bf0c      	ite	eq
 80082bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082c0:	2500      	movne	r5, #0
 80082c2:	4293      	cmp	r3, r2
 80082c4:	bfc4      	itt	gt
 80082c6:	1a9b      	subgt	r3, r3, r2
 80082c8:	18ed      	addgt	r5, r5, r3
 80082ca:	2600      	movs	r6, #0
 80082cc:	341a      	adds	r4, #26
 80082ce:	42b5      	cmp	r5, r6
 80082d0:	d11a      	bne.n	8008308 <_printf_common+0xc8>
 80082d2:	2000      	movs	r0, #0
 80082d4:	e008      	b.n	80082e8 <_printf_common+0xa8>
 80082d6:	2301      	movs	r3, #1
 80082d8:	4652      	mov	r2, sl
 80082da:	4649      	mov	r1, r9
 80082dc:	4638      	mov	r0, r7
 80082de:	47c0      	blx	r8
 80082e0:	3001      	adds	r0, #1
 80082e2:	d103      	bne.n	80082ec <_printf_common+0xac>
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295
 80082e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ec:	3501      	adds	r5, #1
 80082ee:	e7c6      	b.n	800827e <_printf_common+0x3e>
 80082f0:	18e1      	adds	r1, r4, r3
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	2030      	movs	r0, #48	; 0x30
 80082f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082fa:	4422      	add	r2, r4
 80082fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008304:	3302      	adds	r3, #2
 8008306:	e7c7      	b.n	8008298 <_printf_common+0x58>
 8008308:	2301      	movs	r3, #1
 800830a:	4622      	mov	r2, r4
 800830c:	4649      	mov	r1, r9
 800830e:	4638      	mov	r0, r7
 8008310:	47c0      	blx	r8
 8008312:	3001      	adds	r0, #1
 8008314:	d0e6      	beq.n	80082e4 <_printf_common+0xa4>
 8008316:	3601      	adds	r6, #1
 8008318:	e7d9      	b.n	80082ce <_printf_common+0x8e>
	...

0800831c <_printf_i>:
 800831c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008320:	7e0f      	ldrb	r7, [r1, #24]
 8008322:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008324:	2f78      	cmp	r7, #120	; 0x78
 8008326:	4691      	mov	r9, r2
 8008328:	4680      	mov	r8, r0
 800832a:	460c      	mov	r4, r1
 800832c:	469a      	mov	sl, r3
 800832e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008332:	d807      	bhi.n	8008344 <_printf_i+0x28>
 8008334:	2f62      	cmp	r7, #98	; 0x62
 8008336:	d80a      	bhi.n	800834e <_printf_i+0x32>
 8008338:	2f00      	cmp	r7, #0
 800833a:	f000 80d8 	beq.w	80084ee <_printf_i+0x1d2>
 800833e:	2f58      	cmp	r7, #88	; 0x58
 8008340:	f000 80a3 	beq.w	800848a <_printf_i+0x16e>
 8008344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800834c:	e03a      	b.n	80083c4 <_printf_i+0xa8>
 800834e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008352:	2b15      	cmp	r3, #21
 8008354:	d8f6      	bhi.n	8008344 <_printf_i+0x28>
 8008356:	a101      	add	r1, pc, #4	; (adr r1, 800835c <_printf_i+0x40>)
 8008358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800835c:	080083b5 	.word	0x080083b5
 8008360:	080083c9 	.word	0x080083c9
 8008364:	08008345 	.word	0x08008345
 8008368:	08008345 	.word	0x08008345
 800836c:	08008345 	.word	0x08008345
 8008370:	08008345 	.word	0x08008345
 8008374:	080083c9 	.word	0x080083c9
 8008378:	08008345 	.word	0x08008345
 800837c:	08008345 	.word	0x08008345
 8008380:	08008345 	.word	0x08008345
 8008384:	08008345 	.word	0x08008345
 8008388:	080084d5 	.word	0x080084d5
 800838c:	080083f9 	.word	0x080083f9
 8008390:	080084b7 	.word	0x080084b7
 8008394:	08008345 	.word	0x08008345
 8008398:	08008345 	.word	0x08008345
 800839c:	080084f7 	.word	0x080084f7
 80083a0:	08008345 	.word	0x08008345
 80083a4:	080083f9 	.word	0x080083f9
 80083a8:	08008345 	.word	0x08008345
 80083ac:	08008345 	.word	0x08008345
 80083b0:	080084bf 	.word	0x080084bf
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	1d1a      	adds	r2, r3, #4
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	602a      	str	r2, [r5, #0]
 80083bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083c4:	2301      	movs	r3, #1
 80083c6:	e0a3      	b.n	8008510 <_printf_i+0x1f4>
 80083c8:	6820      	ldr	r0, [r4, #0]
 80083ca:	6829      	ldr	r1, [r5, #0]
 80083cc:	0606      	lsls	r6, r0, #24
 80083ce:	f101 0304 	add.w	r3, r1, #4
 80083d2:	d50a      	bpl.n	80083ea <_printf_i+0xce>
 80083d4:	680e      	ldr	r6, [r1, #0]
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	2e00      	cmp	r6, #0
 80083da:	da03      	bge.n	80083e4 <_printf_i+0xc8>
 80083dc:	232d      	movs	r3, #45	; 0x2d
 80083de:	4276      	negs	r6, r6
 80083e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e4:	485e      	ldr	r0, [pc, #376]	; (8008560 <_printf_i+0x244>)
 80083e6:	230a      	movs	r3, #10
 80083e8:	e019      	b.n	800841e <_printf_i+0x102>
 80083ea:	680e      	ldr	r6, [r1, #0]
 80083ec:	602b      	str	r3, [r5, #0]
 80083ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083f2:	bf18      	it	ne
 80083f4:	b236      	sxthne	r6, r6
 80083f6:	e7ef      	b.n	80083d8 <_printf_i+0xbc>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	6820      	ldr	r0, [r4, #0]
 80083fc:	1d19      	adds	r1, r3, #4
 80083fe:	6029      	str	r1, [r5, #0]
 8008400:	0601      	lsls	r1, r0, #24
 8008402:	d501      	bpl.n	8008408 <_printf_i+0xec>
 8008404:	681e      	ldr	r6, [r3, #0]
 8008406:	e002      	b.n	800840e <_printf_i+0xf2>
 8008408:	0646      	lsls	r6, r0, #25
 800840a:	d5fb      	bpl.n	8008404 <_printf_i+0xe8>
 800840c:	881e      	ldrh	r6, [r3, #0]
 800840e:	4854      	ldr	r0, [pc, #336]	; (8008560 <_printf_i+0x244>)
 8008410:	2f6f      	cmp	r7, #111	; 0x6f
 8008412:	bf0c      	ite	eq
 8008414:	2308      	moveq	r3, #8
 8008416:	230a      	movne	r3, #10
 8008418:	2100      	movs	r1, #0
 800841a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800841e:	6865      	ldr	r5, [r4, #4]
 8008420:	60a5      	str	r5, [r4, #8]
 8008422:	2d00      	cmp	r5, #0
 8008424:	bfa2      	ittt	ge
 8008426:	6821      	ldrge	r1, [r4, #0]
 8008428:	f021 0104 	bicge.w	r1, r1, #4
 800842c:	6021      	strge	r1, [r4, #0]
 800842e:	b90e      	cbnz	r6, 8008434 <_printf_i+0x118>
 8008430:	2d00      	cmp	r5, #0
 8008432:	d04d      	beq.n	80084d0 <_printf_i+0x1b4>
 8008434:	4615      	mov	r5, r2
 8008436:	fbb6 f1f3 	udiv	r1, r6, r3
 800843a:	fb03 6711 	mls	r7, r3, r1, r6
 800843e:	5dc7      	ldrb	r7, [r0, r7]
 8008440:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008444:	4637      	mov	r7, r6
 8008446:	42bb      	cmp	r3, r7
 8008448:	460e      	mov	r6, r1
 800844a:	d9f4      	bls.n	8008436 <_printf_i+0x11a>
 800844c:	2b08      	cmp	r3, #8
 800844e:	d10b      	bne.n	8008468 <_printf_i+0x14c>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	07de      	lsls	r6, r3, #31
 8008454:	d508      	bpl.n	8008468 <_printf_i+0x14c>
 8008456:	6923      	ldr	r3, [r4, #16]
 8008458:	6861      	ldr	r1, [r4, #4]
 800845a:	4299      	cmp	r1, r3
 800845c:	bfde      	ittt	le
 800845e:	2330      	movle	r3, #48	; 0x30
 8008460:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008464:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008468:	1b52      	subs	r2, r2, r5
 800846a:	6122      	str	r2, [r4, #16]
 800846c:	f8cd a000 	str.w	sl, [sp]
 8008470:	464b      	mov	r3, r9
 8008472:	aa03      	add	r2, sp, #12
 8008474:	4621      	mov	r1, r4
 8008476:	4640      	mov	r0, r8
 8008478:	f7ff fee2 	bl	8008240 <_printf_common>
 800847c:	3001      	adds	r0, #1
 800847e:	d14c      	bne.n	800851a <_printf_i+0x1fe>
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	b004      	add	sp, #16
 8008486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848a:	4835      	ldr	r0, [pc, #212]	; (8008560 <_printf_i+0x244>)
 800848c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008490:	6829      	ldr	r1, [r5, #0]
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	f851 6b04 	ldr.w	r6, [r1], #4
 8008498:	6029      	str	r1, [r5, #0]
 800849a:	061d      	lsls	r5, r3, #24
 800849c:	d514      	bpl.n	80084c8 <_printf_i+0x1ac>
 800849e:	07df      	lsls	r7, r3, #31
 80084a0:	bf44      	itt	mi
 80084a2:	f043 0320 	orrmi.w	r3, r3, #32
 80084a6:	6023      	strmi	r3, [r4, #0]
 80084a8:	b91e      	cbnz	r6, 80084b2 <_printf_i+0x196>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	f023 0320 	bic.w	r3, r3, #32
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	2310      	movs	r3, #16
 80084b4:	e7b0      	b.n	8008418 <_printf_i+0xfc>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	f043 0320 	orr.w	r3, r3, #32
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	2378      	movs	r3, #120	; 0x78
 80084c0:	4828      	ldr	r0, [pc, #160]	; (8008564 <_printf_i+0x248>)
 80084c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084c6:	e7e3      	b.n	8008490 <_printf_i+0x174>
 80084c8:	0659      	lsls	r1, r3, #25
 80084ca:	bf48      	it	mi
 80084cc:	b2b6      	uxthmi	r6, r6
 80084ce:	e7e6      	b.n	800849e <_printf_i+0x182>
 80084d0:	4615      	mov	r5, r2
 80084d2:	e7bb      	b.n	800844c <_printf_i+0x130>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	6826      	ldr	r6, [r4, #0]
 80084d8:	6961      	ldr	r1, [r4, #20]
 80084da:	1d18      	adds	r0, r3, #4
 80084dc:	6028      	str	r0, [r5, #0]
 80084de:	0635      	lsls	r5, r6, #24
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	d501      	bpl.n	80084e8 <_printf_i+0x1cc>
 80084e4:	6019      	str	r1, [r3, #0]
 80084e6:	e002      	b.n	80084ee <_printf_i+0x1d2>
 80084e8:	0670      	lsls	r0, r6, #25
 80084ea:	d5fb      	bpl.n	80084e4 <_printf_i+0x1c8>
 80084ec:	8019      	strh	r1, [r3, #0]
 80084ee:	2300      	movs	r3, #0
 80084f0:	6123      	str	r3, [r4, #16]
 80084f2:	4615      	mov	r5, r2
 80084f4:	e7ba      	b.n	800846c <_printf_i+0x150>
 80084f6:	682b      	ldr	r3, [r5, #0]
 80084f8:	1d1a      	adds	r2, r3, #4
 80084fa:	602a      	str	r2, [r5, #0]
 80084fc:	681d      	ldr	r5, [r3, #0]
 80084fe:	6862      	ldr	r2, [r4, #4]
 8008500:	2100      	movs	r1, #0
 8008502:	4628      	mov	r0, r5
 8008504:	f7f7 fe84 	bl	8000210 <memchr>
 8008508:	b108      	cbz	r0, 800850e <_printf_i+0x1f2>
 800850a:	1b40      	subs	r0, r0, r5
 800850c:	6060      	str	r0, [r4, #4]
 800850e:	6863      	ldr	r3, [r4, #4]
 8008510:	6123      	str	r3, [r4, #16]
 8008512:	2300      	movs	r3, #0
 8008514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008518:	e7a8      	b.n	800846c <_printf_i+0x150>
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	462a      	mov	r2, r5
 800851e:	4649      	mov	r1, r9
 8008520:	4640      	mov	r0, r8
 8008522:	47d0      	blx	sl
 8008524:	3001      	adds	r0, #1
 8008526:	d0ab      	beq.n	8008480 <_printf_i+0x164>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	079b      	lsls	r3, r3, #30
 800852c:	d413      	bmi.n	8008556 <_printf_i+0x23a>
 800852e:	68e0      	ldr	r0, [r4, #12]
 8008530:	9b03      	ldr	r3, [sp, #12]
 8008532:	4298      	cmp	r0, r3
 8008534:	bfb8      	it	lt
 8008536:	4618      	movlt	r0, r3
 8008538:	e7a4      	b.n	8008484 <_printf_i+0x168>
 800853a:	2301      	movs	r3, #1
 800853c:	4632      	mov	r2, r6
 800853e:	4649      	mov	r1, r9
 8008540:	4640      	mov	r0, r8
 8008542:	47d0      	blx	sl
 8008544:	3001      	adds	r0, #1
 8008546:	d09b      	beq.n	8008480 <_printf_i+0x164>
 8008548:	3501      	adds	r5, #1
 800854a:	68e3      	ldr	r3, [r4, #12]
 800854c:	9903      	ldr	r1, [sp, #12]
 800854e:	1a5b      	subs	r3, r3, r1
 8008550:	42ab      	cmp	r3, r5
 8008552:	dcf2      	bgt.n	800853a <_printf_i+0x21e>
 8008554:	e7eb      	b.n	800852e <_printf_i+0x212>
 8008556:	2500      	movs	r5, #0
 8008558:	f104 0619 	add.w	r6, r4, #25
 800855c:	e7f5      	b.n	800854a <_printf_i+0x22e>
 800855e:	bf00      	nop
 8008560:	08008955 	.word	0x08008955
 8008564:	08008966 	.word	0x08008966

08008568 <_sbrk_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d06      	ldr	r5, [pc, #24]	; (8008584 <_sbrk_r+0x1c>)
 800856c:	2300      	movs	r3, #0
 800856e:	4604      	mov	r4, r0
 8008570:	4608      	mov	r0, r1
 8008572:	602b      	str	r3, [r5, #0]
 8008574:	f7f8 fbc8 	bl	8000d08 <_sbrk>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d102      	bne.n	8008582 <_sbrk_r+0x1a>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	b103      	cbz	r3, 8008582 <_sbrk_r+0x1a>
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	200022a4 	.word	0x200022a4

08008588 <__sread>:
 8008588:	b510      	push	{r4, lr}
 800858a:	460c      	mov	r4, r1
 800858c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008590:	f000 f8a0 	bl	80086d4 <_read_r>
 8008594:	2800      	cmp	r0, #0
 8008596:	bfab      	itete	ge
 8008598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800859a:	89a3      	ldrhlt	r3, [r4, #12]
 800859c:	181b      	addge	r3, r3, r0
 800859e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085a2:	bfac      	ite	ge
 80085a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80085a6:	81a3      	strhlt	r3, [r4, #12]
 80085a8:	bd10      	pop	{r4, pc}

080085aa <__swrite>:
 80085aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ae:	461f      	mov	r7, r3
 80085b0:	898b      	ldrh	r3, [r1, #12]
 80085b2:	05db      	lsls	r3, r3, #23
 80085b4:	4605      	mov	r5, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	4616      	mov	r6, r2
 80085ba:	d505      	bpl.n	80085c8 <__swrite+0x1e>
 80085bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c0:	2302      	movs	r3, #2
 80085c2:	2200      	movs	r2, #0
 80085c4:	f000 f868 	bl	8008698 <_lseek_r>
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085d2:	81a3      	strh	r3, [r4, #12]
 80085d4:	4632      	mov	r2, r6
 80085d6:	463b      	mov	r3, r7
 80085d8:	4628      	mov	r0, r5
 80085da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085de:	f000 b817 	b.w	8008610 <_write_r>

080085e2 <__sseek>:
 80085e2:	b510      	push	{r4, lr}
 80085e4:	460c      	mov	r4, r1
 80085e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ea:	f000 f855 	bl	8008698 <_lseek_r>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	89a3      	ldrh	r3, [r4, #12]
 80085f2:	bf15      	itete	ne
 80085f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80085f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085fe:	81a3      	strheq	r3, [r4, #12]
 8008600:	bf18      	it	ne
 8008602:	81a3      	strhne	r3, [r4, #12]
 8008604:	bd10      	pop	{r4, pc}

08008606 <__sclose>:
 8008606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800860a:	f000 b813 	b.w	8008634 <_close_r>
	...

08008610 <_write_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4d07      	ldr	r5, [pc, #28]	; (8008630 <_write_r+0x20>)
 8008614:	4604      	mov	r4, r0
 8008616:	4608      	mov	r0, r1
 8008618:	4611      	mov	r1, r2
 800861a:	2200      	movs	r2, #0
 800861c:	602a      	str	r2, [r5, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	f7f7 ffef 	bl	8000602 <_write>
 8008624:	1c43      	adds	r3, r0, #1
 8008626:	d102      	bne.n	800862e <_write_r+0x1e>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	b103      	cbz	r3, 800862e <_write_r+0x1e>
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	bd38      	pop	{r3, r4, r5, pc}
 8008630:	200022a4 	.word	0x200022a4

08008634 <_close_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4d06      	ldr	r5, [pc, #24]	; (8008650 <_close_r+0x1c>)
 8008638:	2300      	movs	r3, #0
 800863a:	4604      	mov	r4, r0
 800863c:	4608      	mov	r0, r1
 800863e:	602b      	str	r3, [r5, #0]
 8008640:	f7f8 fb2d 	bl	8000c9e <_close>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_close_r+0x1a>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_close_r+0x1a>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	200022a4 	.word	0x200022a4

08008654 <_fstat_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4d07      	ldr	r5, [pc, #28]	; (8008674 <_fstat_r+0x20>)
 8008658:	2300      	movs	r3, #0
 800865a:	4604      	mov	r4, r0
 800865c:	4608      	mov	r0, r1
 800865e:	4611      	mov	r1, r2
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	f7f8 fb28 	bl	8000cb6 <_fstat>
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	d102      	bne.n	8008670 <_fstat_r+0x1c>
 800866a:	682b      	ldr	r3, [r5, #0]
 800866c:	b103      	cbz	r3, 8008670 <_fstat_r+0x1c>
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	bd38      	pop	{r3, r4, r5, pc}
 8008672:	bf00      	nop
 8008674:	200022a4 	.word	0x200022a4

08008678 <_isatty_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4d06      	ldr	r5, [pc, #24]	; (8008694 <_isatty_r+0x1c>)
 800867c:	2300      	movs	r3, #0
 800867e:	4604      	mov	r4, r0
 8008680:	4608      	mov	r0, r1
 8008682:	602b      	str	r3, [r5, #0]
 8008684:	f7f8 fb27 	bl	8000cd6 <_isatty>
 8008688:	1c43      	adds	r3, r0, #1
 800868a:	d102      	bne.n	8008692 <_isatty_r+0x1a>
 800868c:	682b      	ldr	r3, [r5, #0]
 800868e:	b103      	cbz	r3, 8008692 <_isatty_r+0x1a>
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	200022a4 	.word	0x200022a4

08008698 <_lseek_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d07      	ldr	r5, [pc, #28]	; (80086b8 <_lseek_r+0x20>)
 800869c:	4604      	mov	r4, r0
 800869e:	4608      	mov	r0, r1
 80086a0:	4611      	mov	r1, r2
 80086a2:	2200      	movs	r2, #0
 80086a4:	602a      	str	r2, [r5, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	f7f8 fb20 	bl	8000cec <_lseek>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d102      	bne.n	80086b6 <_lseek_r+0x1e>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	b103      	cbz	r3, 80086b6 <_lseek_r+0x1e>
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	bd38      	pop	{r3, r4, r5, pc}
 80086b8:	200022a4 	.word	0x200022a4

080086bc <__malloc_lock>:
 80086bc:	4801      	ldr	r0, [pc, #4]	; (80086c4 <__malloc_lock+0x8>)
 80086be:	f7ff bb1d 	b.w	8007cfc <__retarget_lock_acquire_recursive>
 80086c2:	bf00      	nop
 80086c4:	20002298 	.word	0x20002298

080086c8 <__malloc_unlock>:
 80086c8:	4801      	ldr	r0, [pc, #4]	; (80086d0 <__malloc_unlock+0x8>)
 80086ca:	f7ff bb18 	b.w	8007cfe <__retarget_lock_release_recursive>
 80086ce:	bf00      	nop
 80086d0:	20002298 	.word	0x20002298

080086d4 <_read_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4d07      	ldr	r5, [pc, #28]	; (80086f4 <_read_r+0x20>)
 80086d8:	4604      	mov	r4, r0
 80086da:	4608      	mov	r0, r1
 80086dc:	4611      	mov	r1, r2
 80086de:	2200      	movs	r2, #0
 80086e0:	602a      	str	r2, [r5, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	f7f8 fabe 	bl	8000c64 <_read>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_read_r+0x1e>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_read_r+0x1e>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	200022a4 	.word	0x200022a4

080086f8 <_init>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr

08008704 <_fini>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr
