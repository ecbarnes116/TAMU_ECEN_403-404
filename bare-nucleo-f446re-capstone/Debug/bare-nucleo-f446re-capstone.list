
bare-nucleo-f446re-capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b78  08005b78  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005b78  08005b78  00015b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b80  08005b80  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041ac  20000088  08005c10  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004234  08005c10  00024234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f414  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bb  00000000  00000000  0002f4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00031e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00032b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024937  00000000  00000000  000336f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ff2  00000000  00000000  00058027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8f31  00000000  00000000  00069019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141f4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa0  00000000  00000000  00141f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a8c 	.word	0x08005a8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08005a8c 	.word	0x08005a8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <SELECT+0x1c>)
 80005c0:	f002 fc96 	bl	8002ef0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f001 fa4b 	bl	8001a60 <HAL_Delay>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020400 	.word	0x40020400

080005d4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <DESELECT+0x1c>)
 80005e0:	f002 fc86 	bl	8002ef0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f001 fa3b 	bl	8001a60 <HAL_Delay>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020400 	.word	0x40020400

080005f4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005fe:	bf00      	nop
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <SPI_TxByte+0x30>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	2b02      	cmp	r3, #2
 800060c:	d1f8      	bne.n	8000600 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800060e:	1df9      	adds	r1, r7, #7
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	2201      	movs	r2, #1
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <SPI_TxByte+0x30>)
 8000616:	f003 fb46 	bl	8003ca6 <HAL_SPI_Transmit>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000150 	.word	0x20000150

08000628 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000634:	bf00      	nop
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <SPI_TxBuffer+0x30>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f003 0302 	and.w	r3, r3, #2
 8000640:	2b02      	cmp	r3, #2
 8000642:	d1f8      	bne.n	8000636 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000644:	887a      	ldrh	r2, [r7, #2]
 8000646:	2364      	movs	r3, #100	; 0x64
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <SPI_TxBuffer+0x30>)
 800064c:	f003 fb2b 	bl	8003ca6 <HAL_SPI_Transmit>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000150 	.word	0x20000150

0800065c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000662:	23ff      	movs	r3, #255	; 0xff
 8000664:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000666:	bf00      	nop
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <SPI_RxByte+0x34>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	2b02      	cmp	r3, #2
 8000674:	d1f8      	bne.n	8000668 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000676:	1dba      	adds	r2, r7, #6
 8000678:	1df9      	adds	r1, r7, #7
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <SPI_RxByte+0x34>)
 8000682:	f003 fc4c 	bl	8003f1e <HAL_SPI_TransmitReceive>

	return data;
 8000686:	79bb      	ldrb	r3, [r7, #6]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000150 	.word	0x20000150

08000694 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800069c:	f7ff ffde 	bl	800065c <SPI_RxByte>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	701a      	strb	r2, [r3, #0]
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <SD_ReadyWait+0x30>)
 80006b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006bc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006be:	f7ff ffcd 	bl	800065c <SPI_RxByte>
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2bff      	cmp	r3, #255	; 0xff
 80006ca:	d004      	beq.n	80006d6 <SD_ReadyWait+0x26>
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <SD_ReadyWait+0x30>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f3      	bne.n	80006be <SD_ReadyWait+0xe>

	return res;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20004207 	.word	0x20004207

080006e4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006ea:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006ee:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006f0:	f7ff ff70 	bl	80005d4 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	e005      	b.n	8000706 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006fa:	20ff      	movs	r0, #255	; 0xff
 80006fc:	f7ff ff7a 	bl	80005f4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	2b09      	cmp	r3, #9
 800070a:	ddf6      	ble.n	80006fa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800070c:	f7ff ff52 	bl	80005b4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000710:	2340      	movs	r3, #64	; 0x40
 8000712:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000724:	2395      	movs	r3, #149	; 0x95
 8000726:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000728:	463b      	mov	r3, r7
 800072a:	2106      	movs	r1, #6
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff7b 	bl	8000628 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000732:	e002      	b.n	800073a <SD_PowerOn+0x56>
	{
		cnt--;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3b01      	subs	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800073a:	f7ff ff8f 	bl	800065c <SPI_RxByte>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d002      	beq.n	800074a <SD_PowerOn+0x66>
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f4      	bne.n	8000734 <SD_PowerOn+0x50>
	}

	DESELECT();
 800074a:	f7ff ff43 	bl	80005d4 <DESELECT>
	SPI_TxByte(0XFF);
 800074e:	20ff      	movs	r0, #255	; 0xff
 8000750:	f7ff ff50 	bl	80005f4 <SPI_TxByte>

	PowerFlag = 1;
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <SD_PowerOn+0x80>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000a5 	.word	0x200000a5

08000768 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <SD_PowerOff+0x14>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	200000a5 	.word	0x200000a5

08000780 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <SD_CheckPower+0x14>)
 8000786:	781b      	ldrb	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	200000a5 	.word	0x200000a5

08000798 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <SD_RxDataBlock+0x5c>)
 80007a4:	22c8      	movs	r2, #200	; 0xc8
 80007a6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80007a8:	f7ff ff58 	bl	800065c <SPI_RxByte>
 80007ac:	4603      	mov	r3, r0
 80007ae:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	2bff      	cmp	r3, #255	; 0xff
 80007b4:	d104      	bne.n	80007c0 <SD_RxDataBlock+0x28>
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <SD_RxDataBlock+0x5c>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f3      	bne.n	80007a8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2bfe      	cmp	r3, #254	; 0xfe
 80007c4:	d001      	beq.n	80007ca <SD_RxDataBlock+0x32>
 80007c6:	2300      	movs	r3, #0
 80007c8:	e00f      	b.n	80007ea <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5f 	bl	8000694 <SPI_RxBytePtr>
	} while(len--);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	603a      	str	r2, [r7, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f4      	bne.n	80007ca <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80007e0:	f7ff ff3c 	bl	800065c <SPI_RxByte>
	SPI_RxByte();
 80007e4:	f7ff ff3a 	bl	800065c <SPI_RxByte>

	return TRUE;
 80007e8:	2301      	movs	r3, #1
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20004206 	.word	0x20004206

080007f8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000808:	f7ff ff52 	bl	80006b0 <SD_ReadyWait>
 800080c:	4603      	mov	r3, r0
 800080e:	2bff      	cmp	r3, #255	; 0xff
 8000810:	d001      	beq.n	8000816 <SD_TxDataBlock+0x1e>
 8000812:	2300      	movs	r3, #0
 8000814:	e02f      	b.n	8000876 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff feeb 	bl	80005f4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800081e:	78fb      	ldrb	r3, [r7, #3]
 8000820:	2bfd      	cmp	r3, #253	; 0xfd
 8000822:	d020      	beq.n	8000866 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff fefd 	bl	8000628 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800082e:	f7ff ff15 	bl	800065c <SPI_RxByte>
		SPI_RxByte();
 8000832:	f7ff ff13 	bl	800065c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000836:	e00b      	b.n	8000850 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000838:	f7ff ff10 	bl	800065c <SPI_RxByte>
 800083c:	4603      	mov	r3, r0
 800083e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	f003 031f 	and.w	r3, r3, #31
 8000846:	2b05      	cmp	r3, #5
 8000848:	d006      	beq.n	8000858 <SD_TxDataBlock+0x60>
			i++;
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	3301      	adds	r3, #1
 800084e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000850:	7bbb      	ldrb	r3, [r7, #14]
 8000852:	2b40      	cmp	r3, #64	; 0x40
 8000854:	d9f0      	bls.n	8000838 <SD_TxDataBlock+0x40>
 8000856:	e000      	b.n	800085a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000858:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800085a:	bf00      	nop
 800085c:	f7ff fefe 	bl	800065c <SPI_RxByte>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0fa      	beq.n	800085c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	f003 031f 	and.w	r3, r3, #31
 800086c:	2b05      	cmp	r3, #5
 800086e:	d101      	bne.n	8000874 <SD_TxDataBlock+0x7c>
 8000870:	2301      	movs	r3, #1
 8000872:	e000      	b.n	8000876 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	6039      	str	r1, [r7, #0]
 8000888:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800088a:	f7ff ff11 	bl	80006b0 <SD_ReadyWait>
 800088e:	4603      	mov	r3, r0
 8000890:	2bff      	cmp	r3, #255	; 0xff
 8000892:	d001      	beq.n	8000898 <SD_SendCmd+0x1a>
 8000894:	23ff      	movs	r3, #255	; 0xff
 8000896:	e042      	b.n	800091e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff feaa 	bl	80005f4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	0e1b      	lsrs	r3, r3, #24
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fea4 	bl	80005f4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	0c1b      	lsrs	r3, r3, #16
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fe9e 	bl	80005f4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fe98 	bl	80005f4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe93 	bl	80005f4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b40      	cmp	r3, #64	; 0x40
 80008d2:	d102      	bne.n	80008da <SD_SendCmd+0x5c>
 80008d4:	2395      	movs	r3, #149	; 0x95
 80008d6:	73fb      	strb	r3, [r7, #15]
 80008d8:	e007      	b.n	80008ea <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b48      	cmp	r3, #72	; 0x48
 80008de:	d102      	bne.n	80008e6 <SD_SendCmd+0x68>
 80008e0:	2387      	movs	r3, #135	; 0x87
 80008e2:	73fb      	strb	r3, [r7, #15]
 80008e4:	e001      	b.n	80008ea <SD_SendCmd+0x6c>
	else crc = 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe81 	bl	80005f4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b4c      	cmp	r3, #76	; 0x4c
 80008f6:	d101      	bne.n	80008fc <SD_SendCmd+0x7e>
 80008f8:	f7ff feb0 	bl	800065c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008fc:	230a      	movs	r3, #10
 80008fe:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000900:	f7ff feac 	bl	800065c <SPI_RxByte>
 8000904:	4603      	mov	r3, r0
 8000906:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000908:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800090c:	2b00      	cmp	r3, #0
 800090e:	da05      	bge.n	800091c <SD_SendCmd+0x9e>
 8000910:	7bbb      	ldrb	r3, [r7, #14]
 8000912:	3b01      	subs	r3, #1
 8000914:	73bb      	strb	r3, [r7, #14]
 8000916:	7bbb      	ldrb	r3, [r7, #14]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1f1      	bne.n	8000900 <SD_SendCmd+0x82>

	return res;
 800091c:	7b7b      	ldrb	r3, [r7, #13]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SD_disk_initialize+0x14>
 8000938:	2301      	movs	r3, #1
 800093a:	e0d6      	b.n	8000aea <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800093c:	4b6d      	ldr	r3, [pc, #436]	; (8000af4 <SD_disk_initialize+0x1cc>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <SD_disk_initialize+0x2a>
 800094a:	4b6a      	ldr	r3, [pc, #424]	; (8000af4 <SD_disk_initialize+0x1cc>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	e0cb      	b.n	8000aea <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000952:	f7ff fec7 	bl	80006e4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000956:	f7ff fe2d 	bl	80005b4 <SELECT>

	/* check disk type */
	type = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800095e:	2100      	movs	r1, #0
 8000960:	2040      	movs	r0, #64	; 0x40
 8000962:	f7ff ff8c 	bl	800087e <SD_SendCmd>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	f040 80a6 	bne.w	8000aba <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800096e:	4b62      	ldr	r3, [pc, #392]	; (8000af8 <SD_disk_initialize+0x1d0>)
 8000970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000974:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000976:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800097a:	2048      	movs	r0, #72	; 0x48
 800097c:	f7ff ff7f 	bl	800087e <SD_SendCmd>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d158      	bne.n	8000a38 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]
 800098a:	e00c      	b.n	80009a6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800098c:	7bfc      	ldrb	r4, [r7, #15]
 800098e:	f7ff fe65 	bl	800065c <SPI_RxByte>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	f104 0310 	add.w	r3, r4, #16
 800099a:	443b      	add	r3, r7
 800099c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	3301      	adds	r3, #1
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d9ef      	bls.n	800098c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009ac:	7abb      	ldrb	r3, [r7, #10]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	f040 8083 	bne.w	8000aba <SD_disk_initialize+0x192>
 80009b4:	7afb      	ldrb	r3, [r7, #11]
 80009b6:	2baa      	cmp	r3, #170	; 0xaa
 80009b8:	d17f      	bne.n	8000aba <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009ba:	2100      	movs	r1, #0
 80009bc:	2077      	movs	r0, #119	; 0x77
 80009be:	f7ff ff5e 	bl	800087e <SD_SendCmd>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d807      	bhi.n	80009d8 <SD_disk_initialize+0xb0>
 80009c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009cc:	2069      	movs	r0, #105	; 0x69
 80009ce:	f7ff ff56 	bl	800087e <SD_SendCmd>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d005      	beq.n	80009e4 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80009d8:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <SD_disk_initialize+0x1d0>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1eb      	bne.n	80009ba <SD_disk_initialize+0x92>
 80009e2:	e000      	b.n	80009e6 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009e4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009e6:	4b44      	ldr	r3, [pc, #272]	; (8000af8 <SD_disk_initialize+0x1d0>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d064      	beq.n	8000aba <SD_disk_initialize+0x192>
 80009f0:	2100      	movs	r1, #0
 80009f2:	207a      	movs	r0, #122	; 0x7a
 80009f4:	f7ff ff43 	bl	800087e <SD_SendCmd>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d15d      	bne.n	8000aba <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	e00c      	b.n	8000a1e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000a04:	7bfc      	ldrb	r4, [r7, #15]
 8000a06:	f7ff fe29 	bl	800065c <SPI_RxByte>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	f104 0310 	add.w	r3, r4, #16
 8000a12:	443b      	add	r3, r7
 8000a14:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d9ef      	bls.n	8000a04 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a24:	7a3b      	ldrb	r3, [r7, #8]
 8000a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SD_disk_initialize+0x10a>
 8000a2e:	230c      	movs	r3, #12
 8000a30:	e000      	b.n	8000a34 <SD_disk_initialize+0x10c>
 8000a32:	2304      	movs	r3, #4
 8000a34:	73bb      	strb	r3, [r7, #14]
 8000a36:	e040      	b.n	8000aba <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2077      	movs	r0, #119	; 0x77
 8000a3c:	f7ff ff1f 	bl	800087e <SD_SendCmd>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d808      	bhi.n	8000a58 <SD_disk_initialize+0x130>
 8000a46:	2100      	movs	r1, #0
 8000a48:	2069      	movs	r0, #105	; 0x69
 8000a4a:	f7ff ff18 	bl	800087e <SD_SendCmd>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d801      	bhi.n	8000a58 <SD_disk_initialize+0x130>
 8000a54:	2302      	movs	r3, #2
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x132>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d10e      	bne.n	8000a80 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a62:	2100      	movs	r1, #0
 8000a64:	2077      	movs	r0, #119	; 0x77
 8000a66:	f7ff ff0a 	bl	800087e <SD_SendCmd>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d80e      	bhi.n	8000a8e <SD_disk_initialize+0x166>
 8000a70:	2100      	movs	r1, #0
 8000a72:	2069      	movs	r0, #105	; 0x69
 8000a74:	f7ff ff03 	bl	800087e <SD_SendCmd>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d107      	bne.n	8000a8e <SD_disk_initialize+0x166>
 8000a7e:	e00d      	b.n	8000a9c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a80:	2100      	movs	r1, #0
 8000a82:	2041      	movs	r0, #65	; 0x41
 8000a84:	f7ff fefb 	bl	800087e <SD_SendCmd>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d005      	beq.n	8000a9a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <SD_disk_initialize+0x1d0>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1e1      	bne.n	8000a5c <SD_disk_initialize+0x134>
 8000a98:	e000      	b.n	8000a9c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a9a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <SD_disk_initialize+0x1d0>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d007      	beq.n	8000ab6 <SD_disk_initialize+0x18e>
 8000aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aaa:	2050      	movs	r0, #80	; 0x50
 8000aac:	f7ff fee7 	bl	800087e <SD_SendCmd>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SD_disk_initialize+0x192>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <SD_disk_initialize+0x1d4>)
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
 8000abe:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ac0:	f7ff fd88 	bl	80005d4 <DESELECT>
	SPI_RxByte();
 8000ac4:	f7ff fdca 	bl	800065c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d008      	beq.n	8000ae0 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <SD_disk_initialize+0x1cc>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f023 0301 	bic.w	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <SD_disk_initialize+0x1cc>)
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e001      	b.n	8000ae4 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ae0:	f7ff fe42 	bl	8000768 <SD_PowerOff>
	}

	return Stat;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <SD_disk_initialize+0x1cc>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd90      	pop	{r4, r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20004206 	.word	0x20004206
 8000afc:	200000a4 	.word	0x200000a4

08000b00 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SD_disk_status+0x14>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e002      	b.n	8000b1a <SD_disk_status+0x1a>
	return Stat;
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SD_disk_status+0x28>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b2db      	uxtb	r3, r3
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000000 	.word	0x20000000

08000b2c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	4603      	mov	r3, r0
 8000b3a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <SD_disk_read+0x1c>
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d101      	bne.n	8000b4c <SD_disk_read+0x20>
 8000b48:	2304      	movs	r3, #4
 8000b4a:	e051      	b.n	8000bf0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <SD_disk_read+0xcc>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SD_disk_read+0x32>
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e048      	b.n	8000bf0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <SD_disk_read+0xd0>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d102      	bne.n	8000b70 <SD_disk_read+0x44>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	025b      	lsls	r3, r3, #9
 8000b6e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b70:	f7ff fd20 	bl	80005b4 <SELECT>

	if (count == 1)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d111      	bne.n	8000b9e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	2051      	movs	r0, #81	; 0x51
 8000b7e:	f7ff fe7e 	bl	800087e <SD_SendCmd>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d129      	bne.n	8000bdc <SD_disk_read+0xb0>
 8000b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8c:	68b8      	ldr	r0, [r7, #8]
 8000b8e:	f7ff fe03 	bl	8000798 <SD_RxDataBlock>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d021      	beq.n	8000bdc <SD_disk_read+0xb0>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	e01e      	b.n	8000bdc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2052      	movs	r0, #82	; 0x52
 8000ba2:	f7ff fe6c 	bl	800087e <SD_SendCmd>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d117      	bne.n	8000bdc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	68b8      	ldr	r0, [r7, #8]
 8000bb2:	f7ff fdf1 	bl	8000798 <SD_RxDataBlock>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00a      	beq.n	8000bd2 <SD_disk_read+0xa6>
				buff += 512;
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1ed      	bne.n	8000bac <SD_disk_read+0x80>
 8000bd0:	e000      	b.n	8000bd4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bd2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	204c      	movs	r0, #76	; 0x4c
 8000bd8:	f7ff fe51 	bl	800087e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bdc:	f7ff fcfa 	bl	80005d4 <DESELECT>
	SPI_RxByte();
 8000be0:	f7ff fd3c 	bl	800065c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bf14      	ite	ne
 8000bea:	2301      	movne	r3, #1
 8000bec:	2300      	moveq	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	200000a4 	.word	0x200000a4

08000c00 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <SD_disk_write+0x1c>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <SD_disk_write+0x20>
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	e06b      	b.n	8000cf8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c20:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <SD_disk_write+0x100>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SD_disk_write+0x32>
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e062      	b.n	8000cf8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c32:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <SD_disk_write+0x100>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SD_disk_write+0x44>
 8000c40:	2302      	movs	r3, #2
 8000c42:	e059      	b.n	8000cf8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c44:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <SD_disk_write+0x104>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <SD_disk_write+0x56>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c56:	f7ff fcad 	bl	80005b4 <SELECT>

	if (count == 1)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d110      	bne.n	8000c82 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	2058      	movs	r0, #88	; 0x58
 8000c64:	f7ff fe0b 	bl	800087e <SD_SendCmd>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d13a      	bne.n	8000ce4 <SD_disk_write+0xe4>
 8000c6e:	21fe      	movs	r1, #254	; 0xfe
 8000c70:	68b8      	ldr	r0, [r7, #8]
 8000c72:	f7ff fdc1 	bl	80007f8 <SD_TxDataBlock>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d033      	beq.n	8000ce4 <SD_disk_write+0xe4>
			count = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	e030      	b.n	8000ce4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c82:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <SD_disk_write+0x104>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d007      	beq.n	8000c9e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2077      	movs	r0, #119	; 0x77
 8000c92:	f7ff fdf4 	bl	800087e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c96:	6839      	ldr	r1, [r7, #0]
 8000c98:	2057      	movs	r0, #87	; 0x57
 8000c9a:	f7ff fdf0 	bl	800087e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	2059      	movs	r0, #89	; 0x59
 8000ca2:	f7ff fdec 	bl	800087e <SD_SendCmd>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d11b      	bne.n	8000ce4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cac:	21fc      	movs	r1, #252	; 0xfc
 8000cae:	68b8      	ldr	r0, [r7, #8]
 8000cb0:	f7ff fda2 	bl	80007f8 <SD_TxDataBlock>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00a      	beq.n	8000cd0 <SD_disk_write+0xd0>
				buff += 512;
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cc0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1ee      	bne.n	8000cac <SD_disk_write+0xac>
 8000cce:	e000      	b.n	8000cd2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cd0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cd2:	21fd      	movs	r1, #253	; 0xfd
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff fd8f 	bl	80007f8 <SD_TxDataBlock>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <SD_disk_write+0xe4>
			{
				count = 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000ce4:	f7ff fc76 	bl	80005d4 <DESELECT>
	SPI_RxByte();
 8000ce8:	f7ff fcb8 	bl	800065c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf14      	ite	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	2300      	moveq	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000000 	.word	0x20000000
 8000d04:	200000a4 	.word	0x200000a4

08000d08 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b08b      	sub	sp, #44	; 0x2c
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	603a      	str	r2, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	460b      	mov	r3, r1
 8000d16:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SD_disk_ioctl+0x1e>
 8000d22:	2304      	movs	r3, #4
 8000d24:	e115      	b.n	8000f52 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	2b05      	cmp	r3, #5
 8000d30:	d124      	bne.n	8000d7c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d012      	beq.n	8000d60 <SD_disk_ioctl+0x58>
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	dc1a      	bgt.n	8000d74 <SD_disk_ioctl+0x6c>
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <SD_disk_ioctl+0x40>
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d006      	beq.n	8000d54 <SD_disk_ioctl+0x4c>
 8000d46:	e015      	b.n	8000d74 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d48:	f7ff fd0e 	bl	8000768 <SD_PowerOff>
			res = RES_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d52:	e0fc      	b.n	8000f4e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d54:	f7ff fcc6 	bl	80006e4 <SD_PowerOn>
			res = RES_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d5e:	e0f6      	b.n	8000f4e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	1c5c      	adds	r4, r3, #1
 8000d64:	f7ff fd0c 	bl	8000780 <SD_CheckPower>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d72:	e0ec      	b.n	8000f4e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d74:	2304      	movs	r3, #4
 8000d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d7a:	e0e8      	b.n	8000f4e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d7c:	4b77      	ldr	r3, [pc, #476]	; (8000f5c <SD_disk_ioctl+0x254>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SD_disk_ioctl+0x86>
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e0e1      	b.n	8000f52 <SD_disk_ioctl+0x24a>

		SELECT();
 8000d8e:	f7ff fc11 	bl	80005b4 <SELECT>

		switch (ctrl)
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	2b0d      	cmp	r3, #13
 8000d96:	f200 80cb 	bhi.w	8000f30 <SD_disk_ioctl+0x228>
 8000d9a:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <SD_disk_ioctl+0x98>)
 8000d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da0:	08000e9b 	.word	0x08000e9b
 8000da4:	08000dd9 	.word	0x08000dd9
 8000da8:	08000e8b 	.word	0x08000e8b
 8000dac:	08000f31 	.word	0x08000f31
 8000db0:	08000f31 	.word	0x08000f31
 8000db4:	08000f31 	.word	0x08000f31
 8000db8:	08000f31 	.word	0x08000f31
 8000dbc:	08000f31 	.word	0x08000f31
 8000dc0:	08000f31 	.word	0x08000f31
 8000dc4:	08000f31 	.word	0x08000f31
 8000dc8:	08000f31 	.word	0x08000f31
 8000dcc:	08000ead 	.word	0x08000ead
 8000dd0:	08000ed1 	.word	0x08000ed1
 8000dd4:	08000ef5 	.word	0x08000ef5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2049      	movs	r0, #73	; 0x49
 8000ddc:	f7ff fd4f 	bl	800087e <SD_SendCmd>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 80a8 	bne.w	8000f38 <SD_disk_ioctl+0x230>
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2110      	movs	r1, #16
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fcd2 	bl	8000798 <SD_RxDataBlock>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 809e 	beq.w	8000f38 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000dfc:	7b3b      	ldrb	r3, [r7, #12]
 8000dfe:	099b      	lsrs	r3, r3, #6
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d10e      	bne.n	8000e24 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e06:	7d7b      	ldrb	r3, [r7, #21]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	7d3b      	ldrb	r3, [r7, #20]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	3301      	adds	r3, #1
 8000e18:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e1a:	8bfb      	ldrh	r3, [r7, #30]
 8000e1c:	029a      	lsls	r2, r3, #10
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e02e      	b.n	8000e82 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e24:	7c7b      	ldrb	r3, [r7, #17]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	7dbb      	ldrb	r3, [r7, #22]
 8000e2e:	09db      	lsrs	r3, r3, #7
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4413      	add	r3, r2
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	7d7b      	ldrb	r3, [r7, #21]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	f003 0306 	and.w	r3, r3, #6
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4413      	add	r3, r2
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	3302      	adds	r3, #2
 8000e48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e4c:	7d3b      	ldrb	r3, [r7, #20]
 8000e4e:	099b      	lsrs	r3, r3, #6
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	7cfb      	ldrb	r3, [r7, #19]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	7cbb      	ldrb	r3, [r7, #18]
 8000e62:	029b      	lsls	r3, r3, #10
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3301      	adds	r3, #1
 8000e72:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e74:	8bfa      	ldrh	r2, [r7, #30]
 8000e76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e7a:	3b09      	subs	r3, #9
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e88:	e056      	b.n	8000f38 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e90:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e98:	e055      	b.n	8000f46 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e9a:	f7ff fc09 	bl	80006b0 <SD_ReadyWait>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2bff      	cmp	r3, #255	; 0xff
 8000ea2:	d14b      	bne.n	8000f3c <SD_disk_ioctl+0x234>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eaa:	e047      	b.n	8000f3c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eac:	2100      	movs	r1, #0
 8000eae:	2049      	movs	r0, #73	; 0x49
 8000eb0:	f7ff fce5 	bl	800087e <SD_SendCmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d142      	bne.n	8000f40 <SD_disk_ioctl+0x238>
 8000eba:	2110      	movs	r1, #16
 8000ebc:	6a38      	ldr	r0, [r7, #32]
 8000ebe:	f7ff fc6b 	bl	8000798 <SD_RxDataBlock>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d03b      	beq.n	8000f40 <SD_disk_ioctl+0x238>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ece:	e037      	b.n	8000f40 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	204a      	movs	r0, #74	; 0x4a
 8000ed4:	f7ff fcd3 	bl	800087e <SD_SendCmd>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d132      	bne.n	8000f44 <SD_disk_ioctl+0x23c>
 8000ede:	2110      	movs	r1, #16
 8000ee0:	6a38      	ldr	r0, [r7, #32]
 8000ee2:	f7ff fc59 	bl	8000798 <SD_RxDataBlock>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d02b      	beq.n	8000f44 <SD_disk_ioctl+0x23c>
 8000eec:	2300      	movs	r3, #0
 8000eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ef2:	e027      	b.n	8000f44 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	207a      	movs	r0, #122	; 0x7a
 8000ef8:	f7ff fcc1 	bl	800087e <SD_SendCmd>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d116      	bne.n	8000f30 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f08:	e00b      	b.n	8000f22 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000f0a:	6a3c      	ldr	r4, [r7, #32]
 8000f0c:	1c63      	adds	r3, r4, #1
 8000f0e:	623b      	str	r3, [r7, #32]
 8000f10:	f7ff fba4 	bl	800065c <SPI_RxByte>
 8000f14:	4603      	mov	r3, r0
 8000f16:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d9ef      	bls.n	8000f0a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000f30:	2304      	movs	r3, #4
 8000f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f36:	e006      	b.n	8000f46 <SD_disk_ioctl+0x23e>
			break;
 8000f38:	bf00      	nop
 8000f3a:	e004      	b.n	8000f46 <SD_disk_ioctl+0x23e>
			break;
 8000f3c:	bf00      	nop
 8000f3e:	e002      	b.n	8000f46 <SD_disk_ioctl+0x23e>
			break;
 8000f40:	bf00      	nop
 8000f42:	e000      	b.n	8000f46 <SD_disk_ioctl+0x23e>
			break;
 8000f44:	bf00      	nop
		}

		DESELECT();
 8000f46:	f7ff fb45 	bl	80005d4 <DESELECT>
		SPI_RxByte();
 8000f4a:	f7ff fb87 	bl	800065c <SPI_RxByte>
	}

	return res;
 8000f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	372c      	adds	r7, #44	; 0x2c
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000000 	.word	0x20000000

08000f60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d013      	beq.n	8000fa0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00b      	beq.n	8000fa0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f88:	e000      	b.n	8000f8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f9      	beq.n	8000f8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_write>:
// Store ADC value for each channel
uint32_t adc_value[5];


//_____Print to console
int _write(int file, char *ptr, int len){
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++){
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e009      	b.n	8000fd8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ffc7 	bl	8000f60 <ITM_SendChar>
	for(i = 0; i < len; i++){
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf1      	blt.n	8000fc4 <_write+0x16>
	}
	return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff0:	f000 fcc4 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff4:	f000 f83a 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff8:	f000 f9b4 	bl	8001364 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ffc:	f000 f992 	bl	8001324 <MX_DMA_Init>
  MX_SPI1_Init();
 8001000:	f000 f930 	bl	8001264 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001004:	f000 f964 	bl	80012d0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001008:	f003 fcb8 	bl	800497c <MX_FATFS_Init>
  MX_ADC1_Init();
 800100c:	f000 f8a0 	bl	8001150 <MX_ADC1_Init>
  // HAL_ADC_Stop(ADC_HandleTypeDef* hadc)

  // 12:30 Digi-Key Getting Started With STM32 & Nucleo Part 4
  // adv_buf is where the values from the ADC are located
  // HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 5);
 8001010:	2205      	movs	r2, #5
 8001012:	4910      	ldr	r1, [pc, #64]	; (8001054 <main+0x68>)
 8001014:	4810      	ldr	r0, [pc, #64]	; (8001058 <main+0x6c>)
 8001016:	f000 fd8b 	bl	8001b30 <HAL_ADC_Start_DMA>
  adc_buf_max = 0;
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <main+0x70>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //_____Test code for printing to console
	  // Increment count
	  count++;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <main+0x74>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <main+0x74>)
 800102a:	701a      	strb	r2, [r3, #0]
	  // Print count message (doesn't work currently)
	  printf("HELLO WORLD count = %d \n", count);
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <main+0x74>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <main+0x78>)
 8001034:	f003 fd9c 	bl	8004b70 <iprintf>
	  // 250 ms delay
	  // FIXME: Change delay to be every microsecond (0.001)
	  HAL_Delay(250);
 8001038:	20fa      	movs	r0, #250	; 0xfa
 800103a:	f000 fd11 	bl	8001a60 <HAL_Delay>

	  if(adc_buf[0] > adc_buf_max) {
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <main+0x7c>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <main+0x70>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d9ea      	bls.n	8001020 <main+0x34>
		  adc_buf_max = adc_buf[0];
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <main+0x7c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a03      	ldr	r2, [pc, #12]	; (800105c <main+0x70>)
 8001050:	6013      	str	r3, [r2, #0]
	  count++;
 8001052:	e7e5      	b.n	8001020 <main+0x34>
 8001054:	200041f0 	.word	0x200041f0
 8001058:	200000a8 	.word	0x200000a8
 800105c:	200041ec 	.word	0x200041ec
 8001060:	20004204 	.word	0x20004204
 8001064:	08005aa4 	.word	0x08005aa4
 8001068:	200001ec 	.word	0x200001ec

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	2234      	movs	r2, #52	; 0x34
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fd70 	bl	8004b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <SystemClock_Config+0xdc>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a2b      	ldr	r2, [pc, #172]	; (8001148 <SystemClock_Config+0xdc>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <SystemClock_Config+0xdc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	2300      	movs	r3, #0
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <SystemClock_Config+0xe0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a25      	ldr	r2, [pc, #148]	; (800114c <SystemClock_Config+0xe0>)
 80010b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <SystemClock_Config+0xe0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010e0:	23b4      	movs	r3, #180	; 0xb4
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 faaf 	bl	8003658 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001100:	f000 f9b6 	bl	8001470 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001104:	f001 ff0e 	bl	8002f24 <HAL_PWREx_EnableOverDrive>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800110e:	f000 f9af 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001112:	230f      	movs	r3, #15
 8001114:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001116:	2302      	movs	r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800111e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001124:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001128:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	2105      	movs	r1, #5
 8001130:	4618      	mov	r0, r3
 8001132:	f001 ff47 	bl	8002fc4 <HAL_RCC_ClockConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800113c:	f000 f998 	bl	8001470 <Error_Handler>
  }
}
 8001140:	bf00      	nop
 8001142:	3750      	adds	r7, #80	; 0x50
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001162:	4b3d      	ldr	r3, [pc, #244]	; (8001258 <MX_ADC1_Init+0x108>)
 8001164:	4a3d      	ldr	r2, [pc, #244]	; (800125c <MX_ADC1_Init+0x10c>)
 8001166:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001168:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <MX_ADC1_Init+0x108>)
 800116a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800116e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001170:	4b39      	ldr	r3, [pc, #228]	; (8001258 <MX_ADC1_Init+0x108>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <MX_ADC1_Init+0x108>)
 8001178:	2201      	movs	r2, #1
 800117a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <MX_ADC1_Init+0x108>)
 800117e:	2201      	movs	r2, #1
 8001180:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001182:	4b35      	ldr	r3, [pc, #212]	; (8001258 <MX_ADC1_Init+0x108>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <MX_ADC1_Init+0x108>)
 800118c:	2200      	movs	r2, #0
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b31      	ldr	r3, [pc, #196]	; (8001258 <MX_ADC1_Init+0x108>)
 8001192:	4a33      	ldr	r2, [pc, #204]	; (8001260 <MX_ADC1_Init+0x110>)
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <MX_ADC1_Init+0x108>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800119c:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <MX_ADC1_Init+0x108>)
 800119e:	2205      	movs	r2, #5
 80011a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <MX_ADC1_Init+0x108>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011aa:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <MX_ADC1_Init+0x108>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b0:	4829      	ldr	r0, [pc, #164]	; (8001258 <MX_ADC1_Init+0x108>)
 80011b2:	f000 fc79 	bl	8001aa8 <HAL_ADC_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011bc:	f000 f958 	bl	8001470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011c8:	2307      	movs	r3, #7
 80011ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4821      	ldr	r0, [pc, #132]	; (8001258 <MX_ADC1_Init+0x108>)
 80011d2:	f000 fdc7 	bl	8001d64 <HAL_ADC_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011dc:	f000 f948 	bl	8001470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	481a      	ldr	r0, [pc, #104]	; (8001258 <MX_ADC1_Init+0x108>)
 80011ee:	f000 fdb9 	bl	8001d64 <HAL_ADC_ConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011f8:	f000 f93a 	bl	8001470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001200:	2303      	movs	r3, #3
 8001202:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	4813      	ldr	r0, [pc, #76]	; (8001258 <MX_ADC1_Init+0x108>)
 800120a:	f000 fdab 	bl	8001d64 <HAL_ADC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001214:	f000 f92c 	bl	8001470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001218:	2303      	movs	r3, #3
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800121c:	2304      	movs	r3, #4
 800121e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <MX_ADC1_Init+0x108>)
 8001226:	f000 fd9d 	bl	8001d64 <HAL_ADC_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001230:	f000 f91e 	bl	8001470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001234:	2304      	movs	r3, #4
 8001236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001238:	2305      	movs	r3, #5
 800123a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_ADC1_Init+0x108>)
 8001242:	f000 fd8f 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800124c:	f000 f910 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000a8 	.word	0x200000a8
 800125c:	40012000 	.word	0x40012000
 8001260:	0f000001 	.word	0x0f000001

08001264 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_SPI1_Init+0x64>)
 800126a:	4a18      	ldr	r2, [pc, #96]	; (80012cc <MX_SPI1_Init+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001270:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001274:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_SPI1_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_SPI1_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001294:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001298:	2210      	movs	r2, #16
 800129a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <MX_SPI1_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_SPI1_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <MX_SPI1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_SPI1_Init+0x64>)
 80012b0:	220a      	movs	r2, #10
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_SPI1_Init+0x64>)
 80012b6:	f002 fc6d 	bl	8003b94 <HAL_SPI_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012c0:	f000 f8d6 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000150 	.word	0x20000150
 80012cc:	40013000 	.word	0x40013000

080012d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_USART1_UART_Init+0x50>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_USART1_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_USART1_UART_Init+0x4c>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_USART1_UART_Init+0x4c>)
 8001308:	f003 f876 	bl	80043f8 <HAL_UART_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001312:	f000 f8ad 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200001a8 	.word	0x200001a8
 8001320:	40011000 	.word	0x40011000

08001324 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_DMA_Init+0x3c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <MX_DMA_Init+0x3c>)
 8001334:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_DMA_Init+0x3c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2038      	movs	r0, #56	; 0x38
 800134c:	f001 f895 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001350:	2038      	movs	r0, #56	; 0x38
 8001352:	f001 f8ae 	bl	80024b2 <HAL_NVIC_EnableIRQ>

}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <MX_GPIO_Init+0xc0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a28      	ldr	r2, [pc, #160]	; (8001424 <MX_GPIO_Init+0xc0>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <MX_GPIO_Init+0xc0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <MX_GPIO_Init+0xc0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a21      	ldr	r2, [pc, #132]	; (8001424 <MX_GPIO_Init+0xc0>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_GPIO_Init+0xc0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_GPIO_Init+0xc0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <MX_GPIO_Init+0xc0>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_GPIO_Init+0xc0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2120      	movs	r1, #32
 80013d2:	4815      	ldr	r0, [pc, #84]	; (8001428 <MX_GPIO_Init+0xc4>)
 80013d4:	f001 fd8c 	bl	8002ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2101      	movs	r1, #1
 80013dc:	4813      	ldr	r0, [pc, #76]	; (800142c <MX_GPIO_Init+0xc8>)
 80013de:	f001 fd87 	bl	8002ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013e2:	2320      	movs	r3, #32
 80013e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4619      	mov	r1, r3
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <MX_GPIO_Init+0xc4>)
 80013fa:	f001 fbe5 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013fe:	2301      	movs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_GPIO_Init+0xc8>)
 8001416:	f001 fbd7 	bl	8002bc8 <HAL_GPIO_Init>

}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when buffer is half filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2120      	movs	r1, #32
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800143e:	f001 fd57 	bl	8002ef0 <HAL_GPIO_WritePin>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40020000 	.word	0x40020000

08001450 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2120      	movs	r1, #32
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <HAL_ADC_ConvCpltCallback+0x1c>)
 800145e:	f001 fd47 	bl	8002ef0 <HAL_GPIO_WritePin>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40020000 	.word	0x40020000

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	e7fe      	b.n	8001478 <Error_Handler+0x8>
	...

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_MspInit+0x4c>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_MspInit+0x4c>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ba:	2007      	movs	r0, #7
 80014bc:	f000 ffd2 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800

080014cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a2f      	ldr	r2, [pc, #188]	; (80015a8 <HAL_ADC_MspInit+0xdc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d157      	bne.n	800159e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <HAL_ADC_MspInit+0xe0>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <HAL_ADC_MspInit+0xe0>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <HAL_ADC_MspInit+0xe0>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_ADC_MspInit+0xe0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a26      	ldr	r2, [pc, #152]	; (80015ac <HAL_ADC_MspInit+0xe0>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_ADC_MspInit+0xe0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001526:	231f      	movs	r3, #31
 8001528:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152a:	2303      	movs	r3, #3
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	481d      	ldr	r0, [pc, #116]	; (80015b0 <HAL_ADC_MspInit+0xe4>)
 800153a:	f001 fb45 	bl	8002bc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 8001540:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_ADC_MspInit+0xec>)
 8001542:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 8001546:	2200      	movs	r2, #0
 8001548:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 8001558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 8001560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001564:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 8001568:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800156c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 8001570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001574:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001582:	480c      	ldr	r0, [pc, #48]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 8001584:	f000 ffb0 	bl	80024e8 <HAL_DMA_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800158e:	f7ff ff6f 	bl	8001470 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 8001596:	639a      	str	r2, [r3, #56]	; 0x38
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <HAL_ADC_MspInit+0xe8>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40012000 	.word	0x40012000
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	200000f0 	.word	0x200000f0
 80015b8:	40026410 	.word	0x40026410

080015bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a28      	ldr	r2, [pc, #160]	; (800167c <HAL_SPI_MspInit+0xc0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d149      	bne.n	8001672 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b27      	ldr	r3, [pc, #156]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a26      	ldr	r2, [pc, #152]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 80015e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a18      	ldr	r2, [pc, #96]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_SPI_MspInit+0xc4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001632:	23c0      	movs	r3, #192	; 0xc0
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001642:	2305      	movs	r3, #5
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <HAL_SPI_MspInit+0xc8>)
 800164e:	f001 fabb 	bl	8002bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001652:	2308      	movs	r3, #8
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001662:	2305      	movs	r3, #5
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <HAL_SPI_MspInit+0xcc>)
 800166e:	f001 faab 	bl	8002bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40013000 	.word	0x40013000
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400

0800168c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a19      	ldr	r2, [pc, #100]	; (8001710 <HAL_UART_MspInit+0x84>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12c      	bne.n	8001708 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a10      	ldr	r2, [pc, #64]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016f8:	2307      	movs	r3, #7
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <HAL_UART_MspInit+0x8c>)
 8001704:	f001 fa60 	bl	8002bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40011000 	.word	0x40011000
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000

0800171c <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
	if(Timer1 > 0){
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <SDTimer_Handler+0x40>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <SDTimer_Handler+0x1c>
		Timer1--;
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <SDTimer_Handler+0x40>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	3b01      	subs	r3, #1
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <SDTimer_Handler+0x40>)
 8001736:	701a      	strb	r2, [r3, #0]
		}
	if(Timer2 > 0){
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <SDTimer_Handler+0x44>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <SDTimer_Handler+0x34>
		Timer2--;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <SDTimer_Handler+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	3b01      	subs	r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SDTimer_Handler+0x44>)
 800174e:	701a      	strb	r2, [r3, #0]
	}
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20004206 	.word	0x20004206
 8001760:	20004207 	.word	0x20004207

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <NMI_Handler+0x4>

0800176a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler+0x4>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <UsageFault_Handler+0x4>

08001782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <SysTick_Handler+0x30>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <SysTick_Handler+0x30>)
 80017bc:	701a      	strb	r2, [r3, #0]

	if(FatFsCnt >= 10){
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <SysTick_Handler+0x30>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b09      	cmp	r3, #9
 80017c6:	d904      	bls.n	80017d2 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <SysTick_Handler+0x30>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80017ce:	f7ff ffa5 	bl	800171c <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d2:	f000 f925 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20004205 	.word	0x20004205

080017e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <DMA2_Stream0_IRQHandler+0x10>)
 80017e6:	f000 ff85 	bl	80026f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200000f0 	.word	0x200000f0

080017f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	e00a      	b.n	800181c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001806:	f3af 8000 	nop.w
 800180a:	4601      	mov	r1, r0
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	60ba      	str	r2, [r7, #8]
 8001812:	b2ca      	uxtb	r2, r1
 8001814:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf0      	blt.n	8001806 <_read+0x12>
  }

  return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_close>:
  }
  return len;
}

int _close(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001856:	605a      	str	r2, [r3, #4]
  return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_isatty>:

int _isatty(int file)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f003 f920 	bl	8004b0c <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20020000 	.word	0x20020000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	20004208 	.word	0x20004208
 8001900:	20004238 	.word	0x20004238

08001904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <SystemInit+0x20>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <SystemInit+0x20>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001944:	4c0b      	ldr	r4, [pc, #44]	; (8001974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001952:	f7ff ffd7 	bl	8001904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f003 f8df 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7ff fb47 	bl	8000fec <main>
  bx  lr    
 800195e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800196c:	08005b88 	.word	0x08005b88
  ldr r2, =_sbss
 8001970:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001974:	20004234 	.word	0x20004234

08001978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC_IRQHandler>
	...

0800197c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <HAL_Init+0x40>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_Init+0x40>)
 8001992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_Init+0x40>)
 800199e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 fd5d 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f808 	bl	80019c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fd64 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023c00 	.word	0x40023c00

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x54>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x58>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fd75 	bl	80024ce <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f000 fd3d 	bl	800247a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_InitTick+0x5c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000004 	.word	0x20000004
 8001a18:	2000000c 	.word	0x2000000c
 8001a1c:	20000008 	.word	0x20000008

08001a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	2000000c 	.word	0x2000000c
 8001a44:	2000420c 	.word	0x2000420c

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	2000420c 	.word	0x2000420c

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff ffee 	bl	8001a48 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_Delay+0x44>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffde 	bl	8001a48 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000000c 	.word	0x2000000c

08001aa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e033      	b.n	8001b26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fd00 	bl	80014cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d118      	bne.n	8001b18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aee:	f023 0302 	bic.w	r3, r3, #2
 8001af2:	f043 0202 	orr.w	r2, r3, #2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fa64 	bl	8001fc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	f043 0201 	orr.w	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
 8001b16:	e001      	b.n	8001b1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Start_DMA+0x1e>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e0e9      	b.n	8001d22 <HAL_ADC_Start_DMA+0x1f2>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d018      	beq.n	8001b96 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b74:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <HAL_ADC_Start_DMA+0x1fc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6d      	ldr	r2, [pc, #436]	; (8001d30 <HAL_ADC_Start_DMA+0x200>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9a      	lsrs	r2, r3, #18
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b88:	e002      	b.n	8001b90 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f9      	bne.n	8001b8a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba4:	d107      	bne.n	8001bb6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	f040 80a1 	bne.w	8001d08 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bf0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c04:	d106      	bne.n	8001c14 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f023 0206 	bic.w	r2, r3, #6
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44
 8001c12:	e002      	b.n	8001c1a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <HAL_ADC_Start_DMA+0x204>)
 8001c24:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	4a43      	ldr	r2, [pc, #268]	; (8001d38 <HAL_ADC_Start_DMA+0x208>)
 8001c2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	4a42      	ldr	r2, [pc, #264]	; (8001d3c <HAL_ADC_Start_DMA+0x20c>)
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3a:	4a41      	ldr	r2, [pc, #260]	; (8001d40 <HAL_ADC_Start_DMA+0x210>)
 8001c3c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c46:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c56:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c66:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	334c      	adds	r3, #76	; 0x4c
 8001c72:	4619      	mov	r1, r3
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f000 fce4 	bl	8002644 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d12a      	bne.n	8001cde <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a2d      	ldr	r2, [pc, #180]	; (8001d44 <HAL_ADC_Start_DMA+0x214>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d015      	beq.n	8001cbe <HAL_ADC_Start_DMA+0x18e>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a2c      	ldr	r2, [pc, #176]	; (8001d48 <HAL_ADC_Start_DMA+0x218>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_Start_DMA+0x178>
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <HAL_ADC_Start_DMA+0x204>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00a      	beq.n	8001cbe <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <HAL_ADC_Start_DMA+0x21c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d136      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_ADC_Start_DMA+0x204>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d130      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d129      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	e020      	b.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <HAL_ADC_Start_DMA+0x214>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d11b      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d114      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	e00b      	b.n	8001d20 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f043 0210 	orr.w	r2, r3, #16
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	431bde83 	.word	0x431bde83
 8001d34:	40012300 	.word	0x40012300
 8001d38:	080021c1 	.word	0x080021c1
 8001d3c:	0800227b 	.word	0x0800227b
 8001d40:	08002297 	.word	0x08002297
 8001d44:	40012000 	.word	0x40012000
 8001d48:	40012100 	.word	0x40012100
 8001d4c:	40012200 	.word	0x40012200

08001d50 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x1c>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e113      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x244>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b09      	cmp	r3, #9
 8001d8e:	d925      	bls.n	8001ddc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68d9      	ldr	r1, [r3, #12]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	3b1e      	subs	r3, #30
 8001da6:	2207      	movs	r2, #7
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43da      	mvns	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	400a      	ands	r2, r1
 8001db4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68d9      	ldr	r1, [r3, #12]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4403      	add	r3, r0
 8001dce:	3b1e      	subs	r3, #30
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	e022      	b.n	8001e22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6919      	ldr	r1, [r3, #16]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	461a      	mov	r2, r3
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	2207      	movs	r2, #7
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6919      	ldr	r1, [r3, #16]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	4603      	mov	r3, r0
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4403      	add	r3, r0
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d824      	bhi.n	8001e74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b05      	subs	r3, #5
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	400a      	ands	r2, r1
 8001e4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	3b05      	subs	r3, #5
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34
 8001e72:	e04c      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d824      	bhi.n	8001ec6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b23      	subs	r3, #35	; 0x23
 8001e8e:	221f      	movs	r2, #31
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43da      	mvns	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b23      	subs	r3, #35	; 0x23
 8001eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec4:	e023      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b41      	subs	r3, #65	; 0x41
 8001ed8:	221f      	movs	r2, #31
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b41      	subs	r3, #65	; 0x41
 8001f02:	fa00 f203 	lsl.w	r2, r0, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f0e:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <HAL_ADC_ConfigChannel+0x250>)
 8001f10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a28      	ldr	r2, [pc, #160]	; (8001fb8 <HAL_ADC_ConfigChannel+0x254>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d10f      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1d8>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b12      	cmp	r3, #18
 8001f22:	d10b      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <HAL_ADC_ConfigChannel+0x254>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12b      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x23a>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <HAL_ADC_ConfigChannel+0x258>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <HAL_ADC_ConfigChannel+0x1f4>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b11      	cmp	r3, #17
 8001f56:	d122      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_ADC_ConfigChannel+0x258>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d111      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_ADC_ConfigChannel+0x25c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_ADC_ConfigChannel+0x260>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	0c9a      	lsrs	r2, r3, #18
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f90:	e002      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f9      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40012300 	.word	0x40012300
 8001fb8:	40012000 	.word	0x40012000
 8001fbc:	10000012 	.word	0x10000012
 8001fc0:	20000004 	.word	0x20000004
 8001fc4:	431bde83 	.word	0x431bde83

08001fc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd0:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <ADC_Init+0x1f0>)
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	021a      	lsls	r2, r3, #8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	4a58      	ldr	r2, [pc, #352]	; (80021bc <ADC_Init+0x1f4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d022      	beq.n	80020a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800206e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6899      	ldr	r1, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	e00f      	b.n	80020c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0202 	bic.w	r2, r2, #2
 80020d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7e1b      	ldrb	r3, [r3, #24]
 80020e0:	005a      	lsls	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002102:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002112:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	3b01      	subs	r3, #1
 8002120:	035a      	lsls	r2, r3, #13
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	e007      	b.n	800213c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800213a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	3b01      	subs	r3, #1
 8002158:	051a      	lsls	r2, r3, #20
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6899      	ldr	r1, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800217e:	025a      	lsls	r2, r3, #9
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6899      	ldr	r1, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	029a      	lsls	r2, r3, #10
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40012300 	.word	0x40012300
 80021bc:	0f000001 	.word	0x0f000001

080021c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d13c      	bne.n	8002254 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d12b      	bne.n	800224c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d127      	bne.n	800224c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002206:	2b00      	cmp	r3, #0
 8002208:	d006      	beq.n	8002218 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002214:	2b00      	cmp	r3, #0
 8002216:	d119      	bne.n	800224c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0220 	bic.w	r2, r2, #32
 8002226:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7ff f8ff 	bl	8001450 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002252:	e00e      	b.n	8002272 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff fd75 	bl	8001d50 <HAL_ADC_ErrorCallback>
}
 8002266:	e004      	b.n	8002272 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7ff f8d1 	bl	8001430 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2240      	movs	r2, #64	; 0x40
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f043 0204 	orr.w	r2, r3, #4
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f7ff fd4a 	bl	8001d50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <__NVIC_SetPriorityGrouping>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	; (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_EnableIRQ>:
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	db0b      	blt.n	8002352 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4907      	ldr	r1, [pc, #28]	; (8002360 <__NVIC_EnableIRQ+0x38>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2001      	movs	r0, #1
 800234a:	fa00 f202 	lsl.w	r2, r0, r2
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_SetPriority>:
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	; (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	; (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	; 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <SysTick_Config>:
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002430:	d301      	bcc.n	8002436 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e00f      	b.n	8002456 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <SysTick_Config+0x40>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	210f      	movs	r1, #15
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f7ff ff8e 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <SysTick_Config+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <SysTick_Config+0x40>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff29 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800248c:	f7ff ff3e 	bl	800230c <__NVIC_GetPriorityGrouping>
 8002490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	f7ff ff8e 	bl	80023b8 <NVIC_EncodePriority>
 800249c:	4602      	mov	r2, r0
 800249e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff5d 	bl	8002364 <__NVIC_SetPriority>
}
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff31 	bl	8002328 <__NVIC_EnableIRQ>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ffa2 	bl	8002420 <SysTick_Config>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff faa8 	bl	8001a48 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e099      	b.n	8002638 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002524:	e00f      	b.n	8002546 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002526:	f7ff fa8f 	bl	8001a48 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b05      	cmp	r3, #5
 8002532:	d908      	bls.n	8002546 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2203      	movs	r2, #3
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e078      	b.n	8002638 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e8      	bne.n	8002526 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_DMA_Init+0x158>)
 8002560:	4013      	ands	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002572:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	2b04      	cmp	r3, #4
 800259e:	d107      	bne.n	80025b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	4313      	orrs	r3, r2
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f023 0307 	bic.w	r3, r3, #7
 80025c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d117      	bne.n	800260a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00e      	beq.n	800260a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fa6f 	bl	8002ad0 <DMA_CheckFifoParam>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2240      	movs	r2, #64	; 0x40
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002606:	2301      	movs	r3, #1
 8002608:	e016      	b.n	8002638 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa26 	bl	8002a64 <DMA_CalcBaseAndBitshift>
 8002618:	4603      	mov	r3, r0
 800261a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002620:	223f      	movs	r2, #63	; 0x3f
 8002622:	409a      	lsls	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	f010803f 	.word	0xf010803f

08002644 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_DMA_Start_IT+0x26>
 8002666:	2302      	movs	r3, #2
 8002668:	e040      	b.n	80026ec <HAL_DMA_Start_IT+0xa8>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d12f      	bne.n	80026de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2202      	movs	r2, #2
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f9b8 	bl	8002a08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	223f      	movs	r2, #63	; 0x3f
 800269e:	409a      	lsls	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0216 	orr.w	r2, r2, #22
 80026b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0208 	orr.w	r2, r2, #8
 80026ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e005      	b.n	80026ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
 80026e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002700:	4b8e      	ldr	r3, [pc, #568]	; (800293c <HAL_DMA_IRQHandler+0x248>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a8e      	ldr	r2, [pc, #568]	; (8002940 <HAL_DMA_IRQHandler+0x24c>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0a9b      	lsrs	r3, r3, #10
 800270c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	2208      	movs	r2, #8
 8002720:	409a      	lsls	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01a      	beq.n	8002760 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0204 	bic.w	r2, r2, #4
 8002746:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	2208      	movs	r2, #8
 800274e:	409a      	lsls	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	2201      	movs	r2, #1
 8002766:	409a      	lsls	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d012      	beq.n	8002796 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	2201      	movs	r2, #1
 8002784:	409a      	lsls	r2, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	f043 0202 	orr.w	r2, r3, #2
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	2204      	movs	r2, #4
 800279c:	409a      	lsls	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d012      	beq.n	80027cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b8:	2204      	movs	r2, #4
 80027ba:	409a      	lsls	r2, r3
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	f043 0204 	orr.w	r2, r3, #4
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	2210      	movs	r2, #16
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d043      	beq.n	8002864 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d03c      	beq.n	8002864 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ee:	2210      	movs	r2, #16
 80027f0:	409a      	lsls	r2, r3
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d018      	beq.n	8002836 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	d024      	beq.n	8002864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
 8002822:	e01f      	b.n	8002864 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
 8002834:	e016      	b.n	8002864 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d107      	bne.n	8002854 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0208 	bic.w	r2, r2, #8
 8002852:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	2220      	movs	r2, #32
 800286a:	409a      	lsls	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 808f 	beq.w	8002994 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8087 	beq.w	8002994 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	2220      	movs	r2, #32
 800288c:	409a      	lsls	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b05      	cmp	r3, #5
 800289c:	d136      	bne.n	800290c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0216 	bic.w	r2, r2, #22
 80028ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d103      	bne.n	80028ce <HAL_DMA_IRQHandler+0x1da>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0208 	bic.w	r2, r2, #8
 80028dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	223f      	movs	r2, #63	; 0x3f
 80028e4:	409a      	lsls	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d07e      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
        }
        return;
 800290a:	e079      	b.n	8002a00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01d      	beq.n	8002956 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10d      	bne.n	8002944 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	2b00      	cmp	r3, #0
 800292e:	d031      	beq.n	8002994 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
 8002938:	e02c      	b.n	8002994 <HAL_DMA_IRQHandler+0x2a0>
 800293a:	bf00      	nop
 800293c:	20000004 	.word	0x20000004
 8002940:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d023      	beq.n	8002994 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
 8002954:	e01e      	b.n	8002994 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10f      	bne.n	8002984 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0210 	bic.w	r2, r2, #16
 8002972:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	2b00      	cmp	r3, #0
 800299a:	d032      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d022      	beq.n	80029ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2205      	movs	r2, #5
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	3301      	adds	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d307      	bcc.n	80029dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f2      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x2cc>
 80029da:	e000      	b.n	80029de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
 80029fe:	e000      	b.n	8002a02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a00:	bf00      	nop
    }
  }
}
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d108      	bne.n	8002a48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a46:	e007      	b.n	8002a58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3b10      	subs	r3, #16
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <DMA_CalcBaseAndBitshift+0x64>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a7e:	4a13      	ldr	r2, [pc, #76]	; (8002acc <DMA_CalcBaseAndBitshift+0x68>)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d909      	bls.n	8002aa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a9a:	f023 0303 	bic.w	r3, r3, #3
 8002a9e:	1d1a      	adds	r2, r3, #4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	659a      	str	r2, [r3, #88]	; 0x58
 8002aa4:	e007      	b.n	8002ab6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aae:	f023 0303 	bic.w	r3, r3, #3
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	aaaaaaab 	.word	0xaaaaaaab
 8002acc:	08005ad8 	.word	0x08005ad8

08002ad0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d11f      	bne.n	8002b2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d856      	bhi.n	8002b9e <DMA_CheckFifoParam+0xce>
 8002af0:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <DMA_CheckFifoParam+0x28>)
 8002af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af6:	bf00      	nop
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b1b 	.word	0x08002b1b
 8002b00:	08002b09 	.word	0x08002b09
 8002b04:	08002b9f 	.word	0x08002b9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d046      	beq.n	8002ba2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b18:	e043      	b.n	8002ba2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b22:	d140      	bne.n	8002ba6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b28:	e03d      	b.n	8002ba6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b32:	d121      	bne.n	8002b78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d837      	bhi.n	8002baa <DMA_CheckFifoParam+0xda>
 8002b3a:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <DMA_CheckFifoParam+0x70>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002b51 	.word	0x08002b51
 8002b44:	08002b57 	.word	0x08002b57
 8002b48:	08002b51 	.word	0x08002b51
 8002b4c:	08002b69 	.word	0x08002b69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      break;
 8002b54:	e030      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d025      	beq.n	8002bae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b66:	e022      	b.n	8002bae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b70:	d11f      	bne.n	8002bb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b76:	e01c      	b.n	8002bb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d903      	bls.n	8002b86 <DMA_CheckFifoParam+0xb6>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d003      	beq.n	8002b8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b84:	e018      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8a:	e015      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00e      	beq.n	8002bb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9c:	e00b      	b.n	8002bb6 <DMA_CheckFifoParam+0xe6>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e00a      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e008      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e006      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
 8002bac:	e004      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e002      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bb2:	bf00      	nop
 8002bb4:	e000      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bb6:	bf00      	nop
    }
  } 
  
  return status; 
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop

08002bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e165      	b.n	8002eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be4:	2201      	movs	r2, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	f040 8154 	bne.w	8002eaa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d005      	beq.n	8002c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d130      	bne.n	8002c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2203      	movs	r2, #3
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c50:	2201      	movs	r2, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 0201 	and.w	r2, r3, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d017      	beq.n	8002cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d123      	bne.n	8002d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	08da      	lsrs	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3208      	adds	r2, #8
 8002ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	220f      	movs	r2, #15
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	08da      	lsrs	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3208      	adds	r2, #8
 8002d06:	69b9      	ldr	r1, [r7, #24]
 8002d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0203 	and.w	r2, r3, #3
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80ae 	beq.w	8002eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <HAL_GPIO_Init+0x300>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4a5c      	ldr	r2, [pc, #368]	; (8002ec8 <HAL_GPIO_Init+0x300>)
 8002d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5e:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <HAL_GPIO_Init+0x300>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d6a:	4a58      	ldr	r2, [pc, #352]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	3302      	adds	r3, #2
 8002d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	220f      	movs	r2, #15
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4f      	ldr	r2, [pc, #316]	; (8002ed0 <HAL_GPIO_Init+0x308>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d025      	beq.n	8002de2 <HAL_GPIO_Init+0x21a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4e      	ldr	r2, [pc, #312]	; (8002ed4 <HAL_GPIO_Init+0x30c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01f      	beq.n	8002dde <HAL_GPIO_Init+0x216>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4d      	ldr	r2, [pc, #308]	; (8002ed8 <HAL_GPIO_Init+0x310>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d019      	beq.n	8002dda <HAL_GPIO_Init+0x212>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4c      	ldr	r2, [pc, #304]	; (8002edc <HAL_GPIO_Init+0x314>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_GPIO_Init+0x20e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4b      	ldr	r2, [pc, #300]	; (8002ee0 <HAL_GPIO_Init+0x318>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00d      	beq.n	8002dd2 <HAL_GPIO_Init+0x20a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4a      	ldr	r2, [pc, #296]	; (8002ee4 <HAL_GPIO_Init+0x31c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d007      	beq.n	8002dce <HAL_GPIO_Init+0x206>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a49      	ldr	r2, [pc, #292]	; (8002ee8 <HAL_GPIO_Init+0x320>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_GPIO_Init+0x202>
 8002dc6:	2306      	movs	r3, #6
 8002dc8:	e00c      	b.n	8002de4 <HAL_GPIO_Init+0x21c>
 8002dca:	2307      	movs	r3, #7
 8002dcc:	e00a      	b.n	8002de4 <HAL_GPIO_Init+0x21c>
 8002dce:	2305      	movs	r3, #5
 8002dd0:	e008      	b.n	8002de4 <HAL_GPIO_Init+0x21c>
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	e006      	b.n	8002de4 <HAL_GPIO_Init+0x21c>
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e004      	b.n	8002de4 <HAL_GPIO_Init+0x21c>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e002      	b.n	8002de4 <HAL_GPIO_Init+0x21c>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_GPIO_Init+0x21c>
 8002de2:	2300      	movs	r3, #0
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	f002 0203 	and.w	r2, r2, #3
 8002dea:	0092      	lsls	r2, r2, #2
 8002dec:	4093      	lsls	r3, r2
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df4:	4935      	ldr	r1, [pc, #212]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e02:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <HAL_GPIO_Init+0x324>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e26:	4a31      	ldr	r2, [pc, #196]	; (8002eec <HAL_GPIO_Init+0x324>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e2c:	4b2f      	ldr	r3, [pc, #188]	; (8002eec <HAL_GPIO_Init+0x324>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e50:	4a26      	ldr	r2, [pc, #152]	; (8002eec <HAL_GPIO_Init+0x324>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e56:	4b25      	ldr	r3, [pc, #148]	; (8002eec <HAL_GPIO_Init+0x324>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e7a:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <HAL_GPIO_Init+0x324>)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e80:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <HAL_GPIO_Init+0x324>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea4:	4a11      	ldr	r2, [pc, #68]	; (8002eec <HAL_GPIO_Init+0x324>)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3301      	adds	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	f67f ae96 	bls.w	8002be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40013800 	.word	0x40013800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40020c00 	.word	0x40020c00
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40021400 	.word	0x40021400
 8002ee8:	40021800 	.word	0x40021800
 8002eec:	40013c00 	.word	0x40013c00

08002ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
 8002efc:	4613      	mov	r3, r2
 8002efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f00:	787b      	ldrb	r3, [r7, #1]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f0c:	e003      	b.n	8002f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f0e:	887b      	ldrh	r3, [r7, #2]
 8002f10:	041a      	lsls	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	619a      	str	r2, [r3, #24]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a1f      	ldr	r2, [pc, #124]	; (8002fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_PWREx_EnableOverDrive+0x94>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f50:	f7fe fd7a 	bl	8001a48 <HAL_GetTick>
 8002f54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f56:	e009      	b.n	8002f6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f58:	f7fe fd76 	bl	8001a48 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f66:	d901      	bls.n	8002f6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e01f      	b.n	8002fac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f78:	d1ee      	bne.n	8002f58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f80:	f7fe fd62 	bl	8001a48 <HAL_GetTick>
 8002f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f86:	e009      	b.n	8002f9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f88:	f7fe fd5e 	bl	8001a48 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f96:	d901      	bls.n	8002f9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e007      	b.n	8002fac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fa8:	d1ee      	bne.n	8002f88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	420e0040 	.word	0x420e0040
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	420e0044 	.word	0x420e0044

08002fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0cc      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d90c      	bls.n	8003000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b65      	ldr	r3, [pc, #404]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b63      	ldr	r3, [pc, #396]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0b8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a58      	ldr	r2, [pc, #352]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800303a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	494d      	ldr	r1, [pc, #308]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d044      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d119      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d003      	beq.n	8003082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307e:	2b03      	cmp	r3, #3
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e067      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b37      	ldr	r3, [pc, #220]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4934      	ldr	r1, [pc, #208]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b4:	f7fe fcc8 	bl	8001a48 <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fe fcc4 	bl	8001a48 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e04f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d20c      	bcs.n	800310c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4916      	ldr	r1, [pc, #88]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	490e      	ldr	r1, [pc, #56]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314a:	f000 f855 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	490a      	ldr	r1, [pc, #40]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a09      	ldr	r2, [pc, #36]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fc28 	bl	80019c0 <HAL_InitTick>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023c00 	.word	0x40023c00
 8003180:	40023800 	.word	0x40023800
 8003184:	08005ac0 	.word	0x08005ac0
 8003188:	20000004 	.word	0x20000004
 800318c:	20000008 	.word	0x20000008

08003190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000004 	.word	0x20000004

080031a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031ac:	f7ff fff0 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0a9b      	lsrs	r3, r3, #10
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	; (80031cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	08005ad0 	.word	0x08005ad0

080031d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031d4:	f7ff ffdc 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0b5b      	lsrs	r3, r3, #13
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	08005ad0 	.word	0x08005ad0

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031fc:	b0ae      	sub	sp, #184	; 0xb8
 80031fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800321e:	4bcb      	ldr	r3, [pc, #812]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b0c      	cmp	r3, #12
 8003228:	f200 8206 	bhi.w	8003638 <HAL_RCC_GetSysClockFreq+0x440>
 800322c:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <HAL_RCC_GetSysClockFreq+0x3c>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003269 	.word	0x08003269
 8003238:	08003639 	.word	0x08003639
 800323c:	08003639 	.word	0x08003639
 8003240:	08003639 	.word	0x08003639
 8003244:	08003271 	.word	0x08003271
 8003248:	08003639 	.word	0x08003639
 800324c:	08003639 	.word	0x08003639
 8003250:	08003639 	.word	0x08003639
 8003254:	08003279 	.word	0x08003279
 8003258:	08003639 	.word	0x08003639
 800325c:	08003639 	.word	0x08003639
 8003260:	08003639 	.word	0x08003639
 8003264:	08003469 	.word	0x08003469
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003268:	4bb9      	ldr	r3, [pc, #740]	; (8003550 <HAL_RCC_GetSysClockFreq+0x358>)
 800326a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800326e:	e1e7      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003270:	4bb8      	ldr	r3, [pc, #736]	; (8003554 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003276:	e1e3      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003278:	4bb4      	ldr	r3, [pc, #720]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003284:	4bb1      	ldr	r3, [pc, #708]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d071      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003290:	4bae      	ldr	r3, [pc, #696]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	2200      	movs	r2, #0
 8003298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800329c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80032a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032b6:	4622      	mov	r2, r4
 80032b8:	462b      	mov	r3, r5
 80032ba:	f04f 0000 	mov.w	r0, #0
 80032be:	f04f 0100 	mov.w	r1, #0
 80032c2:	0159      	lsls	r1, r3, #5
 80032c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c8:	0150      	lsls	r0, r2, #5
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4621      	mov	r1, r4
 80032d0:	1a51      	subs	r1, r2, r1
 80032d2:	6439      	str	r1, [r7, #64]	; 0x40
 80032d4:	4629      	mov	r1, r5
 80032d6:	eb63 0301 	sbc.w	r3, r3, r1
 80032da:	647b      	str	r3, [r7, #68]	; 0x44
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80032e8:	4649      	mov	r1, r9
 80032ea:	018b      	lsls	r3, r1, #6
 80032ec:	4641      	mov	r1, r8
 80032ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032f2:	4641      	mov	r1, r8
 80032f4:	018a      	lsls	r2, r1, #6
 80032f6:	4641      	mov	r1, r8
 80032f8:	1a51      	subs	r1, r2, r1
 80032fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80032fc:	4649      	mov	r1, r9
 80032fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003310:	4649      	mov	r1, r9
 8003312:	00cb      	lsls	r3, r1, #3
 8003314:	4641      	mov	r1, r8
 8003316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800331a:	4641      	mov	r1, r8
 800331c:	00ca      	lsls	r2, r1, #3
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	4603      	mov	r3, r0
 8003324:	4622      	mov	r2, r4
 8003326:	189b      	adds	r3, r3, r2
 8003328:	633b      	str	r3, [r7, #48]	; 0x30
 800332a:	462b      	mov	r3, r5
 800332c:	460a      	mov	r2, r1
 800332e:	eb42 0303 	adc.w	r3, r2, r3
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003340:	4629      	mov	r1, r5
 8003342:	024b      	lsls	r3, r1, #9
 8003344:	4621      	mov	r1, r4
 8003346:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800334a:	4621      	mov	r1, r4
 800334c:	024a      	lsls	r2, r1, #9
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003356:	2200      	movs	r2, #0
 8003358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800335c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003360:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003364:	f7fc ffa4 	bl	80002b0 <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4613      	mov	r3, r2
 800336e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003372:	e067      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003374:	4b75      	ldr	r3, [pc, #468]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	2200      	movs	r2, #0
 800337c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003380:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003384:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338c:	67bb      	str	r3, [r7, #120]	; 0x78
 800338e:	2300      	movs	r3, #0
 8003390:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003392:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003396:	4622      	mov	r2, r4
 8003398:	462b      	mov	r3, r5
 800339a:	f04f 0000 	mov.w	r0, #0
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	0159      	lsls	r1, r3, #5
 80033a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a8:	0150      	lsls	r0, r2, #5
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4621      	mov	r1, r4
 80033b0:	1a51      	subs	r1, r2, r1
 80033b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80033b4:	4629      	mov	r1, r5
 80033b6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80033c8:	4649      	mov	r1, r9
 80033ca:	018b      	lsls	r3, r1, #6
 80033cc:	4641      	mov	r1, r8
 80033ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033d2:	4641      	mov	r1, r8
 80033d4:	018a      	lsls	r2, r1, #6
 80033d6:	4641      	mov	r1, r8
 80033d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80033dc:	4649      	mov	r1, r9
 80033de:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033f6:	4692      	mov	sl, r2
 80033f8:	469b      	mov	fp, r3
 80033fa:	4623      	mov	r3, r4
 80033fc:	eb1a 0303 	adds.w	r3, sl, r3
 8003400:	623b      	str	r3, [r7, #32]
 8003402:	462b      	mov	r3, r5
 8003404:	eb4b 0303 	adc.w	r3, fp, r3
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003416:	4629      	mov	r1, r5
 8003418:	028b      	lsls	r3, r1, #10
 800341a:	4621      	mov	r1, r4
 800341c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003420:	4621      	mov	r1, r4
 8003422:	028a      	lsls	r2, r1, #10
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800342c:	2200      	movs	r2, #0
 800342e:	673b      	str	r3, [r7, #112]	; 0x70
 8003430:	677a      	str	r2, [r7, #116]	; 0x74
 8003432:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003436:	f7fc ff3b 	bl	80002b0 <__aeabi_uldivmod>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4613      	mov	r3, r2
 8003440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003444:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	3301      	adds	r3, #1
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800345a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003466:	e0eb      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003468:	4b38      	ldr	r3, [pc, #224]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003474:	4b35      	ldr	r3, [pc, #212]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d06b      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	2200      	movs	r2, #0
 8003488:	66bb      	str	r3, [r7, #104]	; 0x68
 800348a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800348c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800348e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003492:	663b      	str	r3, [r7, #96]	; 0x60
 8003494:	2300      	movs	r3, #0
 8003496:	667b      	str	r3, [r7, #100]	; 0x64
 8003498:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800349c:	4622      	mov	r2, r4
 800349e:	462b      	mov	r3, r5
 80034a0:	f04f 0000 	mov.w	r0, #0
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	0159      	lsls	r1, r3, #5
 80034aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ae:	0150      	lsls	r0, r2, #5
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4621      	mov	r1, r4
 80034b6:	1a51      	subs	r1, r2, r1
 80034b8:	61b9      	str	r1, [r7, #24]
 80034ba:	4629      	mov	r1, r5
 80034bc:	eb63 0301 	sbc.w	r3, r3, r1
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80034ce:	4659      	mov	r1, fp
 80034d0:	018b      	lsls	r3, r1, #6
 80034d2:	4651      	mov	r1, sl
 80034d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034d8:	4651      	mov	r1, sl
 80034da:	018a      	lsls	r2, r1, #6
 80034dc:	4651      	mov	r1, sl
 80034de:	ebb2 0801 	subs.w	r8, r2, r1
 80034e2:	4659      	mov	r1, fp
 80034e4:	eb63 0901 	sbc.w	r9, r3, r1
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034fc:	4690      	mov	r8, r2
 80034fe:	4699      	mov	r9, r3
 8003500:	4623      	mov	r3, r4
 8003502:	eb18 0303 	adds.w	r3, r8, r3
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	462b      	mov	r3, r5
 800350a:	eb49 0303 	adc.w	r3, r9, r3
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800351c:	4629      	mov	r1, r5
 800351e:	024b      	lsls	r3, r1, #9
 8003520:	4621      	mov	r1, r4
 8003522:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003526:	4621      	mov	r1, r4
 8003528:	024a      	lsls	r2, r1, #9
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003532:	2200      	movs	r2, #0
 8003534:	65bb      	str	r3, [r7, #88]	; 0x58
 8003536:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003538:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800353c:	f7fc feb8 	bl	80002b0 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800354a:	e065      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x420>
 800354c:	40023800 	.word	0x40023800
 8003550:	00f42400 	.word	0x00f42400
 8003554:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003558:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <HAL_RCC_GetSysClockFreq+0x458>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	099b      	lsrs	r3, r3, #6
 800355e:	2200      	movs	r2, #0
 8003560:	4618      	mov	r0, r3
 8003562:	4611      	mov	r1, r2
 8003564:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003568:	653b      	str	r3, [r7, #80]	; 0x50
 800356a:	2300      	movs	r3, #0
 800356c:	657b      	str	r3, [r7, #84]	; 0x54
 800356e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003572:	4642      	mov	r2, r8
 8003574:	464b      	mov	r3, r9
 8003576:	f04f 0000 	mov.w	r0, #0
 800357a:	f04f 0100 	mov.w	r1, #0
 800357e:	0159      	lsls	r1, r3, #5
 8003580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003584:	0150      	lsls	r0, r2, #5
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4641      	mov	r1, r8
 800358c:	1a51      	subs	r1, r2, r1
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	4649      	mov	r1, r9
 8003592:	eb63 0301 	sbc.w	r3, r3, r1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80035a4:	4659      	mov	r1, fp
 80035a6:	018b      	lsls	r3, r1, #6
 80035a8:	4651      	mov	r1, sl
 80035aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ae:	4651      	mov	r1, sl
 80035b0:	018a      	lsls	r2, r1, #6
 80035b2:	4651      	mov	r1, sl
 80035b4:	1a54      	subs	r4, r2, r1
 80035b6:	4659      	mov	r1, fp
 80035b8:	eb63 0501 	sbc.w	r5, r3, r1
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	00eb      	lsls	r3, r5, #3
 80035c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ca:	00e2      	lsls	r2, r4, #3
 80035cc:	4614      	mov	r4, r2
 80035ce:	461d      	mov	r5, r3
 80035d0:	4643      	mov	r3, r8
 80035d2:	18e3      	adds	r3, r4, r3
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	464b      	mov	r3, r9
 80035d8:	eb45 0303 	adc.w	r3, r5, r3
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ea:	4629      	mov	r1, r5
 80035ec:	028b      	lsls	r3, r1, #10
 80035ee:	4621      	mov	r1, r4
 80035f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035f4:	4621      	mov	r1, r4
 80035f6:	028a      	lsls	r2, r1, #10
 80035f8:	4610      	mov	r0, r2
 80035fa:	4619      	mov	r1, r3
 80035fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003600:	2200      	movs	r2, #0
 8003602:	64bb      	str	r3, [r7, #72]	; 0x48
 8003604:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003606:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800360a:	f7fc fe51 	bl	80002b0 <__aeabi_uldivmod>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4613      	mov	r3, r2
 8003614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <HAL_RCC_GetSysClockFreq+0x458>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	0f1b      	lsrs	r3, r3, #28
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800362a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800362e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003636:	e003      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_RCC_GetSysClockFreq+0x45c>)
 800363a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800363e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003640:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003644:	4618      	mov	r0, r3
 8003646:	37b8      	adds	r7, #184	; 0xb8
 8003648:	46bd      	mov	sp, r7
 800364a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800
 8003654:	00f42400 	.word	0x00f42400

08003658 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e28d      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8083 	beq.w	800377e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003678:	4b94      	ldr	r3, [pc, #592]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 030c 	and.w	r3, r3, #12
 8003680:	2b04      	cmp	r3, #4
 8003682:	d019      	beq.n	80036b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003684:	4b91      	ldr	r3, [pc, #580]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800368c:	2b08      	cmp	r3, #8
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003690:	4b8e      	ldr	r3, [pc, #568]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800369c:	d00c      	beq.n	80036b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369e:	4b8b      	ldr	r3, [pc, #556]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d112      	bne.n	80036d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036aa:	4b88      	ldr	r3, [pc, #544]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b6:	d10b      	bne.n	80036d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	4b84      	ldr	r3, [pc, #528]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d05b      	beq.n	800377c <HAL_RCC_OscConfig+0x124>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d157      	bne.n	800377c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e25a      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d106      	bne.n	80036e8 <HAL_RCC_OscConfig+0x90>
 80036da:	4b7c      	ldr	r3, [pc, #496]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a7b      	ldr	r2, [pc, #492]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e01d      	b.n	8003724 <HAL_RCC_OscConfig+0xcc>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0xb4>
 80036f2:	4b76      	ldr	r3, [pc, #472]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a75      	ldr	r2, [pc, #468]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b73      	ldr	r3, [pc, #460]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a72      	ldr	r2, [pc, #456]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e00b      	b.n	8003724 <HAL_RCC_OscConfig+0xcc>
 800370c:	4b6f      	ldr	r3, [pc, #444]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a6e      	ldr	r2, [pc, #440]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b6c      	ldr	r3, [pc, #432]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6b      	ldr	r2, [pc, #428]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800371e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fe f98c 	bl	8001a48 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003734:	f7fe f988 	bl	8001a48 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	; 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e21f      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	4b61      	ldr	r3, [pc, #388]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0xdc>
 8003752:	e014      	b.n	800377e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fe f978 	bl	8001a48 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800375c:	f7fe f974 	bl	8001a48 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e20b      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376e:	4b57      	ldr	r3, [pc, #348]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x104>
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d06f      	beq.n	800386a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800378a:	4b50      	ldr	r3, [pc, #320]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b00      	cmp	r3, #0
 8003794:	d017      	beq.n	80037c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003796:	4b4d      	ldr	r3, [pc, #308]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d105      	bne.n	80037ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037a2:	4b4a      	ldr	r3, [pc, #296]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ae:	4b47      	ldr	r3, [pc, #284]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d11c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ba:	4b44      	ldr	r3, [pc, #272]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d116      	bne.n	80037f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c6:	4b41      	ldr	r3, [pc, #260]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_RCC_OscConfig+0x186>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d001      	beq.n	80037de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e1d3      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037de:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4937      	ldr	r1, [pc, #220]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f2:	e03a      	b.n	800386a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d020      	beq.n	800383e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037fc:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <HAL_RCC_OscConfig+0x278>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003802:	f7fe f921 	bl	8001a48 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380a:	f7fe f91d 	bl	8001a48 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e1b4      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381c:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003828:	4b28      	ldr	r3, [pc, #160]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4925      	ldr	r1, [pc, #148]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]
 800383c:	e015      	b.n	800386a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_OscConfig+0x278>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fe f900 	bl	8001a48 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800384c:	f7fe f8fc 	bl	8001a48 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e193      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d036      	beq.n	80038e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d016      	beq.n	80038ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387e:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fe f8e0 	bl	8001a48 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388c:	f7fe f8dc 	bl	8001a48 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e173      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80038a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0x234>
 80038aa:	e01b      	b.n	80038e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7fe f8c9 	bl	8001a48 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b8:	e00e      	b.n	80038d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ba:	f7fe f8c5 	bl	8001a48 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d907      	bls.n	80038d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e15c      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
 80038cc:	40023800 	.word	0x40023800
 80038d0:	42470000 	.word	0x42470000
 80038d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d8:	4b8a      	ldr	r3, [pc, #552]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 80038da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ea      	bne.n	80038ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8097 	beq.w	8003a20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f2:	2300      	movs	r3, #0
 80038f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f6:	4b83      	ldr	r3, [pc, #524]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	4b7f      	ldr	r3, [pc, #508]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a7e      	ldr	r2, [pc, #504]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 800390c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003910:	6413      	str	r3, [r2, #64]	; 0x40
 8003912:	4b7c      	ldr	r3, [pc, #496]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003922:	4b79      	ldr	r3, [pc, #484]	; (8003b08 <HAL_RCC_OscConfig+0x4b0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d118      	bne.n	8003960 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <HAL_RCC_OscConfig+0x4b0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a75      	ldr	r2, [pc, #468]	; (8003b08 <HAL_RCC_OscConfig+0x4b0>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393a:	f7fe f885 	bl	8001a48 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003942:	f7fe f881 	bl	8001a48 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e118      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	4b6c      	ldr	r3, [pc, #432]	; (8003b08 <HAL_RCC_OscConfig+0x4b0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d106      	bne.n	8003976 <HAL_RCC_OscConfig+0x31e>
 8003968:	4b66      	ldr	r3, [pc, #408]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	4a65      	ldr	r2, [pc, #404]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	6713      	str	r3, [r2, #112]	; 0x70
 8003974:	e01c      	b.n	80039b0 <HAL_RCC_OscConfig+0x358>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b05      	cmp	r3, #5
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x340>
 800397e:	4b61      	ldr	r3, [pc, #388]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a60      	ldr	r2, [pc, #384]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003984:	f043 0304 	orr.w	r3, r3, #4
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
 800398a:	4b5e      	ldr	r3, [pc, #376]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a5d      	ldr	r2, [pc, #372]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6713      	str	r3, [r2, #112]	; 0x70
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0x358>
 8003998:	4b5a      	ldr	r3, [pc, #360]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	4a59      	ldr	r2, [pc, #356]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	6713      	str	r3, [r2, #112]	; 0x70
 80039a4:	4b57      	ldr	r3, [pc, #348]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	4a56      	ldr	r2, [pc, #344]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 80039aa:	f023 0304 	bic.w	r3, r3, #4
 80039ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d015      	beq.n	80039e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b8:	f7fe f846 	bl	8001a48 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c0:	f7fe f842 	bl	8001a48 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e0d7      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d6:	4b4b      	ldr	r3, [pc, #300]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0ee      	beq.n	80039c0 <HAL_RCC_OscConfig+0x368>
 80039e2:	e014      	b.n	8003a0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7fe f830 	bl	8001a48 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fe f82c 	bl	8001a48 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0c1      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a02:	4b40      	ldr	r3, [pc, #256]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ee      	bne.n	80039ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d105      	bne.n	8003a20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a14:	4b3b      	ldr	r3, [pc, #236]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	4a3a      	ldr	r2, [pc, #232]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80ad 	beq.w	8003b84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a2a:	4b36      	ldr	r3, [pc, #216]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d060      	beq.n	8003af8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d145      	bne.n	8003aca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <HAL_RCC_OscConfig+0x4b4>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fe f800 	bl	8001a48 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7fd fffc 	bl	8001a48 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e093      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	4b29      	ldr	r3, [pc, #164]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	019b      	lsls	r3, r3, #6
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	3b01      	subs	r3, #1
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	071b      	lsls	r3, r3, #28
 8003a96:	491b      	ldr	r1, [pc, #108]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <HAL_RCC_OscConfig+0x4b4>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fd ffd1 	bl	8001a48 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fd ffcd 	bl	8001a48 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e064      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x452>
 8003ac8:	e05c      	b.n	8003b84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <HAL_RCC_OscConfig+0x4b4>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fd ffba 	bl	8001a48 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd ffb6 	bl	8001a48 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e04d      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x480>
 8003af6:	e045      	b.n	8003b84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e040      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40007000 	.word	0x40007000
 8003b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <HAL_RCC_OscConfig+0x538>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d030      	beq.n	8003b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d129      	bne.n	8003b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d122      	bne.n	8003b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b40:	4013      	ands	r3, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d119      	bne.n	8003b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d10f      	bne.n	8003b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800

08003b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e07b      	b.n	8003c9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d108      	bne.n	8003bc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb6:	d009      	beq.n	8003bcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	61da      	str	r2, [r3, #28]
 8003bbe:	e005      	b.n	8003bcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fd fce8 	bl	80015bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c50:	ea42 0103 	orr.w	r1, r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	f003 0104 	and.w	r1, r3, #4
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	f003 0210 	and.w	r2, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b088      	sub	sp, #32
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_SPI_Transmit+0x22>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e126      	b.n	8003f16 <HAL_SPI_Transmit+0x270>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cd0:	f7fd feba 	bl	8001a48 <HAL_GetTick>
 8003cd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d002      	beq.n	8003cec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cea:	e10b      	b.n	8003f04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_SPI_Transmit+0x52>
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cfc:	e102      	b.n	8003f04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2203      	movs	r2, #3
 8003d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	88fa      	ldrh	r2, [r7, #6]
 8003d16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	88fa      	ldrh	r2, [r7, #6]
 8003d1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d44:	d10f      	bne.n	8003d66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d007      	beq.n	8003d84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8c:	d14b      	bne.n	8003e26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_SPI_Transmit+0xf6>
 8003d96:	8afb      	ldrh	r3, [r7, #22]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d13e      	bne.n	8003e1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	881a      	ldrh	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	1c9a      	adds	r2, r3, #2
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dc0:	e02b      	b.n	8003e1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d112      	bne.n	8003df6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	881a      	ldrh	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	1c9a      	adds	r2, r3, #2
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003df4:	e011      	b.n	8003e1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df6:	f7fd fe27 	bl	8001a48 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d803      	bhi.n	8003e0e <HAL_SPI_Transmit+0x168>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d102      	bne.n	8003e14 <HAL_SPI_Transmit+0x16e>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e18:	e074      	b.n	8003f04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ce      	bne.n	8003dc2 <HAL_SPI_Transmit+0x11c>
 8003e24:	e04c      	b.n	8003ec0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SPI_Transmit+0x18e>
 8003e2e:	8afb      	ldrh	r3, [r7, #22]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d140      	bne.n	8003eb6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e5a:	e02c      	b.n	8003eb6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d113      	bne.n	8003e92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	7812      	ldrb	r2, [r2, #0]
 8003e76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e90:	e011      	b.n	8003eb6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e92:	f7fd fdd9 	bl	8001a48 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d803      	bhi.n	8003eaa <HAL_SPI_Transmit+0x204>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d102      	bne.n	8003eb0 <HAL_SPI_Transmit+0x20a>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003eb4:	e026      	b.n	8003f04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1cd      	bne.n	8003e5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	6839      	ldr	r1, [r7, #0]
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fa55 	bl	8004374 <SPI_EndRxTxTransaction>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e000      	b.n	8003f04 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3720      	adds	r7, #32
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b08c      	sub	sp, #48	; 0x30
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x26>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e18a      	b.n	800425a <HAL_SPI_TransmitReceive+0x33c>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f4c:	f7fd fd7c 	bl	8001a48 <HAL_GetTick>
 8003f50:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d00f      	beq.n	8003f8e <HAL_SPI_TransmitReceive+0x70>
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f74:	d107      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d103      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x68>
 8003f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d003      	beq.n	8003f8e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f86:	2302      	movs	r3, #2
 8003f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f8c:	e15b      	b.n	8004246 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_SPI_TransmitReceive+0x82>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_TransmitReceive+0x82>
 8003f9a:	887b      	ldrh	r3, [r7, #2]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d103      	bne.n	8003fa8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fa6:	e14e      	b.n	8004246 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d003      	beq.n	8003fbc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2205      	movs	r2, #5
 8003fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	887a      	ldrh	r2, [r7, #2]
 8003fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	887a      	ldrh	r2, [r7, #2]
 8003fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	887a      	ldrh	r2, [r7, #2]
 8003fde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d007      	beq.n	8004010 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004018:	d178      	bne.n	800410c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_SPI_TransmitReceive+0x10a>
 8004022:	8b7b      	ldrh	r3, [r7, #26]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d166      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	881a      	ldrh	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	1c9a      	adds	r2, r3, #2
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800404c:	e053      	b.n	80040f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b02      	cmp	r3, #2
 800405a:	d11b      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x176>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <HAL_SPI_TransmitReceive+0x176>
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	2b01      	cmp	r3, #1
 800406a:	d113      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	881a      	ldrh	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	1c9a      	adds	r2, r3, #2
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d119      	bne.n	80040d6 <HAL_SPI_TransmitReceive+0x1b8>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d014      	beq.n	80040d6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	b292      	uxth	r2, r2
 80040b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040d2:	2301      	movs	r3, #1
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040d6:	f7fd fcb7 	bl	8001a48 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d807      	bhi.n	80040f6 <HAL_SPI_TransmitReceive+0x1d8>
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d003      	beq.n	80040f6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040f4:	e0a7      	b.n	8004246 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1a6      	bne.n	800404e <HAL_SPI_TransmitReceive+0x130>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1a1      	bne.n	800404e <HAL_SPI_TransmitReceive+0x130>
 800410a:	e07c      	b.n	8004206 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_SPI_TransmitReceive+0x1fc>
 8004114:	8b7b      	ldrh	r3, [r7, #26]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d16b      	bne.n	80041f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	330c      	adds	r3, #12
 8004124:	7812      	ldrb	r2, [r2, #0]
 8004126:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004140:	e057      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b02      	cmp	r3, #2
 800414e:	d11c      	bne.n	800418a <HAL_SPI_TransmitReceive+0x26c>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d017      	beq.n	800418a <HAL_SPI_TransmitReceive+0x26c>
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d114      	bne.n	800418a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	7812      	ldrb	r2, [r2, #0]
 800416c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d119      	bne.n	80041cc <HAL_SPI_TransmitReceive+0x2ae>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d014      	beq.n	80041cc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041c8:	2301      	movs	r3, #1
 80041ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041cc:	f7fd fc3c 	bl	8001a48 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041d8:	429a      	cmp	r2, r3
 80041da:	d803      	bhi.n	80041e4 <HAL_SPI_TransmitReceive+0x2c6>
 80041dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e2:	d102      	bne.n	80041ea <HAL_SPI_TransmitReceive+0x2cc>
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d103      	bne.n	80041f2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041f0:	e029      	b.n	8004246 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1a2      	bne.n	8004142 <HAL_SPI_TransmitReceive+0x224>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d19d      	bne.n	8004142 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004208:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f8b2 	bl	8004374 <SPI_EndRxTxTransaction>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d006      	beq.n	8004224 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004222:	e010      	b.n	8004246 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	e000      	b.n	8004246 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004244:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004256:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800425a:	4618      	mov	r0, r3
 800425c:	3730      	adds	r7, #48	; 0x30
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004274:	f7fd fbe8 	bl	8001a48 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	4413      	add	r3, r2
 8004282:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004284:	f7fd fbe0 	bl	8001a48 <HAL_GetTick>
 8004288:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800428a:	4b39      	ldr	r3, [pc, #228]	; (8004370 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	015b      	lsls	r3, r3, #5
 8004290:	0d1b      	lsrs	r3, r3, #20
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	fb02 f303 	mul.w	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800429a:	e054      	b.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d050      	beq.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042a4:	f7fd fbd0 	bl	8001a48 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d902      	bls.n	80042ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d13d      	bne.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d2:	d111      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042dc:	d004      	beq.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e6:	d107      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004300:	d10f      	bne.n	8004322 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004320:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e017      	b.n	8004366 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3b01      	subs	r3, #1
 8004344:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4013      	ands	r3, r2
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	429a      	cmp	r2, r3
 8004362:	d19b      	bne.n	800429c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000004 	.word	0x20000004

08004374 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <SPI_EndRxTxTransaction+0x7c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <SPI_EndRxTxTransaction+0x80>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	0d5b      	lsrs	r3, r3, #21
 800438c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004390:	fb02 f303 	mul.w	r3, r2, r3
 8004394:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800439e:	d112      	bne.n	80043c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff ff5a 	bl	8004264 <SPI_WaitFlagStateUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e00f      	b.n	80043e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043dc:	2b80      	cmp	r3, #128	; 0x80
 80043de:	d0f2      	beq.n	80043c6 <SPI_EndRxTxTransaction+0x52>
 80043e0:	e000      	b.n	80043e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80043e2:	bf00      	nop
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000004 	.word	0x20000004
 80043f4:	165e9f81 	.word	0x165e9f81

080043f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e03f      	b.n	800448a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fd f934 	bl	800168c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2224      	movs	r2, #36	; 0x24
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800443a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f829 	bl	8004494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004498:	b0c0      	sub	sp, #256	; 0x100
 800449a:	af00      	add	r7, sp, #0
 800449c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	68d9      	ldr	r1, [r3, #12]
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	ea40 0301 	orr.w	r3, r0, r1
 80044bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044ec:	f021 010c 	bic.w	r1, r1, #12
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044fa:	430b      	orrs	r3, r1
 80044fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450e:	6999      	ldr	r1, [r3, #24]
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	ea40 0301 	orr.w	r3, r0, r1
 800451a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4b8f      	ldr	r3, [pc, #572]	; (8004760 <UART_SetConfig+0x2cc>)
 8004524:	429a      	cmp	r2, r3
 8004526:	d005      	beq.n	8004534 <UART_SetConfig+0xa0>
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b8d      	ldr	r3, [pc, #564]	; (8004764 <UART_SetConfig+0x2d0>)
 8004530:	429a      	cmp	r2, r3
 8004532:	d104      	bne.n	800453e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004534:	f7fe fe4c 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 8004538:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800453c:	e003      	b.n	8004546 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800453e:	f7fe fe33 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8004542:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004550:	f040 810c 	bne.w	800476c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004558:	2200      	movs	r2, #0
 800455a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800455e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004566:	4622      	mov	r2, r4
 8004568:	462b      	mov	r3, r5
 800456a:	1891      	adds	r1, r2, r2
 800456c:	65b9      	str	r1, [r7, #88]	; 0x58
 800456e:	415b      	adcs	r3, r3
 8004570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004576:	4621      	mov	r1, r4
 8004578:	eb12 0801 	adds.w	r8, r2, r1
 800457c:	4629      	mov	r1, r5
 800457e:	eb43 0901 	adc.w	r9, r3, r1
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800458e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004596:	4690      	mov	r8, r2
 8004598:	4699      	mov	r9, r3
 800459a:	4623      	mov	r3, r4
 800459c:	eb18 0303 	adds.w	r3, r8, r3
 80045a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045a4:	462b      	mov	r3, r5
 80045a6:	eb49 0303 	adc.w	r3, r9, r3
 80045aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045c2:	460b      	mov	r3, r1
 80045c4:	18db      	adds	r3, r3, r3
 80045c6:	653b      	str	r3, [r7, #80]	; 0x50
 80045c8:	4613      	mov	r3, r2
 80045ca:	eb42 0303 	adc.w	r3, r2, r3
 80045ce:	657b      	str	r3, [r7, #84]	; 0x54
 80045d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045d8:	f7fb fe6a 	bl	80002b0 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4b61      	ldr	r3, [pc, #388]	; (8004768 <UART_SetConfig+0x2d4>)
 80045e2:	fba3 2302 	umull	r2, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	011c      	lsls	r4, r3, #4
 80045ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045fc:	4642      	mov	r2, r8
 80045fe:	464b      	mov	r3, r9
 8004600:	1891      	adds	r1, r2, r2
 8004602:	64b9      	str	r1, [r7, #72]	; 0x48
 8004604:	415b      	adcs	r3, r3
 8004606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800460c:	4641      	mov	r1, r8
 800460e:	eb12 0a01 	adds.w	sl, r2, r1
 8004612:	4649      	mov	r1, r9
 8004614:	eb43 0b01 	adc.w	fp, r3, r1
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800462c:	4692      	mov	sl, r2
 800462e:	469b      	mov	fp, r3
 8004630:	4643      	mov	r3, r8
 8004632:	eb1a 0303 	adds.w	r3, sl, r3
 8004636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800463a:	464b      	mov	r3, r9
 800463c:	eb4b 0303 	adc.w	r3, fp, r3
 8004640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004650:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004658:	460b      	mov	r3, r1
 800465a:	18db      	adds	r3, r3, r3
 800465c:	643b      	str	r3, [r7, #64]	; 0x40
 800465e:	4613      	mov	r3, r2
 8004660:	eb42 0303 	adc.w	r3, r2, r3
 8004664:	647b      	str	r3, [r7, #68]	; 0x44
 8004666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800466a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800466e:	f7fb fe1f 	bl	80002b0 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4611      	mov	r1, r2
 8004678:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <UART_SetConfig+0x2d4>)
 800467a:	fba3 2301 	umull	r2, r3, r3, r1
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	2264      	movs	r2, #100	; 0x64
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	1acb      	subs	r3, r1, r3
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800468e:	4b36      	ldr	r3, [pc, #216]	; (8004768 <UART_SetConfig+0x2d4>)
 8004690:	fba3 2302 	umull	r2, r3, r3, r2
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800469c:	441c      	add	r4, r3
 800469e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046b0:	4642      	mov	r2, r8
 80046b2:	464b      	mov	r3, r9
 80046b4:	1891      	adds	r1, r2, r2
 80046b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80046b8:	415b      	adcs	r3, r3
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046c0:	4641      	mov	r1, r8
 80046c2:	1851      	adds	r1, r2, r1
 80046c4:	6339      	str	r1, [r7, #48]	; 0x30
 80046c6:	4649      	mov	r1, r9
 80046c8:	414b      	adcs	r3, r1
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046d8:	4659      	mov	r1, fp
 80046da:	00cb      	lsls	r3, r1, #3
 80046dc:	4651      	mov	r1, sl
 80046de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e2:	4651      	mov	r1, sl
 80046e4:	00ca      	lsls	r2, r1, #3
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	4642      	mov	r2, r8
 80046ee:	189b      	adds	r3, r3, r2
 80046f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046f4:	464b      	mov	r3, r9
 80046f6:	460a      	mov	r2, r1
 80046f8:	eb42 0303 	adc.w	r3, r2, r3
 80046fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800470c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004714:	460b      	mov	r3, r1
 8004716:	18db      	adds	r3, r3, r3
 8004718:	62bb      	str	r3, [r7, #40]	; 0x28
 800471a:	4613      	mov	r3, r2
 800471c:	eb42 0303 	adc.w	r3, r2, r3
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800472a:	f7fb fdc1 	bl	80002b0 <__aeabi_uldivmod>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <UART_SetConfig+0x2d4>)
 8004734:	fba3 1302 	umull	r1, r3, r3, r2
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	2164      	movs	r1, #100	; 0x64
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	3332      	adds	r3, #50	; 0x32
 8004746:	4a08      	ldr	r2, [pc, #32]	; (8004768 <UART_SetConfig+0x2d4>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	f003 0207 	and.w	r2, r3, #7
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4422      	add	r2, r4
 800475a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800475c:	e105      	b.n	800496a <UART_SetConfig+0x4d6>
 800475e:	bf00      	nop
 8004760:	40011000 	.word	0x40011000
 8004764:	40011400 	.word	0x40011400
 8004768:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800476c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004770:	2200      	movs	r2, #0
 8004772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004776:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800477a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800477e:	4642      	mov	r2, r8
 8004780:	464b      	mov	r3, r9
 8004782:	1891      	adds	r1, r2, r2
 8004784:	6239      	str	r1, [r7, #32]
 8004786:	415b      	adcs	r3, r3
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
 800478a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800478e:	4641      	mov	r1, r8
 8004790:	1854      	adds	r4, r2, r1
 8004792:	4649      	mov	r1, r9
 8004794:	eb43 0501 	adc.w	r5, r3, r1
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	00eb      	lsls	r3, r5, #3
 80047a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047a6:	00e2      	lsls	r2, r4, #3
 80047a8:	4614      	mov	r4, r2
 80047aa:	461d      	mov	r5, r3
 80047ac:	4643      	mov	r3, r8
 80047ae:	18e3      	adds	r3, r4, r3
 80047b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047b4:	464b      	mov	r3, r9
 80047b6:	eb45 0303 	adc.w	r3, r5, r3
 80047ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047da:	4629      	mov	r1, r5
 80047dc:	008b      	lsls	r3, r1, #2
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e4:	4621      	mov	r1, r4
 80047e6:	008a      	lsls	r2, r1, #2
 80047e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047ec:	f7fb fd60 	bl	80002b0 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4b60      	ldr	r3, [pc, #384]	; (8004978 <UART_SetConfig+0x4e4>)
 80047f6:	fba3 2302 	umull	r2, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	011c      	lsls	r4, r3, #4
 80047fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004802:	2200      	movs	r2, #0
 8004804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800480c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004810:	4642      	mov	r2, r8
 8004812:	464b      	mov	r3, r9
 8004814:	1891      	adds	r1, r2, r2
 8004816:	61b9      	str	r1, [r7, #24]
 8004818:	415b      	adcs	r3, r3
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004820:	4641      	mov	r1, r8
 8004822:	1851      	adds	r1, r2, r1
 8004824:	6139      	str	r1, [r7, #16]
 8004826:	4649      	mov	r1, r9
 8004828:	414b      	adcs	r3, r1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004838:	4659      	mov	r1, fp
 800483a:	00cb      	lsls	r3, r1, #3
 800483c:	4651      	mov	r1, sl
 800483e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004842:	4651      	mov	r1, sl
 8004844:	00ca      	lsls	r2, r1, #3
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	4603      	mov	r3, r0
 800484c:	4642      	mov	r2, r8
 800484e:	189b      	adds	r3, r3, r2
 8004850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004854:	464b      	mov	r3, r9
 8004856:	460a      	mov	r2, r1
 8004858:	eb42 0303 	adc.w	r3, r2, r3
 800485c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	67bb      	str	r3, [r7, #120]	; 0x78
 800486a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004878:	4649      	mov	r1, r9
 800487a:	008b      	lsls	r3, r1, #2
 800487c:	4641      	mov	r1, r8
 800487e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004882:	4641      	mov	r1, r8
 8004884:	008a      	lsls	r2, r1, #2
 8004886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800488a:	f7fb fd11 	bl	80002b0 <__aeabi_uldivmod>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4b39      	ldr	r3, [pc, #228]	; (8004978 <UART_SetConfig+0x4e4>)
 8004894:	fba3 1302 	umull	r1, r3, r3, r2
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	2164      	movs	r1, #100	; 0x64
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	3332      	adds	r3, #50	; 0x32
 80048a6:	4a34      	ldr	r2, [pc, #208]	; (8004978 <UART_SetConfig+0x4e4>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b2:	441c      	add	r4, r3
 80048b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b8:	2200      	movs	r2, #0
 80048ba:	673b      	str	r3, [r7, #112]	; 0x70
 80048bc:	677a      	str	r2, [r7, #116]	; 0x74
 80048be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048c2:	4642      	mov	r2, r8
 80048c4:	464b      	mov	r3, r9
 80048c6:	1891      	adds	r1, r2, r2
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	415b      	adcs	r3, r3
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048d2:	4641      	mov	r1, r8
 80048d4:	1851      	adds	r1, r2, r1
 80048d6:	6039      	str	r1, [r7, #0]
 80048d8:	4649      	mov	r1, r9
 80048da:	414b      	adcs	r3, r1
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048ea:	4659      	mov	r1, fp
 80048ec:	00cb      	lsls	r3, r1, #3
 80048ee:	4651      	mov	r1, sl
 80048f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f4:	4651      	mov	r1, sl
 80048f6:	00ca      	lsls	r2, r1, #3
 80048f8:	4610      	mov	r0, r2
 80048fa:	4619      	mov	r1, r3
 80048fc:	4603      	mov	r3, r0
 80048fe:	4642      	mov	r2, r8
 8004900:	189b      	adds	r3, r3, r2
 8004902:	66bb      	str	r3, [r7, #104]	; 0x68
 8004904:	464b      	mov	r3, r9
 8004906:	460a      	mov	r2, r1
 8004908:	eb42 0303 	adc.w	r3, r2, r3
 800490c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	663b      	str	r3, [r7, #96]	; 0x60
 8004918:	667a      	str	r2, [r7, #100]	; 0x64
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004926:	4649      	mov	r1, r9
 8004928:	008b      	lsls	r3, r1, #2
 800492a:	4641      	mov	r1, r8
 800492c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004930:	4641      	mov	r1, r8
 8004932:	008a      	lsls	r2, r1, #2
 8004934:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004938:	f7fb fcba 	bl	80002b0 <__aeabi_uldivmod>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <UART_SetConfig+0x4e4>)
 8004942:	fba3 1302 	umull	r1, r3, r3, r2
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2164      	movs	r1, #100	; 0x64
 800494a:	fb01 f303 	mul.w	r3, r1, r3
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	3332      	adds	r3, #50	; 0x32
 8004954:	4a08      	ldr	r2, [pc, #32]	; (8004978 <UART_SetConfig+0x4e4>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	f003 020f 	and.w	r2, r3, #15
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4422      	add	r2, r4
 8004968:	609a      	str	r2, [r3, #8]
}
 800496a:	bf00      	nop
 800496c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004970:	46bd      	mov	sp, r7
 8004972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004976:	bf00      	nop
 8004978:	51eb851f 	.word	0x51eb851f

0800497c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004980:	4904      	ldr	r1, [pc, #16]	; (8004994 <MX_FATFS_Init+0x18>)
 8004982:	4805      	ldr	r0, [pc, #20]	; (8004998 <MX_FATFS_Init+0x1c>)
 8004984:	f000 f8b2 	bl	8004aec <FATFS_LinkDriver>
 8004988:	4603      	mov	r3, r0
 800498a:	461a      	mov	r2, r3
 800498c:	4b03      	ldr	r3, [pc, #12]	; (800499c <MX_FATFS_Init+0x20>)
 800498e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004990:	bf00      	nop
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20004214 	.word	0x20004214
 8004998:	20000010 	.word	0x20000010
 800499c:	20004210 	.word	0x20004210

080049a0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_initialize(pdrv);
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fb ffbb 	bl	8000928 <SD_disk_initialize>
 80049b2:	4603      	mov	r3, r0
 80049b4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	4603      	mov	r3, r0
 80049c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_status(pdrv);
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fc f898 	bl	8000b00 <SD_disk_status>
 80049d0:	4603      	mov	r3, r0
 80049d2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80049ec:	7bf8      	ldrb	r0, [r7, #15]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	f7fc f89a 	bl	8000b2c <SD_disk_read>
 80049f8:	4603      	mov	r3, r0
 80049fa:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	4603      	mov	r3, r0
 8004a12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8004a14:	7bf8      	ldrb	r0, [r7, #15]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	f7fc f8f0 	bl	8000c00 <SD_disk_write>
 8004a20:	4603      	mov	r3, r0
 8004a22:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	603a      	str	r2, [r7, #0]
 8004a36:	71fb      	strb	r3, [r7, #7]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	79b9      	ldrb	r1, [r7, #6]
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fc f960 	bl	8000d08 <SD_disk_ioctl>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004a6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <FATFS_LinkDriverEx+0x94>)
 8004a6c:	7a5b      	ldrb	r3, [r3, #9]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d131      	bne.n	8004ad8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004a74:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <FATFS_LinkDriverEx+0x94>)
 8004a76:	7a5b      	ldrb	r3, [r3, #9]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <FATFS_LinkDriverEx+0x94>)
 8004a7e:	2100      	movs	r1, #0
 8004a80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004a82:	4b19      	ldr	r3, [pc, #100]	; (8004ae8 <FATFS_LinkDriverEx+0x94>)
 8004a84:	7a5b      	ldrb	r3, [r3, #9]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	4a17      	ldr	r2, [pc, #92]	; (8004ae8 <FATFS_LinkDriverEx+0x94>)
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <FATFS_LinkDriverEx+0x94>)
 8004a94:	7a5b      	ldrb	r3, [r3, #9]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <FATFS_LinkDriverEx+0x94>)
 8004a9c:	4413      	add	r3, r2
 8004a9e:	79fa      	ldrb	r2, [r7, #7]
 8004aa0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004aa2:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <FATFS_LinkDriverEx+0x94>)
 8004aa4:	7a5b      	ldrb	r3, [r3, #9]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	b2d1      	uxtb	r1, r2
 8004aac:	4a0e      	ldr	r2, [pc, #56]	; (8004ae8 <FATFS_LinkDriverEx+0x94>)
 8004aae:	7251      	strb	r1, [r2, #9]
 8004ab0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004ab2:	7dbb      	ldrb	r3, [r7, #22]
 8004ab4:	3330      	adds	r3, #48	; 0x30
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	223a      	movs	r2, #58	; 0x3a
 8004ac2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	3302      	adds	r3, #2
 8004ac8:	222f      	movs	r2, #47	; 0x2f
 8004aca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	3303      	adds	r3, #3
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20004218 	.word	0x20004218

08004aec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004af6:	2200      	movs	r2, #0
 8004af8:	6839      	ldr	r1, [r7, #0]
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff ffaa 	bl	8004a54 <FATFS_LinkDriverEx>
 8004b00:	4603      	mov	r3, r0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <__errno>:
 8004b0c:	4b01      	ldr	r3, [pc, #4]	; (8004b14 <__errno+0x8>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000024 	.word	0x20000024

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4d0d      	ldr	r5, [pc, #52]	; (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	; (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1b64      	subs	r4, r4, r5
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2600      	movs	r6, #0
 8004b24:	42a6      	cmp	r6, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4d0b      	ldr	r5, [pc, #44]	; (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	; (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f000 ffae 	bl	8005a8c <_init>
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2600      	movs	r6, #0
 8004b36:	42a6      	cmp	r6, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b40:	4798      	blx	r3
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4a:	4798      	blx	r3
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	08005b80 	.word	0x08005b80
 8004b54:	08005b80 	.word	0x08005b80
 8004b58:	08005b80 	.word	0x08005b80
 8004b5c:	08005b84 	.word	0x08005b84

08004b60 <memset>:
 8004b60:	4402      	add	r2, r0
 8004b62:	4603      	mov	r3, r0
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d100      	bne.n	8004b6a <memset+0xa>
 8004b68:	4770      	bx	lr
 8004b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6e:	e7f9      	b.n	8004b64 <memset+0x4>

08004b70 <iprintf>:
 8004b70:	b40f      	push	{r0, r1, r2, r3}
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <iprintf+0x2c>)
 8004b74:	b513      	push	{r0, r1, r4, lr}
 8004b76:	681c      	ldr	r4, [r3, #0]
 8004b78:	b124      	cbz	r4, 8004b84 <iprintf+0x14>
 8004b7a:	69a3      	ldr	r3, [r4, #24]
 8004b7c:	b913      	cbnz	r3, 8004b84 <iprintf+0x14>
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f000 f866 	bl	8004c50 <__sinit>
 8004b84:	ab05      	add	r3, sp, #20
 8004b86:	9a04      	ldr	r2, [sp, #16]
 8004b88:	68a1      	ldr	r1, [r4, #8]
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f000 f9bd 	bl	8004f0c <_vfiprintf_r>
 8004b92:	b002      	add	sp, #8
 8004b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b98:	b004      	add	sp, #16
 8004b9a:	4770      	bx	lr
 8004b9c:	20000024 	.word	0x20000024

08004ba0 <std>:
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	b510      	push	{r4, lr}
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8004baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bae:	6083      	str	r3, [r0, #8]
 8004bb0:	8181      	strh	r1, [r0, #12]
 8004bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8004bb4:	81c2      	strh	r2, [r0, #14]
 8004bb6:	6183      	str	r3, [r0, #24]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	2208      	movs	r2, #8
 8004bbc:	305c      	adds	r0, #92	; 0x5c
 8004bbe:	f7ff ffcf 	bl	8004b60 <memset>
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <std+0x38>)
 8004bc4:	6263      	str	r3, [r4, #36]	; 0x24
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <std+0x3c>)
 8004bc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <std+0x40>)
 8004bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bce:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <std+0x44>)
 8004bd0:	6224      	str	r4, [r4, #32]
 8004bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	bf00      	nop
 8004bd8:	080054b5 	.word	0x080054b5
 8004bdc:	080054d7 	.word	0x080054d7
 8004be0:	0800550f 	.word	0x0800550f
 8004be4:	08005533 	.word	0x08005533

08004be8 <_cleanup_r>:
 8004be8:	4901      	ldr	r1, [pc, #4]	; (8004bf0 <_cleanup_r+0x8>)
 8004bea:	f000 b8af 	b.w	8004d4c <_fwalk_reent>
 8004bee:	bf00      	nop
 8004bf0:	0800580d 	.word	0x0800580d

08004bf4 <__sfmoreglue>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	2268      	movs	r2, #104	; 0x68
 8004bf8:	1e4d      	subs	r5, r1, #1
 8004bfa:	4355      	muls	r5, r2
 8004bfc:	460e      	mov	r6, r1
 8004bfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c02:	f000 f8e5 	bl	8004dd0 <_malloc_r>
 8004c06:	4604      	mov	r4, r0
 8004c08:	b140      	cbz	r0, 8004c1c <__sfmoreglue+0x28>
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	e9c0 1600 	strd	r1, r6, [r0]
 8004c10:	300c      	adds	r0, #12
 8004c12:	60a0      	str	r0, [r4, #8]
 8004c14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c18:	f7ff ffa2 	bl	8004b60 <memset>
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}

08004c20 <__sfp_lock_acquire>:
 8004c20:	4801      	ldr	r0, [pc, #4]	; (8004c28 <__sfp_lock_acquire+0x8>)
 8004c22:	f000 b8b3 	b.w	8004d8c <__retarget_lock_acquire_recursive>
 8004c26:	bf00      	nop
 8004c28:	20004225 	.word	0x20004225

08004c2c <__sfp_lock_release>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	; (8004c34 <__sfp_lock_release+0x8>)
 8004c2e:	f000 b8ae 	b.w	8004d8e <__retarget_lock_release_recursive>
 8004c32:	bf00      	nop
 8004c34:	20004225 	.word	0x20004225

08004c38 <__sinit_lock_acquire>:
 8004c38:	4801      	ldr	r0, [pc, #4]	; (8004c40 <__sinit_lock_acquire+0x8>)
 8004c3a:	f000 b8a7 	b.w	8004d8c <__retarget_lock_acquire_recursive>
 8004c3e:	bf00      	nop
 8004c40:	20004226 	.word	0x20004226

08004c44 <__sinit_lock_release>:
 8004c44:	4801      	ldr	r0, [pc, #4]	; (8004c4c <__sinit_lock_release+0x8>)
 8004c46:	f000 b8a2 	b.w	8004d8e <__retarget_lock_release_recursive>
 8004c4a:	bf00      	nop
 8004c4c:	20004226 	.word	0x20004226

08004c50 <__sinit>:
 8004c50:	b510      	push	{r4, lr}
 8004c52:	4604      	mov	r4, r0
 8004c54:	f7ff fff0 	bl	8004c38 <__sinit_lock_acquire>
 8004c58:	69a3      	ldr	r3, [r4, #24]
 8004c5a:	b11b      	cbz	r3, 8004c64 <__sinit+0x14>
 8004c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c60:	f7ff bff0 	b.w	8004c44 <__sinit_lock_release>
 8004c64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c68:	6523      	str	r3, [r4, #80]	; 0x50
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <__sinit+0x68>)
 8004c6c:	4a13      	ldr	r2, [pc, #76]	; (8004cbc <__sinit+0x6c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c72:	42a3      	cmp	r3, r4
 8004c74:	bf04      	itt	eq
 8004c76:	2301      	moveq	r3, #1
 8004c78:	61a3      	streq	r3, [r4, #24]
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f000 f820 	bl	8004cc0 <__sfp>
 8004c80:	6060      	str	r0, [r4, #4]
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 f81c 	bl	8004cc0 <__sfp>
 8004c88:	60a0      	str	r0, [r4, #8]
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f000 f818 	bl	8004cc0 <__sfp>
 8004c90:	2200      	movs	r2, #0
 8004c92:	60e0      	str	r0, [r4, #12]
 8004c94:	2104      	movs	r1, #4
 8004c96:	6860      	ldr	r0, [r4, #4]
 8004c98:	f7ff ff82 	bl	8004ba0 <std>
 8004c9c:	68a0      	ldr	r0, [r4, #8]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	2109      	movs	r1, #9
 8004ca2:	f7ff ff7d 	bl	8004ba0 <std>
 8004ca6:	68e0      	ldr	r0, [r4, #12]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	2112      	movs	r1, #18
 8004cac:	f7ff ff78 	bl	8004ba0 <std>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	61a3      	str	r3, [r4, #24]
 8004cb4:	e7d2      	b.n	8004c5c <__sinit+0xc>
 8004cb6:	bf00      	nop
 8004cb8:	08005ae0 	.word	0x08005ae0
 8004cbc:	08004be9 	.word	0x08004be9

08004cc0 <__sfp>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	4607      	mov	r7, r0
 8004cc4:	f7ff ffac 	bl	8004c20 <__sfp_lock_acquire>
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <__sfp+0x84>)
 8004cca:	681e      	ldr	r6, [r3, #0]
 8004ccc:	69b3      	ldr	r3, [r6, #24]
 8004cce:	b913      	cbnz	r3, 8004cd6 <__sfp+0x16>
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f7ff ffbd 	bl	8004c50 <__sinit>
 8004cd6:	3648      	adds	r6, #72	; 0x48
 8004cd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	d503      	bpl.n	8004ce8 <__sfp+0x28>
 8004ce0:	6833      	ldr	r3, [r6, #0]
 8004ce2:	b30b      	cbz	r3, 8004d28 <__sfp+0x68>
 8004ce4:	6836      	ldr	r6, [r6, #0]
 8004ce6:	e7f7      	b.n	8004cd8 <__sfp+0x18>
 8004ce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cec:	b9d5      	cbnz	r5, 8004d24 <__sfp+0x64>
 8004cee:	4b16      	ldr	r3, [pc, #88]	; (8004d48 <__sfp+0x88>)
 8004cf0:	60e3      	str	r3, [r4, #12]
 8004cf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cf6:	6665      	str	r5, [r4, #100]	; 0x64
 8004cf8:	f000 f847 	bl	8004d8a <__retarget_lock_init_recursive>
 8004cfc:	f7ff ff96 	bl	8004c2c <__sfp_lock_release>
 8004d00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d08:	6025      	str	r5, [r4, #0]
 8004d0a:	61a5      	str	r5, [r4, #24]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	4629      	mov	r1, r5
 8004d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d14:	f7ff ff24 	bl	8004b60 <memset>
 8004d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d20:	4620      	mov	r0, r4
 8004d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d24:	3468      	adds	r4, #104	; 0x68
 8004d26:	e7d9      	b.n	8004cdc <__sfp+0x1c>
 8004d28:	2104      	movs	r1, #4
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	f7ff ff62 	bl	8004bf4 <__sfmoreglue>
 8004d30:	4604      	mov	r4, r0
 8004d32:	6030      	str	r0, [r6, #0]
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d1d5      	bne.n	8004ce4 <__sfp+0x24>
 8004d38:	f7ff ff78 	bl	8004c2c <__sfp_lock_release>
 8004d3c:	230c      	movs	r3, #12
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	e7ee      	b.n	8004d20 <__sfp+0x60>
 8004d42:	bf00      	nop
 8004d44:	08005ae0 	.word	0x08005ae0
 8004d48:	ffff0001 	.word	0xffff0001

08004d4c <_fwalk_reent>:
 8004d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	4606      	mov	r6, r0
 8004d52:	4688      	mov	r8, r1
 8004d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d58:	2700      	movs	r7, #0
 8004d5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d5e:	f1b9 0901 	subs.w	r9, r9, #1
 8004d62:	d505      	bpl.n	8004d70 <_fwalk_reent+0x24>
 8004d64:	6824      	ldr	r4, [r4, #0]
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	d1f7      	bne.n	8004d5a <_fwalk_reent+0xe>
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d70:	89ab      	ldrh	r3, [r5, #12]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d907      	bls.n	8004d86 <_fwalk_reent+0x3a>
 8004d76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	d003      	beq.n	8004d86 <_fwalk_reent+0x3a>
 8004d7e:	4629      	mov	r1, r5
 8004d80:	4630      	mov	r0, r6
 8004d82:	47c0      	blx	r8
 8004d84:	4307      	orrs	r7, r0
 8004d86:	3568      	adds	r5, #104	; 0x68
 8004d88:	e7e9      	b.n	8004d5e <_fwalk_reent+0x12>

08004d8a <__retarget_lock_init_recursive>:
 8004d8a:	4770      	bx	lr

08004d8c <__retarget_lock_acquire_recursive>:
 8004d8c:	4770      	bx	lr

08004d8e <__retarget_lock_release_recursive>:
 8004d8e:	4770      	bx	lr

08004d90 <sbrk_aligned>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	4e0e      	ldr	r6, [pc, #56]	; (8004dcc <sbrk_aligned+0x3c>)
 8004d94:	460c      	mov	r4, r1
 8004d96:	6831      	ldr	r1, [r6, #0]
 8004d98:	4605      	mov	r5, r0
 8004d9a:	b911      	cbnz	r1, 8004da2 <sbrk_aligned+0x12>
 8004d9c:	f000 fb7a 	bl	8005494 <_sbrk_r>
 8004da0:	6030      	str	r0, [r6, #0]
 8004da2:	4621      	mov	r1, r4
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 fb75 	bl	8005494 <_sbrk_r>
 8004daa:	1c43      	adds	r3, r0, #1
 8004dac:	d00a      	beq.n	8004dc4 <sbrk_aligned+0x34>
 8004dae:	1cc4      	adds	r4, r0, #3
 8004db0:	f024 0403 	bic.w	r4, r4, #3
 8004db4:	42a0      	cmp	r0, r4
 8004db6:	d007      	beq.n	8004dc8 <sbrk_aligned+0x38>
 8004db8:	1a21      	subs	r1, r4, r0
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f000 fb6a 	bl	8005494 <_sbrk_r>
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d101      	bne.n	8004dc8 <sbrk_aligned+0x38>
 8004dc4:	f04f 34ff 	mov.w	r4, #4294967295
 8004dc8:	4620      	mov	r0, r4
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
 8004dcc:	2000422c 	.word	0x2000422c

08004dd0 <_malloc_r>:
 8004dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd4:	1ccd      	adds	r5, r1, #3
 8004dd6:	f025 0503 	bic.w	r5, r5, #3
 8004dda:	3508      	adds	r5, #8
 8004ddc:	2d0c      	cmp	r5, #12
 8004dde:	bf38      	it	cc
 8004de0:	250c      	movcc	r5, #12
 8004de2:	2d00      	cmp	r5, #0
 8004de4:	4607      	mov	r7, r0
 8004de6:	db01      	blt.n	8004dec <_malloc_r+0x1c>
 8004de8:	42a9      	cmp	r1, r5
 8004dea:	d905      	bls.n	8004df8 <_malloc_r+0x28>
 8004dec:	230c      	movs	r3, #12
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	2600      	movs	r6, #0
 8004df2:	4630      	mov	r0, r6
 8004df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df8:	4e2e      	ldr	r6, [pc, #184]	; (8004eb4 <_malloc_r+0xe4>)
 8004dfa:	f000 fdbb 	bl	8005974 <__malloc_lock>
 8004dfe:	6833      	ldr	r3, [r6, #0]
 8004e00:	461c      	mov	r4, r3
 8004e02:	bb34      	cbnz	r4, 8004e52 <_malloc_r+0x82>
 8004e04:	4629      	mov	r1, r5
 8004e06:	4638      	mov	r0, r7
 8004e08:	f7ff ffc2 	bl	8004d90 <sbrk_aligned>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	4604      	mov	r4, r0
 8004e10:	d14d      	bne.n	8004eae <_malloc_r+0xde>
 8004e12:	6834      	ldr	r4, [r6, #0]
 8004e14:	4626      	mov	r6, r4
 8004e16:	2e00      	cmp	r6, #0
 8004e18:	d140      	bne.n	8004e9c <_malloc_r+0xcc>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	4638      	mov	r0, r7
 8004e20:	eb04 0803 	add.w	r8, r4, r3
 8004e24:	f000 fb36 	bl	8005494 <_sbrk_r>
 8004e28:	4580      	cmp	r8, r0
 8004e2a:	d13a      	bne.n	8004ea2 <_malloc_r+0xd2>
 8004e2c:	6821      	ldr	r1, [r4, #0]
 8004e2e:	3503      	adds	r5, #3
 8004e30:	1a6d      	subs	r5, r5, r1
 8004e32:	f025 0503 	bic.w	r5, r5, #3
 8004e36:	3508      	adds	r5, #8
 8004e38:	2d0c      	cmp	r5, #12
 8004e3a:	bf38      	it	cc
 8004e3c:	250c      	movcc	r5, #12
 8004e3e:	4629      	mov	r1, r5
 8004e40:	4638      	mov	r0, r7
 8004e42:	f7ff ffa5 	bl	8004d90 <sbrk_aligned>
 8004e46:	3001      	adds	r0, #1
 8004e48:	d02b      	beq.n	8004ea2 <_malloc_r+0xd2>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	442b      	add	r3, r5
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	e00e      	b.n	8004e70 <_malloc_r+0xa0>
 8004e52:	6822      	ldr	r2, [r4, #0]
 8004e54:	1b52      	subs	r2, r2, r5
 8004e56:	d41e      	bmi.n	8004e96 <_malloc_r+0xc6>
 8004e58:	2a0b      	cmp	r2, #11
 8004e5a:	d916      	bls.n	8004e8a <_malloc_r+0xba>
 8004e5c:	1961      	adds	r1, r4, r5
 8004e5e:	42a3      	cmp	r3, r4
 8004e60:	6025      	str	r5, [r4, #0]
 8004e62:	bf18      	it	ne
 8004e64:	6059      	strne	r1, [r3, #4]
 8004e66:	6863      	ldr	r3, [r4, #4]
 8004e68:	bf08      	it	eq
 8004e6a:	6031      	streq	r1, [r6, #0]
 8004e6c:	5162      	str	r2, [r4, r5]
 8004e6e:	604b      	str	r3, [r1, #4]
 8004e70:	4638      	mov	r0, r7
 8004e72:	f104 060b 	add.w	r6, r4, #11
 8004e76:	f000 fd83 	bl	8005980 <__malloc_unlock>
 8004e7a:	f026 0607 	bic.w	r6, r6, #7
 8004e7e:	1d23      	adds	r3, r4, #4
 8004e80:	1af2      	subs	r2, r6, r3
 8004e82:	d0b6      	beq.n	8004df2 <_malloc_r+0x22>
 8004e84:	1b9b      	subs	r3, r3, r6
 8004e86:	50a3      	str	r3, [r4, r2]
 8004e88:	e7b3      	b.n	8004df2 <_malloc_r+0x22>
 8004e8a:	6862      	ldr	r2, [r4, #4]
 8004e8c:	42a3      	cmp	r3, r4
 8004e8e:	bf0c      	ite	eq
 8004e90:	6032      	streq	r2, [r6, #0]
 8004e92:	605a      	strne	r2, [r3, #4]
 8004e94:	e7ec      	b.n	8004e70 <_malloc_r+0xa0>
 8004e96:	4623      	mov	r3, r4
 8004e98:	6864      	ldr	r4, [r4, #4]
 8004e9a:	e7b2      	b.n	8004e02 <_malloc_r+0x32>
 8004e9c:	4634      	mov	r4, r6
 8004e9e:	6876      	ldr	r6, [r6, #4]
 8004ea0:	e7b9      	b.n	8004e16 <_malloc_r+0x46>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	f000 fd6a 	bl	8005980 <__malloc_unlock>
 8004eac:	e7a1      	b.n	8004df2 <_malloc_r+0x22>
 8004eae:	6025      	str	r5, [r4, #0]
 8004eb0:	e7de      	b.n	8004e70 <_malloc_r+0xa0>
 8004eb2:	bf00      	nop
 8004eb4:	20004228 	.word	0x20004228

08004eb8 <__sfputc_r>:
 8004eb8:	6893      	ldr	r3, [r2, #8]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	b410      	push	{r4}
 8004ec0:	6093      	str	r3, [r2, #8]
 8004ec2:	da08      	bge.n	8004ed6 <__sfputc_r+0x1e>
 8004ec4:	6994      	ldr	r4, [r2, #24]
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	db01      	blt.n	8004ece <__sfputc_r+0x16>
 8004eca:	290a      	cmp	r1, #10
 8004ecc:	d103      	bne.n	8004ed6 <__sfputc_r+0x1e>
 8004ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ed2:	f000 bb33 	b.w	800553c <__swbuf_r>
 8004ed6:	6813      	ldr	r3, [r2, #0]
 8004ed8:	1c58      	adds	r0, r3, #1
 8004eda:	6010      	str	r0, [r2, #0]
 8004edc:	7019      	strb	r1, [r3, #0]
 8004ede:	4608      	mov	r0, r1
 8004ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <__sfputs_r>:
 8004ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee8:	4606      	mov	r6, r0
 8004eea:	460f      	mov	r7, r1
 8004eec:	4614      	mov	r4, r2
 8004eee:	18d5      	adds	r5, r2, r3
 8004ef0:	42ac      	cmp	r4, r5
 8004ef2:	d101      	bne.n	8004ef8 <__sfputs_r+0x12>
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	e007      	b.n	8004f08 <__sfputs_r+0x22>
 8004ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004efc:	463a      	mov	r2, r7
 8004efe:	4630      	mov	r0, r6
 8004f00:	f7ff ffda 	bl	8004eb8 <__sfputc_r>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d1f3      	bne.n	8004ef0 <__sfputs_r+0xa>
 8004f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f0c <_vfiprintf_r>:
 8004f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f10:	460d      	mov	r5, r1
 8004f12:	b09d      	sub	sp, #116	; 0x74
 8004f14:	4614      	mov	r4, r2
 8004f16:	4698      	mov	r8, r3
 8004f18:	4606      	mov	r6, r0
 8004f1a:	b118      	cbz	r0, 8004f24 <_vfiprintf_r+0x18>
 8004f1c:	6983      	ldr	r3, [r0, #24]
 8004f1e:	b90b      	cbnz	r3, 8004f24 <_vfiprintf_r+0x18>
 8004f20:	f7ff fe96 	bl	8004c50 <__sinit>
 8004f24:	4b89      	ldr	r3, [pc, #548]	; (800514c <_vfiprintf_r+0x240>)
 8004f26:	429d      	cmp	r5, r3
 8004f28:	d11b      	bne.n	8004f62 <_vfiprintf_r+0x56>
 8004f2a:	6875      	ldr	r5, [r6, #4]
 8004f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f2e:	07d9      	lsls	r1, r3, #31
 8004f30:	d405      	bmi.n	8004f3e <_vfiprintf_r+0x32>
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	059a      	lsls	r2, r3, #22
 8004f36:	d402      	bmi.n	8004f3e <_vfiprintf_r+0x32>
 8004f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f3a:	f7ff ff27 	bl	8004d8c <__retarget_lock_acquire_recursive>
 8004f3e:	89ab      	ldrh	r3, [r5, #12]
 8004f40:	071b      	lsls	r3, r3, #28
 8004f42:	d501      	bpl.n	8004f48 <_vfiprintf_r+0x3c>
 8004f44:	692b      	ldr	r3, [r5, #16]
 8004f46:	b9eb      	cbnz	r3, 8004f84 <_vfiprintf_r+0x78>
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	f000 fb5a 	bl	8005604 <__swsetup_r>
 8004f50:	b1c0      	cbz	r0, 8004f84 <_vfiprintf_r+0x78>
 8004f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f54:	07dc      	lsls	r4, r3, #31
 8004f56:	d50e      	bpl.n	8004f76 <_vfiprintf_r+0x6a>
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	b01d      	add	sp, #116	; 0x74
 8004f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f62:	4b7b      	ldr	r3, [pc, #492]	; (8005150 <_vfiprintf_r+0x244>)
 8004f64:	429d      	cmp	r5, r3
 8004f66:	d101      	bne.n	8004f6c <_vfiprintf_r+0x60>
 8004f68:	68b5      	ldr	r5, [r6, #8]
 8004f6a:	e7df      	b.n	8004f2c <_vfiprintf_r+0x20>
 8004f6c:	4b79      	ldr	r3, [pc, #484]	; (8005154 <_vfiprintf_r+0x248>)
 8004f6e:	429d      	cmp	r5, r3
 8004f70:	bf08      	it	eq
 8004f72:	68f5      	ldreq	r5, [r6, #12]
 8004f74:	e7da      	b.n	8004f2c <_vfiprintf_r+0x20>
 8004f76:	89ab      	ldrh	r3, [r5, #12]
 8004f78:	0598      	lsls	r0, r3, #22
 8004f7a:	d4ed      	bmi.n	8004f58 <_vfiprintf_r+0x4c>
 8004f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f7e:	f7ff ff06 	bl	8004d8e <__retarget_lock_release_recursive>
 8004f82:	e7e9      	b.n	8004f58 <_vfiprintf_r+0x4c>
 8004f84:	2300      	movs	r3, #0
 8004f86:	9309      	str	r3, [sp, #36]	; 0x24
 8004f88:	2320      	movs	r3, #32
 8004f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f92:	2330      	movs	r3, #48	; 0x30
 8004f94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005158 <_vfiprintf_r+0x24c>
 8004f98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f9c:	f04f 0901 	mov.w	r9, #1
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	469a      	mov	sl, r3
 8004fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fa8:	b10a      	cbz	r2, 8004fae <_vfiprintf_r+0xa2>
 8004faa:	2a25      	cmp	r2, #37	; 0x25
 8004fac:	d1f9      	bne.n	8004fa2 <_vfiprintf_r+0x96>
 8004fae:	ebba 0b04 	subs.w	fp, sl, r4
 8004fb2:	d00b      	beq.n	8004fcc <_vfiprintf_r+0xc0>
 8004fb4:	465b      	mov	r3, fp
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f7ff ff93 	bl	8004ee6 <__sfputs_r>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	f000 80aa 	beq.w	800511a <_vfiprintf_r+0x20e>
 8004fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fc8:	445a      	add	r2, fp
 8004fca:	9209      	str	r2, [sp, #36]	; 0x24
 8004fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 80a2 	beq.w	800511a <_vfiprintf_r+0x20e>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fe0:	f10a 0a01 	add.w	sl, sl, #1
 8004fe4:	9304      	str	r3, [sp, #16]
 8004fe6:	9307      	str	r3, [sp, #28]
 8004fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fec:	931a      	str	r3, [sp, #104]	; 0x68
 8004fee:	4654      	mov	r4, sl
 8004ff0:	2205      	movs	r2, #5
 8004ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff6:	4858      	ldr	r0, [pc, #352]	; (8005158 <_vfiprintf_r+0x24c>)
 8004ff8:	f7fb f90a 	bl	8000210 <memchr>
 8004ffc:	9a04      	ldr	r2, [sp, #16]
 8004ffe:	b9d8      	cbnz	r0, 8005038 <_vfiprintf_r+0x12c>
 8005000:	06d1      	lsls	r1, r2, #27
 8005002:	bf44      	itt	mi
 8005004:	2320      	movmi	r3, #32
 8005006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800500a:	0713      	lsls	r3, r2, #28
 800500c:	bf44      	itt	mi
 800500e:	232b      	movmi	r3, #43	; 0x2b
 8005010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005014:	f89a 3000 	ldrb.w	r3, [sl]
 8005018:	2b2a      	cmp	r3, #42	; 0x2a
 800501a:	d015      	beq.n	8005048 <_vfiprintf_r+0x13c>
 800501c:	9a07      	ldr	r2, [sp, #28]
 800501e:	4654      	mov	r4, sl
 8005020:	2000      	movs	r0, #0
 8005022:	f04f 0c0a 	mov.w	ip, #10
 8005026:	4621      	mov	r1, r4
 8005028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800502c:	3b30      	subs	r3, #48	; 0x30
 800502e:	2b09      	cmp	r3, #9
 8005030:	d94e      	bls.n	80050d0 <_vfiprintf_r+0x1c4>
 8005032:	b1b0      	cbz	r0, 8005062 <_vfiprintf_r+0x156>
 8005034:	9207      	str	r2, [sp, #28]
 8005036:	e014      	b.n	8005062 <_vfiprintf_r+0x156>
 8005038:	eba0 0308 	sub.w	r3, r0, r8
 800503c:	fa09 f303 	lsl.w	r3, r9, r3
 8005040:	4313      	orrs	r3, r2
 8005042:	9304      	str	r3, [sp, #16]
 8005044:	46a2      	mov	sl, r4
 8005046:	e7d2      	b.n	8004fee <_vfiprintf_r+0xe2>
 8005048:	9b03      	ldr	r3, [sp, #12]
 800504a:	1d19      	adds	r1, r3, #4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	9103      	str	r1, [sp, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	bfbb      	ittet	lt
 8005054:	425b      	neglt	r3, r3
 8005056:	f042 0202 	orrlt.w	r2, r2, #2
 800505a:	9307      	strge	r3, [sp, #28]
 800505c:	9307      	strlt	r3, [sp, #28]
 800505e:	bfb8      	it	lt
 8005060:	9204      	strlt	r2, [sp, #16]
 8005062:	7823      	ldrb	r3, [r4, #0]
 8005064:	2b2e      	cmp	r3, #46	; 0x2e
 8005066:	d10c      	bne.n	8005082 <_vfiprintf_r+0x176>
 8005068:	7863      	ldrb	r3, [r4, #1]
 800506a:	2b2a      	cmp	r3, #42	; 0x2a
 800506c:	d135      	bne.n	80050da <_vfiprintf_r+0x1ce>
 800506e:	9b03      	ldr	r3, [sp, #12]
 8005070:	1d1a      	adds	r2, r3, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	9203      	str	r2, [sp, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	bfb8      	it	lt
 800507a:	f04f 33ff 	movlt.w	r3, #4294967295
 800507e:	3402      	adds	r4, #2
 8005080:	9305      	str	r3, [sp, #20]
 8005082:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005168 <_vfiprintf_r+0x25c>
 8005086:	7821      	ldrb	r1, [r4, #0]
 8005088:	2203      	movs	r2, #3
 800508a:	4650      	mov	r0, sl
 800508c:	f7fb f8c0 	bl	8000210 <memchr>
 8005090:	b140      	cbz	r0, 80050a4 <_vfiprintf_r+0x198>
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	eba0 000a 	sub.w	r0, r0, sl
 8005098:	fa03 f000 	lsl.w	r0, r3, r0
 800509c:	9b04      	ldr	r3, [sp, #16]
 800509e:	4303      	orrs	r3, r0
 80050a0:	3401      	adds	r4, #1
 80050a2:	9304      	str	r3, [sp, #16]
 80050a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a8:	482c      	ldr	r0, [pc, #176]	; (800515c <_vfiprintf_r+0x250>)
 80050aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050ae:	2206      	movs	r2, #6
 80050b0:	f7fb f8ae 	bl	8000210 <memchr>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d03f      	beq.n	8005138 <_vfiprintf_r+0x22c>
 80050b8:	4b29      	ldr	r3, [pc, #164]	; (8005160 <_vfiprintf_r+0x254>)
 80050ba:	bb1b      	cbnz	r3, 8005104 <_vfiprintf_r+0x1f8>
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	3307      	adds	r3, #7
 80050c0:	f023 0307 	bic.w	r3, r3, #7
 80050c4:	3308      	adds	r3, #8
 80050c6:	9303      	str	r3, [sp, #12]
 80050c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ca:	443b      	add	r3, r7
 80050cc:	9309      	str	r3, [sp, #36]	; 0x24
 80050ce:	e767      	b.n	8004fa0 <_vfiprintf_r+0x94>
 80050d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80050d4:	460c      	mov	r4, r1
 80050d6:	2001      	movs	r0, #1
 80050d8:	e7a5      	b.n	8005026 <_vfiprintf_r+0x11a>
 80050da:	2300      	movs	r3, #0
 80050dc:	3401      	adds	r4, #1
 80050de:	9305      	str	r3, [sp, #20]
 80050e0:	4619      	mov	r1, r3
 80050e2:	f04f 0c0a 	mov.w	ip, #10
 80050e6:	4620      	mov	r0, r4
 80050e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ec:	3a30      	subs	r2, #48	; 0x30
 80050ee:	2a09      	cmp	r2, #9
 80050f0:	d903      	bls.n	80050fa <_vfiprintf_r+0x1ee>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0c5      	beq.n	8005082 <_vfiprintf_r+0x176>
 80050f6:	9105      	str	r1, [sp, #20]
 80050f8:	e7c3      	b.n	8005082 <_vfiprintf_r+0x176>
 80050fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80050fe:	4604      	mov	r4, r0
 8005100:	2301      	movs	r3, #1
 8005102:	e7f0      	b.n	80050e6 <_vfiprintf_r+0x1da>
 8005104:	ab03      	add	r3, sp, #12
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	462a      	mov	r2, r5
 800510a:	4b16      	ldr	r3, [pc, #88]	; (8005164 <_vfiprintf_r+0x258>)
 800510c:	a904      	add	r1, sp, #16
 800510e:	4630      	mov	r0, r6
 8005110:	f3af 8000 	nop.w
 8005114:	4607      	mov	r7, r0
 8005116:	1c78      	adds	r0, r7, #1
 8005118:	d1d6      	bne.n	80050c8 <_vfiprintf_r+0x1bc>
 800511a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800511c:	07d9      	lsls	r1, r3, #31
 800511e:	d405      	bmi.n	800512c <_vfiprintf_r+0x220>
 8005120:	89ab      	ldrh	r3, [r5, #12]
 8005122:	059a      	lsls	r2, r3, #22
 8005124:	d402      	bmi.n	800512c <_vfiprintf_r+0x220>
 8005126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005128:	f7ff fe31 	bl	8004d8e <__retarget_lock_release_recursive>
 800512c:	89ab      	ldrh	r3, [r5, #12]
 800512e:	065b      	lsls	r3, r3, #25
 8005130:	f53f af12 	bmi.w	8004f58 <_vfiprintf_r+0x4c>
 8005134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005136:	e711      	b.n	8004f5c <_vfiprintf_r+0x50>
 8005138:	ab03      	add	r3, sp, #12
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	462a      	mov	r2, r5
 800513e:	4b09      	ldr	r3, [pc, #36]	; (8005164 <_vfiprintf_r+0x258>)
 8005140:	a904      	add	r1, sp, #16
 8005142:	4630      	mov	r0, r6
 8005144:	f000 f880 	bl	8005248 <_printf_i>
 8005148:	e7e4      	b.n	8005114 <_vfiprintf_r+0x208>
 800514a:	bf00      	nop
 800514c:	08005b04 	.word	0x08005b04
 8005150:	08005b24 	.word	0x08005b24
 8005154:	08005ae4 	.word	0x08005ae4
 8005158:	08005b44 	.word	0x08005b44
 800515c:	08005b4e 	.word	0x08005b4e
 8005160:	00000000 	.word	0x00000000
 8005164:	08004ee7 	.word	0x08004ee7
 8005168:	08005b4a 	.word	0x08005b4a

0800516c <_printf_common>:
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	4616      	mov	r6, r2
 8005172:	4699      	mov	r9, r3
 8005174:	688a      	ldr	r2, [r1, #8]
 8005176:	690b      	ldr	r3, [r1, #16]
 8005178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800517c:	4293      	cmp	r3, r2
 800517e:	bfb8      	it	lt
 8005180:	4613      	movlt	r3, r2
 8005182:	6033      	str	r3, [r6, #0]
 8005184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005188:	4607      	mov	r7, r0
 800518a:	460c      	mov	r4, r1
 800518c:	b10a      	cbz	r2, 8005192 <_printf_common+0x26>
 800518e:	3301      	adds	r3, #1
 8005190:	6033      	str	r3, [r6, #0]
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	0699      	lsls	r1, r3, #26
 8005196:	bf42      	ittt	mi
 8005198:	6833      	ldrmi	r3, [r6, #0]
 800519a:	3302      	addmi	r3, #2
 800519c:	6033      	strmi	r3, [r6, #0]
 800519e:	6825      	ldr	r5, [r4, #0]
 80051a0:	f015 0506 	ands.w	r5, r5, #6
 80051a4:	d106      	bne.n	80051b4 <_printf_common+0x48>
 80051a6:	f104 0a19 	add.w	sl, r4, #25
 80051aa:	68e3      	ldr	r3, [r4, #12]
 80051ac:	6832      	ldr	r2, [r6, #0]
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	42ab      	cmp	r3, r5
 80051b2:	dc26      	bgt.n	8005202 <_printf_common+0x96>
 80051b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051b8:	1e13      	subs	r3, r2, #0
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	bf18      	it	ne
 80051be:	2301      	movne	r3, #1
 80051c0:	0692      	lsls	r2, r2, #26
 80051c2:	d42b      	bmi.n	800521c <_printf_common+0xb0>
 80051c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051c8:	4649      	mov	r1, r9
 80051ca:	4638      	mov	r0, r7
 80051cc:	47c0      	blx	r8
 80051ce:	3001      	adds	r0, #1
 80051d0:	d01e      	beq.n	8005210 <_printf_common+0xa4>
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	68e5      	ldr	r5, [r4, #12]
 80051d6:	6832      	ldr	r2, [r6, #0]
 80051d8:	f003 0306 	and.w	r3, r3, #6
 80051dc:	2b04      	cmp	r3, #4
 80051de:	bf08      	it	eq
 80051e0:	1aad      	subeq	r5, r5, r2
 80051e2:	68a3      	ldr	r3, [r4, #8]
 80051e4:	6922      	ldr	r2, [r4, #16]
 80051e6:	bf0c      	ite	eq
 80051e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051ec:	2500      	movne	r5, #0
 80051ee:	4293      	cmp	r3, r2
 80051f0:	bfc4      	itt	gt
 80051f2:	1a9b      	subgt	r3, r3, r2
 80051f4:	18ed      	addgt	r5, r5, r3
 80051f6:	2600      	movs	r6, #0
 80051f8:	341a      	adds	r4, #26
 80051fa:	42b5      	cmp	r5, r6
 80051fc:	d11a      	bne.n	8005234 <_printf_common+0xc8>
 80051fe:	2000      	movs	r0, #0
 8005200:	e008      	b.n	8005214 <_printf_common+0xa8>
 8005202:	2301      	movs	r3, #1
 8005204:	4652      	mov	r2, sl
 8005206:	4649      	mov	r1, r9
 8005208:	4638      	mov	r0, r7
 800520a:	47c0      	blx	r8
 800520c:	3001      	adds	r0, #1
 800520e:	d103      	bne.n	8005218 <_printf_common+0xac>
 8005210:	f04f 30ff 	mov.w	r0, #4294967295
 8005214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005218:	3501      	adds	r5, #1
 800521a:	e7c6      	b.n	80051aa <_printf_common+0x3e>
 800521c:	18e1      	adds	r1, r4, r3
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	2030      	movs	r0, #48	; 0x30
 8005222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005226:	4422      	add	r2, r4
 8005228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800522c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005230:	3302      	adds	r3, #2
 8005232:	e7c7      	b.n	80051c4 <_printf_common+0x58>
 8005234:	2301      	movs	r3, #1
 8005236:	4622      	mov	r2, r4
 8005238:	4649      	mov	r1, r9
 800523a:	4638      	mov	r0, r7
 800523c:	47c0      	blx	r8
 800523e:	3001      	adds	r0, #1
 8005240:	d0e6      	beq.n	8005210 <_printf_common+0xa4>
 8005242:	3601      	adds	r6, #1
 8005244:	e7d9      	b.n	80051fa <_printf_common+0x8e>
	...

08005248 <_printf_i>:
 8005248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800524c:	7e0f      	ldrb	r7, [r1, #24]
 800524e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005250:	2f78      	cmp	r7, #120	; 0x78
 8005252:	4691      	mov	r9, r2
 8005254:	4680      	mov	r8, r0
 8005256:	460c      	mov	r4, r1
 8005258:	469a      	mov	sl, r3
 800525a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800525e:	d807      	bhi.n	8005270 <_printf_i+0x28>
 8005260:	2f62      	cmp	r7, #98	; 0x62
 8005262:	d80a      	bhi.n	800527a <_printf_i+0x32>
 8005264:	2f00      	cmp	r7, #0
 8005266:	f000 80d8 	beq.w	800541a <_printf_i+0x1d2>
 800526a:	2f58      	cmp	r7, #88	; 0x58
 800526c:	f000 80a3 	beq.w	80053b6 <_printf_i+0x16e>
 8005270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005278:	e03a      	b.n	80052f0 <_printf_i+0xa8>
 800527a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800527e:	2b15      	cmp	r3, #21
 8005280:	d8f6      	bhi.n	8005270 <_printf_i+0x28>
 8005282:	a101      	add	r1, pc, #4	; (adr r1, 8005288 <_printf_i+0x40>)
 8005284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005288:	080052e1 	.word	0x080052e1
 800528c:	080052f5 	.word	0x080052f5
 8005290:	08005271 	.word	0x08005271
 8005294:	08005271 	.word	0x08005271
 8005298:	08005271 	.word	0x08005271
 800529c:	08005271 	.word	0x08005271
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	08005271 	.word	0x08005271
 80052a8:	08005271 	.word	0x08005271
 80052ac:	08005271 	.word	0x08005271
 80052b0:	08005271 	.word	0x08005271
 80052b4:	08005401 	.word	0x08005401
 80052b8:	08005325 	.word	0x08005325
 80052bc:	080053e3 	.word	0x080053e3
 80052c0:	08005271 	.word	0x08005271
 80052c4:	08005271 	.word	0x08005271
 80052c8:	08005423 	.word	0x08005423
 80052cc:	08005271 	.word	0x08005271
 80052d0:	08005325 	.word	0x08005325
 80052d4:	08005271 	.word	0x08005271
 80052d8:	08005271 	.word	0x08005271
 80052dc:	080053eb 	.word	0x080053eb
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	1d1a      	adds	r2, r3, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	602a      	str	r2, [r5, #0]
 80052e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0a3      	b.n	800543c <_printf_i+0x1f4>
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	6829      	ldr	r1, [r5, #0]
 80052f8:	0606      	lsls	r6, r0, #24
 80052fa:	f101 0304 	add.w	r3, r1, #4
 80052fe:	d50a      	bpl.n	8005316 <_printf_i+0xce>
 8005300:	680e      	ldr	r6, [r1, #0]
 8005302:	602b      	str	r3, [r5, #0]
 8005304:	2e00      	cmp	r6, #0
 8005306:	da03      	bge.n	8005310 <_printf_i+0xc8>
 8005308:	232d      	movs	r3, #45	; 0x2d
 800530a:	4276      	negs	r6, r6
 800530c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005310:	485e      	ldr	r0, [pc, #376]	; (800548c <_printf_i+0x244>)
 8005312:	230a      	movs	r3, #10
 8005314:	e019      	b.n	800534a <_printf_i+0x102>
 8005316:	680e      	ldr	r6, [r1, #0]
 8005318:	602b      	str	r3, [r5, #0]
 800531a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800531e:	bf18      	it	ne
 8005320:	b236      	sxthne	r6, r6
 8005322:	e7ef      	b.n	8005304 <_printf_i+0xbc>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	6820      	ldr	r0, [r4, #0]
 8005328:	1d19      	adds	r1, r3, #4
 800532a:	6029      	str	r1, [r5, #0]
 800532c:	0601      	lsls	r1, r0, #24
 800532e:	d501      	bpl.n	8005334 <_printf_i+0xec>
 8005330:	681e      	ldr	r6, [r3, #0]
 8005332:	e002      	b.n	800533a <_printf_i+0xf2>
 8005334:	0646      	lsls	r6, r0, #25
 8005336:	d5fb      	bpl.n	8005330 <_printf_i+0xe8>
 8005338:	881e      	ldrh	r6, [r3, #0]
 800533a:	4854      	ldr	r0, [pc, #336]	; (800548c <_printf_i+0x244>)
 800533c:	2f6f      	cmp	r7, #111	; 0x6f
 800533e:	bf0c      	ite	eq
 8005340:	2308      	moveq	r3, #8
 8005342:	230a      	movne	r3, #10
 8005344:	2100      	movs	r1, #0
 8005346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800534a:	6865      	ldr	r5, [r4, #4]
 800534c:	60a5      	str	r5, [r4, #8]
 800534e:	2d00      	cmp	r5, #0
 8005350:	bfa2      	ittt	ge
 8005352:	6821      	ldrge	r1, [r4, #0]
 8005354:	f021 0104 	bicge.w	r1, r1, #4
 8005358:	6021      	strge	r1, [r4, #0]
 800535a:	b90e      	cbnz	r6, 8005360 <_printf_i+0x118>
 800535c:	2d00      	cmp	r5, #0
 800535e:	d04d      	beq.n	80053fc <_printf_i+0x1b4>
 8005360:	4615      	mov	r5, r2
 8005362:	fbb6 f1f3 	udiv	r1, r6, r3
 8005366:	fb03 6711 	mls	r7, r3, r1, r6
 800536a:	5dc7      	ldrb	r7, [r0, r7]
 800536c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005370:	4637      	mov	r7, r6
 8005372:	42bb      	cmp	r3, r7
 8005374:	460e      	mov	r6, r1
 8005376:	d9f4      	bls.n	8005362 <_printf_i+0x11a>
 8005378:	2b08      	cmp	r3, #8
 800537a:	d10b      	bne.n	8005394 <_printf_i+0x14c>
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	07de      	lsls	r6, r3, #31
 8005380:	d508      	bpl.n	8005394 <_printf_i+0x14c>
 8005382:	6923      	ldr	r3, [r4, #16]
 8005384:	6861      	ldr	r1, [r4, #4]
 8005386:	4299      	cmp	r1, r3
 8005388:	bfde      	ittt	le
 800538a:	2330      	movle	r3, #48	; 0x30
 800538c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005390:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005394:	1b52      	subs	r2, r2, r5
 8005396:	6122      	str	r2, [r4, #16]
 8005398:	f8cd a000 	str.w	sl, [sp]
 800539c:	464b      	mov	r3, r9
 800539e:	aa03      	add	r2, sp, #12
 80053a0:	4621      	mov	r1, r4
 80053a2:	4640      	mov	r0, r8
 80053a4:	f7ff fee2 	bl	800516c <_printf_common>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d14c      	bne.n	8005446 <_printf_i+0x1fe>
 80053ac:	f04f 30ff 	mov.w	r0, #4294967295
 80053b0:	b004      	add	sp, #16
 80053b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b6:	4835      	ldr	r0, [pc, #212]	; (800548c <_printf_i+0x244>)
 80053b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053bc:	6829      	ldr	r1, [r5, #0]
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80053c4:	6029      	str	r1, [r5, #0]
 80053c6:	061d      	lsls	r5, r3, #24
 80053c8:	d514      	bpl.n	80053f4 <_printf_i+0x1ac>
 80053ca:	07df      	lsls	r7, r3, #31
 80053cc:	bf44      	itt	mi
 80053ce:	f043 0320 	orrmi.w	r3, r3, #32
 80053d2:	6023      	strmi	r3, [r4, #0]
 80053d4:	b91e      	cbnz	r6, 80053de <_printf_i+0x196>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	f023 0320 	bic.w	r3, r3, #32
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	2310      	movs	r3, #16
 80053e0:	e7b0      	b.n	8005344 <_printf_i+0xfc>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	f043 0320 	orr.w	r3, r3, #32
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	2378      	movs	r3, #120	; 0x78
 80053ec:	4828      	ldr	r0, [pc, #160]	; (8005490 <_printf_i+0x248>)
 80053ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053f2:	e7e3      	b.n	80053bc <_printf_i+0x174>
 80053f4:	0659      	lsls	r1, r3, #25
 80053f6:	bf48      	it	mi
 80053f8:	b2b6      	uxthmi	r6, r6
 80053fa:	e7e6      	b.n	80053ca <_printf_i+0x182>
 80053fc:	4615      	mov	r5, r2
 80053fe:	e7bb      	b.n	8005378 <_printf_i+0x130>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	6826      	ldr	r6, [r4, #0]
 8005404:	6961      	ldr	r1, [r4, #20]
 8005406:	1d18      	adds	r0, r3, #4
 8005408:	6028      	str	r0, [r5, #0]
 800540a:	0635      	lsls	r5, r6, #24
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	d501      	bpl.n	8005414 <_printf_i+0x1cc>
 8005410:	6019      	str	r1, [r3, #0]
 8005412:	e002      	b.n	800541a <_printf_i+0x1d2>
 8005414:	0670      	lsls	r0, r6, #25
 8005416:	d5fb      	bpl.n	8005410 <_printf_i+0x1c8>
 8005418:	8019      	strh	r1, [r3, #0]
 800541a:	2300      	movs	r3, #0
 800541c:	6123      	str	r3, [r4, #16]
 800541e:	4615      	mov	r5, r2
 8005420:	e7ba      	b.n	8005398 <_printf_i+0x150>
 8005422:	682b      	ldr	r3, [r5, #0]
 8005424:	1d1a      	adds	r2, r3, #4
 8005426:	602a      	str	r2, [r5, #0]
 8005428:	681d      	ldr	r5, [r3, #0]
 800542a:	6862      	ldr	r2, [r4, #4]
 800542c:	2100      	movs	r1, #0
 800542e:	4628      	mov	r0, r5
 8005430:	f7fa feee 	bl	8000210 <memchr>
 8005434:	b108      	cbz	r0, 800543a <_printf_i+0x1f2>
 8005436:	1b40      	subs	r0, r0, r5
 8005438:	6060      	str	r0, [r4, #4]
 800543a:	6863      	ldr	r3, [r4, #4]
 800543c:	6123      	str	r3, [r4, #16]
 800543e:	2300      	movs	r3, #0
 8005440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005444:	e7a8      	b.n	8005398 <_printf_i+0x150>
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	462a      	mov	r2, r5
 800544a:	4649      	mov	r1, r9
 800544c:	4640      	mov	r0, r8
 800544e:	47d0      	blx	sl
 8005450:	3001      	adds	r0, #1
 8005452:	d0ab      	beq.n	80053ac <_printf_i+0x164>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	079b      	lsls	r3, r3, #30
 8005458:	d413      	bmi.n	8005482 <_printf_i+0x23a>
 800545a:	68e0      	ldr	r0, [r4, #12]
 800545c:	9b03      	ldr	r3, [sp, #12]
 800545e:	4298      	cmp	r0, r3
 8005460:	bfb8      	it	lt
 8005462:	4618      	movlt	r0, r3
 8005464:	e7a4      	b.n	80053b0 <_printf_i+0x168>
 8005466:	2301      	movs	r3, #1
 8005468:	4632      	mov	r2, r6
 800546a:	4649      	mov	r1, r9
 800546c:	4640      	mov	r0, r8
 800546e:	47d0      	blx	sl
 8005470:	3001      	adds	r0, #1
 8005472:	d09b      	beq.n	80053ac <_printf_i+0x164>
 8005474:	3501      	adds	r5, #1
 8005476:	68e3      	ldr	r3, [r4, #12]
 8005478:	9903      	ldr	r1, [sp, #12]
 800547a:	1a5b      	subs	r3, r3, r1
 800547c:	42ab      	cmp	r3, r5
 800547e:	dcf2      	bgt.n	8005466 <_printf_i+0x21e>
 8005480:	e7eb      	b.n	800545a <_printf_i+0x212>
 8005482:	2500      	movs	r5, #0
 8005484:	f104 0619 	add.w	r6, r4, #25
 8005488:	e7f5      	b.n	8005476 <_printf_i+0x22e>
 800548a:	bf00      	nop
 800548c:	08005b55 	.word	0x08005b55
 8005490:	08005b66 	.word	0x08005b66

08005494 <_sbrk_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4d06      	ldr	r5, [pc, #24]	; (80054b0 <_sbrk_r+0x1c>)
 8005498:	2300      	movs	r3, #0
 800549a:	4604      	mov	r4, r0
 800549c:	4608      	mov	r0, r1
 800549e:	602b      	str	r3, [r5, #0]
 80054a0:	f7fc f9fa 	bl	8001898 <_sbrk>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d102      	bne.n	80054ae <_sbrk_r+0x1a>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	b103      	cbz	r3, 80054ae <_sbrk_r+0x1a>
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	20004230 	.word	0x20004230

080054b4 <__sread>:
 80054b4:	b510      	push	{r4, lr}
 80054b6:	460c      	mov	r4, r1
 80054b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054bc:	f000 fab2 	bl	8005a24 <_read_r>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	bfab      	itete	ge
 80054c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054c6:	89a3      	ldrhlt	r3, [r4, #12]
 80054c8:	181b      	addge	r3, r3, r0
 80054ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054ce:	bfac      	ite	ge
 80054d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80054d2:	81a3      	strhlt	r3, [r4, #12]
 80054d4:	bd10      	pop	{r4, pc}

080054d6 <__swrite>:
 80054d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054da:	461f      	mov	r7, r3
 80054dc:	898b      	ldrh	r3, [r1, #12]
 80054de:	05db      	lsls	r3, r3, #23
 80054e0:	4605      	mov	r5, r0
 80054e2:	460c      	mov	r4, r1
 80054e4:	4616      	mov	r6, r2
 80054e6:	d505      	bpl.n	80054f4 <__swrite+0x1e>
 80054e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ec:	2302      	movs	r3, #2
 80054ee:	2200      	movs	r2, #0
 80054f0:	f000 f9c8 	bl	8005884 <_lseek_r>
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054fe:	81a3      	strh	r3, [r4, #12]
 8005500:	4632      	mov	r2, r6
 8005502:	463b      	mov	r3, r7
 8005504:	4628      	mov	r0, r5
 8005506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800550a:	f000 b869 	b.w	80055e0 <_write_r>

0800550e <__sseek>:
 800550e:	b510      	push	{r4, lr}
 8005510:	460c      	mov	r4, r1
 8005512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005516:	f000 f9b5 	bl	8005884 <_lseek_r>
 800551a:	1c43      	adds	r3, r0, #1
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	bf15      	itete	ne
 8005520:	6560      	strne	r0, [r4, #84]	; 0x54
 8005522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800552a:	81a3      	strheq	r3, [r4, #12]
 800552c:	bf18      	it	ne
 800552e:	81a3      	strhne	r3, [r4, #12]
 8005530:	bd10      	pop	{r4, pc}

08005532 <__sclose>:
 8005532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005536:	f000 b8d3 	b.w	80056e0 <_close_r>
	...

0800553c <__swbuf_r>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	460e      	mov	r6, r1
 8005540:	4614      	mov	r4, r2
 8005542:	4605      	mov	r5, r0
 8005544:	b118      	cbz	r0, 800554e <__swbuf_r+0x12>
 8005546:	6983      	ldr	r3, [r0, #24]
 8005548:	b90b      	cbnz	r3, 800554e <__swbuf_r+0x12>
 800554a:	f7ff fb81 	bl	8004c50 <__sinit>
 800554e:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <__swbuf_r+0x98>)
 8005550:	429c      	cmp	r4, r3
 8005552:	d12b      	bne.n	80055ac <__swbuf_r+0x70>
 8005554:	686c      	ldr	r4, [r5, #4]
 8005556:	69a3      	ldr	r3, [r4, #24]
 8005558:	60a3      	str	r3, [r4, #8]
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	071a      	lsls	r2, r3, #28
 800555e:	d52f      	bpl.n	80055c0 <__swbuf_r+0x84>
 8005560:	6923      	ldr	r3, [r4, #16]
 8005562:	b36b      	cbz	r3, 80055c0 <__swbuf_r+0x84>
 8005564:	6923      	ldr	r3, [r4, #16]
 8005566:	6820      	ldr	r0, [r4, #0]
 8005568:	1ac0      	subs	r0, r0, r3
 800556a:	6963      	ldr	r3, [r4, #20]
 800556c:	b2f6      	uxtb	r6, r6
 800556e:	4283      	cmp	r3, r0
 8005570:	4637      	mov	r7, r6
 8005572:	dc04      	bgt.n	800557e <__swbuf_r+0x42>
 8005574:	4621      	mov	r1, r4
 8005576:	4628      	mov	r0, r5
 8005578:	f000 f948 	bl	800580c <_fflush_r>
 800557c:	bb30      	cbnz	r0, 80055cc <__swbuf_r+0x90>
 800557e:	68a3      	ldr	r3, [r4, #8]
 8005580:	3b01      	subs	r3, #1
 8005582:	60a3      	str	r3, [r4, #8]
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	6022      	str	r2, [r4, #0]
 800558a:	701e      	strb	r6, [r3, #0]
 800558c:	6963      	ldr	r3, [r4, #20]
 800558e:	3001      	adds	r0, #1
 8005590:	4283      	cmp	r3, r0
 8005592:	d004      	beq.n	800559e <__swbuf_r+0x62>
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	07db      	lsls	r3, r3, #31
 8005598:	d506      	bpl.n	80055a8 <__swbuf_r+0x6c>
 800559a:	2e0a      	cmp	r6, #10
 800559c:	d104      	bne.n	80055a8 <__swbuf_r+0x6c>
 800559e:	4621      	mov	r1, r4
 80055a0:	4628      	mov	r0, r5
 80055a2:	f000 f933 	bl	800580c <_fflush_r>
 80055a6:	b988      	cbnz	r0, 80055cc <__swbuf_r+0x90>
 80055a8:	4638      	mov	r0, r7
 80055aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ac:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <__swbuf_r+0x9c>)
 80055ae:	429c      	cmp	r4, r3
 80055b0:	d101      	bne.n	80055b6 <__swbuf_r+0x7a>
 80055b2:	68ac      	ldr	r4, [r5, #8]
 80055b4:	e7cf      	b.n	8005556 <__swbuf_r+0x1a>
 80055b6:	4b09      	ldr	r3, [pc, #36]	; (80055dc <__swbuf_r+0xa0>)
 80055b8:	429c      	cmp	r4, r3
 80055ba:	bf08      	it	eq
 80055bc:	68ec      	ldreq	r4, [r5, #12]
 80055be:	e7ca      	b.n	8005556 <__swbuf_r+0x1a>
 80055c0:	4621      	mov	r1, r4
 80055c2:	4628      	mov	r0, r5
 80055c4:	f000 f81e 	bl	8005604 <__swsetup_r>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d0cb      	beq.n	8005564 <__swbuf_r+0x28>
 80055cc:	f04f 37ff 	mov.w	r7, #4294967295
 80055d0:	e7ea      	b.n	80055a8 <__swbuf_r+0x6c>
 80055d2:	bf00      	nop
 80055d4:	08005b04 	.word	0x08005b04
 80055d8:	08005b24 	.word	0x08005b24
 80055dc:	08005ae4 	.word	0x08005ae4

080055e0 <_write_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4d07      	ldr	r5, [pc, #28]	; (8005600 <_write_r+0x20>)
 80055e4:	4604      	mov	r4, r0
 80055e6:	4608      	mov	r0, r1
 80055e8:	4611      	mov	r1, r2
 80055ea:	2200      	movs	r2, #0
 80055ec:	602a      	str	r2, [r5, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f7fb fcdd 	bl	8000fae <_write>
 80055f4:	1c43      	adds	r3, r0, #1
 80055f6:	d102      	bne.n	80055fe <_write_r+0x1e>
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	b103      	cbz	r3, 80055fe <_write_r+0x1e>
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	bd38      	pop	{r3, r4, r5, pc}
 8005600:	20004230 	.word	0x20004230

08005604 <__swsetup_r>:
 8005604:	4b32      	ldr	r3, [pc, #200]	; (80056d0 <__swsetup_r+0xcc>)
 8005606:	b570      	push	{r4, r5, r6, lr}
 8005608:	681d      	ldr	r5, [r3, #0]
 800560a:	4606      	mov	r6, r0
 800560c:	460c      	mov	r4, r1
 800560e:	b125      	cbz	r5, 800561a <__swsetup_r+0x16>
 8005610:	69ab      	ldr	r3, [r5, #24]
 8005612:	b913      	cbnz	r3, 800561a <__swsetup_r+0x16>
 8005614:	4628      	mov	r0, r5
 8005616:	f7ff fb1b 	bl	8004c50 <__sinit>
 800561a:	4b2e      	ldr	r3, [pc, #184]	; (80056d4 <__swsetup_r+0xd0>)
 800561c:	429c      	cmp	r4, r3
 800561e:	d10f      	bne.n	8005640 <__swsetup_r+0x3c>
 8005620:	686c      	ldr	r4, [r5, #4]
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005628:	0719      	lsls	r1, r3, #28
 800562a:	d42c      	bmi.n	8005686 <__swsetup_r+0x82>
 800562c:	06dd      	lsls	r5, r3, #27
 800562e:	d411      	bmi.n	8005654 <__swsetup_r+0x50>
 8005630:	2309      	movs	r3, #9
 8005632:	6033      	str	r3, [r6, #0]
 8005634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005638:	81a3      	strh	r3, [r4, #12]
 800563a:	f04f 30ff 	mov.w	r0, #4294967295
 800563e:	e03e      	b.n	80056be <__swsetup_r+0xba>
 8005640:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <__swsetup_r+0xd4>)
 8005642:	429c      	cmp	r4, r3
 8005644:	d101      	bne.n	800564a <__swsetup_r+0x46>
 8005646:	68ac      	ldr	r4, [r5, #8]
 8005648:	e7eb      	b.n	8005622 <__swsetup_r+0x1e>
 800564a:	4b24      	ldr	r3, [pc, #144]	; (80056dc <__swsetup_r+0xd8>)
 800564c:	429c      	cmp	r4, r3
 800564e:	bf08      	it	eq
 8005650:	68ec      	ldreq	r4, [r5, #12]
 8005652:	e7e6      	b.n	8005622 <__swsetup_r+0x1e>
 8005654:	0758      	lsls	r0, r3, #29
 8005656:	d512      	bpl.n	800567e <__swsetup_r+0x7a>
 8005658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800565a:	b141      	cbz	r1, 800566e <__swsetup_r+0x6a>
 800565c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005660:	4299      	cmp	r1, r3
 8005662:	d002      	beq.n	800566a <__swsetup_r+0x66>
 8005664:	4630      	mov	r0, r6
 8005666:	f000 f991 	bl	800598c <_free_r>
 800566a:	2300      	movs	r3, #0
 800566c:	6363      	str	r3, [r4, #52]	; 0x34
 800566e:	89a3      	ldrh	r3, [r4, #12]
 8005670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005674:	81a3      	strh	r3, [r4, #12]
 8005676:	2300      	movs	r3, #0
 8005678:	6063      	str	r3, [r4, #4]
 800567a:	6923      	ldr	r3, [r4, #16]
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	f043 0308 	orr.w	r3, r3, #8
 8005684:	81a3      	strh	r3, [r4, #12]
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	b94b      	cbnz	r3, 800569e <__swsetup_r+0x9a>
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005694:	d003      	beq.n	800569e <__swsetup_r+0x9a>
 8005696:	4621      	mov	r1, r4
 8005698:	4630      	mov	r0, r6
 800569a:	f000 f92b 	bl	80058f4 <__smakebuf_r>
 800569e:	89a0      	ldrh	r0, [r4, #12]
 80056a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056a4:	f010 0301 	ands.w	r3, r0, #1
 80056a8:	d00a      	beq.n	80056c0 <__swsetup_r+0xbc>
 80056aa:	2300      	movs	r3, #0
 80056ac:	60a3      	str	r3, [r4, #8]
 80056ae:	6963      	ldr	r3, [r4, #20]
 80056b0:	425b      	negs	r3, r3
 80056b2:	61a3      	str	r3, [r4, #24]
 80056b4:	6923      	ldr	r3, [r4, #16]
 80056b6:	b943      	cbnz	r3, 80056ca <__swsetup_r+0xc6>
 80056b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056bc:	d1ba      	bne.n	8005634 <__swsetup_r+0x30>
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	0781      	lsls	r1, r0, #30
 80056c2:	bf58      	it	pl
 80056c4:	6963      	ldrpl	r3, [r4, #20]
 80056c6:	60a3      	str	r3, [r4, #8]
 80056c8:	e7f4      	b.n	80056b4 <__swsetup_r+0xb0>
 80056ca:	2000      	movs	r0, #0
 80056cc:	e7f7      	b.n	80056be <__swsetup_r+0xba>
 80056ce:	bf00      	nop
 80056d0:	20000024 	.word	0x20000024
 80056d4:	08005b04 	.word	0x08005b04
 80056d8:	08005b24 	.word	0x08005b24
 80056dc:	08005ae4 	.word	0x08005ae4

080056e0 <_close_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4d06      	ldr	r5, [pc, #24]	; (80056fc <_close_r+0x1c>)
 80056e4:	2300      	movs	r3, #0
 80056e6:	4604      	mov	r4, r0
 80056e8:	4608      	mov	r0, r1
 80056ea:	602b      	str	r3, [r5, #0]
 80056ec:	f7fc f89f 	bl	800182e <_close>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_close_r+0x1a>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_close_r+0x1a>
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	20004230 	.word	0x20004230

08005700 <__sflush_r>:
 8005700:	898a      	ldrh	r2, [r1, #12]
 8005702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	4605      	mov	r5, r0
 8005708:	0710      	lsls	r0, r2, #28
 800570a:	460c      	mov	r4, r1
 800570c:	d458      	bmi.n	80057c0 <__sflush_r+0xc0>
 800570e:	684b      	ldr	r3, [r1, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	dc05      	bgt.n	8005720 <__sflush_r+0x20>
 8005714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	dc02      	bgt.n	8005720 <__sflush_r+0x20>
 800571a:	2000      	movs	r0, #0
 800571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005722:	2e00      	cmp	r6, #0
 8005724:	d0f9      	beq.n	800571a <__sflush_r+0x1a>
 8005726:	2300      	movs	r3, #0
 8005728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800572c:	682f      	ldr	r7, [r5, #0]
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	d032      	beq.n	8005798 <__sflush_r+0x98>
 8005732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005734:	89a3      	ldrh	r3, [r4, #12]
 8005736:	075a      	lsls	r2, r3, #29
 8005738:	d505      	bpl.n	8005746 <__sflush_r+0x46>
 800573a:	6863      	ldr	r3, [r4, #4]
 800573c:	1ac0      	subs	r0, r0, r3
 800573e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005740:	b10b      	cbz	r3, 8005746 <__sflush_r+0x46>
 8005742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005744:	1ac0      	subs	r0, r0, r3
 8005746:	2300      	movs	r3, #0
 8005748:	4602      	mov	r2, r0
 800574a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800574c:	6a21      	ldr	r1, [r4, #32]
 800574e:	4628      	mov	r0, r5
 8005750:	47b0      	blx	r6
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	d106      	bne.n	8005766 <__sflush_r+0x66>
 8005758:	6829      	ldr	r1, [r5, #0]
 800575a:	291d      	cmp	r1, #29
 800575c:	d82c      	bhi.n	80057b8 <__sflush_r+0xb8>
 800575e:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <__sflush_r+0x108>)
 8005760:	40ca      	lsrs	r2, r1
 8005762:	07d6      	lsls	r6, r2, #31
 8005764:	d528      	bpl.n	80057b8 <__sflush_r+0xb8>
 8005766:	2200      	movs	r2, #0
 8005768:	6062      	str	r2, [r4, #4]
 800576a:	04d9      	lsls	r1, r3, #19
 800576c:	6922      	ldr	r2, [r4, #16]
 800576e:	6022      	str	r2, [r4, #0]
 8005770:	d504      	bpl.n	800577c <__sflush_r+0x7c>
 8005772:	1c42      	adds	r2, r0, #1
 8005774:	d101      	bne.n	800577a <__sflush_r+0x7a>
 8005776:	682b      	ldr	r3, [r5, #0]
 8005778:	b903      	cbnz	r3, 800577c <__sflush_r+0x7c>
 800577a:	6560      	str	r0, [r4, #84]	; 0x54
 800577c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800577e:	602f      	str	r7, [r5, #0]
 8005780:	2900      	cmp	r1, #0
 8005782:	d0ca      	beq.n	800571a <__sflush_r+0x1a>
 8005784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005788:	4299      	cmp	r1, r3
 800578a:	d002      	beq.n	8005792 <__sflush_r+0x92>
 800578c:	4628      	mov	r0, r5
 800578e:	f000 f8fd 	bl	800598c <_free_r>
 8005792:	2000      	movs	r0, #0
 8005794:	6360      	str	r0, [r4, #52]	; 0x34
 8005796:	e7c1      	b.n	800571c <__sflush_r+0x1c>
 8005798:	6a21      	ldr	r1, [r4, #32]
 800579a:	2301      	movs	r3, #1
 800579c:	4628      	mov	r0, r5
 800579e:	47b0      	blx	r6
 80057a0:	1c41      	adds	r1, r0, #1
 80057a2:	d1c7      	bne.n	8005734 <__sflush_r+0x34>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0c4      	beq.n	8005734 <__sflush_r+0x34>
 80057aa:	2b1d      	cmp	r3, #29
 80057ac:	d001      	beq.n	80057b2 <__sflush_r+0xb2>
 80057ae:	2b16      	cmp	r3, #22
 80057b0:	d101      	bne.n	80057b6 <__sflush_r+0xb6>
 80057b2:	602f      	str	r7, [r5, #0]
 80057b4:	e7b1      	b.n	800571a <__sflush_r+0x1a>
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	e7ad      	b.n	800571c <__sflush_r+0x1c>
 80057c0:	690f      	ldr	r7, [r1, #16]
 80057c2:	2f00      	cmp	r7, #0
 80057c4:	d0a9      	beq.n	800571a <__sflush_r+0x1a>
 80057c6:	0793      	lsls	r3, r2, #30
 80057c8:	680e      	ldr	r6, [r1, #0]
 80057ca:	bf08      	it	eq
 80057cc:	694b      	ldreq	r3, [r1, #20]
 80057ce:	600f      	str	r7, [r1, #0]
 80057d0:	bf18      	it	ne
 80057d2:	2300      	movne	r3, #0
 80057d4:	eba6 0807 	sub.w	r8, r6, r7
 80057d8:	608b      	str	r3, [r1, #8]
 80057da:	f1b8 0f00 	cmp.w	r8, #0
 80057de:	dd9c      	ble.n	800571a <__sflush_r+0x1a>
 80057e0:	6a21      	ldr	r1, [r4, #32]
 80057e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057e4:	4643      	mov	r3, r8
 80057e6:	463a      	mov	r2, r7
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b0      	blx	r6
 80057ec:	2800      	cmp	r0, #0
 80057ee:	dc06      	bgt.n	80057fe <__sflush_r+0xfe>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f6:	81a3      	strh	r3, [r4, #12]
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	e78e      	b.n	800571c <__sflush_r+0x1c>
 80057fe:	4407      	add	r7, r0
 8005800:	eba8 0800 	sub.w	r8, r8, r0
 8005804:	e7e9      	b.n	80057da <__sflush_r+0xda>
 8005806:	bf00      	nop
 8005808:	20400001 	.word	0x20400001

0800580c <_fflush_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	690b      	ldr	r3, [r1, #16]
 8005810:	4605      	mov	r5, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b913      	cbnz	r3, 800581c <_fflush_r+0x10>
 8005816:	2500      	movs	r5, #0
 8005818:	4628      	mov	r0, r5
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	b118      	cbz	r0, 8005826 <_fflush_r+0x1a>
 800581e:	6983      	ldr	r3, [r0, #24]
 8005820:	b90b      	cbnz	r3, 8005826 <_fflush_r+0x1a>
 8005822:	f7ff fa15 	bl	8004c50 <__sinit>
 8005826:	4b14      	ldr	r3, [pc, #80]	; (8005878 <_fflush_r+0x6c>)
 8005828:	429c      	cmp	r4, r3
 800582a:	d11b      	bne.n	8005864 <_fflush_r+0x58>
 800582c:	686c      	ldr	r4, [r5, #4]
 800582e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0ef      	beq.n	8005816 <_fflush_r+0xa>
 8005836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005838:	07d0      	lsls	r0, r2, #31
 800583a:	d404      	bmi.n	8005846 <_fflush_r+0x3a>
 800583c:	0599      	lsls	r1, r3, #22
 800583e:	d402      	bmi.n	8005846 <_fflush_r+0x3a>
 8005840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005842:	f7ff faa3 	bl	8004d8c <__retarget_lock_acquire_recursive>
 8005846:	4628      	mov	r0, r5
 8005848:	4621      	mov	r1, r4
 800584a:	f7ff ff59 	bl	8005700 <__sflush_r>
 800584e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005850:	07da      	lsls	r2, r3, #31
 8005852:	4605      	mov	r5, r0
 8005854:	d4e0      	bmi.n	8005818 <_fflush_r+0xc>
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	059b      	lsls	r3, r3, #22
 800585a:	d4dd      	bmi.n	8005818 <_fflush_r+0xc>
 800585c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800585e:	f7ff fa96 	bl	8004d8e <__retarget_lock_release_recursive>
 8005862:	e7d9      	b.n	8005818 <_fflush_r+0xc>
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <_fflush_r+0x70>)
 8005866:	429c      	cmp	r4, r3
 8005868:	d101      	bne.n	800586e <_fflush_r+0x62>
 800586a:	68ac      	ldr	r4, [r5, #8]
 800586c:	e7df      	b.n	800582e <_fflush_r+0x22>
 800586e:	4b04      	ldr	r3, [pc, #16]	; (8005880 <_fflush_r+0x74>)
 8005870:	429c      	cmp	r4, r3
 8005872:	bf08      	it	eq
 8005874:	68ec      	ldreq	r4, [r5, #12]
 8005876:	e7da      	b.n	800582e <_fflush_r+0x22>
 8005878:	08005b04 	.word	0x08005b04
 800587c:	08005b24 	.word	0x08005b24
 8005880:	08005ae4 	.word	0x08005ae4

08005884 <_lseek_r>:
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	4d07      	ldr	r5, [pc, #28]	; (80058a4 <_lseek_r+0x20>)
 8005888:	4604      	mov	r4, r0
 800588a:	4608      	mov	r0, r1
 800588c:	4611      	mov	r1, r2
 800588e:	2200      	movs	r2, #0
 8005890:	602a      	str	r2, [r5, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	f7fb fff2 	bl	800187c <_lseek>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d102      	bne.n	80058a2 <_lseek_r+0x1e>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	b103      	cbz	r3, 80058a2 <_lseek_r+0x1e>
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	20004230 	.word	0x20004230

080058a8 <__swhatbuf_r>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	460e      	mov	r6, r1
 80058ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b0:	2900      	cmp	r1, #0
 80058b2:	b096      	sub	sp, #88	; 0x58
 80058b4:	4614      	mov	r4, r2
 80058b6:	461d      	mov	r5, r3
 80058b8:	da08      	bge.n	80058cc <__swhatbuf_r+0x24>
 80058ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	602a      	str	r2, [r5, #0]
 80058c2:	061a      	lsls	r2, r3, #24
 80058c4:	d410      	bmi.n	80058e8 <__swhatbuf_r+0x40>
 80058c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058ca:	e00e      	b.n	80058ea <__swhatbuf_r+0x42>
 80058cc:	466a      	mov	r2, sp
 80058ce:	f000 f8bb 	bl	8005a48 <_fstat_r>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	dbf1      	blt.n	80058ba <__swhatbuf_r+0x12>
 80058d6:	9a01      	ldr	r2, [sp, #4]
 80058d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058e0:	425a      	negs	r2, r3
 80058e2:	415a      	adcs	r2, r3
 80058e4:	602a      	str	r2, [r5, #0]
 80058e6:	e7ee      	b.n	80058c6 <__swhatbuf_r+0x1e>
 80058e8:	2340      	movs	r3, #64	; 0x40
 80058ea:	2000      	movs	r0, #0
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	b016      	add	sp, #88	; 0x58
 80058f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080058f4 <__smakebuf_r>:
 80058f4:	898b      	ldrh	r3, [r1, #12]
 80058f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058f8:	079d      	lsls	r5, r3, #30
 80058fa:	4606      	mov	r6, r0
 80058fc:	460c      	mov	r4, r1
 80058fe:	d507      	bpl.n	8005910 <__smakebuf_r+0x1c>
 8005900:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	6123      	str	r3, [r4, #16]
 8005908:	2301      	movs	r3, #1
 800590a:	6163      	str	r3, [r4, #20]
 800590c:	b002      	add	sp, #8
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	ab01      	add	r3, sp, #4
 8005912:	466a      	mov	r2, sp
 8005914:	f7ff ffc8 	bl	80058a8 <__swhatbuf_r>
 8005918:	9900      	ldr	r1, [sp, #0]
 800591a:	4605      	mov	r5, r0
 800591c:	4630      	mov	r0, r6
 800591e:	f7ff fa57 	bl	8004dd0 <_malloc_r>
 8005922:	b948      	cbnz	r0, 8005938 <__smakebuf_r+0x44>
 8005924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005928:	059a      	lsls	r2, r3, #22
 800592a:	d4ef      	bmi.n	800590c <__smakebuf_r+0x18>
 800592c:	f023 0303 	bic.w	r3, r3, #3
 8005930:	f043 0302 	orr.w	r3, r3, #2
 8005934:	81a3      	strh	r3, [r4, #12]
 8005936:	e7e3      	b.n	8005900 <__smakebuf_r+0xc>
 8005938:	4b0d      	ldr	r3, [pc, #52]	; (8005970 <__smakebuf_r+0x7c>)
 800593a:	62b3      	str	r3, [r6, #40]	; 0x28
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	6020      	str	r0, [r4, #0]
 8005940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005944:	81a3      	strh	r3, [r4, #12]
 8005946:	9b00      	ldr	r3, [sp, #0]
 8005948:	6163      	str	r3, [r4, #20]
 800594a:	9b01      	ldr	r3, [sp, #4]
 800594c:	6120      	str	r0, [r4, #16]
 800594e:	b15b      	cbz	r3, 8005968 <__smakebuf_r+0x74>
 8005950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005954:	4630      	mov	r0, r6
 8005956:	f000 f889 	bl	8005a6c <_isatty_r>
 800595a:	b128      	cbz	r0, 8005968 <__smakebuf_r+0x74>
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	f023 0303 	bic.w	r3, r3, #3
 8005962:	f043 0301 	orr.w	r3, r3, #1
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	89a0      	ldrh	r0, [r4, #12]
 800596a:	4305      	orrs	r5, r0
 800596c:	81a5      	strh	r5, [r4, #12]
 800596e:	e7cd      	b.n	800590c <__smakebuf_r+0x18>
 8005970:	08004be9 	.word	0x08004be9

08005974 <__malloc_lock>:
 8005974:	4801      	ldr	r0, [pc, #4]	; (800597c <__malloc_lock+0x8>)
 8005976:	f7ff ba09 	b.w	8004d8c <__retarget_lock_acquire_recursive>
 800597a:	bf00      	nop
 800597c:	20004224 	.word	0x20004224

08005980 <__malloc_unlock>:
 8005980:	4801      	ldr	r0, [pc, #4]	; (8005988 <__malloc_unlock+0x8>)
 8005982:	f7ff ba04 	b.w	8004d8e <__retarget_lock_release_recursive>
 8005986:	bf00      	nop
 8005988:	20004224 	.word	0x20004224

0800598c <_free_r>:
 800598c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800598e:	2900      	cmp	r1, #0
 8005990:	d044      	beq.n	8005a1c <_free_r+0x90>
 8005992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005996:	9001      	str	r0, [sp, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f1a1 0404 	sub.w	r4, r1, #4
 800599e:	bfb8      	it	lt
 80059a0:	18e4      	addlt	r4, r4, r3
 80059a2:	f7ff ffe7 	bl	8005974 <__malloc_lock>
 80059a6:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <_free_r+0x94>)
 80059a8:	9801      	ldr	r0, [sp, #4]
 80059aa:	6813      	ldr	r3, [r2, #0]
 80059ac:	b933      	cbnz	r3, 80059bc <_free_r+0x30>
 80059ae:	6063      	str	r3, [r4, #4]
 80059b0:	6014      	str	r4, [r2, #0]
 80059b2:	b003      	add	sp, #12
 80059b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059b8:	f7ff bfe2 	b.w	8005980 <__malloc_unlock>
 80059bc:	42a3      	cmp	r3, r4
 80059be:	d908      	bls.n	80059d2 <_free_r+0x46>
 80059c0:	6825      	ldr	r5, [r4, #0]
 80059c2:	1961      	adds	r1, r4, r5
 80059c4:	428b      	cmp	r3, r1
 80059c6:	bf01      	itttt	eq
 80059c8:	6819      	ldreq	r1, [r3, #0]
 80059ca:	685b      	ldreq	r3, [r3, #4]
 80059cc:	1949      	addeq	r1, r1, r5
 80059ce:	6021      	streq	r1, [r4, #0]
 80059d0:	e7ed      	b.n	80059ae <_free_r+0x22>
 80059d2:	461a      	mov	r2, r3
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	b10b      	cbz	r3, 80059dc <_free_r+0x50>
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d9fa      	bls.n	80059d2 <_free_r+0x46>
 80059dc:	6811      	ldr	r1, [r2, #0]
 80059de:	1855      	adds	r5, r2, r1
 80059e0:	42a5      	cmp	r5, r4
 80059e2:	d10b      	bne.n	80059fc <_free_r+0x70>
 80059e4:	6824      	ldr	r4, [r4, #0]
 80059e6:	4421      	add	r1, r4
 80059e8:	1854      	adds	r4, r2, r1
 80059ea:	42a3      	cmp	r3, r4
 80059ec:	6011      	str	r1, [r2, #0]
 80059ee:	d1e0      	bne.n	80059b2 <_free_r+0x26>
 80059f0:	681c      	ldr	r4, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	6053      	str	r3, [r2, #4]
 80059f6:	4421      	add	r1, r4
 80059f8:	6011      	str	r1, [r2, #0]
 80059fa:	e7da      	b.n	80059b2 <_free_r+0x26>
 80059fc:	d902      	bls.n	8005a04 <_free_r+0x78>
 80059fe:	230c      	movs	r3, #12
 8005a00:	6003      	str	r3, [r0, #0]
 8005a02:	e7d6      	b.n	80059b2 <_free_r+0x26>
 8005a04:	6825      	ldr	r5, [r4, #0]
 8005a06:	1961      	adds	r1, r4, r5
 8005a08:	428b      	cmp	r3, r1
 8005a0a:	bf04      	itt	eq
 8005a0c:	6819      	ldreq	r1, [r3, #0]
 8005a0e:	685b      	ldreq	r3, [r3, #4]
 8005a10:	6063      	str	r3, [r4, #4]
 8005a12:	bf04      	itt	eq
 8005a14:	1949      	addeq	r1, r1, r5
 8005a16:	6021      	streq	r1, [r4, #0]
 8005a18:	6054      	str	r4, [r2, #4]
 8005a1a:	e7ca      	b.n	80059b2 <_free_r+0x26>
 8005a1c:	b003      	add	sp, #12
 8005a1e:	bd30      	pop	{r4, r5, pc}
 8005a20:	20004228 	.word	0x20004228

08005a24 <_read_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4d07      	ldr	r5, [pc, #28]	; (8005a44 <_read_r+0x20>)
 8005a28:	4604      	mov	r4, r0
 8005a2a:	4608      	mov	r0, r1
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	602a      	str	r2, [r5, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f7fb fede 	bl	80017f4 <_read>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_read_r+0x1e>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_read_r+0x1e>
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	20004230 	.word	0x20004230

08005a48 <_fstat_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4d07      	ldr	r5, [pc, #28]	; (8005a68 <_fstat_r+0x20>)
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	4604      	mov	r4, r0
 8005a50:	4608      	mov	r0, r1
 8005a52:	4611      	mov	r1, r2
 8005a54:	602b      	str	r3, [r5, #0]
 8005a56:	f7fb fef6 	bl	8001846 <_fstat>
 8005a5a:	1c43      	adds	r3, r0, #1
 8005a5c:	d102      	bne.n	8005a64 <_fstat_r+0x1c>
 8005a5e:	682b      	ldr	r3, [r5, #0]
 8005a60:	b103      	cbz	r3, 8005a64 <_fstat_r+0x1c>
 8005a62:	6023      	str	r3, [r4, #0]
 8005a64:	bd38      	pop	{r3, r4, r5, pc}
 8005a66:	bf00      	nop
 8005a68:	20004230 	.word	0x20004230

08005a6c <_isatty_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4d06      	ldr	r5, [pc, #24]	; (8005a88 <_isatty_r+0x1c>)
 8005a70:	2300      	movs	r3, #0
 8005a72:	4604      	mov	r4, r0
 8005a74:	4608      	mov	r0, r1
 8005a76:	602b      	str	r3, [r5, #0]
 8005a78:	f7fb fef5 	bl	8001866 <_isatty>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	d102      	bne.n	8005a86 <_isatty_r+0x1a>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	b103      	cbz	r3, 8005a86 <_isatty_r+0x1a>
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	bd38      	pop	{r3, r4, r5, pc}
 8005a88:	20004230 	.word	0x20004230

08005a8c <_init>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	bf00      	nop
 8005a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a92:	bc08      	pop	{r3}
 8005a94:	469e      	mov	lr, r3
 8005a96:	4770      	bx	lr

08005a98 <_fini>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	bf00      	nop
 8005a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9e:	bc08      	pop	{r3}
 8005aa0:	469e      	mov	lr, r3
 8005aa2:	4770      	bx	lr
