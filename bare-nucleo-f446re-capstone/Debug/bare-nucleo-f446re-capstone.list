
bare-nucleo-f446re-capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b194  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800b368  0800b368  0001b368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba18  0800ba18  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba18  0800ba18  0001ba18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba20  0800ba20  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba20  0800ba20  0001ba20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba24  0800ba24  0001ba24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800ba28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028b8  2000008c  0800bab4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002944  0800bab4  00022944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016515  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003160  00000000  00000000  000365d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00039738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003ab40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d25  00000000  00000000  0003bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adf5  00000000  00000000  00061b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1d62  00000000  00000000  0007c90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e66c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cfc  00000000  00000000  0015e6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b34c 	.word	0x0800b34c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	0800b34c 	.word	0x0800b34c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <SELECT+0x1c>)
 8000ee8:	f002 fe4c 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f001 fc01 	bl	80026f4 <HAL_Delay>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020400 	.word	0x40020400

08000efc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f06:	4804      	ldr	r0, [pc, #16]	; (8000f18 <DESELECT+0x1c>)
 8000f08:	f002 fe3c 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f001 fbf1 	bl	80026f4 <HAL_Delay>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40020400 	.word	0x40020400

08000f1c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f26:	bf00      	nop
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <SPI_TxByte+0x30>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d1f8      	bne.n	8000f28 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f36:	1df9      	adds	r1, r7, #7
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <SPI_TxByte+0x30>)
 8000f3e:	f003 fcfc 	bl	800493a <HAL_SPI_Transmit>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000154 	.word	0x20000154

08000f50 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f5c:	bf00      	nop
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <SPI_TxBuffer+0x30>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d1f8      	bne.n	8000f5e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f6c:	887a      	ldrh	r2, [r7, #2]
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <SPI_TxBuffer+0x30>)
 8000f74:	f003 fce1 	bl	800493a <HAL_SPI_Transmit>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000154 	.word	0x20000154

08000f84 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f8a:	23ff      	movs	r3, #255	; 0xff
 8000f8c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f8e:	bf00      	nop
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <SPI_RxByte+0x34>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d1f8      	bne.n	8000f90 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f9e:	1dba      	adds	r2, r7, #6
 8000fa0:	1df9      	adds	r1, r7, #7
 8000fa2:	2364      	movs	r3, #100	; 0x64
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <SPI_RxByte+0x34>)
 8000faa:	f003 fe02 	bl	8004bb2 <HAL_SPI_TransmitReceive>

	return data;
 8000fae:	79bb      	ldrb	r3, [r7, #6]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000154 	.word	0x20000154

08000fbc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000fc4:	f7ff ffde 	bl	8000f84 <SPI_RxByte>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	701a      	strb	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <SD_ReadyWait+0x30>)
 8000fe0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fe4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000fe6:	f7ff ffcd 	bl	8000f84 <SPI_RxByte>
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2bff      	cmp	r3, #255	; 0xff
 8000ff2:	d004      	beq.n	8000ffe <SD_ReadyWait+0x26>
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SD_ReadyWait+0x30>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f3      	bne.n	8000fe6 <SD_ReadyWait+0xe>

	return res;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200026ee 	.word	0x200026ee

0800100c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001012:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001016:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001018:	f7ff ff70 	bl	8000efc <DESELECT>
	for(int i = 0; i < 10; i++)
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	e005      	b.n	800102e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001022:	20ff      	movs	r0, #255	; 0xff
 8001024:	f7ff ff7a 	bl	8000f1c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3301      	adds	r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b09      	cmp	r3, #9
 8001032:	ddf6      	ble.n	8001022 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001034:	f7ff ff52 	bl	8000edc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001038:	2340      	movs	r3, #64	; 0x40
 800103a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800104c:	2395      	movs	r3, #149	; 0x95
 800104e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001050:	463b      	mov	r3, r7
 8001052:	2106      	movs	r1, #6
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff7b 	bl	8000f50 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800105a:	e002      	b.n	8001062 <SD_PowerOn+0x56>
	{
		cnt--;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3b01      	subs	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001062:	f7ff ff8f 	bl	8000f84 <SPI_RxByte>
 8001066:	4603      	mov	r3, r0
 8001068:	2b01      	cmp	r3, #1
 800106a:	d002      	beq.n	8001072 <SD_PowerOn+0x66>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f4      	bne.n	800105c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001072:	f7ff ff43 	bl	8000efc <DESELECT>
	SPI_TxByte(0XFF);
 8001076:	20ff      	movs	r0, #255	; 0xff
 8001078:	f7ff ff50 	bl	8000f1c <SPI_TxByte>

	PowerFlag = 1;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <SD_PowerOn+0x80>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000a9 	.word	0x200000a9

08001090 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <SD_PowerOff+0x14>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	200000a9 	.word	0x200000a9

080010a8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
	return PowerFlag;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <SD_CheckPower+0x14>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200000a9 	.word	0x200000a9

080010c0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <SD_RxDataBlock+0x5c>)
 80010cc:	22c8      	movs	r2, #200	; 0xc8
 80010ce:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80010d0:	f7ff ff58 	bl	8000f84 <SPI_RxByte>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2bff      	cmp	r3, #255	; 0xff
 80010dc:	d104      	bne.n	80010e8 <SD_RxDataBlock+0x28>
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <SD_RxDataBlock+0x5c>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f3      	bne.n	80010d0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2bfe      	cmp	r3, #254	; 0xfe
 80010ec:	d001      	beq.n	80010f2 <SD_RxDataBlock+0x32>
 80010ee:	2300      	movs	r3, #0
 80010f0:	e00f      	b.n	8001112 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5f 	bl	8000fbc <SPI_RxBytePtr>
	} while(len--);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	603a      	str	r2, [r7, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f4      	bne.n	80010f2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001108:	f7ff ff3c 	bl	8000f84 <SPI_RxByte>
	SPI_RxByte();
 800110c:	f7ff ff3a 	bl	8000f84 <SPI_RxByte>

	return TRUE;
 8001110:	2301      	movs	r3, #1
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200026ed 	.word	0x200026ed

08001120 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001130:	f7ff ff52 	bl	8000fd8 <SD_ReadyWait>
 8001134:	4603      	mov	r3, r0
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d001      	beq.n	800113e <SD_TxDataBlock+0x1e>
 800113a:	2300      	movs	r3, #0
 800113c:	e02f      	b.n	800119e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff feeb 	bl	8000f1c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	2bfd      	cmp	r3, #253	; 0xfd
 800114a:	d020      	beq.n	800118e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800114c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fefd 	bl	8000f50 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001156:	f7ff ff15 	bl	8000f84 <SPI_RxByte>
		SPI_RxByte();
 800115a:	f7ff ff13 	bl	8000f84 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800115e:	e00b      	b.n	8001178 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001160:	f7ff ff10 	bl	8000f84 <SPI_RxByte>
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	f003 031f 	and.w	r3, r3, #31
 800116e:	2b05      	cmp	r3, #5
 8001170:	d006      	beq.n	8001180 <SD_TxDataBlock+0x60>
			i++;
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	3301      	adds	r3, #1
 8001176:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	2b40      	cmp	r3, #64	; 0x40
 800117c:	d9f0      	bls.n	8001160 <SD_TxDataBlock+0x40>
 800117e:	e000      	b.n	8001182 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001180:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001182:	bf00      	nop
 8001184:	f7ff fefe 	bl	8000f84 <SPI_RxByte>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0fa      	beq.n	8001184 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	2b05      	cmp	r3, #5
 8001196:	d101      	bne.n	800119c <SD_TxDataBlock+0x7c>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <SD_TxDataBlock+0x7e>

	return FALSE;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	6039      	str	r1, [r7, #0]
 80011b0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80011b2:	f7ff ff11 	bl	8000fd8 <SD_ReadyWait>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2bff      	cmp	r3, #255	; 0xff
 80011ba:	d001      	beq.n	80011c0 <SD_SendCmd+0x1a>
 80011bc:	23ff      	movs	r3, #255	; 0xff
 80011be:	e042      	b.n	8001246 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff feaa 	bl	8000f1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	0e1b      	lsrs	r3, r3, #24
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fea4 	bl	8000f1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	0c1b      	lsrs	r3, r3, #16
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe9e 	bl	8000f1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	0a1b      	lsrs	r3, r3, #8
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe98 	bl	8000f1c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fe93 	bl	8000f1c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b40      	cmp	r3, #64	; 0x40
 80011fa:	d102      	bne.n	8001202 <SD_SendCmd+0x5c>
 80011fc:	2395      	movs	r3, #149	; 0x95
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e007      	b.n	8001212 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b48      	cmp	r3, #72	; 0x48
 8001206:	d102      	bne.n	800120e <SD_SendCmd+0x68>
 8001208:	2387      	movs	r3, #135	; 0x87
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e001      	b.n	8001212 <SD_SendCmd+0x6c>
	else crc = 1;
 800120e:	2301      	movs	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fe81 	bl	8000f1c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b4c      	cmp	r3, #76	; 0x4c
 800121e:	d101      	bne.n	8001224 <SD_SendCmd+0x7e>
 8001220:	f7ff feb0 	bl	8000f84 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001224:	230a      	movs	r3, #10
 8001226:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001228:	f7ff feac 	bl	8000f84 <SPI_RxByte>
 800122c:	4603      	mov	r3, r0
 800122e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001230:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001234:	2b00      	cmp	r3, #0
 8001236:	da05      	bge.n	8001244 <SD_SendCmd+0x9e>
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	3b01      	subs	r3, #1
 800123c:	73bb      	strb	r3, [r7, #14]
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f1      	bne.n	8001228 <SD_SendCmd+0x82>

	return res;
 8001244:	7b7b      	ldrb	r3, [r7, #13]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SD_disk_initialize+0x14>
 8001260:	2301      	movs	r3, #1
 8001262:	e0d6      	b.n	8001412 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001264:	4b6d      	ldr	r3, [pc, #436]	; (800141c <SD_disk_initialize+0x1cc>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <SD_disk_initialize+0x2a>
 8001272:	4b6a      	ldr	r3, [pc, #424]	; (800141c <SD_disk_initialize+0x1cc>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	e0cb      	b.n	8001412 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800127a:	f7ff fec7 	bl	800100c <SD_PowerOn>

	/* slave select */
	SELECT();
 800127e:	f7ff fe2d 	bl	8000edc <SELECT>

	/* check disk type */
	type = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001286:	2100      	movs	r1, #0
 8001288:	2040      	movs	r0, #64	; 0x40
 800128a:	f7ff ff8c 	bl	80011a6 <SD_SendCmd>
 800128e:	4603      	mov	r3, r0
 8001290:	2b01      	cmp	r3, #1
 8001292:	f040 80a6 	bne.w	80013e2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001296:	4b62      	ldr	r3, [pc, #392]	; (8001420 <SD_disk_initialize+0x1d0>)
 8001298:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800129c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800129e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80012a2:	2048      	movs	r0, #72	; 0x48
 80012a4:	f7ff ff7f 	bl	80011a6 <SD_SendCmd>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d158      	bne.n	8001360 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e00c      	b.n	80012ce <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80012b4:	7bfc      	ldrb	r4, [r7, #15]
 80012b6:	f7ff fe65 	bl	8000f84 <SPI_RxByte>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	f104 0310 	add.w	r3, r4, #16
 80012c2:	443b      	add	r3, r7
 80012c4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	3301      	adds	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d9ef      	bls.n	80012b4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012d4:	7abb      	ldrb	r3, [r7, #10]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	f040 8083 	bne.w	80013e2 <SD_disk_initialize+0x192>
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	2baa      	cmp	r3, #170	; 0xaa
 80012e0:	d17f      	bne.n	80013e2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012e2:	2100      	movs	r1, #0
 80012e4:	2077      	movs	r0, #119	; 0x77
 80012e6:	f7ff ff5e 	bl	80011a6 <SD_SendCmd>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d807      	bhi.n	8001300 <SD_disk_initialize+0xb0>
 80012f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012f4:	2069      	movs	r0, #105	; 0x69
 80012f6:	f7ff ff56 	bl	80011a6 <SD_SendCmd>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001300:	4b47      	ldr	r3, [pc, #284]	; (8001420 <SD_disk_initialize+0x1d0>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1eb      	bne.n	80012e2 <SD_disk_initialize+0x92>
 800130a:	e000      	b.n	800130e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800130c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800130e:	4b44      	ldr	r3, [pc, #272]	; (8001420 <SD_disk_initialize+0x1d0>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d064      	beq.n	80013e2 <SD_disk_initialize+0x192>
 8001318:	2100      	movs	r1, #0
 800131a:	207a      	movs	r0, #122	; 0x7a
 800131c:	f7ff ff43 	bl	80011a6 <SD_SendCmd>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d15d      	bne.n	80013e2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	e00c      	b.n	8001346 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800132c:	7bfc      	ldrb	r4, [r7, #15]
 800132e:	f7ff fe29 	bl	8000f84 <SPI_RxByte>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	f104 0310 	add.w	r3, r4, #16
 800133a:	443b      	add	r3, r7
 800133c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	3301      	adds	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d9ef      	bls.n	800132c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800134c:	7a3b      	ldrb	r3, [r7, #8]
 800134e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SD_disk_initialize+0x10a>
 8001356:	230c      	movs	r3, #12
 8001358:	e000      	b.n	800135c <SD_disk_initialize+0x10c>
 800135a:	2304      	movs	r3, #4
 800135c:	73bb      	strb	r3, [r7, #14]
 800135e:	e040      	b.n	80013e2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001360:	2100      	movs	r1, #0
 8001362:	2077      	movs	r0, #119	; 0x77
 8001364:	f7ff ff1f 	bl	80011a6 <SD_SendCmd>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d808      	bhi.n	8001380 <SD_disk_initialize+0x130>
 800136e:	2100      	movs	r1, #0
 8001370:	2069      	movs	r0, #105	; 0x69
 8001372:	f7ff ff18 	bl	80011a6 <SD_SendCmd>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d801      	bhi.n	8001380 <SD_disk_initialize+0x130>
 800137c:	2302      	movs	r3, #2
 800137e:	e000      	b.n	8001382 <SD_disk_initialize+0x132>
 8001380:	2301      	movs	r3, #1
 8001382:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001384:	7bbb      	ldrb	r3, [r7, #14]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d10e      	bne.n	80013a8 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800138a:	2100      	movs	r1, #0
 800138c:	2077      	movs	r0, #119	; 0x77
 800138e:	f7ff ff0a 	bl	80011a6 <SD_SendCmd>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	d80e      	bhi.n	80013b6 <SD_disk_initialize+0x166>
 8001398:	2100      	movs	r1, #0
 800139a:	2069      	movs	r0, #105	; 0x69
 800139c:	f7ff ff03 	bl	80011a6 <SD_SendCmd>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d107      	bne.n	80013b6 <SD_disk_initialize+0x166>
 80013a6:	e00d      	b.n	80013c4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013a8:	2100      	movs	r1, #0
 80013aa:	2041      	movs	r0, #65	; 0x41
 80013ac:	f7ff fefb 	bl	80011a6 <SD_SendCmd>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <SD_disk_initialize+0x1d0>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1e1      	bne.n	8001384 <SD_disk_initialize+0x134>
 80013c0:	e000      	b.n	80013c4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013c2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <SD_disk_initialize+0x1d0>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d007      	beq.n	80013de <SD_disk_initialize+0x18e>
 80013ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d2:	2050      	movs	r0, #80	; 0x50
 80013d4:	f7ff fee7 	bl	80011a6 <SD_SendCmd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SD_disk_initialize+0x192>
 80013de:	2300      	movs	r3, #0
 80013e0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <SD_disk_initialize+0x1d4>)
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80013e8:	f7ff fd88 	bl	8000efc <DESELECT>
	SPI_RxByte();
 80013ec:	f7ff fdca 	bl	8000f84 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d008      	beq.n	8001408 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <SD_disk_initialize+0x1cc>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <SD_disk_initialize+0x1cc>)
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e001      	b.n	800140c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001408:	f7ff fe42 	bl	8001090 <SD_PowerOff>
	}

	return Stat;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <SD_disk_initialize+0x1cc>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bd90      	pop	{r4, r7, pc}
 800141a:	bf00      	nop
 800141c:	20000000 	.word	0x20000000
 8001420:	200026ed 	.word	0x200026ed
 8001424:	200000a8 	.word	0x200000a8

08001428 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SD_disk_status+0x14>
 8001438:	2301      	movs	r3, #1
 800143a:	e002      	b.n	8001442 <SD_disk_status+0x1a>
	return Stat;
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SD_disk_status+0x28>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000000 	.word	0x20000000

08001454 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	4603      	mov	r3, r0
 8001462:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <SD_disk_read+0x1c>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <SD_disk_read+0x20>
 8001470:	2304      	movs	r3, #4
 8001472:	e051      	b.n	8001518 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <SD_disk_read+0xcc>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SD_disk_read+0x32>
 8001482:	2303      	movs	r3, #3
 8001484:	e048      	b.n	8001518 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <SD_disk_read+0xd0>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <SD_disk_read+0x44>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	607b      	str	r3, [r7, #4]

	SELECT();
 8001498:	f7ff fd20 	bl	8000edc <SELECT>

	if (count == 1)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d111      	bne.n	80014c6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	2051      	movs	r0, #81	; 0x51
 80014a6:	f7ff fe7e 	bl	80011a6 <SD_SendCmd>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d129      	bne.n	8001504 <SD_disk_read+0xb0>
 80014b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b4:	68b8      	ldr	r0, [r7, #8]
 80014b6:	f7ff fe03 	bl	80010c0 <SD_RxDataBlock>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d021      	beq.n	8001504 <SD_disk_read+0xb0>
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	e01e      	b.n	8001504 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	2052      	movs	r0, #82	; 0x52
 80014ca:	f7ff fe6c 	bl	80011a6 <SD_SendCmd>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d117      	bne.n	8001504 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80014d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d8:	68b8      	ldr	r0, [r7, #8]
 80014da:	f7ff fdf1 	bl	80010c0 <SD_RxDataBlock>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00a      	beq.n	80014fa <SD_disk_read+0xa6>
				buff += 512;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014ea:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ed      	bne.n	80014d4 <SD_disk_read+0x80>
 80014f8:	e000      	b.n	80014fc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80014fa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80014fc:	2100      	movs	r1, #0
 80014fe:	204c      	movs	r0, #76	; 0x4c
 8001500:	f7ff fe51 	bl	80011a6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001504:	f7ff fcfa 	bl	8000efc <DESELECT>
	SPI_RxByte();
 8001508:	f7ff fd3c 	bl	8000f84 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	bf14      	ite	ne
 8001512:	2301      	movne	r3, #1
 8001514:	2300      	moveq	r3, #0
 8001516:	b2db      	uxtb	r3, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	200000a8 	.word	0x200000a8

08001528 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4603      	mov	r3, r0
 8001536:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <SD_disk_write+0x1c>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <SD_disk_write+0x20>
 8001544:	2304      	movs	r3, #4
 8001546:	e06b      	b.n	8001620 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001548:	4b37      	ldr	r3, [pc, #220]	; (8001628 <SD_disk_write+0x100>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SD_disk_write+0x32>
 8001556:	2303      	movs	r3, #3
 8001558:	e062      	b.n	8001620 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <SD_disk_write+0x100>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SD_disk_write+0x44>
 8001568:	2302      	movs	r3, #2
 800156a:	e059      	b.n	8001620 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <SD_disk_write+0x104>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <SD_disk_write+0x56>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	607b      	str	r3, [r7, #4]

	SELECT();
 800157e:	f7ff fcad 	bl	8000edc <SELECT>

	if (count == 1)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d110      	bne.n	80015aa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	2058      	movs	r0, #88	; 0x58
 800158c:	f7ff fe0b 	bl	80011a6 <SD_SendCmd>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d13a      	bne.n	800160c <SD_disk_write+0xe4>
 8001596:	21fe      	movs	r1, #254	; 0xfe
 8001598:	68b8      	ldr	r0, [r7, #8]
 800159a:	f7ff fdc1 	bl	8001120 <SD_TxDataBlock>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d033      	beq.n	800160c <SD_disk_write+0xe4>
			count = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	e030      	b.n	800160c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <SD_disk_write+0x104>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80015b6:	2100      	movs	r1, #0
 80015b8:	2077      	movs	r0, #119	; 0x77
 80015ba:	f7ff fdf4 	bl	80011a6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	2057      	movs	r0, #87	; 0x57
 80015c2:	f7ff fdf0 	bl	80011a6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	2059      	movs	r0, #89	; 0x59
 80015ca:	f7ff fdec 	bl	80011a6 <SD_SendCmd>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d11b      	bne.n	800160c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015d4:	21fc      	movs	r1, #252	; 0xfc
 80015d6:	68b8      	ldr	r0, [r7, #8]
 80015d8:	f7ff fda2 	bl	8001120 <SD_TxDataBlock>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00a      	beq.n	80015f8 <SD_disk_write+0xd0>
				buff += 512;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015e8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1ee      	bne.n	80015d4 <SD_disk_write+0xac>
 80015f6:	e000      	b.n	80015fa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015f8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80015fa:	21fd      	movs	r1, #253	; 0xfd
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fd8f 	bl	8001120 <SD_TxDataBlock>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <SD_disk_write+0xe4>
			{
				count = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800160c:	f7ff fc76 	bl	8000efc <DESELECT>
	SPI_RxByte();
 8001610:	f7ff fcb8 	bl	8000f84 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf14      	ite	ne
 800161a:	2301      	movne	r3, #1
 800161c:	2300      	moveq	r3, #0
 800161e:	b2db      	uxtb	r3, r3
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000
 800162c:	200000a8 	.word	0x200000a8

08001630 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b08b      	sub	sp, #44	; 0x2c
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	603a      	str	r2, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
 800163c:	460b      	mov	r3, r1
 800163e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SD_disk_ioctl+0x1e>
 800164a:	2304      	movs	r3, #4
 800164c:	e115      	b.n	800187a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d124      	bne.n	80016a4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d012      	beq.n	8001688 <SD_disk_ioctl+0x58>
 8001662:	2b02      	cmp	r3, #2
 8001664:	dc1a      	bgt.n	800169c <SD_disk_ioctl+0x6c>
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <SD_disk_ioctl+0x40>
 800166a:	2b01      	cmp	r3, #1
 800166c:	d006      	beq.n	800167c <SD_disk_ioctl+0x4c>
 800166e:	e015      	b.n	800169c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001670:	f7ff fd0e 	bl	8001090 <SD_PowerOff>
			res = RES_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800167a:	e0fc      	b.n	8001876 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800167c:	f7ff fcc6 	bl	800100c <SD_PowerOn>
			res = RES_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001686:	e0f6      	b.n	8001876 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	1c5c      	adds	r4, r3, #1
 800168c:	f7ff fd0c 	bl	80010a8 <SD_CheckPower>
 8001690:	4603      	mov	r3, r0
 8001692:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800169a:	e0ec      	b.n	8001876 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800169c:	2304      	movs	r3, #4
 800169e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016a2:	e0e8      	b.n	8001876 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016a4:	4b77      	ldr	r3, [pc, #476]	; (8001884 <SD_disk_ioctl+0x254>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SD_disk_ioctl+0x86>
 80016b2:	2303      	movs	r3, #3
 80016b4:	e0e1      	b.n	800187a <SD_disk_ioctl+0x24a>

		SELECT();
 80016b6:	f7ff fc11 	bl	8000edc <SELECT>

		switch (ctrl)
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	2b0d      	cmp	r3, #13
 80016be:	f200 80cb 	bhi.w	8001858 <SD_disk_ioctl+0x228>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <SD_disk_ioctl+0x98>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080017c3 	.word	0x080017c3
 80016cc:	08001701 	.word	0x08001701
 80016d0:	080017b3 	.word	0x080017b3
 80016d4:	08001859 	.word	0x08001859
 80016d8:	08001859 	.word	0x08001859
 80016dc:	08001859 	.word	0x08001859
 80016e0:	08001859 	.word	0x08001859
 80016e4:	08001859 	.word	0x08001859
 80016e8:	08001859 	.word	0x08001859
 80016ec:	08001859 	.word	0x08001859
 80016f0:	08001859 	.word	0x08001859
 80016f4:	080017d5 	.word	0x080017d5
 80016f8:	080017f9 	.word	0x080017f9
 80016fc:	0800181d 	.word	0x0800181d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001700:	2100      	movs	r1, #0
 8001702:	2049      	movs	r0, #73	; 0x49
 8001704:	f7ff fd4f 	bl	80011a6 <SD_SendCmd>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 80a8 	bne.w	8001860 <SD_disk_ioctl+0x230>
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2110      	movs	r1, #16
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fcd2 	bl	80010c0 <SD_RxDataBlock>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 809e 	beq.w	8001860 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001724:	7b3b      	ldrb	r3, [r7, #12]
 8001726:	099b      	lsrs	r3, r3, #6
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d10e      	bne.n	800174c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800172e:	7d7b      	ldrb	r3, [r7, #21]
 8001730:	b29a      	uxth	r2, r3
 8001732:	7d3b      	ldrb	r3, [r7, #20]
 8001734:	b29b      	uxth	r3, r3
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	b29b      	uxth	r3, r3
 800173a:	4413      	add	r3, r2
 800173c:	b29b      	uxth	r3, r3
 800173e:	3301      	adds	r3, #1
 8001740:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001742:	8bfb      	ldrh	r3, [r7, #30]
 8001744:	029a      	lsls	r2, r3, #10
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e02e      	b.n	80017aa <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800174c:	7c7b      	ldrb	r3, [r7, #17]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	b2da      	uxtb	r2, r3
 8001754:	7dbb      	ldrb	r3, [r7, #22]
 8001756:	09db      	lsrs	r3, r3, #7
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4413      	add	r3, r2
 800175c:	b2da      	uxtb	r2, r3
 800175e:	7d7b      	ldrb	r3, [r7, #21]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f003 0306 	and.w	r3, r3, #6
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4413      	add	r3, r2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3302      	adds	r3, #2
 8001770:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001774:	7d3b      	ldrb	r3, [r7, #20]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	b2db      	uxtb	r3, r3
 800177a:	b29a      	uxth	r2, r3
 800177c:	7cfb      	ldrb	r3, [r7, #19]
 800177e:	b29b      	uxth	r3, r3
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	b29b      	uxth	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	b29a      	uxth	r2, r3
 8001788:	7cbb      	ldrb	r3, [r7, #18]
 800178a:	029b      	lsls	r3, r3, #10
 800178c:	b29b      	uxth	r3, r3
 800178e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001792:	b29b      	uxth	r3, r3
 8001794:	4413      	add	r3, r2
 8001796:	b29b      	uxth	r3, r3
 8001798:	3301      	adds	r3, #1
 800179a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800179c:	8bfa      	ldrh	r2, [r7, #30]
 800179e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017a2:	3b09      	subs	r3, #9
 80017a4:	409a      	lsls	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80017b0:	e056      	b.n	8001860 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017c0:	e055      	b.n	800186e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80017c2:	f7ff fc09 	bl	8000fd8 <SD_ReadyWait>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2bff      	cmp	r3, #255	; 0xff
 80017ca:	d14b      	bne.n	8001864 <SD_disk_ioctl+0x234>
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017d2:	e047      	b.n	8001864 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017d4:	2100      	movs	r1, #0
 80017d6:	2049      	movs	r0, #73	; 0x49
 80017d8:	f7ff fce5 	bl	80011a6 <SD_SendCmd>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d142      	bne.n	8001868 <SD_disk_ioctl+0x238>
 80017e2:	2110      	movs	r1, #16
 80017e4:	6a38      	ldr	r0, [r7, #32]
 80017e6:	f7ff fc6b 	bl	80010c0 <SD_RxDataBlock>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d03b      	beq.n	8001868 <SD_disk_ioctl+0x238>
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017f6:	e037      	b.n	8001868 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017f8:	2100      	movs	r1, #0
 80017fa:	204a      	movs	r0, #74	; 0x4a
 80017fc:	f7ff fcd3 	bl	80011a6 <SD_SendCmd>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d132      	bne.n	800186c <SD_disk_ioctl+0x23c>
 8001806:	2110      	movs	r1, #16
 8001808:	6a38      	ldr	r0, [r7, #32]
 800180a:	f7ff fc59 	bl	80010c0 <SD_RxDataBlock>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d02b      	beq.n	800186c <SD_disk_ioctl+0x23c>
 8001814:	2300      	movs	r3, #0
 8001816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800181a:	e027      	b.n	800186c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800181c:	2100      	movs	r1, #0
 800181e:	207a      	movs	r0, #122	; 0x7a
 8001820:	f7ff fcc1 	bl	80011a6 <SD_SendCmd>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d116      	bne.n	8001858 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800182a:	2300      	movs	r3, #0
 800182c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001830:	e00b      	b.n	800184a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001832:	6a3c      	ldr	r4, [r7, #32]
 8001834:	1c63      	adds	r3, r4, #1
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	f7ff fba4 	bl	8000f84 <SPI_RxByte>
 800183c:	4603      	mov	r3, r0
 800183e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001840:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001844:	3301      	adds	r3, #1
 8001846:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800184a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800184e:	2b03      	cmp	r3, #3
 8001850:	d9ef      	bls.n	8001832 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001858:	2304      	movs	r3, #4
 800185a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800185e:	e006      	b.n	800186e <SD_disk_ioctl+0x23e>
			break;
 8001860:	bf00      	nop
 8001862:	e004      	b.n	800186e <SD_disk_ioctl+0x23e>
			break;
 8001864:	bf00      	nop
 8001866:	e002      	b.n	800186e <SD_disk_ioctl+0x23e>
			break;
 8001868:	bf00      	nop
 800186a:	e000      	b.n	800186e <SD_disk_ioctl+0x23e>
			break;
 800186c:	bf00      	nop
		}

		DESELECT();
 800186e:	f7ff fb45 	bl	8000efc <DESELECT>
		SPI_RxByte();
 8001872:	f7ff fb87 	bl	8000f84 <SPI_RxByte>
	}

	return res;
 8001876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800187a:	4618      	mov	r0, r3
 800187c:	372c      	adds	r7, #44	; 0x2c
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	20000000 	.word	0x20000000

08001888 <send_uart>:
// Buffer for UART? Might not even need this
char buffer[1024];


// Send data through UART
void send_uart(char *string){
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7fe fcbd 	bl	8000210 <strlen>
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	b29a      	uxth	r2, r3
 800189e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <send_uart+0x2c>)
 80018a6:	f003 ff0a 	bl	80056be <HAL_UART_Transmit>
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200001f4 	.word	0x200001f4

080018b8 <bufsize>:

// Find the size of data in buffer
int bufsize(char *buf){
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	int i = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
	while(*buf++ != '\0'){
 80018c4:	e002      	b.n	80018cc <bufsize+0x14>
		i++;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3301      	adds	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
	while(*buf++ != '\0'){
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f6      	bne.n	80018c6 <bufsize+0xe>
	}
	return i;
 80018d8:	68fb      	ldr	r3, [r7, #12]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <bufclear>:

// Clear buffer
void bufclear(void){
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1024; i++){
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	e007      	b.n	8001904 <bufclear+0x1c>
		buffer[i] = '\0';
 80018f4:	4a09      	ldr	r2, [pc, #36]	; (800191c <bufclear+0x34>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1024; i++){
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3301      	adds	r3, #1
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190a:	dbf3      	blt.n	80018f4 <bufclear+0xc>
	}
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200022ec 	.word	0x200022ec

08001920 <HAL_ADC_ConvHalfCpltCallback>:
// Size of buffer may need to match size of input buffer from sensors?
// Needs to be divisible by the number of bytes in each line
// that I am writing to the SD card

// Called when buffer is half filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	fromADC_Ptr = &adc_data[0];
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800192c:	601a      	str	r2, [r3, #0]
	toSD_Ptr = &SD_value[0];
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001930:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001932:	601a      	str	r2, [r3, #0]

	dataReady = 1;
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000264 	.word	0x20000264
 800194c:	20000238 	.word	0x20000238
 8001950:	20000004 	.word	0x20000004
 8001954:	2000024c 	.word	0x2000024c
 8001958:	20000268 	.word	0x20000268

0800195c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	fromADC_Ptr = &adc_data[NUM_CHANNELS/2];
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <HAL_ADC_ConvCpltCallback+0x28>)
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001968:	601a      	str	r2, [r3, #0]
	toSD_Ptr = &SD_value[NUM_CHANNELS/2];
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_ADC_ConvCpltCallback+0x30>)
 800196c:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_ADC_ConvCpltCallback+0x34>)
 800196e:	601a      	str	r2, [r3, #0]

	dataReady = 1;
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_ADC_ConvCpltCallback+0x38>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000264 	.word	0x20000264
 8001988:	20000240 	.word	0x20000240
 800198c:	20000004 	.word	0x20000004
 8001990:	20000254 	.word	0x20000254
 8001994:	20000268 	.word	0x20000268

08001998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199e:	f000 fe37 	bl	8002610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a2:	f000 f9e3 	bl	8001d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a6:	f000 fbad 	bl	8002104 <MX_GPIO_Init>
  MX_DMA_Init();
 80019aa:	f000 fb8b 	bl	80020c4 <MX_DMA_Init>
  MX_SPI1_Init();
 80019ae:	f000 fad9 	bl	8001f64 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80019b2:	f000 fb5d 	bl	8002070 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80019b6:	f004 f9f7 	bl	8005da8 <MX_FATFS_Init>
  MX_ADC1_Init();
 80019ba:	f000 fa49 	bl	8001e50 <MX_ADC1_Init>
  MX_TIM1_Init();
 80019be:	f000 fb07 	bl	8001fd0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Start DMA buffer
  // Might need to stop DMA at some point
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_data, NUM_CHANNELS);
 80019c2:	2205      	movs	r2, #5
 80019c4:	490b      	ldr	r1, [pc, #44]	; (80019f4 <main+0x5c>)
 80019c6:	480c      	ldr	r0, [pc, #48]	; (80019f8 <main+0x60>)
 80019c8:	f000 fefc 	bl	80027c4 <HAL_ADC_Start_DMA>

  adc_buf_max = 0;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <main+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
  uint32_t current_acc_z;



  // Mount SD card
  fresult = f_mount(&fs, "", 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	490a      	ldr	r1, [pc, #40]	; (8001a00 <main+0x68>)
 80019d6:	480b      	ldr	r0, [pc, #44]	; (8001a04 <main+0x6c>)
 80019d8:	f006 fc34 	bl	8008244 <f_mount>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <main+0x70>)
 80019e2:	701a      	strb	r2, [r3, #0]

  if(fresult != FR_OK){
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <main+0x70>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d011      	beq.n	8001a10 <main+0x78>
	  send_uart("error in mounting SD card...\n");
 80019ec:	4807      	ldr	r0, [pc, #28]	; (8001a0c <main+0x74>)
 80019ee:	f7ff ff4b 	bl	8001888 <send_uart>
 80019f2:	e010      	b.n	8001a16 <main+0x7e>
 80019f4:	20000238 	.word	0x20000238
 80019f8:	200000ac 	.word	0x200000ac
 80019fc:	20000260 	.word	0x20000260
 8001a00:	0800b368 	.word	0x0800b368
 8001a04:	2000026c 	.word	0x2000026c
 8001a08:	200022d4 	.word	0x200022d4
 8001a0c:	0800b36c 	.word	0x0800b36c
  }
  else{
	  send_uart("SD card mounted successfully...\n");
 8001a10:	48b7      	ldr	r0, [pc, #732]	; (8001cf0 <main+0x358>)
 8001a12:	f7ff ff39 	bl	8001888 <send_uart>
  }

  // Check free space on SD card
  f_getfree("", &fre_clust, &pfs);
 8001a16:	4ab7      	ldr	r2, [pc, #732]	; (8001cf4 <main+0x35c>)
 8001a18:	49b7      	ldr	r1, [pc, #732]	; (8001cf8 <main+0x360>)
 8001a1a:	48b8      	ldr	r0, [pc, #736]	; (8001cfc <main+0x364>)
 8001a1c:	f007 fbe3 	bl	80091e6 <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001a20:	4bb4      	ldr	r3, [pc, #720]	; (8001cf4 <main+0x35c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	3b02      	subs	r3, #2
 8001a28:	4ab2      	ldr	r2, [pc, #712]	; (8001cf4 <main+0x35c>)
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	8952      	ldrh	r2, [r2, #10]
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd86 	bl	8000544 <__aeabi_ui2d>
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	4bb0      	ldr	r3, [pc, #704]	; (8001d00 <main+0x368>)
 8001a3e:	f7fe fdfb 	bl	8000638 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7ff f8a5 	bl	8000b98 <__aeabi_d2uiz>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4aac      	ldr	r2, [pc, #688]	; (8001d04 <main+0x36c>)
 8001a52:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD card total size: \t%lu\n", total);
 8001a54:	4bab      	ldr	r3, [pc, #684]	; (8001d04 <main+0x36c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	49ab      	ldr	r1, [pc, #684]	; (8001d08 <main+0x370>)
 8001a5c:	48ab      	ldr	r0, [pc, #684]	; (8001d0c <main+0x374>)
 8001a5e:	f008 f8c1 	bl	8009be4 <siprintf>
  send_uart(buffer);
 8001a62:	48aa      	ldr	r0, [pc, #680]	; (8001d0c <main+0x374>)
 8001a64:	f7ff ff10 	bl	8001888 <send_uart>
  bufclear();
 8001a68:	f7ff ff3e 	bl	80018e8 <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001a6c:	4ba1      	ldr	r3, [pc, #644]	; (8001cf4 <main+0x35c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	895b      	ldrh	r3, [r3, #10]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4ba0      	ldr	r3, [pc, #640]	; (8001cf8 <main+0x360>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd61 	bl	8000544 <__aeabi_ui2d>
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	4b9e      	ldr	r3, [pc, #632]	; (8001d00 <main+0x368>)
 8001a88:	f7fe fdd6 	bl	8000638 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f880 	bl	8000b98 <__aeabi_d2uiz>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4a9d      	ldr	r2, [pc, #628]	; (8001d10 <main+0x378>)
 8001a9c:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD card free space: \t%lu\n", free_space);
 8001a9e:	4b9c      	ldr	r3, [pc, #624]	; (8001d10 <main+0x378>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	499b      	ldr	r1, [pc, #620]	; (8001d14 <main+0x37c>)
 8001aa6:	4899      	ldr	r0, [pc, #612]	; (8001d0c <main+0x374>)
 8001aa8:	f008 f89c 	bl	8009be4 <siprintf>
  send_uart(buffer);
 8001aac:	4897      	ldr	r0, [pc, #604]	; (8001d0c <main+0x374>)
 8001aae:	f7ff feeb 	bl	8001888 <send_uart>

  // ********** Using puts puts and gets **********

  // Open file 1, write to file, then close file
  fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ab2:	2213      	movs	r2, #19
 8001ab4:	4998      	ldr	r1, [pc, #608]	; (8001d18 <main+0x380>)
 8001ab6:	4899      	ldr	r0, [pc, #612]	; (8001d1c <main+0x384>)
 8001ab8:	f006 fc0a 	bl	80082d0 <f_open>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b97      	ldr	r3, [pc, #604]	; (8001d20 <main+0x388>)
 8001ac2:	701a      	strb	r2, [r3, #0]
  fresult = f_puts("This data is from the first file\n\n", &fil);
 8001ac4:	4995      	ldr	r1, [pc, #596]	; (8001d1c <main+0x384>)
 8001ac6:	4897      	ldr	r0, [pc, #604]	; (8001d24 <main+0x38c>)
 8001ac8:	f007 fcf6 	bl	80094b8 <f_puts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b93      	ldr	r3, [pc, #588]	; (8001d20 <main+0x388>)
 8001ad2:	701a      	strb	r2, [r3, #0]
  fresult = f_close(&fil);
 8001ad4:	4891      	ldr	r0, [pc, #580]	; (8001d1c <main+0x384>)
 8001ad6:	f007 f938 	bl	8008d4a <f_close>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b90      	ldr	r3, [pc, #576]	; (8001d20 <main+0x388>)
 8001ae0:	701a      	strb	r2, [r3, #0]
  send_uart("file1.txt created and the data is written\n");
 8001ae2:	4891      	ldr	r0, [pc, #580]	; (8001d28 <main+0x390>)
 8001ae4:	f7ff fed0 	bl	8001888 <send_uart>
  fresult = f_open(&fil, "file1.txt", FA_READ);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	498b      	ldr	r1, [pc, #556]	; (8001d18 <main+0x380>)
 8001aec:	488b      	ldr	r0, [pc, #556]	; (8001d1c <main+0x384>)
 8001aee:	f006 fbef 	bl	80082d0 <f_open>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b8a      	ldr	r3, [pc, #552]	; (8001d20 <main+0x388>)
 8001af8:	701a      	strb	r2, [r3, #0]
  // Everything worked good except the "fil.fsize" reference
  // This has been replaced in ChaN's FatFs R0.12c version with f_size(&fil)
  f_gets(buffer, f_size(&fil), &fil);
 8001afa:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <main+0x384>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	4a87      	ldr	r2, [pc, #540]	; (8001d1c <main+0x384>)
 8001b00:	4619      	mov	r1, r3
 8001b02:	4882      	ldr	r0, [pc, #520]	; (8001d0c <main+0x374>)
 8001b04:	f007 fc24 	bl	8009350 <f_gets>
  send_uart(buffer);
 8001b08:	4880      	ldr	r0, [pc, #512]	; (8001d0c <main+0x374>)
 8001b0a:	f7ff febd 	bl	8001888 <send_uart>
  f_close(&fil);
 8001b0e:	4883      	ldr	r0, [pc, #524]	; (8001d1c <main+0x384>)
 8001b10:	f007 f91b 	bl	8008d4a <f_close>
  bufclear();
 8001b14:	f7ff fee8 	bl	80018e8 <bufclear>

  // ********** Using f_write and f_read **********

  // Open file 2
  fresult = f_open(&fil, "file2.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b18:	2213      	movs	r2, #19
 8001b1a:	4984      	ldr	r1, [pc, #528]	; (8001d2c <main+0x394>)
 8001b1c:	487f      	ldr	r0, [pc, #508]	; (8001d1c <main+0x384>)
 8001b1e:	f006 fbd7 	bl	80082d0 <f_open>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b7e      	ldr	r3, [pc, #504]	; (8001d20 <main+0x388>)
 8001b28:	701a      	strb	r2, [r3, #0]
  // Write to file 2
  strcpy(buffer, "This is file 2 and it says 'Hello from Ethan!'\n");
 8001b2a:	4a78      	ldr	r2, [pc, #480]	; (8001d0c <main+0x374>)
 8001b2c:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <main+0x398>)
 8001b2e:	4614      	mov	r4, r2
 8001b30:	461d      	mov	r5, r3
 8001b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001b42:	4872      	ldr	r0, [pc, #456]	; (8001d0c <main+0x374>)
 8001b44:	f7ff feb8 	bl	80018b8 <bufsize>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b79      	ldr	r3, [pc, #484]	; (8001d34 <main+0x39c>)
 8001b4e:	496f      	ldr	r1, [pc, #444]	; (8001d0c <main+0x374>)
 8001b50:	4872      	ldr	r0, [pc, #456]	; (8001d1c <main+0x384>)
 8001b52:	f006 fee8 	bl	8008926 <f_write>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b71      	ldr	r3, [pc, #452]	; (8001d20 <main+0x388>)
 8001b5c:	701a      	strb	r2, [r3, #0]
  send_uart("file 2.txt created and data is written\n");
 8001b5e:	4876      	ldr	r0, [pc, #472]	; (8001d38 <main+0x3a0>)
 8001b60:	f7ff fe92 	bl	8001888 <send_uart>
  // Close file 2
  f_close(&fil);
 8001b64:	486d      	ldr	r0, [pc, #436]	; (8001d1c <main+0x384>)
 8001b66:	f007 f8f0 	bl	8008d4a <f_close>
  // Clear buffer to show that text is obtained from the file
  bufclear();
 8001b6a:	f7ff febd 	bl	80018e8 <bufclear>

  // ********** UPDATE an existing file **********
  // Open file with write access
  fresult = f_open(&fil, "file2.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8001b6e:	2212      	movs	r2, #18
 8001b70:	496e      	ldr	r1, [pc, #440]	; (8001d2c <main+0x394>)
 8001b72:	486a      	ldr	r0, [pc, #424]	; (8001d1c <main+0x384>)
 8001b74:	f006 fbac 	bl	80082d0 <f_open>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <main+0x388>)
 8001b7e:	701a      	strb	r2, [r3, #0]
  // Move offset to end of file (append) (offset = file size)
  fresult = f_lseek(&fil, f_size(&fil));
 8001b80:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <main+0x384>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4619      	mov	r1, r3
 8001b86:	4865      	ldr	r0, [pc, #404]	; (8001d1c <main+0x384>)
 8001b88:	f007 f909 	bl	8008d9e <f_lseek>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <main+0x388>)
 8001b92:	701a      	strb	r2, [r3, #0]
  // Write string to file
  fresult = f_puts("This text should be appended\n", &fil);
 8001b94:	4961      	ldr	r1, [pc, #388]	; (8001d1c <main+0x384>)
 8001b96:	4869      	ldr	r0, [pc, #420]	; (8001d3c <main+0x3a4>)
 8001b98:	f007 fc8e 	bl	80094b8 <f_puts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	4b5f      	ldr	r3, [pc, #380]	; (8001d20 <main+0x388>)
 8001ba2:	701a      	strb	r2, [r3, #0]
  // Write string to file
  fresult = f_printf(&fil, "%d %s", 2023, "is the current year\n");
 8001ba4:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <main+0x3a8>)
 8001ba6:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8001baa:	4966      	ldr	r1, [pc, #408]	; (8001d44 <main+0x3ac>)
 8001bac:	485b      	ldr	r0, [pc, #364]	; (8001d1c <main+0x384>)
 8001bae:	f007 fca7 	bl	8009500 <f_printf>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4b5a      	ldr	r3, [pc, #360]	; (8001d20 <main+0x388>)
 8001bb8:	701a      	strb	r2, [r3, #0]
  // Close file
  f_close(&fil);
 8001bba:	4858      	ldr	r0, [pc, #352]	; (8001d1c <main+0x384>)
 8001bbc:	f007 f8c5 	bl	8008d4a <f_close>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Initialize respective sensor data variables
	  current_audio = adc_data[0];
 8001bc0:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <main+0x3b0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  current_pressure = adc_data[1];
 8001bc6:	4b60      	ldr	r3, [pc, #384]	; (8001d48 <main+0x3b0>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
	  current_acc = sqrt(pow(adc_data[2], 2) + pow(adc_data[3], 2) + pow(adc_data[4], 2));
 8001bcc:	4b5e      	ldr	r3, [pc, #376]	; (8001d48 <main+0x3b0>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fcb7 	bl	8000544 <__aeabi_ui2d>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001ce8 <main+0x350>
 8001bde:	ec43 2b10 	vmov	d0, r2, r3
 8001be2:	f008 fc6d 	bl	800a4c0 <pow>
 8001be6:	ec55 4b10 	vmov	r4, r5, d0
 8001bea:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <main+0x3b0>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fca8 	bl	8000544 <__aeabi_ui2d>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8001ce8 <main+0x350>
 8001bfc:	ec43 2b10 	vmov	d0, r2, r3
 8001c00:	f008 fc5e 	bl	800a4c0 <pow>
 8001c04:	ec53 2b10 	vmov	r2, r3, d0
 8001c08:	4620      	mov	r0, r4
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	f7fe fb5e 	bl	80002cc <__adddf3>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4b4b      	ldr	r3, [pc, #300]	; (8001d48 <main+0x3b0>)
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fc91 	bl	8000544 <__aeabi_ui2d>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001ce8 <main+0x350>
 8001c2a:	ec43 2b10 	vmov	d0, r2, r3
 8001c2e:	f008 fc47 	bl	800a4c0 <pow>
 8001c32:	ec53 2b10 	vmov	r2, r3, d0
 8001c36:	4620      	mov	r0, r4
 8001c38:	4629      	mov	r1, r5
 8001c3a:	f7fe fb47 	bl	80002cc <__adddf3>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	ec43 2b17 	vmov	d7, r2, r3
 8001c46:	eeb0 0a47 	vmov.f32	s0, s14
 8001c4a:	eef0 0a67 	vmov.f32	s1, s15
 8001c4e:	f008 fca7 	bl	800a5a0 <sqrt>
 8001c52:	ec53 2b10 	vmov	r2, r3, d0
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ff9d 	bl	8000b98 <__aeabi_d2uiz>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24

	  current_acc_x = adc_data[2];
 8001c62:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <main+0x3b0>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	623b      	str	r3, [r7, #32]
	  current_acc_y = adc_data[3];
 8001c68:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <main+0x3b0>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61fb      	str	r3, [r7, #28]
	  current_acc_z = adc_data[4];
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <main+0x3b0>)
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	61bb      	str	r3, [r7, #24]


	  // Increment count
	  count++;
 8001c74:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <main+0x3b4>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <main+0x3b4>)
 8001c7e:	701a      	strb	r2, [r3, #0]

	  // FIXME: Change delay to be every microsecond (0.001)?
	  HAL_Delay(0.001);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f000 fd37 	bl	80026f4 <HAL_Delay>

	  if(adc_data[0] > adc_buf_max) {
 8001c86:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <main+0x3b0>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <main+0x3b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d903      	bls.n	8001c9a <main+0x302>
		  adc_buf_max = adc_data[0];
 8001c92:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <main+0x3b0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a2e      	ldr	r2, [pc, #184]	; (8001d50 <main+0x3b8>)
 8001c98:	6013      	str	r3, [r2, #0]
	  // so that I can format each value properly?



	  // Open new file to save count variable
	  fresult = f_open(&fil, "ADC_count_log.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8001c9a:	2212      	movs	r2, #18
 8001c9c:	492d      	ldr	r1, [pc, #180]	; (8001d54 <main+0x3bc>)
 8001c9e:	481f      	ldr	r0, [pc, #124]	; (8001d1c <main+0x384>)
 8001ca0:	f006 fb16 	bl	80082d0 <f_open>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <main+0x388>)
 8001caa:	701a      	strb	r2, [r3, #0]
	  // Move offset to end of file (append) (offset = file size)
	  fresult = f_lseek(&fil, f_size(&fil));
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <main+0x384>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	481a      	ldr	r0, [pc, #104]	; (8001d1c <main+0x384>)
 8001cb4:	f007 f873 	bl	8008d9e <f_lseek>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <main+0x388>)
 8001cbe:	701a      	strb	r2, [r3, #0]
	  // Write string to file
	  fresult = f_printf(&fil, "count = %d\n", count);
 8001cc0:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <main+0x3b4>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4924      	ldr	r1, [pc, #144]	; (8001d58 <main+0x3c0>)
 8001cc8:	4814      	ldr	r0, [pc, #80]	; (8001d1c <main+0x384>)
 8001cca:	f007 fc19 	bl	8009500 <f_printf>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <main+0x388>)
 8001cd4:	701a      	strb	r2, [r3, #0]
	  // Close file
	  f_close(&fil);
 8001cd6:	4811      	ldr	r0, [pc, #68]	; (8001d1c <main+0x384>)
 8001cd8:	f007 f837 	bl	8008d4a <f_close>

	  // The current samples will be the "previous" samples for the next samples
	  previous_audio = current_audio;
 8001cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cde:	617b      	str	r3, [r7, #20]
	  previous_pressure = current_pressure;
 8001ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce2:	613b      	str	r3, [r7, #16]
	  previous_acc = current_acc;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	e039      	b.n	8001d5c <main+0x3c4>
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	40000000 	.word	0x40000000
 8001cf0:	0800b38c 	.word	0x0800b38c
 8001cf4:	200022dc 	.word	0x200022dc
 8001cf8:	200022e0 	.word	0x200022e0
 8001cfc:	0800b368 	.word	0x0800b368
 8001d00:	3fe00000 	.word	0x3fe00000
 8001d04:	200022e4 	.word	0x200022e4
 8001d08:	0800b3b0 	.word	0x0800b3b0
 8001d0c:	200022ec 	.word	0x200022ec
 8001d10:	200022e8 	.word	0x200022e8
 8001d14:	0800b3cc 	.word	0x0800b3cc
 8001d18:	0800b3e8 	.word	0x0800b3e8
 8001d1c:	200012a4 	.word	0x200012a4
 8001d20:	200022d4 	.word	0x200022d4
 8001d24:	0800b3f4 	.word	0x0800b3f4
 8001d28:	0800b418 	.word	0x0800b418
 8001d2c:	0800b444 	.word	0x0800b444
 8001d30:	0800b450 	.word	0x0800b450
 8001d34:	200022d8 	.word	0x200022d8
 8001d38:	0800b480 	.word	0x0800b480
 8001d3c:	0800b4a8 	.word	0x0800b4a8
 8001d40:	0800b4c8 	.word	0x0800b4c8
 8001d44:	0800b4e0 	.word	0x0800b4e0
 8001d48:	20000238 	.word	0x20000238
 8001d4c:	20000269 	.word	0x20000269
 8001d50:	20000260 	.word	0x20000260
 8001d54:	0800b4e8 	.word	0x0800b4e8
 8001d58:	0800b4fc 	.word	0x0800b4fc
 8001d5c:	60fb      	str	r3, [r7, #12]

	  previous_acc_x = current_acc_x;
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	60bb      	str	r3, [r7, #8]
	  previous_acc_y = current_acc_y;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	607b      	str	r3, [r7, #4]
	  previous_acc_z = current_acc_z;
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	603b      	str	r3, [r7, #0]
	  current_audio = adc_data[0];
 8001d6a:	e729      	b.n	8001bc0 <main+0x228>

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b094      	sub	sp, #80	; 0x50
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 031c 	add.w	r3, r7, #28
 8001d76:	2234      	movs	r2, #52	; 0x34
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f007 ff2a 	bl	8009bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <SystemClock_Config+0xdc>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	4a2b      	ldr	r2, [pc, #172]	; (8001e48 <SystemClock_Config+0xdc>)
 8001d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <SystemClock_Config+0xdc>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dac:	2300      	movs	r3, #0
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <SystemClock_Config+0xe0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <SystemClock_Config+0xe0>)
 8001db6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <SystemClock_Config+0xe0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ddc:	2304      	movs	r3, #4
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001de0:	23b4      	movs	r3, #180	; 0xb4
 8001de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de4:	2302      	movs	r3, #2
 8001de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001de8:	2302      	movs	r3, #2
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dec:	2302      	movs	r3, #2
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 fa79 	bl	80042ec <HAL_RCC_OscConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e00:	f000 f9d0 	bl	80021a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e04:	f001 fed8 	bl	8003bb8 <HAL_PWREx_EnableOverDrive>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e0e:	f000 f9c9 	bl	80021a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e12:	230f      	movs	r3, #15
 8001e14:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e16:	2302      	movs	r3, #2
 8001e18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001e24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e28:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e2a:	f107 0308 	add.w	r3, r7, #8
 8001e2e:	2105      	movs	r1, #5
 8001e30:	4618      	mov	r0, r3
 8001e32:	f001 ff11 	bl	8003c58 <HAL_RCC_ClockConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001e3c:	f000 f9b2 	bl	80021a4 <Error_Handler>
  }
}
 8001e40:	bf00      	nop
 8001e42:	3750      	adds	r7, #80	; 0x50
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40007000 	.word	0x40007000

08001e50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e56:	463b      	mov	r3, r7
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001e64:	4a3d      	ldr	r2, [pc, #244]	; (8001f5c <MX_ADC1_Init+0x10c>)
 8001e66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e68:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001e6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e70:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e76:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e7c:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e82:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e8a:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e90:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001e92:	4a33      	ldr	r2, [pc, #204]	; (8001f60 <MX_ADC1_Init+0x110>)
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e96:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eb0:	4829      	ldr	r0, [pc, #164]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001eb2:	f000 fc43 	bl	800273c <HAL_ADC_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ebc:	f000 f972 	bl	80021a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001ec8:	2307      	movs	r3, #7
 8001eca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ecc:	463b      	mov	r3, r7
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4821      	ldr	r0, [pc, #132]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001ed2:	f000 fd91 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001edc:	f000 f962 	bl	80021a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ee8:	463b      	mov	r3, r7
 8001eea:	4619      	mov	r1, r3
 8001eec:	481a      	ldr	r0, [pc, #104]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001eee:	f000 fd83 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001ef8:	f000 f954 	bl	80021a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001efc:	2302      	movs	r3, #2
 8001efe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001f00:	2303      	movs	r3, #3
 8001f02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f04:	463b      	mov	r3, r7
 8001f06:	4619      	mov	r1, r3
 8001f08:	4813      	ldr	r0, [pc, #76]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001f0a:	f000 fd75 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001f14:	f000 f946 	bl	80021a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f20:	463b      	mov	r3, r7
 8001f22:	4619      	mov	r1, r3
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001f26:	f000 fd67 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001f30:	f000 f938 	bl	80021a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f34:	2304      	movs	r3, #4
 8001f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f38:	2305      	movs	r3, #5
 8001f3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_ADC1_Init+0x108>)
 8001f42:	f000 fd59 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001f4c:	f000 f92a 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200000ac 	.word	0x200000ac
 8001f5c:	40012000 	.word	0x40012000
 8001f60:	0f000001 	.word	0x0f000001

08001f64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f6a:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <MX_SPI1_Init+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f98:	2210      	movs	r2, #16
 8001f9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001fb0:	220a      	movs	r2, #10
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fb4:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001fb6:	f002 fc37 	bl	8004828 <HAL_SPI_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fc0:	f000 f8f0 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000154 	.word	0x20000154
 8001fcc:	40013000 	.word	0x40013000

08001fd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <MX_TIM1_Init+0x98>)
 8001fee:	4a1f      	ldr	r2, [pc, #124]	; (800206c <MX_TIM1_Init+0x9c>)
 8001ff0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <MX_TIM1_Init+0x98>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <MX_TIM1_Init+0x98>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_TIM1_Init+0x98>)
 8002000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002004:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <MX_TIM1_Init+0x98>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <MX_TIM1_Init+0x98>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <MX_TIM1_Init+0x98>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002018:	4813      	ldr	r0, [pc, #76]	; (8002068 <MX_TIM1_Init+0x98>)
 800201a:	f003 f837 	bl	800508c <HAL_TIM_Base_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002024:	f000 f8be 	bl	80021a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	4619      	mov	r1, r3
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <MX_TIM1_Init+0x98>)
 8002036:	f003 f878 	bl	800512a <HAL_TIM_ConfigClockSource>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002040:	f000 f8b0 	bl	80021a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800204c:	463b      	mov	r3, r7
 800204e:	4619      	mov	r1, r3
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_TIM1_Init+0x98>)
 8002052:	f003 fa6b 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800205c:	f000 f8a2 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200001ac 	.word	0x200001ac
 800206c:	40010000 	.word	0x40010000

08002070 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <MX_USART1_UART_Init+0x50>)
 8002078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 800207c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002080:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 80020a8:	f003 fabc 	bl	8005624 <HAL_UART_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020b2:	f000 f877 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200001f4 	.word	0x200001f4
 80020c0:	40011000 	.word	0x40011000

080020c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <MX_DMA_Init+0x3c>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a0b      	ldr	r2, [pc, #44]	; (8002100 <MX_DMA_Init+0x3c>)
 80020d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <MX_DMA_Init+0x3c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2038      	movs	r0, #56	; 0x38
 80020ec:	f001 f80f 	bl	800310e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020f0:	2038      	movs	r0, #56	; 0x38
 80020f2:	f001 f828 	bl	8003146 <HAL_NVIC_EnableIRQ>

}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800

08002104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	4b1f      	ldr	r3, [pc, #124]	; (800219c <MX_GPIO_Init+0x98>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a1e      	ldr	r2, [pc, #120]	; (800219c <MX_GPIO_Init+0x98>)
 8002124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <MX_GPIO_Init+0x98>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <MX_GPIO_Init+0x98>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a17      	ldr	r2, [pc, #92]	; (800219c <MX_GPIO_Init+0x98>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <MX_GPIO_Init+0x98>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <MX_GPIO_Init+0x98>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a10      	ldr	r2, [pc, #64]	; (800219c <MX_GPIO_Init+0x98>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <MX_GPIO_Init+0x98>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	2101      	movs	r1, #1
 8002172:	480b      	ldr	r0, [pc, #44]	; (80021a0 <MX_GPIO_Init+0x9c>)
 8002174:	f001 fd06 	bl	8003b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002178:	2301      	movs	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217c:	2301      	movs	r3, #1
 800217e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	4619      	mov	r1, r3
 800218e:	4804      	ldr	r0, [pc, #16]	; (80021a0 <MX_GPIO_Init+0x9c>)
 8002190:	f001 fb64 	bl	800385c <HAL_GPIO_Init>

}
 8002194:	bf00      	nop
 8002196:	3720      	adds	r7, #32
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020400 	.word	0x40020400

080021a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a8:	b672      	cpsid	i
}
 80021aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ac:	e7fe      	b.n	80021ac <Error_Handler+0x8>
	...

080021b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <HAL_MspInit+0x4c>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <HAL_MspInit+0x4c>)
 80021c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c4:	6453      	str	r3, [r2, #68]	; 0x44
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_MspInit+0x4c>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_MspInit+0x4c>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a08      	ldr	r2, [pc, #32]	; (80021fc <HAL_MspInit+0x4c>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_MspInit+0x4c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021ee:	2007      	movs	r0, #7
 80021f0:	f000 ff82 	bl	80030f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40023800 	.word	0x40023800

08002200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <HAL_ADC_MspInit+0xdc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d157      	bne.n	80022d2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <HAL_ADC_MspInit+0xe0>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <HAL_ADC_MspInit+0xe0>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
 8002232:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <HAL_ADC_MspInit+0xe0>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_ADC_MspInit+0xe0>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <HAL_ADC_MspInit+0xe0>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_ADC_MspInit+0xe0>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800225a:	231f      	movs	r3, #31
 800225c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800225e:	2303      	movs	r3, #3
 8002260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	481d      	ldr	r0, [pc, #116]	; (80022e4 <HAL_ADC_MspInit+0xe4>)
 800226e:	f001 faf5 	bl	800385c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 8002274:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <HAL_ADC_MspInit+0xec>)
 8002276:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 800227a:	2200      	movs	r2, #0
 800227c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 800228c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002290:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 8002294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002298:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 800229c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 80022a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022b6:	480c      	ldr	r0, [pc, #48]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 80022b8:	f000 ff60 	bl	800317c <HAL_DMA_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80022c2:	f7ff ff6f 	bl	80021a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 80022ca:	639a      	str	r2, [r3, #56]	; 0x38
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <HAL_ADC_MspInit+0xe8>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022d2:	bf00      	nop
 80022d4:	3728      	adds	r7, #40	; 0x28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40012000 	.word	0x40012000
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40020000 	.word	0x40020000
 80022e8:	200000f4 	.word	0x200000f4
 80022ec:	40026410 	.word	0x40026410

080022f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a19      	ldr	r2, [pc, #100]	; (8002374 <HAL_SPI_MspInit+0x84>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d12b      	bne.n	800236a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_SPI_MspInit+0x88>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a17      	ldr	r2, [pc, #92]	; (8002378 <HAL_SPI_MspInit+0x88>)
 800231c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_SPI_MspInit+0x88>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_SPI_MspInit+0x88>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_SPI_MspInit+0x88>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_SPI_MspInit+0x88>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800234a:	23e0      	movs	r3, #224	; 0xe0
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800235a:	2305      	movs	r3, #5
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <HAL_SPI_MspInit+0x8c>)
 8002366:	f001 fa79 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800236a:	bf00      	nop
 800236c:	3728      	adds	r7, #40	; 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40013000 	.word	0x40013000
 8002378:	40023800 	.word	0x40023800
 800237c:	40020000 	.word	0x40020000

08002380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_TIM_Base_MspInit+0x3c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10d      	bne.n	80023ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_TIM_Base_MspInit+0x40>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <HAL_TIM_Base_MspInit+0x40>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_TIM_Base_MspInit+0x40>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40010000 	.word	0x40010000
 80023c0:	40023800 	.word	0x40023800

080023c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_UART_MspInit+0x84>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d12c      	bne.n	8002440 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_UART_MspInit+0x88>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	4a17      	ldr	r2, [pc, #92]	; (800244c <HAL_UART_MspInit+0x88>)
 80023f0:	f043 0310 	orr.w	r3, r3, #16
 80023f4:	6453      	str	r3, [r2, #68]	; 0x44
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_UART_MspInit+0x88>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_UART_MspInit+0x88>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a10      	ldr	r2, [pc, #64]	; (800244c <HAL_UART_MspInit+0x88>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <HAL_UART_MspInit+0x88>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800241e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002430:	2307      	movs	r3, #7
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	4619      	mov	r1, r3
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <HAL_UART_MspInit+0x8c>)
 800243c:	f001 fa0e 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002440:	bf00      	nop
 8002442:	3728      	adds	r7, #40	; 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40011000 	.word	0x40011000
 800244c:	40023800 	.word	0x40023800
 8002450:	40020000 	.word	0x40020000

08002454 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
	if(Timer1 > 0){
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <SDTimer_Handler+0x40>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <SDTimer_Handler+0x1c>
		Timer1--;
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <SDTimer_Handler+0x40>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b2da      	uxtb	r2, r3
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <SDTimer_Handler+0x40>)
 800246e:	701a      	strb	r2, [r3, #0]
		}
	if(Timer2 > 0){
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <SDTimer_Handler+0x44>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <SDTimer_Handler+0x34>
		Timer2--;
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <SDTimer_Handler+0x44>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <SDTimer_Handler+0x44>)
 8002486:	701a      	strb	r2, [r3, #0]
	}
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	200026ed 	.word	0x200026ed
 8002498:	200026ee 	.word	0x200026ee

0800249c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <NMI_Handler+0x4>

080024a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <HardFault_Handler+0x4>

080024a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <MemManage_Handler+0x4>

080024ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b2:	e7fe      	b.n	80024b2 <BusFault_Handler+0x4>

080024b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <UsageFault_Handler+0x4>

080024ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <SysTick_Handler+0x30>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <SysTick_Handler+0x30>)
 80024f4:	701a      	strb	r2, [r3, #0]

	if(FatFsCnt >= 10){
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <SysTick_Handler+0x30>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	d904      	bls.n	800250a <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <SysTick_Handler+0x30>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002506:	f7ff ffa5 	bl	8002454 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800250a:	f000 f8d3 	bl	80026b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200026ec 	.word	0x200026ec

08002518 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <DMA2_Stream0_IRQHandler+0x10>)
 800251e:	f000 ff33 	bl	8003388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200000f4 	.word	0x200000f4

0800252c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002534:	4a14      	ldr	r2, [pc, #80]	; (8002588 <_sbrk+0x5c>)
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <_sbrk+0x60>)
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <_sbrk+0x64>)
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <_sbrk+0x68>)
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	429a      	cmp	r2, r3
 800255a:	d207      	bcs.n	800256c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800255c:	f007 fb10 	bl	8009b80 <__errno>
 8002560:	4603      	mov	r3, r0
 8002562:	220c      	movs	r2, #12
 8002564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	e009      	b.n	8002580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <_sbrk+0x64>)
 800257c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800257e:	68fb      	ldr	r3, [r7, #12]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20020000 	.word	0x20020000
 800258c:	00000400 	.word	0x00000400
 8002590:	200026f0 	.word	0x200026f0
 8002594:	20002948 	.word	0x20002948

08002598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <SystemInit+0x20>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <SystemInit+0x20>)
 80025a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c0:	480d      	ldr	r0, [pc, #52]	; (80025f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025c2:	490e      	ldr	r1, [pc, #56]	; (80025fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025c4:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c8:	e002      	b.n	80025d0 <LoopCopyDataInit>

080025ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ce:	3304      	adds	r3, #4

080025d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d4:	d3f9      	bcc.n	80025ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025d8:	4c0b      	ldr	r4, [pc, #44]	; (8002608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025dc:	e001      	b.n	80025e2 <LoopFillZerobss>

080025de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e0:	3204      	adds	r2, #4

080025e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e4:	d3fb      	bcc.n	80025de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025e6:	f7ff ffd7 	bl	8002598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ea:	f007 facf 	bl	8009b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ee:	f7ff f9d3 	bl	8001998 <main>
  bx  lr    
 80025f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025fc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002600:	0800ba28 	.word	0x0800ba28
  ldr r2, =_sbss
 8002604:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002608:	20002944 	.word	0x20002944

0800260c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800260c:	e7fe      	b.n	800260c <ADC_IRQHandler>
	...

08002610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <HAL_Init+0x40>)
 800261a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_Init+0x40>)
 8002626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_Init+0x40>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002638:	2003      	movs	r0, #3
 800263a:	f000 fd5d 	bl	80030f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800263e:	2000      	movs	r0, #0
 8002640:	f000 f808 	bl	8002654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002644:	f7ff fdb4 	bl	80021b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00

08002654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_InitTick+0x54>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_InitTick+0x58>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	fbb3 f3f1 	udiv	r3, r3, r1
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fd75 	bl	8003162 <HAL_SYSTICK_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00e      	b.n	80026a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d80a      	bhi.n	800269e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002688:	2200      	movs	r2, #0
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f000 fd3d 	bl	800310e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_InitTick+0x5c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000008 	.word	0x20000008
 80026ac:	20000010 	.word	0x20000010
 80026b0:	2000000c 	.word	0x2000000c

080026b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_IncTick+0x20>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_IncTick+0x24>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_IncTick+0x24>)
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000010 	.word	0x20000010
 80026d8:	200026f4 	.word	0x200026f4

080026dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return uwTick;
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_GetTick+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	200026f4 	.word	0x200026f4

080026f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff ffee 	bl	80026dc <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d005      	beq.n	800271a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_Delay+0x44>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800271a:	bf00      	nop
 800271c:	f7ff ffde 	bl	80026dc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	429a      	cmp	r2, r3
 800272a:	d8f7      	bhi.n	800271c <HAL_Delay+0x28>
  {
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000010 	.word	0x20000010

0800273c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e033      	b.n	80027ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff fd50 	bl	8002200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	d118      	bne.n	80027ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002782:	f023 0302 	bic.w	r3, r3, #2
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fa64 	bl	8002c5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
 80027aa:	e001      	b.n	80027b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_Start_DMA+0x1e>
 80027de:	2302      	movs	r3, #2
 80027e0:	e0e9      	b.n	80029b6 <HAL_ADC_Start_DMA+0x1f2>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d018      	beq.n	800282a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002808:	4b6d      	ldr	r3, [pc, #436]	; (80029c0 <HAL_ADC_Start_DMA+0x1fc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a6d      	ldr	r2, [pc, #436]	; (80029c4 <HAL_ADC_Start_DMA+0x200>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9a      	lsrs	r2, r3, #18
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800281c:	e002      	b.n	8002824 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	3b01      	subs	r3, #1
 8002822:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f9      	bne.n	800281e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002838:	d107      	bne.n	800284a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002848:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	f040 80a1 	bne.w	800299c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002884:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002898:	d106      	bne.n	80028a8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	f023 0206 	bic.w	r2, r3, #6
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44
 80028a6:	e002      	b.n	80028ae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b6:	4b44      	ldr	r3, [pc, #272]	; (80029c8 <HAL_ADC_Start_DMA+0x204>)
 80028b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	4a43      	ldr	r2, [pc, #268]	; (80029cc <HAL_ADC_Start_DMA+0x208>)
 80028c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	4a42      	ldr	r2, [pc, #264]	; (80029d0 <HAL_ADC_Start_DMA+0x20c>)
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	4a41      	ldr	r2, [pc, #260]	; (80029d4 <HAL_ADC_Start_DMA+0x210>)
 80028d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80028ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	334c      	adds	r3, #76	; 0x4c
 8002906:	4619      	mov	r1, r3
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f000 fce4 	bl	80032d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	2b00      	cmp	r3, #0
 800291a:	d12a      	bne.n	8002972 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a2d      	ldr	r2, [pc, #180]	; (80029d8 <HAL_ADC_Start_DMA+0x214>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d015      	beq.n	8002952 <HAL_ADC_Start_DMA+0x18e>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a2c      	ldr	r2, [pc, #176]	; (80029dc <HAL_ADC_Start_DMA+0x218>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d105      	bne.n	800293c <HAL_ADC_Start_DMA+0x178>
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <HAL_ADC_Start_DMA+0x204>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <HAL_ADC_Start_DMA+0x21c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d136      	bne.n	80029b4 <HAL_ADC_Start_DMA+0x1f0>
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_ADC_Start_DMA+0x204>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	d130      	bne.n	80029b4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d129      	bne.n	80029b4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	e020      	b.n	80029b4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_ADC_Start_DMA+0x214>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d11b      	bne.n	80029b4 <HAL_ADC_Start_DMA+0x1f0>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d114      	bne.n	80029b4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	e00b      	b.n	80029b4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f043 0210 	orr.w	r2, r3, #16
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000008 	.word	0x20000008
 80029c4:	431bde83 	.word	0x431bde83
 80029c8:	40012300 	.word	0x40012300
 80029cc:	08002e55 	.word	0x08002e55
 80029d0:	08002f0f 	.word	0x08002f0f
 80029d4:	08002f2b 	.word	0x08002f2b
 80029d8:	40012000 	.word	0x40012000
 80029dc:	40012100 	.word	0x40012100
 80029e0:	40012200 	.word	0x40012200

080029e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x1c>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e113      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x244>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b09      	cmp	r3, #9
 8002a22:	d925      	bls.n	8002a70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68d9      	ldr	r1, [r3, #12]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	3b1e      	subs	r3, #30
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43da      	mvns	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	400a      	ands	r2, r1
 8002a48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68d9      	ldr	r1, [r3, #12]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4403      	add	r3, r0
 8002a62:	3b1e      	subs	r3, #30
 8002a64:	409a      	lsls	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	e022      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6919      	ldr	r1, [r3, #16]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	2207      	movs	r2, #7
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	400a      	ands	r2, r1
 8002a92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6919      	ldr	r1, [r3, #16]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4403      	add	r3, r0
 8002aac:	409a      	lsls	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d824      	bhi.n	8002b08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b05      	subs	r3, #5
 8002ad0:	221f      	movs	r2, #31
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	400a      	ands	r2, r1
 8002ade:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	4618      	mov	r0, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	3b05      	subs	r3, #5
 8002afa:	fa00 f203 	lsl.w	r2, r0, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34
 8002b06:	e04c      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d824      	bhi.n	8002b5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b23      	subs	r3, #35	; 0x23
 8002b22:	221f      	movs	r2, #31
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	400a      	ands	r2, r1
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	3b23      	subs	r3, #35	; 0x23
 8002b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
 8002b58:	e023      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	3b41      	subs	r3, #65	; 0x41
 8002b6c:	221f      	movs	r2, #31
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	400a      	ands	r2, r1
 8002b7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	3b41      	subs	r3, #65	; 0x41
 8002b96:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba2:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_ADC_ConfigChannel+0x250>)
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a28      	ldr	r2, [pc, #160]	; (8002c4c <HAL_ADC_ConfigChannel+0x254>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d10f      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1d8>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b12      	cmp	r3, #18
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <HAL_ADC_ConfigChannel+0x254>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d12b      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x23a>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <HAL_ADC_ConfigChannel+0x258>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <HAL_ADC_ConfigChannel+0x1f4>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b11      	cmp	r3, #17
 8002bea:	d122      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <HAL_ADC_ConfigChannel+0x258>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d111      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_ADC_ConfigChannel+0x25c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a11      	ldr	r2, [pc, #68]	; (8002c58 <HAL_ADC_ConfigChannel+0x260>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	0c9a      	lsrs	r2, r3, #18
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c24:	e002      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f9      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40012300 	.word	0x40012300
 8002c4c:	40012000 	.word	0x40012000
 8002c50:	10000012 	.word	0x10000012
 8002c54:	20000008 	.word	0x20000008
 8002c58:	431bde83 	.word	0x431bde83

08002c5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c64:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <ADC_Init+0x1f0>)
 8002c66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	021a      	lsls	r2, r3, #8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	4a58      	ldr	r2, [pc, #352]	; (8002e50 <ADC_Init+0x1f4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d022      	beq.n	8002d3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	e00f      	b.n	8002d5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0202 	bic.w	r2, r2, #2
 8002d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7e1b      	ldrb	r3, [r3, #24]
 8002d74:	005a      	lsls	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01b      	beq.n	8002dc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002da6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	3b01      	subs	r3, #1
 8002db4:	035a      	lsls	r2, r3, #13
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	e007      	b.n	8002dd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	051a      	lsls	r2, r3, #20
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6899      	ldr	r1, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e12:	025a      	lsls	r2, r3, #9
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6899      	ldr	r1, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	029a      	lsls	r2, r3, #10
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40012300 	.word	0x40012300
 8002e50:	0f000001 	.word	0x0f000001

08002e54 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d13c      	bne.n	8002ee8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d12b      	bne.n	8002ee0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d127      	bne.n	8002ee0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d119      	bne.n	8002ee0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0220 	bic.w	r2, r2, #32
 8002eba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d105      	bne.n	8002ee0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7fe fd3b 	bl	800195c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ee6:	e00e      	b.n	8002f06 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f7ff fd75 	bl	80029e4 <HAL_ADC_ErrorCallback>
}
 8002efa:	e004      	b.n	8002f06 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7fe fcff 	bl	8001920 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2240      	movs	r2, #64	; 0x40
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f043 0204 	orr.w	r2, r3, #4
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff fd4a 	bl	80029e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f74:	4013      	ands	r3, r2
 8002f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f8a:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <__NVIC_SetPriorityGrouping+0x44>)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	60d3      	str	r3, [r2, #12]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa4:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	f003 0307 	and.w	r3, r3, #7
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	db0b      	blt.n	8002fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	f003 021f 	and.w	r2, r3, #31
 8002fd4:	4907      	ldr	r1, [pc, #28]	; (8002ff4 <__NVIC_EnableIRQ+0x38>)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2001      	movs	r0, #1
 8002fde:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000e100 	.word	0xe000e100

08002ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	6039      	str	r1, [r7, #0]
 8003002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	2b00      	cmp	r3, #0
 800300a:	db0a      	blt.n	8003022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	490c      	ldr	r1, [pc, #48]	; (8003044 <__NVIC_SetPriority+0x4c>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	0112      	lsls	r2, r2, #4
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	440b      	add	r3, r1
 800301c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003020:	e00a      	b.n	8003038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4908      	ldr	r1, [pc, #32]	; (8003048 <__NVIC_SetPriority+0x50>)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	3b04      	subs	r3, #4
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	440b      	add	r3, r1
 8003036:	761a      	strb	r2, [r3, #24]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000e100 	.word	0xe000e100
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	; 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f1c3 0307 	rsb	r3, r3, #7
 8003066:	2b04      	cmp	r3, #4
 8003068:	bf28      	it	cs
 800306a:	2304      	movcs	r3, #4
 800306c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3304      	adds	r3, #4
 8003072:	2b06      	cmp	r3, #6
 8003074:	d902      	bls.n	800307c <NVIC_EncodePriority+0x30>
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3b03      	subs	r3, #3
 800307a:	e000      	b.n	800307e <NVIC_EncodePriority+0x32>
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003080:	f04f 32ff 	mov.w	r2, #4294967295
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43da      	mvns	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	401a      	ands	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003094:	f04f 31ff 	mov.w	r1, #4294967295
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	43d9      	mvns	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	4313      	orrs	r3, r2
         );
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3724      	adds	r7, #36	; 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c4:	d301      	bcc.n	80030ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00f      	b.n	80030ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ca:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <SysTick_Config+0x40>)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030d2:	210f      	movs	r1, #15
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	f7ff ff8e 	bl	8002ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <SysTick_Config+0x40>)
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030e2:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <SysTick_Config+0x40>)
 80030e4:	2207      	movs	r2, #7
 80030e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	e000e010 	.word	0xe000e010

080030f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ff29 	bl	8002f58 <__NVIC_SetPriorityGrouping>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800310e:	b580      	push	{r7, lr}
 8003110:	b086      	sub	sp, #24
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003120:	f7ff ff3e 	bl	8002fa0 <__NVIC_GetPriorityGrouping>
 8003124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	6978      	ldr	r0, [r7, #20]
 800312c:	f7ff ff8e 	bl	800304c <NVIC_EncodePriority>
 8003130:	4602      	mov	r2, r0
 8003132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff5d 	bl	8002ff8 <__NVIC_SetPriority>
}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	4603      	mov	r3, r0
 800314e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff31 	bl	8002fbc <__NVIC_EnableIRQ>
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff ffa2 	bl	80030b4 <SysTick_Config>
 8003170:	4603      	mov	r3, r0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003188:	f7ff faa8 	bl	80026dc <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e099      	b.n	80032cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b8:	e00f      	b.n	80031da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ba:	f7ff fa8f 	bl	80026dc <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b05      	cmp	r3, #5
 80031c6:	d908      	bls.n	80031da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2203      	movs	r2, #3
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e078      	b.n	80032cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e8      	bne.n	80031ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4b38      	ldr	r3, [pc, #224]	; (80032d4 <HAL_DMA_Init+0x158>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003206:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003212:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800321e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	2b04      	cmp	r3, #4
 8003232:	d107      	bne.n	8003244 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	4313      	orrs	r3, r2
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f023 0307 	bic.w	r3, r3, #7
 800325a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b04      	cmp	r3, #4
 800326c:	d117      	bne.n	800329e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00e      	beq.n	800329e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fa6f 	bl	8003764 <DMA_CheckFifoParam>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2240      	movs	r2, #64	; 0x40
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800329a:	2301      	movs	r3, #1
 800329c:	e016      	b.n	80032cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fa26 	bl	80036f8 <DMA_CalcBaseAndBitshift>
 80032ac:	4603      	mov	r3, r0
 80032ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	223f      	movs	r2, #63	; 0x3f
 80032b6:	409a      	lsls	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	f010803f 	.word	0xf010803f

080032d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_DMA_Start_IT+0x26>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e040      	b.n	8003380 <HAL_DMA_Start_IT+0xa8>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d12f      	bne.n	8003372 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2202      	movs	r2, #2
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f9b8 	bl	800369c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	223f      	movs	r2, #63	; 0x3f
 8003332:	409a      	lsls	r2, r3
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0216 	orr.w	r2, r2, #22
 8003346:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0208 	orr.w	r2, r2, #8
 800335e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e005      	b.n	800337e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800337a:	2302      	movs	r3, #2
 800337c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800337e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003394:	4b8e      	ldr	r3, [pc, #568]	; (80035d0 <HAL_DMA_IRQHandler+0x248>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a8e      	ldr	r2, [pc, #568]	; (80035d4 <HAL_DMA_IRQHandler+0x24c>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	0a9b      	lsrs	r3, r3, #10
 80033a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b2:	2208      	movs	r2, #8
 80033b4:	409a      	lsls	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01a      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0204 	bic.w	r2, r2, #4
 80033da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	2208      	movs	r2, #8
 80033e2:	409a      	lsls	r2, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2201      	movs	r2, #1
 80033fa:	409a      	lsls	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d012      	beq.n	800342a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	2201      	movs	r2, #1
 8003418:	409a      	lsls	r2, r3
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	f043 0202 	orr.w	r2, r3, #2
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	2204      	movs	r2, #4
 8003430:	409a      	lsls	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4013      	ands	r3, r2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d012      	beq.n	8003460 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	2204      	movs	r2, #4
 800344e:	409a      	lsls	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	f043 0204 	orr.w	r2, r3, #4
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	2210      	movs	r2, #16
 8003466:	409a      	lsls	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d043      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d03c      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	2210      	movs	r2, #16
 8003484:	409a      	lsls	r2, r3
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d018      	beq.n	80034ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d108      	bne.n	80034b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d024      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	4798      	blx	r3
 80034b6:	e01f      	b.n	80034f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
 80034c8:	e016      	b.n	80034f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d107      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0208 	bic.w	r2, r2, #8
 80034e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	2220      	movs	r2, #32
 80034fe:	409a      	lsls	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 808f 	beq.w	8003628 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8087 	beq.w	8003628 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351e:	2220      	movs	r2, #32
 8003520:	409a      	lsls	r2, r3
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b05      	cmp	r3, #5
 8003530:	d136      	bne.n	80035a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0216 	bic.w	r2, r2, #22
 8003540:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003550:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d103      	bne.n	8003562 <HAL_DMA_IRQHandler+0x1da>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0208 	bic.w	r2, r2, #8
 8003570:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	223f      	movs	r2, #63	; 0x3f
 8003578:	409a      	lsls	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003592:	2b00      	cmp	r3, #0
 8003594:	d07e      	beq.n	8003694 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
        }
        return;
 800359e:	e079      	b.n	8003694 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01d      	beq.n	80035ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10d      	bne.n	80035d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d031      	beq.n	8003628 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
 80035cc:	e02c      	b.n	8003628 <HAL_DMA_IRQHandler+0x2a0>
 80035ce:	bf00      	nop
 80035d0:	20000008 	.word	0x20000008
 80035d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d023      	beq.n	8003628 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
 80035e8:	e01e      	b.n	8003628 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10f      	bne.n	8003618 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0210 	bic.w	r2, r2, #16
 8003606:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	2b00      	cmp	r3, #0
 800362e:	d032      	beq.n	8003696 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d022      	beq.n	8003682 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2205      	movs	r2, #5
 8003640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	3301      	adds	r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	429a      	cmp	r2, r3
 800365e:	d307      	bcc.n	8003670 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f2      	bne.n	8003654 <HAL_DMA_IRQHandler+0x2cc>
 800366e:	e000      	b.n	8003672 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003670:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
 8003692:	e000      	b.n	8003696 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003694:	bf00      	nop
    }
  }
}
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d108      	bne.n	80036dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036da:	e007      	b.n	80036ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	60da      	str	r2, [r3, #12]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	3b10      	subs	r3, #16
 8003708:	4a14      	ldr	r2, [pc, #80]	; (800375c <DMA_CalcBaseAndBitshift+0x64>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003712:	4a13      	ldr	r2, [pc, #76]	; (8003760 <DMA_CalcBaseAndBitshift+0x68>)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b03      	cmp	r3, #3
 8003724:	d909      	bls.n	800373a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	1d1a      	adds	r2, r3, #4
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	659a      	str	r2, [r3, #88]	; 0x58
 8003738:	e007      	b.n	800374a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	aaaaaaab 	.word	0xaaaaaaab
 8003760:	0800b568 	.word	0x0800b568

08003764 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11f      	bne.n	80037be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d856      	bhi.n	8003832 <DMA_CheckFifoParam+0xce>
 8003784:	a201      	add	r2, pc, #4	; (adr r2, 800378c <DMA_CheckFifoParam+0x28>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	0800379d 	.word	0x0800379d
 8003790:	080037af 	.word	0x080037af
 8003794:	0800379d 	.word	0x0800379d
 8003798:	08003833 	.word	0x08003833
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d046      	beq.n	8003836 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ac:	e043      	b.n	8003836 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037b6:	d140      	bne.n	800383a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037bc:	e03d      	b.n	800383a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c6:	d121      	bne.n	800380c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d837      	bhi.n	800383e <DMA_CheckFifoParam+0xda>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <DMA_CheckFifoParam+0x70>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037e5 	.word	0x080037e5
 80037d8:	080037eb 	.word	0x080037eb
 80037dc:	080037e5 	.word	0x080037e5
 80037e0:	080037fd 	.word	0x080037fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
      break;
 80037e8:	e030      	b.n	800384c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d025      	beq.n	8003842 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fa:	e022      	b.n	8003842 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003804:	d11f      	bne.n	8003846 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800380a:	e01c      	b.n	8003846 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d903      	bls.n	800381a <DMA_CheckFifoParam+0xb6>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d003      	beq.n	8003820 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003818:	e018      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
      break;
 800381e:	e015      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00e      	beq.n	800384a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
      break;
 8003830:	e00b      	b.n	800384a <DMA_CheckFifoParam+0xe6>
      break;
 8003832:	bf00      	nop
 8003834:	e00a      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      break;
 8003836:	bf00      	nop
 8003838:	e008      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      break;
 800383a:	bf00      	nop
 800383c:	e006      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      break;
 800383e:	bf00      	nop
 8003840:	e004      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      break;
 8003842:	bf00      	nop
 8003844:	e002      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      break;   
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      break;
 800384a:	bf00      	nop
    }
  } 
  
  return status; 
 800384c:	7bfb      	ldrb	r3, [r7, #15]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	e165      	b.n	8003b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003878:	2201      	movs	r2, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	429a      	cmp	r2, r3
 8003892:	f040 8154 	bne.w	8003b3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d005      	beq.n	80038ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d130      	bne.n	8003910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	2203      	movs	r2, #3
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e4:	2201      	movs	r2, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 0201 	and.w	r2, r3, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b03      	cmp	r3, #3
 800391a:	d017      	beq.n	800394c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	2203      	movs	r2, #3
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d123      	bne.n	80039a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	08da      	lsrs	r2, r3, #3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3208      	adds	r2, #8
 8003960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	220f      	movs	r2, #15
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	08da      	lsrs	r2, r3, #3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3208      	adds	r2, #8
 800399a:	69b9      	ldr	r1, [r7, #24]
 800399c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	2203      	movs	r2, #3
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0203 	and.w	r2, r3, #3
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80ae 	beq.w	8003b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	4b5d      	ldr	r3, [pc, #372]	; (8003b5c <HAL_GPIO_Init+0x300>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	4a5c      	ldr	r2, [pc, #368]	; (8003b5c <HAL_GPIO_Init+0x300>)
 80039ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039f0:	6453      	str	r3, [r2, #68]	; 0x44
 80039f2:	4b5a      	ldr	r3, [pc, #360]	; (8003b5c <HAL_GPIO_Init+0x300>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039fe:	4a58      	ldr	r2, [pc, #352]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	3302      	adds	r3, #2
 8003a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	220f      	movs	r2, #15
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4f      	ldr	r2, [pc, #316]	; (8003b64 <HAL_GPIO_Init+0x308>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d025      	beq.n	8003a76 <HAL_GPIO_Init+0x21a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4e      	ldr	r2, [pc, #312]	; (8003b68 <HAL_GPIO_Init+0x30c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01f      	beq.n	8003a72 <HAL_GPIO_Init+0x216>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a4d      	ldr	r2, [pc, #308]	; (8003b6c <HAL_GPIO_Init+0x310>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d019      	beq.n	8003a6e <HAL_GPIO_Init+0x212>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a4c      	ldr	r2, [pc, #304]	; (8003b70 <HAL_GPIO_Init+0x314>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <HAL_GPIO_Init+0x20e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4b      	ldr	r2, [pc, #300]	; (8003b74 <HAL_GPIO_Init+0x318>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00d      	beq.n	8003a66 <HAL_GPIO_Init+0x20a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4a      	ldr	r2, [pc, #296]	; (8003b78 <HAL_GPIO_Init+0x31c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <HAL_GPIO_Init+0x206>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a49      	ldr	r2, [pc, #292]	; (8003b7c <HAL_GPIO_Init+0x320>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <HAL_GPIO_Init+0x202>
 8003a5a:	2306      	movs	r3, #6
 8003a5c:	e00c      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a5e:	2307      	movs	r3, #7
 8003a60:	e00a      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a62:	2305      	movs	r3, #5
 8003a64:	e008      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a66:	2304      	movs	r3, #4
 8003a68:	e006      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e004      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a76:	2300      	movs	r3, #0
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	f002 0203 	and.w	r2, r2, #3
 8003a7e:	0092      	lsls	r2, r2, #2
 8003a80:	4093      	lsls	r3, r2
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a88:	4935      	ldr	r1, [pc, #212]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	3302      	adds	r3, #2
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a96:	4b3a      	ldr	r3, [pc, #232]	; (8003b80 <HAL_GPIO_Init+0x324>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aba:	4a31      	ldr	r2, [pc, #196]	; (8003b80 <HAL_GPIO_Init+0x324>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac0:	4b2f      	ldr	r3, [pc, #188]	; (8003b80 <HAL_GPIO_Init+0x324>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae4:	4a26      	ldr	r2, [pc, #152]	; (8003b80 <HAL_GPIO_Init+0x324>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aea:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <HAL_GPIO_Init+0x324>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b0e:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <HAL_GPIO_Init+0x324>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b14:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <HAL_GPIO_Init+0x324>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b38:	4a11      	ldr	r2, [pc, #68]	; (8003b80 <HAL_GPIO_Init+0x324>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3301      	adds	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	f67f ae96 	bls.w	8003878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3724      	adds	r7, #36	; 0x24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40013800 	.word	0x40013800
 8003b64:	40020000 	.word	0x40020000
 8003b68:	40020400 	.word	0x40020400
 8003b6c:	40020800 	.word	0x40020800
 8003b70:	40020c00 	.word	0x40020c00
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40021400 	.word	0x40021400
 8003b7c:	40021800 	.word	0x40021800
 8003b80:	40013c00 	.word	0x40013c00

08003b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	807b      	strh	r3, [r7, #2]
 8003b90:	4613      	mov	r3, r2
 8003b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b94:	787b      	ldrb	r3, [r7, #1]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b9a:	887a      	ldrh	r2, [r7, #2]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ba0:	e003      	b.n	8003baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	041a      	lsls	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	619a      	str	r2, [r3, #24]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	4a1f      	ldr	r2, [pc, #124]	; (8003c48 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd2:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bde:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <HAL_PWREx_EnableOverDrive+0x94>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003be4:	f7fe fd7a 	bl	80026dc <HAL_GetTick>
 8003be8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bea:	e009      	b.n	8003c00 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bec:	f7fe fd76 	bl	80026dc <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bfa:	d901      	bls.n	8003c00 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e01f      	b.n	8003c40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c00:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0c:	d1ee      	bne.n	8003bec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c14:	f7fe fd62 	bl	80026dc <HAL_GetTick>
 8003c18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c1a:	e009      	b.n	8003c30 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c1c:	f7fe fd5e 	bl	80026dc <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c2a:	d901      	bls.n	8003c30 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e007      	b.n	8003c40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c30:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c3c:	d1ee      	bne.n	8003c1c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	420e0040 	.word	0x420e0040
 8003c50:	40007000 	.word	0x40007000
 8003c54:	420e0044 	.word	0x420e0044

08003c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0cc      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b68      	ldr	r3, [pc, #416]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d90c      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b65      	ldr	r3, [pc, #404]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b63      	ldr	r3, [pc, #396]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0b8      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cac:	4b59      	ldr	r3, [pc, #356]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4a58      	ldr	r2, [pc, #352]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc4:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a52      	ldr	r2, [pc, #328]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd0:	4b50      	ldr	r3, [pc, #320]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	494d      	ldr	r1, [pc, #308]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d044      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d119      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e07f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d26:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e067      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d36:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4934      	ldr	r1, [pc, #208]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d48:	f7fe fcc8 	bl	80026dc <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fe fcc4 	bl	80026dc <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e04f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 020c 	and.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d1eb      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d20c      	bcs.n	8003da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e032      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4916      	ldr	r1, [pc, #88]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	490e      	ldr	r1, [pc, #56]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dde:	f000 f855 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003de2:	4602      	mov	r2, r0
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	490a      	ldr	r1, [pc, #40]	; (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	5ccb      	ldrb	r3, [r1, r3]
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fc28 	bl	8002654 <HAL_InitTick>

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023c00 	.word	0x40023c00
 8003e14:	40023800 	.word	0x40023800
 8003e18:	0800b550 	.word	0x0800b550
 8003e1c:	20000008 	.word	0x20000008
 8003e20:	2000000c 	.word	0x2000000c

08003e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000008 	.word	0x20000008

08003e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e40:	f7ff fff0 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0a9b      	lsrs	r3, r3, #10
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4903      	ldr	r1, [pc, #12]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	0800b560 	.word	0x0800b560

08003e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e68:	f7ff ffdc 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	0b5b      	lsrs	r3, r3, #13
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	4903      	ldr	r1, [pc, #12]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40023800 	.word	0x40023800
 8003e88:	0800b560 	.word	0x0800b560

08003e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e90:	b0ae      	sub	sp, #184	; 0xb8
 8003e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb2:	4bcb      	ldr	r3, [pc, #812]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	f200 8206 	bhi.w	80042cc <HAL_RCC_GetSysClockFreq+0x440>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	080042cd 	.word	0x080042cd
 8003ed0:	080042cd 	.word	0x080042cd
 8003ed4:	080042cd 	.word	0x080042cd
 8003ed8:	08003f05 	.word	0x08003f05
 8003edc:	080042cd 	.word	0x080042cd
 8003ee0:	080042cd 	.word	0x080042cd
 8003ee4:	080042cd 	.word	0x080042cd
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	080042cd 	.word	0x080042cd
 8003ef0:	080042cd 	.word	0x080042cd
 8003ef4:	080042cd 	.word	0x080042cd
 8003ef8:	080040fd 	.word	0x080040fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4bb9      	ldr	r3, [pc, #740]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003f02:	e1e7      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f04:	4bb8      	ldr	r3, [pc, #736]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f0a:	e1e3      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f0c:	4bb4      	ldr	r3, [pc, #720]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f18:	4bb1      	ldr	r3, [pc, #708]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d071      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f24:	4bae      	ldr	r3, [pc, #696]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	099b      	lsrs	r3, r3, #6
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f30:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f40:	2300      	movs	r3, #0
 8003f42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	f04f 0000 	mov.w	r0, #0
 8003f52:	f04f 0100 	mov.w	r1, #0
 8003f56:	0159      	lsls	r1, r3, #5
 8003f58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f5c:	0150      	lsls	r0, r2, #5
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4621      	mov	r1, r4
 8003f64:	1a51      	subs	r1, r2, r1
 8003f66:	6439      	str	r1, [r7, #64]	; 0x40
 8003f68:	4629      	mov	r1, r5
 8003f6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	018b      	lsls	r3, r1, #6
 8003f80:	4641      	mov	r1, r8
 8003f82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f86:	4641      	mov	r1, r8
 8003f88:	018a      	lsls	r2, r1, #6
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	1a51      	subs	r1, r2, r1
 8003f8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f90:	4649      	mov	r1, r9
 8003f92:	eb63 0301 	sbc.w	r3, r3, r1
 8003f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	00cb      	lsls	r3, r1, #3
 8003fa8:	4641      	mov	r1, r8
 8003faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fae:	4641      	mov	r1, r8
 8003fb0:	00ca      	lsls	r2, r1, #3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4622      	mov	r2, r4
 8003fba:	189b      	adds	r3, r3, r2
 8003fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003fbe:	462b      	mov	r3, r5
 8003fc0:	460a      	mov	r2, r1
 8003fc2:	eb42 0303 	adc.w	r3, r2, r3
 8003fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	024b      	lsls	r3, r1, #9
 8003fd8:	4621      	mov	r1, r4
 8003fda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fde:	4621      	mov	r1, r4
 8003fe0:	024a      	lsls	r2, r1, #9
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ff0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ff4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ff8:	f7fc fdee 	bl	8000bd8 <__aeabi_uldivmod>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4613      	mov	r3, r2
 8004002:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004006:	e067      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004008:	4b75      	ldr	r3, [pc, #468]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	2200      	movs	r2, #0
 8004010:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004014:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800401c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004020:	67bb      	str	r3, [r7, #120]	; 0x78
 8004022:	2300      	movs	r3, #0
 8004024:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004026:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800402a:	4622      	mov	r2, r4
 800402c:	462b      	mov	r3, r5
 800402e:	f04f 0000 	mov.w	r0, #0
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	0159      	lsls	r1, r3, #5
 8004038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800403c:	0150      	lsls	r0, r2, #5
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4621      	mov	r1, r4
 8004044:	1a51      	subs	r1, r2, r1
 8004046:	62b9      	str	r1, [r7, #40]	; 0x28
 8004048:	4629      	mov	r1, r5
 800404a:	eb63 0301 	sbc.w	r3, r3, r1
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800405c:	4649      	mov	r1, r9
 800405e:	018b      	lsls	r3, r1, #6
 8004060:	4641      	mov	r1, r8
 8004062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004066:	4641      	mov	r1, r8
 8004068:	018a      	lsls	r2, r1, #6
 800406a:	4641      	mov	r1, r8
 800406c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004070:	4649      	mov	r1, r9
 8004072:	eb63 0b01 	sbc.w	fp, r3, r1
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004082:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004086:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800408a:	4692      	mov	sl, r2
 800408c:	469b      	mov	fp, r3
 800408e:	4623      	mov	r3, r4
 8004090:	eb1a 0303 	adds.w	r3, sl, r3
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	462b      	mov	r3, r5
 8004098:	eb4b 0303 	adc.w	r3, fp, r3
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040aa:	4629      	mov	r1, r5
 80040ac:	028b      	lsls	r3, r1, #10
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b4:	4621      	mov	r1, r4
 80040b6:	028a      	lsls	r2, r1, #10
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c0:	2200      	movs	r2, #0
 80040c2:	673b      	str	r3, [r7, #112]	; 0x70
 80040c4:	677a      	str	r2, [r7, #116]	; 0x74
 80040c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80040ca:	f7fc fd85 	bl	8000bd8 <__aeabi_uldivmod>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4613      	mov	r3, r2
 80040d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d8:	4b41      	ldr	r3, [pc, #260]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	0c1b      	lsrs	r3, r3, #16
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	3301      	adds	r3, #1
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80040ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040fa:	e0eb      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040fc:	4b38      	ldr	r3, [pc, #224]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004108:	4b35      	ldr	r3, [pc, #212]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d06b      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004114:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	2200      	movs	r2, #0
 800411c:	66bb      	str	r3, [r7, #104]	; 0x68
 800411e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004126:	663b      	str	r3, [r7, #96]	; 0x60
 8004128:	2300      	movs	r3, #0
 800412a:	667b      	str	r3, [r7, #100]	; 0x64
 800412c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004130:	4622      	mov	r2, r4
 8004132:	462b      	mov	r3, r5
 8004134:	f04f 0000 	mov.w	r0, #0
 8004138:	f04f 0100 	mov.w	r1, #0
 800413c:	0159      	lsls	r1, r3, #5
 800413e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004142:	0150      	lsls	r0, r2, #5
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4621      	mov	r1, r4
 800414a:	1a51      	subs	r1, r2, r1
 800414c:	61b9      	str	r1, [r7, #24]
 800414e:	4629      	mov	r1, r5
 8004150:	eb63 0301 	sbc.w	r3, r3, r1
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004162:	4659      	mov	r1, fp
 8004164:	018b      	lsls	r3, r1, #6
 8004166:	4651      	mov	r1, sl
 8004168:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800416c:	4651      	mov	r1, sl
 800416e:	018a      	lsls	r2, r1, #6
 8004170:	4651      	mov	r1, sl
 8004172:	ebb2 0801 	subs.w	r8, r2, r1
 8004176:	4659      	mov	r1, fp
 8004178:	eb63 0901 	sbc.w	r9, r3, r1
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004188:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800418c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004190:	4690      	mov	r8, r2
 8004192:	4699      	mov	r9, r3
 8004194:	4623      	mov	r3, r4
 8004196:	eb18 0303 	adds.w	r3, r8, r3
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	462b      	mov	r3, r5
 800419e:	eb49 0303 	adc.w	r3, r9, r3
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80041b0:	4629      	mov	r1, r5
 80041b2:	024b      	lsls	r3, r1, #9
 80041b4:	4621      	mov	r1, r4
 80041b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041ba:	4621      	mov	r1, r4
 80041bc:	024a      	lsls	r2, r1, #9
 80041be:	4610      	mov	r0, r2
 80041c0:	4619      	mov	r1, r3
 80041c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041c6:	2200      	movs	r2, #0
 80041c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80041ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80041cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041d0:	f7fc fd02 	bl	8000bd8 <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4613      	mov	r3, r2
 80041da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041de:	e065      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x420>
 80041e0:	40023800 	.word	0x40023800
 80041e4:	00f42400 	.word	0x00f42400
 80041e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ec:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	2200      	movs	r2, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	4611      	mov	r1, r2
 80041f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041fc:	653b      	str	r3, [r7, #80]	; 0x50
 80041fe:	2300      	movs	r3, #0
 8004200:	657b      	str	r3, [r7, #84]	; 0x54
 8004202:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004206:	4642      	mov	r2, r8
 8004208:	464b      	mov	r3, r9
 800420a:	f04f 0000 	mov.w	r0, #0
 800420e:	f04f 0100 	mov.w	r1, #0
 8004212:	0159      	lsls	r1, r3, #5
 8004214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004218:	0150      	lsls	r0, r2, #5
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4641      	mov	r1, r8
 8004220:	1a51      	subs	r1, r2, r1
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	4649      	mov	r1, r9
 8004226:	eb63 0301 	sbc.w	r3, r3, r1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004238:	4659      	mov	r1, fp
 800423a:	018b      	lsls	r3, r1, #6
 800423c:	4651      	mov	r1, sl
 800423e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004242:	4651      	mov	r1, sl
 8004244:	018a      	lsls	r2, r1, #6
 8004246:	4651      	mov	r1, sl
 8004248:	1a54      	subs	r4, r2, r1
 800424a:	4659      	mov	r1, fp
 800424c:	eb63 0501 	sbc.w	r5, r3, r1
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	00eb      	lsls	r3, r5, #3
 800425a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800425e:	00e2      	lsls	r2, r4, #3
 8004260:	4614      	mov	r4, r2
 8004262:	461d      	mov	r5, r3
 8004264:	4643      	mov	r3, r8
 8004266:	18e3      	adds	r3, r4, r3
 8004268:	603b      	str	r3, [r7, #0]
 800426a:	464b      	mov	r3, r9
 800426c:	eb45 0303 	adc.w	r3, r5, r3
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800427e:	4629      	mov	r1, r5
 8004280:	028b      	lsls	r3, r1, #10
 8004282:	4621      	mov	r1, r4
 8004284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004288:	4621      	mov	r1, r4
 800428a:	028a      	lsls	r2, r1, #10
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004294:	2200      	movs	r2, #0
 8004296:	64bb      	str	r3, [r7, #72]	; 0x48
 8004298:	64fa      	str	r2, [r7, #76]	; 0x4c
 800429a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800429e:	f7fc fc9b 	bl	8000bd8 <__aeabi_uldivmod>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4613      	mov	r3, r2
 80042a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	0f1b      	lsrs	r3, r3, #28
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80042ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042ca:	e003      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80042ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	37b8      	adds	r7, #184	; 0xb8
 80042dc:	46bd      	mov	sp, r7
 80042de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	00f42400 	.word	0x00f42400

080042ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e28d      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8083 	beq.w	8004412 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800430c:	4b94      	ldr	r3, [pc, #592]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 030c 	and.w	r3, r3, #12
 8004314:	2b04      	cmp	r3, #4
 8004316:	d019      	beq.n	800434c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004318:	4b91      	ldr	r3, [pc, #580]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004320:	2b08      	cmp	r3, #8
 8004322:	d106      	bne.n	8004332 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004324:	4b8e      	ldr	r3, [pc, #568]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004330:	d00c      	beq.n	800434c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004332:	4b8b      	ldr	r3, [pc, #556]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800433a:	2b0c      	cmp	r3, #12
 800433c:	d112      	bne.n	8004364 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800433e:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434a:	d10b      	bne.n	8004364 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	4b84      	ldr	r3, [pc, #528]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d05b      	beq.n	8004410 <HAL_RCC_OscConfig+0x124>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d157      	bne.n	8004410 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e25a      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	d106      	bne.n	800437c <HAL_RCC_OscConfig+0x90>
 800436e:	4b7c      	ldr	r3, [pc, #496]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7b      	ldr	r2, [pc, #492]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e01d      	b.n	80043b8 <HAL_RCC_OscConfig+0xcc>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0xb4>
 8004386:	4b76      	ldr	r3, [pc, #472]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a75      	ldr	r2, [pc, #468]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800438c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b73      	ldr	r3, [pc, #460]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a72      	ldr	r2, [pc, #456]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e00b      	b.n	80043b8 <HAL_RCC_OscConfig+0xcc>
 80043a0:	4b6f      	ldr	r3, [pc, #444]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a6e      	ldr	r2, [pc, #440]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a6b      	ldr	r2, [pc, #428]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80043b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fe f98c 	bl	80026dc <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fe f988 	bl	80026dc <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e21f      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b61      	ldr	r3, [pc, #388]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0xdc>
 80043e6:	e014      	b.n	8004412 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe f978 	bl	80026dc <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fe f974 	bl	80026dc <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e20b      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	4b57      	ldr	r3, [pc, #348]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x104>
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d06f      	beq.n	80044fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800441e:	4b50      	ldr	r3, [pc, #320]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b00      	cmp	r3, #0
 8004428:	d017      	beq.n	800445a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800442a:	4b4d      	ldr	r3, [pc, #308]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004432:	2b08      	cmp	r3, #8
 8004434:	d105      	bne.n	8004442 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004436:	4b4a      	ldr	r3, [pc, #296]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004442:	4b47      	ldr	r3, [pc, #284]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d11c      	bne.n	8004488 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444e:	4b44      	ldr	r3, [pc, #272]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d116      	bne.n	8004488 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	4b41      	ldr	r3, [pc, #260]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x186>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e1d3      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	4b3b      	ldr	r3, [pc, #236]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4937      	ldr	r1, [pc, #220]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	e03a      	b.n	80044fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004490:	4b34      	ldr	r3, [pc, #208]	; (8004564 <HAL_RCC_OscConfig+0x278>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fe f921 	bl	80026dc <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800449e:	f7fe f91d 	bl	80026dc <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1b4      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	4b2b      	ldr	r3, [pc, #172]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b28      	ldr	r3, [pc, #160]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4925      	ldr	r1, [pc, #148]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <HAL_RCC_OscConfig+0x278>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe f900 	bl	80026dc <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e0:	f7fe f8fc 	bl	80026dc <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e193      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d036      	beq.n	8004578 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <HAL_RCC_OscConfig+0x27c>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fe f8e0 	bl	80026dc <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004520:	f7fe f8dc 	bl	80026dc <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e173      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCC_OscConfig+0x274>)
 8004534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x234>
 800453e:	e01b      	b.n	8004578 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_RCC_OscConfig+0x27c>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fe f8c9 	bl	80026dc <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	e00e      	b.n	800456c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454e:	f7fe f8c5 	bl	80026dc <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d907      	bls.n	800456c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e15c      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
 8004560:	40023800 	.word	0x40023800
 8004564:	42470000 	.word	0x42470000
 8004568:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456c:	4b8a      	ldr	r3, [pc, #552]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ea      	bne.n	800454e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8097 	beq.w	80046b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458a:	4b83      	ldr	r3, [pc, #524]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	4b7f      	ldr	r3, [pc, #508]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	4a7e      	ldr	r2, [pc, #504]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	; 0x40
 80045a6:	4b7c      	ldr	r3, [pc, #496]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b6:	4b79      	ldr	r3, [pc, #484]	; (800479c <HAL_RCC_OscConfig+0x4b0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d118      	bne.n	80045f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c2:	4b76      	ldr	r3, [pc, #472]	; (800479c <HAL_RCC_OscConfig+0x4b0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a75      	ldr	r2, [pc, #468]	; (800479c <HAL_RCC_OscConfig+0x4b0>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ce:	f7fe f885 	bl	80026dc <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d6:	f7fe f881 	bl	80026dc <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e118      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	4b6c      	ldr	r3, [pc, #432]	; (800479c <HAL_RCC_OscConfig+0x4b0>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <HAL_RCC_OscConfig+0x31e>
 80045fc:	4b66      	ldr	r3, [pc, #408]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	4a65      	ldr	r2, [pc, #404]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6713      	str	r3, [r2, #112]	; 0x70
 8004608:	e01c      	b.n	8004644 <HAL_RCC_OscConfig+0x358>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b05      	cmp	r3, #5
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0x340>
 8004612:	4b61      	ldr	r3, [pc, #388]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a60      	ldr	r2, [pc, #384]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004618:	f043 0304 	orr.w	r3, r3, #4
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
 800461e:	4b5e      	ldr	r3, [pc, #376]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	4a5d      	ldr	r2, [pc, #372]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6713      	str	r3, [r2, #112]	; 0x70
 800462a:	e00b      	b.n	8004644 <HAL_RCC_OscConfig+0x358>
 800462c:	4b5a      	ldr	r3, [pc, #360]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	4a59      	ldr	r2, [pc, #356]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6713      	str	r3, [r2, #112]	; 0x70
 8004638:	4b57      	ldr	r3, [pc, #348]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	4a56      	ldr	r2, [pc, #344]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800463e:	f023 0304 	bic.w	r3, r3, #4
 8004642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d015      	beq.n	8004678 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fe f846 	bl	80026dc <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	e00a      	b.n	800466a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fe f842 	bl	80026dc <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e0d7      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466a:	4b4b      	ldr	r3, [pc, #300]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0ee      	beq.n	8004654 <HAL_RCC_OscConfig+0x368>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fe f830 	bl	80026dc <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467e:	e00a      	b.n	8004696 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004680:	f7fe f82c 	bl	80026dc <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0c1      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004696:	4b40      	ldr	r3, [pc, #256]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1ee      	bne.n	8004680 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a8:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	4a3a      	ldr	r2, [pc, #232]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80046ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80ad 	beq.w	8004818 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d060      	beq.n	800478c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d145      	bne.n	800475e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <HAL_RCC_OscConfig+0x4b4>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fe f800 	bl	80026dc <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fd fffc 	bl	80026dc <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e093      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	4b29      	ldr	r3, [pc, #164]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	3b01      	subs	r3, #1
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	071b      	lsls	r3, r3, #28
 800472a:	491b      	ldr	r1, [pc, #108]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_RCC_OscConfig+0x4b4>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fd ffd1 	bl	80026dc <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473e:	f7fd ffcd 	bl	80026dc <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e064      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004750:	4b11      	ldr	r3, [pc, #68]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x452>
 800475c:	e05c      	b.n	8004818 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475e:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <HAL_RCC_OscConfig+0x4b4>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd ffba 	bl	80026dc <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476c:	f7fd ffb6 	bl	80026dc <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e04d      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_RCC_OscConfig+0x4ac>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x480>
 800478a:	e045      	b.n	8004818 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d107      	bne.n	80047a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e040      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
 8004798:	40023800 	.word	0x40023800
 800479c:	40007000 	.word	0x40007000
 80047a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a4:	4b1f      	ldr	r3, [pc, #124]	; (8004824 <HAL_RCC_OscConfig+0x538>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d030      	beq.n	8004814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d129      	bne.n	8004814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d122      	bne.n	8004814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047d4:	4013      	ands	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047dc:	4293      	cmp	r3, r2
 80047de:	d119      	bne.n	8004814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	3b01      	subs	r3, #1
 80047ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d10f      	bne.n	8004814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d107      	bne.n	8004814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800

08004828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e07b      	b.n	8004932 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	2b00      	cmp	r3, #0
 8004840:	d108      	bne.n	8004854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484a:	d009      	beq.n	8004860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	61da      	str	r2, [r3, #28]
 8004852:	e005      	b.n	8004860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fd fd38 	bl	80022f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004896:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e4:	ea42 0103 	orr.w	r1, r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	f003 0104 	and.w	r1, r3, #4
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	f003 0210 	and.w	r2, r3, #16
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004920:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b088      	sub	sp, #32
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_SPI_Transmit+0x22>
 8004958:	2302      	movs	r3, #2
 800495a:	e126      	b.n	8004baa <HAL_SPI_Transmit+0x270>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004964:	f7fd feba 	bl	80026dc <HAL_GetTick>
 8004968:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	d002      	beq.n	8004980 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800497a:	2302      	movs	r3, #2
 800497c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800497e:	e10b      	b.n	8004b98 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_SPI_Transmit+0x52>
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004990:	e102      	b.n	8004b98 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2203      	movs	r2, #3
 8004996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	88fa      	ldrh	r2, [r7, #6]
 80049aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	88fa      	ldrh	r2, [r7, #6]
 80049b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d8:	d10f      	bne.n	80049fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	d007      	beq.n	8004a18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a20:	d14b      	bne.n	8004aba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_SPI_Transmit+0xf6>
 8004a2a:	8afb      	ldrh	r3, [r7, #22]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d13e      	bne.n	8004aae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	881a      	ldrh	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	1c9a      	adds	r2, r3, #2
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a54:	e02b      	b.n	8004aae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d112      	bne.n	8004a8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	881a      	ldrh	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	1c9a      	adds	r2, r3, #2
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a88:	e011      	b.n	8004aae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a8a:	f7fd fe27 	bl	80026dc <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d803      	bhi.n	8004aa2 <HAL_SPI_Transmit+0x168>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d102      	bne.n	8004aa8 <HAL_SPI_Transmit+0x16e>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004aac:	e074      	b.n	8004b98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1ce      	bne.n	8004a56 <HAL_SPI_Transmit+0x11c>
 8004ab8:	e04c      	b.n	8004b54 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_SPI_Transmit+0x18e>
 8004ac2:	8afb      	ldrh	r3, [r7, #22]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d140      	bne.n	8004b4a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	7812      	ldrb	r2, [r2, #0]
 8004ad4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004aee:	e02c      	b.n	8004b4a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d113      	bne.n	8004b26 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330c      	adds	r3, #12
 8004b08:	7812      	ldrb	r2, [r2, #0]
 8004b0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b24:	e011      	b.n	8004b4a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b26:	f7fd fdd9 	bl	80026dc <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d803      	bhi.n	8004b3e <HAL_SPI_Transmit+0x204>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3c:	d102      	bne.n	8004b44 <HAL_SPI_Transmit+0x20a>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b48:	e026      	b.n	8004b98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1cd      	bne.n	8004af0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	6839      	ldr	r1, [r7, #0]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fa55 	bl	8005008 <SPI_EndRxTxTransaction>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b72:	2300      	movs	r3, #0
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	e000      	b.n	8004b98 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ba8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b08c      	sub	sp, #48	; 0x30
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_SPI_TransmitReceive+0x26>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e18a      	b.n	8004eee <HAL_SPI_TransmitReceive+0x33c>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004be0:	f7fd fd7c 	bl	80026dc <HAL_GetTick>
 8004be4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d00f      	beq.n	8004c22 <HAL_SPI_TransmitReceive+0x70>
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c08:	d107      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d103      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x68>
 8004c12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d003      	beq.n	8004c22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c20:	e15b      	b.n	8004eda <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x82>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x82>
 8004c2e:	887b      	ldrh	r3, [r7, #2]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c3a:	e14e      	b.n	8004eda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d003      	beq.n	8004c50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2205      	movs	r2, #5
 8004c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	887a      	ldrh	r2, [r7, #2]
 8004c60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	887a      	ldrh	r2, [r7, #2]
 8004c66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	887a      	ldrh	r2, [r7, #2]
 8004c72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	887a      	ldrh	r2, [r7, #2]
 8004c78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d007      	beq.n	8004ca4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cac:	d178      	bne.n	8004da0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <HAL_SPI_TransmitReceive+0x10a>
 8004cb6:	8b7b      	ldrh	r3, [r7, #26]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d166      	bne.n	8004d8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	881a      	ldrh	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	1c9a      	adds	r2, r3, #2
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ce0:	e053      	b.n	8004d8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d11b      	bne.n	8004d28 <HAL_SPI_TransmitReceive+0x176>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d016      	beq.n	8004d28 <HAL_SPI_TransmitReceive+0x176>
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d113      	bne.n	8004d28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	881a      	ldrh	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	1c9a      	adds	r2, r3, #2
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d119      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x1b8>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d014      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	b292      	uxth	r2, r2
 8004d4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	1c9a      	adds	r2, r3, #2
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d66:	2301      	movs	r3, #1
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d6a:	f7fd fcb7 	bl	80026dc <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d807      	bhi.n	8004d8a <HAL_SPI_TransmitReceive+0x1d8>
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d003      	beq.n	8004d8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d88:	e0a7      	b.n	8004eda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1a6      	bne.n	8004ce2 <HAL_SPI_TransmitReceive+0x130>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1a1      	bne.n	8004ce2 <HAL_SPI_TransmitReceive+0x130>
 8004d9e:	e07c      	b.n	8004e9a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x1fc>
 8004da8:	8b7b      	ldrh	r3, [r7, #26]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d16b      	bne.n	8004e86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	330c      	adds	r3, #12
 8004db8:	7812      	ldrb	r2, [r2, #0]
 8004dba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd4:	e057      	b.n	8004e86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d11c      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x26c>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d017      	beq.n	8004e1e <HAL_SPI_TransmitReceive+0x26c>
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d114      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	7812      	ldrb	r2, [r2, #0]
 8004e00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d119      	bne.n	8004e60 <HAL_SPI_TransmitReceive+0x2ae>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d014      	beq.n	8004e60 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e60:	f7fd fc3c 	bl	80026dc <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d803      	bhi.n	8004e78 <HAL_SPI_TransmitReceive+0x2c6>
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d102      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0x2cc>
 8004e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e84:	e029      	b.n	8004eda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1a2      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x224>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d19d      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f8b2 	bl	8005008 <SPI_EndRxTxTransaction>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d006      	beq.n	8004eb8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004eb6:	e010      	b.n	8004eda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	e000      	b.n	8004eda <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ed8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3730      	adds	r7, #48	; 0x30
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f08:	f7fd fbe8 	bl	80026dc <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	4413      	add	r3, r2
 8004f16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f18:	f7fd fbe0 	bl	80026dc <HAL_GetTick>
 8004f1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f1e:	4b39      	ldr	r3, [pc, #228]	; (8005004 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	015b      	lsls	r3, r3, #5
 8004f24:	0d1b      	lsrs	r3, r3, #20
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	fb02 f303 	mul.w	r3, r2, r3
 8004f2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f2e:	e054      	b.n	8004fda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d050      	beq.n	8004fda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f38:	f7fd fbd0 	bl	80026dc <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d902      	bls.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d13d      	bne.n	8004fca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f66:	d111      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f70:	d004      	beq.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7a:	d107      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f94:	d10f      	bne.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e017      	b.n	8004ffa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	bf0c      	ite	eq
 8004fea:	2301      	moveq	r3, #1
 8004fec:	2300      	movne	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d19b      	bne.n	8004f30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000008 	.word	0x20000008

08005008 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005014:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <SPI_EndRxTxTransaction+0x7c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <SPI_EndRxTxTransaction+0x80>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	0d5b      	lsrs	r3, r3, #21
 8005020:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005024:	fb02 f303 	mul.w	r3, r2, r3
 8005028:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005032:	d112      	bne.n	800505a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2200      	movs	r2, #0
 800503c:	2180      	movs	r1, #128	; 0x80
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7ff ff5a 	bl	8004ef8 <SPI_WaitFlagStateUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d016      	beq.n	8005078 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	f043 0220 	orr.w	r2, r3, #32
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e00f      	b.n	800507a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3b01      	subs	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005070:	2b80      	cmp	r3, #128	; 0x80
 8005072:	d0f2      	beq.n	800505a <SPI_EndRxTxTransaction+0x52>
 8005074:	e000      	b.n	8005078 <SPI_EndRxTxTransaction+0x70>
        break;
 8005076:	bf00      	nop
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000008 	.word	0x20000008
 8005088:	165e9f81 	.word	0x165e9f81

0800508c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e041      	b.n	8005122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fd f964 	bl	8002380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f000 f8f4 	bl	80052b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_TIM_ConfigClockSource+0x1c>
 8005142:	2302      	movs	r3, #2
 8005144:	e0b4      	b.n	80052b0 <HAL_TIM_ConfigClockSource+0x186>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2202      	movs	r2, #2
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005164:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800516c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800517e:	d03e      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0xd4>
 8005180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005184:	f200 8087 	bhi.w	8005296 <HAL_TIM_ConfigClockSource+0x16c>
 8005188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518c:	f000 8086 	beq.w	800529c <HAL_TIM_ConfigClockSource+0x172>
 8005190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005194:	d87f      	bhi.n	8005296 <HAL_TIM_ConfigClockSource+0x16c>
 8005196:	2b70      	cmp	r3, #112	; 0x70
 8005198:	d01a      	beq.n	80051d0 <HAL_TIM_ConfigClockSource+0xa6>
 800519a:	2b70      	cmp	r3, #112	; 0x70
 800519c:	d87b      	bhi.n	8005296 <HAL_TIM_ConfigClockSource+0x16c>
 800519e:	2b60      	cmp	r3, #96	; 0x60
 80051a0:	d050      	beq.n	8005244 <HAL_TIM_ConfigClockSource+0x11a>
 80051a2:	2b60      	cmp	r3, #96	; 0x60
 80051a4:	d877      	bhi.n	8005296 <HAL_TIM_ConfigClockSource+0x16c>
 80051a6:	2b50      	cmp	r3, #80	; 0x50
 80051a8:	d03c      	beq.n	8005224 <HAL_TIM_ConfigClockSource+0xfa>
 80051aa:	2b50      	cmp	r3, #80	; 0x50
 80051ac:	d873      	bhi.n	8005296 <HAL_TIM_ConfigClockSource+0x16c>
 80051ae:	2b40      	cmp	r3, #64	; 0x40
 80051b0:	d058      	beq.n	8005264 <HAL_TIM_ConfigClockSource+0x13a>
 80051b2:	2b40      	cmp	r3, #64	; 0x40
 80051b4:	d86f      	bhi.n	8005296 <HAL_TIM_ConfigClockSource+0x16c>
 80051b6:	2b30      	cmp	r3, #48	; 0x30
 80051b8:	d064      	beq.n	8005284 <HAL_TIM_ConfigClockSource+0x15a>
 80051ba:	2b30      	cmp	r3, #48	; 0x30
 80051bc:	d86b      	bhi.n	8005296 <HAL_TIM_ConfigClockSource+0x16c>
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d060      	beq.n	8005284 <HAL_TIM_ConfigClockSource+0x15a>
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d867      	bhi.n	8005296 <HAL_TIM_ConfigClockSource+0x16c>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d05c      	beq.n	8005284 <HAL_TIM_ConfigClockSource+0x15a>
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d05a      	beq.n	8005284 <HAL_TIM_ConfigClockSource+0x15a>
 80051ce:	e062      	b.n	8005296 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	6899      	ldr	r1, [r3, #8]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f000 f984 	bl	80054ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	609a      	str	r2, [r3, #8]
      break;
 80051fc:	e04f      	b.n	800529e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6899      	ldr	r1, [r3, #8]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f000 f96d 	bl	80054ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005220:	609a      	str	r2, [r3, #8]
      break;
 8005222:	e03c      	b.n	800529e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6818      	ldr	r0, [r3, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	461a      	mov	r2, r3
 8005232:	f000 f8e1 	bl	80053f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2150      	movs	r1, #80	; 0x50
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f93a 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8005242:	e02c      	b.n	800529e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	6859      	ldr	r1, [r3, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	461a      	mov	r2, r3
 8005252:	f000 f900 	bl	8005456 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2160      	movs	r1, #96	; 0x60
 800525c:	4618      	mov	r0, r3
 800525e:	f000 f92a 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8005262:	e01c      	b.n	800529e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	6859      	ldr	r1, [r3, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	461a      	mov	r2, r3
 8005272:	f000 f8c1 	bl	80053f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2140      	movs	r1, #64	; 0x40
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f91a 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8005282:	e00c      	b.n	800529e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4619      	mov	r1, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f000 f911 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8005294:	e003      	b.n	800529e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
      break;
 800529a:	e000      	b.n	800529e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800529c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a40      	ldr	r2, [pc, #256]	; (80053cc <TIM_Base_SetConfig+0x114>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d6:	d00f      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a3d      	ldr	r2, [pc, #244]	; (80053d0 <TIM_Base_SetConfig+0x118>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00b      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a3c      	ldr	r2, [pc, #240]	; (80053d4 <TIM_Base_SetConfig+0x11c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a3b      	ldr	r2, [pc, #236]	; (80053d8 <TIM_Base_SetConfig+0x120>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a3a      	ldr	r2, [pc, #232]	; (80053dc <TIM_Base_SetConfig+0x124>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d108      	bne.n	800530a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2f      	ldr	r2, [pc, #188]	; (80053cc <TIM_Base_SetConfig+0x114>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d02b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005318:	d027      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2c      	ldr	r2, [pc, #176]	; (80053d0 <TIM_Base_SetConfig+0x118>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d023      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2b      	ldr	r2, [pc, #172]	; (80053d4 <TIM_Base_SetConfig+0x11c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01f      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2a      	ldr	r2, [pc, #168]	; (80053d8 <TIM_Base_SetConfig+0x120>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a29      	ldr	r2, [pc, #164]	; (80053dc <TIM_Base_SetConfig+0x124>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d017      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a28      	ldr	r2, [pc, #160]	; (80053e0 <TIM_Base_SetConfig+0x128>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a27      	ldr	r2, [pc, #156]	; (80053e4 <TIM_Base_SetConfig+0x12c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00f      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <TIM_Base_SetConfig+0x130>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a25      	ldr	r2, [pc, #148]	; (80053ec <TIM_Base_SetConfig+0x134>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a24      	ldr	r2, [pc, #144]	; (80053f0 <TIM_Base_SetConfig+0x138>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a23      	ldr	r2, [pc, #140]	; (80053f4 <TIM_Base_SetConfig+0x13c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d108      	bne.n	800537c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <TIM_Base_SetConfig+0x114>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0xf8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <TIM_Base_SetConfig+0x124>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d103      	bne.n	80053b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	615a      	str	r2, [r3, #20]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40000c00 	.word	0x40000c00
 80053dc:	40010400 	.word	0x40010400
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40014400 	.word	0x40014400
 80053e8:	40014800 	.word	0x40014800
 80053ec:	40001800 	.word	0x40001800
 80053f0:	40001c00 	.word	0x40001c00
 80053f4:	40002000 	.word	0x40002000

080053f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0201 	bic.w	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f023 030a 	bic.w	r3, r3, #10
 8005434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005456:	b480      	push	{r7}
 8005458:	b087      	sub	sp, #28
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f023 0210 	bic.w	r2, r3, #16
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	031b      	lsls	r3, r3, #12
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005492:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f043 0307 	orr.w	r3, r3, #7
 80054d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	609a      	str	r2, [r3, #8]
}
 80054e0:	bf00      	nop
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	021a      	lsls	r2, r3, #8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	431a      	orrs	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4313      	orrs	r3, r2
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	609a      	str	r2, [r3, #8]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005540:	2302      	movs	r3, #2
 8005542:	e05a      	b.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a21      	ldr	r2, [pc, #132]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d022      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d01d      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1d      	ldr	r2, [pc, #116]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d018      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1a      	ldr	r2, [pc, #104]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00e      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d009      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a17      	ldr	r2, [pc, #92]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a15      	ldr	r2, [pc, #84]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10c      	bne.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40010000 	.word	0x40010000
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40010400 	.word	0x40010400
 800561c:	40014000 	.word	0x40014000
 8005620:	40001800 	.word	0x40001800

08005624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e03f      	b.n	80056b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fc feba 	bl	80023c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2224      	movs	r2, #36	; 0x24
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f929 	bl	80058c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800567c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695a      	ldr	r2, [r3, #20]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800568c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800569c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b08a      	sub	sp, #40	; 0x28
 80056c2:	af02      	add	r7, sp, #8
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	4613      	mov	r3, r2
 80056cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d17c      	bne.n	80057d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_UART_Transmit+0x2c>
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e075      	b.n	80057da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_UART_Transmit+0x3e>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e06e      	b.n	80057da <HAL_UART_Transmit+0x11c>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2221      	movs	r2, #33	; 0x21
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005712:	f7fc ffe3 	bl	80026dc <HAL_GetTick>
 8005716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	88fa      	ldrh	r2, [r7, #6]
 8005722:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572c:	d108      	bne.n	8005740 <HAL_UART_Transmit+0x82>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	e003      	b.n	8005748 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005744:	2300      	movs	r3, #0
 8005746:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005750:	e02a      	b.n	80057a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2200      	movs	r2, #0
 800575a:	2180      	movs	r1, #128	; 0x80
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f840 	bl	80057e2 <UART_WaitOnFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e036      	b.n	80057da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10b      	bne.n	800578a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	3302      	adds	r3, #2
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e007      	b.n	800579a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3301      	adds	r3, #1
 8005798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1cf      	bne.n	8005752 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	2140      	movs	r1, #64	; 0x40
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f810 	bl	80057e2 <UART_WaitOnFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e006      	b.n	80057da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e000      	b.n	80057da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057d8:	2302      	movs	r3, #2
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b090      	sub	sp, #64	; 0x40
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	603b      	str	r3, [r7, #0]
 80057ee:	4613      	mov	r3, r2
 80057f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f2:	e050      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d04c      	beq.n	8005896 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0x30>
 8005802:	f7fc ff6b 	bl	80026dc <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800580e:	429a      	cmp	r2, r3
 8005810:	d241      	bcs.n	8005896 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005832:	637a      	str	r2, [r7, #52]	; 0x34
 8005834:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	613b      	str	r3, [r7, #16]
   return(result);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	63bb      	str	r3, [r7, #56]	; 0x38
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005866:	623a      	str	r2, [r7, #32]
 8005868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	69f9      	ldr	r1, [r7, #28]
 800586c:	6a3a      	ldr	r2, [r7, #32]
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	61bb      	str	r3, [r7, #24]
   return(result);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e5      	bne.n	8005846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e00f      	b.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4013      	ands	r3, r2
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	bf0c      	ite	eq
 80058a6:	2301      	moveq	r3, #1
 80058a8:	2300      	movne	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d09f      	beq.n	80057f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3740      	adds	r7, #64	; 0x40
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c4:	b0c0      	sub	sp, #256	; 0x100
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058dc:	68d9      	ldr	r1, [r3, #12]
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	ea40 0301 	orr.w	r3, r0, r1
 80058e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	431a      	orrs	r2, r3
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005918:	f021 010c 	bic.w	r1, r1, #12
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005926:	430b      	orrs	r3, r1
 8005928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593a:	6999      	ldr	r1, [r3, #24]
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	ea40 0301 	orr.w	r3, r0, r1
 8005946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b8f      	ldr	r3, [pc, #572]	; (8005b8c <UART_SetConfig+0x2cc>)
 8005950:	429a      	cmp	r2, r3
 8005952:	d005      	beq.n	8005960 <UART_SetConfig+0xa0>
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b8d      	ldr	r3, [pc, #564]	; (8005b90 <UART_SetConfig+0x2d0>)
 800595c:	429a      	cmp	r2, r3
 800595e:	d104      	bne.n	800596a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005960:	f7fe fa80 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 8005964:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005968:	e003      	b.n	8005972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800596a:	f7fe fa67 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 800596e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597c:	f040 810c 	bne.w	8005b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005984:	2200      	movs	r2, #0
 8005986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800598a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800598e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005992:	4622      	mov	r2, r4
 8005994:	462b      	mov	r3, r5
 8005996:	1891      	adds	r1, r2, r2
 8005998:	65b9      	str	r1, [r7, #88]	; 0x58
 800599a:	415b      	adcs	r3, r3
 800599c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800599e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059a2:	4621      	mov	r1, r4
 80059a4:	eb12 0801 	adds.w	r8, r2, r1
 80059a8:	4629      	mov	r1, r5
 80059aa:	eb43 0901 	adc.w	r9, r3, r1
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059c2:	4690      	mov	r8, r2
 80059c4:	4699      	mov	r9, r3
 80059c6:	4623      	mov	r3, r4
 80059c8:	eb18 0303 	adds.w	r3, r8, r3
 80059cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059d0:	462b      	mov	r3, r5
 80059d2:	eb49 0303 	adc.w	r3, r9, r3
 80059d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059ee:	460b      	mov	r3, r1
 80059f0:	18db      	adds	r3, r3, r3
 80059f2:	653b      	str	r3, [r7, #80]	; 0x50
 80059f4:	4613      	mov	r3, r2
 80059f6:	eb42 0303 	adc.w	r3, r2, r3
 80059fa:	657b      	str	r3, [r7, #84]	; 0x54
 80059fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a04:	f7fb f8e8 	bl	8000bd8 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4b61      	ldr	r3, [pc, #388]	; (8005b94 <UART_SetConfig+0x2d4>)
 8005a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	011c      	lsls	r4, r3, #4
 8005a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a28:	4642      	mov	r2, r8
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	1891      	adds	r1, r2, r2
 8005a2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a30:	415b      	adcs	r3, r3
 8005a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a38:	4641      	mov	r1, r8
 8005a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a3e:	4649      	mov	r1, r9
 8005a40:	eb43 0b01 	adc.w	fp, r3, r1
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a58:	4692      	mov	sl, r2
 8005a5a:	469b      	mov	fp, r3
 8005a5c:	4643      	mov	r3, r8
 8005a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a66:	464b      	mov	r3, r9
 8005a68:	eb4b 0303 	adc.w	r3, fp, r3
 8005a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a84:	460b      	mov	r3, r1
 8005a86:	18db      	adds	r3, r3, r3
 8005a88:	643b      	str	r3, [r7, #64]	; 0x40
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	eb42 0303 	adc.w	r3, r2, r3
 8005a90:	647b      	str	r3, [r7, #68]	; 0x44
 8005a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a9a:	f7fb f89d 	bl	8000bd8 <__aeabi_uldivmod>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <UART_SetConfig+0x2d4>)
 8005aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	2264      	movs	r2, #100	; 0x64
 8005aae:	fb02 f303 	mul.w	r3, r2, r3
 8005ab2:	1acb      	subs	r3, r1, r3
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005aba:	4b36      	ldr	r3, [pc, #216]	; (8005b94 <UART_SetConfig+0x2d4>)
 8005abc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ac8:	441c      	add	r4, r3
 8005aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005adc:	4642      	mov	r2, r8
 8005ade:	464b      	mov	r3, r9
 8005ae0:	1891      	adds	r1, r2, r2
 8005ae2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ae4:	415b      	adcs	r3, r3
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005aec:	4641      	mov	r1, r8
 8005aee:	1851      	adds	r1, r2, r1
 8005af0:	6339      	str	r1, [r7, #48]	; 0x30
 8005af2:	4649      	mov	r1, r9
 8005af4:	414b      	adcs	r3, r1
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b04:	4659      	mov	r1, fp
 8005b06:	00cb      	lsls	r3, r1, #3
 8005b08:	4651      	mov	r1, sl
 8005b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b0e:	4651      	mov	r1, sl
 8005b10:	00ca      	lsls	r2, r1, #3
 8005b12:	4610      	mov	r0, r2
 8005b14:	4619      	mov	r1, r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	4642      	mov	r2, r8
 8005b1a:	189b      	adds	r3, r3, r2
 8005b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b20:	464b      	mov	r3, r9
 8005b22:	460a      	mov	r2, r1
 8005b24:	eb42 0303 	adc.w	r3, r2, r3
 8005b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b40:	460b      	mov	r3, r1
 8005b42:	18db      	adds	r3, r3, r3
 8005b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b46:	4613      	mov	r3, r2
 8005b48:	eb42 0303 	adc.w	r3, r2, r3
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b56:	f7fb f83f 	bl	8000bd8 <__aeabi_uldivmod>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <UART_SetConfig+0x2d4>)
 8005b60:	fba3 1302 	umull	r1, r3, r3, r2
 8005b64:	095b      	lsrs	r3, r3, #5
 8005b66:	2164      	movs	r1, #100	; 0x64
 8005b68:	fb01 f303 	mul.w	r3, r1, r3
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	3332      	adds	r3, #50	; 0x32
 8005b72:	4a08      	ldr	r2, [pc, #32]	; (8005b94 <UART_SetConfig+0x2d4>)
 8005b74:	fba2 2303 	umull	r2, r3, r2, r3
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	f003 0207 	and.w	r2, r3, #7
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4422      	add	r2, r4
 8005b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b88:	e105      	b.n	8005d96 <UART_SetConfig+0x4d6>
 8005b8a:	bf00      	nop
 8005b8c:	40011000 	.word	0x40011000
 8005b90:	40011400 	.word	0x40011400
 8005b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005baa:	4642      	mov	r2, r8
 8005bac:	464b      	mov	r3, r9
 8005bae:	1891      	adds	r1, r2, r2
 8005bb0:	6239      	str	r1, [r7, #32]
 8005bb2:	415b      	adcs	r3, r3
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bba:	4641      	mov	r1, r8
 8005bbc:	1854      	adds	r4, r2, r1
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	eb43 0501 	adc.w	r5, r3, r1
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	00eb      	lsls	r3, r5, #3
 8005bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bd2:	00e2      	lsls	r2, r4, #3
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	4643      	mov	r3, r8
 8005bda:	18e3      	adds	r3, r4, r3
 8005bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005be0:	464b      	mov	r3, r9
 8005be2:	eb45 0303 	adc.w	r3, r5, r3
 8005be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c06:	4629      	mov	r1, r5
 8005c08:	008b      	lsls	r3, r1, #2
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c10:	4621      	mov	r1, r4
 8005c12:	008a      	lsls	r2, r1, #2
 8005c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c18:	f7fa ffde 	bl	8000bd8 <__aeabi_uldivmod>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4b60      	ldr	r3, [pc, #384]	; (8005da4 <UART_SetConfig+0x4e4>)
 8005c22:	fba3 2302 	umull	r2, r3, r3, r2
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	011c      	lsls	r4, r3, #4
 8005c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	1891      	adds	r1, r2, r2
 8005c42:	61b9      	str	r1, [r7, #24]
 8005c44:	415b      	adcs	r3, r3
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	1851      	adds	r1, r2, r1
 8005c50:	6139      	str	r1, [r7, #16]
 8005c52:	4649      	mov	r1, r9
 8005c54:	414b      	adcs	r3, r1
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c64:	4659      	mov	r1, fp
 8005c66:	00cb      	lsls	r3, r1, #3
 8005c68:	4651      	mov	r1, sl
 8005c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c6e:	4651      	mov	r1, sl
 8005c70:	00ca      	lsls	r2, r1, #3
 8005c72:	4610      	mov	r0, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	4642      	mov	r2, r8
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c80:	464b      	mov	r3, r9
 8005c82:	460a      	mov	r2, r1
 8005c84:	eb42 0303 	adc.w	r3, r2, r3
 8005c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	008b      	lsls	r3, r1, #2
 8005ca8:	4641      	mov	r1, r8
 8005caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cae:	4641      	mov	r1, r8
 8005cb0:	008a      	lsls	r2, r1, #2
 8005cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005cb6:	f7fa ff8f 	bl	8000bd8 <__aeabi_uldivmod>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4b39      	ldr	r3, [pc, #228]	; (8005da4 <UART_SetConfig+0x4e4>)
 8005cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	2164      	movs	r1, #100	; 0x64
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	3332      	adds	r3, #50	; 0x32
 8005cd2:	4a34      	ldr	r2, [pc, #208]	; (8005da4 <UART_SetConfig+0x4e4>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cde:	441c      	add	r4, r3
 8005ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ce8:	677a      	str	r2, [r7, #116]	; 0x74
 8005cea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cee:	4642      	mov	r2, r8
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	1891      	adds	r1, r2, r2
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	415b      	adcs	r3, r3
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cfe:	4641      	mov	r1, r8
 8005d00:	1851      	adds	r1, r2, r1
 8005d02:	6039      	str	r1, [r7, #0]
 8005d04:	4649      	mov	r1, r9
 8005d06:	414b      	adcs	r3, r1
 8005d08:	607b      	str	r3, [r7, #4]
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	f04f 0300 	mov.w	r3, #0
 8005d12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d16:	4659      	mov	r1, fp
 8005d18:	00cb      	lsls	r3, r1, #3
 8005d1a:	4651      	mov	r1, sl
 8005d1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d20:	4651      	mov	r1, sl
 8005d22:	00ca      	lsls	r2, r1, #3
 8005d24:	4610      	mov	r0, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	4603      	mov	r3, r0
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	189b      	adds	r3, r3, r2
 8005d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d30:	464b      	mov	r3, r9
 8005d32:	460a      	mov	r2, r1
 8005d34:	eb42 0303 	adc.w	r3, r2, r3
 8005d38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	663b      	str	r3, [r7, #96]	; 0x60
 8005d44:	667a      	str	r2, [r7, #100]	; 0x64
 8005d46:	f04f 0200 	mov.w	r2, #0
 8005d4a:	f04f 0300 	mov.w	r3, #0
 8005d4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d52:	4649      	mov	r1, r9
 8005d54:	008b      	lsls	r3, r1, #2
 8005d56:	4641      	mov	r1, r8
 8005d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	008a      	lsls	r2, r1, #2
 8005d60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d64:	f7fa ff38 	bl	8000bd8 <__aeabi_uldivmod>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <UART_SetConfig+0x4e4>)
 8005d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	2164      	movs	r1, #100	; 0x64
 8005d76:	fb01 f303 	mul.w	r3, r1, r3
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	3332      	adds	r3, #50	; 0x32
 8005d80:	4a08      	ldr	r2, [pc, #32]	; (8005da4 <UART_SetConfig+0x4e4>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	f003 020f 	and.w	r2, r3, #15
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4422      	add	r2, r4
 8005d94:	609a      	str	r2, [r3, #8]
}
 8005d96:	bf00      	nop
 8005d98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005da2:	bf00      	nop
 8005da4:	51eb851f 	.word	0x51eb851f

08005da8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005dac:	4904      	ldr	r1, [pc, #16]	; (8005dc0 <MX_FATFS_Init+0x18>)
 8005dae:	4805      	ldr	r0, [pc, #20]	; (8005dc4 <MX_FATFS_Init+0x1c>)
 8005db0:	f003 fe10 	bl	80099d4 <FATFS_LinkDriver>
 8005db4:	4603      	mov	r3, r0
 8005db6:	461a      	mov	r2, r3
 8005db8:	4b03      	ldr	r3, [pc, #12]	; (8005dc8 <MX_FATFS_Init+0x20>)
 8005dba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005dbc:	bf00      	nop
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	200026fc 	.word	0x200026fc
 8005dc4:	20000014 	.word	0x20000014
 8005dc8:	200026f8 	.word	0x200026f8

08005dcc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005dd0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4603      	mov	r3, r0
 8005de4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_initialize(pdrv);
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fb fa31 	bl	8001250 <SD_disk_initialize>
 8005dee:	4603      	mov	r3, r0
 8005df0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	4603      	mov	r3, r0
 8005e02:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_status(pdrv);
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fb fb0e 	bl	8001428 <SD_disk_status>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4603      	mov	r3, r0
 8005e26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8005e28:	7bf8      	ldrb	r0, [r7, #15]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	f7fb fb10 	bl	8001454 <SD_disk_read>
 8005e34:	4603      	mov	r3, r0
 8005e36:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8005e50:	7bf8      	ldrb	r0, [r7, #15]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	f7fb fb66 	bl	8001528 <SD_disk_write>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	603a      	str	r2, [r7, #0]
 8005e72:	71fb      	strb	r3, [r7, #7]
 8005e74:	460b      	mov	r3, r1
 8005e76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	79b9      	ldrb	r1, [r7, #6]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fb fbd6 	bl	8001630 <SD_disk_ioctl>
 8005e84:	4603      	mov	r3, r0
 8005e86:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4603      	mov	r3, r0
 8005e98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <disk_status+0x30>)
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	79fa      	ldrb	r2, [r7, #7]
 8005ea8:	4905      	ldr	r1, [pc, #20]	; (8005ec0 <disk_status+0x30>)
 8005eaa:	440a      	add	r2, r1
 8005eac:	7a12      	ldrb	r2, [r2, #8]
 8005eae:	4610      	mov	r0, r2
 8005eb0:	4798      	blx	r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20002928 	.word	0x20002928

08005ec4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	4603      	mov	r3, r0
 8005ecc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	4a0d      	ldr	r2, [pc, #52]	; (8005f0c <disk_initialize+0x48>)
 8005ed6:	5cd3      	ldrb	r3, [r2, r3]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d111      	bne.n	8005f00 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	4a0b      	ldr	r2, [pc, #44]	; (8005f0c <disk_initialize+0x48>)
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <disk_initialize+0x48>)
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	79fa      	ldrb	r2, [r7, #7]
 8005ef2:	4906      	ldr	r1, [pc, #24]	; (8005f0c <disk_initialize+0x48>)
 8005ef4:	440a      	add	r2, r1
 8005ef6:	7a12      	ldrb	r2, [r2, #8]
 8005ef8:	4610      	mov	r0, r2
 8005efa:	4798      	blx	r3
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20002928 	.word	0x20002928

08005f10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005f10:	b590      	push	{r4, r7, lr}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	607a      	str	r2, [r7, #4]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <disk_read+0x3c>)
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	689c      	ldr	r4, [r3, #8]
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	4a07      	ldr	r2, [pc, #28]	; (8005f4c <disk_read+0x3c>)
 8005f30:	4413      	add	r3, r2
 8005f32:	7a18      	ldrb	r0, [r3, #8]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	68b9      	ldr	r1, [r7, #8]
 8005f3a:	47a0      	blx	r4
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd90      	pop	{r4, r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20002928 	.word	0x20002928

08005f50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005f50:	b590      	push	{r4, r7, lr}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	4a0a      	ldr	r2, [pc, #40]	; (8005f8c <disk_write+0x3c>)
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	68dc      	ldr	r4, [r3, #12]
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	4a07      	ldr	r2, [pc, #28]	; (8005f8c <disk_write+0x3c>)
 8005f70:	4413      	add	r3, r2
 8005f72:	7a18      	ldrb	r0, [r3, #8]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	47a0      	blx	r4
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd90      	pop	{r4, r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20002928 	.word	0x20002928

08005f90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	603a      	str	r2, [r7, #0]
 8005f9a:	71fb      	strb	r3, [r7, #7]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005fa0:	79fb      	ldrb	r3, [r7, #7]
 8005fa2:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <disk_ioctl+0x38>)
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	79fa      	ldrb	r2, [r7, #7]
 8005fae:	4906      	ldr	r1, [pc, #24]	; (8005fc8 <disk_ioctl+0x38>)
 8005fb0:	440a      	add	r2, r1
 8005fb2:	7a10      	ldrb	r0, [r2, #8]
 8005fb4:	79b9      	ldrb	r1, [r7, #6]
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	4798      	blx	r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	73fb      	strb	r3, [r7, #15]
  return res;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20002928 	.word	0x20002928

08005fcc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005fdc:	89fb      	ldrh	r3, [r7, #14]
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	b21a      	sxth	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	b21b      	sxth	r3, r3
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	b21b      	sxth	r3, r3
 8005fec:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005fee:	89fb      	ldrh	r3, [r7, #14]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3303      	adds	r3, #3
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	3202      	adds	r2, #2
 8006014:	7812      	ldrb	r2, [r2, #0]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	3201      	adds	r2, #1
 8006022:	7812      	ldrb	r2, [r2, #0]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	7812      	ldrb	r2, [r2, #0]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
	return rv;
 8006034:	68fb      	ldr	r3, [r7, #12]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	887a      	ldrh	r2, [r7, #2]
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	887b      	ldrh	r3, [r7, #2]
 800605c:	0a1b      	lsrs	r3, r3, #8
 800605e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	607a      	str	r2, [r7, #4]
 8006066:	887a      	ldrh	r2, [r7, #2]
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	701a      	strb	r2, [r3, #0]
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	0a1b      	lsrs	r3, r3, #8
 8006092:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	0a1b      	lsrs	r3, r3, #8
 80060a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	0a1b      	lsrs	r3, r3, #8
 80060b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	607a      	str	r2, [r7, #4]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00d      	beq.n	8006106 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	1c53      	adds	r3, r2, #1
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	1c59      	adds	r1, r3, #1
 80060f4:	6179      	str	r1, [r7, #20]
 80060f6:	7812      	ldrb	r2, [r2, #0]
 80060f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f1      	bne.n	80060ea <mem_cpy+0x1a>
	}
}
 8006106:	bf00      	nop
 8006108:	371c      	adds	r7, #28
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006112:	b480      	push	{r7}
 8006114:	b087      	sub	sp, #28
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	617a      	str	r2, [r7, #20]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3b01      	subs	r3, #1
 8006132:	607b      	str	r3, [r7, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f3      	bne.n	8006122 <mem_set+0x10>
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006148:	b480      	push	{r7}
 800614a:	b089      	sub	sp, #36	; 0x24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	61fb      	str	r3, [r7, #28]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	61fa      	str	r2, [r7, #28]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	4619      	mov	r1, r3
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	61ba      	str	r2, [r7, #24]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	1acb      	subs	r3, r1, r3
 8006174:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3b01      	subs	r3, #1
 800617a:	607b      	str	r3, [r7, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <mem_cmp+0x40>
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0eb      	beq.n	8006160 <mem_cmp+0x18>

	return r;
 8006188:	697b      	ldr	r3, [r7, #20]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3724      	adds	r7, #36	; 0x24
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80061a0:	e002      	b.n	80061a8 <chk_chr+0x12>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3301      	adds	r3, #1
 80061a6:	607b      	str	r3, [r7, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <chk_chr+0x26>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d1f2      	bne.n	80061a2 <chk_chr+0xc>
	return *str;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	781b      	ldrb	r3, [r3, #0]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	e029      	b.n	8006234 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80061e0:	4a27      	ldr	r2, [pc, #156]	; (8006280 <chk_lock+0xb4>)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	4413      	add	r3, r2
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d01d      	beq.n	800622a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80061ee:	4a24      	ldr	r2, [pc, #144]	; (8006280 <chk_lock+0xb4>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	4413      	add	r3, r2
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d116      	bne.n	800622e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006200:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <chk_lock+0xb4>)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	4413      	add	r3, r2
 8006208:	3304      	adds	r3, #4
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006210:	429a      	cmp	r2, r3
 8006212:	d10c      	bne.n	800622e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006214:	4a1a      	ldr	r2, [pc, #104]	; (8006280 <chk_lock+0xb4>)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	4413      	add	r3, r2
 800621c:	3308      	adds	r3, #8
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006224:	429a      	cmp	r2, r3
 8006226:	d102      	bne.n	800622e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006228:	e007      	b.n	800623a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800622a:	2301      	movs	r3, #1
 800622c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d9d2      	bls.n	80061e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d109      	bne.n	8006254 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d102      	bne.n	800624c <chk_lock+0x80>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d101      	bne.n	8006250 <chk_lock+0x84>
 800624c:	2300      	movs	r3, #0
 800624e:	e010      	b.n	8006272 <chk_lock+0xa6>
 8006250:	2312      	movs	r3, #18
 8006252:	e00e      	b.n	8006272 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d108      	bne.n	800626c <chk_lock+0xa0>
 800625a:	4a09      	ldr	r2, [pc, #36]	; (8006280 <chk_lock+0xb4>)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	4413      	add	r3, r2
 8006262:	330c      	adds	r3, #12
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800626a:	d101      	bne.n	8006270 <chk_lock+0xa4>
 800626c:	2310      	movs	r3, #16
 800626e:	e000      	b.n	8006272 <chk_lock+0xa6>
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20002708 	.word	0x20002708

08006284 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800628a:	2300      	movs	r3, #0
 800628c:	607b      	str	r3, [r7, #4]
 800628e:	e002      	b.n	8006296 <enq_lock+0x12>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3301      	adds	r3, #1
 8006294:	607b      	str	r3, [r7, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d806      	bhi.n	80062aa <enq_lock+0x26>
 800629c:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <enq_lock+0x40>)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	4413      	add	r3, r2
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1f2      	bne.n	8006290 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	bf14      	ite	ne
 80062b0:	2301      	movne	r3, #1
 80062b2:	2300      	moveq	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20002708 	.word	0x20002708

080062c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e01f      	b.n	8006318 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80062d8:	4a41      	ldr	r2, [pc, #260]	; (80063e0 <inc_lock+0x118>)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	4413      	add	r3, r2
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d113      	bne.n	8006312 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80062ea:	4a3d      	ldr	r2, [pc, #244]	; (80063e0 <inc_lock+0x118>)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	4413      	add	r3, r2
 80062f2:	3304      	adds	r3, #4
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d109      	bne.n	8006312 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80062fe:	4a38      	ldr	r2, [pc, #224]	; (80063e0 <inc_lock+0x118>)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	4413      	add	r3, r2
 8006306:	3308      	adds	r3, #8
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800630e:	429a      	cmp	r2, r3
 8006310:	d006      	beq.n	8006320 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3301      	adds	r3, #1
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d9dc      	bls.n	80062d8 <inc_lock+0x10>
 800631e:	e000      	b.n	8006322 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006320:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b02      	cmp	r3, #2
 8006326:	d132      	bne.n	800638e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	e002      	b.n	8006334 <inc_lock+0x6c>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3301      	adds	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d806      	bhi.n	8006348 <inc_lock+0x80>
 800633a:	4a29      	ldr	r2, [pc, #164]	; (80063e0 <inc_lock+0x118>)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	4413      	add	r3, r2
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f2      	bne.n	800632e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d101      	bne.n	8006352 <inc_lock+0x8a>
 800634e:	2300      	movs	r3, #0
 8006350:	e040      	b.n	80063d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4922      	ldr	r1, [pc, #136]	; (80063e0 <inc_lock+0x118>)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	440b      	add	r3, r1
 800635e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	491e      	ldr	r1, [pc, #120]	; (80063e0 <inc_lock+0x118>)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	440b      	add	r3, r1
 800636c:	3304      	adds	r3, #4
 800636e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	695a      	ldr	r2, [r3, #20]
 8006374:	491a      	ldr	r1, [pc, #104]	; (80063e0 <inc_lock+0x118>)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	011b      	lsls	r3, r3, #4
 800637a:	440b      	add	r3, r1
 800637c:	3308      	adds	r3, #8
 800637e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006380:	4a17      	ldr	r2, [pc, #92]	; (80063e0 <inc_lock+0x118>)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	4413      	add	r3, r2
 8006388:	330c      	adds	r3, #12
 800638a:	2200      	movs	r2, #0
 800638c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d009      	beq.n	80063a8 <inc_lock+0xe0>
 8006394:	4a12      	ldr	r2, [pc, #72]	; (80063e0 <inc_lock+0x118>)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	4413      	add	r3, r2
 800639c:	330c      	adds	r3, #12
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <inc_lock+0xe0>
 80063a4:	2300      	movs	r3, #0
 80063a6:	e015      	b.n	80063d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d108      	bne.n	80063c0 <inc_lock+0xf8>
 80063ae:	4a0c      	ldr	r2, [pc, #48]	; (80063e0 <inc_lock+0x118>)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	4413      	add	r3, r2
 80063b6:	330c      	adds	r3, #12
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	e001      	b.n	80063c4 <inc_lock+0xfc>
 80063c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063c4:	4906      	ldr	r1, [pc, #24]	; (80063e0 <inc_lock+0x118>)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	440b      	add	r3, r1
 80063cc:	330c      	adds	r3, #12
 80063ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3301      	adds	r3, #1
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	20002708 	.word	0x20002708

080063e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	607b      	str	r3, [r7, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d825      	bhi.n	8006444 <dec_lock+0x60>
		n = Files[i].ctr;
 80063f8:	4a17      	ldr	r2, [pc, #92]	; (8006458 <dec_lock+0x74>)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	4413      	add	r3, r2
 8006400:	330c      	adds	r3, #12
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006406:	89fb      	ldrh	r3, [r7, #14]
 8006408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640c:	d101      	bne.n	8006412 <dec_lock+0x2e>
 800640e:	2300      	movs	r3, #0
 8006410:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006412:	89fb      	ldrh	r3, [r7, #14]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <dec_lock+0x3a>
 8006418:	89fb      	ldrh	r3, [r7, #14]
 800641a:	3b01      	subs	r3, #1
 800641c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800641e:	4a0e      	ldr	r2, [pc, #56]	; (8006458 <dec_lock+0x74>)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	4413      	add	r3, r2
 8006426:	330c      	adds	r3, #12
 8006428:	89fa      	ldrh	r2, [r7, #14]
 800642a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800642c:	89fb      	ldrh	r3, [r7, #14]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d105      	bne.n	800643e <dec_lock+0x5a>
 8006432:	4a09      	ldr	r2, [pc, #36]	; (8006458 <dec_lock+0x74>)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	4413      	add	r3, r2
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	737b      	strb	r3, [r7, #13]
 8006442:	e001      	b.n	8006448 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006444:	2302      	movs	r3, #2
 8006446:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006448:	7b7b      	ldrb	r3, [r7, #13]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	20002708 	.word	0x20002708

0800645c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006464:	2300      	movs	r3, #0
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	e010      	b.n	800648c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800646a:	4a0d      	ldr	r2, [pc, #52]	; (80064a0 <clear_lock+0x44>)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	4413      	add	r3, r2
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	429a      	cmp	r2, r3
 8006478:	d105      	bne.n	8006486 <clear_lock+0x2a>
 800647a:	4a09      	ldr	r2, [pc, #36]	; (80064a0 <clear_lock+0x44>)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	011b      	lsls	r3, r3, #4
 8006480:	4413      	add	r3, r2
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3301      	adds	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d9eb      	bls.n	800646a <clear_lock+0xe>
	}
}
 8006492:	bf00      	nop
 8006494:	bf00      	nop
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	20002708 	.word	0x20002708

080064a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	78db      	ldrb	r3, [r3, #3]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d034      	beq.n	8006522 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	7858      	ldrb	r0, [r3, #1]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80064c8:	2301      	movs	r3, #1
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	f7ff fd40 	bl	8005f50 <disk_write>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <sync_window+0x38>
			res = FR_DISK_ERR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	73fb      	strb	r3, [r7, #15]
 80064da:	e022      	b.n	8006522 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	1ad2      	subs	r2, r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d217      	bcs.n	8006522 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	789b      	ldrb	r3, [r3, #2]
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	e010      	b.n	800651c <sync_window+0x78>
					wsect += fs->fsize;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4413      	add	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	7858      	ldrb	r0, [r3, #1]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800650e:	2301      	movs	r3, #1
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	f7ff fd1d 	bl	8005f50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3b01      	subs	r3, #1
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d8eb      	bhi.n	80064fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d01b      	beq.n	800657c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff ffad 	bl	80064a4 <sync_window>
 800654a:	4603      	mov	r3, r0
 800654c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d113      	bne.n	800657c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	7858      	ldrb	r0, [r3, #1]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800655e:	2301      	movs	r3, #1
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	f7ff fcd5 	bl	8005f10 <disk_read>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d004      	beq.n	8006576 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800656c:	f04f 33ff 	mov.w	r3, #4294967295
 8006570:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006572:	2301      	movs	r3, #1
 8006574:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800657c:	7bfb      	ldrb	r3, [r7, #15]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff ff87 	bl	80064a4 <sync_window>
 8006596:	4603      	mov	r3, r0
 8006598:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d159      	bne.n	8006654 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d149      	bne.n	800663c <sync_fs+0xb4>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	791b      	ldrb	r3, [r3, #4]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d145      	bne.n	800663c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	899b      	ldrh	r3, [r3, #12]
 80065ba:	461a      	mov	r2, r3
 80065bc:	2100      	movs	r1, #0
 80065be:	f7ff fda8 	bl	8006112 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3338      	adds	r3, #56	; 0x38
 80065c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065ca:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff fd37 	bl	8006042 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3338      	adds	r3, #56	; 0x38
 80065d8:	4921      	ldr	r1, [pc, #132]	; (8006660 <sync_fs+0xd8>)
 80065da:	4618      	mov	r0, r3
 80065dc:	f7ff fd4c 	bl	8006078 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3338      	adds	r3, #56	; 0x38
 80065e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80065e8:	491e      	ldr	r1, [pc, #120]	; (8006664 <sync_fs+0xdc>)
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff fd44 	bl	8006078 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3338      	adds	r3, #56	; 0x38
 80065f4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f7ff fd3a 	bl	8006078 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3338      	adds	r3, #56	; 0x38
 8006608:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f7ff fd30 	bl	8006078 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	7858      	ldrb	r0, [r3, #1]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006630:	2301      	movs	r3, #1
 8006632:	f7ff fc8d 	bl	8005f50 <disk_write>
			fs->fsi_flag = 0;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	785b      	ldrb	r3, [r3, #1]
 8006640:	2200      	movs	r2, #0
 8006642:	2100      	movs	r1, #0
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fca3 	bl	8005f90 <disk_ioctl>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <sync_fs+0xcc>
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006654:	7bfb      	ldrb	r3, [r7, #15]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	41615252 	.word	0x41615252
 8006664:	61417272 	.word	0x61417272

08006668 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	3b02      	subs	r3, #2
 8006676:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	3b02      	subs	r3, #2
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d301      	bcc.n	8006688 <clust2sect+0x20>
 8006684:	2300      	movs	r3, #0
 8006686:	e008      	b.n	800669a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	895b      	ldrh	r3, [r3, #10]
 800668c:	461a      	mov	r2, r3
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	fb03 f202 	mul.w	r2, r3, r2
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006698:	4413      	add	r3, r2
}
 800669a:	4618      	mov	r0, r3
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b086      	sub	sp, #24
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d904      	bls.n	80066c6 <get_fat+0x20>
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d302      	bcc.n	80066cc <get_fat+0x26>
		val = 1;	/* Internal error */
 80066c6:	2301      	movs	r3, #1
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	e0bb      	b.n	8006844 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80066cc:	f04f 33ff 	mov.w	r3, #4294967295
 80066d0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	f000 8083 	beq.w	80067e2 <get_fat+0x13c>
 80066dc:	2b03      	cmp	r3, #3
 80066de:	f300 80a7 	bgt.w	8006830 <get_fat+0x18a>
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d002      	beq.n	80066ec <get_fat+0x46>
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d056      	beq.n	8006798 <get_fat+0xf2>
 80066ea:	e0a1      	b.n	8006830 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	899b      	ldrh	r3, [r3, #12]
 8006702:	4619      	mov	r1, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	fbb3 f3f1 	udiv	r3, r3, r1
 800670a:	4413      	add	r3, r2
 800670c:	4619      	mov	r1, r3
 800670e:	6938      	ldr	r0, [r7, #16]
 8006710:	f7ff ff0c 	bl	800652c <move_window>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	f040 808d 	bne.w	8006836 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	60fa      	str	r2, [r7, #12]
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	8992      	ldrh	r2, [r2, #12]
 8006726:	fbb3 f1f2 	udiv	r1, r3, r2
 800672a:	fb01 f202 	mul.w	r2, r1, r2
 800672e:	1a9b      	subs	r3, r3, r2
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4413      	add	r3, r2
 8006734:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006738:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	899b      	ldrh	r3, [r3, #12]
 8006742:	4619      	mov	r1, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	fbb3 f3f1 	udiv	r3, r3, r1
 800674a:	4413      	add	r3, r2
 800674c:	4619      	mov	r1, r3
 800674e:	6938      	ldr	r0, [r7, #16]
 8006750:	f7ff feec 	bl	800652c <move_window>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d16f      	bne.n	800683a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	899b      	ldrh	r3, [r3, #12]
 800675e:	461a      	mov	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	fbb3 f1f2 	udiv	r1, r3, r2
 8006766:	fb01 f202 	mul.w	r2, r1, r2
 800676a:	1a9b      	subs	r3, r3, r2
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4413      	add	r3, r2
 8006770:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	461a      	mov	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	4313      	orrs	r3, r2
 800677c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <get_fat+0xe8>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	091b      	lsrs	r3, r3, #4
 800678c:	e002      	b.n	8006794 <get_fat+0xee>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006794:	617b      	str	r3, [r7, #20]
			break;
 8006796:	e055      	b.n	8006844 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	899b      	ldrh	r3, [r3, #12]
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	4619      	mov	r1, r3
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80067ac:	4413      	add	r3, r2
 80067ae:	4619      	mov	r1, r3
 80067b0:	6938      	ldr	r0, [r7, #16]
 80067b2:	f7ff febb 	bl	800652c <move_window>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d140      	bne.n	800683e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	8992      	ldrh	r2, [r2, #12]
 80067ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80067ce:	fb00 f202 	mul.w	r2, r0, r2
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	440b      	add	r3, r1
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fbf8 	bl	8005fcc <ld_word>
 80067dc:	4603      	mov	r3, r0
 80067de:	617b      	str	r3, [r7, #20]
			break;
 80067e0:	e030      	b.n	8006844 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	899b      	ldrh	r3, [r3, #12]
 80067ea:	089b      	lsrs	r3, r3, #2
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	4619      	mov	r1, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80067f6:	4413      	add	r3, r2
 80067f8:	4619      	mov	r1, r3
 80067fa:	6938      	ldr	r0, [r7, #16]
 80067fc:	f7ff fe96 	bl	800652c <move_window>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d11d      	bne.n	8006842 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	8992      	ldrh	r2, [r2, #12]
 8006814:	fbb3 f0f2 	udiv	r0, r3, r2
 8006818:	fb00 f202 	mul.w	r2, r0, r2
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	440b      	add	r3, r1
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fbeb 	bl	8005ffc <ld_dword>
 8006826:	4603      	mov	r3, r0
 8006828:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800682c:	617b      	str	r3, [r7, #20]
			break;
 800682e:	e009      	b.n	8006844 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006830:	2301      	movs	r3, #1
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	e006      	b.n	8006844 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006836:	bf00      	nop
 8006838:	e004      	b.n	8006844 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800683a:	bf00      	nop
 800683c:	e002      	b.n	8006844 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800683e:	bf00      	nop
 8006840:	e000      	b.n	8006844 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006842:	bf00      	nop
		}
	}

	return val;
 8006844:	697b      	ldr	r3, [r7, #20]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800684e:	b590      	push	{r4, r7, lr}
 8006850:	b089      	sub	sp, #36	; 0x24
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800685a:	2302      	movs	r3, #2
 800685c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b01      	cmp	r3, #1
 8006862:	f240 8102 	bls.w	8006a6a <put_fat+0x21c>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	429a      	cmp	r2, r3
 800686e:	f080 80fc 	bcs.w	8006a6a <put_fat+0x21c>
		switch (fs->fs_type) {
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b03      	cmp	r3, #3
 8006878:	f000 80b6 	beq.w	80069e8 <put_fat+0x19a>
 800687c:	2b03      	cmp	r3, #3
 800687e:	f300 80fd 	bgt.w	8006a7c <put_fat+0x22e>
 8006882:	2b01      	cmp	r3, #1
 8006884:	d003      	beq.n	800688e <put_fat+0x40>
 8006886:	2b02      	cmp	r3, #2
 8006888:	f000 8083 	beq.w	8006992 <put_fat+0x144>
 800688c:	e0f6      	b.n	8006a7c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	085b      	lsrs	r3, r3, #1
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	4413      	add	r3, r2
 800689a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	899b      	ldrh	r3, [r3, #12]
 80068a4:	4619      	mov	r1, r3
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80068ac:	4413      	add	r3, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7ff fe3b 	bl	800652c <move_window>
 80068b6:	4603      	mov	r3, r0
 80068b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068ba:	7ffb      	ldrb	r3, [r7, #31]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f040 80d6 	bne.w	8006a6e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	61ba      	str	r2, [r7, #24]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	8992      	ldrh	r2, [r2, #12]
 80068d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80068d6:	fb00 f202 	mul.w	r2, r0, r2
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	440b      	add	r3, r1
 80068de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00d      	beq.n	8006906 <put_fat+0xb8>
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	b25b      	sxtb	r3, r3
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	b25a      	sxtb	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	b25b      	sxtb	r3, r3
 80068fe:	4313      	orrs	r3, r2
 8006900:	b25b      	sxtb	r3, r3
 8006902:	b2db      	uxtb	r3, r3
 8006904:	e001      	b.n	800690a <put_fat+0xbc>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	899b      	ldrh	r3, [r3, #12]
 800691c:	4619      	mov	r1, r3
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	fbb3 f3f1 	udiv	r3, r3, r1
 8006924:	4413      	add	r3, r2
 8006926:	4619      	mov	r1, r3
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f7ff fdff 	bl	800652c <move_window>
 800692e:	4603      	mov	r3, r0
 8006930:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006932:	7ffb      	ldrb	r3, [r7, #31]
 8006934:	2b00      	cmp	r3, #0
 8006936:	f040 809c 	bne.w	8006a72 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	899b      	ldrh	r3, [r3, #12]
 8006944:	461a      	mov	r2, r3
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	fbb3 f0f2 	udiv	r0, r3, r2
 800694c:	fb00 f202 	mul.w	r2, r0, r2
 8006950:	1a9b      	subs	r3, r3, r2
 8006952:	440b      	add	r3, r1
 8006954:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <put_fat+0x11a>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	091b      	lsrs	r3, r3, #4
 8006964:	b2db      	uxtb	r3, r3
 8006966:	e00e      	b.n	8006986 <put_fat+0x138>
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	b25b      	sxtb	r3, r3
 800696e:	f023 030f 	bic.w	r3, r3, #15
 8006972:	b25a      	sxtb	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	0a1b      	lsrs	r3, r3, #8
 8006978:	b25b      	sxtb	r3, r3
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	b25b      	sxtb	r3, r3
 8006980:	4313      	orrs	r3, r2
 8006982:	b25b      	sxtb	r3, r3
 8006984:	b2db      	uxtb	r3, r3
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	70da      	strb	r2, [r3, #3]
			break;
 8006990:	e074      	b.n	8006a7c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	899b      	ldrh	r3, [r3, #12]
 800699a:	085b      	lsrs	r3, r3, #1
 800699c:	b29b      	uxth	r3, r3
 800699e:	4619      	mov	r1, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80069a6:	4413      	add	r3, r2
 80069a8:	4619      	mov	r1, r3
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fdbe 	bl	800652c <move_window>
 80069b0:	4603      	mov	r3, r0
 80069b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069b4:	7ffb      	ldrb	r3, [r7, #31]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d15d      	bne.n	8006a76 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	8992      	ldrh	r2, [r2, #12]
 80069c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80069cc:	fb00 f202 	mul.w	r2, r0, r2
 80069d0:	1a9b      	subs	r3, r3, r2
 80069d2:	440b      	add	r3, r1
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	b292      	uxth	r2, r2
 80069d8:	4611      	mov	r1, r2
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fb31 	bl	8006042 <st_word>
			fs->wflag = 1;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	70da      	strb	r2, [r3, #3]
			break;
 80069e6:	e049      	b.n	8006a7c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	899b      	ldrh	r3, [r3, #12]
 80069f0:	089b      	lsrs	r3, r3, #2
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	4619      	mov	r1, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80069fc:	4413      	add	r3, r2
 80069fe:	4619      	mov	r1, r3
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f7ff fd93 	bl	800652c <move_window>
 8006a06:	4603      	mov	r3, r0
 8006a08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a0a:	7ffb      	ldrb	r3, [r7, #31]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d134      	bne.n	8006a7a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	8992      	ldrh	r2, [r2, #12]
 8006a24:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a28:	fb00 f202 	mul.w	r2, r0, r2
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	440b      	add	r3, r1
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff fae3 	bl	8005ffc <ld_dword>
 8006a36:	4603      	mov	r3, r0
 8006a38:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a3c:	4323      	orrs	r3, r4
 8006a3e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	8992      	ldrh	r2, [r2, #12]
 8006a4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a52:	fb00 f202 	mul.w	r2, r0, r2
 8006a56:	1a9b      	subs	r3, r3, r2
 8006a58:	440b      	add	r3, r1
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff fb0b 	bl	8006078 <st_dword>
			fs->wflag = 1;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	70da      	strb	r2, [r3, #3]
			break;
 8006a68:	e008      	b.n	8006a7c <put_fat+0x22e>
		}
	}
 8006a6a:	bf00      	nop
 8006a6c:	e006      	b.n	8006a7c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006a6e:	bf00      	nop
 8006a70:	e004      	b.n	8006a7c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006a72:	bf00      	nop
 8006a74:	e002      	b.n	8006a7c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006a76:	bf00      	nop
 8006a78:	e000      	b.n	8006a7c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006a7a:	bf00      	nop
	return res;
 8006a7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3724      	adds	r7, #36	; 0x24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd90      	pop	{r4, r7, pc}

08006a86 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b088      	sub	sp, #32
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d904      	bls.n	8006aac <remove_chain+0x26>
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d301      	bcc.n	8006ab0 <remove_chain+0x2a>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e04b      	b.n	8006b48 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00c      	beq.n	8006ad0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	69b8      	ldr	r0, [r7, #24]
 8006abe:	f7ff fec6 	bl	800684e <put_fat>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ac6:	7ffb      	ldrb	r3, [r7, #31]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <remove_chain+0x4a>
 8006acc:	7ffb      	ldrb	r3, [r7, #31]
 8006ace:	e03b      	b.n	8006b48 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fde7 	bl	80066a6 <get_fat>
 8006ad8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d031      	beq.n	8006b44 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d101      	bne.n	8006aea <remove_chain+0x64>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e02e      	b.n	8006b48 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d101      	bne.n	8006af6 <remove_chain+0x70>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e028      	b.n	8006b48 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006af6:	2200      	movs	r2, #0
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	69b8      	ldr	r0, [r7, #24]
 8006afc:	f7ff fea7 	bl	800684e <put_fat>
 8006b00:	4603      	mov	r3, r0
 8006b02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006b04:	7ffb      	ldrb	r3, [r7, #31]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <remove_chain+0x88>
 8006b0a:	7ffb      	ldrb	r3, [r7, #31]
 8006b0c:	e01c      	b.n	8006b48 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	3b02      	subs	r3, #2
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d20b      	bcs.n	8006b34 <remove_chain+0xae>
			fs->free_clst++;
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	1c5a      	adds	r2, r3, #1
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	791b      	ldrb	r3, [r3, #4]
 8006b2a:	f043 0301 	orr.w	r3, r3, #1
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d3c6      	bcc.n	8006ad0 <remove_chain+0x4a>
 8006b42:	e000      	b.n	8006b46 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006b44:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3720      	adds	r7, #32
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10d      	bne.n	8006b82 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <create_chain+0x2c>
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d31b      	bcc.n	8006bb4 <create_chain+0x64>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	e018      	b.n	8006bb4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff fd8e 	bl	80066a6 <get_fat>
 8006b8a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d801      	bhi.n	8006b96 <create_chain+0x46>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e070      	b.n	8006c78 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d101      	bne.n	8006ba2 <create_chain+0x52>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	e06a      	b.n	8006c78 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d201      	bcs.n	8006bb0 <create_chain+0x60>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	e063      	b.n	8006c78 <create_chain+0x128>
		scl = clst;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d307      	bcc.n	8006bd8 <create_chain+0x88>
				ncl = 2;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d901      	bls.n	8006bd8 <create_chain+0x88>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e04f      	b.n	8006c78 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006bd8:	69f9      	ldr	r1, [r7, #28]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fd63 	bl	80066a6 <get_fat>
 8006be0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00e      	beq.n	8006c06 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d003      	beq.n	8006bf6 <create_chain+0xa6>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf4:	d101      	bne.n	8006bfa <create_chain+0xaa>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	e03e      	b.n	8006c78 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d1da      	bne.n	8006bb8 <create_chain+0x68>
 8006c02:	2300      	movs	r3, #0
 8006c04:	e038      	b.n	8006c78 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006c06:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006c08:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0c:	69f9      	ldr	r1, [r7, #28]
 8006c0e:	6938      	ldr	r0, [r7, #16]
 8006c10:	f7ff fe1d 	bl	800684e <put_fat>
 8006c14:	4603      	mov	r3, r0
 8006c16:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d109      	bne.n	8006c32 <create_chain+0xe2>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d006      	beq.n	8006c32 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006c24:	69fa      	ldr	r2, [r7, #28]
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6938      	ldr	r0, [r7, #16]
 8006c2a:	f7ff fe10 	bl	800684e <put_fat>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d116      	bne.n	8006c66 <create_chain+0x116>
		fs->last_clst = ncl;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	3b02      	subs	r3, #2
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d804      	bhi.n	8006c56 <create_chain+0x106>
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	1e5a      	subs	r2, r3, #1
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	791b      	ldrb	r3, [r3, #4]
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	711a      	strb	r2, [r3, #4]
 8006c64:	e007      	b.n	8006c76 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d102      	bne.n	8006c72 <create_chain+0x122>
 8006c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c70:	e000      	b.n	8006c74 <create_chain+0x124>
 8006c72:	2301      	movs	r3, #1
 8006c74:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006c76:	69fb      	ldr	r3, [r7, #28]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3720      	adds	r7, #32
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	3304      	adds	r3, #4
 8006c96:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	899b      	ldrh	r3, [r3, #12]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	8952      	ldrh	r2, [r2, #10]
 8006ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1d1a      	adds	r2, r3, #4
 8006cb2:	613a      	str	r2, [r7, #16]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <clmt_clust+0x42>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e010      	b.n	8006ce4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d307      	bcc.n	8006cda <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006cd8:	e7e9      	b.n	8006cae <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006cda:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	4413      	add	r3, r2
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d06:	d204      	bcs.n	8006d12 <dir_sdi+0x22>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006d12:	2302      	movs	r3, #2
 8006d14:	e071      	b.n	8006dfa <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <dir_sdi+0x46>
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d902      	bls.n	8006d36 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10c      	bne.n	8006d56 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	8912      	ldrh	r2, [r2, #8]
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d301      	bcc.n	8006d4c <dir_sdi+0x5c>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e056      	b.n	8006dfa <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	61da      	str	r2, [r3, #28]
 8006d54:	e02d      	b.n	8006db2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	895b      	ldrh	r3, [r3, #10]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	899b      	ldrh	r3, [r3, #12]
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
 8006d64:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d66:	e019      	b.n	8006d9c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6979      	ldr	r1, [r7, #20]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff fc9a 	bl	80066a6 <get_fat>
 8006d72:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d101      	bne.n	8006d80 <dir_sdi+0x90>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e03c      	b.n	8006dfa <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d904      	bls.n	8006d90 <dir_sdi+0xa0>
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d301      	bcc.n	8006d94 <dir_sdi+0xa4>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e032      	b.n	8006dfa <dir_sdi+0x10a>
			ofs -= csz;
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d2e1      	bcs.n	8006d68 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006da4:	6979      	ldr	r1, [r7, #20]
 8006da6:	6938      	ldr	r0, [r7, #16]
 8006da8:	f7ff fc5e 	bl	8006668 <clust2sect>
 8006dac:	4602      	mov	r2, r0
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <dir_sdi+0xd4>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e01a      	b.n	8006dfa <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	899b      	ldrh	r3, [r3, #12]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dd4:	441a      	add	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	899b      	ldrh	r3, [r3, #12]
 8006de4:	461a      	mov	r2, r3
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dec:	fb00 f202 	mul.w	r2, r0, r2
 8006df0:	1a9b      	subs	r3, r3, r2
 8006df2:	18ca      	adds	r2, r1, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b086      	sub	sp, #24
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	3320      	adds	r3, #32
 8006e18:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <dir_next+0x28>
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e28:	d301      	bcc.n	8006e2e <dir_next+0x2c>
 8006e2a:	2304      	movs	r3, #4
 8006e2c:	e0bb      	b.n	8006fa6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	899b      	ldrh	r3, [r3, #12]
 8006e32:	461a      	mov	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e3a:	fb01 f202 	mul.w	r2, r1, r2
 8006e3e:	1a9b      	subs	r3, r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f040 809d 	bne.w	8006f80 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10b      	bne.n	8006e70 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	8912      	ldrh	r2, [r2, #8]
 8006e60:	4293      	cmp	r3, r2
 8006e62:	f0c0 808d 	bcc.w	8006f80 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	61da      	str	r2, [r3, #28]
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	e09a      	b.n	8006fa6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	899b      	ldrh	r3, [r3, #12]
 8006e74:	461a      	mov	r2, r3
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	8952      	ldrh	r2, [r2, #10]
 8006e80:	3a01      	subs	r2, #1
 8006e82:	4013      	ands	r3, r2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d17b      	bne.n	8006f80 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f7ff fc08 	bl	80066a6 <get_fat>
 8006e96:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d801      	bhi.n	8006ea2 <dir_next+0xa0>
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e081      	b.n	8006fa6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea8:	d101      	bne.n	8006eae <dir_next+0xac>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e07b      	b.n	8006fa6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d359      	bcc.n	8006f6c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d104      	bne.n	8006ec8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	61da      	str	r2, [r3, #28]
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	e06e      	b.n	8006fa6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	f7ff fe3d 	bl	8006b50 <create_chain>
 8006ed6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <dir_next+0xe0>
 8006ede:	2307      	movs	r3, #7
 8006ee0:	e061      	b.n	8006fa6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <dir_next+0xea>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e05c      	b.n	8006fa6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef2:	d101      	bne.n	8006ef8 <dir_next+0xf6>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e056      	b.n	8006fa6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff fad3 	bl	80064a4 <sync_window>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <dir_next+0x106>
 8006f04:	2301      	movs	r3, #1
 8006f06:	e04e      	b.n	8006fa6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	899b      	ldrh	r3, [r3, #12]
 8006f12:	461a      	mov	r2, r3
 8006f14:	2100      	movs	r1, #0
 8006f16:	f7ff f8fc 	bl	8006112 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	613b      	str	r3, [r7, #16]
 8006f1e:	6979      	ldr	r1, [r7, #20]
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff fba1 	bl	8006668 <clust2sect>
 8006f26:	4602      	mov	r2, r0
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	635a      	str	r2, [r3, #52]	; 0x34
 8006f2c:	e012      	b.n	8006f54 <dir_next+0x152>
						fs->wflag = 1;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f7ff fab5 	bl	80064a4 <sync_window>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <dir_next+0x142>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e030      	b.n	8006fa6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	3301      	adds	r3, #1
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	635a      	str	r2, [r3, #52]	; 0x34
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	895b      	ldrh	r3, [r3, #10]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d3e6      	bcc.n	8006f2e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006f72:	6979      	ldr	r1, [r7, #20]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff fb77 	bl	8006668 <clust2sect>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	899b      	ldrh	r3, [r3, #12]
 8006f90:	461a      	mov	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f98:	fb00 f202 	mul.w	r2, r0, r2
 8006f9c:	1a9b      	subs	r3, r3, r2
 8006f9e:	18ca      	adds	r2, r1, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fe95 	bl	8006cf0 <dir_sdi>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d12b      	bne.n	8007028 <dir_alloc+0x7a>
		n = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff faa6 	bl	800652c <move_window>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d11d      	bne.n	8007026 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2be5      	cmp	r3, #229	; 0xe5
 8006ff2:	d004      	beq.n	8006ffe <dir_alloc+0x50>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d107      	bne.n	800700e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	3301      	adds	r3, #1
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d102      	bne.n	8007012 <dir_alloc+0x64>
 800700c:	e00c      	b.n	8007028 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800700e:	2300      	movs	r3, #0
 8007010:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007012:	2101      	movs	r1, #1
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff fef4 	bl	8006e02 <dir_next>
 800701a:	4603      	mov	r3, r0
 800701c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0d7      	beq.n	8006fd4 <dir_alloc+0x26>
 8007024:	e000      	b.n	8007028 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007026:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	2b04      	cmp	r3, #4
 800702c:	d101      	bne.n	8007032 <dir_alloc+0x84>
 800702e:	2307      	movs	r3, #7
 8007030:	75fb      	strb	r3, [r7, #23]
	return res;
 8007032:	7dfb      	ldrb	r3, [r7, #23]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	331a      	adds	r3, #26
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe ffbe 	bl	8005fcc <ld_word>
 8007050:	4603      	mov	r3, r0
 8007052:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b03      	cmp	r3, #3
 800705a:	d109      	bne.n	8007070 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	3314      	adds	r3, #20
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe ffb3 	bl	8005fcc <ld_word>
 8007066:	4603      	mov	r3, r0
 8007068:	041b      	lsls	r3, r3, #16
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007070:	68fb      	ldr	r3, [r7, #12]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	331a      	adds	r3, #26
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	b292      	uxth	r2, r2
 800708e:	4611      	mov	r1, r2
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe ffd6 	bl	8006042 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b03      	cmp	r3, #3
 800709c:	d109      	bne.n	80070b2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f103 0214 	add.w	r2, r3, #20
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	0c1b      	lsrs	r3, r3, #16
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	4619      	mov	r1, r3
 80070ac:	4610      	mov	r0, r2
 80070ae:	f7fe ffc8 	bl	8006042 <st_word>
	}
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80070bc:	b590      	push	{r4, r7, lr}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	331a      	adds	r3, #26
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe ff7e 	bl	8005fcc <ld_word>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <cmp_lfn+0x1e>
 80070d6:	2300      	movs	r3, #0
 80070d8:	e059      	b.n	800718e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070e2:	1e5a      	subs	r2, r3, #1
 80070e4:	4613      	mov	r3, r2
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80070f0:	2301      	movs	r3, #1
 80070f2:	81fb      	strh	r3, [r7, #14]
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	e033      	b.n	8007162 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80070fa:	4a27      	ldr	r2, [pc, #156]	; (8007198 <cmp_lfn+0xdc>)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	4413      	add	r3, r2
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	4413      	add	r3, r2
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe ff5f 	bl	8005fcc <ld_word>
 800710e:	4603      	mov	r3, r0
 8007110:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007112:	89fb      	ldrh	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01a      	beq.n	800714e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2bfe      	cmp	r3, #254	; 0xfe
 800711c:	d812      	bhi.n	8007144 <cmp_lfn+0x88>
 800711e:	89bb      	ldrh	r3, [r7, #12]
 8007120:	4618      	mov	r0, r3
 8007122:	f002 fca3 	bl	8009a6c <ff_wtoupper>
 8007126:	4603      	mov	r3, r0
 8007128:	461c      	mov	r4, r3
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	617a      	str	r2, [r7, #20]
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	4413      	add	r3, r2
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	4618      	mov	r0, r3
 800713a:	f002 fc97 	bl	8009a6c <ff_wtoupper>
 800713e:	4603      	mov	r3, r0
 8007140:	429c      	cmp	r4, r3
 8007142:	d001      	beq.n	8007148 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007144:	2300      	movs	r3, #0
 8007146:	e022      	b.n	800718e <cmp_lfn+0xd2>
			}
			wc = uc;
 8007148:	89bb      	ldrh	r3, [r7, #12]
 800714a:	81fb      	strh	r3, [r7, #14]
 800714c:	e006      	b.n	800715c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800714e:	89bb      	ldrh	r3, [r7, #12]
 8007150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007154:	4293      	cmp	r3, r2
 8007156:	d001      	beq.n	800715c <cmp_lfn+0xa0>
 8007158:	2300      	movs	r3, #0
 800715a:	e018      	b.n	800718e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	3301      	adds	r3, #1
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2b0c      	cmp	r3, #12
 8007166:	d9c8      	bls.n	80070fa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00b      	beq.n	800718c <cmp_lfn+0xd0>
 8007174:	89fb      	ldrh	r3, [r7, #14]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d008      	beq.n	800718c <cmp_lfn+0xd0>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4413      	add	r3, r2
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <cmp_lfn+0xd0>
 8007188:	2300      	movs	r3, #0
 800718a:	e000      	b.n	800718e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800718c:	2301      	movs	r3, #1
}
 800718e:	4618      	mov	r0, r3
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	bd90      	pop	{r4, r7, pc}
 8007196:	bf00      	nop
 8007198:	0800b5f0 	.word	0x0800b5f0

0800719c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	4611      	mov	r1, r2
 80071a8:	461a      	mov	r2, r3
 80071aa:	460b      	mov	r3, r1
 80071ac:	71fb      	strb	r3, [r7, #7]
 80071ae:	4613      	mov	r3, r2
 80071b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	330d      	adds	r3, #13
 80071b6:	79ba      	ldrb	r2, [r7, #6]
 80071b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	330b      	adds	r3, #11
 80071be:	220f      	movs	r2, #15
 80071c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	330c      	adds	r3, #12
 80071c6:	2200      	movs	r2, #0
 80071c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	331a      	adds	r3, #26
 80071ce:	2100      	movs	r1, #0
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe ff36 	bl	8006042 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	1e5a      	subs	r2, r3, #1
 80071da:	4613      	mov	r3, r2
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	82fb      	strh	r3, [r7, #22]
 80071ea:	2300      	movs	r3, #0
 80071ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80071ee:	8afb      	ldrh	r3, [r7, #22]
 80071f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d007      	beq.n	8007208 <put_lfn+0x6c>
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	61fa      	str	r2, [r7, #28]
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007208:	4a17      	ldr	r2, [pc, #92]	; (8007268 <put_lfn+0xcc>)
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	4413      	add	r3, r2
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	461a      	mov	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4413      	add	r3, r2
 8007216:	8afa      	ldrh	r2, [r7, #22]
 8007218:	4611      	mov	r1, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe ff11 	bl	8006042 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007220:	8afb      	ldrh	r3, [r7, #22]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d102      	bne.n	800722c <put_lfn+0x90>
 8007226:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800722a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	3301      	adds	r3, #1
 8007230:	61bb      	str	r3, [r7, #24]
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b0c      	cmp	r3, #12
 8007236:	d9da      	bls.n	80071ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007238:	8afb      	ldrh	r3, [r7, #22]
 800723a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800723e:	4293      	cmp	r3, r2
 8007240:	d006      	beq.n	8007250 <put_lfn+0xb4>
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	4413      	add	r3, r2
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d103      	bne.n	8007258 <put_lfn+0xbc>
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007256:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	79fa      	ldrb	r2, [r7, #7]
 800725c:	701a      	strb	r2, [r3, #0]
}
 800725e:	bf00      	nop
 8007260:	3720      	adds	r7, #32
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	0800b5f0 	.word	0x0800b5f0

0800726c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08c      	sub	sp, #48	; 0x30
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800727a:	220b      	movs	r2, #11
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7fe ff26 	bl	80060d0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b05      	cmp	r3, #5
 8007288:	d92b      	bls.n	80072e2 <gen_numname+0x76>
		sr = seq;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800728e:	e022      	b.n	80072d6 <gen_numname+0x6a>
			wc = *lfn++;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	1c9a      	adds	r2, r3, #2
 8007294:	607a      	str	r2, [r7, #4]
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800729a:	2300      	movs	r3, #0
 800729c:	62bb      	str	r3, [r7, #40]	; 0x28
 800729e:	e017      	b.n	80072d0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	005a      	lsls	r2, r3, #1
 80072a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	4413      	add	r3, r2
 80072ac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80072ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072b0:	085b      	lsrs	r3, r3, #1
 80072b2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <gen_numname+0x5e>
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80072c4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80072c8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	3301      	adds	r3, #1
 80072ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	2b0f      	cmp	r3, #15
 80072d4:	d9e4      	bls.n	80072a0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1d8      	bne.n	8007290 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80072e2:	2307      	movs	r3, #7
 80072e4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	f003 030f 	and.w	r3, r3, #15
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	3330      	adds	r3, #48	; 0x30
 80072f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80072f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072fa:	2b39      	cmp	r3, #57	; 0x39
 80072fc:	d904      	bls.n	8007308 <gen_numname+0x9c>
 80072fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007302:	3307      	adds	r3, #7
 8007304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	1e5a      	subs	r2, r3, #1
 800730c:	62ba      	str	r2, [r7, #40]	; 0x28
 800730e:	3330      	adds	r3, #48	; 0x30
 8007310:	443b      	add	r3, r7
 8007312:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007316:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	091b      	lsrs	r3, r3, #4
 800731e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1df      	bne.n	80072e6 <gen_numname+0x7a>
	ns[i] = '~';
 8007326:	f107 0214 	add.w	r2, r7, #20
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	4413      	add	r3, r2
 800732e:	227e      	movs	r2, #126	; 0x7e
 8007330:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007332:	2300      	movs	r3, #0
 8007334:	627b      	str	r3, [r7, #36]	; 0x24
 8007336:	e002      	b.n	800733e <gen_numname+0xd2>
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	3301      	adds	r3, #1
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
 800733e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	429a      	cmp	r2, r3
 8007344:	d205      	bcs.n	8007352 <gen_numname+0xe6>
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	4413      	add	r3, r2
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b20      	cmp	r3, #32
 8007350:	d1f2      	bne.n	8007338 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	2b07      	cmp	r3, #7
 8007356:	d807      	bhi.n	8007368 <gen_numname+0xfc>
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	62ba      	str	r2, [r7, #40]	; 0x28
 800735e:	3330      	adds	r3, #48	; 0x30
 8007360:	443b      	add	r3, r7
 8007362:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007366:	e000      	b.n	800736a <gen_numname+0xfe>
 8007368:	2120      	movs	r1, #32
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	627a      	str	r2, [r7, #36]	; 0x24
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	460a      	mov	r2, r1
 8007376:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	2b07      	cmp	r3, #7
 800737c:	d9e9      	bls.n	8007352 <gen_numname+0xe6>
}
 800737e:	bf00      	nop
 8007380:	bf00      	nop
 8007382:	3730      	adds	r7, #48	; 0x30
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007394:	230b      	movs	r3, #11
 8007396:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	b2da      	uxtb	r2, r3
 800739c:	0852      	lsrs	r2, r2, #1
 800739e:	01db      	lsls	r3, r3, #7
 80073a0:	4313      	orrs	r3, r2
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	1c59      	adds	r1, r3, #1
 80073a8:	6079      	str	r1, [r7, #4]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	4413      	add	r3, r2
 80073ae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1ed      	bne.n	8007398 <sum_sfn+0x10>
	return sum;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b086      	sub	sp, #24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80073d8:	2100      	movs	r1, #0
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff fc88 	bl	8006cf0 <dir_sdi>
 80073e0:	4603      	mov	r3, r0
 80073e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <dir_find+0x24>
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	e0a9      	b.n	8007542 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80073ee:	23ff      	movs	r3, #255	; 0xff
 80073f0:	753b      	strb	r3, [r7, #20]
 80073f2:	7d3b      	ldrb	r3, [r7, #20]
 80073f4:	757b      	strb	r3, [r7, #21]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f04f 32ff 	mov.w	r2, #4294967295
 80073fc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	4619      	mov	r1, r3
 8007404:	6938      	ldr	r0, [r7, #16]
 8007406:	f7ff f891 	bl	800652c <move_window>
 800740a:	4603      	mov	r3, r0
 800740c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f040 8090 	bne.w	8007536 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800741e:	7dbb      	ldrb	r3, [r7, #22]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <dir_find+0x60>
 8007424:	2304      	movs	r3, #4
 8007426:	75fb      	strb	r3, [r7, #23]
 8007428:	e08a      	b.n	8007540 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	330b      	adds	r3, #11
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007436:	73fb      	strb	r3, [r7, #15]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	7bfa      	ldrb	r2, [r7, #15]
 800743c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800743e:	7dbb      	ldrb	r3, [r7, #22]
 8007440:	2be5      	cmp	r3, #229	; 0xe5
 8007442:	d007      	beq.n	8007454 <dir_find+0x8a>
 8007444:	7bfb      	ldrb	r3, [r7, #15]
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <dir_find+0x98>
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	2b0f      	cmp	r3, #15
 8007452:	d006      	beq.n	8007462 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007454:	23ff      	movs	r3, #255	; 0xff
 8007456:	757b      	strb	r3, [r7, #21]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f04f 32ff 	mov.w	r2, #4294967295
 800745e:	631a      	str	r2, [r3, #48]	; 0x30
 8007460:	e05e      	b.n	8007520 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	2b0f      	cmp	r3, #15
 8007466:	d136      	bne.n	80074d6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b00      	cmp	r3, #0
 8007474:	d154      	bne.n	8007520 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007476:	7dbb      	ldrb	r3, [r7, #22]
 8007478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00d      	beq.n	800749c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	7b5b      	ldrb	r3, [r3, #13]
 8007486:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007488:	7dbb      	ldrb	r3, [r7, #22]
 800748a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800748e:	75bb      	strb	r3, [r7, #22]
 8007490:	7dbb      	ldrb	r3, [r7, #22]
 8007492:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	695a      	ldr	r2, [r3, #20]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800749c:	7dba      	ldrb	r2, [r7, #22]
 800749e:	7d7b      	ldrb	r3, [r7, #21]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d115      	bne.n	80074d0 <dir_find+0x106>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	330d      	adds	r3, #13
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	7d3a      	ldrb	r2, [r7, #20]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d10e      	bne.n	80074d0 <dir_find+0x106>
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	691a      	ldr	r2, [r3, #16]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	4619      	mov	r1, r3
 80074bc:	4610      	mov	r0, r2
 80074be:	f7ff fdfd 	bl	80070bc <cmp_lfn>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <dir_find+0x106>
 80074c8:	7d7b      	ldrb	r3, [r7, #21]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	e000      	b.n	80074d2 <dir_find+0x108>
 80074d0:	23ff      	movs	r3, #255	; 0xff
 80074d2:	757b      	strb	r3, [r7, #21]
 80074d4:	e024      	b.n	8007520 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80074d6:	7d7b      	ldrb	r3, [r7, #21]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d109      	bne.n	80074f0 <dir_find+0x126>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff ff51 	bl	8007388 <sum_sfn>
 80074e6:	4603      	mov	r3, r0
 80074e8:	461a      	mov	r2, r3
 80074ea:	7d3b      	ldrb	r3, [r7, #20]
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d024      	beq.n	800753a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <dir_find+0x14a>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a18      	ldr	r0, [r3, #32]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3324      	adds	r3, #36	; 0x24
 8007506:	220b      	movs	r2, #11
 8007508:	4619      	mov	r1, r3
 800750a:	f7fe fe1d 	bl	8006148 <mem_cmp>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d014      	beq.n	800753e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007514:	23ff      	movs	r3, #255	; 0xff
 8007516:	757b      	strb	r3, [r7, #21]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f04f 32ff 	mov.w	r2, #4294967295
 800751e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007520:	2100      	movs	r1, #0
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff fc6d 	bl	8006e02 <dir_next>
 8007528:	4603      	mov	r3, r0
 800752a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f43f af65 	beq.w	80073fe <dir_find+0x34>
 8007534:	e004      	b.n	8007540 <dir_find+0x176>
		if (res != FR_OK) break;
 8007536:	bf00      	nop
 8007538:	e002      	b.n	8007540 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800753a:	bf00      	nop
 800753c:	e000      	b.n	8007540 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800753e:	bf00      	nop

	return res;
 8007540:	7dfb      	ldrb	r3, [r7, #23]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08c      	sub	sp, #48	; 0x30
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007560:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <dir_register+0x20>
 8007568:	2306      	movs	r3, #6
 800756a:	e0e0      	b.n	800772e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800756c:	2300      	movs	r3, #0
 800756e:	627b      	str	r3, [r7, #36]	; 0x24
 8007570:	e002      	b.n	8007578 <dir_register+0x2c>
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	3301      	adds	r3, #1
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	4413      	add	r3, r2
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1f4      	bne.n	8007572 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800758e:	f107 030c 	add.w	r3, r7, #12
 8007592:	220c      	movs	r2, #12
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe fd9b 	bl	80060d0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d032      	beq.n	800760a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2240      	movs	r2, #64	; 0x40
 80075a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80075ac:	2301      	movs	r3, #1
 80075ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80075b0:	e016      	b.n	80075e0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	f107 010c 	add.w	r1, r7, #12
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	f7ff fe53 	bl	800726c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7ff feff 	bl	80073ca <dir_find>
 80075cc:	4603      	mov	r3, r0
 80075ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80075d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	3301      	adds	r3, #1
 80075de:	62bb      	str	r3, [r7, #40]	; 0x28
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	2b63      	cmp	r3, #99	; 0x63
 80075e4:	d9e5      	bls.n	80075b2 <dir_register+0x66>
 80075e6:	e000      	b.n	80075ea <dir_register+0x9e>
			if (res != FR_OK) break;
 80075e8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	2b64      	cmp	r3, #100	; 0x64
 80075ee:	d101      	bne.n	80075f4 <dir_register+0xa8>
 80075f0:	2307      	movs	r3, #7
 80075f2:	e09c      	b.n	800772e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80075f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d002      	beq.n	8007602 <dir_register+0xb6>
 80075fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007600:	e095      	b.n	800772e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007602:	7dfa      	ldrb	r2, [r7, #23]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800760a:	7dfb      	ldrb	r3, [r7, #23]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <dir_register+0xd8>
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	330c      	adds	r3, #12
 8007618:	4a47      	ldr	r2, [pc, #284]	; (8007738 <dir_register+0x1ec>)
 800761a:	fba2 2303 	umull	r2, r3, r2, r3
 800761e:	089b      	lsrs	r3, r3, #2
 8007620:	3301      	adds	r3, #1
 8007622:	e000      	b.n	8007626 <dir_register+0xda>
 8007624:	2301      	movs	r3, #1
 8007626:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007628:	6a39      	ldr	r1, [r7, #32]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff fcbf 	bl	8006fae <dir_alloc>
 8007630:	4603      	mov	r3, r0
 8007632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800763a:	2b00      	cmp	r3, #0
 800763c:	d148      	bne.n	80076d0 <dir_register+0x184>
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	3b01      	subs	r3, #1
 8007642:	623b      	str	r3, [r7, #32]
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d042      	beq.n	80076d0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	015b      	lsls	r3, r3, #5
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7ff fb4a 	bl	8006cf0 <dir_sdi>
 800765c:	4603      	mov	r3, r0
 800765e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007666:	2b00      	cmp	r3, #0
 8007668:	d132      	bne.n	80076d0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3324      	adds	r3, #36	; 0x24
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff fe8a 	bl	8007388 <sum_sfn>
 8007674:	4603      	mov	r3, r0
 8007676:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	4619      	mov	r1, r3
 800767e:	69f8      	ldr	r0, [r7, #28]
 8007680:	f7fe ff54 	bl	800652c <move_window>
 8007684:	4603      	mov	r3, r0
 8007686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800768a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800768e:	2b00      	cmp	r3, #0
 8007690:	d11d      	bne.n	80076ce <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	6918      	ldr	r0, [r3, #16]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a19      	ldr	r1, [r3, #32]
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	b2da      	uxtb	r2, r3
 800769e:	7efb      	ldrb	r3, [r7, #27]
 80076a0:	f7ff fd7c 	bl	800719c <put_lfn>
				fs->wflag = 1;
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	2201      	movs	r2, #1
 80076a8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80076aa:	2100      	movs	r1, #0
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff fba8 	bl	8006e02 <dir_next>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80076b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d107      	bne.n	80076d0 <dir_register+0x184>
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	623b      	str	r3, [r7, #32]
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1d5      	bne.n	8007678 <dir_register+0x12c>
 80076cc:	e000      	b.n	80076d0 <dir_register+0x184>
				if (res != FR_OK) break;
 80076ce:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80076d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d128      	bne.n	800772a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	4619      	mov	r1, r3
 80076de:	69f8      	ldr	r0, [r7, #28]
 80076e0:	f7fe ff24 	bl	800652c <move_window>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80076ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d11b      	bne.n	800772a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	2220      	movs	r2, #32
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fd09 	bl	8006112 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a18      	ldr	r0, [r3, #32]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3324      	adds	r3, #36	; 0x24
 8007708:	220b      	movs	r2, #11
 800770a:	4619      	mov	r1, r3
 800770c:	f7fe fce0 	bl	80060d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	330c      	adds	r3, #12
 800771c:	f002 0218 	and.w	r2, r2, #24
 8007720:	b2d2      	uxtb	r2, r2
 8007722:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	2201      	movs	r2, #1
 8007728:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800772a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800772e:	4618      	mov	r0, r3
 8007730:	3730      	adds	r7, #48	; 0x30
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	4ec4ec4f 	.word	0x4ec4ec4f

0800773c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	613b      	str	r3, [r7, #16]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	61ba      	str	r2, [r7, #24]
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4413      	add	r3, r2
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800776a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800776c:	2b1f      	cmp	r3, #31
 800776e:	d940      	bls.n	80077f2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007772:	2b2f      	cmp	r3, #47	; 0x2f
 8007774:	d006      	beq.n	8007784 <create_name+0x48>
 8007776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007778:	2b5c      	cmp	r3, #92	; 0x5c
 800777a:	d110      	bne.n	800779e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800777c:	e002      	b.n	8007784 <create_name+0x48>
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	3301      	adds	r3, #1
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	4413      	add	r3, r2
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b2f      	cmp	r3, #47	; 0x2f
 800778e:	d0f6      	beq.n	800777e <create_name+0x42>
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	4413      	add	r3, r2
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b5c      	cmp	r3, #92	; 0x5c
 800779a:	d0f0      	beq.n	800777e <create_name+0x42>
			break;
 800779c:	e02a      	b.n	80077f4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2bfe      	cmp	r3, #254	; 0xfe
 80077a2:	d901      	bls.n	80077a8 <create_name+0x6c>
 80077a4:	2306      	movs	r3, #6
 80077a6:	e17d      	b.n	8007aa4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80077a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80077ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077b0:	2101      	movs	r1, #1
 80077b2:	4618      	mov	r0, r3
 80077b4:	f002 f91e 	bl	80099f4 <ff_convert>
 80077b8:	4603      	mov	r3, r0
 80077ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80077bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <create_name+0x8a>
 80077c2:	2306      	movs	r3, #6
 80077c4:	e16e      	b.n	8007aa4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80077c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077c8:	2b7f      	cmp	r3, #127	; 0x7f
 80077ca:	d809      	bhi.n	80077e0 <create_name+0xa4>
 80077cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077ce:	4619      	mov	r1, r3
 80077d0:	488d      	ldr	r0, [pc, #564]	; (8007a08 <create_name+0x2cc>)
 80077d2:	f7fe fce0 	bl	8006196 <chk_chr>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <create_name+0xa4>
 80077dc:	2306      	movs	r3, #6
 80077de:	e161      	b.n	8007aa4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	617a      	str	r2, [r7, #20]
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4413      	add	r3, r2
 80077ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80077ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80077f0:	e7b4      	b.n	800775c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80077f2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	441a      	add	r2, r3
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80077fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007800:	2b1f      	cmp	r3, #31
 8007802:	d801      	bhi.n	8007808 <create_name+0xcc>
 8007804:	2304      	movs	r3, #4
 8007806:	e000      	b.n	800780a <create_name+0xce>
 8007808:	2300      	movs	r3, #0
 800780a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800780e:	e011      	b.n	8007834 <create_name+0xf8>
		w = lfn[di - 1];
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007816:	3b01      	subs	r3, #1
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007824:	2b20      	cmp	r3, #32
 8007826:	d002      	beq.n	800782e <create_name+0xf2>
 8007828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800782a:	2b2e      	cmp	r3, #46	; 0x2e
 800782c:	d106      	bne.n	800783c <create_name+0x100>
		di--;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	3b01      	subs	r3, #1
 8007832:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1ea      	bne.n	8007810 <create_name+0xd4>
 800783a:	e000      	b.n	800783e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800783c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	2200      	movs	r2, #0
 8007848:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <create_name+0x118>
 8007850:	2306      	movs	r3, #6
 8007852:	e127      	b.n	8007aa4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3324      	adds	r3, #36	; 0x24
 8007858:	220b      	movs	r2, #11
 800785a:	2120      	movs	r1, #32
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe fc58 	bl	8006112 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007862:	2300      	movs	r3, #0
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	e002      	b.n	800786e <create_name+0x132>
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	3301      	adds	r3, #1
 800786c:	61bb      	str	r3, [r7, #24]
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	4413      	add	r3, r2
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	2b20      	cmp	r3, #32
 800787a:	d0f5      	beq.n	8007868 <create_name+0x12c>
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4413      	add	r3, r2
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	2b2e      	cmp	r3, #46	; 0x2e
 8007888:	d0ee      	beq.n	8007868 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d009      	beq.n	80078a4 <create_name+0x168>
 8007890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007894:	f043 0303 	orr.w	r3, r3, #3
 8007898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800789c:	e002      	b.n	80078a4 <create_name+0x168>
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d009      	beq.n	80078be <create_name+0x182>
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80078b0:	3b01      	subs	r3, #1
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	2b2e      	cmp	r3, #46	; 0x2e
 80078bc:	d1ef      	bne.n	800789e <create_name+0x162>

	i = b = 0; ni = 8;
 80078be:	2300      	movs	r3, #0
 80078c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80078c4:	2300      	movs	r3, #0
 80078c6:	623b      	str	r3, [r7, #32]
 80078c8:	2308      	movs	r3, #8
 80078ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	61ba      	str	r2, [r7, #24]
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80078dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 8090 	beq.w	8007a04 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80078e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078e6:	2b20      	cmp	r3, #32
 80078e8:	d006      	beq.n	80078f8 <create_name+0x1bc>
 80078ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078ec:	2b2e      	cmp	r3, #46	; 0x2e
 80078ee:	d10a      	bne.n	8007906 <create_name+0x1ca>
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d006      	beq.n	8007906 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80078f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078fc:	f043 0303 	orr.w	r3, r3, #3
 8007900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007904:	e07d      	b.n	8007a02 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007906:	6a3a      	ldr	r2, [r7, #32]
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	429a      	cmp	r2, r3
 800790c:	d203      	bcs.n	8007916 <create_name+0x1da>
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	429a      	cmp	r2, r3
 8007914:	d123      	bne.n	800795e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	2b0b      	cmp	r3, #11
 800791a:	d106      	bne.n	800792a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800791c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007920:	f043 0303 	orr.w	r3, r3, #3
 8007924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007928:	e075      	b.n	8007a16 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	429a      	cmp	r2, r3
 8007930:	d005      	beq.n	800793e <create_name+0x202>
 8007932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007936:	f043 0303 	orr.w	r3, r3, #3
 800793a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	429a      	cmp	r2, r3
 8007944:	d866      	bhi.n	8007a14 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	2308      	movs	r3, #8
 800794c:	623b      	str	r3, [r7, #32]
 800794e:	230b      	movs	r3, #11
 8007950:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800795c:	e051      	b.n	8007a02 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800795e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007960:	2b7f      	cmp	r3, #127	; 0x7f
 8007962:	d914      	bls.n	800798e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007966:	2100      	movs	r1, #0
 8007968:	4618      	mov	r0, r3
 800796a:	f002 f843 	bl	80099f4 <ff_convert>
 800796e:	4603      	mov	r3, r0
 8007970:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	d004      	beq.n	8007982 <create_name+0x246>
 8007978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800797a:	3b80      	subs	r3, #128	; 0x80
 800797c:	4a23      	ldr	r2, [pc, #140]	; (8007a0c <create_name+0x2d0>)
 800797e:	5cd3      	ldrb	r3, [r2, r3]
 8007980:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007986:	f043 0302 	orr.w	r3, r3, #2
 800798a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800798e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <create_name+0x268>
 8007994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007996:	4619      	mov	r1, r3
 8007998:	481d      	ldr	r0, [pc, #116]	; (8007a10 <create_name+0x2d4>)
 800799a:	f7fe fbfc 	bl	8006196 <chk_chr>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80079a4:	235f      	movs	r3, #95	; 0x5f
 80079a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80079a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079ac:	f043 0303 	orr.w	r3, r3, #3
 80079b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079b4:	e01b      	b.n	80079ee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80079b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079b8:	2b40      	cmp	r3, #64	; 0x40
 80079ba:	d909      	bls.n	80079d0 <create_name+0x294>
 80079bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079be:	2b5a      	cmp	r3, #90	; 0x5a
 80079c0:	d806      	bhi.n	80079d0 <create_name+0x294>
					b |= 2;
 80079c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079c6:	f043 0302 	orr.w	r3, r3, #2
 80079ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80079ce:	e00e      	b.n	80079ee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80079d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079d2:	2b60      	cmp	r3, #96	; 0x60
 80079d4:	d90b      	bls.n	80079ee <create_name+0x2b2>
 80079d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079d8:	2b7a      	cmp	r3, #122	; 0x7a
 80079da:	d808      	bhi.n	80079ee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80079dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079e0:	f043 0301 	orr.w	r3, r3, #1
 80079e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80079e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079ea:	3b20      	subs	r3, #32
 80079ec:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	623a      	str	r2, [r7, #32]
 80079f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079f6:	b2d1      	uxtb	r1, r2
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	4413      	add	r3, r2
 80079fc:	460a      	mov	r2, r1
 80079fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007a02:	e763      	b.n	80078cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007a04:	bf00      	nop
 8007a06:	e006      	b.n	8007a16 <create_name+0x2da>
 8007a08:	0800b508 	.word	0x0800b508
 8007a0c:	0800b570 	.word	0x0800b570
 8007a10:	0800b514 	.word	0x0800b514
			if (si > di) break;			/* No extension */
 8007a14:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a1c:	2be5      	cmp	r3, #229	; 0xe5
 8007a1e:	d103      	bne.n	8007a28 <create_name+0x2ec>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2205      	movs	r2, #5
 8007a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b08      	cmp	r3, #8
 8007a2c:	d104      	bne.n	8007a38 <create_name+0x2fc>
 8007a2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007a38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a3c:	f003 030c 	and.w	r3, r3, #12
 8007a40:	2b0c      	cmp	r3, #12
 8007a42:	d005      	beq.n	8007a50 <create_name+0x314>
 8007a44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d105      	bne.n	8007a5c <create_name+0x320>
 8007a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a54:	f043 0302 	orr.w	r3, r3, #2
 8007a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d117      	bne.n	8007a98 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007a68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a6c:	f003 0303 	and.w	r3, r3, #3
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d105      	bne.n	8007a80 <create_name+0x344>
 8007a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a78:	f043 0310 	orr.w	r3, r3, #16
 8007a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007a80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a84:	f003 030c 	and.w	r3, r3, #12
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d105      	bne.n	8007a98 <create_name+0x35c>
 8007a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a90:	f043 0308 	orr.w	r3, r3, #8
 8007a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007aa2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3728      	adds	r7, #40	; 0x28
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007ac0:	e002      	b.n	8007ac8 <follow_path+0x1c>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b2f      	cmp	r3, #47	; 0x2f
 8007ace:	d0f8      	beq.n	8007ac2 <follow_path+0x16>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	2b5c      	cmp	r3, #92	; 0x5c
 8007ad6:	d0f4      	beq.n	8007ac2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	2200      	movs	r2, #0
 8007adc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b1f      	cmp	r3, #31
 8007ae4:	d80a      	bhi.n	8007afc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2280      	movs	r2, #128	; 0x80
 8007aea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007aee:	2100      	movs	r1, #0
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff f8fd 	bl	8006cf0 <dir_sdi>
 8007af6:	4603      	mov	r3, r0
 8007af8:	75fb      	strb	r3, [r7, #23]
 8007afa:	e048      	b.n	8007b8e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007afc:	463b      	mov	r3, r7
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff fe1b 	bl	800773c <create_name>
 8007b06:	4603      	mov	r3, r0
 8007b08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007b0a:	7dfb      	ldrb	r3, [r7, #23]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d139      	bne.n	8007b84 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff fc5a 	bl	80073ca <dir_find>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007b20:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00a      	beq.n	8007b3e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d12c      	bne.n	8007b88 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007b2e:	7afb      	ldrb	r3, [r7, #11]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d127      	bne.n	8007b88 <follow_path+0xdc>
 8007b38:	2305      	movs	r3, #5
 8007b3a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007b3c:	e024      	b.n	8007b88 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b3e:	7afb      	ldrb	r3, [r7, #11]
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d121      	bne.n	8007b8c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	799b      	ldrb	r3, [r3, #6]
 8007b4c:	f003 0310 	and.w	r3, r3, #16
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d102      	bne.n	8007b5a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007b54:	2305      	movs	r3, #5
 8007b56:	75fb      	strb	r3, [r7, #23]
 8007b58:	e019      	b.n	8007b8e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	8992      	ldrh	r2, [r2, #12]
 8007b68:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b6c:	fb00 f202 	mul.w	r2, r0, r2
 8007b70:	1a9b      	subs	r3, r3, r2
 8007b72:	440b      	add	r3, r1
 8007b74:	4619      	mov	r1, r3
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7ff fa60 	bl	800703c <ld_clust>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b82:	e7bb      	b.n	8007afc <follow_path+0x50>
			if (res != FR_OK) break;
 8007b84:	bf00      	nop
 8007b86:	e002      	b.n	8007b8e <follow_path+0xe2>
				break;
 8007b88:	bf00      	nop
 8007b8a:	e000      	b.n	8007b8e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b8c:	bf00      	nop
			}
		}
	}

	return res;
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d031      	beq.n	8007c12 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	e002      	b.n	8007bbc <get_ldnumber+0x24>
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b1f      	cmp	r3, #31
 8007bc2:	d903      	bls.n	8007bcc <get_ldnumber+0x34>
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b3a      	cmp	r3, #58	; 0x3a
 8007bca:	d1f4      	bne.n	8007bb6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b3a      	cmp	r3, #58	; 0x3a
 8007bd2:	d11c      	bne.n	8007c0e <get_ldnumber+0x76>
			tp = *path;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	60fa      	str	r2, [r7, #12]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	3b30      	subs	r3, #48	; 0x30
 8007be4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2b09      	cmp	r3, #9
 8007bea:	d80e      	bhi.n	8007c0a <get_ldnumber+0x72>
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d10a      	bne.n	8007c0a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d107      	bne.n	8007c0a <get_ldnumber+0x72>
					vol = (int)i;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	3301      	adds	r3, #1
 8007c02:	617b      	str	r3, [r7, #20]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	e002      	b.n	8007c14 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007c0e:	2300      	movs	r3, #0
 8007c10:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007c12:	693b      	ldr	r3, [r7, #16]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	70da      	strb	r2, [r3, #3]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f04f 32ff 	mov.w	r2, #4294967295
 8007c36:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7fe fc76 	bl	800652c <move_window>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <check_fs+0x2a>
 8007c46:	2304      	movs	r3, #4
 8007c48:	e038      	b.n	8007cbc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3338      	adds	r3, #56	; 0x38
 8007c4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fe f9ba 	bl	8005fcc <ld_word>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d001      	beq.n	8007c68 <check_fs+0x48>
 8007c64:	2303      	movs	r3, #3
 8007c66:	e029      	b.n	8007cbc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c6e:	2be9      	cmp	r3, #233	; 0xe9
 8007c70:	d009      	beq.n	8007c86 <check_fs+0x66>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c78:	2beb      	cmp	r3, #235	; 0xeb
 8007c7a:	d11e      	bne.n	8007cba <check_fs+0x9a>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c82:	2b90      	cmp	r3, #144	; 0x90
 8007c84:	d119      	bne.n	8007cba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3338      	adds	r3, #56	; 0x38
 8007c8a:	3336      	adds	r3, #54	; 0x36
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe f9b5 	bl	8005ffc <ld_dword>
 8007c92:	4603      	mov	r3, r0
 8007c94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c98:	4a0a      	ldr	r2, [pc, #40]	; (8007cc4 <check_fs+0xa4>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d101      	bne.n	8007ca2 <check_fs+0x82>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e00c      	b.n	8007cbc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3338      	adds	r3, #56	; 0x38
 8007ca6:	3352      	adds	r3, #82	; 0x52
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe f9a7 	bl	8005ffc <ld_dword>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	4a05      	ldr	r2, [pc, #20]	; (8007cc8 <check_fs+0xa8>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d101      	bne.n	8007cba <check_fs+0x9a>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	e000      	b.n	8007cbc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007cba:	2302      	movs	r3, #2
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	00544146 	.word	0x00544146
 8007cc8:	33544146 	.word	0x33544146

08007ccc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b096      	sub	sp, #88	; 0x58
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff ff59 	bl	8007b98 <get_ldnumber>
 8007ce6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	da01      	bge.n	8007cf2 <find_volume+0x26>
 8007cee:	230b      	movs	r3, #11
 8007cf0:	e265      	b.n	80081be <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007cf2:	4a9f      	ldr	r2, [pc, #636]	; (8007f70 <find_volume+0x2a4>)
 8007cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cfa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <find_volume+0x3a>
 8007d02:	230c      	movs	r3, #12
 8007d04:	e25b      	b.n	80081be <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	f023 0301 	bic.w	r3, r3, #1
 8007d12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01a      	beq.n	8007d52 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	785b      	ldrb	r3, [r3, #1]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fe f8b5 	bl	8005e90 <disk_status>
 8007d26:	4603      	mov	r3, r0
 8007d28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007d2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10c      	bne.n	8007d52 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d007      	beq.n	8007d4e <find_volume+0x82>
 8007d3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007d4a:	230a      	movs	r3, #10
 8007d4c:	e237      	b.n	80081be <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e235      	b.n	80081be <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	2200      	movs	r2, #0
 8007d56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	785b      	ldrb	r3, [r3, #1]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fe f8ad 	bl	8005ec4 <disk_initialize>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007d70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e21e      	b.n	80081be <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d007      	beq.n	8007d96 <find_volume+0xca>
 8007d86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007d92:	230a      	movs	r3, #10
 8007d94:	e213      	b.n	80081be <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	7858      	ldrb	r0, [r3, #1]
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9c:	330c      	adds	r3, #12
 8007d9e:	461a      	mov	r2, r3
 8007da0:	2102      	movs	r1, #2
 8007da2:	f7fe f8f5 	bl	8005f90 <disk_ioctl>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <find_volume+0xe4>
 8007dac:	2301      	movs	r3, #1
 8007dae:	e206      	b.n	80081be <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db2:	899b      	ldrh	r3, [r3, #12]
 8007db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db8:	d80d      	bhi.n	8007dd6 <find_volume+0x10a>
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	899b      	ldrh	r3, [r3, #12]
 8007dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc2:	d308      	bcc.n	8007dd6 <find_volume+0x10a>
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	899b      	ldrh	r3, [r3, #12]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	899b      	ldrh	r3, [r3, #12]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <find_volume+0x10e>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e1f1      	b.n	80081be <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007dde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007de0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007de2:	f7ff ff1d 	bl	8007c20 <check_fs>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d149      	bne.n	8007e88 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007df4:	2300      	movs	r3, #0
 8007df6:	643b      	str	r3, [r7, #64]	; 0x40
 8007df8:	e01e      	b.n	8007e38 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007e08:	4413      	add	r3, r2
 8007e0a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	3304      	adds	r3, #4
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d006      	beq.n	8007e24 <find_volume+0x158>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	3308      	adds	r3, #8
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe f8ee 	bl	8005ffc <ld_dword>
 8007e20:	4602      	mov	r2, r0
 8007e22:	e000      	b.n	8007e26 <find_volume+0x15a>
 8007e24:	2200      	movs	r2, #0
 8007e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	3358      	adds	r3, #88	; 0x58
 8007e2c:	443b      	add	r3, r7
 8007e2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e34:	3301      	adds	r3, #1
 8007e36:	643b      	str	r3, [r7, #64]	; 0x40
 8007e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d9dd      	bls.n	8007dfa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007e3e:	2300      	movs	r3, #0
 8007e40:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <find_volume+0x182>
 8007e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	3358      	adds	r3, #88	; 0x58
 8007e54:	443b      	add	r3, r7
 8007e56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007e5a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <find_volume+0x1a2>
 8007e62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e66:	f7ff fedb 	bl	8007c20 <check_fs>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	e000      	b.n	8007e70 <find_volume+0x1a4>
 8007e6e:	2303      	movs	r3, #3
 8007e70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007e74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d905      	bls.n	8007e88 <find_volume+0x1bc>
 8007e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e7e:	3301      	adds	r3, #1
 8007e80:	643b      	str	r3, [r7, #64]	; 0x40
 8007e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d9e2      	bls.n	8007e4e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007e88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d101      	bne.n	8007e94 <find_volume+0x1c8>
 8007e90:	2301      	movs	r3, #1
 8007e92:	e194      	b.n	80081be <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d901      	bls.n	8007ea0 <find_volume+0x1d4>
 8007e9c:	230d      	movs	r3, #13
 8007e9e:	e18e      	b.n	80081be <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea2:	3338      	adds	r3, #56	; 0x38
 8007ea4:	330b      	adds	r3, #11
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe f890 	bl	8005fcc <ld_word>
 8007eac:	4603      	mov	r3, r0
 8007eae:	461a      	mov	r2, r3
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb2:	899b      	ldrh	r3, [r3, #12]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d001      	beq.n	8007ebc <find_volume+0x1f0>
 8007eb8:	230d      	movs	r3, #13
 8007eba:	e180      	b.n	80081be <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebe:	3338      	adds	r3, #56	; 0x38
 8007ec0:	3316      	adds	r3, #22
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe f882 	bl	8005fcc <ld_word>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <find_volume+0x214>
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed4:	3338      	adds	r3, #56	; 0x38
 8007ed6:	3324      	adds	r3, #36	; 0x24
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe f88f 	bl	8005ffc <ld_dword>
 8007ede:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ee4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	789b      	ldrb	r3, [r3, #2]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d005      	beq.n	8007f04 <find_volume+0x238>
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efa:	789b      	ldrb	r3, [r3, #2]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d001      	beq.n	8007f04 <find_volume+0x238>
 8007f00:	230d      	movs	r3, #13
 8007f02:	e15c      	b.n	80081be <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	789b      	ldrb	r3, [r3, #2]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f0c:	fb02 f303 	mul.w	r3, r2, r3
 8007f10:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	895b      	ldrh	r3, [r3, #10]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d008      	beq.n	8007f38 <find_volume+0x26c>
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	895b      	ldrh	r3, [r3, #10]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	895b      	ldrh	r3, [r3, #10]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <find_volume+0x270>
 8007f38:	230d      	movs	r3, #13
 8007f3a:	e140      	b.n	80081be <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3e:	3338      	adds	r3, #56	; 0x38
 8007f40:	3311      	adds	r3, #17
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe f842 	bl	8005fcc <ld_word>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	891b      	ldrh	r3, [r3, #8]
 8007f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f56:	8992      	ldrh	r2, [r2, #12]
 8007f58:	0952      	lsrs	r2, r2, #5
 8007f5a:	b292      	uxth	r2, r2
 8007f5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f60:	fb01 f202 	mul.w	r2, r1, r2
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <find_volume+0x2a8>
 8007f6c:	230d      	movs	r3, #13
 8007f6e:	e126      	b.n	80081be <find_volume+0x4f2>
 8007f70:	20002700 	.word	0x20002700

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	3338      	adds	r3, #56	; 0x38
 8007f78:	3313      	adds	r3, #19
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe f826 	bl	8005fcc <ld_word>
 8007f80:	4603      	mov	r3, r0
 8007f82:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <find_volume+0x2cc>
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	3338      	adds	r3, #56	; 0x38
 8007f8e:	3320      	adds	r3, #32
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fe f833 	bl	8005ffc <ld_dword>
 8007f96:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	3338      	adds	r3, #56	; 0x38
 8007f9c:	330e      	adds	r3, #14
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe f814 	bl	8005fcc <ld_word>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007fa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <find_volume+0x2e6>
 8007fae:	230d      	movs	r3, #13
 8007fb0:	e105      	b.n	80081be <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007fb2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb6:	4413      	add	r3, r2
 8007fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fba:	8911      	ldrh	r1, [r2, #8]
 8007fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fbe:	8992      	ldrh	r2, [r2, #12]
 8007fc0:	0952      	lsrs	r2, r2, #5
 8007fc2:	b292      	uxth	r2, r2
 8007fc4:	fbb1 f2f2 	udiv	r2, r1, r2
 8007fc8:	b292      	uxth	r2, r2
 8007fca:	4413      	add	r3, r2
 8007fcc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d201      	bcs.n	8007fda <find_volume+0x30e>
 8007fd6:	230d      	movs	r3, #13
 8007fd8:	e0f1      	b.n	80081be <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fe2:	8952      	ldrh	r2, [r2, #10]
 8007fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fe8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <find_volume+0x328>
 8007ff0:	230d      	movs	r3, #13
 8007ff2:	e0e4      	b.n	80081be <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008000:	4293      	cmp	r3, r2
 8008002:	d802      	bhi.n	800800a <find_volume+0x33e>
 8008004:	2302      	movs	r3, #2
 8008006:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008010:	4293      	cmp	r3, r2
 8008012:	d802      	bhi.n	800801a <find_volume+0x34e>
 8008014:	2301      	movs	r3, #1
 8008016:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	1c9a      	adds	r2, r3, #2
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008026:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008028:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800802a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800802c:	441a      	add	r2, r3
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008032:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	441a      	add	r2, r3
 8008038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800803c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008040:	2b03      	cmp	r3, #3
 8008042:	d11e      	bne.n	8008082 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	3338      	adds	r3, #56	; 0x38
 8008048:	332a      	adds	r3, #42	; 0x2a
 800804a:	4618      	mov	r0, r3
 800804c:	f7fd ffbe 	bl	8005fcc <ld_word>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <find_volume+0x38e>
 8008056:	230d      	movs	r3, #13
 8008058:	e0b1      	b.n	80081be <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805c:	891b      	ldrh	r3, [r3, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <find_volume+0x39a>
 8008062:	230d      	movs	r3, #13
 8008064:	e0ab      	b.n	80081be <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008068:	3338      	adds	r3, #56	; 0x38
 800806a:	332c      	adds	r3, #44	; 0x2c
 800806c:	4618      	mov	r0, r3
 800806e:	f7fd ffc5 	bl	8005ffc <ld_dword>
 8008072:	4602      	mov	r2, r0
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	647b      	str	r3, [r7, #68]	; 0x44
 8008080:	e01f      	b.n	80080c2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	891b      	ldrh	r3, [r3, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <find_volume+0x3c2>
 800808a:	230d      	movs	r3, #13
 800808c:	e097      	b.n	80081be <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008094:	441a      	add	r2, r3
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800809a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d103      	bne.n	80080aa <find_volume+0x3de>
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	e00a      	b.n	80080c0 <find_volume+0x3f4>
 80080aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ac:	69da      	ldr	r2, [r3, #28]
 80080ae:	4613      	mov	r3, r2
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	4413      	add	r3, r2
 80080b4:	085a      	lsrs	r2, r3, #1
 80080b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80080c0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80080c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c4:	6a1a      	ldr	r2, [r3, #32]
 80080c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c8:	899b      	ldrh	r3, [r3, #12]
 80080ca:	4619      	mov	r1, r3
 80080cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ce:	440b      	add	r3, r1
 80080d0:	3b01      	subs	r3, #1
 80080d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080d4:	8989      	ldrh	r1, [r1, #12]
 80080d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80080da:	429a      	cmp	r2, r3
 80080dc:	d201      	bcs.n	80080e2 <find_volume+0x416>
 80080de:	230d      	movs	r3, #13
 80080e0:	e06d      	b.n	80081be <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	f04f 32ff 	mov.w	r2, #4294967295
 80080e8:	619a      	str	r2, [r3, #24]
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	699a      	ldr	r2, [r3, #24]
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	2280      	movs	r2, #128	; 0x80
 80080f6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80080f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d149      	bne.n	8008194 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	3338      	adds	r3, #56	; 0x38
 8008104:	3330      	adds	r3, #48	; 0x30
 8008106:	4618      	mov	r0, r3
 8008108:	f7fd ff60 	bl	8005fcc <ld_word>
 800810c:	4603      	mov	r3, r0
 800810e:	2b01      	cmp	r3, #1
 8008110:	d140      	bne.n	8008194 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008114:	3301      	adds	r3, #1
 8008116:	4619      	mov	r1, r3
 8008118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800811a:	f7fe fa07 	bl	800652c <move_window>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d137      	bne.n	8008194 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	2200      	movs	r2, #0
 8008128:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800812a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812c:	3338      	adds	r3, #56	; 0x38
 800812e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008132:	4618      	mov	r0, r3
 8008134:	f7fd ff4a 	bl	8005fcc <ld_word>
 8008138:	4603      	mov	r3, r0
 800813a:	461a      	mov	r2, r3
 800813c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008140:	429a      	cmp	r2, r3
 8008142:	d127      	bne.n	8008194 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	3338      	adds	r3, #56	; 0x38
 8008148:	4618      	mov	r0, r3
 800814a:	f7fd ff57 	bl	8005ffc <ld_dword>
 800814e:	4603      	mov	r3, r0
 8008150:	4a1d      	ldr	r2, [pc, #116]	; (80081c8 <find_volume+0x4fc>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d11e      	bne.n	8008194 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	3338      	adds	r3, #56	; 0x38
 800815a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800815e:	4618      	mov	r0, r3
 8008160:	f7fd ff4c 	bl	8005ffc <ld_dword>
 8008164:	4603      	mov	r3, r0
 8008166:	4a19      	ldr	r2, [pc, #100]	; (80081cc <find_volume+0x500>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d113      	bne.n	8008194 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800816c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816e:	3338      	adds	r3, #56	; 0x38
 8008170:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008174:	4618      	mov	r0, r3
 8008176:	f7fd ff41 	bl	8005ffc <ld_dword>
 800817a:	4602      	mov	r2, r0
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	3338      	adds	r3, #56	; 0x38
 8008184:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008188:	4618      	mov	r0, r3
 800818a:	f7fd ff37 	bl	8005ffc <ld_dword>
 800818e:	4602      	mov	r2, r0
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008196:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800819a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800819c:	4b0c      	ldr	r3, [pc, #48]	; (80081d0 <find_volume+0x504>)
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	3301      	adds	r3, #1
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <find_volume+0x504>)
 80081a6:	801a      	strh	r2, [r3, #0]
 80081a8:	4b09      	ldr	r3, [pc, #36]	; (80081d0 <find_volume+0x504>)
 80081aa:	881a      	ldrh	r2, [r3, #0]
 80081ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ae:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	4a08      	ldr	r2, [pc, #32]	; (80081d4 <find_volume+0x508>)
 80081b4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80081b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081b8:	f7fe f950 	bl	800645c <clear_lock>
#endif
	return FR_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3758      	adds	r7, #88	; 0x58
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	41615252 	.word	0x41615252
 80081cc:	61417272 	.word	0x61417272
 80081d0:	20002704 	.word	0x20002704
 80081d4:	20002728 	.word	0x20002728

080081d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80081e2:	2309      	movs	r3, #9
 80081e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01c      	beq.n	8008226 <validate+0x4e>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d018      	beq.n	8008226 <validate+0x4e>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d013      	beq.n	8008226 <validate+0x4e>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	889a      	ldrh	r2, [r3, #4]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	88db      	ldrh	r3, [r3, #6]
 8008208:	429a      	cmp	r2, r3
 800820a:	d10c      	bne.n	8008226 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	785b      	ldrb	r3, [r3, #1]
 8008212:	4618      	mov	r0, r3
 8008214:	f7fd fe3c 	bl	8005e90 <disk_status>
 8008218:	4603      	mov	r3, r0
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <validate+0x4e>
			res = FR_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <validate+0x5a>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	e000      	b.n	8008234 <validate+0x5c>
 8008232:	2300      	movs	r3, #0
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	6013      	str	r3, [r2, #0]
	return res;
 8008238:	7bfb      	ldrb	r3, [r7, #15]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008256:	f107 0310 	add.w	r3, r7, #16
 800825a:	4618      	mov	r0, r3
 800825c:	f7ff fc9c 	bl	8007b98 <get_ldnumber>
 8008260:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	2b00      	cmp	r3, #0
 8008266:	da01      	bge.n	800826c <f_mount+0x28>
 8008268:	230b      	movs	r3, #11
 800826a:	e02b      	b.n	80082c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800826c:	4a17      	ldr	r2, [pc, #92]	; (80082cc <f_mount+0x88>)
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008274:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800827c:	69b8      	ldr	r0, [r7, #24]
 800827e:	f7fe f8ed 	bl	800645c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	2200      	movs	r2, #0
 8008286:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	490d      	ldr	r1, [pc, #52]	; (80082cc <f_mount+0x88>)
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <f_mount+0x66>
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d001      	beq.n	80082ae <f_mount+0x6a>
 80082aa:	2300      	movs	r3, #0
 80082ac:	e00a      	b.n	80082c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80082ae:	f107 010c 	add.w	r1, r7, #12
 80082b2:	f107 0308 	add.w	r3, r7, #8
 80082b6:	2200      	movs	r2, #0
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7ff fd07 	bl	8007ccc <find_volume>
 80082be:	4603      	mov	r3, r0
 80082c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3720      	adds	r7, #32
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20002700 	.word	0x20002700

080082d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b09a      	sub	sp, #104	; 0x68
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	4613      	mov	r3, r2
 80082dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <f_open+0x18>
 80082e4:	2309      	movs	r3, #9
 80082e6:	e1bb      	b.n	8008660 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80082f0:	79fa      	ldrb	r2, [r7, #7]
 80082f2:	f107 0114 	add.w	r1, r7, #20
 80082f6:	f107 0308 	add.w	r3, r7, #8
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7ff fce6 	bl	8007ccc <find_volume>
 8008300:	4603      	mov	r3, r0
 8008302:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008306:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800830a:	2b00      	cmp	r3, #0
 800830c:	f040 819f 	bne.w	800864e <f_open+0x37e>
		dj.obj.fs = fs;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	f107 0318 	add.w	r3, r7, #24
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff fbc5 	bl	8007aac <follow_path>
 8008322:	4603      	mov	r3, r0
 8008324:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008328:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800832c:	2b00      	cmp	r3, #0
 800832e:	d11a      	bne.n	8008366 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008330:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008334:	b25b      	sxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	da03      	bge.n	8008342 <f_open+0x72>
				res = FR_INVALID_NAME;
 800833a:	2306      	movs	r3, #6
 800833c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008340:	e011      	b.n	8008366 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	f023 0301 	bic.w	r3, r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	bf14      	ite	ne
 800834c:	2301      	movne	r3, #1
 800834e:	2300      	moveq	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	461a      	mov	r2, r3
 8008354:	f107 0318 	add.w	r3, r7, #24
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7fd ff36 	bl	80061cc <chk_lock>
 8008360:	4603      	mov	r3, r0
 8008362:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	f003 031c 	and.w	r3, r3, #28
 800836c:	2b00      	cmp	r3, #0
 800836e:	d07f      	beq.n	8008470 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008370:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008374:	2b00      	cmp	r3, #0
 8008376:	d017      	beq.n	80083a8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008378:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800837c:	2b04      	cmp	r3, #4
 800837e:	d10e      	bne.n	800839e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008380:	f7fd ff80 	bl	8006284 <enq_lock>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d006      	beq.n	8008398 <f_open+0xc8>
 800838a:	f107 0318 	add.w	r3, r7, #24
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff f8dc 	bl	800754c <dir_register>
 8008394:	4603      	mov	r3, r0
 8008396:	e000      	b.n	800839a <f_open+0xca>
 8008398:	2312      	movs	r3, #18
 800839a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	f043 0308 	orr.w	r3, r3, #8
 80083a4:	71fb      	strb	r3, [r7, #7]
 80083a6:	e010      	b.n	80083ca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80083a8:	7fbb      	ldrb	r3, [r7, #30]
 80083aa:	f003 0311 	and.w	r3, r3, #17
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <f_open+0xea>
					res = FR_DENIED;
 80083b2:	2307      	movs	r3, #7
 80083b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80083b8:	e007      	b.n	80083ca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <f_open+0xfa>
 80083c4:	2308      	movs	r3, #8
 80083c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80083ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d168      	bne.n	80084a4 <f_open+0x1d4>
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	f003 0308 	and.w	r3, r3, #8
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d063      	beq.n	80084a4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80083dc:	f7fd fcf6 	bl	8005dcc <get_fattime>
 80083e0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	330e      	adds	r3, #14
 80083e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fd fe45 	bl	8006078 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80083ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f0:	3316      	adds	r3, #22
 80083f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fd fe3f 	bl	8006078 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	330b      	adds	r3, #11
 80083fe:	2220      	movs	r2, #32
 8008400:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008406:	4611      	mov	r1, r2
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe fe17 	bl	800703c <ld_clust>
 800840e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008414:	2200      	movs	r2, #0
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe fe2f 	bl	800707a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	331c      	adds	r3, #28
 8008420:	2100      	movs	r1, #0
 8008422:	4618      	mov	r0, r3
 8008424:	f7fd fe28 	bl	8006078 <st_dword>
					fs->wflag = 1;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2201      	movs	r2, #1
 800842c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800842e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008430:	2b00      	cmp	r3, #0
 8008432:	d037      	beq.n	80084a4 <f_open+0x1d4>
						dw = fs->winsect;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008438:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800843a:	f107 0318 	add.w	r3, r7, #24
 800843e:	2200      	movs	r2, #0
 8008440:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe fb1f 	bl	8006a86 <remove_chain>
 8008448:	4603      	mov	r3, r0
 800844a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800844e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008452:	2b00      	cmp	r3, #0
 8008454:	d126      	bne.n	80084a4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe f866 	bl	800652c <move_window>
 8008460:	4603      	mov	r3, r0
 8008462:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800846a:	3a01      	subs	r2, #1
 800846c:	615a      	str	r2, [r3, #20]
 800846e:	e019      	b.n	80084a4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008470:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008474:	2b00      	cmp	r3, #0
 8008476:	d115      	bne.n	80084a4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008478:	7fbb      	ldrb	r3, [r7, #30]
 800847a:	f003 0310 	and.w	r3, r3, #16
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008482:	2304      	movs	r3, #4
 8008484:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008488:	e00c      	b.n	80084a4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800848a:	79fb      	ldrb	r3, [r7, #7]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <f_open+0x1d4>
 8008494:	7fbb      	ldrb	r3, [r7, #30]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <f_open+0x1d4>
						res = FR_DENIED;
 800849e:	2307      	movs	r3, #7
 80084a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80084a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d128      	bne.n	80084fe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	f003 0308 	and.w	r3, r3, #8
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80084b6:	79fb      	ldrb	r3, [r7, #7]
 80084b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80084c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	f023 0301 	bic.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	bf14      	ite	ne
 80084d6:	2301      	movne	r3, #1
 80084d8:	2300      	moveq	r3, #0
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	461a      	mov	r2, r3
 80084de:	f107 0318 	add.w	r3, r7, #24
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fd feef 	bl	80062c8 <inc_lock>
 80084ea:	4602      	mov	r2, r0
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d102      	bne.n	80084fe <f_open+0x22e>
 80084f8:	2302      	movs	r3, #2
 80084fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80084fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008502:	2b00      	cmp	r3, #0
 8008504:	f040 80a3 	bne.w	800864e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe fd94 	bl	800703c <ld_clust>
 8008514:	4602      	mov	r2, r0
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851c:	331c      	adds	r3, #28
 800851e:	4618      	mov	r0, r3
 8008520:	f7fd fd6c 	bl	8005ffc <ld_dword>
 8008524:	4602      	mov	r2, r0
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	88da      	ldrh	r2, [r3, #6]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	79fa      	ldrb	r2, [r7, #7]
 8008542:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3330      	adds	r3, #48	; 0x30
 800855a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800855e:	2100      	movs	r1, #0
 8008560:	4618      	mov	r0, r3
 8008562:	f7fd fdd6 	bl	8006112 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	f003 0320 	and.w	r3, r3, #32
 800856c:	2b00      	cmp	r3, #0
 800856e:	d06e      	beq.n	800864e <f_open+0x37e>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d06a      	beq.n	800864e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	68da      	ldr	r2, [r3, #12]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	895b      	ldrh	r3, [r3, #10]
 8008584:	461a      	mov	r2, r3
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	899b      	ldrh	r3, [r3, #12]
 800858a:	fb02 f303 	mul.w	r3, r2, r3
 800858e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800859c:	e016      	b.n	80085cc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe f87f 	bl	80066a6 <get_fat>
 80085a8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80085aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d802      	bhi.n	80085b6 <f_open+0x2e6>
 80085b0:	2302      	movs	r3, #2
 80085b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80085b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085bc:	d102      	bne.n	80085c4 <f_open+0x2f4>
 80085be:	2301      	movs	r3, #1
 80085c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d103      	bne.n	80085dc <f_open+0x30c>
 80085d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085d8:	429a      	cmp	r2, r3
 80085da:	d8e0      	bhi.n	800859e <f_open+0x2ce>
				}
				fp->clust = clst;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80085e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d131      	bne.n	800864e <f_open+0x37e>
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	899b      	ldrh	r3, [r3, #12]
 80085ee:	461a      	mov	r2, r3
 80085f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80085f6:	fb01 f202 	mul.w	r2, r1, r2
 80085fa:	1a9b      	subs	r3, r3, r2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d026      	beq.n	800864e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe f82f 	bl	8006668 <clust2sect>
 800860a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800860c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d103      	bne.n	800861a <f_open+0x34a>
						res = FR_INT_ERR;
 8008612:	2302      	movs	r3, #2
 8008614:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008618:	e019      	b.n	800864e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	899b      	ldrh	r3, [r3, #12]
 800861e:	461a      	mov	r2, r3
 8008620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008622:	fbb3 f2f2 	udiv	r2, r3, r2
 8008626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008628:	441a      	add	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	7858      	ldrb	r0, [r3, #1]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a1a      	ldr	r2, [r3, #32]
 800863c:	2301      	movs	r3, #1
 800863e:	f7fd fc67 	bl	8005f10 <disk_read>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <f_open+0x37e>
 8008648:	2301      	movs	r3, #1
 800864a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800864e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <f_open+0x38c>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800865c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008660:	4618      	mov	r0, r3
 8008662:	3768      	adds	r7, #104	; 0x68
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08e      	sub	sp, #56	; 0x38
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f107 0214 	add.w	r2, r7, #20
 8008686:	4611      	mov	r1, r2
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff fda5 	bl	80081d8 <validate>
 800868e:	4603      	mov	r3, r0
 8008690:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008694:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008698:	2b00      	cmp	r3, #0
 800869a:	d107      	bne.n	80086ac <f_read+0x44>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	7d5b      	ldrb	r3, [r3, #21]
 80086a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80086a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <f_read+0x4a>
 80086ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086b0:	e135      	b.n	800891e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	7d1b      	ldrb	r3, [r3, #20]
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <f_read+0x5a>
 80086be:	2307      	movs	r3, #7
 80086c0:	e12d      	b.n	800891e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	68da      	ldr	r2, [r3, #12]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	f240 811e 	bls.w	8008914 <f_read+0x2ac>
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80086dc:	e11a      	b.n	8008914 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	8992      	ldrh	r2, [r2, #12]
 80086e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80086ea:	fb01 f202 	mul.w	r2, r1, r2
 80086ee:	1a9b      	subs	r3, r3, r2
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f040 80d5 	bne.w	80088a0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	8992      	ldrh	r2, [r2, #12]
 80086fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	8952      	ldrh	r2, [r2, #10]
 8008706:	3a01      	subs	r2, #1
 8008708:	4013      	ands	r3, r2
 800870a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d12f      	bne.n	8008772 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d103      	bne.n	8008722 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	633b      	str	r3, [r7, #48]	; 0x30
 8008720:	e013      	b.n	800874a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008726:	2b00      	cmp	r3, #0
 8008728:	d007      	beq.n	800873a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	4619      	mov	r1, r3
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7fe faa5 	bl	8006c80 <clmt_clust>
 8008736:	6338      	str	r0, [r7, #48]	; 0x30
 8008738:	e007      	b.n	800874a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	4619      	mov	r1, r3
 8008742:	4610      	mov	r0, r2
 8008744:	f7fd ffaf 	bl	80066a6 <get_fat>
 8008748:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	2b01      	cmp	r3, #1
 800874e:	d804      	bhi.n	800875a <f_read+0xf2>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2202      	movs	r2, #2
 8008754:	755a      	strb	r2, [r3, #21]
 8008756:	2302      	movs	r3, #2
 8008758:	e0e1      	b.n	800891e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008760:	d104      	bne.n	800876c <f_read+0x104>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	755a      	strb	r2, [r3, #21]
 8008768:	2301      	movs	r3, #1
 800876a:	e0d8      	b.n	800891e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008770:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f7fd ff74 	bl	8006668 <clust2sect>
 8008780:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d104      	bne.n	8008792 <f_read+0x12a>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2202      	movs	r2, #2
 800878c:	755a      	strb	r2, [r3, #21]
 800878e:	2302      	movs	r3, #2
 8008790:	e0c5      	b.n	800891e <f_read+0x2b6>
			sect += csect;
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	4413      	add	r3, r2
 8008798:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	899b      	ldrh	r3, [r3, #12]
 800879e:	461a      	mov	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087a6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d041      	beq.n	8008832 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b2:	4413      	add	r3, r2
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	8952      	ldrh	r2, [r2, #10]
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d905      	bls.n	80087c8 <f_read+0x160>
					cc = fs->csize - csect;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	895b      	ldrh	r3, [r3, #10]
 80087c0:	461a      	mov	r2, r3
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	7858      	ldrb	r0, [r3, #1]
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087d2:	f7fd fb9d 	bl	8005f10 <disk_read>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <f_read+0x17e>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	755a      	strb	r2, [r3, #21]
 80087e2:	2301      	movs	r3, #1
 80087e4:	e09b      	b.n	800891e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	7d1b      	ldrb	r3, [r3, #20]
 80087ea:	b25b      	sxtb	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	da18      	bge.n	8008822 <f_read+0x1ba>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a1a      	ldr	r2, [r3, #32]
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d911      	bls.n	8008822 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6a1a      	ldr	r2, [r3, #32]
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	8992      	ldrh	r2, [r2, #12]
 800880a:	fb02 f303 	mul.w	r3, r2, r3
 800880e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008810:	18d0      	adds	r0, r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	899b      	ldrh	r3, [r3, #12]
 800881c:	461a      	mov	r2, r3
 800881e:	f7fd fc57 	bl	80060d0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	899b      	ldrh	r3, [r3, #12]
 8008826:	461a      	mov	r2, r3
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	fb02 f303 	mul.w	r3, r2, r3
 800882e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008830:	e05c      	b.n	80088ec <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	429a      	cmp	r2, r3
 800883a:	d02e      	beq.n	800889a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	7d1b      	ldrb	r3, [r3, #20]
 8008840:	b25b      	sxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	da18      	bge.n	8008878 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	7858      	ldrb	r0, [r3, #1]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6a1a      	ldr	r2, [r3, #32]
 8008854:	2301      	movs	r3, #1
 8008856:	f7fd fb7b 	bl	8005f50 <disk_write>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d004      	beq.n	800886a <f_read+0x202>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	755a      	strb	r2, [r3, #21]
 8008866:	2301      	movs	r3, #1
 8008868:	e059      	b.n	800891e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	7d1b      	ldrb	r3, [r3, #20]
 800886e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008872:	b2da      	uxtb	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	7858      	ldrb	r0, [r3, #1]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008882:	2301      	movs	r3, #1
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	f7fd fb43 	bl	8005f10 <disk_read>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <f_read+0x232>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	755a      	strb	r2, [r3, #21]
 8008896:	2301      	movs	r3, #1
 8008898:	e041      	b.n	800891e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	899b      	ldrh	r3, [r3, #12]
 80088a4:	4618      	mov	r0, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	8992      	ldrh	r2, [r2, #12]
 80088ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80088b2:	fb01 f202 	mul.w	r2, r1, r2
 80088b6:	1a9b      	subs	r3, r3, r2
 80088b8:	1ac3      	subs	r3, r0, r3
 80088ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80088bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d901      	bls.n	80088c8 <f_read+0x260>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	8992      	ldrh	r2, [r2, #12]
 80088d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80088da:	fb00 f202 	mul.w	r2, r0, r2
 80088de:	1a9b      	subs	r3, r3, r2
 80088e0:	440b      	add	r3, r1
 80088e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088e4:	4619      	mov	r1, r3
 80088e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088e8:	f7fd fbf2 	bl	80060d0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80088ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	4413      	add	r3, r2
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	699a      	ldr	r2, [r3, #24]
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	441a      	add	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	619a      	str	r2, [r3, #24]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	441a      	add	r2, r3
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	601a      	str	r2, [r3, #0]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	f47f aee1 	bne.w	80086de <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3738      	adds	r7, #56	; 0x38
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b08c      	sub	sp, #48	; 0x30
 800892a:	af00      	add	r7, sp, #0
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	607a      	str	r2, [r7, #4]
 8008932:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f107 0210 	add.w	r2, r7, #16
 8008944:	4611      	mov	r1, r2
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff fc46 	bl	80081d8 <validate>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008956:	2b00      	cmp	r3, #0
 8008958:	d107      	bne.n	800896a <f_write+0x44>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	7d5b      	ldrb	r3, [r3, #21]
 800895e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <f_write+0x4a>
 800896a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800896e:	e16a      	b.n	8008c46 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	7d1b      	ldrb	r3, [r3, #20]
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <f_write+0x5a>
 800897c:	2307      	movs	r3, #7
 800897e:	e162      	b.n	8008c46 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	699a      	ldr	r2, [r3, #24]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	441a      	add	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	429a      	cmp	r2, r3
 800898e:	f080 814c 	bcs.w	8008c2a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	43db      	mvns	r3, r3
 8008998:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800899a:	e146      	b.n	8008c2a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	8992      	ldrh	r2, [r2, #12]
 80089a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80089a8:	fb01 f202 	mul.w	r2, r1, r2
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f040 80f1 	bne.w	8008b96 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	8992      	ldrh	r2, [r2, #12]
 80089bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	8952      	ldrh	r2, [r2, #10]
 80089c4:	3a01      	subs	r2, #1
 80089c6:	4013      	ands	r3, r2
 80089c8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d143      	bne.n	8008a58 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10c      	bne.n	80089f2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d11a      	bne.n	8008a1a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2100      	movs	r1, #0
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fe f8b1 	bl	8006b50 <create_chain>
 80089ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80089f0:	e013      	b.n	8008a1a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d007      	beq.n	8008a0a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	4619      	mov	r1, r3
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f7fe f93d 	bl	8006c80 <clmt_clust>
 8008a06:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a08:	e007      	b.n	8008a1a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	69db      	ldr	r3, [r3, #28]
 8008a10:	4619      	mov	r1, r3
 8008a12:	4610      	mov	r0, r2
 8008a14:	f7fe f89c 	bl	8006b50 <create_chain>
 8008a18:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8109 	beq.w	8008c34 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d104      	bne.n	8008a32 <f_write+0x10c>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	755a      	strb	r2, [r3, #21]
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e109      	b.n	8008c46 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d104      	bne.n	8008a44 <f_write+0x11e>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	755a      	strb	r2, [r3, #21]
 8008a40:	2301      	movs	r3, #1
 8008a42:	e100      	b.n	8008c46 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a48:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d102      	bne.n	8008a58 <f_write+0x132>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a56:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	7d1b      	ldrb	r3, [r3, #20]
 8008a5c:	b25b      	sxtb	r3, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	da18      	bge.n	8008a94 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	7858      	ldrb	r0, [r3, #1]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6a1a      	ldr	r2, [r3, #32]
 8008a70:	2301      	movs	r3, #1
 8008a72:	f7fd fa6d 	bl	8005f50 <disk_write>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d004      	beq.n	8008a86 <f_write+0x160>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	755a      	strb	r2, [r3, #21]
 8008a82:	2301      	movs	r3, #1
 8008a84:	e0df      	b.n	8008c46 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	7d1b      	ldrb	r3, [r3, #20]
 8008a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f7fd fde3 	bl	8006668 <clust2sect>
 8008aa2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d104      	bne.n	8008ab4 <f_write+0x18e>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2202      	movs	r2, #2
 8008aae:	755a      	strb	r2, [r3, #21]
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e0c8      	b.n	8008c46 <f_write+0x320>
			sect += csect;
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	4413      	add	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	899b      	ldrh	r3, [r3, #12]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ac8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d043      	beq.n	8008b58 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	8952      	ldrh	r2, [r2, #10]
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d905      	bls.n	8008aea <f_write+0x1c4>
					cc = fs->csize - csect;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	895b      	ldrh	r3, [r3, #10]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	7858      	ldrb	r0, [r3, #1]
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	69f9      	ldr	r1, [r7, #28]
 8008af4:	f7fd fa2c 	bl	8005f50 <disk_write>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d004      	beq.n	8008b08 <f_write+0x1e2>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2201      	movs	r2, #1
 8008b02:	755a      	strb	r2, [r3, #21]
 8008b04:	2301      	movs	r3, #1
 8008b06:	e09e      	b.n	8008c46 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a1a      	ldr	r2, [r3, #32]
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	6a3a      	ldr	r2, [r7, #32]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d918      	bls.n	8008b48 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6a1a      	ldr	r2, [r3, #32]
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	8992      	ldrh	r2, [r2, #12]
 8008b28:	fb02 f303 	mul.w	r3, r2, r3
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	18d1      	adds	r1, r2, r3
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	899b      	ldrh	r3, [r3, #12]
 8008b34:	461a      	mov	r2, r3
 8008b36:	f7fd facb 	bl	80060d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	7d1b      	ldrb	r3, [r3, #20]
 8008b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	899b      	ldrh	r3, [r3, #12]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	fb02 f303 	mul.w	r3, r2, r3
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008b56:	e04b      	b.n	8008bf0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6a1b      	ldr	r3, [r3, #32]
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d016      	beq.n	8008b90 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	699a      	ldr	r2, [r3, #24]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d210      	bcs.n	8008b90 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	7858      	ldrb	r0, [r3, #1]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b78:	2301      	movs	r3, #1
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	f7fd f9c8 	bl	8005f10 <disk_read>
 8008b80:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d004      	beq.n	8008b90 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	755a      	strb	r2, [r3, #21]
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e05a      	b.n	8008c46 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	899b      	ldrh	r3, [r3, #12]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	8992      	ldrh	r2, [r2, #12]
 8008ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ba8:	fb01 f202 	mul.w	r2, r1, r2
 8008bac:	1a9b      	subs	r3, r3, r2
 8008bae:	1ac3      	subs	r3, r0, r3
 8008bb0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d901      	bls.n	8008bbe <f_write+0x298>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	8992      	ldrh	r2, [r2, #12]
 8008bcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bd0:	fb00 f202 	mul.w	r2, r0, r2
 8008bd4:	1a9b      	subs	r3, r3, r2
 8008bd6:	440b      	add	r3, r1
 8008bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bda:	69f9      	ldr	r1, [r7, #28]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fd fa77 	bl	80060d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	7d1b      	ldrb	r3, [r3, #20]
 8008be6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	4413      	add	r3, r2
 8008bf6:	61fb      	str	r3, [r7, #28]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	699a      	ldr	r2, [r3, #24]
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	441a      	add	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	619a      	str	r2, [r3, #24]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	bf38      	it	cc
 8008c10:	461a      	movcc	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	60da      	str	r2, [r3, #12]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	441a      	add	r2, r3
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f47f aeb5 	bne.w	800899c <f_write+0x76>
 8008c32:	e000      	b.n	8008c36 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c34:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	7d1b      	ldrb	r3, [r3, #20]
 8008c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3730      	adds	r7, #48	; 0x30
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b086      	sub	sp, #24
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f107 0208 	add.w	r2, r7, #8
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff faba 	bl	80081d8 <validate>
 8008c64:	4603      	mov	r3, r0
 8008c66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d168      	bne.n	8008d40 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	7d1b      	ldrb	r3, [r3, #20]
 8008c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d062      	beq.n	8008d40 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	7d1b      	ldrb	r3, [r3, #20]
 8008c7e:	b25b      	sxtb	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	da15      	bge.n	8008cb0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	7858      	ldrb	r0, [r3, #1]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a1a      	ldr	r2, [r3, #32]
 8008c92:	2301      	movs	r3, #1
 8008c94:	f7fd f95c 	bl	8005f50 <disk_write>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <f_sync+0x54>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e04f      	b.n	8008d42 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	7d1b      	ldrb	r3, [r3, #20]
 8008ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008cb0:	f7fd f88c 	bl	8005dcc <get_fattime>
 8008cb4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f7fd fc34 	bl	800652c <move_window>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d138      	bne.n	8008d40 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	330b      	adds	r3, #11
 8008cd8:	781a      	ldrb	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	330b      	adds	r3, #11
 8008cde:	f042 0220 	orr.w	r2, r2, #32
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	68f9      	ldr	r1, [r7, #12]
 8008cf2:	f7fe f9c2 	bl	800707a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f103 021c 	add.w	r2, r3, #28
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fd f9b8 	bl	8006078 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3316      	adds	r3, #22
 8008d0c:	6939      	ldr	r1, [r7, #16]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fd f9b2 	bl	8006078 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3312      	adds	r3, #18
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fd f991 	bl	8006042 <st_word>
					fs->wflag = 1;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2201      	movs	r2, #1
 8008d24:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fd fc2d 	bl	8006588 <sync_fs>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	7d1b      	ldrb	r3, [r3, #20]
 8008d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff ff7b 	bl	8008c4e <f_sync>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d118      	bne.n	8008d94 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f107 0208 	add.w	r2, r7, #8
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff fa34 	bl	80081d8 <validate>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10c      	bne.n	8008d94 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fd fb30 	bl	80063e4 <dec_lock>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d102      	bne.n	8008d94 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b090      	sub	sp, #64	; 0x40
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f107 0208 	add.w	r2, r7, #8
 8008dae:	4611      	mov	r1, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff fa11 	bl	80081d8 <validate>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008dbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d103      	bne.n	8008dcc <f_lseek+0x2e>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	7d5b      	ldrb	r3, [r3, #21]
 8008dc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008dcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <f_lseek+0x3c>
 8008dd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dd8:	e201      	b.n	80091de <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 80d9 	beq.w	8008f96 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dea:	d15a      	bne.n	8008ea2 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	1d1a      	adds	r2, r3, #4
 8008df6:	627a      	str	r2, [r7, #36]	; 0x24
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d03a      	beq.n	8008e82 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	613b      	str	r3, [r7, #16]
 8008e10:	2300      	movs	r3, #0
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e16:	3302      	adds	r3, #2
 8008e18:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	3301      	adds	r3, #1
 8008e22:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fd fc3c 	bl	80066a6 <get_fat>
 8008e2e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d804      	bhi.n	8008e40 <f_lseek+0xa2>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2202      	movs	r2, #2
 8008e3a:	755a      	strb	r2, [r3, #21]
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	e1ce      	b.n	80091de <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e46:	d104      	bne.n	8008e52 <f_lseek+0xb4>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	755a      	strb	r2, [r3, #21]
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e1c5      	b.n	80091de <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3301      	adds	r3, #1
 8008e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d0de      	beq.n	8008e1a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d809      	bhi.n	8008e78 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	1d1a      	adds	r2, r3, #4
 8008e68:	627a      	str	r2, [r7, #36]	; 0x24
 8008e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	1d1a      	adds	r2, r3, #4
 8008e72:	627a      	str	r2, [r7, #36]	; 0x24
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d3c4      	bcc.n	8008e0c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e88:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d803      	bhi.n	8008e9a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	e19f      	b.n	80091da <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008e9a:	2311      	movs	r3, #17
 8008e9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008ea0:	e19b      	b.n	80091da <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d902      	bls.n	8008eb2 <f_lseek+0x114>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 818d 	beq.w	80091da <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7fd feda 	bl	8006c80 <clmt_clust>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f7fd fbc4 	bl	8006668 <clust2sect>
 8008ee0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d104      	bne.n	8008ef2 <f_lseek+0x154>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	755a      	strb	r2, [r3, #21]
 8008eee:	2302      	movs	r3, #2
 8008ef0:	e175      	b.n	80091de <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	8992      	ldrh	r2, [r2, #12]
 8008efa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	8952      	ldrh	r2, [r2, #10]
 8008f02:	3a01      	subs	r2, #1
 8008f04:	4013      	ands	r3, r2
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	4413      	add	r3, r2
 8008f0a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	8992      	ldrh	r2, [r2, #12]
 8008f14:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f18:	fb01 f202 	mul.w	r2, r1, r2
 8008f1c:	1a9b      	subs	r3, r3, r2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 815b 	beq.w	80091da <f_lseek+0x43c>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a1b      	ldr	r3, [r3, #32]
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	f000 8155 	beq.w	80091da <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	7d1b      	ldrb	r3, [r3, #20]
 8008f34:	b25b      	sxtb	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da18      	bge.n	8008f6c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	7858      	ldrb	r0, [r3, #1]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a1a      	ldr	r2, [r3, #32]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f7fd f801 	bl	8005f50 <disk_write>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d004      	beq.n	8008f5e <f_lseek+0x1c0>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	755a      	strb	r2, [r3, #21]
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e13f      	b.n	80091de <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	7d1b      	ldrb	r3, [r3, #20]
 8008f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	7858      	ldrb	r0, [r3, #1]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f76:	2301      	movs	r3, #1
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	f7fc ffc9 	bl	8005f10 <disk_read>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <f_lseek+0x1f0>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	755a      	strb	r2, [r3, #21]
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e127      	b.n	80091de <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	621a      	str	r2, [r3, #32]
 8008f94:	e121      	b.n	80091da <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d908      	bls.n	8008fb2 <f_lseek+0x214>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	7d1b      	ldrb	r3, [r3, #20]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	637b      	str	r3, [r7, #52]	; 0x34
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 80b5 	beq.w	8009134 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	895b      	ldrh	r3, [r3, #10]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	899b      	ldrh	r3, [r3, #12]
 8008fd4:	fb02 f303 	mul.w	r3, r2, r3
 8008fd8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d01b      	beq.n	8009018 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	1e5a      	subs	r2, r3, #1
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	1e59      	subs	r1, r3, #1
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d30f      	bcc.n	8009018 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	1e5a      	subs	r2, r3, #1
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	425b      	negs	r3, r3
 8009000:	401a      	ands	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	63bb      	str	r3, [r7, #56]	; 0x38
 8009016:	e022      	b.n	800905e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800901e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009020:	2b00      	cmp	r3, #0
 8009022:	d119      	bne.n	8009058 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2100      	movs	r1, #0
 8009028:	4618      	mov	r0, r3
 800902a:	f7fd fd91 	bl	8006b50 <create_chain>
 800902e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	2b01      	cmp	r3, #1
 8009034:	d104      	bne.n	8009040 <f_lseek+0x2a2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2202      	movs	r2, #2
 800903a:	755a      	strb	r2, [r3, #21]
 800903c:	2302      	movs	r3, #2
 800903e:	e0ce      	b.n	80091de <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009046:	d104      	bne.n	8009052 <f_lseek+0x2b4>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	755a      	strb	r2, [r3, #21]
 800904e:	2301      	movs	r3, #1
 8009050:	e0c5      	b.n	80091de <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009056:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800905c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	2b00      	cmp	r3, #0
 8009062:	d067      	beq.n	8009134 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8009064:	e03a      	b.n	80090dc <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	603b      	str	r3, [r7, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	699a      	ldr	r2, [r3, #24]
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	441a      	add	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	7d1b      	ldrb	r3, [r3, #20]
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00b      	beq.n	800909e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800908a:	4618      	mov	r0, r3
 800908c:	f7fd fd60 	bl	8006b50 <create_chain>
 8009090:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	2b00      	cmp	r3, #0
 8009096:	d108      	bne.n	80090aa <f_lseek+0x30c>
							ofs = 0; break;
 8009098:	2300      	movs	r3, #0
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	e022      	b.n	80090e4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fd faff 	bl	80066a6 <get_fat>
 80090a8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b0:	d104      	bne.n	80090bc <f_lseek+0x31e>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	755a      	strb	r2, [r3, #21]
 80090b8:	2301      	movs	r3, #1
 80090ba:	e090      	b.n	80091de <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d904      	bls.n	80090cc <f_lseek+0x32e>
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d304      	bcc.n	80090d6 <f_lseek+0x338>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2202      	movs	r2, #2
 80090d0:	755a      	strb	r2, [r3, #21]
 80090d2:	2302      	movs	r3, #2
 80090d4:	e083      	b.n	80091de <f_lseek+0x440>
					fp->clust = clst;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090da:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d8c0      	bhi.n	8009066 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	699a      	ldr	r2, [r3, #24]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	441a      	add	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	899b      	ldrh	r3, [r3, #12]
 80090f4:	461a      	mov	r2, r3
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80090fc:	fb01 f202 	mul.w	r2, r1, r2
 8009100:	1a9b      	subs	r3, r3, r2
 8009102:	2b00      	cmp	r3, #0
 8009104:	d016      	beq.n	8009134 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800910a:	4618      	mov	r0, r3
 800910c:	f7fd faac 	bl	8006668 <clust2sect>
 8009110:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009114:	2b00      	cmp	r3, #0
 8009116:	d104      	bne.n	8009122 <f_lseek+0x384>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	755a      	strb	r2, [r3, #21]
 800911e:	2302      	movs	r3, #2
 8009120:	e05d      	b.n	80091de <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	899b      	ldrh	r3, [r3, #12]
 8009126:	461a      	mov	r2, r3
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	fbb3 f3f2 	udiv	r3, r3, r2
 800912e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009130:	4413      	add	r3, r2
 8009132:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	699a      	ldr	r2, [r3, #24]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	429a      	cmp	r2, r3
 800913e:	d90a      	bls.n	8009156 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	699a      	ldr	r2, [r3, #24]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	7d1b      	ldrb	r3, [r3, #20]
 800914c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009150:	b2da      	uxtb	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	8992      	ldrh	r2, [r2, #12]
 800915e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009162:	fb01 f202 	mul.w	r2, r1, r2
 8009166:	1a9b      	subs	r3, r3, r2
 8009168:	2b00      	cmp	r3, #0
 800916a:	d036      	beq.n	80091da <f_lseek+0x43c>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009172:	429a      	cmp	r2, r3
 8009174:	d031      	beq.n	80091da <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	7d1b      	ldrb	r3, [r3, #20]
 800917a:	b25b      	sxtb	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	da18      	bge.n	80091b2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	7858      	ldrb	r0, [r3, #1]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1a      	ldr	r2, [r3, #32]
 800918e:	2301      	movs	r3, #1
 8009190:	f7fc fede 	bl	8005f50 <disk_write>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <f_lseek+0x406>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	755a      	strb	r2, [r3, #21]
 80091a0:	2301      	movs	r3, #1
 80091a2:	e01c      	b.n	80091de <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	7d1b      	ldrb	r3, [r3, #20]
 80091a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	7858      	ldrb	r0, [r3, #1]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091bc:	2301      	movs	r3, #1
 80091be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091c0:	f7fc fea6 	bl	8005f10 <disk_read>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d004      	beq.n	80091d4 <f_lseek+0x436>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	755a      	strb	r2, [r3, #21]
 80091d0:	2301      	movs	r3, #1
 80091d2:	e004      	b.n	80091de <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80091da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3740      	adds	r7, #64	; 0x40
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b092      	sub	sp, #72	; 0x48
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80091f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80091f6:	f107 030c 	add.w	r3, r7, #12
 80091fa:	2200      	movs	r2, #0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fe fd65 	bl	8007ccc <find_volume>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009208:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800920c:	2b00      	cmp	r3, #0
 800920e:	f040 8099 	bne.w	8009344 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	699a      	ldr	r2, [r3, #24]
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	3b02      	subs	r3, #2
 8009222:	429a      	cmp	r2, r3
 8009224:	d804      	bhi.n	8009230 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	699a      	ldr	r2, [r3, #24]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	e089      	b.n	8009344 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d128      	bne.n	800928e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800923c:	2302      	movs	r3, #2
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009244:	f107 0314 	add.w	r3, r7, #20
 8009248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800924a:	4618      	mov	r0, r3
 800924c:	f7fd fa2b 	bl	80066a6 <get_fat>
 8009250:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009258:	d103      	bne.n	8009262 <f_getfree+0x7c>
 800925a:	2301      	movs	r3, #1
 800925c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009260:	e063      	b.n	800932a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009264:	2b01      	cmp	r3, #1
 8009266:	d103      	bne.n	8009270 <f_getfree+0x8a>
 8009268:	2302      	movs	r3, #2
 800926a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800926e:	e05c      	b.n	800932a <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d102      	bne.n	800927c <f_getfree+0x96>
 8009276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009278:	3301      	adds	r3, #1
 800927a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800927c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927e:	3301      	adds	r3, #1
 8009280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009288:	429a      	cmp	r2, r3
 800928a:	d3db      	bcc.n	8009244 <f_getfree+0x5e>
 800928c:	e04d      	b.n	800932a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009298:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	637b      	str	r3, [r7, #52]	; 0x34
 800929e:	2300      	movs	r3, #0
 80092a0:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80092a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d113      	bne.n	80092d0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80092a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80092b0:	4619      	mov	r1, r3
 80092b2:	f7fd f93b 	bl	800652c <move_window>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80092bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d131      	bne.n	8009328 <f_getfree+0x142>
							p = fs->win;
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	3338      	adds	r3, #56	; 0x38
 80092c8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80092ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092cc:	899b      	ldrh	r3, [r3, #12]
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d10f      	bne.n	80092f8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80092d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092da:	f7fc fe77 	bl	8005fcc <ld_word>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d102      	bne.n	80092ea <f_getfree+0x104>
 80092e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092e6:	3301      	adds	r3, #1
 80092e8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	3302      	adds	r3, #2
 80092ee:	633b      	str	r3, [r7, #48]	; 0x30
 80092f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f2:	3b02      	subs	r3, #2
 80092f4:	637b      	str	r3, [r7, #52]	; 0x34
 80092f6:	e010      	b.n	800931a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80092f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092fa:	f7fc fe7f 	bl	8005ffc <ld_dword>
 80092fe:	4603      	mov	r3, r0
 8009300:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d102      	bne.n	800930e <f_getfree+0x128>
 8009308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800930a:	3301      	adds	r3, #1
 800930c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	3304      	adds	r3, #4
 8009312:	633b      	str	r3, [r7, #48]	; 0x30
 8009314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009316:	3b04      	subs	r3, #4
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800931a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931c:	3b01      	subs	r3, #1
 800931e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1bd      	bne.n	80092a2 <f_getfree+0xbc>
 8009326:	e000      	b.n	800932a <f_getfree+0x144>
							if (res != FR_OK) break;
 8009328:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800932e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009334:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009338:	791a      	ldrb	r2, [r3, #4]
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	f042 0201 	orr.w	r2, r2, #1
 8009340:	b2d2      	uxtb	r2, r2
 8009342:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009344:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009348:	4618      	mov	r0, r3
 800934a:	3748      	adds	r7, #72	; 0x48
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009364:	e01b      	b.n	800939e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009366:	f107 0310 	add.w	r3, r7, #16
 800936a:	f107 0114 	add.w	r1, r7, #20
 800936e:	2201      	movs	r2, #1
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7ff f979 	bl	8008668 <f_read>
		if (rc != 1) break;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d116      	bne.n	80093aa <f_gets+0x5a>
		c = s[0];
 800937c:	7d3b      	ldrb	r3, [r7, #20]
 800937e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	2b0d      	cmp	r3, #13
 8009384:	d100      	bne.n	8009388 <f_gets+0x38>
 8009386:	e00a      	b.n	800939e <f_gets+0x4e>
		*p++ = c;
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	1c5a      	adds	r2, r3, #1
 800938c:	61ba      	str	r2, [r7, #24]
 800938e:	7dfa      	ldrb	r2, [r7, #23]
 8009390:	701a      	strb	r2, [r3, #0]
		n++;
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	3301      	adds	r3, #1
 8009396:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009398:	7dfb      	ldrb	r3, [r7, #23]
 800939a:	2b0a      	cmp	r3, #10
 800939c:	d007      	beq.n	80093ae <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	69fa      	ldr	r2, [r7, #28]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	dbde      	blt.n	8009366 <f_gets+0x16>
 80093a8:	e002      	b.n	80093b0 <f_gets+0x60>
		if (rc != 1) break;
 80093aa:	bf00      	nop
 80093ac:	e000      	b.n	80093b0 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80093ae:	bf00      	nop
	}
	*p = 0;
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	2200      	movs	r2, #0
 80093b4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <f_gets+0x70>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	e000      	b.n	80093c2 <f_gets+0x72>
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3720      	adds	r7, #32
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	460b      	mov	r3, r1
 80093d4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80093d6:	78fb      	ldrb	r3, [r7, #3]
 80093d8:	2b0a      	cmp	r3, #10
 80093da:	d103      	bne.n	80093e4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80093dc:	210d      	movs	r1, #13
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff fff3 	bl	80093ca <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	db25      	blt.n	800943c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	60fa      	str	r2, [r7, #12]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	4413      	add	r3, r2
 80093fa:	78fa      	ldrb	r2, [r7, #3]
 80093fc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2b3c      	cmp	r3, #60	; 0x3c
 8009402:	dd12      	ble.n	800942a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f103 010c 	add.w	r1, r3, #12
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	f107 0308 	add.w	r3, r7, #8
 8009414:	f7ff fa87 	bl	8008926 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	429a      	cmp	r2, r3
 800941e:	d101      	bne.n	8009424 <putc_bfd+0x5a>
 8009420:	2300      	movs	r3, #0
 8009422:	e001      	b.n	8009428 <putc_bfd+0x5e>
 8009424:	f04f 33ff 	mov.w	r3, #4294967295
 8009428:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	609a      	str	r2, [r3, #8]
 800943a:	e000      	b.n	800943e <putc_bfd+0x74>
	if (i < 0) return;
 800943c:	bf00      	nop
}
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	db16      	blt.n	8009482 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6818      	ldr	r0, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f103 010c 	add.w	r1, r3, #12
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	461a      	mov	r2, r3
 8009464:	f107 030c 	add.w	r3, r7, #12
 8009468:	f7ff fa5d 	bl	8008926 <f_write>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d107      	bne.n	8009482 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	4293      	cmp	r3, r2
 800947a:	d102      	bne.n	8009482 <putc_flush+0x3e>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	e001      	b.n	8009486 <putc_flush+0x42>
	return EOF;
 8009482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800948e:	b480      	push	{r7}
 8009490:	b083      	sub	sp, #12
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	605a      	str	r2, [r3, #4]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	609a      	str	r2, [r3, #8]
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b096      	sub	sp, #88	; 0x58
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80094c2:	f107 030c 	add.w	r3, r7, #12
 80094c6:	6839      	ldr	r1, [r7, #0]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff ffe0 	bl	800948e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80094ce:	e009      	b.n	80094e4 <f_puts+0x2c>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	607a      	str	r2, [r7, #4]
 80094d6:	781a      	ldrb	r2, [r3, #0]
 80094d8:	f107 030c 	add.w	r3, r7, #12
 80094dc:	4611      	mov	r1, r2
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff ff73 	bl	80093ca <putc_bfd>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1f1      	bne.n	80094d0 <f_puts+0x18>
	return putc_flush(&pb);
 80094ec:	f107 030c 	add.w	r3, r7, #12
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7ff ffa7 	bl	8009444 <putc_flush>
 80094f6:	4603      	mov	r3, r0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3758      	adds	r7, #88	; 0x58
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8009500:	b40e      	push	{r1, r2, r3}
 8009502:	b580      	push	{r7, lr}
 8009504:	b0a7      	sub	sp, #156	; 0x9c
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800950a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff ffbc 	bl	800948e <putc_init>

	va_start(arp, fmt);
 8009516:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800951a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800951c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800952c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 81f2 	beq.w	800991a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8009536:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800953a:	2b25      	cmp	r3, #37	; 0x25
 800953c:	d008      	beq.n	8009550 <f_printf+0x50>
			putc_bfd(&pb, c);
 800953e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009546:	4611      	mov	r1, r2
 8009548:	4618      	mov	r0, r3
 800954a:	f7ff ff3e 	bl	80093ca <putc_bfd>
			continue;
 800954e:	e1e3      	b.n	8009918 <f_printf+0x418>
		}
		w = f = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009556:	2300      	movs	r3, #0
 8009558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800955c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800956c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009570:	2b30      	cmp	r3, #48	; 0x30
 8009572:	d10b      	bne.n	800958c <f_printf+0x8c>
			f = 1; c = *fmt++;
 8009574:	2301      	movs	r3, #1
 8009576:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800957a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800958a:	e024      	b.n	80095d6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800958c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009590:	2b2d      	cmp	r3, #45	; 0x2d
 8009592:	d120      	bne.n	80095d6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8009594:	2302      	movs	r3, #2
 8009596:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800959a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80095aa:	e014      	b.n	80095d6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80095ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	461a      	mov	r2, r3
 80095ba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80095be:	4413      	add	r3, r2
 80095c0:	3b30      	subs	r3, #48	; 0x30
 80095c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80095c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095ca:	1c5a      	adds	r2, r3, #1
 80095cc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 80095d6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80095da:	2b2f      	cmp	r3, #47	; 0x2f
 80095dc:	d903      	bls.n	80095e6 <f_printf+0xe6>
 80095de:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80095e2:	2b39      	cmp	r3, #57	; 0x39
 80095e4:	d9e2      	bls.n	80095ac <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80095e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80095ea:	2b6c      	cmp	r3, #108	; 0x6c
 80095ec:	d003      	beq.n	80095f6 <f_printf+0xf6>
 80095ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80095f2:	2b4c      	cmp	r3, #76	; 0x4c
 80095f4:	d10d      	bne.n	8009612 <f_printf+0x112>
			f |= 4; c = *fmt++;
 80095f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80095fa:	f043 0304 	orr.w	r3, r3, #4
 80095fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009606:	1c5a      	adds	r2, r3, #1
 8009608:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8009612:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 8181 	beq.w	800991e <f_printf+0x41e>
		d = c;
 800961c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009620:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8009624:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009628:	2b60      	cmp	r3, #96	; 0x60
 800962a:	d908      	bls.n	800963e <f_printf+0x13e>
 800962c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009630:	2b7a      	cmp	r3, #122	; 0x7a
 8009632:	d804      	bhi.n	800963e <f_printf+0x13e>
 8009634:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009638:	3b20      	subs	r3, #32
 800963a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800963e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009642:	3b42      	subs	r3, #66	; 0x42
 8009644:	2b16      	cmp	r3, #22
 8009646:	f200 8098 	bhi.w	800977a <f_printf+0x27a>
 800964a:	a201      	add	r2, pc, #4	; (adr r2, 8009650 <f_printf+0x150>)
 800964c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009650:	0800975b 	.word	0x0800975b
 8009654:	08009743 	.word	0x08009743
 8009658:	0800976b 	.word	0x0800976b
 800965c:	0800977b 	.word	0x0800977b
 8009660:	0800977b 	.word	0x0800977b
 8009664:	0800977b 	.word	0x0800977b
 8009668:	0800977b 	.word	0x0800977b
 800966c:	0800977b 	.word	0x0800977b
 8009670:	0800977b 	.word	0x0800977b
 8009674:	0800977b 	.word	0x0800977b
 8009678:	0800977b 	.word	0x0800977b
 800967c:	0800977b 	.word	0x0800977b
 8009680:	0800977b 	.word	0x0800977b
 8009684:	08009763 	.word	0x08009763
 8009688:	0800977b 	.word	0x0800977b
 800968c:	0800977b 	.word	0x0800977b
 8009690:	0800977b 	.word	0x0800977b
 8009694:	080096ad 	.word	0x080096ad
 8009698:	0800977b 	.word	0x0800977b
 800969c:	0800976b 	.word	0x0800976b
 80096a0:	0800977b 	.word	0x0800977b
 80096a4:	0800977b 	.word	0x0800977b
 80096a8:	08009773 	.word	0x08009773
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80096ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096ae:	1d1a      	adds	r2, r3, #4
 80096b0:	67ba      	str	r2, [r7, #120]	; 0x78
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 80096b6:	2300      	movs	r3, #0
 80096b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80096bc:	e004      	b.n	80096c8 <f_printf+0x1c8>
 80096be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096c2:	3301      	adds	r3, #1
 80096c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80096c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ce:	4413      	add	r3, r2
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1f3      	bne.n	80096be <f_printf+0x1be>
			if (!(f & 2)) {
 80096d6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d11a      	bne.n	8009718 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80096e2:	e005      	b.n	80096f0 <f_printf+0x1f0>
 80096e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096e8:	2120      	movs	r1, #32
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7ff fe6d 	bl	80093ca <putc_bfd>
 80096f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096f4:	1c5a      	adds	r2, r3, #1
 80096f6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80096fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80096fe:	429a      	cmp	r2, r3
 8009700:	d8f0      	bhi.n	80096e4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8009702:	e009      	b.n	8009718 <f_printf+0x218>
 8009704:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	67fa      	str	r2, [r7, #124]	; 0x7c
 800970a:	781a      	ldrb	r2, [r3, #0]
 800970c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009710:	4611      	mov	r1, r2
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff fe59 	bl	80093ca <putc_bfd>
 8009718:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1f1      	bne.n	8009704 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8009720:	e005      	b.n	800972e <f_printf+0x22e>
 8009722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009726:	2120      	movs	r1, #32
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff fe4e 	bl	80093ca <putc_bfd>
 800972e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009738:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800973c:	429a      	cmp	r2, r3
 800973e:	d8f0      	bhi.n	8009722 <f_printf+0x222>
			continue;
 8009740:	e0ea      	b.n	8009918 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8009742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009744:	1d1a      	adds	r2, r3, #4
 8009746:	67ba      	str	r2, [r7, #120]	; 0x78
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	b2da      	uxtb	r2, r3
 800974c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009750:	4611      	mov	r1, r2
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff fe39 	bl	80093ca <putc_bfd>
 8009758:	e0de      	b.n	8009918 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800975a:	2302      	movs	r3, #2
 800975c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009760:	e014      	b.n	800978c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8009762:	2308      	movs	r3, #8
 8009764:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009768:	e010      	b.n	800978c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800976a:	230a      	movs	r3, #10
 800976c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009770:	e00c      	b.n	800978c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8009772:	2310      	movs	r3, #16
 8009774:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009778:	e008      	b.n	800978c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800977a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800977e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009782:	4611      	mov	r1, r2
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff fe20 	bl	80093ca <putc_bfd>
 800978a:	e0c5      	b.n	8009918 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800978c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009790:	f003 0304 	and.w	r3, r3, #4
 8009794:	2b00      	cmp	r3, #0
 8009796:	d004      	beq.n	80097a2 <f_printf+0x2a2>
 8009798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800979a:	1d1a      	adds	r2, r3, #4
 800979c:	67ba      	str	r2, [r7, #120]	; 0x78
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	e00c      	b.n	80097bc <f_printf+0x2bc>
 80097a2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80097a6:	2b44      	cmp	r3, #68	; 0x44
 80097a8:	d104      	bne.n	80097b4 <f_printf+0x2b4>
 80097aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097ac:	1d1a      	adds	r2, r3, #4
 80097ae:	67ba      	str	r2, [r7, #120]	; 0x78
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	e003      	b.n	80097bc <f_printf+0x2bc>
 80097b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097b6:	1d1a      	adds	r2, r3, #4
 80097b8:	67ba      	str	r2, [r7, #120]	; 0x78
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80097c0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80097c4:	2b44      	cmp	r3, #68	; 0x44
 80097c6:	d10e      	bne.n	80097e6 <f_printf+0x2e6>
 80097c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	da0a      	bge.n	80097e6 <f_printf+0x2e6>
			v = 0 - v;
 80097d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097d4:	425b      	negs	r3, r3
 80097d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 80097da:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80097de:	f043 0308 	orr.w	r3, r3, #8
 80097e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80097ec:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80097f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80097f8:	fb01 f202 	mul.w	r2, r1, r2
 80097fc:	1a9b      	subs	r3, r3, r2
 80097fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8009802:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8009806:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800980a:	fbb2 f3f3 	udiv	r3, r2, r3
 800980e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8009812:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009816:	2b09      	cmp	r3, #9
 8009818:	d90b      	bls.n	8009832 <f_printf+0x332>
 800981a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800981e:	2b78      	cmp	r3, #120	; 0x78
 8009820:	d101      	bne.n	8009826 <f_printf+0x326>
 8009822:	2227      	movs	r2, #39	; 0x27
 8009824:	e000      	b.n	8009828 <f_printf+0x328>
 8009826:	2207      	movs	r2, #7
 8009828:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800982c:	4413      	add	r3, r2
 800982e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8009832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800983c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009840:	3230      	adds	r2, #48	; 0x30
 8009842:	b2d2      	uxtb	r2, r2
 8009844:	3398      	adds	r3, #152	; 0x98
 8009846:	443b      	add	r3, r7
 8009848:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800984c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009850:	2b00      	cmp	r3, #0
 8009852:	d003      	beq.n	800985c <f_printf+0x35c>
 8009854:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009858:	2b1f      	cmp	r3, #31
 800985a:	d9c7      	bls.n	80097ec <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800985c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b00      	cmp	r3, #0
 8009866:	d009      	beq.n	800987c <f_printf+0x37c>
 8009868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009872:	3398      	adds	r3, #152	; 0x98
 8009874:	443b      	add	r3, r7
 8009876:	222d      	movs	r2, #45	; 0x2d
 8009878:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800987c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009884:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <f_printf+0x394>
 8009890:	2330      	movs	r3, #48	; 0x30
 8009892:	e000      	b.n	8009896 <f_printf+0x396>
 8009894:	2320      	movs	r3, #32
 8009896:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800989a:	e007      	b.n	80098ac <f_printf+0x3ac>
 800989c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80098a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098a4:	4611      	mov	r1, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7ff fd8f 	bl	80093ca <putc_bfd>
 80098ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80098b0:	f003 0302 	and.w	r3, r3, #2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d108      	bne.n	80098ca <f_printf+0x3ca>
 80098b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098bc:	1c5a      	adds	r2, r3, #1
 80098be:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80098c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d8e8      	bhi.n	800989c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80098ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098ce:	3b01      	subs	r3, #1
 80098d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098d4:	f107 020c 	add.w	r2, r7, #12
 80098d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098dc:	4413      	add	r3, r2
 80098de:	781a      	ldrb	r2, [r3, #0]
 80098e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098e4:	4611      	mov	r1, r2
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff fd6f 	bl	80093ca <putc_bfd>
		} while (i);
 80098ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1ea      	bne.n	80098ca <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80098f4:	e007      	b.n	8009906 <f_printf+0x406>
 80098f6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80098fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098fe:	4611      	mov	r1, r2
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff fd62 	bl	80093ca <putc_bfd>
 8009906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009910:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009914:	429a      	cmp	r2, r3
 8009916:	d8ee      	bhi.n	80098f6 <f_printf+0x3f6>
		c = *fmt++;
 8009918:	e600      	b.n	800951c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800991a:	bf00      	nop
 800991c:	e000      	b.n	8009920 <f_printf+0x420>
		if (!c) break;
 800991e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8009920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff fd8d 	bl	8009444 <putc_flush>
 800992a:	4603      	mov	r3, r0
}
 800992c:	4618      	mov	r0, r3
 800992e:	379c      	adds	r7, #156	; 0x9c
 8009930:	46bd      	mov	sp, r7
 8009932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009936:	b003      	add	sp, #12
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop

0800993c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	4613      	mov	r3, r2
 8009948:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800994a:	2301      	movs	r3, #1
 800994c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009952:	4b1f      	ldr	r3, [pc, #124]	; (80099d0 <FATFS_LinkDriverEx+0x94>)
 8009954:	7a5b      	ldrb	r3, [r3, #9]
 8009956:	b2db      	uxtb	r3, r3
 8009958:	2b00      	cmp	r3, #0
 800995a:	d131      	bne.n	80099c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800995c:	4b1c      	ldr	r3, [pc, #112]	; (80099d0 <FATFS_LinkDriverEx+0x94>)
 800995e:	7a5b      	ldrb	r3, [r3, #9]
 8009960:	b2db      	uxtb	r3, r3
 8009962:	461a      	mov	r2, r3
 8009964:	4b1a      	ldr	r3, [pc, #104]	; (80099d0 <FATFS_LinkDriverEx+0x94>)
 8009966:	2100      	movs	r1, #0
 8009968:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800996a:	4b19      	ldr	r3, [pc, #100]	; (80099d0 <FATFS_LinkDriverEx+0x94>)
 800996c:	7a5b      	ldrb	r3, [r3, #9]
 800996e:	b2db      	uxtb	r3, r3
 8009970:	4a17      	ldr	r2, [pc, #92]	; (80099d0 <FATFS_LinkDriverEx+0x94>)
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800997a:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <FATFS_LinkDriverEx+0x94>)
 800997c:	7a5b      	ldrb	r3, [r3, #9]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	461a      	mov	r2, r3
 8009982:	4b13      	ldr	r3, [pc, #76]	; (80099d0 <FATFS_LinkDriverEx+0x94>)
 8009984:	4413      	add	r3, r2
 8009986:	79fa      	ldrb	r2, [r7, #7]
 8009988:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800998a:	4b11      	ldr	r3, [pc, #68]	; (80099d0 <FATFS_LinkDriverEx+0x94>)
 800998c:	7a5b      	ldrb	r3, [r3, #9]
 800998e:	b2db      	uxtb	r3, r3
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	b2d1      	uxtb	r1, r2
 8009994:	4a0e      	ldr	r2, [pc, #56]	; (80099d0 <FATFS_LinkDriverEx+0x94>)
 8009996:	7251      	strb	r1, [r2, #9]
 8009998:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800999a:	7dbb      	ldrb	r3, [r7, #22]
 800999c:	3330      	adds	r3, #48	; 0x30
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	3301      	adds	r3, #1
 80099a8:	223a      	movs	r2, #58	; 0x3a
 80099aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	3302      	adds	r3, #2
 80099b0:	222f      	movs	r2, #47	; 0x2f
 80099b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	3303      	adds	r3, #3
 80099b8:	2200      	movs	r2, #0
 80099ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	20002928 	.word	0x20002928

080099d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80099de:	2200      	movs	r2, #0
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff ffaa 	bl	800993c <FATFS_LinkDriverEx>
 80099e8:	4603      	mov	r3, r0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	4603      	mov	r3, r0
 80099fc:	6039      	str	r1, [r7, #0]
 80099fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009a00:	88fb      	ldrh	r3, [r7, #6]
 8009a02:	2b7f      	cmp	r3, #127	; 0x7f
 8009a04:	d802      	bhi.n	8009a0c <ff_convert+0x18>
		c = chr;
 8009a06:	88fb      	ldrh	r3, [r7, #6]
 8009a08:	81fb      	strh	r3, [r7, #14]
 8009a0a:	e025      	b.n	8009a58 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00b      	beq.n	8009a2a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009a12:	88fb      	ldrh	r3, [r7, #6]
 8009a14:	2bff      	cmp	r3, #255	; 0xff
 8009a16:	d805      	bhi.n	8009a24 <ff_convert+0x30>
 8009a18:	88fb      	ldrh	r3, [r7, #6]
 8009a1a:	3b80      	subs	r3, #128	; 0x80
 8009a1c:	4a12      	ldr	r2, [pc, #72]	; (8009a68 <ff_convert+0x74>)
 8009a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a22:	e000      	b.n	8009a26 <ff_convert+0x32>
 8009a24:	2300      	movs	r3, #0
 8009a26:	81fb      	strh	r3, [r7, #14]
 8009a28:	e016      	b.n	8009a58 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	81fb      	strh	r3, [r7, #14]
 8009a2e:	e009      	b.n	8009a44 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009a30:	89fb      	ldrh	r3, [r7, #14]
 8009a32:	4a0d      	ldr	r2, [pc, #52]	; (8009a68 <ff_convert+0x74>)
 8009a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a38:	88fa      	ldrh	r2, [r7, #6]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d006      	beq.n	8009a4c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009a3e:	89fb      	ldrh	r3, [r7, #14]
 8009a40:	3301      	adds	r3, #1
 8009a42:	81fb      	strh	r3, [r7, #14]
 8009a44:	89fb      	ldrh	r3, [r7, #14]
 8009a46:	2b7f      	cmp	r3, #127	; 0x7f
 8009a48:	d9f2      	bls.n	8009a30 <ff_convert+0x3c>
 8009a4a:	e000      	b.n	8009a4e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009a4c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009a4e:	89fb      	ldrh	r3, [r7, #14]
 8009a50:	3380      	adds	r3, #128	; 0x80
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009a58:	89fb      	ldrh	r3, [r7, #14]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	0800b600 	.word	0x0800b600

08009a6c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b087      	sub	sp, #28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009a76:	88fb      	ldrh	r3, [r7, #6]
 8009a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a7c:	d201      	bcs.n	8009a82 <ff_wtoupper+0x16>
 8009a7e:	4b3e      	ldr	r3, [pc, #248]	; (8009b78 <ff_wtoupper+0x10c>)
 8009a80:	e000      	b.n	8009a84 <ff_wtoupper+0x18>
 8009a82:	4b3e      	ldr	r3, [pc, #248]	; (8009b7c <ff_wtoupper+0x110>)
 8009a84:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	1c9a      	adds	r2, r3, #2
 8009a8a:	617a      	str	r2, [r7, #20]
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009a90:	8a7b      	ldrh	r3, [r7, #18]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d068      	beq.n	8009b68 <ff_wtoupper+0xfc>
 8009a96:	88fa      	ldrh	r2, [r7, #6]
 8009a98:	8a7b      	ldrh	r3, [r7, #18]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d364      	bcc.n	8009b68 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	1c9a      	adds	r2, r3, #2
 8009aa2:	617a      	str	r2, [r7, #20]
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	823b      	strh	r3, [r7, #16]
 8009aa8:	8a3b      	ldrh	r3, [r7, #16]
 8009aaa:	0a1b      	lsrs	r3, r3, #8
 8009aac:	81fb      	strh	r3, [r7, #14]
 8009aae:	8a3b      	ldrh	r3, [r7, #16]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009ab4:	88fa      	ldrh	r2, [r7, #6]
 8009ab6:	8a79      	ldrh	r1, [r7, #18]
 8009ab8:	8a3b      	ldrh	r3, [r7, #16]
 8009aba:	440b      	add	r3, r1
 8009abc:	429a      	cmp	r2, r3
 8009abe:	da49      	bge.n	8009b54 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009ac0:	89fb      	ldrh	r3, [r7, #14]
 8009ac2:	2b08      	cmp	r3, #8
 8009ac4:	d84f      	bhi.n	8009b66 <ff_wtoupper+0xfa>
 8009ac6:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <ff_wtoupper+0x60>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009af1 	.word	0x08009af1
 8009ad0:	08009b03 	.word	0x08009b03
 8009ad4:	08009b19 	.word	0x08009b19
 8009ad8:	08009b21 	.word	0x08009b21
 8009adc:	08009b29 	.word	0x08009b29
 8009ae0:	08009b31 	.word	0x08009b31
 8009ae4:	08009b39 	.word	0x08009b39
 8009ae8:	08009b41 	.word	0x08009b41
 8009aec:	08009b49 	.word	0x08009b49
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009af0:	88fa      	ldrh	r2, [r7, #6]
 8009af2:	8a7b      	ldrh	r3, [r7, #18]
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	4413      	add	r3, r2
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	80fb      	strh	r3, [r7, #6]
 8009b00:	e027      	b.n	8009b52 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009b02:	88fa      	ldrh	r2, [r7, #6]
 8009b04:	8a7b      	ldrh	r3, [r7, #18]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	88fa      	ldrh	r2, [r7, #6]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	80fb      	strh	r3, [r7, #6]
 8009b16:	e01c      	b.n	8009b52 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009b18:	88fb      	ldrh	r3, [r7, #6]
 8009b1a:	3b10      	subs	r3, #16
 8009b1c:	80fb      	strh	r3, [r7, #6]
 8009b1e:	e018      	b.n	8009b52 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009b20:	88fb      	ldrh	r3, [r7, #6]
 8009b22:	3b20      	subs	r3, #32
 8009b24:	80fb      	strh	r3, [r7, #6]
 8009b26:	e014      	b.n	8009b52 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009b28:	88fb      	ldrh	r3, [r7, #6]
 8009b2a:	3b30      	subs	r3, #48	; 0x30
 8009b2c:	80fb      	strh	r3, [r7, #6]
 8009b2e:	e010      	b.n	8009b52 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009b30:	88fb      	ldrh	r3, [r7, #6]
 8009b32:	3b1a      	subs	r3, #26
 8009b34:	80fb      	strh	r3, [r7, #6]
 8009b36:	e00c      	b.n	8009b52 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009b38:	88fb      	ldrh	r3, [r7, #6]
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	80fb      	strh	r3, [r7, #6]
 8009b3e:	e008      	b.n	8009b52 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009b40:	88fb      	ldrh	r3, [r7, #6]
 8009b42:	3b50      	subs	r3, #80	; 0x50
 8009b44:	80fb      	strh	r3, [r7, #6]
 8009b46:	e004      	b.n	8009b52 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009b48:	88fb      	ldrh	r3, [r7, #6]
 8009b4a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8009b4e:	80fb      	strh	r3, [r7, #6]
 8009b50:	bf00      	nop
			}
			break;
 8009b52:	e008      	b.n	8009b66 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009b54:	89fb      	ldrh	r3, [r7, #14]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d195      	bne.n	8009a86 <ff_wtoupper+0x1a>
 8009b5a:	8a3b      	ldrh	r3, [r7, #16]
 8009b5c:	005b      	lsls	r3, r3, #1
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	4413      	add	r3, r2
 8009b62:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009b64:	e78f      	b.n	8009a86 <ff_wtoupper+0x1a>
			break;
 8009b66:	bf00      	nop
	}

	return chr;
 8009b68:	88fb      	ldrh	r3, [r7, #6]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	371c      	adds	r7, #28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	0800b700 	.word	0x0800b700
 8009b7c:	0800b8f4 	.word	0x0800b8f4

08009b80 <__errno>:
 8009b80:	4b01      	ldr	r3, [pc, #4]	; (8009b88 <__errno+0x8>)
 8009b82:	6818      	ldr	r0, [r3, #0]
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	20000028 	.word	0x20000028

08009b8c <__libc_init_array>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	4d0d      	ldr	r5, [pc, #52]	; (8009bc4 <__libc_init_array+0x38>)
 8009b90:	4c0d      	ldr	r4, [pc, #52]	; (8009bc8 <__libc_init_array+0x3c>)
 8009b92:	1b64      	subs	r4, r4, r5
 8009b94:	10a4      	asrs	r4, r4, #2
 8009b96:	2600      	movs	r6, #0
 8009b98:	42a6      	cmp	r6, r4
 8009b9a:	d109      	bne.n	8009bb0 <__libc_init_array+0x24>
 8009b9c:	4d0b      	ldr	r5, [pc, #44]	; (8009bcc <__libc_init_array+0x40>)
 8009b9e:	4c0c      	ldr	r4, [pc, #48]	; (8009bd0 <__libc_init_array+0x44>)
 8009ba0:	f001 fbd4 	bl	800b34c <_init>
 8009ba4:	1b64      	subs	r4, r4, r5
 8009ba6:	10a4      	asrs	r4, r4, #2
 8009ba8:	2600      	movs	r6, #0
 8009baa:	42a6      	cmp	r6, r4
 8009bac:	d105      	bne.n	8009bba <__libc_init_array+0x2e>
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb4:	4798      	blx	r3
 8009bb6:	3601      	adds	r6, #1
 8009bb8:	e7ee      	b.n	8009b98 <__libc_init_array+0xc>
 8009bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bbe:	4798      	blx	r3
 8009bc0:	3601      	adds	r6, #1
 8009bc2:	e7f2      	b.n	8009baa <__libc_init_array+0x1e>
 8009bc4:	0800ba20 	.word	0x0800ba20
 8009bc8:	0800ba20 	.word	0x0800ba20
 8009bcc:	0800ba20 	.word	0x0800ba20
 8009bd0:	0800ba24 	.word	0x0800ba24

08009bd4 <memset>:
 8009bd4:	4402      	add	r2, r0
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d100      	bne.n	8009bde <memset+0xa>
 8009bdc:	4770      	bx	lr
 8009bde:	f803 1b01 	strb.w	r1, [r3], #1
 8009be2:	e7f9      	b.n	8009bd8 <memset+0x4>

08009be4 <siprintf>:
 8009be4:	b40e      	push	{r1, r2, r3}
 8009be6:	b500      	push	{lr}
 8009be8:	b09c      	sub	sp, #112	; 0x70
 8009bea:	ab1d      	add	r3, sp, #116	; 0x74
 8009bec:	9002      	str	r0, [sp, #8]
 8009bee:	9006      	str	r0, [sp, #24]
 8009bf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bf4:	4809      	ldr	r0, [pc, #36]	; (8009c1c <siprintf+0x38>)
 8009bf6:	9107      	str	r1, [sp, #28]
 8009bf8:	9104      	str	r1, [sp, #16]
 8009bfa:	4909      	ldr	r1, [pc, #36]	; (8009c20 <siprintf+0x3c>)
 8009bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c00:	9105      	str	r1, [sp, #20]
 8009c02:	6800      	ldr	r0, [r0, #0]
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	a902      	add	r1, sp, #8
 8009c08:	f000 f868 	bl	8009cdc <_svfiprintf_r>
 8009c0c:	9b02      	ldr	r3, [sp, #8]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	b01c      	add	sp, #112	; 0x70
 8009c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c18:	b003      	add	sp, #12
 8009c1a:	4770      	bx	lr
 8009c1c:	20000028 	.word	0x20000028
 8009c20:	ffff0208 	.word	0xffff0208

08009c24 <__ssputs_r>:
 8009c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c28:	688e      	ldr	r6, [r1, #8]
 8009c2a:	429e      	cmp	r6, r3
 8009c2c:	4682      	mov	sl, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	4690      	mov	r8, r2
 8009c32:	461f      	mov	r7, r3
 8009c34:	d838      	bhi.n	8009ca8 <__ssputs_r+0x84>
 8009c36:	898a      	ldrh	r2, [r1, #12]
 8009c38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c3c:	d032      	beq.n	8009ca4 <__ssputs_r+0x80>
 8009c3e:	6825      	ldr	r5, [r4, #0]
 8009c40:	6909      	ldr	r1, [r1, #16]
 8009c42:	eba5 0901 	sub.w	r9, r5, r1
 8009c46:	6965      	ldr	r5, [r4, #20]
 8009c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c50:	3301      	adds	r3, #1
 8009c52:	444b      	add	r3, r9
 8009c54:	106d      	asrs	r5, r5, #1
 8009c56:	429d      	cmp	r5, r3
 8009c58:	bf38      	it	cc
 8009c5a:	461d      	movcc	r5, r3
 8009c5c:	0553      	lsls	r3, r2, #21
 8009c5e:	d531      	bpl.n	8009cc4 <__ssputs_r+0xa0>
 8009c60:	4629      	mov	r1, r5
 8009c62:	f000 fb63 	bl	800a32c <_malloc_r>
 8009c66:	4606      	mov	r6, r0
 8009c68:	b950      	cbnz	r0, 8009c80 <__ssputs_r+0x5c>
 8009c6a:	230c      	movs	r3, #12
 8009c6c:	f8ca 3000 	str.w	r3, [sl]
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c76:	81a3      	strh	r3, [r4, #12]
 8009c78:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c80:	6921      	ldr	r1, [r4, #16]
 8009c82:	464a      	mov	r2, r9
 8009c84:	f000 fabe 	bl	800a204 <memcpy>
 8009c88:	89a3      	ldrh	r3, [r4, #12]
 8009c8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c92:	81a3      	strh	r3, [r4, #12]
 8009c94:	6126      	str	r6, [r4, #16]
 8009c96:	6165      	str	r5, [r4, #20]
 8009c98:	444e      	add	r6, r9
 8009c9a:	eba5 0509 	sub.w	r5, r5, r9
 8009c9e:	6026      	str	r6, [r4, #0]
 8009ca0:	60a5      	str	r5, [r4, #8]
 8009ca2:	463e      	mov	r6, r7
 8009ca4:	42be      	cmp	r6, r7
 8009ca6:	d900      	bls.n	8009caa <__ssputs_r+0x86>
 8009ca8:	463e      	mov	r6, r7
 8009caa:	6820      	ldr	r0, [r4, #0]
 8009cac:	4632      	mov	r2, r6
 8009cae:	4641      	mov	r1, r8
 8009cb0:	f000 fab6 	bl	800a220 <memmove>
 8009cb4:	68a3      	ldr	r3, [r4, #8]
 8009cb6:	1b9b      	subs	r3, r3, r6
 8009cb8:	60a3      	str	r3, [r4, #8]
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	4433      	add	r3, r6
 8009cbe:	6023      	str	r3, [r4, #0]
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	e7db      	b.n	8009c7c <__ssputs_r+0x58>
 8009cc4:	462a      	mov	r2, r5
 8009cc6:	f000 fba5 	bl	800a414 <_realloc_r>
 8009cca:	4606      	mov	r6, r0
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d1e1      	bne.n	8009c94 <__ssputs_r+0x70>
 8009cd0:	6921      	ldr	r1, [r4, #16]
 8009cd2:	4650      	mov	r0, sl
 8009cd4:	f000 fabe 	bl	800a254 <_free_r>
 8009cd8:	e7c7      	b.n	8009c6a <__ssputs_r+0x46>
	...

08009cdc <_svfiprintf_r>:
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	4698      	mov	r8, r3
 8009ce2:	898b      	ldrh	r3, [r1, #12]
 8009ce4:	061b      	lsls	r3, r3, #24
 8009ce6:	b09d      	sub	sp, #116	; 0x74
 8009ce8:	4607      	mov	r7, r0
 8009cea:	460d      	mov	r5, r1
 8009cec:	4614      	mov	r4, r2
 8009cee:	d50e      	bpl.n	8009d0e <_svfiprintf_r+0x32>
 8009cf0:	690b      	ldr	r3, [r1, #16]
 8009cf2:	b963      	cbnz	r3, 8009d0e <_svfiprintf_r+0x32>
 8009cf4:	2140      	movs	r1, #64	; 0x40
 8009cf6:	f000 fb19 	bl	800a32c <_malloc_r>
 8009cfa:	6028      	str	r0, [r5, #0]
 8009cfc:	6128      	str	r0, [r5, #16]
 8009cfe:	b920      	cbnz	r0, 8009d0a <_svfiprintf_r+0x2e>
 8009d00:	230c      	movs	r3, #12
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	e0d1      	b.n	8009eae <_svfiprintf_r+0x1d2>
 8009d0a:	2340      	movs	r3, #64	; 0x40
 8009d0c:	616b      	str	r3, [r5, #20]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9309      	str	r3, [sp, #36]	; 0x24
 8009d12:	2320      	movs	r3, #32
 8009d14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d1c:	2330      	movs	r3, #48	; 0x30
 8009d1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ec8 <_svfiprintf_r+0x1ec>
 8009d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d26:	f04f 0901 	mov.w	r9, #1
 8009d2a:	4623      	mov	r3, r4
 8009d2c:	469a      	mov	sl, r3
 8009d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d32:	b10a      	cbz	r2, 8009d38 <_svfiprintf_r+0x5c>
 8009d34:	2a25      	cmp	r2, #37	; 0x25
 8009d36:	d1f9      	bne.n	8009d2c <_svfiprintf_r+0x50>
 8009d38:	ebba 0b04 	subs.w	fp, sl, r4
 8009d3c:	d00b      	beq.n	8009d56 <_svfiprintf_r+0x7a>
 8009d3e:	465b      	mov	r3, fp
 8009d40:	4622      	mov	r2, r4
 8009d42:	4629      	mov	r1, r5
 8009d44:	4638      	mov	r0, r7
 8009d46:	f7ff ff6d 	bl	8009c24 <__ssputs_r>
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f000 80aa 	beq.w	8009ea4 <_svfiprintf_r+0x1c8>
 8009d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d52:	445a      	add	r2, fp
 8009d54:	9209      	str	r2, [sp, #36]	; 0x24
 8009d56:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 80a2 	beq.w	8009ea4 <_svfiprintf_r+0x1c8>
 8009d60:	2300      	movs	r3, #0
 8009d62:	f04f 32ff 	mov.w	r2, #4294967295
 8009d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d6a:	f10a 0a01 	add.w	sl, sl, #1
 8009d6e:	9304      	str	r3, [sp, #16]
 8009d70:	9307      	str	r3, [sp, #28]
 8009d72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d76:	931a      	str	r3, [sp, #104]	; 0x68
 8009d78:	4654      	mov	r4, sl
 8009d7a:	2205      	movs	r2, #5
 8009d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d80:	4851      	ldr	r0, [pc, #324]	; (8009ec8 <_svfiprintf_r+0x1ec>)
 8009d82:	f7f6 fa4d 	bl	8000220 <memchr>
 8009d86:	9a04      	ldr	r2, [sp, #16]
 8009d88:	b9d8      	cbnz	r0, 8009dc2 <_svfiprintf_r+0xe6>
 8009d8a:	06d0      	lsls	r0, r2, #27
 8009d8c:	bf44      	itt	mi
 8009d8e:	2320      	movmi	r3, #32
 8009d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d94:	0711      	lsls	r1, r2, #28
 8009d96:	bf44      	itt	mi
 8009d98:	232b      	movmi	r3, #43	; 0x2b
 8009d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009da2:	2b2a      	cmp	r3, #42	; 0x2a
 8009da4:	d015      	beq.n	8009dd2 <_svfiprintf_r+0xf6>
 8009da6:	9a07      	ldr	r2, [sp, #28]
 8009da8:	4654      	mov	r4, sl
 8009daa:	2000      	movs	r0, #0
 8009dac:	f04f 0c0a 	mov.w	ip, #10
 8009db0:	4621      	mov	r1, r4
 8009db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db6:	3b30      	subs	r3, #48	; 0x30
 8009db8:	2b09      	cmp	r3, #9
 8009dba:	d94e      	bls.n	8009e5a <_svfiprintf_r+0x17e>
 8009dbc:	b1b0      	cbz	r0, 8009dec <_svfiprintf_r+0x110>
 8009dbe:	9207      	str	r2, [sp, #28]
 8009dc0:	e014      	b.n	8009dec <_svfiprintf_r+0x110>
 8009dc2:	eba0 0308 	sub.w	r3, r0, r8
 8009dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	9304      	str	r3, [sp, #16]
 8009dce:	46a2      	mov	sl, r4
 8009dd0:	e7d2      	b.n	8009d78 <_svfiprintf_r+0x9c>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	1d19      	adds	r1, r3, #4
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	9103      	str	r1, [sp, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bfbb      	ittet	lt
 8009dde:	425b      	neglt	r3, r3
 8009de0:	f042 0202 	orrlt.w	r2, r2, #2
 8009de4:	9307      	strge	r3, [sp, #28]
 8009de6:	9307      	strlt	r3, [sp, #28]
 8009de8:	bfb8      	it	lt
 8009dea:	9204      	strlt	r2, [sp, #16]
 8009dec:	7823      	ldrb	r3, [r4, #0]
 8009dee:	2b2e      	cmp	r3, #46	; 0x2e
 8009df0:	d10c      	bne.n	8009e0c <_svfiprintf_r+0x130>
 8009df2:	7863      	ldrb	r3, [r4, #1]
 8009df4:	2b2a      	cmp	r3, #42	; 0x2a
 8009df6:	d135      	bne.n	8009e64 <_svfiprintf_r+0x188>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	1d1a      	adds	r2, r3, #4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	9203      	str	r2, [sp, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	bfb8      	it	lt
 8009e04:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e08:	3402      	adds	r4, #2
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ed8 <_svfiprintf_r+0x1fc>
 8009e10:	7821      	ldrb	r1, [r4, #0]
 8009e12:	2203      	movs	r2, #3
 8009e14:	4650      	mov	r0, sl
 8009e16:	f7f6 fa03 	bl	8000220 <memchr>
 8009e1a:	b140      	cbz	r0, 8009e2e <_svfiprintf_r+0x152>
 8009e1c:	2340      	movs	r3, #64	; 0x40
 8009e1e:	eba0 000a 	sub.w	r0, r0, sl
 8009e22:	fa03 f000 	lsl.w	r0, r3, r0
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	4303      	orrs	r3, r0
 8009e2a:	3401      	adds	r4, #1
 8009e2c:	9304      	str	r3, [sp, #16]
 8009e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e32:	4826      	ldr	r0, [pc, #152]	; (8009ecc <_svfiprintf_r+0x1f0>)
 8009e34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e38:	2206      	movs	r2, #6
 8009e3a:	f7f6 f9f1 	bl	8000220 <memchr>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d038      	beq.n	8009eb4 <_svfiprintf_r+0x1d8>
 8009e42:	4b23      	ldr	r3, [pc, #140]	; (8009ed0 <_svfiprintf_r+0x1f4>)
 8009e44:	bb1b      	cbnz	r3, 8009e8e <_svfiprintf_r+0x1b2>
 8009e46:	9b03      	ldr	r3, [sp, #12]
 8009e48:	3307      	adds	r3, #7
 8009e4a:	f023 0307 	bic.w	r3, r3, #7
 8009e4e:	3308      	adds	r3, #8
 8009e50:	9303      	str	r3, [sp, #12]
 8009e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e54:	4433      	add	r3, r6
 8009e56:	9309      	str	r3, [sp, #36]	; 0x24
 8009e58:	e767      	b.n	8009d2a <_svfiprintf_r+0x4e>
 8009e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e5e:	460c      	mov	r4, r1
 8009e60:	2001      	movs	r0, #1
 8009e62:	e7a5      	b.n	8009db0 <_svfiprintf_r+0xd4>
 8009e64:	2300      	movs	r3, #0
 8009e66:	3401      	adds	r4, #1
 8009e68:	9305      	str	r3, [sp, #20]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	f04f 0c0a 	mov.w	ip, #10
 8009e70:	4620      	mov	r0, r4
 8009e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e76:	3a30      	subs	r2, #48	; 0x30
 8009e78:	2a09      	cmp	r2, #9
 8009e7a:	d903      	bls.n	8009e84 <_svfiprintf_r+0x1a8>
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0c5      	beq.n	8009e0c <_svfiprintf_r+0x130>
 8009e80:	9105      	str	r1, [sp, #20]
 8009e82:	e7c3      	b.n	8009e0c <_svfiprintf_r+0x130>
 8009e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e88:	4604      	mov	r4, r0
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e7f0      	b.n	8009e70 <_svfiprintf_r+0x194>
 8009e8e:	ab03      	add	r3, sp, #12
 8009e90:	9300      	str	r3, [sp, #0]
 8009e92:	462a      	mov	r2, r5
 8009e94:	4b0f      	ldr	r3, [pc, #60]	; (8009ed4 <_svfiprintf_r+0x1f8>)
 8009e96:	a904      	add	r1, sp, #16
 8009e98:	4638      	mov	r0, r7
 8009e9a:	f3af 8000 	nop.w
 8009e9e:	1c42      	adds	r2, r0, #1
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	d1d6      	bne.n	8009e52 <_svfiprintf_r+0x176>
 8009ea4:	89ab      	ldrh	r3, [r5, #12]
 8009ea6:	065b      	lsls	r3, r3, #25
 8009ea8:	f53f af2c 	bmi.w	8009d04 <_svfiprintf_r+0x28>
 8009eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eae:	b01d      	add	sp, #116	; 0x74
 8009eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb4:	ab03      	add	r3, sp, #12
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	462a      	mov	r2, r5
 8009eba:	4b06      	ldr	r3, [pc, #24]	; (8009ed4 <_svfiprintf_r+0x1f8>)
 8009ebc:	a904      	add	r1, sp, #16
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f000 f87a 	bl	8009fb8 <_printf_i>
 8009ec4:	e7eb      	b.n	8009e9e <_svfiprintf_r+0x1c2>
 8009ec6:	bf00      	nop
 8009ec8:	0800b9b0 	.word	0x0800b9b0
 8009ecc:	0800b9ba 	.word	0x0800b9ba
 8009ed0:	00000000 	.word	0x00000000
 8009ed4:	08009c25 	.word	0x08009c25
 8009ed8:	0800b9b6 	.word	0x0800b9b6

08009edc <_printf_common>:
 8009edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee0:	4616      	mov	r6, r2
 8009ee2:	4699      	mov	r9, r3
 8009ee4:	688a      	ldr	r2, [r1, #8]
 8009ee6:	690b      	ldr	r3, [r1, #16]
 8009ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009eec:	4293      	cmp	r3, r2
 8009eee:	bfb8      	it	lt
 8009ef0:	4613      	movlt	r3, r2
 8009ef2:	6033      	str	r3, [r6, #0]
 8009ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ef8:	4607      	mov	r7, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	b10a      	cbz	r2, 8009f02 <_printf_common+0x26>
 8009efe:	3301      	adds	r3, #1
 8009f00:	6033      	str	r3, [r6, #0]
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	0699      	lsls	r1, r3, #26
 8009f06:	bf42      	ittt	mi
 8009f08:	6833      	ldrmi	r3, [r6, #0]
 8009f0a:	3302      	addmi	r3, #2
 8009f0c:	6033      	strmi	r3, [r6, #0]
 8009f0e:	6825      	ldr	r5, [r4, #0]
 8009f10:	f015 0506 	ands.w	r5, r5, #6
 8009f14:	d106      	bne.n	8009f24 <_printf_common+0x48>
 8009f16:	f104 0a19 	add.w	sl, r4, #25
 8009f1a:	68e3      	ldr	r3, [r4, #12]
 8009f1c:	6832      	ldr	r2, [r6, #0]
 8009f1e:	1a9b      	subs	r3, r3, r2
 8009f20:	42ab      	cmp	r3, r5
 8009f22:	dc26      	bgt.n	8009f72 <_printf_common+0x96>
 8009f24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f28:	1e13      	subs	r3, r2, #0
 8009f2a:	6822      	ldr	r2, [r4, #0]
 8009f2c:	bf18      	it	ne
 8009f2e:	2301      	movne	r3, #1
 8009f30:	0692      	lsls	r2, r2, #26
 8009f32:	d42b      	bmi.n	8009f8c <_printf_common+0xb0>
 8009f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f38:	4649      	mov	r1, r9
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	47c0      	blx	r8
 8009f3e:	3001      	adds	r0, #1
 8009f40:	d01e      	beq.n	8009f80 <_printf_common+0xa4>
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	68e5      	ldr	r5, [r4, #12]
 8009f46:	6832      	ldr	r2, [r6, #0]
 8009f48:	f003 0306 	and.w	r3, r3, #6
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	bf08      	it	eq
 8009f50:	1aad      	subeq	r5, r5, r2
 8009f52:	68a3      	ldr	r3, [r4, #8]
 8009f54:	6922      	ldr	r2, [r4, #16]
 8009f56:	bf0c      	ite	eq
 8009f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f5c:	2500      	movne	r5, #0
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	bfc4      	itt	gt
 8009f62:	1a9b      	subgt	r3, r3, r2
 8009f64:	18ed      	addgt	r5, r5, r3
 8009f66:	2600      	movs	r6, #0
 8009f68:	341a      	adds	r4, #26
 8009f6a:	42b5      	cmp	r5, r6
 8009f6c:	d11a      	bne.n	8009fa4 <_printf_common+0xc8>
 8009f6e:	2000      	movs	r0, #0
 8009f70:	e008      	b.n	8009f84 <_printf_common+0xa8>
 8009f72:	2301      	movs	r3, #1
 8009f74:	4652      	mov	r2, sl
 8009f76:	4649      	mov	r1, r9
 8009f78:	4638      	mov	r0, r7
 8009f7a:	47c0      	blx	r8
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	d103      	bne.n	8009f88 <_printf_common+0xac>
 8009f80:	f04f 30ff 	mov.w	r0, #4294967295
 8009f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f88:	3501      	adds	r5, #1
 8009f8a:	e7c6      	b.n	8009f1a <_printf_common+0x3e>
 8009f8c:	18e1      	adds	r1, r4, r3
 8009f8e:	1c5a      	adds	r2, r3, #1
 8009f90:	2030      	movs	r0, #48	; 0x30
 8009f92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f96:	4422      	add	r2, r4
 8009f98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fa0:	3302      	adds	r3, #2
 8009fa2:	e7c7      	b.n	8009f34 <_printf_common+0x58>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	4649      	mov	r1, r9
 8009faa:	4638      	mov	r0, r7
 8009fac:	47c0      	blx	r8
 8009fae:	3001      	adds	r0, #1
 8009fb0:	d0e6      	beq.n	8009f80 <_printf_common+0xa4>
 8009fb2:	3601      	adds	r6, #1
 8009fb4:	e7d9      	b.n	8009f6a <_printf_common+0x8e>
	...

08009fb8 <_printf_i>:
 8009fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbc:	7e0f      	ldrb	r7, [r1, #24]
 8009fbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fc0:	2f78      	cmp	r7, #120	; 0x78
 8009fc2:	4691      	mov	r9, r2
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	469a      	mov	sl, r3
 8009fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fce:	d807      	bhi.n	8009fe0 <_printf_i+0x28>
 8009fd0:	2f62      	cmp	r7, #98	; 0x62
 8009fd2:	d80a      	bhi.n	8009fea <_printf_i+0x32>
 8009fd4:	2f00      	cmp	r7, #0
 8009fd6:	f000 80d8 	beq.w	800a18a <_printf_i+0x1d2>
 8009fda:	2f58      	cmp	r7, #88	; 0x58
 8009fdc:	f000 80a3 	beq.w	800a126 <_printf_i+0x16e>
 8009fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fe8:	e03a      	b.n	800a060 <_printf_i+0xa8>
 8009fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fee:	2b15      	cmp	r3, #21
 8009ff0:	d8f6      	bhi.n	8009fe0 <_printf_i+0x28>
 8009ff2:	a101      	add	r1, pc, #4	; (adr r1, 8009ff8 <_printf_i+0x40>)
 8009ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ff8:	0800a051 	.word	0x0800a051
 8009ffc:	0800a065 	.word	0x0800a065
 800a000:	08009fe1 	.word	0x08009fe1
 800a004:	08009fe1 	.word	0x08009fe1
 800a008:	08009fe1 	.word	0x08009fe1
 800a00c:	08009fe1 	.word	0x08009fe1
 800a010:	0800a065 	.word	0x0800a065
 800a014:	08009fe1 	.word	0x08009fe1
 800a018:	08009fe1 	.word	0x08009fe1
 800a01c:	08009fe1 	.word	0x08009fe1
 800a020:	08009fe1 	.word	0x08009fe1
 800a024:	0800a171 	.word	0x0800a171
 800a028:	0800a095 	.word	0x0800a095
 800a02c:	0800a153 	.word	0x0800a153
 800a030:	08009fe1 	.word	0x08009fe1
 800a034:	08009fe1 	.word	0x08009fe1
 800a038:	0800a193 	.word	0x0800a193
 800a03c:	08009fe1 	.word	0x08009fe1
 800a040:	0800a095 	.word	0x0800a095
 800a044:	08009fe1 	.word	0x08009fe1
 800a048:	08009fe1 	.word	0x08009fe1
 800a04c:	0800a15b 	.word	0x0800a15b
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	1d1a      	adds	r2, r3, #4
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	602a      	str	r2, [r5, #0]
 800a058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a05c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a060:	2301      	movs	r3, #1
 800a062:	e0a3      	b.n	800a1ac <_printf_i+0x1f4>
 800a064:	6820      	ldr	r0, [r4, #0]
 800a066:	6829      	ldr	r1, [r5, #0]
 800a068:	0606      	lsls	r6, r0, #24
 800a06a:	f101 0304 	add.w	r3, r1, #4
 800a06e:	d50a      	bpl.n	800a086 <_printf_i+0xce>
 800a070:	680e      	ldr	r6, [r1, #0]
 800a072:	602b      	str	r3, [r5, #0]
 800a074:	2e00      	cmp	r6, #0
 800a076:	da03      	bge.n	800a080 <_printf_i+0xc8>
 800a078:	232d      	movs	r3, #45	; 0x2d
 800a07a:	4276      	negs	r6, r6
 800a07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a080:	485e      	ldr	r0, [pc, #376]	; (800a1fc <_printf_i+0x244>)
 800a082:	230a      	movs	r3, #10
 800a084:	e019      	b.n	800a0ba <_printf_i+0x102>
 800a086:	680e      	ldr	r6, [r1, #0]
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a08e:	bf18      	it	ne
 800a090:	b236      	sxthne	r6, r6
 800a092:	e7ef      	b.n	800a074 <_printf_i+0xbc>
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	6820      	ldr	r0, [r4, #0]
 800a098:	1d19      	adds	r1, r3, #4
 800a09a:	6029      	str	r1, [r5, #0]
 800a09c:	0601      	lsls	r1, r0, #24
 800a09e:	d501      	bpl.n	800a0a4 <_printf_i+0xec>
 800a0a0:	681e      	ldr	r6, [r3, #0]
 800a0a2:	e002      	b.n	800a0aa <_printf_i+0xf2>
 800a0a4:	0646      	lsls	r6, r0, #25
 800a0a6:	d5fb      	bpl.n	800a0a0 <_printf_i+0xe8>
 800a0a8:	881e      	ldrh	r6, [r3, #0]
 800a0aa:	4854      	ldr	r0, [pc, #336]	; (800a1fc <_printf_i+0x244>)
 800a0ac:	2f6f      	cmp	r7, #111	; 0x6f
 800a0ae:	bf0c      	ite	eq
 800a0b0:	2308      	moveq	r3, #8
 800a0b2:	230a      	movne	r3, #10
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0ba:	6865      	ldr	r5, [r4, #4]
 800a0bc:	60a5      	str	r5, [r4, #8]
 800a0be:	2d00      	cmp	r5, #0
 800a0c0:	bfa2      	ittt	ge
 800a0c2:	6821      	ldrge	r1, [r4, #0]
 800a0c4:	f021 0104 	bicge.w	r1, r1, #4
 800a0c8:	6021      	strge	r1, [r4, #0]
 800a0ca:	b90e      	cbnz	r6, 800a0d0 <_printf_i+0x118>
 800a0cc:	2d00      	cmp	r5, #0
 800a0ce:	d04d      	beq.n	800a16c <_printf_i+0x1b4>
 800a0d0:	4615      	mov	r5, r2
 800a0d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0d6:	fb03 6711 	mls	r7, r3, r1, r6
 800a0da:	5dc7      	ldrb	r7, [r0, r7]
 800a0dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0e0:	4637      	mov	r7, r6
 800a0e2:	42bb      	cmp	r3, r7
 800a0e4:	460e      	mov	r6, r1
 800a0e6:	d9f4      	bls.n	800a0d2 <_printf_i+0x11a>
 800a0e8:	2b08      	cmp	r3, #8
 800a0ea:	d10b      	bne.n	800a104 <_printf_i+0x14c>
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	07de      	lsls	r6, r3, #31
 800a0f0:	d508      	bpl.n	800a104 <_printf_i+0x14c>
 800a0f2:	6923      	ldr	r3, [r4, #16]
 800a0f4:	6861      	ldr	r1, [r4, #4]
 800a0f6:	4299      	cmp	r1, r3
 800a0f8:	bfde      	ittt	le
 800a0fa:	2330      	movle	r3, #48	; 0x30
 800a0fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a100:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a104:	1b52      	subs	r2, r2, r5
 800a106:	6122      	str	r2, [r4, #16]
 800a108:	f8cd a000 	str.w	sl, [sp]
 800a10c:	464b      	mov	r3, r9
 800a10e:	aa03      	add	r2, sp, #12
 800a110:	4621      	mov	r1, r4
 800a112:	4640      	mov	r0, r8
 800a114:	f7ff fee2 	bl	8009edc <_printf_common>
 800a118:	3001      	adds	r0, #1
 800a11a:	d14c      	bne.n	800a1b6 <_printf_i+0x1fe>
 800a11c:	f04f 30ff 	mov.w	r0, #4294967295
 800a120:	b004      	add	sp, #16
 800a122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a126:	4835      	ldr	r0, [pc, #212]	; (800a1fc <_printf_i+0x244>)
 800a128:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a12c:	6829      	ldr	r1, [r5, #0]
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	f851 6b04 	ldr.w	r6, [r1], #4
 800a134:	6029      	str	r1, [r5, #0]
 800a136:	061d      	lsls	r5, r3, #24
 800a138:	d514      	bpl.n	800a164 <_printf_i+0x1ac>
 800a13a:	07df      	lsls	r7, r3, #31
 800a13c:	bf44      	itt	mi
 800a13e:	f043 0320 	orrmi.w	r3, r3, #32
 800a142:	6023      	strmi	r3, [r4, #0]
 800a144:	b91e      	cbnz	r6, 800a14e <_printf_i+0x196>
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	f023 0320 	bic.w	r3, r3, #32
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	2310      	movs	r3, #16
 800a150:	e7b0      	b.n	800a0b4 <_printf_i+0xfc>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	f043 0320 	orr.w	r3, r3, #32
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	2378      	movs	r3, #120	; 0x78
 800a15c:	4828      	ldr	r0, [pc, #160]	; (800a200 <_printf_i+0x248>)
 800a15e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a162:	e7e3      	b.n	800a12c <_printf_i+0x174>
 800a164:	0659      	lsls	r1, r3, #25
 800a166:	bf48      	it	mi
 800a168:	b2b6      	uxthmi	r6, r6
 800a16a:	e7e6      	b.n	800a13a <_printf_i+0x182>
 800a16c:	4615      	mov	r5, r2
 800a16e:	e7bb      	b.n	800a0e8 <_printf_i+0x130>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	6826      	ldr	r6, [r4, #0]
 800a174:	6961      	ldr	r1, [r4, #20]
 800a176:	1d18      	adds	r0, r3, #4
 800a178:	6028      	str	r0, [r5, #0]
 800a17a:	0635      	lsls	r5, r6, #24
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	d501      	bpl.n	800a184 <_printf_i+0x1cc>
 800a180:	6019      	str	r1, [r3, #0]
 800a182:	e002      	b.n	800a18a <_printf_i+0x1d2>
 800a184:	0670      	lsls	r0, r6, #25
 800a186:	d5fb      	bpl.n	800a180 <_printf_i+0x1c8>
 800a188:	8019      	strh	r1, [r3, #0]
 800a18a:	2300      	movs	r3, #0
 800a18c:	6123      	str	r3, [r4, #16]
 800a18e:	4615      	mov	r5, r2
 800a190:	e7ba      	b.n	800a108 <_printf_i+0x150>
 800a192:	682b      	ldr	r3, [r5, #0]
 800a194:	1d1a      	adds	r2, r3, #4
 800a196:	602a      	str	r2, [r5, #0]
 800a198:	681d      	ldr	r5, [r3, #0]
 800a19a:	6862      	ldr	r2, [r4, #4]
 800a19c:	2100      	movs	r1, #0
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f7f6 f83e 	bl	8000220 <memchr>
 800a1a4:	b108      	cbz	r0, 800a1aa <_printf_i+0x1f2>
 800a1a6:	1b40      	subs	r0, r0, r5
 800a1a8:	6060      	str	r0, [r4, #4]
 800a1aa:	6863      	ldr	r3, [r4, #4]
 800a1ac:	6123      	str	r3, [r4, #16]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1b4:	e7a8      	b.n	800a108 <_printf_i+0x150>
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	462a      	mov	r2, r5
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	4640      	mov	r0, r8
 800a1be:	47d0      	blx	sl
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d0ab      	beq.n	800a11c <_printf_i+0x164>
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	079b      	lsls	r3, r3, #30
 800a1c8:	d413      	bmi.n	800a1f2 <_printf_i+0x23a>
 800a1ca:	68e0      	ldr	r0, [r4, #12]
 800a1cc:	9b03      	ldr	r3, [sp, #12]
 800a1ce:	4298      	cmp	r0, r3
 800a1d0:	bfb8      	it	lt
 800a1d2:	4618      	movlt	r0, r3
 800a1d4:	e7a4      	b.n	800a120 <_printf_i+0x168>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	4632      	mov	r2, r6
 800a1da:	4649      	mov	r1, r9
 800a1dc:	4640      	mov	r0, r8
 800a1de:	47d0      	blx	sl
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d09b      	beq.n	800a11c <_printf_i+0x164>
 800a1e4:	3501      	adds	r5, #1
 800a1e6:	68e3      	ldr	r3, [r4, #12]
 800a1e8:	9903      	ldr	r1, [sp, #12]
 800a1ea:	1a5b      	subs	r3, r3, r1
 800a1ec:	42ab      	cmp	r3, r5
 800a1ee:	dcf2      	bgt.n	800a1d6 <_printf_i+0x21e>
 800a1f0:	e7eb      	b.n	800a1ca <_printf_i+0x212>
 800a1f2:	2500      	movs	r5, #0
 800a1f4:	f104 0619 	add.w	r6, r4, #25
 800a1f8:	e7f5      	b.n	800a1e6 <_printf_i+0x22e>
 800a1fa:	bf00      	nop
 800a1fc:	0800b9c1 	.word	0x0800b9c1
 800a200:	0800b9d2 	.word	0x0800b9d2

0800a204 <memcpy>:
 800a204:	440a      	add	r2, r1
 800a206:	4291      	cmp	r1, r2
 800a208:	f100 33ff 	add.w	r3, r0, #4294967295
 800a20c:	d100      	bne.n	800a210 <memcpy+0xc>
 800a20e:	4770      	bx	lr
 800a210:	b510      	push	{r4, lr}
 800a212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a21a:	4291      	cmp	r1, r2
 800a21c:	d1f9      	bne.n	800a212 <memcpy+0xe>
 800a21e:	bd10      	pop	{r4, pc}

0800a220 <memmove>:
 800a220:	4288      	cmp	r0, r1
 800a222:	b510      	push	{r4, lr}
 800a224:	eb01 0402 	add.w	r4, r1, r2
 800a228:	d902      	bls.n	800a230 <memmove+0x10>
 800a22a:	4284      	cmp	r4, r0
 800a22c:	4623      	mov	r3, r4
 800a22e:	d807      	bhi.n	800a240 <memmove+0x20>
 800a230:	1e43      	subs	r3, r0, #1
 800a232:	42a1      	cmp	r1, r4
 800a234:	d008      	beq.n	800a248 <memmove+0x28>
 800a236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a23a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a23e:	e7f8      	b.n	800a232 <memmove+0x12>
 800a240:	4402      	add	r2, r0
 800a242:	4601      	mov	r1, r0
 800a244:	428a      	cmp	r2, r1
 800a246:	d100      	bne.n	800a24a <memmove+0x2a>
 800a248:	bd10      	pop	{r4, pc}
 800a24a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a24e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a252:	e7f7      	b.n	800a244 <memmove+0x24>

0800a254 <_free_r>:
 800a254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a256:	2900      	cmp	r1, #0
 800a258:	d044      	beq.n	800a2e4 <_free_r+0x90>
 800a25a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a25e:	9001      	str	r0, [sp, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	f1a1 0404 	sub.w	r4, r1, #4
 800a266:	bfb8      	it	lt
 800a268:	18e4      	addlt	r4, r4, r3
 800a26a:	f000 f913 	bl	800a494 <__malloc_lock>
 800a26e:	4a1e      	ldr	r2, [pc, #120]	; (800a2e8 <_free_r+0x94>)
 800a270:	9801      	ldr	r0, [sp, #4]
 800a272:	6813      	ldr	r3, [r2, #0]
 800a274:	b933      	cbnz	r3, 800a284 <_free_r+0x30>
 800a276:	6063      	str	r3, [r4, #4]
 800a278:	6014      	str	r4, [r2, #0]
 800a27a:	b003      	add	sp, #12
 800a27c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a280:	f000 b90e 	b.w	800a4a0 <__malloc_unlock>
 800a284:	42a3      	cmp	r3, r4
 800a286:	d908      	bls.n	800a29a <_free_r+0x46>
 800a288:	6825      	ldr	r5, [r4, #0]
 800a28a:	1961      	adds	r1, r4, r5
 800a28c:	428b      	cmp	r3, r1
 800a28e:	bf01      	itttt	eq
 800a290:	6819      	ldreq	r1, [r3, #0]
 800a292:	685b      	ldreq	r3, [r3, #4]
 800a294:	1949      	addeq	r1, r1, r5
 800a296:	6021      	streq	r1, [r4, #0]
 800a298:	e7ed      	b.n	800a276 <_free_r+0x22>
 800a29a:	461a      	mov	r2, r3
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	b10b      	cbz	r3, 800a2a4 <_free_r+0x50>
 800a2a0:	42a3      	cmp	r3, r4
 800a2a2:	d9fa      	bls.n	800a29a <_free_r+0x46>
 800a2a4:	6811      	ldr	r1, [r2, #0]
 800a2a6:	1855      	adds	r5, r2, r1
 800a2a8:	42a5      	cmp	r5, r4
 800a2aa:	d10b      	bne.n	800a2c4 <_free_r+0x70>
 800a2ac:	6824      	ldr	r4, [r4, #0]
 800a2ae:	4421      	add	r1, r4
 800a2b0:	1854      	adds	r4, r2, r1
 800a2b2:	42a3      	cmp	r3, r4
 800a2b4:	6011      	str	r1, [r2, #0]
 800a2b6:	d1e0      	bne.n	800a27a <_free_r+0x26>
 800a2b8:	681c      	ldr	r4, [r3, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	6053      	str	r3, [r2, #4]
 800a2be:	4421      	add	r1, r4
 800a2c0:	6011      	str	r1, [r2, #0]
 800a2c2:	e7da      	b.n	800a27a <_free_r+0x26>
 800a2c4:	d902      	bls.n	800a2cc <_free_r+0x78>
 800a2c6:	230c      	movs	r3, #12
 800a2c8:	6003      	str	r3, [r0, #0]
 800a2ca:	e7d6      	b.n	800a27a <_free_r+0x26>
 800a2cc:	6825      	ldr	r5, [r4, #0]
 800a2ce:	1961      	adds	r1, r4, r5
 800a2d0:	428b      	cmp	r3, r1
 800a2d2:	bf04      	itt	eq
 800a2d4:	6819      	ldreq	r1, [r3, #0]
 800a2d6:	685b      	ldreq	r3, [r3, #4]
 800a2d8:	6063      	str	r3, [r4, #4]
 800a2da:	bf04      	itt	eq
 800a2dc:	1949      	addeq	r1, r1, r5
 800a2de:	6021      	streq	r1, [r4, #0]
 800a2e0:	6054      	str	r4, [r2, #4]
 800a2e2:	e7ca      	b.n	800a27a <_free_r+0x26>
 800a2e4:	b003      	add	sp, #12
 800a2e6:	bd30      	pop	{r4, r5, pc}
 800a2e8:	20002934 	.word	0x20002934

0800a2ec <sbrk_aligned>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	4e0e      	ldr	r6, [pc, #56]	; (800a328 <sbrk_aligned+0x3c>)
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	6831      	ldr	r1, [r6, #0]
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	b911      	cbnz	r1, 800a2fe <sbrk_aligned+0x12>
 800a2f8:	f000 f8bc 	bl	800a474 <_sbrk_r>
 800a2fc:	6030      	str	r0, [r6, #0]
 800a2fe:	4621      	mov	r1, r4
 800a300:	4628      	mov	r0, r5
 800a302:	f000 f8b7 	bl	800a474 <_sbrk_r>
 800a306:	1c43      	adds	r3, r0, #1
 800a308:	d00a      	beq.n	800a320 <sbrk_aligned+0x34>
 800a30a:	1cc4      	adds	r4, r0, #3
 800a30c:	f024 0403 	bic.w	r4, r4, #3
 800a310:	42a0      	cmp	r0, r4
 800a312:	d007      	beq.n	800a324 <sbrk_aligned+0x38>
 800a314:	1a21      	subs	r1, r4, r0
 800a316:	4628      	mov	r0, r5
 800a318:	f000 f8ac 	bl	800a474 <_sbrk_r>
 800a31c:	3001      	adds	r0, #1
 800a31e:	d101      	bne.n	800a324 <sbrk_aligned+0x38>
 800a320:	f04f 34ff 	mov.w	r4, #4294967295
 800a324:	4620      	mov	r0, r4
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	20002938 	.word	0x20002938

0800a32c <_malloc_r>:
 800a32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a330:	1ccd      	adds	r5, r1, #3
 800a332:	f025 0503 	bic.w	r5, r5, #3
 800a336:	3508      	adds	r5, #8
 800a338:	2d0c      	cmp	r5, #12
 800a33a:	bf38      	it	cc
 800a33c:	250c      	movcc	r5, #12
 800a33e:	2d00      	cmp	r5, #0
 800a340:	4607      	mov	r7, r0
 800a342:	db01      	blt.n	800a348 <_malloc_r+0x1c>
 800a344:	42a9      	cmp	r1, r5
 800a346:	d905      	bls.n	800a354 <_malloc_r+0x28>
 800a348:	230c      	movs	r3, #12
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	2600      	movs	r6, #0
 800a34e:	4630      	mov	r0, r6
 800a350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a354:	4e2e      	ldr	r6, [pc, #184]	; (800a410 <_malloc_r+0xe4>)
 800a356:	f000 f89d 	bl	800a494 <__malloc_lock>
 800a35a:	6833      	ldr	r3, [r6, #0]
 800a35c:	461c      	mov	r4, r3
 800a35e:	bb34      	cbnz	r4, 800a3ae <_malloc_r+0x82>
 800a360:	4629      	mov	r1, r5
 800a362:	4638      	mov	r0, r7
 800a364:	f7ff ffc2 	bl	800a2ec <sbrk_aligned>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	4604      	mov	r4, r0
 800a36c:	d14d      	bne.n	800a40a <_malloc_r+0xde>
 800a36e:	6834      	ldr	r4, [r6, #0]
 800a370:	4626      	mov	r6, r4
 800a372:	2e00      	cmp	r6, #0
 800a374:	d140      	bne.n	800a3f8 <_malloc_r+0xcc>
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	4631      	mov	r1, r6
 800a37a:	4638      	mov	r0, r7
 800a37c:	eb04 0803 	add.w	r8, r4, r3
 800a380:	f000 f878 	bl	800a474 <_sbrk_r>
 800a384:	4580      	cmp	r8, r0
 800a386:	d13a      	bne.n	800a3fe <_malloc_r+0xd2>
 800a388:	6821      	ldr	r1, [r4, #0]
 800a38a:	3503      	adds	r5, #3
 800a38c:	1a6d      	subs	r5, r5, r1
 800a38e:	f025 0503 	bic.w	r5, r5, #3
 800a392:	3508      	adds	r5, #8
 800a394:	2d0c      	cmp	r5, #12
 800a396:	bf38      	it	cc
 800a398:	250c      	movcc	r5, #12
 800a39a:	4629      	mov	r1, r5
 800a39c:	4638      	mov	r0, r7
 800a39e:	f7ff ffa5 	bl	800a2ec <sbrk_aligned>
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	d02b      	beq.n	800a3fe <_malloc_r+0xd2>
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	442b      	add	r3, r5
 800a3aa:	6023      	str	r3, [r4, #0]
 800a3ac:	e00e      	b.n	800a3cc <_malloc_r+0xa0>
 800a3ae:	6822      	ldr	r2, [r4, #0]
 800a3b0:	1b52      	subs	r2, r2, r5
 800a3b2:	d41e      	bmi.n	800a3f2 <_malloc_r+0xc6>
 800a3b4:	2a0b      	cmp	r2, #11
 800a3b6:	d916      	bls.n	800a3e6 <_malloc_r+0xba>
 800a3b8:	1961      	adds	r1, r4, r5
 800a3ba:	42a3      	cmp	r3, r4
 800a3bc:	6025      	str	r5, [r4, #0]
 800a3be:	bf18      	it	ne
 800a3c0:	6059      	strne	r1, [r3, #4]
 800a3c2:	6863      	ldr	r3, [r4, #4]
 800a3c4:	bf08      	it	eq
 800a3c6:	6031      	streq	r1, [r6, #0]
 800a3c8:	5162      	str	r2, [r4, r5]
 800a3ca:	604b      	str	r3, [r1, #4]
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	f104 060b 	add.w	r6, r4, #11
 800a3d2:	f000 f865 	bl	800a4a0 <__malloc_unlock>
 800a3d6:	f026 0607 	bic.w	r6, r6, #7
 800a3da:	1d23      	adds	r3, r4, #4
 800a3dc:	1af2      	subs	r2, r6, r3
 800a3de:	d0b6      	beq.n	800a34e <_malloc_r+0x22>
 800a3e0:	1b9b      	subs	r3, r3, r6
 800a3e2:	50a3      	str	r3, [r4, r2]
 800a3e4:	e7b3      	b.n	800a34e <_malloc_r+0x22>
 800a3e6:	6862      	ldr	r2, [r4, #4]
 800a3e8:	42a3      	cmp	r3, r4
 800a3ea:	bf0c      	ite	eq
 800a3ec:	6032      	streq	r2, [r6, #0]
 800a3ee:	605a      	strne	r2, [r3, #4]
 800a3f0:	e7ec      	b.n	800a3cc <_malloc_r+0xa0>
 800a3f2:	4623      	mov	r3, r4
 800a3f4:	6864      	ldr	r4, [r4, #4]
 800a3f6:	e7b2      	b.n	800a35e <_malloc_r+0x32>
 800a3f8:	4634      	mov	r4, r6
 800a3fa:	6876      	ldr	r6, [r6, #4]
 800a3fc:	e7b9      	b.n	800a372 <_malloc_r+0x46>
 800a3fe:	230c      	movs	r3, #12
 800a400:	603b      	str	r3, [r7, #0]
 800a402:	4638      	mov	r0, r7
 800a404:	f000 f84c 	bl	800a4a0 <__malloc_unlock>
 800a408:	e7a1      	b.n	800a34e <_malloc_r+0x22>
 800a40a:	6025      	str	r5, [r4, #0]
 800a40c:	e7de      	b.n	800a3cc <_malloc_r+0xa0>
 800a40e:	bf00      	nop
 800a410:	20002934 	.word	0x20002934

0800a414 <_realloc_r>:
 800a414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a418:	4680      	mov	r8, r0
 800a41a:	4614      	mov	r4, r2
 800a41c:	460e      	mov	r6, r1
 800a41e:	b921      	cbnz	r1, 800a42a <_realloc_r+0x16>
 800a420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a424:	4611      	mov	r1, r2
 800a426:	f7ff bf81 	b.w	800a32c <_malloc_r>
 800a42a:	b92a      	cbnz	r2, 800a438 <_realloc_r+0x24>
 800a42c:	f7ff ff12 	bl	800a254 <_free_r>
 800a430:	4625      	mov	r5, r4
 800a432:	4628      	mov	r0, r5
 800a434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a438:	f000 f838 	bl	800a4ac <_malloc_usable_size_r>
 800a43c:	4284      	cmp	r4, r0
 800a43e:	4607      	mov	r7, r0
 800a440:	d802      	bhi.n	800a448 <_realloc_r+0x34>
 800a442:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a446:	d812      	bhi.n	800a46e <_realloc_r+0x5a>
 800a448:	4621      	mov	r1, r4
 800a44a:	4640      	mov	r0, r8
 800a44c:	f7ff ff6e 	bl	800a32c <_malloc_r>
 800a450:	4605      	mov	r5, r0
 800a452:	2800      	cmp	r0, #0
 800a454:	d0ed      	beq.n	800a432 <_realloc_r+0x1e>
 800a456:	42bc      	cmp	r4, r7
 800a458:	4622      	mov	r2, r4
 800a45a:	4631      	mov	r1, r6
 800a45c:	bf28      	it	cs
 800a45e:	463a      	movcs	r2, r7
 800a460:	f7ff fed0 	bl	800a204 <memcpy>
 800a464:	4631      	mov	r1, r6
 800a466:	4640      	mov	r0, r8
 800a468:	f7ff fef4 	bl	800a254 <_free_r>
 800a46c:	e7e1      	b.n	800a432 <_realloc_r+0x1e>
 800a46e:	4635      	mov	r5, r6
 800a470:	e7df      	b.n	800a432 <_realloc_r+0x1e>
	...

0800a474 <_sbrk_r>:
 800a474:	b538      	push	{r3, r4, r5, lr}
 800a476:	4d06      	ldr	r5, [pc, #24]	; (800a490 <_sbrk_r+0x1c>)
 800a478:	2300      	movs	r3, #0
 800a47a:	4604      	mov	r4, r0
 800a47c:	4608      	mov	r0, r1
 800a47e:	602b      	str	r3, [r5, #0]
 800a480:	f7f8 f854 	bl	800252c <_sbrk>
 800a484:	1c43      	adds	r3, r0, #1
 800a486:	d102      	bne.n	800a48e <_sbrk_r+0x1a>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	b103      	cbz	r3, 800a48e <_sbrk_r+0x1a>
 800a48c:	6023      	str	r3, [r4, #0]
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	2000293c 	.word	0x2000293c

0800a494 <__malloc_lock>:
 800a494:	4801      	ldr	r0, [pc, #4]	; (800a49c <__malloc_lock+0x8>)
 800a496:	f000 b811 	b.w	800a4bc <__retarget_lock_acquire_recursive>
 800a49a:	bf00      	nop
 800a49c:	20002940 	.word	0x20002940

0800a4a0 <__malloc_unlock>:
 800a4a0:	4801      	ldr	r0, [pc, #4]	; (800a4a8 <__malloc_unlock+0x8>)
 800a4a2:	f000 b80c 	b.w	800a4be <__retarget_lock_release_recursive>
 800a4a6:	bf00      	nop
 800a4a8:	20002940 	.word	0x20002940

0800a4ac <_malloc_usable_size_r>:
 800a4ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b0:	1f18      	subs	r0, r3, #4
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	bfbc      	itt	lt
 800a4b6:	580b      	ldrlt	r3, [r1, r0]
 800a4b8:	18c0      	addlt	r0, r0, r3
 800a4ba:	4770      	bx	lr

0800a4bc <__retarget_lock_acquire_recursive>:
 800a4bc:	4770      	bx	lr

0800a4be <__retarget_lock_release_recursive>:
 800a4be:	4770      	bx	lr

0800a4c0 <pow>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	ed2d 8b02 	vpush	{d8}
 800a4c6:	eeb0 8a40 	vmov.f32	s16, s0
 800a4ca:	eef0 8a60 	vmov.f32	s17, s1
 800a4ce:	ec55 4b11 	vmov	r4, r5, d1
 800a4d2:	f000 f891 	bl	800a5f8 <__ieee754_pow>
 800a4d6:	4622      	mov	r2, r4
 800a4d8:	462b      	mov	r3, r5
 800a4da:	4620      	mov	r0, r4
 800a4dc:	4629      	mov	r1, r5
 800a4de:	ec57 6b10 	vmov	r6, r7, d0
 800a4e2:	f7f6 fb43 	bl	8000b6c <__aeabi_dcmpun>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d13b      	bne.n	800a562 <pow+0xa2>
 800a4ea:	ec51 0b18 	vmov	r0, r1, d8
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f7f6 fb09 	bl	8000b08 <__aeabi_dcmpeq>
 800a4f6:	b1b8      	cbz	r0, 800a528 <pow+0x68>
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	f7f6 fb02 	bl	8000b08 <__aeabi_dcmpeq>
 800a504:	2800      	cmp	r0, #0
 800a506:	d146      	bne.n	800a596 <pow+0xd6>
 800a508:	ec45 4b10 	vmov	d0, r4, r5
 800a50c:	f000 fe8d 	bl	800b22a <finite>
 800a510:	b338      	cbz	r0, 800a562 <pow+0xa2>
 800a512:	2200      	movs	r2, #0
 800a514:	2300      	movs	r3, #0
 800a516:	4620      	mov	r0, r4
 800a518:	4629      	mov	r1, r5
 800a51a:	f7f6 faff 	bl	8000b1c <__aeabi_dcmplt>
 800a51e:	b300      	cbz	r0, 800a562 <pow+0xa2>
 800a520:	f7ff fb2e 	bl	8009b80 <__errno>
 800a524:	2322      	movs	r3, #34	; 0x22
 800a526:	e01b      	b.n	800a560 <pow+0xa0>
 800a528:	ec47 6b10 	vmov	d0, r6, r7
 800a52c:	f000 fe7d 	bl	800b22a <finite>
 800a530:	b9e0      	cbnz	r0, 800a56c <pow+0xac>
 800a532:	eeb0 0a48 	vmov.f32	s0, s16
 800a536:	eef0 0a68 	vmov.f32	s1, s17
 800a53a:	f000 fe76 	bl	800b22a <finite>
 800a53e:	b1a8      	cbz	r0, 800a56c <pow+0xac>
 800a540:	ec45 4b10 	vmov	d0, r4, r5
 800a544:	f000 fe71 	bl	800b22a <finite>
 800a548:	b180      	cbz	r0, 800a56c <pow+0xac>
 800a54a:	4632      	mov	r2, r6
 800a54c:	463b      	mov	r3, r7
 800a54e:	4630      	mov	r0, r6
 800a550:	4639      	mov	r1, r7
 800a552:	f7f6 fb0b 	bl	8000b6c <__aeabi_dcmpun>
 800a556:	2800      	cmp	r0, #0
 800a558:	d0e2      	beq.n	800a520 <pow+0x60>
 800a55a:	f7ff fb11 	bl	8009b80 <__errno>
 800a55e:	2321      	movs	r3, #33	; 0x21
 800a560:	6003      	str	r3, [r0, #0]
 800a562:	ecbd 8b02 	vpop	{d8}
 800a566:	ec47 6b10 	vmov	d0, r6, r7
 800a56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a56c:	2200      	movs	r2, #0
 800a56e:	2300      	movs	r3, #0
 800a570:	4630      	mov	r0, r6
 800a572:	4639      	mov	r1, r7
 800a574:	f7f6 fac8 	bl	8000b08 <__aeabi_dcmpeq>
 800a578:	2800      	cmp	r0, #0
 800a57a:	d0f2      	beq.n	800a562 <pow+0xa2>
 800a57c:	eeb0 0a48 	vmov.f32	s0, s16
 800a580:	eef0 0a68 	vmov.f32	s1, s17
 800a584:	f000 fe51 	bl	800b22a <finite>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d0ea      	beq.n	800a562 <pow+0xa2>
 800a58c:	ec45 4b10 	vmov	d0, r4, r5
 800a590:	f000 fe4b 	bl	800b22a <finite>
 800a594:	e7c3      	b.n	800a51e <pow+0x5e>
 800a596:	4f01      	ldr	r7, [pc, #4]	; (800a59c <pow+0xdc>)
 800a598:	2600      	movs	r6, #0
 800a59a:	e7e2      	b.n	800a562 <pow+0xa2>
 800a59c:	3ff00000 	.word	0x3ff00000

0800a5a0 <sqrt>:
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	ed2d 8b02 	vpush	{d8}
 800a5a6:	ec55 4b10 	vmov	r4, r5, d0
 800a5aa:	f000 fd53 	bl	800b054 <__ieee754_sqrt>
 800a5ae:	4622      	mov	r2, r4
 800a5b0:	462b      	mov	r3, r5
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	eeb0 8a40 	vmov.f32	s16, s0
 800a5ba:	eef0 8a60 	vmov.f32	s17, s1
 800a5be:	f7f6 fad5 	bl	8000b6c <__aeabi_dcmpun>
 800a5c2:	b990      	cbnz	r0, 800a5ea <sqrt+0x4a>
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	f7f6 faa6 	bl	8000b1c <__aeabi_dcmplt>
 800a5d0:	b158      	cbz	r0, 800a5ea <sqrt+0x4a>
 800a5d2:	f7ff fad5 	bl	8009b80 <__errno>
 800a5d6:	2321      	movs	r3, #33	; 0x21
 800a5d8:	6003      	str	r3, [r0, #0]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4610      	mov	r0, r2
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	f7f6 f953 	bl	800088c <__aeabi_ddiv>
 800a5e6:	ec41 0b18 	vmov	d8, r0, r1
 800a5ea:	eeb0 0a48 	vmov.f32	s0, s16
 800a5ee:	eef0 0a68 	vmov.f32	s1, s17
 800a5f2:	ecbd 8b02 	vpop	{d8}
 800a5f6:	bd38      	pop	{r3, r4, r5, pc}

0800a5f8 <__ieee754_pow>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	ed2d 8b06 	vpush	{d8-d10}
 800a600:	b089      	sub	sp, #36	; 0x24
 800a602:	ed8d 1b00 	vstr	d1, [sp]
 800a606:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a60a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a60e:	ea58 0102 	orrs.w	r1, r8, r2
 800a612:	ec57 6b10 	vmov	r6, r7, d0
 800a616:	d115      	bne.n	800a644 <__ieee754_pow+0x4c>
 800a618:	19b3      	adds	r3, r6, r6
 800a61a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a61e:	4152      	adcs	r2, r2
 800a620:	4299      	cmp	r1, r3
 800a622:	4b89      	ldr	r3, [pc, #548]	; (800a848 <__ieee754_pow+0x250>)
 800a624:	4193      	sbcs	r3, r2
 800a626:	f080 84d2 	bcs.w	800afce <__ieee754_pow+0x9d6>
 800a62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a62e:	4630      	mov	r0, r6
 800a630:	4639      	mov	r1, r7
 800a632:	f7f5 fe4b 	bl	80002cc <__adddf3>
 800a636:	ec41 0b10 	vmov	d0, r0, r1
 800a63a:	b009      	add	sp, #36	; 0x24
 800a63c:	ecbd 8b06 	vpop	{d8-d10}
 800a640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a644:	4b81      	ldr	r3, [pc, #516]	; (800a84c <__ieee754_pow+0x254>)
 800a646:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a64a:	429c      	cmp	r4, r3
 800a64c:	ee10 aa10 	vmov	sl, s0
 800a650:	463d      	mov	r5, r7
 800a652:	dc06      	bgt.n	800a662 <__ieee754_pow+0x6a>
 800a654:	d101      	bne.n	800a65a <__ieee754_pow+0x62>
 800a656:	2e00      	cmp	r6, #0
 800a658:	d1e7      	bne.n	800a62a <__ieee754_pow+0x32>
 800a65a:	4598      	cmp	r8, r3
 800a65c:	dc01      	bgt.n	800a662 <__ieee754_pow+0x6a>
 800a65e:	d10f      	bne.n	800a680 <__ieee754_pow+0x88>
 800a660:	b172      	cbz	r2, 800a680 <__ieee754_pow+0x88>
 800a662:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a666:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a66a:	ea55 050a 	orrs.w	r5, r5, sl
 800a66e:	d1dc      	bne.n	800a62a <__ieee754_pow+0x32>
 800a670:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a674:	18db      	adds	r3, r3, r3
 800a676:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a67a:	4152      	adcs	r2, r2
 800a67c:	429d      	cmp	r5, r3
 800a67e:	e7d0      	b.n	800a622 <__ieee754_pow+0x2a>
 800a680:	2d00      	cmp	r5, #0
 800a682:	da3b      	bge.n	800a6fc <__ieee754_pow+0x104>
 800a684:	4b72      	ldr	r3, [pc, #456]	; (800a850 <__ieee754_pow+0x258>)
 800a686:	4598      	cmp	r8, r3
 800a688:	dc51      	bgt.n	800a72e <__ieee754_pow+0x136>
 800a68a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a68e:	4598      	cmp	r8, r3
 800a690:	f340 84ac 	ble.w	800afec <__ieee754_pow+0x9f4>
 800a694:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a698:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a69c:	2b14      	cmp	r3, #20
 800a69e:	dd0f      	ble.n	800a6c0 <__ieee754_pow+0xc8>
 800a6a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a6a4:	fa22 f103 	lsr.w	r1, r2, r3
 800a6a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	f040 849d 	bne.w	800afec <__ieee754_pow+0x9f4>
 800a6b2:	f001 0101 	and.w	r1, r1, #1
 800a6b6:	f1c1 0302 	rsb	r3, r1, #2
 800a6ba:	9304      	str	r3, [sp, #16]
 800a6bc:	b182      	cbz	r2, 800a6e0 <__ieee754_pow+0xe8>
 800a6be:	e05f      	b.n	800a780 <__ieee754_pow+0x188>
 800a6c0:	2a00      	cmp	r2, #0
 800a6c2:	d15b      	bne.n	800a77c <__ieee754_pow+0x184>
 800a6c4:	f1c3 0314 	rsb	r3, r3, #20
 800a6c8:	fa48 f103 	asr.w	r1, r8, r3
 800a6cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d0:	4543      	cmp	r3, r8
 800a6d2:	f040 8488 	bne.w	800afe6 <__ieee754_pow+0x9ee>
 800a6d6:	f001 0101 	and.w	r1, r1, #1
 800a6da:	f1c1 0302 	rsb	r3, r1, #2
 800a6de:	9304      	str	r3, [sp, #16]
 800a6e0:	4b5c      	ldr	r3, [pc, #368]	; (800a854 <__ieee754_pow+0x25c>)
 800a6e2:	4598      	cmp	r8, r3
 800a6e4:	d132      	bne.n	800a74c <__ieee754_pow+0x154>
 800a6e6:	f1b9 0f00 	cmp.w	r9, #0
 800a6ea:	f280 8478 	bge.w	800afde <__ieee754_pow+0x9e6>
 800a6ee:	4959      	ldr	r1, [pc, #356]	; (800a854 <__ieee754_pow+0x25c>)
 800a6f0:	4632      	mov	r2, r6
 800a6f2:	463b      	mov	r3, r7
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	f7f6 f8c9 	bl	800088c <__aeabi_ddiv>
 800a6fa:	e79c      	b.n	800a636 <__ieee754_pow+0x3e>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	9304      	str	r3, [sp, #16]
 800a700:	2a00      	cmp	r2, #0
 800a702:	d13d      	bne.n	800a780 <__ieee754_pow+0x188>
 800a704:	4b51      	ldr	r3, [pc, #324]	; (800a84c <__ieee754_pow+0x254>)
 800a706:	4598      	cmp	r8, r3
 800a708:	d1ea      	bne.n	800a6e0 <__ieee754_pow+0xe8>
 800a70a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a70e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a712:	ea53 030a 	orrs.w	r3, r3, sl
 800a716:	f000 845a 	beq.w	800afce <__ieee754_pow+0x9d6>
 800a71a:	4b4f      	ldr	r3, [pc, #316]	; (800a858 <__ieee754_pow+0x260>)
 800a71c:	429c      	cmp	r4, r3
 800a71e:	dd08      	ble.n	800a732 <__ieee754_pow+0x13a>
 800a720:	f1b9 0f00 	cmp.w	r9, #0
 800a724:	f2c0 8457 	blt.w	800afd6 <__ieee754_pow+0x9de>
 800a728:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a72c:	e783      	b.n	800a636 <__ieee754_pow+0x3e>
 800a72e:	2302      	movs	r3, #2
 800a730:	e7e5      	b.n	800a6fe <__ieee754_pow+0x106>
 800a732:	f1b9 0f00 	cmp.w	r9, #0
 800a736:	f04f 0000 	mov.w	r0, #0
 800a73a:	f04f 0100 	mov.w	r1, #0
 800a73e:	f6bf af7a 	bge.w	800a636 <__ieee754_pow+0x3e>
 800a742:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a746:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a74a:	e774      	b.n	800a636 <__ieee754_pow+0x3e>
 800a74c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a750:	d106      	bne.n	800a760 <__ieee754_pow+0x168>
 800a752:	4632      	mov	r2, r6
 800a754:	463b      	mov	r3, r7
 800a756:	4630      	mov	r0, r6
 800a758:	4639      	mov	r1, r7
 800a75a:	f7f5 ff6d 	bl	8000638 <__aeabi_dmul>
 800a75e:	e76a      	b.n	800a636 <__ieee754_pow+0x3e>
 800a760:	4b3e      	ldr	r3, [pc, #248]	; (800a85c <__ieee754_pow+0x264>)
 800a762:	4599      	cmp	r9, r3
 800a764:	d10c      	bne.n	800a780 <__ieee754_pow+0x188>
 800a766:	2d00      	cmp	r5, #0
 800a768:	db0a      	blt.n	800a780 <__ieee754_pow+0x188>
 800a76a:	ec47 6b10 	vmov	d0, r6, r7
 800a76e:	b009      	add	sp, #36	; 0x24
 800a770:	ecbd 8b06 	vpop	{d8-d10}
 800a774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	f000 bc6c 	b.w	800b054 <__ieee754_sqrt>
 800a77c:	2300      	movs	r3, #0
 800a77e:	9304      	str	r3, [sp, #16]
 800a780:	ec47 6b10 	vmov	d0, r6, r7
 800a784:	f000 fd48 	bl	800b218 <fabs>
 800a788:	ec51 0b10 	vmov	r0, r1, d0
 800a78c:	f1ba 0f00 	cmp.w	sl, #0
 800a790:	d129      	bne.n	800a7e6 <__ieee754_pow+0x1ee>
 800a792:	b124      	cbz	r4, 800a79e <__ieee754_pow+0x1a6>
 800a794:	4b2f      	ldr	r3, [pc, #188]	; (800a854 <__ieee754_pow+0x25c>)
 800a796:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d123      	bne.n	800a7e6 <__ieee754_pow+0x1ee>
 800a79e:	f1b9 0f00 	cmp.w	r9, #0
 800a7a2:	da05      	bge.n	800a7b0 <__ieee754_pow+0x1b8>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	492a      	ldr	r1, [pc, #168]	; (800a854 <__ieee754_pow+0x25c>)
 800a7ac:	f7f6 f86e 	bl	800088c <__aeabi_ddiv>
 800a7b0:	2d00      	cmp	r5, #0
 800a7b2:	f6bf af40 	bge.w	800a636 <__ieee754_pow+0x3e>
 800a7b6:	9b04      	ldr	r3, [sp, #16]
 800a7b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a7bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a7c0:	4323      	orrs	r3, r4
 800a7c2:	d108      	bne.n	800a7d6 <__ieee754_pow+0x1de>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	f7f5 fd7c 	bl	80002c8 <__aeabi_dsub>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	e78f      	b.n	800a6f6 <__ieee754_pow+0xfe>
 800a7d6:	9b04      	ldr	r3, [sp, #16]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	f47f af2c 	bne.w	800a636 <__ieee754_pow+0x3e>
 800a7de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	e727      	b.n	800a636 <__ieee754_pow+0x3e>
 800a7e6:	0feb      	lsrs	r3, r5, #31
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	9306      	str	r3, [sp, #24]
 800a7ec:	9a06      	ldr	r2, [sp, #24]
 800a7ee:	9b04      	ldr	r3, [sp, #16]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	d102      	bne.n	800a7fa <__ieee754_pow+0x202>
 800a7f4:	4632      	mov	r2, r6
 800a7f6:	463b      	mov	r3, r7
 800a7f8:	e7e6      	b.n	800a7c8 <__ieee754_pow+0x1d0>
 800a7fa:	4b19      	ldr	r3, [pc, #100]	; (800a860 <__ieee754_pow+0x268>)
 800a7fc:	4598      	cmp	r8, r3
 800a7fe:	f340 80fb 	ble.w	800a9f8 <__ieee754_pow+0x400>
 800a802:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a806:	4598      	cmp	r8, r3
 800a808:	4b13      	ldr	r3, [pc, #76]	; (800a858 <__ieee754_pow+0x260>)
 800a80a:	dd0c      	ble.n	800a826 <__ieee754_pow+0x22e>
 800a80c:	429c      	cmp	r4, r3
 800a80e:	dc0f      	bgt.n	800a830 <__ieee754_pow+0x238>
 800a810:	f1b9 0f00 	cmp.w	r9, #0
 800a814:	da0f      	bge.n	800a836 <__ieee754_pow+0x23e>
 800a816:	2000      	movs	r0, #0
 800a818:	b009      	add	sp, #36	; 0x24
 800a81a:	ecbd 8b06 	vpop	{d8-d10}
 800a81e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a822:	f000 bcf0 	b.w	800b206 <__math_oflow>
 800a826:	429c      	cmp	r4, r3
 800a828:	dbf2      	blt.n	800a810 <__ieee754_pow+0x218>
 800a82a:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <__ieee754_pow+0x25c>)
 800a82c:	429c      	cmp	r4, r3
 800a82e:	dd19      	ble.n	800a864 <__ieee754_pow+0x26c>
 800a830:	f1b9 0f00 	cmp.w	r9, #0
 800a834:	dcef      	bgt.n	800a816 <__ieee754_pow+0x21e>
 800a836:	2000      	movs	r0, #0
 800a838:	b009      	add	sp, #36	; 0x24
 800a83a:	ecbd 8b06 	vpop	{d8-d10}
 800a83e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a842:	f000 bcd7 	b.w	800b1f4 <__math_uflow>
 800a846:	bf00      	nop
 800a848:	fff00000 	.word	0xfff00000
 800a84c:	7ff00000 	.word	0x7ff00000
 800a850:	433fffff 	.word	0x433fffff
 800a854:	3ff00000 	.word	0x3ff00000
 800a858:	3fefffff 	.word	0x3fefffff
 800a85c:	3fe00000 	.word	0x3fe00000
 800a860:	41e00000 	.word	0x41e00000
 800a864:	4b60      	ldr	r3, [pc, #384]	; (800a9e8 <__ieee754_pow+0x3f0>)
 800a866:	2200      	movs	r2, #0
 800a868:	f7f5 fd2e 	bl	80002c8 <__aeabi_dsub>
 800a86c:	a354      	add	r3, pc, #336	; (adr r3, 800a9c0 <__ieee754_pow+0x3c8>)
 800a86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a872:	4604      	mov	r4, r0
 800a874:	460d      	mov	r5, r1
 800a876:	f7f5 fedf 	bl	8000638 <__aeabi_dmul>
 800a87a:	a353      	add	r3, pc, #332	; (adr r3, 800a9c8 <__ieee754_pow+0x3d0>)
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	4606      	mov	r6, r0
 800a882:	460f      	mov	r7, r1
 800a884:	4620      	mov	r0, r4
 800a886:	4629      	mov	r1, r5
 800a888:	f7f5 fed6 	bl	8000638 <__aeabi_dmul>
 800a88c:	4b57      	ldr	r3, [pc, #348]	; (800a9ec <__ieee754_pow+0x3f4>)
 800a88e:	4682      	mov	sl, r0
 800a890:	468b      	mov	fp, r1
 800a892:	2200      	movs	r2, #0
 800a894:	4620      	mov	r0, r4
 800a896:	4629      	mov	r1, r5
 800a898:	f7f5 fece 	bl	8000638 <__aeabi_dmul>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	a14b      	add	r1, pc, #300	; (adr r1, 800a9d0 <__ieee754_pow+0x3d8>)
 800a8a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8a6:	f7f5 fd0f 	bl	80002c8 <__aeabi_dsub>
 800a8aa:	4622      	mov	r2, r4
 800a8ac:	462b      	mov	r3, r5
 800a8ae:	f7f5 fec3 	bl	8000638 <__aeabi_dmul>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	494d      	ldr	r1, [pc, #308]	; (800a9f0 <__ieee754_pow+0x3f8>)
 800a8ba:	f7f5 fd05 	bl	80002c8 <__aeabi_dsub>
 800a8be:	4622      	mov	r2, r4
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	4689      	mov	r9, r1
 800a8c4:	462b      	mov	r3, r5
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	4629      	mov	r1, r5
 800a8ca:	f7f5 feb5 	bl	8000638 <__aeabi_dmul>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	f7f5 feaf 	bl	8000638 <__aeabi_dmul>
 800a8da:	a33f      	add	r3, pc, #252	; (adr r3, 800a9d8 <__ieee754_pow+0x3e0>)
 800a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e0:	f7f5 feaa 	bl	8000638 <__aeabi_dmul>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4650      	mov	r0, sl
 800a8ea:	4659      	mov	r1, fp
 800a8ec:	f7f5 fcec 	bl	80002c8 <__aeabi_dsub>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4680      	mov	r8, r0
 800a8f6:	4689      	mov	r9, r1
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	f7f5 fce6 	bl	80002cc <__adddf3>
 800a900:	2000      	movs	r0, #0
 800a902:	4632      	mov	r2, r6
 800a904:	463b      	mov	r3, r7
 800a906:	4604      	mov	r4, r0
 800a908:	460d      	mov	r5, r1
 800a90a:	f7f5 fcdd 	bl	80002c8 <__aeabi_dsub>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	4640      	mov	r0, r8
 800a914:	4649      	mov	r1, r9
 800a916:	f7f5 fcd7 	bl	80002c8 <__aeabi_dsub>
 800a91a:	9b04      	ldr	r3, [sp, #16]
 800a91c:	9a06      	ldr	r2, [sp, #24]
 800a91e:	3b01      	subs	r3, #1
 800a920:	4313      	orrs	r3, r2
 800a922:	4682      	mov	sl, r0
 800a924:	468b      	mov	fp, r1
 800a926:	f040 81e7 	bne.w	800acf8 <__ieee754_pow+0x700>
 800a92a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a9e0 <__ieee754_pow+0x3e8>
 800a92e:	eeb0 8a47 	vmov.f32	s16, s14
 800a932:	eef0 8a67 	vmov.f32	s17, s15
 800a936:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a93a:	2600      	movs	r6, #0
 800a93c:	4632      	mov	r2, r6
 800a93e:	463b      	mov	r3, r7
 800a940:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a944:	f7f5 fcc0 	bl	80002c8 <__aeabi_dsub>
 800a948:	4622      	mov	r2, r4
 800a94a:	462b      	mov	r3, r5
 800a94c:	f7f5 fe74 	bl	8000638 <__aeabi_dmul>
 800a950:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a954:	4680      	mov	r8, r0
 800a956:	4689      	mov	r9, r1
 800a958:	4650      	mov	r0, sl
 800a95a:	4659      	mov	r1, fp
 800a95c:	f7f5 fe6c 	bl	8000638 <__aeabi_dmul>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4640      	mov	r0, r8
 800a966:	4649      	mov	r1, r9
 800a968:	f7f5 fcb0 	bl	80002cc <__adddf3>
 800a96c:	4632      	mov	r2, r6
 800a96e:	463b      	mov	r3, r7
 800a970:	4680      	mov	r8, r0
 800a972:	4689      	mov	r9, r1
 800a974:	4620      	mov	r0, r4
 800a976:	4629      	mov	r1, r5
 800a978:	f7f5 fe5e 	bl	8000638 <__aeabi_dmul>
 800a97c:	460b      	mov	r3, r1
 800a97e:	4604      	mov	r4, r0
 800a980:	460d      	mov	r5, r1
 800a982:	4602      	mov	r2, r0
 800a984:	4649      	mov	r1, r9
 800a986:	4640      	mov	r0, r8
 800a988:	f7f5 fca0 	bl	80002cc <__adddf3>
 800a98c:	4b19      	ldr	r3, [pc, #100]	; (800a9f4 <__ieee754_pow+0x3fc>)
 800a98e:	4299      	cmp	r1, r3
 800a990:	ec45 4b19 	vmov	d9, r4, r5
 800a994:	4606      	mov	r6, r0
 800a996:	460f      	mov	r7, r1
 800a998:	468b      	mov	fp, r1
 800a99a:	f340 82f1 	ble.w	800af80 <__ieee754_pow+0x988>
 800a99e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a9a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a9a6:	4303      	orrs	r3, r0
 800a9a8:	f000 81e4 	beq.w	800ad74 <__ieee754_pow+0x77c>
 800a9ac:	ec51 0b18 	vmov	r0, r1, d8
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f7f6 f8b2 	bl	8000b1c <__aeabi_dcmplt>
 800a9b8:	3800      	subs	r0, #0
 800a9ba:	bf18      	it	ne
 800a9bc:	2001      	movne	r0, #1
 800a9be:	e72b      	b.n	800a818 <__ieee754_pow+0x220>
 800a9c0:	60000000 	.word	0x60000000
 800a9c4:	3ff71547 	.word	0x3ff71547
 800a9c8:	f85ddf44 	.word	0xf85ddf44
 800a9cc:	3e54ae0b 	.word	0x3e54ae0b
 800a9d0:	55555555 	.word	0x55555555
 800a9d4:	3fd55555 	.word	0x3fd55555
 800a9d8:	652b82fe 	.word	0x652b82fe
 800a9dc:	3ff71547 	.word	0x3ff71547
 800a9e0:	00000000 	.word	0x00000000
 800a9e4:	bff00000 	.word	0xbff00000
 800a9e8:	3ff00000 	.word	0x3ff00000
 800a9ec:	3fd00000 	.word	0x3fd00000
 800a9f0:	3fe00000 	.word	0x3fe00000
 800a9f4:	408fffff 	.word	0x408fffff
 800a9f8:	4bd5      	ldr	r3, [pc, #852]	; (800ad50 <__ieee754_pow+0x758>)
 800a9fa:	402b      	ands	r3, r5
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	b92b      	cbnz	r3, 800aa0c <__ieee754_pow+0x414>
 800aa00:	4bd4      	ldr	r3, [pc, #848]	; (800ad54 <__ieee754_pow+0x75c>)
 800aa02:	f7f5 fe19 	bl	8000638 <__aeabi_dmul>
 800aa06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	1523      	asrs	r3, r4, #20
 800aa0e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa12:	4413      	add	r3, r2
 800aa14:	9305      	str	r3, [sp, #20]
 800aa16:	4bd0      	ldr	r3, [pc, #832]	; (800ad58 <__ieee754_pow+0x760>)
 800aa18:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aa1c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aa20:	429c      	cmp	r4, r3
 800aa22:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa26:	dd08      	ble.n	800aa3a <__ieee754_pow+0x442>
 800aa28:	4bcc      	ldr	r3, [pc, #816]	; (800ad5c <__ieee754_pow+0x764>)
 800aa2a:	429c      	cmp	r4, r3
 800aa2c:	f340 8162 	ble.w	800acf4 <__ieee754_pow+0x6fc>
 800aa30:	9b05      	ldr	r3, [sp, #20]
 800aa32:	3301      	adds	r3, #1
 800aa34:	9305      	str	r3, [sp, #20]
 800aa36:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aa3a:	2400      	movs	r4, #0
 800aa3c:	00e3      	lsls	r3, r4, #3
 800aa3e:	9307      	str	r3, [sp, #28]
 800aa40:	4bc7      	ldr	r3, [pc, #796]	; (800ad60 <__ieee754_pow+0x768>)
 800aa42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa46:	ed93 7b00 	vldr	d7, [r3]
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	ec53 2b17 	vmov	r2, r3, d7
 800aa50:	eeb0 9a47 	vmov.f32	s18, s14
 800aa54:	eef0 9a67 	vmov.f32	s19, s15
 800aa58:	4682      	mov	sl, r0
 800aa5a:	f7f5 fc35 	bl	80002c8 <__aeabi_dsub>
 800aa5e:	4652      	mov	r2, sl
 800aa60:	4606      	mov	r6, r0
 800aa62:	460f      	mov	r7, r1
 800aa64:	462b      	mov	r3, r5
 800aa66:	ec51 0b19 	vmov	r0, r1, d9
 800aa6a:	f7f5 fc2f 	bl	80002cc <__adddf3>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	2000      	movs	r0, #0
 800aa74:	49bb      	ldr	r1, [pc, #748]	; (800ad64 <__ieee754_pow+0x76c>)
 800aa76:	f7f5 ff09 	bl	800088c <__aeabi_ddiv>
 800aa7a:	ec41 0b1a 	vmov	d10, r0, r1
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4630      	mov	r0, r6
 800aa84:	4639      	mov	r1, r7
 800aa86:	f7f5 fdd7 	bl	8000638 <__aeabi_dmul>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa90:	9302      	str	r3, [sp, #8]
 800aa92:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aa96:	46ab      	mov	fp, r5
 800aa98:	106d      	asrs	r5, r5, #1
 800aa9a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aa9e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800aaa2:	ec41 0b18 	vmov	d8, r0, r1
 800aaa6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800aaaa:	2200      	movs	r2, #0
 800aaac:	4640      	mov	r0, r8
 800aaae:	4649      	mov	r1, r9
 800aab0:	4614      	mov	r4, r2
 800aab2:	461d      	mov	r5, r3
 800aab4:	f7f5 fdc0 	bl	8000638 <__aeabi_dmul>
 800aab8:	4602      	mov	r2, r0
 800aaba:	460b      	mov	r3, r1
 800aabc:	4630      	mov	r0, r6
 800aabe:	4639      	mov	r1, r7
 800aac0:	f7f5 fc02 	bl	80002c8 <__aeabi_dsub>
 800aac4:	ec53 2b19 	vmov	r2, r3, d9
 800aac8:	4606      	mov	r6, r0
 800aaca:	460f      	mov	r7, r1
 800aacc:	4620      	mov	r0, r4
 800aace:	4629      	mov	r1, r5
 800aad0:	f7f5 fbfa 	bl	80002c8 <__aeabi_dsub>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	4650      	mov	r0, sl
 800aada:	4659      	mov	r1, fp
 800aadc:	f7f5 fbf4 	bl	80002c8 <__aeabi_dsub>
 800aae0:	4642      	mov	r2, r8
 800aae2:	464b      	mov	r3, r9
 800aae4:	f7f5 fda8 	bl	8000638 <__aeabi_dmul>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	4630      	mov	r0, r6
 800aaee:	4639      	mov	r1, r7
 800aaf0:	f7f5 fbea 	bl	80002c8 <__aeabi_dsub>
 800aaf4:	ec53 2b1a 	vmov	r2, r3, d10
 800aaf8:	f7f5 fd9e 	bl	8000638 <__aeabi_dmul>
 800aafc:	ec53 2b18 	vmov	r2, r3, d8
 800ab00:	ec41 0b19 	vmov	d9, r0, r1
 800ab04:	ec51 0b18 	vmov	r0, r1, d8
 800ab08:	f7f5 fd96 	bl	8000638 <__aeabi_dmul>
 800ab0c:	a37c      	add	r3, pc, #496	; (adr r3, 800ad00 <__ieee754_pow+0x708>)
 800ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab12:	4604      	mov	r4, r0
 800ab14:	460d      	mov	r5, r1
 800ab16:	f7f5 fd8f 	bl	8000638 <__aeabi_dmul>
 800ab1a:	a37b      	add	r3, pc, #492	; (adr r3, 800ad08 <__ieee754_pow+0x710>)
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	f7f5 fbd4 	bl	80002cc <__adddf3>
 800ab24:	4622      	mov	r2, r4
 800ab26:	462b      	mov	r3, r5
 800ab28:	f7f5 fd86 	bl	8000638 <__aeabi_dmul>
 800ab2c:	a378      	add	r3, pc, #480	; (adr r3, 800ad10 <__ieee754_pow+0x718>)
 800ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab32:	f7f5 fbcb 	bl	80002cc <__adddf3>
 800ab36:	4622      	mov	r2, r4
 800ab38:	462b      	mov	r3, r5
 800ab3a:	f7f5 fd7d 	bl	8000638 <__aeabi_dmul>
 800ab3e:	a376      	add	r3, pc, #472	; (adr r3, 800ad18 <__ieee754_pow+0x720>)
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	f7f5 fbc2 	bl	80002cc <__adddf3>
 800ab48:	4622      	mov	r2, r4
 800ab4a:	462b      	mov	r3, r5
 800ab4c:	f7f5 fd74 	bl	8000638 <__aeabi_dmul>
 800ab50:	a373      	add	r3, pc, #460	; (adr r3, 800ad20 <__ieee754_pow+0x728>)
 800ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab56:	f7f5 fbb9 	bl	80002cc <__adddf3>
 800ab5a:	4622      	mov	r2, r4
 800ab5c:	462b      	mov	r3, r5
 800ab5e:	f7f5 fd6b 	bl	8000638 <__aeabi_dmul>
 800ab62:	a371      	add	r3, pc, #452	; (adr r3, 800ad28 <__ieee754_pow+0x730>)
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	f7f5 fbb0 	bl	80002cc <__adddf3>
 800ab6c:	4622      	mov	r2, r4
 800ab6e:	4606      	mov	r6, r0
 800ab70:	460f      	mov	r7, r1
 800ab72:	462b      	mov	r3, r5
 800ab74:	4620      	mov	r0, r4
 800ab76:	4629      	mov	r1, r5
 800ab78:	f7f5 fd5e 	bl	8000638 <__aeabi_dmul>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4630      	mov	r0, r6
 800ab82:	4639      	mov	r1, r7
 800ab84:	f7f5 fd58 	bl	8000638 <__aeabi_dmul>
 800ab88:	4642      	mov	r2, r8
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	460d      	mov	r5, r1
 800ab8e:	464b      	mov	r3, r9
 800ab90:	ec51 0b18 	vmov	r0, r1, d8
 800ab94:	f7f5 fb9a 	bl	80002cc <__adddf3>
 800ab98:	ec53 2b19 	vmov	r2, r3, d9
 800ab9c:	f7f5 fd4c 	bl	8000638 <__aeabi_dmul>
 800aba0:	4622      	mov	r2, r4
 800aba2:	462b      	mov	r3, r5
 800aba4:	f7f5 fb92 	bl	80002cc <__adddf3>
 800aba8:	4642      	mov	r2, r8
 800abaa:	4682      	mov	sl, r0
 800abac:	468b      	mov	fp, r1
 800abae:	464b      	mov	r3, r9
 800abb0:	4640      	mov	r0, r8
 800abb2:	4649      	mov	r1, r9
 800abb4:	f7f5 fd40 	bl	8000638 <__aeabi_dmul>
 800abb8:	4b6b      	ldr	r3, [pc, #428]	; (800ad68 <__ieee754_pow+0x770>)
 800abba:	2200      	movs	r2, #0
 800abbc:	4606      	mov	r6, r0
 800abbe:	460f      	mov	r7, r1
 800abc0:	f7f5 fb84 	bl	80002cc <__adddf3>
 800abc4:	4652      	mov	r2, sl
 800abc6:	465b      	mov	r3, fp
 800abc8:	f7f5 fb80 	bl	80002cc <__adddf3>
 800abcc:	2000      	movs	r0, #0
 800abce:	4604      	mov	r4, r0
 800abd0:	460d      	mov	r5, r1
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	4640      	mov	r0, r8
 800abd8:	4649      	mov	r1, r9
 800abda:	f7f5 fd2d 	bl	8000638 <__aeabi_dmul>
 800abde:	4b62      	ldr	r3, [pc, #392]	; (800ad68 <__ieee754_pow+0x770>)
 800abe0:	4680      	mov	r8, r0
 800abe2:	4689      	mov	r9, r1
 800abe4:	2200      	movs	r2, #0
 800abe6:	4620      	mov	r0, r4
 800abe8:	4629      	mov	r1, r5
 800abea:	f7f5 fb6d 	bl	80002c8 <__aeabi_dsub>
 800abee:	4632      	mov	r2, r6
 800abf0:	463b      	mov	r3, r7
 800abf2:	f7f5 fb69 	bl	80002c8 <__aeabi_dsub>
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	4650      	mov	r0, sl
 800abfc:	4659      	mov	r1, fp
 800abfe:	f7f5 fb63 	bl	80002c8 <__aeabi_dsub>
 800ac02:	ec53 2b18 	vmov	r2, r3, d8
 800ac06:	f7f5 fd17 	bl	8000638 <__aeabi_dmul>
 800ac0a:	4622      	mov	r2, r4
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	460f      	mov	r7, r1
 800ac10:	462b      	mov	r3, r5
 800ac12:	ec51 0b19 	vmov	r0, r1, d9
 800ac16:	f7f5 fd0f 	bl	8000638 <__aeabi_dmul>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4630      	mov	r0, r6
 800ac20:	4639      	mov	r1, r7
 800ac22:	f7f5 fb53 	bl	80002cc <__adddf3>
 800ac26:	4606      	mov	r6, r0
 800ac28:	460f      	mov	r7, r1
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4640      	mov	r0, r8
 800ac30:	4649      	mov	r1, r9
 800ac32:	f7f5 fb4b 	bl	80002cc <__adddf3>
 800ac36:	a33e      	add	r3, pc, #248	; (adr r3, 800ad30 <__ieee754_pow+0x738>)
 800ac38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	4604      	mov	r4, r0
 800ac40:	460d      	mov	r5, r1
 800ac42:	f7f5 fcf9 	bl	8000638 <__aeabi_dmul>
 800ac46:	4642      	mov	r2, r8
 800ac48:	ec41 0b18 	vmov	d8, r0, r1
 800ac4c:	464b      	mov	r3, r9
 800ac4e:	4620      	mov	r0, r4
 800ac50:	4629      	mov	r1, r5
 800ac52:	f7f5 fb39 	bl	80002c8 <__aeabi_dsub>
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	4639      	mov	r1, r7
 800ac5e:	f7f5 fb33 	bl	80002c8 <__aeabi_dsub>
 800ac62:	a335      	add	r3, pc, #212	; (adr r3, 800ad38 <__ieee754_pow+0x740>)
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	f7f5 fce6 	bl	8000638 <__aeabi_dmul>
 800ac6c:	a334      	add	r3, pc, #208	; (adr r3, 800ad40 <__ieee754_pow+0x748>)
 800ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac72:	4606      	mov	r6, r0
 800ac74:	460f      	mov	r7, r1
 800ac76:	4620      	mov	r0, r4
 800ac78:	4629      	mov	r1, r5
 800ac7a:	f7f5 fcdd 	bl	8000638 <__aeabi_dmul>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4630      	mov	r0, r6
 800ac84:	4639      	mov	r1, r7
 800ac86:	f7f5 fb21 	bl	80002cc <__adddf3>
 800ac8a:	9a07      	ldr	r2, [sp, #28]
 800ac8c:	4b37      	ldr	r3, [pc, #220]	; (800ad6c <__ieee754_pow+0x774>)
 800ac8e:	4413      	add	r3, r2
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	f7f5 fb1a 	bl	80002cc <__adddf3>
 800ac98:	4682      	mov	sl, r0
 800ac9a:	9805      	ldr	r0, [sp, #20]
 800ac9c:	468b      	mov	fp, r1
 800ac9e:	f7f5 fc61 	bl	8000564 <__aeabi_i2d>
 800aca2:	9a07      	ldr	r2, [sp, #28]
 800aca4:	4b32      	ldr	r3, [pc, #200]	; (800ad70 <__ieee754_pow+0x778>)
 800aca6:	4413      	add	r3, r2
 800aca8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acac:	4606      	mov	r6, r0
 800acae:	460f      	mov	r7, r1
 800acb0:	4652      	mov	r2, sl
 800acb2:	465b      	mov	r3, fp
 800acb4:	ec51 0b18 	vmov	r0, r1, d8
 800acb8:	f7f5 fb08 	bl	80002cc <__adddf3>
 800acbc:	4642      	mov	r2, r8
 800acbe:	464b      	mov	r3, r9
 800acc0:	f7f5 fb04 	bl	80002cc <__adddf3>
 800acc4:	4632      	mov	r2, r6
 800acc6:	463b      	mov	r3, r7
 800acc8:	f7f5 fb00 	bl	80002cc <__adddf3>
 800accc:	2000      	movs	r0, #0
 800acce:	4632      	mov	r2, r6
 800acd0:	463b      	mov	r3, r7
 800acd2:	4604      	mov	r4, r0
 800acd4:	460d      	mov	r5, r1
 800acd6:	f7f5 faf7 	bl	80002c8 <__aeabi_dsub>
 800acda:	4642      	mov	r2, r8
 800acdc:	464b      	mov	r3, r9
 800acde:	f7f5 faf3 	bl	80002c8 <__aeabi_dsub>
 800ace2:	ec53 2b18 	vmov	r2, r3, d8
 800ace6:	f7f5 faef 	bl	80002c8 <__aeabi_dsub>
 800acea:	4602      	mov	r2, r0
 800acec:	460b      	mov	r3, r1
 800acee:	4650      	mov	r0, sl
 800acf0:	4659      	mov	r1, fp
 800acf2:	e610      	b.n	800a916 <__ieee754_pow+0x31e>
 800acf4:	2401      	movs	r4, #1
 800acf6:	e6a1      	b.n	800aa3c <__ieee754_pow+0x444>
 800acf8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ad48 <__ieee754_pow+0x750>
 800acfc:	e617      	b.n	800a92e <__ieee754_pow+0x336>
 800acfe:	bf00      	nop
 800ad00:	4a454eef 	.word	0x4a454eef
 800ad04:	3fca7e28 	.word	0x3fca7e28
 800ad08:	93c9db65 	.word	0x93c9db65
 800ad0c:	3fcd864a 	.word	0x3fcd864a
 800ad10:	a91d4101 	.word	0xa91d4101
 800ad14:	3fd17460 	.word	0x3fd17460
 800ad18:	518f264d 	.word	0x518f264d
 800ad1c:	3fd55555 	.word	0x3fd55555
 800ad20:	db6fabff 	.word	0xdb6fabff
 800ad24:	3fdb6db6 	.word	0x3fdb6db6
 800ad28:	33333303 	.word	0x33333303
 800ad2c:	3fe33333 	.word	0x3fe33333
 800ad30:	e0000000 	.word	0xe0000000
 800ad34:	3feec709 	.word	0x3feec709
 800ad38:	dc3a03fd 	.word	0xdc3a03fd
 800ad3c:	3feec709 	.word	0x3feec709
 800ad40:	145b01f5 	.word	0x145b01f5
 800ad44:	be3e2fe0 	.word	0xbe3e2fe0
 800ad48:	00000000 	.word	0x00000000
 800ad4c:	3ff00000 	.word	0x3ff00000
 800ad50:	7ff00000 	.word	0x7ff00000
 800ad54:	43400000 	.word	0x43400000
 800ad58:	0003988e 	.word	0x0003988e
 800ad5c:	000bb679 	.word	0x000bb679
 800ad60:	0800b9e8 	.word	0x0800b9e8
 800ad64:	3ff00000 	.word	0x3ff00000
 800ad68:	40080000 	.word	0x40080000
 800ad6c:	0800ba08 	.word	0x0800ba08
 800ad70:	0800b9f8 	.word	0x0800b9f8
 800ad74:	a3b5      	add	r3, pc, #724	; (adr r3, 800b04c <__ieee754_pow+0xa54>)
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	4649      	mov	r1, r9
 800ad7e:	f7f5 faa5 	bl	80002cc <__adddf3>
 800ad82:	4622      	mov	r2, r4
 800ad84:	ec41 0b1a 	vmov	d10, r0, r1
 800ad88:	462b      	mov	r3, r5
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7f5 fa9b 	bl	80002c8 <__aeabi_dsub>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	ec51 0b1a 	vmov	r0, r1, d10
 800ad9a:	f7f5 fedd 	bl	8000b58 <__aeabi_dcmpgt>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	f47f ae04 	bne.w	800a9ac <__ieee754_pow+0x3b4>
 800ada4:	4aa4      	ldr	r2, [pc, #656]	; (800b038 <__ieee754_pow+0xa40>)
 800ada6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800adaa:	4293      	cmp	r3, r2
 800adac:	f340 8108 	ble.w	800afc0 <__ieee754_pow+0x9c8>
 800adb0:	151b      	asrs	r3, r3, #20
 800adb2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800adb6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800adba:	fa4a f303 	asr.w	r3, sl, r3
 800adbe:	445b      	add	r3, fp
 800adc0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800adc4:	4e9d      	ldr	r6, [pc, #628]	; (800b03c <__ieee754_pow+0xa44>)
 800adc6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800adca:	4116      	asrs	r6, r2
 800adcc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800add0:	2000      	movs	r0, #0
 800add2:	ea23 0106 	bic.w	r1, r3, r6
 800add6:	f1c2 0214 	rsb	r2, r2, #20
 800adda:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800adde:	fa4a fa02 	asr.w	sl, sl, r2
 800ade2:	f1bb 0f00 	cmp.w	fp, #0
 800ade6:	4602      	mov	r2, r0
 800ade8:	460b      	mov	r3, r1
 800adea:	4620      	mov	r0, r4
 800adec:	4629      	mov	r1, r5
 800adee:	bfb8      	it	lt
 800adf0:	f1ca 0a00 	rsblt	sl, sl, #0
 800adf4:	f7f5 fa68 	bl	80002c8 <__aeabi_dsub>
 800adf8:	ec41 0b19 	vmov	d9, r0, r1
 800adfc:	4642      	mov	r2, r8
 800adfe:	464b      	mov	r3, r9
 800ae00:	ec51 0b19 	vmov	r0, r1, d9
 800ae04:	f7f5 fa62 	bl	80002cc <__adddf3>
 800ae08:	a37b      	add	r3, pc, #492	; (adr r3, 800aff8 <__ieee754_pow+0xa00>)
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	2000      	movs	r0, #0
 800ae10:	4604      	mov	r4, r0
 800ae12:	460d      	mov	r5, r1
 800ae14:	f7f5 fc10 	bl	8000638 <__aeabi_dmul>
 800ae18:	ec53 2b19 	vmov	r2, r3, d9
 800ae1c:	4606      	mov	r6, r0
 800ae1e:	460f      	mov	r7, r1
 800ae20:	4620      	mov	r0, r4
 800ae22:	4629      	mov	r1, r5
 800ae24:	f7f5 fa50 	bl	80002c8 <__aeabi_dsub>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	4649      	mov	r1, r9
 800ae30:	f7f5 fa4a 	bl	80002c8 <__aeabi_dsub>
 800ae34:	a372      	add	r3, pc, #456	; (adr r3, 800b000 <__ieee754_pow+0xa08>)
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	f7f5 fbfd 	bl	8000638 <__aeabi_dmul>
 800ae3e:	a372      	add	r3, pc, #456	; (adr r3, 800b008 <__ieee754_pow+0xa10>)
 800ae40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae44:	4680      	mov	r8, r0
 800ae46:	4689      	mov	r9, r1
 800ae48:	4620      	mov	r0, r4
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	f7f5 fbf4 	bl	8000638 <__aeabi_dmul>
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	4640      	mov	r0, r8
 800ae56:	4649      	mov	r1, r9
 800ae58:	f7f5 fa38 	bl	80002cc <__adddf3>
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	460d      	mov	r5, r1
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4630      	mov	r0, r6
 800ae66:	4639      	mov	r1, r7
 800ae68:	f7f5 fa30 	bl	80002cc <__adddf3>
 800ae6c:	4632      	mov	r2, r6
 800ae6e:	463b      	mov	r3, r7
 800ae70:	4680      	mov	r8, r0
 800ae72:	4689      	mov	r9, r1
 800ae74:	f7f5 fa28 	bl	80002c8 <__aeabi_dsub>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	4629      	mov	r1, r5
 800ae80:	f7f5 fa22 	bl	80002c8 <__aeabi_dsub>
 800ae84:	4642      	mov	r2, r8
 800ae86:	4606      	mov	r6, r0
 800ae88:	460f      	mov	r7, r1
 800ae8a:	464b      	mov	r3, r9
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	4649      	mov	r1, r9
 800ae90:	f7f5 fbd2 	bl	8000638 <__aeabi_dmul>
 800ae94:	a35e      	add	r3, pc, #376	; (adr r3, 800b010 <__ieee754_pow+0xa18>)
 800ae96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	460d      	mov	r5, r1
 800ae9e:	f7f5 fbcb 	bl	8000638 <__aeabi_dmul>
 800aea2:	a35d      	add	r3, pc, #372	; (adr r3, 800b018 <__ieee754_pow+0xa20>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	f7f5 fa0e 	bl	80002c8 <__aeabi_dsub>
 800aeac:	4622      	mov	r2, r4
 800aeae:	462b      	mov	r3, r5
 800aeb0:	f7f5 fbc2 	bl	8000638 <__aeabi_dmul>
 800aeb4:	a35a      	add	r3, pc, #360	; (adr r3, 800b020 <__ieee754_pow+0xa28>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f7f5 fa07 	bl	80002cc <__adddf3>
 800aebe:	4622      	mov	r2, r4
 800aec0:	462b      	mov	r3, r5
 800aec2:	f7f5 fbb9 	bl	8000638 <__aeabi_dmul>
 800aec6:	a358      	add	r3, pc, #352	; (adr r3, 800b028 <__ieee754_pow+0xa30>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	f7f5 f9fc 	bl	80002c8 <__aeabi_dsub>
 800aed0:	4622      	mov	r2, r4
 800aed2:	462b      	mov	r3, r5
 800aed4:	f7f5 fbb0 	bl	8000638 <__aeabi_dmul>
 800aed8:	a355      	add	r3, pc, #340	; (adr r3, 800b030 <__ieee754_pow+0xa38>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 f9f5 	bl	80002cc <__adddf3>
 800aee2:	4622      	mov	r2, r4
 800aee4:	462b      	mov	r3, r5
 800aee6:	f7f5 fba7 	bl	8000638 <__aeabi_dmul>
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	4640      	mov	r0, r8
 800aef0:	4649      	mov	r1, r9
 800aef2:	f7f5 f9e9 	bl	80002c8 <__aeabi_dsub>
 800aef6:	4604      	mov	r4, r0
 800aef8:	460d      	mov	r5, r1
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	4640      	mov	r0, r8
 800af00:	4649      	mov	r1, r9
 800af02:	f7f5 fb99 	bl	8000638 <__aeabi_dmul>
 800af06:	2200      	movs	r2, #0
 800af08:	ec41 0b19 	vmov	d9, r0, r1
 800af0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af10:	4620      	mov	r0, r4
 800af12:	4629      	mov	r1, r5
 800af14:	f7f5 f9d8 	bl	80002c8 <__aeabi_dsub>
 800af18:	4602      	mov	r2, r0
 800af1a:	460b      	mov	r3, r1
 800af1c:	ec51 0b19 	vmov	r0, r1, d9
 800af20:	f7f5 fcb4 	bl	800088c <__aeabi_ddiv>
 800af24:	4632      	mov	r2, r6
 800af26:	4604      	mov	r4, r0
 800af28:	460d      	mov	r5, r1
 800af2a:	463b      	mov	r3, r7
 800af2c:	4640      	mov	r0, r8
 800af2e:	4649      	mov	r1, r9
 800af30:	f7f5 fb82 	bl	8000638 <__aeabi_dmul>
 800af34:	4632      	mov	r2, r6
 800af36:	463b      	mov	r3, r7
 800af38:	f7f5 f9c8 	bl	80002cc <__adddf3>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	4620      	mov	r0, r4
 800af42:	4629      	mov	r1, r5
 800af44:	f7f5 f9c0 	bl	80002c8 <__aeabi_dsub>
 800af48:	4642      	mov	r2, r8
 800af4a:	464b      	mov	r3, r9
 800af4c:	f7f5 f9bc 	bl	80002c8 <__aeabi_dsub>
 800af50:	460b      	mov	r3, r1
 800af52:	4602      	mov	r2, r0
 800af54:	493a      	ldr	r1, [pc, #232]	; (800b040 <__ieee754_pow+0xa48>)
 800af56:	2000      	movs	r0, #0
 800af58:	f7f5 f9b6 	bl	80002c8 <__aeabi_dsub>
 800af5c:	ec41 0b10 	vmov	d0, r0, r1
 800af60:	ee10 3a90 	vmov	r3, s1
 800af64:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800af68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af6c:	da2b      	bge.n	800afc6 <__ieee754_pow+0x9ce>
 800af6e:	4650      	mov	r0, sl
 800af70:	f000 f966 	bl	800b240 <scalbn>
 800af74:	ec51 0b10 	vmov	r0, r1, d0
 800af78:	ec53 2b18 	vmov	r2, r3, d8
 800af7c:	f7ff bbed 	b.w	800a75a <__ieee754_pow+0x162>
 800af80:	4b30      	ldr	r3, [pc, #192]	; (800b044 <__ieee754_pow+0xa4c>)
 800af82:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800af86:	429e      	cmp	r6, r3
 800af88:	f77f af0c 	ble.w	800ada4 <__ieee754_pow+0x7ac>
 800af8c:	4b2e      	ldr	r3, [pc, #184]	; (800b048 <__ieee754_pow+0xa50>)
 800af8e:	440b      	add	r3, r1
 800af90:	4303      	orrs	r3, r0
 800af92:	d009      	beq.n	800afa8 <__ieee754_pow+0x9b0>
 800af94:	ec51 0b18 	vmov	r0, r1, d8
 800af98:	2200      	movs	r2, #0
 800af9a:	2300      	movs	r3, #0
 800af9c:	f7f5 fdbe 	bl	8000b1c <__aeabi_dcmplt>
 800afa0:	3800      	subs	r0, #0
 800afa2:	bf18      	it	ne
 800afa4:	2001      	movne	r0, #1
 800afa6:	e447      	b.n	800a838 <__ieee754_pow+0x240>
 800afa8:	4622      	mov	r2, r4
 800afaa:	462b      	mov	r3, r5
 800afac:	f7f5 f98c 	bl	80002c8 <__aeabi_dsub>
 800afb0:	4642      	mov	r2, r8
 800afb2:	464b      	mov	r3, r9
 800afb4:	f7f5 fdc6 	bl	8000b44 <__aeabi_dcmpge>
 800afb8:	2800      	cmp	r0, #0
 800afba:	f43f aef3 	beq.w	800ada4 <__ieee754_pow+0x7ac>
 800afbe:	e7e9      	b.n	800af94 <__ieee754_pow+0x99c>
 800afc0:	f04f 0a00 	mov.w	sl, #0
 800afc4:	e71a      	b.n	800adfc <__ieee754_pow+0x804>
 800afc6:	ec51 0b10 	vmov	r0, r1, d0
 800afca:	4619      	mov	r1, r3
 800afcc:	e7d4      	b.n	800af78 <__ieee754_pow+0x980>
 800afce:	491c      	ldr	r1, [pc, #112]	; (800b040 <__ieee754_pow+0xa48>)
 800afd0:	2000      	movs	r0, #0
 800afd2:	f7ff bb30 	b.w	800a636 <__ieee754_pow+0x3e>
 800afd6:	2000      	movs	r0, #0
 800afd8:	2100      	movs	r1, #0
 800afda:	f7ff bb2c 	b.w	800a636 <__ieee754_pow+0x3e>
 800afde:	4630      	mov	r0, r6
 800afe0:	4639      	mov	r1, r7
 800afe2:	f7ff bb28 	b.w	800a636 <__ieee754_pow+0x3e>
 800afe6:	9204      	str	r2, [sp, #16]
 800afe8:	f7ff bb7a 	b.w	800a6e0 <__ieee754_pow+0xe8>
 800afec:	2300      	movs	r3, #0
 800afee:	f7ff bb64 	b.w	800a6ba <__ieee754_pow+0xc2>
 800aff2:	bf00      	nop
 800aff4:	f3af 8000 	nop.w
 800aff8:	00000000 	.word	0x00000000
 800affc:	3fe62e43 	.word	0x3fe62e43
 800b000:	fefa39ef 	.word	0xfefa39ef
 800b004:	3fe62e42 	.word	0x3fe62e42
 800b008:	0ca86c39 	.word	0x0ca86c39
 800b00c:	be205c61 	.word	0xbe205c61
 800b010:	72bea4d0 	.word	0x72bea4d0
 800b014:	3e663769 	.word	0x3e663769
 800b018:	c5d26bf1 	.word	0xc5d26bf1
 800b01c:	3ebbbd41 	.word	0x3ebbbd41
 800b020:	af25de2c 	.word	0xaf25de2c
 800b024:	3f11566a 	.word	0x3f11566a
 800b028:	16bebd93 	.word	0x16bebd93
 800b02c:	3f66c16c 	.word	0x3f66c16c
 800b030:	5555553e 	.word	0x5555553e
 800b034:	3fc55555 	.word	0x3fc55555
 800b038:	3fe00000 	.word	0x3fe00000
 800b03c:	000fffff 	.word	0x000fffff
 800b040:	3ff00000 	.word	0x3ff00000
 800b044:	4090cbff 	.word	0x4090cbff
 800b048:	3f6f3400 	.word	0x3f6f3400
 800b04c:	652b82fe 	.word	0x652b82fe
 800b050:	3c971547 	.word	0x3c971547

0800b054 <__ieee754_sqrt>:
 800b054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b058:	ec55 4b10 	vmov	r4, r5, d0
 800b05c:	4e55      	ldr	r6, [pc, #340]	; (800b1b4 <__ieee754_sqrt+0x160>)
 800b05e:	43ae      	bics	r6, r5
 800b060:	ee10 0a10 	vmov	r0, s0
 800b064:	ee10 3a10 	vmov	r3, s0
 800b068:	462a      	mov	r2, r5
 800b06a:	4629      	mov	r1, r5
 800b06c:	d110      	bne.n	800b090 <__ieee754_sqrt+0x3c>
 800b06e:	ee10 2a10 	vmov	r2, s0
 800b072:	462b      	mov	r3, r5
 800b074:	f7f5 fae0 	bl	8000638 <__aeabi_dmul>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	4620      	mov	r0, r4
 800b07e:	4629      	mov	r1, r5
 800b080:	f7f5 f924 	bl	80002cc <__adddf3>
 800b084:	4604      	mov	r4, r0
 800b086:	460d      	mov	r5, r1
 800b088:	ec45 4b10 	vmov	d0, r4, r5
 800b08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b090:	2d00      	cmp	r5, #0
 800b092:	dc10      	bgt.n	800b0b6 <__ieee754_sqrt+0x62>
 800b094:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b098:	4330      	orrs	r0, r6
 800b09a:	d0f5      	beq.n	800b088 <__ieee754_sqrt+0x34>
 800b09c:	b15d      	cbz	r5, 800b0b6 <__ieee754_sqrt+0x62>
 800b09e:	ee10 2a10 	vmov	r2, s0
 800b0a2:	462b      	mov	r3, r5
 800b0a4:	ee10 0a10 	vmov	r0, s0
 800b0a8:	f7f5 f90e 	bl	80002c8 <__aeabi_dsub>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	f7f5 fbec 	bl	800088c <__aeabi_ddiv>
 800b0b4:	e7e6      	b.n	800b084 <__ieee754_sqrt+0x30>
 800b0b6:	1512      	asrs	r2, r2, #20
 800b0b8:	d074      	beq.n	800b1a4 <__ieee754_sqrt+0x150>
 800b0ba:	07d4      	lsls	r4, r2, #31
 800b0bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b0c0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b0c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b0c8:	bf5e      	ittt	pl
 800b0ca:	0fda      	lsrpl	r2, r3, #31
 800b0cc:	005b      	lslpl	r3, r3, #1
 800b0ce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b0d2:	2400      	movs	r4, #0
 800b0d4:	0fda      	lsrs	r2, r3, #31
 800b0d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b0da:	107f      	asrs	r7, r7, #1
 800b0dc:	005b      	lsls	r3, r3, #1
 800b0de:	2516      	movs	r5, #22
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b0e6:	1886      	adds	r6, r0, r2
 800b0e8:	428e      	cmp	r6, r1
 800b0ea:	bfde      	ittt	le
 800b0ec:	1b89      	suble	r1, r1, r6
 800b0ee:	18b0      	addle	r0, r6, r2
 800b0f0:	18a4      	addle	r4, r4, r2
 800b0f2:	0049      	lsls	r1, r1, #1
 800b0f4:	3d01      	subs	r5, #1
 800b0f6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b0fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b0fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b102:	d1f0      	bne.n	800b0e6 <__ieee754_sqrt+0x92>
 800b104:	462a      	mov	r2, r5
 800b106:	f04f 0e20 	mov.w	lr, #32
 800b10a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b10e:	4281      	cmp	r1, r0
 800b110:	eb06 0c05 	add.w	ip, r6, r5
 800b114:	dc02      	bgt.n	800b11c <__ieee754_sqrt+0xc8>
 800b116:	d113      	bne.n	800b140 <__ieee754_sqrt+0xec>
 800b118:	459c      	cmp	ip, r3
 800b11a:	d811      	bhi.n	800b140 <__ieee754_sqrt+0xec>
 800b11c:	f1bc 0f00 	cmp.w	ip, #0
 800b120:	eb0c 0506 	add.w	r5, ip, r6
 800b124:	da43      	bge.n	800b1ae <__ieee754_sqrt+0x15a>
 800b126:	2d00      	cmp	r5, #0
 800b128:	db41      	blt.n	800b1ae <__ieee754_sqrt+0x15a>
 800b12a:	f100 0801 	add.w	r8, r0, #1
 800b12e:	1a09      	subs	r1, r1, r0
 800b130:	459c      	cmp	ip, r3
 800b132:	bf88      	it	hi
 800b134:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b138:	eba3 030c 	sub.w	r3, r3, ip
 800b13c:	4432      	add	r2, r6
 800b13e:	4640      	mov	r0, r8
 800b140:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b144:	f1be 0e01 	subs.w	lr, lr, #1
 800b148:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b14c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b150:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b154:	d1db      	bne.n	800b10e <__ieee754_sqrt+0xba>
 800b156:	430b      	orrs	r3, r1
 800b158:	d006      	beq.n	800b168 <__ieee754_sqrt+0x114>
 800b15a:	1c50      	adds	r0, r2, #1
 800b15c:	bf13      	iteet	ne
 800b15e:	3201      	addne	r2, #1
 800b160:	3401      	addeq	r4, #1
 800b162:	4672      	moveq	r2, lr
 800b164:	f022 0201 	bicne.w	r2, r2, #1
 800b168:	1063      	asrs	r3, r4, #1
 800b16a:	0852      	lsrs	r2, r2, #1
 800b16c:	07e1      	lsls	r1, r4, #31
 800b16e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b172:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b176:	bf48      	it	mi
 800b178:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b17c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b180:	4614      	mov	r4, r2
 800b182:	e781      	b.n	800b088 <__ieee754_sqrt+0x34>
 800b184:	0ad9      	lsrs	r1, r3, #11
 800b186:	3815      	subs	r0, #21
 800b188:	055b      	lsls	r3, r3, #21
 800b18a:	2900      	cmp	r1, #0
 800b18c:	d0fa      	beq.n	800b184 <__ieee754_sqrt+0x130>
 800b18e:	02cd      	lsls	r5, r1, #11
 800b190:	d50a      	bpl.n	800b1a8 <__ieee754_sqrt+0x154>
 800b192:	f1c2 0420 	rsb	r4, r2, #32
 800b196:	fa23 f404 	lsr.w	r4, r3, r4
 800b19a:	1e55      	subs	r5, r2, #1
 800b19c:	4093      	lsls	r3, r2
 800b19e:	4321      	orrs	r1, r4
 800b1a0:	1b42      	subs	r2, r0, r5
 800b1a2:	e78a      	b.n	800b0ba <__ieee754_sqrt+0x66>
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	e7f0      	b.n	800b18a <__ieee754_sqrt+0x136>
 800b1a8:	0049      	lsls	r1, r1, #1
 800b1aa:	3201      	adds	r2, #1
 800b1ac:	e7ef      	b.n	800b18e <__ieee754_sqrt+0x13a>
 800b1ae:	4680      	mov	r8, r0
 800b1b0:	e7bd      	b.n	800b12e <__ieee754_sqrt+0xda>
 800b1b2:	bf00      	nop
 800b1b4:	7ff00000 	.word	0x7ff00000

0800b1b8 <with_errno>:
 800b1b8:	b570      	push	{r4, r5, r6, lr}
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	460d      	mov	r5, r1
 800b1be:	4616      	mov	r6, r2
 800b1c0:	f7fe fcde 	bl	8009b80 <__errno>
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	6006      	str	r6, [r0, #0]
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}

0800b1cc <xflow>:
 800b1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ce:	4614      	mov	r4, r2
 800b1d0:	461d      	mov	r5, r3
 800b1d2:	b108      	cbz	r0, 800b1d8 <xflow+0xc>
 800b1d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b1d8:	e9cd 2300 	strd	r2, r3, [sp]
 800b1dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	f7f5 fa28 	bl	8000638 <__aeabi_dmul>
 800b1e8:	2222      	movs	r2, #34	; 0x22
 800b1ea:	b003      	add	sp, #12
 800b1ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1f0:	f7ff bfe2 	b.w	800b1b8 <with_errno>

0800b1f4 <__math_uflow>:
 800b1f4:	b508      	push	{r3, lr}
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1fc:	f7ff ffe6 	bl	800b1cc <xflow>
 800b200:	ec41 0b10 	vmov	d0, r0, r1
 800b204:	bd08      	pop	{r3, pc}

0800b206 <__math_oflow>:
 800b206:	b508      	push	{r3, lr}
 800b208:	2200      	movs	r2, #0
 800b20a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b20e:	f7ff ffdd 	bl	800b1cc <xflow>
 800b212:	ec41 0b10 	vmov	d0, r0, r1
 800b216:	bd08      	pop	{r3, pc}

0800b218 <fabs>:
 800b218:	ec51 0b10 	vmov	r0, r1, d0
 800b21c:	ee10 2a10 	vmov	r2, s0
 800b220:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b224:	ec43 2b10 	vmov	d0, r2, r3
 800b228:	4770      	bx	lr

0800b22a <finite>:
 800b22a:	b082      	sub	sp, #8
 800b22c:	ed8d 0b00 	vstr	d0, [sp]
 800b230:	9801      	ldr	r0, [sp, #4]
 800b232:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b236:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b23a:	0fc0      	lsrs	r0, r0, #31
 800b23c:	b002      	add	sp, #8
 800b23e:	4770      	bx	lr

0800b240 <scalbn>:
 800b240:	b570      	push	{r4, r5, r6, lr}
 800b242:	ec55 4b10 	vmov	r4, r5, d0
 800b246:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b24a:	4606      	mov	r6, r0
 800b24c:	462b      	mov	r3, r5
 800b24e:	b99a      	cbnz	r2, 800b278 <scalbn+0x38>
 800b250:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b254:	4323      	orrs	r3, r4
 800b256:	d036      	beq.n	800b2c6 <scalbn+0x86>
 800b258:	4b39      	ldr	r3, [pc, #228]	; (800b340 <scalbn+0x100>)
 800b25a:	4629      	mov	r1, r5
 800b25c:	ee10 0a10 	vmov	r0, s0
 800b260:	2200      	movs	r2, #0
 800b262:	f7f5 f9e9 	bl	8000638 <__aeabi_dmul>
 800b266:	4b37      	ldr	r3, [pc, #220]	; (800b344 <scalbn+0x104>)
 800b268:	429e      	cmp	r6, r3
 800b26a:	4604      	mov	r4, r0
 800b26c:	460d      	mov	r5, r1
 800b26e:	da10      	bge.n	800b292 <scalbn+0x52>
 800b270:	a32b      	add	r3, pc, #172	; (adr r3, 800b320 <scalbn+0xe0>)
 800b272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b276:	e03a      	b.n	800b2ee <scalbn+0xae>
 800b278:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b27c:	428a      	cmp	r2, r1
 800b27e:	d10c      	bne.n	800b29a <scalbn+0x5a>
 800b280:	ee10 2a10 	vmov	r2, s0
 800b284:	4620      	mov	r0, r4
 800b286:	4629      	mov	r1, r5
 800b288:	f7f5 f820 	bl	80002cc <__adddf3>
 800b28c:	4604      	mov	r4, r0
 800b28e:	460d      	mov	r5, r1
 800b290:	e019      	b.n	800b2c6 <scalbn+0x86>
 800b292:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b296:	460b      	mov	r3, r1
 800b298:	3a36      	subs	r2, #54	; 0x36
 800b29a:	4432      	add	r2, r6
 800b29c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b2a0:	428a      	cmp	r2, r1
 800b2a2:	dd08      	ble.n	800b2b6 <scalbn+0x76>
 800b2a4:	2d00      	cmp	r5, #0
 800b2a6:	a120      	add	r1, pc, #128	; (adr r1, 800b328 <scalbn+0xe8>)
 800b2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2ac:	da1c      	bge.n	800b2e8 <scalbn+0xa8>
 800b2ae:	a120      	add	r1, pc, #128	; (adr r1, 800b330 <scalbn+0xf0>)
 800b2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2b4:	e018      	b.n	800b2e8 <scalbn+0xa8>
 800b2b6:	2a00      	cmp	r2, #0
 800b2b8:	dd08      	ble.n	800b2cc <scalbn+0x8c>
 800b2ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b2c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b2c6:	ec45 4b10 	vmov	d0, r4, r5
 800b2ca:	bd70      	pop	{r4, r5, r6, pc}
 800b2cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b2d0:	da19      	bge.n	800b306 <scalbn+0xc6>
 800b2d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b2d6:	429e      	cmp	r6, r3
 800b2d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b2dc:	dd0a      	ble.n	800b2f4 <scalbn+0xb4>
 800b2de:	a112      	add	r1, pc, #72	; (adr r1, 800b328 <scalbn+0xe8>)
 800b2e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1e2      	bne.n	800b2ae <scalbn+0x6e>
 800b2e8:	a30f      	add	r3, pc, #60	; (adr r3, 800b328 <scalbn+0xe8>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	f7f5 f9a3 	bl	8000638 <__aeabi_dmul>
 800b2f2:	e7cb      	b.n	800b28c <scalbn+0x4c>
 800b2f4:	a10a      	add	r1, pc, #40	; (adr r1, 800b320 <scalbn+0xe0>)
 800b2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d0b8      	beq.n	800b270 <scalbn+0x30>
 800b2fe:	a10e      	add	r1, pc, #56	; (adr r1, 800b338 <scalbn+0xf8>)
 800b300:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b304:	e7b4      	b.n	800b270 <scalbn+0x30>
 800b306:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b30a:	3236      	adds	r2, #54	; 0x36
 800b30c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b310:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b314:	4620      	mov	r0, r4
 800b316:	4b0c      	ldr	r3, [pc, #48]	; (800b348 <scalbn+0x108>)
 800b318:	2200      	movs	r2, #0
 800b31a:	e7e8      	b.n	800b2ee <scalbn+0xae>
 800b31c:	f3af 8000 	nop.w
 800b320:	c2f8f359 	.word	0xc2f8f359
 800b324:	01a56e1f 	.word	0x01a56e1f
 800b328:	8800759c 	.word	0x8800759c
 800b32c:	7e37e43c 	.word	0x7e37e43c
 800b330:	8800759c 	.word	0x8800759c
 800b334:	fe37e43c 	.word	0xfe37e43c
 800b338:	c2f8f359 	.word	0xc2f8f359
 800b33c:	81a56e1f 	.word	0x81a56e1f
 800b340:	43500000 	.word	0x43500000
 800b344:	ffff3cb0 	.word	0xffff3cb0
 800b348:	3c900000 	.word	0x3c900000

0800b34c <_init>:
 800b34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b34e:	bf00      	nop
 800b350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b352:	bc08      	pop	{r3}
 800b354:	469e      	mov	lr, r3
 800b356:	4770      	bx	lr

0800b358 <_fini>:
 800b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35a:	bf00      	nop
 800b35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b35e:	bc08      	pop	{r3}
 800b360:	469e      	mov	lr, r3
 800b362:	4770      	bx	lr
