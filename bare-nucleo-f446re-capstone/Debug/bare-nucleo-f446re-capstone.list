
bare-nucleo-f446re-capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800b578  0800b578  0001b578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc30  0800bc30  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc30  0800bc30  0001bc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc38  0800bc38  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc38  0800bc38  0001bc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc3c  0800bc3c  0001bc3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800bc40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006710  2000008c  0800bccc  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000679c  0800bccc  0002679c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001655c  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003160  00000000  00000000  00036618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00039778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003ab80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d31  00000000  00000000  0003be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae13  00000000  00000000  00061b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1d9e  00000000  00000000  0007c974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d04  00000000  00000000  0015e764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b55c 	.word	0x0800b55c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	0800b55c 	.word	0x0800b55c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <SELECT+0x1c>)
 8000ee8:	f002 ff54 	bl	8003d94 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f001 fc3f 	bl	8002770 <HAL_Delay>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020400 	.word	0x40020400

08000efc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f06:	4804      	ldr	r0, [pc, #16]	; (8000f18 <DESELECT+0x1c>)
 8000f08:	f002 ff44 	bl	8003d94 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f001 fc2f 	bl	8002770 <HAL_Delay>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40020400 	.word	0x40020400

08000f1c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f26:	bf00      	nop
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <SPI_TxByte+0x30>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d1f8      	bne.n	8000f28 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f36:	1df9      	adds	r1, r7, #7
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <SPI_TxByte+0x30>)
 8000f3e:	f003 fe04 	bl	8004b4a <HAL_SPI_Transmit>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000154 	.word	0x20000154

08000f50 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f5c:	bf00      	nop
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <SPI_TxBuffer+0x30>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d1f8      	bne.n	8000f5e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f6c:	887a      	ldrh	r2, [r7, #2]
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <SPI_TxBuffer+0x30>)
 8000f74:	f003 fde9 	bl	8004b4a <HAL_SPI_Transmit>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000154 	.word	0x20000154

08000f84 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f8a:	23ff      	movs	r3, #255	; 0xff
 8000f8c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f8e:	bf00      	nop
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <SPI_RxByte+0x34>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d1f8      	bne.n	8000f90 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f9e:	1dba      	adds	r2, r7, #6
 8000fa0:	1df9      	adds	r1, r7, #7
 8000fa2:	2364      	movs	r3, #100	; 0x64
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <SPI_RxByte+0x34>)
 8000faa:	f003 ff0a 	bl	8004dc2 <HAL_SPI_TransmitReceive>

	return data;
 8000fae:	79bb      	ldrb	r3, [r7, #6]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000154 	.word	0x20000154

08000fbc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000fc4:	f7ff ffde 	bl	8000f84 <SPI_RxByte>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	701a      	strb	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <SD_ReadyWait+0x30>)
 8000fe0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fe4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000fe6:	f7ff ffcd 	bl	8000f84 <SPI_RxByte>
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2bff      	cmp	r3, #255	; 0xff
 8000ff2:	d004      	beq.n	8000ffe <SD_ReadyWait+0x26>
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SD_ReadyWait+0x30>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f3      	bne.n	8000fe6 <SD_ReadyWait+0xe>

	return res;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20006546 	.word	0x20006546

0800100c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001012:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001016:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001018:	f7ff ff70 	bl	8000efc <DESELECT>
	for(int i = 0; i < 10; i++)
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	e005      	b.n	800102e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001022:	20ff      	movs	r0, #255	; 0xff
 8001024:	f7ff ff7a 	bl	8000f1c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3301      	adds	r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b09      	cmp	r3, #9
 8001032:	ddf6      	ble.n	8001022 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001034:	f7ff ff52 	bl	8000edc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001038:	2340      	movs	r3, #64	; 0x40
 800103a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800104c:	2395      	movs	r3, #149	; 0x95
 800104e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001050:	463b      	mov	r3, r7
 8001052:	2106      	movs	r1, #6
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff7b 	bl	8000f50 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800105a:	e002      	b.n	8001062 <SD_PowerOn+0x56>
	{
		cnt--;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3b01      	subs	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001062:	f7ff ff8f 	bl	8000f84 <SPI_RxByte>
 8001066:	4603      	mov	r3, r0
 8001068:	2b01      	cmp	r3, #1
 800106a:	d002      	beq.n	8001072 <SD_PowerOn+0x66>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f4      	bne.n	800105c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001072:	f7ff ff43 	bl	8000efc <DESELECT>
	SPI_TxByte(0XFF);
 8001076:	20ff      	movs	r0, #255	; 0xff
 8001078:	f7ff ff50 	bl	8000f1c <SPI_TxByte>

	PowerFlag = 1;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <SD_PowerOn+0x80>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000a9 	.word	0x200000a9

08001090 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <SD_PowerOff+0x14>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	200000a9 	.word	0x200000a9

080010a8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
	return PowerFlag;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <SD_CheckPower+0x14>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200000a9 	.word	0x200000a9

080010c0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <SD_RxDataBlock+0x5c>)
 80010cc:	22c8      	movs	r2, #200	; 0xc8
 80010ce:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80010d0:	f7ff ff58 	bl	8000f84 <SPI_RxByte>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2bff      	cmp	r3, #255	; 0xff
 80010dc:	d104      	bne.n	80010e8 <SD_RxDataBlock+0x28>
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <SD_RxDataBlock+0x5c>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f3      	bne.n	80010d0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2bfe      	cmp	r3, #254	; 0xfe
 80010ec:	d001      	beq.n	80010f2 <SD_RxDataBlock+0x32>
 80010ee:	2300      	movs	r3, #0
 80010f0:	e00f      	b.n	8001112 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5f 	bl	8000fbc <SPI_RxBytePtr>
	} while(len--);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	603a      	str	r2, [r7, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f4      	bne.n	80010f2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001108:	f7ff ff3c 	bl	8000f84 <SPI_RxByte>
	SPI_RxByte();
 800110c:	f7ff ff3a 	bl	8000f84 <SPI_RxByte>

	return TRUE;
 8001110:	2301      	movs	r3, #1
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20006545 	.word	0x20006545

08001120 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001130:	f7ff ff52 	bl	8000fd8 <SD_ReadyWait>
 8001134:	4603      	mov	r3, r0
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d001      	beq.n	800113e <SD_TxDataBlock+0x1e>
 800113a:	2300      	movs	r3, #0
 800113c:	e02f      	b.n	800119e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff feeb 	bl	8000f1c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	2bfd      	cmp	r3, #253	; 0xfd
 800114a:	d020      	beq.n	800118e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800114c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fefd 	bl	8000f50 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001156:	f7ff ff15 	bl	8000f84 <SPI_RxByte>
		SPI_RxByte();
 800115a:	f7ff ff13 	bl	8000f84 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800115e:	e00b      	b.n	8001178 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001160:	f7ff ff10 	bl	8000f84 <SPI_RxByte>
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	f003 031f 	and.w	r3, r3, #31
 800116e:	2b05      	cmp	r3, #5
 8001170:	d006      	beq.n	8001180 <SD_TxDataBlock+0x60>
			i++;
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	3301      	adds	r3, #1
 8001176:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	2b40      	cmp	r3, #64	; 0x40
 800117c:	d9f0      	bls.n	8001160 <SD_TxDataBlock+0x40>
 800117e:	e000      	b.n	8001182 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001180:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001182:	bf00      	nop
 8001184:	f7ff fefe 	bl	8000f84 <SPI_RxByte>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0fa      	beq.n	8001184 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	2b05      	cmp	r3, #5
 8001196:	d101      	bne.n	800119c <SD_TxDataBlock+0x7c>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <SD_TxDataBlock+0x7e>

	return FALSE;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	6039      	str	r1, [r7, #0]
 80011b0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80011b2:	f7ff ff11 	bl	8000fd8 <SD_ReadyWait>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2bff      	cmp	r3, #255	; 0xff
 80011ba:	d001      	beq.n	80011c0 <SD_SendCmd+0x1a>
 80011bc:	23ff      	movs	r3, #255	; 0xff
 80011be:	e042      	b.n	8001246 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff feaa 	bl	8000f1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	0e1b      	lsrs	r3, r3, #24
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fea4 	bl	8000f1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	0c1b      	lsrs	r3, r3, #16
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe9e 	bl	8000f1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	0a1b      	lsrs	r3, r3, #8
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe98 	bl	8000f1c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fe93 	bl	8000f1c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b40      	cmp	r3, #64	; 0x40
 80011fa:	d102      	bne.n	8001202 <SD_SendCmd+0x5c>
 80011fc:	2395      	movs	r3, #149	; 0x95
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e007      	b.n	8001212 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b48      	cmp	r3, #72	; 0x48
 8001206:	d102      	bne.n	800120e <SD_SendCmd+0x68>
 8001208:	2387      	movs	r3, #135	; 0x87
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e001      	b.n	8001212 <SD_SendCmd+0x6c>
	else crc = 1;
 800120e:	2301      	movs	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fe81 	bl	8000f1c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b4c      	cmp	r3, #76	; 0x4c
 800121e:	d101      	bne.n	8001224 <SD_SendCmd+0x7e>
 8001220:	f7ff feb0 	bl	8000f84 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001224:	230a      	movs	r3, #10
 8001226:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001228:	f7ff feac 	bl	8000f84 <SPI_RxByte>
 800122c:	4603      	mov	r3, r0
 800122e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001230:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001234:	2b00      	cmp	r3, #0
 8001236:	da05      	bge.n	8001244 <SD_SendCmd+0x9e>
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	3b01      	subs	r3, #1
 800123c:	73bb      	strb	r3, [r7, #14]
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f1      	bne.n	8001228 <SD_SendCmd+0x82>

	return res;
 8001244:	7b7b      	ldrb	r3, [r7, #13]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SD_disk_initialize+0x14>
 8001260:	2301      	movs	r3, #1
 8001262:	e0d6      	b.n	8001412 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001264:	4b6d      	ldr	r3, [pc, #436]	; (800141c <SD_disk_initialize+0x1cc>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <SD_disk_initialize+0x2a>
 8001272:	4b6a      	ldr	r3, [pc, #424]	; (800141c <SD_disk_initialize+0x1cc>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	e0cb      	b.n	8001412 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800127a:	f7ff fec7 	bl	800100c <SD_PowerOn>

	/* slave select */
	SELECT();
 800127e:	f7ff fe2d 	bl	8000edc <SELECT>

	/* check disk type */
	type = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001286:	2100      	movs	r1, #0
 8001288:	2040      	movs	r0, #64	; 0x40
 800128a:	f7ff ff8c 	bl	80011a6 <SD_SendCmd>
 800128e:	4603      	mov	r3, r0
 8001290:	2b01      	cmp	r3, #1
 8001292:	f040 80a6 	bne.w	80013e2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001296:	4b62      	ldr	r3, [pc, #392]	; (8001420 <SD_disk_initialize+0x1d0>)
 8001298:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800129c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800129e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80012a2:	2048      	movs	r0, #72	; 0x48
 80012a4:	f7ff ff7f 	bl	80011a6 <SD_SendCmd>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d158      	bne.n	8001360 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e00c      	b.n	80012ce <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80012b4:	7bfc      	ldrb	r4, [r7, #15]
 80012b6:	f7ff fe65 	bl	8000f84 <SPI_RxByte>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	f104 0310 	add.w	r3, r4, #16
 80012c2:	443b      	add	r3, r7
 80012c4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	3301      	adds	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d9ef      	bls.n	80012b4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012d4:	7abb      	ldrb	r3, [r7, #10]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	f040 8083 	bne.w	80013e2 <SD_disk_initialize+0x192>
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	2baa      	cmp	r3, #170	; 0xaa
 80012e0:	d17f      	bne.n	80013e2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012e2:	2100      	movs	r1, #0
 80012e4:	2077      	movs	r0, #119	; 0x77
 80012e6:	f7ff ff5e 	bl	80011a6 <SD_SendCmd>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d807      	bhi.n	8001300 <SD_disk_initialize+0xb0>
 80012f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012f4:	2069      	movs	r0, #105	; 0x69
 80012f6:	f7ff ff56 	bl	80011a6 <SD_SendCmd>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001300:	4b47      	ldr	r3, [pc, #284]	; (8001420 <SD_disk_initialize+0x1d0>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1eb      	bne.n	80012e2 <SD_disk_initialize+0x92>
 800130a:	e000      	b.n	800130e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800130c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800130e:	4b44      	ldr	r3, [pc, #272]	; (8001420 <SD_disk_initialize+0x1d0>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d064      	beq.n	80013e2 <SD_disk_initialize+0x192>
 8001318:	2100      	movs	r1, #0
 800131a:	207a      	movs	r0, #122	; 0x7a
 800131c:	f7ff ff43 	bl	80011a6 <SD_SendCmd>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d15d      	bne.n	80013e2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	e00c      	b.n	8001346 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800132c:	7bfc      	ldrb	r4, [r7, #15]
 800132e:	f7ff fe29 	bl	8000f84 <SPI_RxByte>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	f104 0310 	add.w	r3, r4, #16
 800133a:	443b      	add	r3, r7
 800133c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	3301      	adds	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d9ef      	bls.n	800132c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800134c:	7a3b      	ldrb	r3, [r7, #8]
 800134e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SD_disk_initialize+0x10a>
 8001356:	230c      	movs	r3, #12
 8001358:	e000      	b.n	800135c <SD_disk_initialize+0x10c>
 800135a:	2304      	movs	r3, #4
 800135c:	73bb      	strb	r3, [r7, #14]
 800135e:	e040      	b.n	80013e2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001360:	2100      	movs	r1, #0
 8001362:	2077      	movs	r0, #119	; 0x77
 8001364:	f7ff ff1f 	bl	80011a6 <SD_SendCmd>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d808      	bhi.n	8001380 <SD_disk_initialize+0x130>
 800136e:	2100      	movs	r1, #0
 8001370:	2069      	movs	r0, #105	; 0x69
 8001372:	f7ff ff18 	bl	80011a6 <SD_SendCmd>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d801      	bhi.n	8001380 <SD_disk_initialize+0x130>
 800137c:	2302      	movs	r3, #2
 800137e:	e000      	b.n	8001382 <SD_disk_initialize+0x132>
 8001380:	2301      	movs	r3, #1
 8001382:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001384:	7bbb      	ldrb	r3, [r7, #14]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d10e      	bne.n	80013a8 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800138a:	2100      	movs	r1, #0
 800138c:	2077      	movs	r0, #119	; 0x77
 800138e:	f7ff ff0a 	bl	80011a6 <SD_SendCmd>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	d80e      	bhi.n	80013b6 <SD_disk_initialize+0x166>
 8001398:	2100      	movs	r1, #0
 800139a:	2069      	movs	r0, #105	; 0x69
 800139c:	f7ff ff03 	bl	80011a6 <SD_SendCmd>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d107      	bne.n	80013b6 <SD_disk_initialize+0x166>
 80013a6:	e00d      	b.n	80013c4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013a8:	2100      	movs	r1, #0
 80013aa:	2041      	movs	r0, #65	; 0x41
 80013ac:	f7ff fefb 	bl	80011a6 <SD_SendCmd>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <SD_disk_initialize+0x1d0>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1e1      	bne.n	8001384 <SD_disk_initialize+0x134>
 80013c0:	e000      	b.n	80013c4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013c2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <SD_disk_initialize+0x1d0>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d007      	beq.n	80013de <SD_disk_initialize+0x18e>
 80013ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d2:	2050      	movs	r0, #80	; 0x50
 80013d4:	f7ff fee7 	bl	80011a6 <SD_SendCmd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SD_disk_initialize+0x192>
 80013de:	2300      	movs	r3, #0
 80013e0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <SD_disk_initialize+0x1d4>)
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80013e8:	f7ff fd88 	bl	8000efc <DESELECT>
	SPI_RxByte();
 80013ec:	f7ff fdca 	bl	8000f84 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d008      	beq.n	8001408 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <SD_disk_initialize+0x1cc>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <SD_disk_initialize+0x1cc>)
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e001      	b.n	800140c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001408:	f7ff fe42 	bl	8001090 <SD_PowerOff>
	}

	return Stat;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <SD_disk_initialize+0x1cc>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bd90      	pop	{r4, r7, pc}
 800141a:	bf00      	nop
 800141c:	20000000 	.word	0x20000000
 8001420:	20006545 	.word	0x20006545
 8001424:	200000a8 	.word	0x200000a8

08001428 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SD_disk_status+0x14>
 8001438:	2301      	movs	r3, #1
 800143a:	e002      	b.n	8001442 <SD_disk_status+0x1a>
	return Stat;
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SD_disk_status+0x28>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000000 	.word	0x20000000

08001454 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	4603      	mov	r3, r0
 8001462:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <SD_disk_read+0x1c>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <SD_disk_read+0x20>
 8001470:	2304      	movs	r3, #4
 8001472:	e051      	b.n	8001518 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <SD_disk_read+0xcc>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SD_disk_read+0x32>
 8001482:	2303      	movs	r3, #3
 8001484:	e048      	b.n	8001518 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <SD_disk_read+0xd0>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <SD_disk_read+0x44>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	607b      	str	r3, [r7, #4]

	SELECT();
 8001498:	f7ff fd20 	bl	8000edc <SELECT>

	if (count == 1)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d111      	bne.n	80014c6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	2051      	movs	r0, #81	; 0x51
 80014a6:	f7ff fe7e 	bl	80011a6 <SD_SendCmd>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d129      	bne.n	8001504 <SD_disk_read+0xb0>
 80014b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b4:	68b8      	ldr	r0, [r7, #8]
 80014b6:	f7ff fe03 	bl	80010c0 <SD_RxDataBlock>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d021      	beq.n	8001504 <SD_disk_read+0xb0>
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	e01e      	b.n	8001504 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	2052      	movs	r0, #82	; 0x52
 80014ca:	f7ff fe6c 	bl	80011a6 <SD_SendCmd>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d117      	bne.n	8001504 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80014d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d8:	68b8      	ldr	r0, [r7, #8]
 80014da:	f7ff fdf1 	bl	80010c0 <SD_RxDataBlock>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00a      	beq.n	80014fa <SD_disk_read+0xa6>
				buff += 512;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014ea:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ed      	bne.n	80014d4 <SD_disk_read+0x80>
 80014f8:	e000      	b.n	80014fc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80014fa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80014fc:	2100      	movs	r1, #0
 80014fe:	204c      	movs	r0, #76	; 0x4c
 8001500:	f7ff fe51 	bl	80011a6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001504:	f7ff fcfa 	bl	8000efc <DESELECT>
	SPI_RxByte();
 8001508:	f7ff fd3c 	bl	8000f84 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	bf14      	ite	ne
 8001512:	2301      	movne	r3, #1
 8001514:	2300      	moveq	r3, #0
 8001516:	b2db      	uxtb	r3, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	200000a8 	.word	0x200000a8

08001528 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4603      	mov	r3, r0
 8001536:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <SD_disk_write+0x1c>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <SD_disk_write+0x20>
 8001544:	2304      	movs	r3, #4
 8001546:	e06b      	b.n	8001620 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001548:	4b37      	ldr	r3, [pc, #220]	; (8001628 <SD_disk_write+0x100>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SD_disk_write+0x32>
 8001556:	2303      	movs	r3, #3
 8001558:	e062      	b.n	8001620 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <SD_disk_write+0x100>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SD_disk_write+0x44>
 8001568:	2302      	movs	r3, #2
 800156a:	e059      	b.n	8001620 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <SD_disk_write+0x104>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <SD_disk_write+0x56>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	607b      	str	r3, [r7, #4]

	SELECT();
 800157e:	f7ff fcad 	bl	8000edc <SELECT>

	if (count == 1)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d110      	bne.n	80015aa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	2058      	movs	r0, #88	; 0x58
 800158c:	f7ff fe0b 	bl	80011a6 <SD_SendCmd>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d13a      	bne.n	800160c <SD_disk_write+0xe4>
 8001596:	21fe      	movs	r1, #254	; 0xfe
 8001598:	68b8      	ldr	r0, [r7, #8]
 800159a:	f7ff fdc1 	bl	8001120 <SD_TxDataBlock>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d033      	beq.n	800160c <SD_disk_write+0xe4>
			count = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	e030      	b.n	800160c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <SD_disk_write+0x104>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80015b6:	2100      	movs	r1, #0
 80015b8:	2077      	movs	r0, #119	; 0x77
 80015ba:	f7ff fdf4 	bl	80011a6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	2057      	movs	r0, #87	; 0x57
 80015c2:	f7ff fdf0 	bl	80011a6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	2059      	movs	r0, #89	; 0x59
 80015ca:	f7ff fdec 	bl	80011a6 <SD_SendCmd>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d11b      	bne.n	800160c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015d4:	21fc      	movs	r1, #252	; 0xfc
 80015d6:	68b8      	ldr	r0, [r7, #8]
 80015d8:	f7ff fda2 	bl	8001120 <SD_TxDataBlock>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00a      	beq.n	80015f8 <SD_disk_write+0xd0>
				buff += 512;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015e8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1ee      	bne.n	80015d4 <SD_disk_write+0xac>
 80015f6:	e000      	b.n	80015fa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015f8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80015fa:	21fd      	movs	r1, #253	; 0xfd
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fd8f 	bl	8001120 <SD_TxDataBlock>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <SD_disk_write+0xe4>
			{
				count = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800160c:	f7ff fc76 	bl	8000efc <DESELECT>
	SPI_RxByte();
 8001610:	f7ff fcb8 	bl	8000f84 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf14      	ite	ne
 800161a:	2301      	movne	r3, #1
 800161c:	2300      	moveq	r3, #0
 800161e:	b2db      	uxtb	r3, r3
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000
 800162c:	200000a8 	.word	0x200000a8

08001630 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b08b      	sub	sp, #44	; 0x2c
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	603a      	str	r2, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
 800163c:	460b      	mov	r3, r1
 800163e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SD_disk_ioctl+0x1e>
 800164a:	2304      	movs	r3, #4
 800164c:	e115      	b.n	800187a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d124      	bne.n	80016a4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d012      	beq.n	8001688 <SD_disk_ioctl+0x58>
 8001662:	2b02      	cmp	r3, #2
 8001664:	dc1a      	bgt.n	800169c <SD_disk_ioctl+0x6c>
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <SD_disk_ioctl+0x40>
 800166a:	2b01      	cmp	r3, #1
 800166c:	d006      	beq.n	800167c <SD_disk_ioctl+0x4c>
 800166e:	e015      	b.n	800169c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001670:	f7ff fd0e 	bl	8001090 <SD_PowerOff>
			res = RES_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800167a:	e0fc      	b.n	8001876 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800167c:	f7ff fcc6 	bl	800100c <SD_PowerOn>
			res = RES_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001686:	e0f6      	b.n	8001876 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	1c5c      	adds	r4, r3, #1
 800168c:	f7ff fd0c 	bl	80010a8 <SD_CheckPower>
 8001690:	4603      	mov	r3, r0
 8001692:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800169a:	e0ec      	b.n	8001876 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800169c:	2304      	movs	r3, #4
 800169e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016a2:	e0e8      	b.n	8001876 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016a4:	4b77      	ldr	r3, [pc, #476]	; (8001884 <SD_disk_ioctl+0x254>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SD_disk_ioctl+0x86>
 80016b2:	2303      	movs	r3, #3
 80016b4:	e0e1      	b.n	800187a <SD_disk_ioctl+0x24a>

		SELECT();
 80016b6:	f7ff fc11 	bl	8000edc <SELECT>

		switch (ctrl)
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	2b0d      	cmp	r3, #13
 80016be:	f200 80cb 	bhi.w	8001858 <SD_disk_ioctl+0x228>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <SD_disk_ioctl+0x98>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080017c3 	.word	0x080017c3
 80016cc:	08001701 	.word	0x08001701
 80016d0:	080017b3 	.word	0x080017b3
 80016d4:	08001859 	.word	0x08001859
 80016d8:	08001859 	.word	0x08001859
 80016dc:	08001859 	.word	0x08001859
 80016e0:	08001859 	.word	0x08001859
 80016e4:	08001859 	.word	0x08001859
 80016e8:	08001859 	.word	0x08001859
 80016ec:	08001859 	.word	0x08001859
 80016f0:	08001859 	.word	0x08001859
 80016f4:	080017d5 	.word	0x080017d5
 80016f8:	080017f9 	.word	0x080017f9
 80016fc:	0800181d 	.word	0x0800181d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001700:	2100      	movs	r1, #0
 8001702:	2049      	movs	r0, #73	; 0x49
 8001704:	f7ff fd4f 	bl	80011a6 <SD_SendCmd>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 80a8 	bne.w	8001860 <SD_disk_ioctl+0x230>
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2110      	movs	r1, #16
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fcd2 	bl	80010c0 <SD_RxDataBlock>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 809e 	beq.w	8001860 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001724:	7b3b      	ldrb	r3, [r7, #12]
 8001726:	099b      	lsrs	r3, r3, #6
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d10e      	bne.n	800174c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800172e:	7d7b      	ldrb	r3, [r7, #21]
 8001730:	b29a      	uxth	r2, r3
 8001732:	7d3b      	ldrb	r3, [r7, #20]
 8001734:	b29b      	uxth	r3, r3
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	b29b      	uxth	r3, r3
 800173a:	4413      	add	r3, r2
 800173c:	b29b      	uxth	r3, r3
 800173e:	3301      	adds	r3, #1
 8001740:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001742:	8bfb      	ldrh	r3, [r7, #30]
 8001744:	029a      	lsls	r2, r3, #10
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e02e      	b.n	80017aa <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800174c:	7c7b      	ldrb	r3, [r7, #17]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	b2da      	uxtb	r2, r3
 8001754:	7dbb      	ldrb	r3, [r7, #22]
 8001756:	09db      	lsrs	r3, r3, #7
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4413      	add	r3, r2
 800175c:	b2da      	uxtb	r2, r3
 800175e:	7d7b      	ldrb	r3, [r7, #21]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f003 0306 	and.w	r3, r3, #6
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4413      	add	r3, r2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3302      	adds	r3, #2
 8001770:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001774:	7d3b      	ldrb	r3, [r7, #20]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	b2db      	uxtb	r3, r3
 800177a:	b29a      	uxth	r2, r3
 800177c:	7cfb      	ldrb	r3, [r7, #19]
 800177e:	b29b      	uxth	r3, r3
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	b29b      	uxth	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	b29a      	uxth	r2, r3
 8001788:	7cbb      	ldrb	r3, [r7, #18]
 800178a:	029b      	lsls	r3, r3, #10
 800178c:	b29b      	uxth	r3, r3
 800178e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001792:	b29b      	uxth	r3, r3
 8001794:	4413      	add	r3, r2
 8001796:	b29b      	uxth	r3, r3
 8001798:	3301      	adds	r3, #1
 800179a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800179c:	8bfa      	ldrh	r2, [r7, #30]
 800179e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017a2:	3b09      	subs	r3, #9
 80017a4:	409a      	lsls	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80017b0:	e056      	b.n	8001860 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017c0:	e055      	b.n	800186e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80017c2:	f7ff fc09 	bl	8000fd8 <SD_ReadyWait>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2bff      	cmp	r3, #255	; 0xff
 80017ca:	d14b      	bne.n	8001864 <SD_disk_ioctl+0x234>
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017d2:	e047      	b.n	8001864 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017d4:	2100      	movs	r1, #0
 80017d6:	2049      	movs	r0, #73	; 0x49
 80017d8:	f7ff fce5 	bl	80011a6 <SD_SendCmd>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d142      	bne.n	8001868 <SD_disk_ioctl+0x238>
 80017e2:	2110      	movs	r1, #16
 80017e4:	6a38      	ldr	r0, [r7, #32]
 80017e6:	f7ff fc6b 	bl	80010c0 <SD_RxDataBlock>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d03b      	beq.n	8001868 <SD_disk_ioctl+0x238>
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017f6:	e037      	b.n	8001868 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017f8:	2100      	movs	r1, #0
 80017fa:	204a      	movs	r0, #74	; 0x4a
 80017fc:	f7ff fcd3 	bl	80011a6 <SD_SendCmd>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d132      	bne.n	800186c <SD_disk_ioctl+0x23c>
 8001806:	2110      	movs	r1, #16
 8001808:	6a38      	ldr	r0, [r7, #32]
 800180a:	f7ff fc59 	bl	80010c0 <SD_RxDataBlock>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d02b      	beq.n	800186c <SD_disk_ioctl+0x23c>
 8001814:	2300      	movs	r3, #0
 8001816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800181a:	e027      	b.n	800186c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800181c:	2100      	movs	r1, #0
 800181e:	207a      	movs	r0, #122	; 0x7a
 8001820:	f7ff fcc1 	bl	80011a6 <SD_SendCmd>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d116      	bne.n	8001858 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800182a:	2300      	movs	r3, #0
 800182c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001830:	e00b      	b.n	800184a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001832:	6a3c      	ldr	r4, [r7, #32]
 8001834:	1c63      	adds	r3, r4, #1
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	f7ff fba4 	bl	8000f84 <SPI_RxByte>
 800183c:	4603      	mov	r3, r0
 800183e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001840:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001844:	3301      	adds	r3, #1
 8001846:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800184a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800184e:	2b03      	cmp	r3, #3
 8001850:	d9ef      	bls.n	8001832 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001858:	2304      	movs	r3, #4
 800185a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800185e:	e006      	b.n	800186e <SD_disk_ioctl+0x23e>
			break;
 8001860:	bf00      	nop
 8001862:	e004      	b.n	800186e <SD_disk_ioctl+0x23e>
			break;
 8001864:	bf00      	nop
 8001866:	e002      	b.n	800186e <SD_disk_ioctl+0x23e>
			break;
 8001868:	bf00      	nop
 800186a:	e000      	b.n	800186e <SD_disk_ioctl+0x23e>
			break;
 800186c:	bf00      	nop
		}

		DESELECT();
 800186e:	f7ff fb45 	bl	8000efc <DESELECT>
		SPI_RxByte();
 8001872:	f7ff fb87 	bl	8000f84 <SPI_RxByte>
	}

	return res;
 8001876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800187a:	4618      	mov	r0, r3
 800187c:	372c      	adds	r7, #44	; 0x2c
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	20000000 	.word	0x20000000

08001888 <send_uart>:
// Buffer for UART? Might not even need this
char buffer[1024];


// Send data through UART
void send_uart(char *string){
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7fe fcbd 	bl	8000210 <strlen>
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, 2000);
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	b29a      	uxth	r2, r3
 800189e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <send_uart+0x2c>)
 80018a6:	f004 f812 	bl	80058ce <HAL_UART_Transmit>
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200001f4 	.word	0x200001f4

080018b8 <bufsize>:

// Find the size of data in buffer
int bufsize(char *buf){
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	int i = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
	while(*buf++ != '\0'){
 80018c4:	e002      	b.n	80018cc <bufsize+0x14>
		i++;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3301      	adds	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
	while(*buf++ != '\0'){
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f6      	bne.n	80018c6 <bufsize+0xe>
	}
	return i;
 80018d8:	68fb      	ldr	r3, [r7, #12]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <bufclear>:

// Clear buffer
void bufclear(void){
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1024; i++){
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	e007      	b.n	8001904 <bufclear+0x1c>
		buffer[i] = '\0';
 80018f4:	4a09      	ldr	r2, [pc, #36]	; (800191c <bufclear+0x34>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1024; i++){
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3301      	adds	r3, #1
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190a:	dbf3      	blt.n	80018f4 <bufclear+0xc>
	}
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20006144 	.word	0x20006144

08001920 <HAL_ADC_ConvHalfCpltCallback>:
// Size of buffer may need to match size of input buffer from sensors?
// Needs to be divisible by the number of bytes in each line
// that I am writing to the SD card

// Called when buffer is half filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	fromADC_Ptr = &adc_data[0];
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800192c:	601a      	str	r2, [r3, #0]
	toSD_Ptr = &SD_value[0];
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001930:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001932:	601a      	str	r2, [r3, #0]

	dataReady = 1;
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200040bc 	.word	0x200040bc
 800194c:	20000238 	.word	0x20000238
 8001950:	20000004 	.word	0x20000004
 8001954:	20002178 	.word	0x20002178
 8001958:	200040c0 	.word	0x200040c0

0800195c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	fromADC_Ptr = &adc_data[NUM_CHANNELS/2];
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <HAL_ADC_ConvCpltCallback+0x28>)
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001968:	601a      	str	r2, [r3, #0]
	toSD_Ptr = &SD_value[NUM_CHANNELS/2];
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_ADC_ConvCpltCallback+0x30>)
 800196c:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_ADC_ConvCpltCallback+0x34>)
 800196e:	601a      	str	r2, [r3, #0]

	dataReady = 1;
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_ADC_ConvCpltCallback+0x38>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200040bc 	.word	0x200040bc
 8001988:	200011d8 	.word	0x200011d8
 800198c:	20000004 	.word	0x20000004
 8001990:	20003118 	.word	0x20003118
 8001994:	200040c0 	.word	0x200040c0

08001998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199e:	f000 fe75 	bl	800268c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a2:	f000 f9f7 	bl	8001d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a6:	f000 fbc1 	bl	800212c <MX_GPIO_Init>
  MX_DMA_Init();
 80019aa:	f000 fb9f 	bl	80020ec <MX_DMA_Init>
  MX_SPI1_Init();
 80019ae:	f000 faed 	bl	8001f8c <MX_SPI1_Init>
  MX_FATFS_Init();
 80019b2:	f004 fb01 	bl	8005fb8 <MX_FATFS_Init>
  MX_ADC1_Init();
 80019b6:	f000 fa5f 	bl	8001e78 <MX_ADC1_Init>
  MX_TIM1_Init();
 80019ba:	f000 fb1d 	bl	8001ff8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80019be:	f000 fb6b 	bl	8002098 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start DMA buffer
  // Might need to stop DMA at some point
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_data, NUM_CHANNELS);
 80019c2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80019c6:	49ac      	ldr	r1, [pc, #688]	; (8001c78 <main+0x2e0>)
 80019c8:	48ac      	ldr	r0, [pc, #688]	; (8001c7c <main+0x2e4>)
 80019ca:	f000 ff39 	bl	8002840 <HAL_ADC_Start_DMA>

  adc_buf_max = 0;
 80019ce:	4bac      	ldr	r3, [pc, #688]	; (8001c80 <main+0x2e8>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	801a      	strh	r2, [r3, #0]
  uint16_t current_acc_z;



  // Mount SD card
  fresult = f_mount(&fs, "", 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	49ab      	ldr	r1, [pc, #684]	; (8001c84 <main+0x2ec>)
 80019d8:	48ab      	ldr	r0, [pc, #684]	; (8001c88 <main+0x2f0>)
 80019da:	f006 fd3b 	bl	8008454 <f_mount>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	4baa      	ldr	r3, [pc, #680]	; (8001c8c <main+0x2f4>)
 80019e4:	701a      	strb	r2, [r3, #0]

  if(fresult != FR_OK){
 80019e6:	4ba9      	ldr	r3, [pc, #676]	; (8001c8c <main+0x2f4>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <main+0x5e>
	  send_uart("error in mounting SD card...\n");
 80019ee:	48a8      	ldr	r0, [pc, #672]	; (8001c90 <main+0x2f8>)
 80019f0:	f7ff ff4a 	bl	8001888 <send_uart>
 80019f4:	e002      	b.n	80019fc <main+0x64>
  }
  else{
	  send_uart("SD card mounted successfully...\n");
 80019f6:	48a7      	ldr	r0, [pc, #668]	; (8001c94 <main+0x2fc>)
 80019f8:	f7ff ff46 	bl	8001888 <send_uart>
  }

  // Check free space on SD card
  f_getfree("", &fre_clust, &pfs);
 80019fc:	4aa6      	ldr	r2, [pc, #664]	; (8001c98 <main+0x300>)
 80019fe:	49a7      	ldr	r1, [pc, #668]	; (8001c9c <main+0x304>)
 8001a00:	48a0      	ldr	r0, [pc, #640]	; (8001c84 <main+0x2ec>)
 8001a02:	f007 fcf8 	bl	80093f6 <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001a06:	4ba4      	ldr	r3, [pc, #656]	; (8001c98 <main+0x300>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	3b02      	subs	r3, #2
 8001a0e:	4aa2      	ldr	r2, [pc, #648]	; (8001c98 <main+0x300>)
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	8952      	ldrh	r2, [r2, #10]
 8001a14:	fb02 f303 	mul.w	r3, r2, r3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd93 	bl	8000544 <__aeabi_ui2d>
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b9f      	ldr	r3, [pc, #636]	; (8001ca0 <main+0x308>)
 8001a24:	f7fe fe08 	bl	8000638 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff f8b2 	bl	8000b98 <__aeabi_d2uiz>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4a9b      	ldr	r2, [pc, #620]	; (8001ca4 <main+0x30c>)
 8001a38:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD card total size: \t%lu\n", total);
 8001a3a:	4b9a      	ldr	r3, [pc, #616]	; (8001ca4 <main+0x30c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4999      	ldr	r1, [pc, #612]	; (8001ca8 <main+0x310>)
 8001a42:	489a      	ldr	r0, [pc, #616]	; (8001cac <main+0x314>)
 8001a44:	f008 f9d6 	bl	8009df4 <siprintf>
  send_uart(buffer);
 8001a48:	4898      	ldr	r0, [pc, #608]	; (8001cac <main+0x314>)
 8001a4a:	f7ff ff1d 	bl	8001888 <send_uart>
  bufclear();
 8001a4e:	f7ff ff4b 	bl	80018e8 <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001a52:	4b91      	ldr	r3, [pc, #580]	; (8001c98 <main+0x300>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	895b      	ldrh	r3, [r3, #10]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b90      	ldr	r3, [pc, #576]	; (8001c9c <main+0x304>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd6e 	bl	8000544 <__aeabi_ui2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b8c      	ldr	r3, [pc, #560]	; (8001ca0 <main+0x308>)
 8001a6e:	f7fe fde3 	bl	8000638 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f88d 	bl	8000b98 <__aeabi_d2uiz>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a8b      	ldr	r2, [pc, #556]	; (8001cb0 <main+0x318>)
 8001a82:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD card free space: \t%lu\n", free_space);
 8001a84:	4b8a      	ldr	r3, [pc, #552]	; (8001cb0 <main+0x318>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	498a      	ldr	r1, [pc, #552]	; (8001cb4 <main+0x31c>)
 8001a8c:	4887      	ldr	r0, [pc, #540]	; (8001cac <main+0x314>)
 8001a8e:	f008 f9b1 	bl	8009df4 <siprintf>
  send_uart(buffer);
 8001a92:	4886      	ldr	r0, [pc, #536]	; (8001cac <main+0x314>)
 8001a94:	f7ff fef8 	bl	8001888 <send_uart>

  // ********** Using puts puts and gets **********

  // Open file 1, write to file, then close file
  fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001a98:	2213      	movs	r2, #19
 8001a9a:	4987      	ldr	r1, [pc, #540]	; (8001cb8 <main+0x320>)
 8001a9c:	4887      	ldr	r0, [pc, #540]	; (8001cbc <main+0x324>)
 8001a9e:	f006 fd1f 	bl	80084e0 <f_open>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b79      	ldr	r3, [pc, #484]	; (8001c8c <main+0x2f4>)
 8001aa8:	701a      	strb	r2, [r3, #0]
  fresult = f_puts("This data is from the first file\n\n", &fil);
 8001aaa:	4984      	ldr	r1, [pc, #528]	; (8001cbc <main+0x324>)
 8001aac:	4884      	ldr	r0, [pc, #528]	; (8001cc0 <main+0x328>)
 8001aae:	f007 fe0b 	bl	80096c8 <f_puts>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b75      	ldr	r3, [pc, #468]	; (8001c8c <main+0x2f4>)
 8001ab8:	701a      	strb	r2, [r3, #0]
  fresult = f_close(&fil);
 8001aba:	4880      	ldr	r0, [pc, #512]	; (8001cbc <main+0x324>)
 8001abc:	f007 fa4d 	bl	8008f5a <f_close>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b71      	ldr	r3, [pc, #452]	; (8001c8c <main+0x2f4>)
 8001ac6:	701a      	strb	r2, [r3, #0]
  send_uart("file1.txt created and the data is written\n");
 8001ac8:	487e      	ldr	r0, [pc, #504]	; (8001cc4 <main+0x32c>)
 8001aca:	f7ff fedd 	bl	8001888 <send_uart>
  fresult = f_open(&fil, "file1.txt", FA_READ);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4979      	ldr	r1, [pc, #484]	; (8001cb8 <main+0x320>)
 8001ad2:	487a      	ldr	r0, [pc, #488]	; (8001cbc <main+0x324>)
 8001ad4:	f006 fd04 	bl	80084e0 <f_open>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <main+0x2f4>)
 8001ade:	701a      	strb	r2, [r3, #0]
  // Everything worked good except the "fil.fsize" reference
  // This has been replaced in ChaN's FatFs R0.12c version with f_size(&fil)
  f_gets(buffer, f_size(&fil), &fil);
 8001ae0:	4b76      	ldr	r3, [pc, #472]	; (8001cbc <main+0x324>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a75      	ldr	r2, [pc, #468]	; (8001cbc <main+0x324>)
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4870      	ldr	r0, [pc, #448]	; (8001cac <main+0x314>)
 8001aea:	f007 fd39 	bl	8009560 <f_gets>
  send_uart(buffer);
 8001aee:	486f      	ldr	r0, [pc, #444]	; (8001cac <main+0x314>)
 8001af0:	f7ff feca 	bl	8001888 <send_uart>
  f_close(&fil);
 8001af4:	4871      	ldr	r0, [pc, #452]	; (8001cbc <main+0x324>)
 8001af6:	f007 fa30 	bl	8008f5a <f_close>
  bufclear();
 8001afa:	f7ff fef5 	bl	80018e8 <bufclear>

  // ********** Using f_write and f_read **********

  // Open file 2
  fresult = f_open(&fil, "file2.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001afe:	2213      	movs	r2, #19
 8001b00:	4971      	ldr	r1, [pc, #452]	; (8001cc8 <main+0x330>)
 8001b02:	486e      	ldr	r0, [pc, #440]	; (8001cbc <main+0x324>)
 8001b04:	f006 fcec 	bl	80084e0 <f_open>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <main+0x2f4>)
 8001b0e:	701a      	strb	r2, [r3, #0]
  // Write to file 2
  strcpy(buffer, "This is file 2 and it says 'Hello from Ethan!'\n");
 8001b10:	4a66      	ldr	r2, [pc, #408]	; (8001cac <main+0x314>)
 8001b12:	4b6e      	ldr	r3, [pc, #440]	; (8001ccc <main+0x334>)
 8001b14:	4614      	mov	r4, r2
 8001b16:	461d      	mov	r5, r3
 8001b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001b28:	4860      	ldr	r0, [pc, #384]	; (8001cac <main+0x314>)
 8001b2a:	f7ff fec5 	bl	80018b8 <bufsize>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b67      	ldr	r3, [pc, #412]	; (8001cd0 <main+0x338>)
 8001b34:	495d      	ldr	r1, [pc, #372]	; (8001cac <main+0x314>)
 8001b36:	4861      	ldr	r0, [pc, #388]	; (8001cbc <main+0x324>)
 8001b38:	f006 fffd 	bl	8008b36 <f_write>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b52      	ldr	r3, [pc, #328]	; (8001c8c <main+0x2f4>)
 8001b42:	701a      	strb	r2, [r3, #0]
  send_uart("file 2.txt created and data is written\n");
 8001b44:	4863      	ldr	r0, [pc, #396]	; (8001cd4 <main+0x33c>)
 8001b46:	f7ff fe9f 	bl	8001888 <send_uart>
  // Close file 2
  f_close(&fil);
 8001b4a:	485c      	ldr	r0, [pc, #368]	; (8001cbc <main+0x324>)
 8001b4c:	f007 fa05 	bl	8008f5a <f_close>
  // Clear buffer to show that text is obtained from the file
  bufclear();
 8001b50:	f7ff feca 	bl	80018e8 <bufclear>

  // ********** UPDATE an existing file **********
  // Open file with write access
  fresult = f_open(&fil, "file2.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8001b54:	2212      	movs	r2, #18
 8001b56:	495c      	ldr	r1, [pc, #368]	; (8001cc8 <main+0x330>)
 8001b58:	4858      	ldr	r0, [pc, #352]	; (8001cbc <main+0x324>)
 8001b5a:	f006 fcc1 	bl	80084e0 <f_open>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <main+0x2f4>)
 8001b64:	701a      	strb	r2, [r3, #0]
  // Move offset to end of file (append) (offset = file size)
  fresult = f_lseek(&fil, f_size(&fil));
 8001b66:	4b55      	ldr	r3, [pc, #340]	; (8001cbc <main+0x324>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4853      	ldr	r0, [pc, #332]	; (8001cbc <main+0x324>)
 8001b6e:	f007 fa1e 	bl	8008fae <f_lseek>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b45      	ldr	r3, [pc, #276]	; (8001c8c <main+0x2f4>)
 8001b78:	701a      	strb	r2, [r3, #0]
  // Write string to file
  fresult = f_puts("This text should be appended\n", &fil);
 8001b7a:	4950      	ldr	r1, [pc, #320]	; (8001cbc <main+0x324>)
 8001b7c:	4856      	ldr	r0, [pc, #344]	; (8001cd8 <main+0x340>)
 8001b7e:	f007 fda3 	bl	80096c8 <f_puts>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <main+0x2f4>)
 8001b88:	701a      	strb	r2, [r3, #0]
  // Write string to file
  fresult = f_printf(&fil, "%d %s", 2023, "is the current year\n");
 8001b8a:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <main+0x344>)
 8001b8c:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8001b90:	4953      	ldr	r1, [pc, #332]	; (8001ce0 <main+0x348>)
 8001b92:	484a      	ldr	r0, [pc, #296]	; (8001cbc <main+0x324>)
 8001b94:	f007 fdbc 	bl	8009710 <f_printf>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <main+0x2f4>)
 8001b9e:	701a      	strb	r2, [r3, #0]
  // Close file
  f_close(&fil);
 8001ba0:	4846      	ldr	r0, [pc, #280]	; (8001cbc <main+0x324>)
 8001ba2:	f007 f9da 	bl	8008f5a <f_close>


  // Open buffer file
  fresult = f_open(&fil, "adc_data.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8001ba6:	2212      	movs	r2, #18
 8001ba8:	494e      	ldr	r1, [pc, #312]	; (8001ce4 <main+0x34c>)
 8001baa:	4844      	ldr	r0, [pc, #272]	; (8001cbc <main+0x324>)
 8001bac:	f006 fc98 	bl	80084e0 <f_open>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <main+0x2f4>)
 8001bb6:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Initialize respective sensor data variables
	  current_audio = adc_data[0];
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <main+0x2e0>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	82fb      	strh	r3, [r7, #22]
	  current_pressure = adc_data[1];
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <main+0x2e0>)
 8001bc0:	885b      	ldrh	r3, [r3, #2]
 8001bc2:	82bb      	strh	r3, [r7, #20]
	  current_acc = sqrt(pow(adc_data[2], 2) + pow(adc_data[3], 2) + pow(adc_data[4], 2));
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <main+0x2e0>)
 8001bc6:	889b      	ldrh	r3, [r3, #4]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fcbb 	bl	8000544 <__aeabi_ui2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8001c70 <main+0x2d8>
 8001bd6:	ec43 2b10 	vmov	d0, r2, r3
 8001bda:	f008 fd79 	bl	800a6d0 <pow>
 8001bde:	ec55 4b10 	vmov	r4, r5, d0
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <main+0x2e0>)
 8001be4:	88db      	ldrh	r3, [r3, #6]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fcac 	bl	8000544 <__aeabi_ui2d>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8001c70 <main+0x2d8>
 8001bf4:	ec43 2b10 	vmov	d0, r2, r3
 8001bf8:	f008 fd6a 	bl	800a6d0 <pow>
 8001bfc:	ec53 2b10 	vmov	r2, r3, d0
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fb62 	bl	80002cc <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	461d      	mov	r5, r3
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <main+0x2e0>)
 8001c12:	891b      	ldrh	r3, [r3, #8]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fc95 	bl	8000544 <__aeabi_ui2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001c70 <main+0x2d8>
 8001c22:	ec43 2b10 	vmov	d0, r2, r3
 8001c26:	f008 fd53 	bl	800a6d0 <pow>
 8001c2a:	ec53 2b10 	vmov	r2, r3, d0
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fb4b 	bl	80002cc <__adddf3>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	ec43 2b17 	vmov	d7, r2, r3
 8001c3e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c42:	eef0 0a67 	vmov.f32	s1, s15
 8001c46:	f008 fdb3 	bl	800a7b0 <sqrt>
 8001c4a:	ec53 2b10 	vmov	r2, r3, d0
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe ffa1 	bl	8000b98 <__aeabi_d2uiz>
 8001c56:	4603      	mov	r3, r0
 8001c58:	827b      	strh	r3, [r7, #18]

	  current_acc_x = adc_data[2];
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <main+0x2e0>)
 8001c5c:	889b      	ldrh	r3, [r3, #4]
 8001c5e:	823b      	strh	r3, [r7, #16]
	  current_acc_y = adc_data[3];
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <main+0x2e0>)
 8001c62:	88db      	ldrh	r3, [r3, #6]
 8001c64:	81fb      	strh	r3, [r7, #14]
	  current_acc_z = adc_data[4];
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <main+0x2e0>)
 8001c68:	891b      	ldrh	r3, [r3, #8]
 8001c6a:	81bb      	strh	r3, [r7, #12]

	  while(dataReady == 0) {
 8001c6c:	e056      	b.n	8001d1c <main+0x384>
 8001c6e:	bf00      	nop
 8001c70:	00000000 	.word	0x00000000
 8001c74:	40000000 	.word	0x40000000
 8001c78:	20000238 	.word	0x20000238
 8001c7c:	200000ac 	.word	0x200000ac
 8001c80:	200040b8 	.word	0x200040b8
 8001c84:	0800b578 	.word	0x0800b578
 8001c88:	200040c4 	.word	0x200040c4
 8001c8c:	2000612c 	.word	0x2000612c
 8001c90:	0800b57c 	.word	0x0800b57c
 8001c94:	0800b59c 	.word	0x0800b59c
 8001c98:	20006134 	.word	0x20006134
 8001c9c:	20006138 	.word	0x20006138
 8001ca0:	3fe00000 	.word	0x3fe00000
 8001ca4:	2000613c 	.word	0x2000613c
 8001ca8:	0800b5c0 	.word	0x0800b5c0
 8001cac:	20006144 	.word	0x20006144
 8001cb0:	20006140 	.word	0x20006140
 8001cb4:	0800b5dc 	.word	0x0800b5dc
 8001cb8:	0800b5f8 	.word	0x0800b5f8
 8001cbc:	200050fc 	.word	0x200050fc
 8001cc0:	0800b604 	.word	0x0800b604
 8001cc4:	0800b628 	.word	0x0800b628
 8001cc8:	0800b654 	.word	0x0800b654
 8001ccc:	0800b660 	.word	0x0800b660
 8001cd0:	20006130 	.word	0x20006130
 8001cd4:	0800b690 	.word	0x0800b690
 8001cd8:	0800b6b8 	.word	0x0800b6b8
 8001cdc:	0800b6d8 	.word	0x0800b6d8
 8001ce0:	0800b6f0 	.word	0x0800b6f0
 8001ce4:	0800b6f8 	.word	0x0800b6f8
		  // Do stuff here with one half of ADC while
		  // other half is being filled?
		  fresult = f_lseek(&fil, f_size(&fil));
 8001ce8:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <main+0x3e0>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4619      	mov	r1, r3
 8001cee:	4822      	ldr	r0, [pc, #136]	; (8001d78 <main+0x3e0>)
 8001cf0:	f007 f95d 	bl	8008fae <f_lseek>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <main+0x3e4>)
 8001cfa:	701a      	strb	r2, [r3, #0]
		  fresult = f_printf(&fil, "ADC channel 0 (audio) = %d\n", current_audio);
 8001cfc:	8afb      	ldrh	r3, [r7, #22]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	491f      	ldr	r1, [pc, #124]	; (8001d80 <main+0x3e8>)
 8001d02:	481d      	ldr	r0, [pc, #116]	; (8001d78 <main+0x3e0>)
 8001d04:	f007 fd04 	bl	8009710 <f_printf>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <main+0x3e4>)
 8001d0e:	701a      	strb	r2, [r3, #0]
		  // fresult = f_sync(&fil);

		  // Increment count
		  count++;
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <main+0x3ec>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <main+0x3ec>)
 8001d1a:	701a      	strb	r2, [r3, #0]
	  while(dataReady == 0) {
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <main+0x3f0>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0e0      	beq.n	8001ce8 <main+0x350>
	  }
	  dataReady = 0;
 8001d26:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <main+0x3f0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
//	  fresult = f_printf(&fil, "count = %d\n", count);
//	  // Close file
//	  f_close(&fil);

	  // The current samples will be the "previous" samples for the next samples
	  previous_audio = current_audio;
 8001d2c:	8afb      	ldrh	r3, [r7, #22]
 8001d2e:	817b      	strh	r3, [r7, #10]
	  previous_pressure = current_pressure;
 8001d30:	8abb      	ldrh	r3, [r7, #20]
 8001d32:	813b      	strh	r3, [r7, #8]
	  previous_acc = current_acc;
 8001d34:	8a7b      	ldrh	r3, [r7, #18]
 8001d36:	80fb      	strh	r3, [r7, #6]

	  previous_acc_x = current_acc_x;
 8001d38:	8a3b      	ldrh	r3, [r7, #16]
 8001d3a:	80bb      	strh	r3, [r7, #4]
	  previous_acc_y = current_acc_y;
 8001d3c:	89fb      	ldrh	r3, [r7, #14]
 8001d3e:	807b      	strh	r3, [r7, #2]
	  previous_acc_z = current_acc_z;
 8001d40:	89bb      	ldrh	r3, [r7, #12]
 8001d42:	803b      	strh	r3, [r7, #0]


	  // Stop when count is a certain value (leads to unmount SD card)
	  if(count == 100) {
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <main+0x3ec>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d000      	beq.n	8001d4e <main+0x3b6>
	  current_audio = adc_data[0];
 8001d4c:	e734      	b.n	8001bb8 <main+0x220>
		  break;
 8001d4e:	bf00      	nop
	  }

  }

  // Stop ADC DMA and disable ADC
  HAL_ADC_Stop_DMA(&hadc1);
 8001d50:	480e      	ldr	r0, [pc, #56]	; (8001d8c <main+0x3f4>)
 8001d52:	f000 fe85 	bl	8002a60 <HAL_ADC_Stop_DMA>

  // Close buffer file
  f_close(&fil);
 8001d56:	4808      	ldr	r0, [pc, #32]	; (8001d78 <main+0x3e0>)
 8001d58:	f007 f8ff 	bl	8008f5a <f_close>

  // After while loop when break
  // Unmount SD card
  fresult = f_mount(NULL, "", 1);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	490c      	ldr	r1, [pc, #48]	; (8001d90 <main+0x3f8>)
 8001d60:	2000      	movs	r0, #0
 8001d62:	f006 fb77 	bl	8008454 <f_mount>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <main+0x3e4>)
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	2300      	movs	r3, #0


  /* USER CODE END 3 */
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bdb0      	pop	{r4, r5, r7, pc}
 8001d78:	200050fc 	.word	0x200050fc
 8001d7c:	2000612c 	.word	0x2000612c
 8001d80:	0800b708 	.word	0x0800b708
 8001d84:	200040c1 	.word	0x200040c1
 8001d88:	200040c0 	.word	0x200040c0
 8001d8c:	200000ac 	.word	0x200000ac
 8001d90:	0800b578 	.word	0x0800b578

08001d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b094      	sub	sp, #80	; 0x50
 8001d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	2234      	movs	r2, #52	; 0x34
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f008 f81e 	bl	8009de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <SystemClock_Config+0xdc>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	; (8001e70 <SystemClock_Config+0xdc>)
 8001dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <SystemClock_Config+0xdc>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <SystemClock_Config+0xe0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a25      	ldr	r2, [pc, #148]	; (8001e74 <SystemClock_Config+0xe0>)
 8001dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <SystemClock_Config+0xe0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001df0:	2301      	movs	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e04:	2304      	movs	r3, #4
 8001e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001e08:	23b4      	movs	r3, #180	; 0xb4
 8001e0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001e10:	2308      	movs	r3, #8
 8001e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e14:	2302      	movs	r3, #2
 8001e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 fb6d 	bl	80044fc <HAL_RCC_OscConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e28:	f000 f9de 	bl	80021e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e2c:	f001 ffcc 	bl	8003dc8 <HAL_PWREx_EnableOverDrive>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e36:	f000 f9d7 	bl	80021e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3a:	230f      	movs	r3, #15
 8001e3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e50:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	2105      	movs	r1, #5
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 f805 	bl	8003e68 <HAL_RCC_ClockConfig>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001e64:	f000 f9c0 	bl	80021e8 <Error_Handler>
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3750      	adds	r7, #80	; 0x50
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40007000 	.word	0x40007000

08001e78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e7e:	463b      	mov	r3, r7
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e8a:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001e8c:	4a3d      	ldr	r2, [pc, #244]	; (8001f84 <MX_ADC1_Init+0x10c>)
 8001e8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e90:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001e92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e98:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eaa:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eb2:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eb8:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001eba:	4a33      	ldr	r2, [pc, #204]	; (8001f88 <MX_ADC1_Init+0x110>)
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ebe:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001ec6:	2205      	movs	r2, #5
 8001ec8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001eca:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ed2:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ed8:	4829      	ldr	r0, [pc, #164]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001eda:	f000 fc6d 	bl	80027b8 <HAL_ADC_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ee4:	f000 f980 	bl	80021e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001ef0:	2307      	movs	r3, #7
 8001ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4821      	ldr	r0, [pc, #132]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001efa:	f000 fe15 	bl	8002b28 <HAL_ADC_ConfigChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f04:	f000 f970 	bl	80021e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	4619      	mov	r1, r3
 8001f14:	481a      	ldr	r0, [pc, #104]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001f16:	f000 fe07 	bl	8002b28 <HAL_ADC_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f20:	f000 f962 	bl	80021e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001f24:	230c      	movs	r3, #12
 8001f26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4813      	ldr	r0, [pc, #76]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001f32:	f000 fdf9 	bl	8002b28 <HAL_ADC_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001f3c:	f000 f954 	bl	80021e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001f40:	230d      	movs	r3, #13
 8001f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001f44:	2304      	movs	r3, #4
 8001f46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001f4e:	f000 fdeb 	bl	8002b28 <HAL_ADC_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001f58:	f000 f946 	bl	80021e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f60:	2305      	movs	r3, #5
 8001f62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f64:	463b      	mov	r3, r7
 8001f66:	4619      	mov	r1, r3
 8001f68:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_ADC1_Init+0x108>)
 8001f6a:	f000 fddd 	bl	8002b28 <HAL_ADC_ConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001f74:	f000 f938 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200000ac 	.word	0x200000ac
 8001f84:	40012000 	.word	0x40012000
 8001f88:	0f000001 	.word	0x0f000001

08001f8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <MX_SPI1_Init+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fd8:	220a      	movs	r2, #10
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fdc:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <MX_SPI1_Init+0x64>)
 8001fde:	f002 fd2b 	bl	8004a38 <HAL_SPI_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fe8:	f000 f8fe 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000154 	.word	0x20000154
 8001ff4:	40013000 	.word	0x40013000

08001ff8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	463b      	mov	r3, r7
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <MX_TIM1_Init+0x98>)
 8002016:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <MX_TIM1_Init+0x9c>)
 8002018:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800201a:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <MX_TIM1_Init+0x98>)
 800201c:	2200      	movs	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <MX_TIM1_Init+0x98>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <MX_TIM1_Init+0x98>)
 8002028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800202c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <MX_TIM1_Init+0x98>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <MX_TIM1_Init+0x98>)
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <MX_TIM1_Init+0x98>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002040:	4813      	ldr	r0, [pc, #76]	; (8002090 <MX_TIM1_Init+0x98>)
 8002042:	f003 f92b 	bl	800529c <HAL_TIM_Base_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800204c:	f000 f8cc 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002054:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002056:	f107 0308 	add.w	r3, r7, #8
 800205a:	4619      	mov	r1, r3
 800205c:	480c      	ldr	r0, [pc, #48]	; (8002090 <MX_TIM1_Init+0x98>)
 800205e:	f003 f96c 	bl	800533a <HAL_TIM_ConfigClockSource>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002068:	f000 f8be 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002074:	463b      	mov	r3, r7
 8002076:	4619      	mov	r1, r3
 8002078:	4805      	ldr	r0, [pc, #20]	; (8002090 <MX_TIM1_Init+0x98>)
 800207a:	f003 fb5f 	bl	800573c <HAL_TIMEx_MasterConfigSynchronization>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002084:	f000 f8b0 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002088:	bf00      	nop
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200001ac 	.word	0x200001ac
 8002094:	40010000 	.word	0x40010000

08002098 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <MX_USART2_UART_Init+0x50>)
 80020a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020be:	220c      	movs	r2, #12
 80020c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <MX_USART2_UART_Init+0x4c>)
 80020d0:	f003 fbb0 	bl	8005834 <HAL_UART_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020da:	f000 f885 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200001f4 	.word	0x200001f4
 80020e8:	40004400 	.word	0x40004400

080020ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_DMA_Init+0x3c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <MX_DMA_Init+0x3c>)
 80020fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_DMA_Init+0x3c>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	2038      	movs	r0, #56	; 0x38
 8002114:	f001 f893 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002118:	2038      	movs	r0, #56	; 0x38
 800211a:	f001 f8ac 	bl	8003276 <HAL_NVIC_EnableIRQ>

}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800

0800212c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <MX_GPIO_Init+0xb4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a25      	ldr	r2, [pc, #148]	; (80021e0 <MX_GPIO_Init+0xb4>)
 800214c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <MX_GPIO_Init+0xb4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <MX_GPIO_Init+0xb4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <MX_GPIO_Init+0xb4>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <MX_GPIO_Init+0xb4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <MX_GPIO_Init+0xb4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <MX_GPIO_Init+0xb4>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <MX_GPIO_Init+0xb4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_GPIO_Init+0xb4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <MX_GPIO_Init+0xb4>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_GPIO_Init+0xb4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2101      	movs	r1, #1
 80021b6:	480b      	ldr	r0, [pc, #44]	; (80021e4 <MX_GPIO_Init+0xb8>)
 80021b8:	f001 fdec 	bl	8003d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021bc:	2301      	movs	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	4804      	ldr	r0, [pc, #16]	; (80021e4 <MX_GPIO_Init+0xb8>)
 80021d4:	f001 fc4a 	bl	8003a6c <HAL_GPIO_Init>

}
 80021d8:	bf00      	nop
 80021da:	3728      	adds	r7, #40	; 0x28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020400 	.word	0x40020400

080021e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ec:	b672      	cpsid	i
}
 80021ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <Error_Handler+0x8>
	...

080021f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <HAL_MspInit+0x4c>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <HAL_MspInit+0x4c>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_MspInit+0x4c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_MspInit+0x4c>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a08      	ldr	r2, [pc, #32]	; (8002240 <HAL_MspInit+0x4c>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_MspInit+0x4c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002232:	2007      	movs	r0, #7
 8002234:	f000 fff8 	bl	8003228 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800

08002244 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a3c      	ldr	r2, [pc, #240]	; (8002354 <HAL_ADC_MspInit+0x110>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d171      	bne.n	800234a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <HAL_ADC_MspInit+0x114>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a3a      	ldr	r2, [pc, #232]	; (8002358 <HAL_ADC_MspInit+0x114>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b38      	ldr	r3, [pc, #224]	; (8002358 <HAL_ADC_MspInit+0x114>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b34      	ldr	r3, [pc, #208]	; (8002358 <HAL_ADC_MspInit+0x114>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a33      	ldr	r2, [pc, #204]	; (8002358 <HAL_ADC_MspInit+0x114>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b31      	ldr	r3, [pc, #196]	; (8002358 <HAL_ADC_MspInit+0x114>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_ADC_MspInit+0x114>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <HAL_ADC_MspInit+0x114>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_ADC_MspInit+0x114>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022ba:	230c      	movs	r3, #12
 80022bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022be:	2303      	movs	r3, #3
 80022c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4619      	mov	r1, r3
 80022cc:	4823      	ldr	r0, [pc, #140]	; (800235c <HAL_ADC_MspInit+0x118>)
 80022ce:	f001 fbcd 	bl	8003a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80022d2:	2313      	movs	r3, #19
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022d6:	2303      	movs	r3, #3
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	481e      	ldr	r0, [pc, #120]	; (8002360 <HAL_ADC_MspInit+0x11c>)
 80022e6:	f001 fbc1 	bl	8003a6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80022ea:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <HAL_ADC_MspInit+0x120>)
 80022ec:	4a1e      	ldr	r2, [pc, #120]	; (8002368 <HAL_ADC_MspInit+0x124>)
 80022ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_ADC_MspInit+0x120>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022f6:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_ADC_MspInit+0x120>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <HAL_ADC_MspInit+0x120>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_ADC_MspInit+0x120>)
 8002304:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002308:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_ADC_MspInit+0x120>)
 800230c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002310:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_ADC_MspInit+0x120>)
 8002314:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002318:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_ADC_MspInit+0x120>)
 800231c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002320:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_ADC_MspInit+0x120>)
 8002324:	2200      	movs	r2, #0
 8002326:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_ADC_MspInit+0x120>)
 800232a:	2200      	movs	r2, #0
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800232e:	480d      	ldr	r0, [pc, #52]	; (8002364 <HAL_ADC_MspInit+0x120>)
 8002330:	f000 ffbc 	bl	80032ac <HAL_DMA_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800233a:	f7ff ff55 	bl	80021e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_ADC_MspInit+0x120>)
 8002342:	639a      	str	r2, [r3, #56]	; 0x38
 8002344:	4a07      	ldr	r2, [pc, #28]	; (8002364 <HAL_ADC_MspInit+0x120>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800234a:	bf00      	nop
 800234c:	3728      	adds	r7, #40	; 0x28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40012000 	.word	0x40012000
 8002358:	40023800 	.word	0x40023800
 800235c:	40020800 	.word	0x40020800
 8002360:	40020000 	.word	0x40020000
 8002364:	200000f4 	.word	0x200000f4
 8002368:	40026410 	.word	0x40026410

0800236c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_SPI_MspInit+0x84>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d12b      	bne.n	80023e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_SPI_MspInit+0x88>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_SPI_MspInit+0x88>)
 8002398:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_SPI_MspInit+0x88>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_SPI_MspInit+0x88>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <HAL_SPI_MspInit+0x88>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_SPI_MspInit+0x88>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023c6:	23e0      	movs	r3, #224	; 0xe0
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023d6:	2305      	movs	r3, #5
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	; (80023f8 <HAL_SPI_MspInit+0x8c>)
 80023e2:	f001 fb43 	bl	8003a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023e6:	bf00      	nop
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40013000 	.word	0x40013000
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000

080023fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10d      	bne.n	800242a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_TIM_Base_MspInit+0x40>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_TIM_Base_MspInit+0x40>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <HAL_TIM_Base_MspInit+0x40>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40010000 	.word	0x40010000
 800243c:	40023800 	.word	0x40023800

08002440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_UART_MspInit+0x84>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d12b      	bne.n	80024ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_UART_MspInit+0x88>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <HAL_UART_MspInit+0x88>)
 800246c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_UART_MspInit+0x88>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_UART_MspInit+0x88>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a10      	ldr	r2, [pc, #64]	; (80024c8 <HAL_UART_MspInit+0x88>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_UART_MspInit+0x88>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800249a:	230c      	movs	r3, #12
 800249c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024aa:	2307      	movs	r3, #7
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	4805      	ldr	r0, [pc, #20]	; (80024cc <HAL_UART_MspInit+0x8c>)
 80024b6:	f001 fad9 	bl	8003a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024ba:	bf00      	nop
 80024bc:	3728      	adds	r7, #40	; 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40004400 	.word	0x40004400
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40020000 	.word	0x40020000

080024d0 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
	if(Timer1 > 0){
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <SDTimer_Handler+0x40>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <SDTimer_Handler+0x1c>
		Timer1--;
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <SDTimer_Handler+0x40>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <SDTimer_Handler+0x40>)
 80024ea:	701a      	strb	r2, [r3, #0]
		}
	if(Timer2 > 0){
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <SDTimer_Handler+0x44>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <SDTimer_Handler+0x34>
		Timer2--;
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <SDTimer_Handler+0x44>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <SDTimer_Handler+0x44>)
 8002502:	701a      	strb	r2, [r3, #0]
	}
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20006545 	.word	0x20006545
 8002514:	20006546 	.word	0x20006546

08002518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800251c:	e7fe      	b.n	800251c <NMI_Handler+0x4>

0800251e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002522:	e7fe      	b.n	8002522 <HardFault_Handler+0x4>

08002524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <MemManage_Handler+0x4>

0800252a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252e:	e7fe      	b.n	800252e <BusFault_Handler+0x4>

08002530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <UsageFault_Handler+0x4>

08002536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <SysTick_Handler+0x30>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	3301      	adds	r3, #1
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <SysTick_Handler+0x30>)
 8002570:	701a      	strb	r2, [r3, #0]

	if(FatFsCnt >= 10){
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <SysTick_Handler+0x30>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b09      	cmp	r3, #9
 800257a:	d904      	bls.n	8002586 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <SysTick_Handler+0x30>)
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002582:	f7ff ffa5 	bl	80024d0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002586:	f000 f8d3 	bl	8002730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20006544 	.word	0x20006544

08002594 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <DMA2_Stream0_IRQHandler+0x10>)
 800259a:	f000 fffd 	bl	8003598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200000f4 	.word	0x200000f4

080025a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <_sbrk+0x5c>)
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <_sbrk+0x60>)
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <_sbrk+0x64>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <_sbrk+0x68>)
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d207      	bcs.n	80025e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d8:	f007 fbda 	bl	8009d90 <__errno>
 80025dc:	4603      	mov	r3, r0
 80025de:	220c      	movs	r2, #12
 80025e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
 80025e6:	e009      	b.n	80025fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <_sbrk+0x64>)
 80025f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fa:	68fb      	ldr	r3, [r7, #12]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20020000 	.word	0x20020000
 8002608:	00000400 	.word	0x00000400
 800260c:	20006548 	.word	0x20006548
 8002610:	200067a0 	.word	0x200067a0

08002614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <SystemInit+0x20>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <SystemInit+0x20>)
 8002620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002670 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800263c:	480d      	ldr	r0, [pc, #52]	; (8002674 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800263e:	490e      	ldr	r1, [pc, #56]	; (8002678 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002640:	4a0e      	ldr	r2, [pc, #56]	; (800267c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002644:	e002      	b.n	800264c <LoopCopyDataInit>

08002646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264a:	3304      	adds	r3, #4

0800264c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800264c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002650:	d3f9      	bcc.n	8002646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002652:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002654:	4c0b      	ldr	r4, [pc, #44]	; (8002684 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002658:	e001      	b.n	800265e <LoopFillZerobss>

0800265a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800265c:	3204      	adds	r2, #4

0800265e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002660:	d3fb      	bcc.n	800265a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002662:	f7ff ffd7 	bl	8002614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002666:	f007 fb99 	bl	8009d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800266a:	f7ff f995 	bl	8001998 <main>
  bx  lr    
 800266e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002678:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800267c:	0800bc40 	.word	0x0800bc40
  ldr r2, =_sbss
 8002680:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002684:	2000679c 	.word	0x2000679c

08002688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002688:	e7fe      	b.n	8002688 <ADC_IRQHandler>
	...

0800268c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_Init+0x40>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0d      	ldr	r2, [pc, #52]	; (80026cc <HAL_Init+0x40>)
 8002696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800269a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_Init+0x40>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <HAL_Init+0x40>)
 80026a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_Init+0x40>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <HAL_Init+0x40>)
 80026ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b4:	2003      	movs	r0, #3
 80026b6:	f000 fdb7 	bl	8003228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f000 f808 	bl	80026d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c0:	f7ff fd98 	bl	80021f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023c00 	.word	0x40023c00

080026d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_InitTick+0x54>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_InitTick+0x58>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fdcf 	bl	8003292 <HAL_SYSTICK_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00e      	b.n	800271c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b0f      	cmp	r3, #15
 8002702:	d80a      	bhi.n	800271a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002704:	2200      	movs	r2, #0
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f000 fd97 	bl	800323e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002710:	4a06      	ldr	r2, [pc, #24]	; (800272c <HAL_InitTick+0x5c>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000008 	.word	0x20000008
 8002728:	20000010 	.word	0x20000010
 800272c:	2000000c 	.word	0x2000000c

08002730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_IncTick+0x20>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_IncTick+0x24>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4413      	add	r3, r2
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <HAL_IncTick+0x24>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000010 	.word	0x20000010
 8002754:	2000654c 	.word	0x2000654c

08002758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return uwTick;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_GetTick+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	2000654c 	.word	0x2000654c

08002770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff ffee 	bl	8002758 <HAL_GetTick>
 800277c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d005      	beq.n	8002796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_Delay+0x44>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002796:	bf00      	nop
 8002798:	f7ff ffde 	bl	8002758 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d8f7      	bhi.n	8002798 <HAL_Delay+0x28>
  {
  }
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000010 	.word	0x20000010

080027b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e033      	b.n	8002836 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fd34 	bl	8002244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027fe:	f023 0302 	bic.w	r3, r3, #2
 8002802:	f043 0202 	orr.w	r2, r3, #2
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fabe 	bl	8002d8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f023 0303 	bic.w	r3, r3, #3
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
 8002826:	e001      	b.n	800282c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_ADC_Start_DMA+0x1e>
 800285a:	2302      	movs	r3, #2
 800285c:	e0e9      	b.n	8002a32 <HAL_ADC_Start_DMA+0x1f2>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d018      	beq.n	80028a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002884:	4b6d      	ldr	r3, [pc, #436]	; (8002a3c <HAL_ADC_Start_DMA+0x1fc>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a6d      	ldr	r2, [pc, #436]	; (8002a40 <HAL_ADC_Start_DMA+0x200>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	0c9a      	lsrs	r2, r3, #18
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002898:	e002      	b.n	80028a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	3b01      	subs	r3, #1
 800289e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f9      	bne.n	800289a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b4:	d107      	bne.n	80028c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	f040 80a1 	bne.w	8002a18 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002900:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002914:	d106      	bne.n	8002924 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f023 0206 	bic.w	r2, r3, #6
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	645a      	str	r2, [r3, #68]	; 0x44
 8002922:	e002      	b.n	800292a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002932:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <HAL_ADC_Start_DMA+0x204>)
 8002934:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	4a43      	ldr	r2, [pc, #268]	; (8002a48 <HAL_ADC_Start_DMA+0x208>)
 800293c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	4a42      	ldr	r2, [pc, #264]	; (8002a4c <HAL_ADC_Start_DMA+0x20c>)
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	4a41      	ldr	r2, [pc, #260]	; (8002a50 <HAL_ADC_Start_DMA+0x210>)
 800294c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002956:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002966:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002976:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	334c      	adds	r3, #76	; 0x4c
 8002982:	4619      	mov	r1, r3
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f000 fd3e 	bl	8003408 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	2b00      	cmp	r3, #0
 8002996:	d12a      	bne.n	80029ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2d      	ldr	r2, [pc, #180]	; (8002a54 <HAL_ADC_Start_DMA+0x214>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d015      	beq.n	80029ce <HAL_ADC_Start_DMA+0x18e>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2c      	ldr	r2, [pc, #176]	; (8002a58 <HAL_ADC_Start_DMA+0x218>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_Start_DMA+0x178>
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <HAL_ADC_Start_DMA+0x204>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a27      	ldr	r2, [pc, #156]	; (8002a5c <HAL_ADC_Start_DMA+0x21c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d136      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x1f0>
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_ADC_Start_DMA+0x204>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d130      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d129      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e020      	b.n	8002a30 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <HAL_ADC_Start_DMA+0x214>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d11b      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x1f0>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d114      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	e00b      	b.n	8002a30 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f043 0210 	orr.w	r2, r3, #16
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000008 	.word	0x20000008
 8002a40:	431bde83 	.word	0x431bde83
 8002a44:	40012300 	.word	0x40012300
 8002a48:	08002f85 	.word	0x08002f85
 8002a4c:	0800303f 	.word	0x0800303f
 8002a50:	0800305b 	.word	0x0800305b
 8002a54:	40012000 	.word	0x40012000
 8002a58:	40012100 	.word	0x40012100
 8002a5c:	40012200 	.word	0x40012200

08002a60 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_Stop_DMA+0x1a>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e048      	b.n	8002b0c <HAL_ADC_Stop_DMA+0xac>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d130      	bne.n	8002b02 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aae:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d10f      	bne.n	8002ade <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fcf8 	bl	80034b8 <HAL_DMA_Abort>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002aec:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x1c>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e113      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x244>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b09      	cmp	r3, #9
 8002b52:	d925      	bls.n	8002ba0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68d9      	ldr	r1, [r3, #12]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	3b1e      	subs	r3, #30
 8002b6a:	2207      	movs	r2, #7
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43da      	mvns	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	400a      	ands	r2, r1
 8002b78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68d9      	ldr	r1, [r3, #12]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4403      	add	r3, r0
 8002b92:	3b1e      	subs	r3, #30
 8002b94:	409a      	lsls	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	e022      	b.n	8002be6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6919      	ldr	r1, [r3, #16]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6919      	ldr	r1, [r3, #16]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4403      	add	r3, r0
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d824      	bhi.n	8002c38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3b05      	subs	r3, #5
 8002c00:	221f      	movs	r2, #31
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	3b05      	subs	r3, #5
 8002c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34
 8002c36:	e04c      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b0c      	cmp	r3, #12
 8002c3e:	d824      	bhi.n	8002c8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	3b23      	subs	r3, #35	; 0x23
 8002c52:	221f      	movs	r2, #31
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43da      	mvns	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	400a      	ands	r2, r1
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	3b23      	subs	r3, #35	; 0x23
 8002c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
 8002c88:	e023      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b41      	subs	r3, #65	; 0x41
 8002c9c:	221f      	movs	r2, #31
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	400a      	ands	r2, r1
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b41      	subs	r3, #65	; 0x41
 8002cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd2:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <HAL_ADC_ConfigChannel+0x250>)
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <HAL_ADC_ConfigChannel+0x254>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10f      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x1d8>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b12      	cmp	r3, #18
 8002ce6:	d10b      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <HAL_ADC_ConfigChannel+0x254>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d12b      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x23a>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <HAL_ADC_ConfigChannel+0x258>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <HAL_ADC_ConfigChannel+0x1f4>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b11      	cmp	r3, #17
 8002d1a:	d122      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <HAL_ADC_ConfigChannel+0x258>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d111      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_ADC_ConfigChannel+0x25c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <HAL_ADC_ConfigChannel+0x260>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	0c9a      	lsrs	r2, r3, #18
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d54:	e002      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f9      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40012300 	.word	0x40012300
 8002d7c:	40012000 	.word	0x40012000
 8002d80:	10000012 	.word	0x10000012
 8002d84:	20000008 	.word	0x20000008
 8002d88:	431bde83 	.word	0x431bde83

08002d8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d94:	4b79      	ldr	r3, [pc, #484]	; (8002f7c <ADC_Init+0x1f0>)
 8002d96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	021a      	lsls	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6899      	ldr	r1, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	4a58      	ldr	r2, [pc, #352]	; (8002f80 <ADC_Init+0x1f4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d022      	beq.n	8002e6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6899      	ldr	r1, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6899      	ldr	r1, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	e00f      	b.n	8002e8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0202 	bic.w	r2, r2, #2
 8002e98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6899      	ldr	r1, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7e1b      	ldrb	r3, [r3, #24]
 8002ea4:	005a      	lsls	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01b      	beq.n	8002ef0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ed6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	035a      	lsls	r2, r3, #13
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	e007      	b.n	8002f00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	051a      	lsls	r2, r3, #20
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6899      	ldr	r1, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f42:	025a      	lsls	r2, r3, #9
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6899      	ldr	r1, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	029a      	lsls	r2, r3, #10
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	609a      	str	r2, [r3, #8]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40012300 	.word	0x40012300
 8002f80:	0f000001 	.word	0x0f000001

08002f84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d13c      	bne.n	8003018 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d12b      	bne.n	8003010 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d127      	bne.n	8003010 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d119      	bne.n	8003010 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0220 	bic.w	r2, r2, #32
 8002fea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f7fe fca3 	bl	800195c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003016:	e00e      	b.n	8003036 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7ff fd75 	bl	8002b14 <HAL_ADC_ErrorCallback>
}
 800302a:	e004      	b.n	8003036 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
}
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7fe fc67 	bl	8001920 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2240      	movs	r2, #64	; 0x40
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f043 0204 	orr.w	r2, r3, #4
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f7ff fd4a 	bl	8002b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a4:	4013      	ands	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ba:	4a04      	ldr	r2, [pc, #16]	; (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	60d3      	str	r3, [r2, #12]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <__NVIC_GetPriorityGrouping+0x18>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 0307 	and.w	r3, r3, #7
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	db0b      	blt.n	8003116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4907      	ldr	r1, [pc, #28]	; (8003124 <__NVIC_EnableIRQ+0x38>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2001      	movs	r0, #1
 800310e:	fa00 f202 	lsl.w	r2, r0, r2
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000e100 	.word	0xe000e100

08003128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db0a      	blt.n	8003152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	490c      	ldr	r1, [pc, #48]	; (8003174 <__NVIC_SetPriority+0x4c>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	440b      	add	r3, r1
 800314c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003150:	e00a      	b.n	8003168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4908      	ldr	r1, [pc, #32]	; (8003178 <__NVIC_SetPriority+0x50>)
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	3b04      	subs	r3, #4
 8003160:	0112      	lsls	r2, r2, #4
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	440b      	add	r3, r1
 8003166:	761a      	strb	r2, [r3, #24]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000e100 	.word	0xe000e100
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f1c3 0307 	rsb	r3, r3, #7
 8003196:	2b04      	cmp	r3, #4
 8003198:	bf28      	it	cs
 800319a:	2304      	movcs	r3, #4
 800319c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d902      	bls.n	80031ac <NVIC_EncodePriority+0x30>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3b03      	subs	r3, #3
 80031aa:	e000      	b.n	80031ae <NVIC_EncodePriority+0x32>
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	401a      	ands	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	4313      	orrs	r3, r2
         );
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f4:	d301      	bcc.n	80031fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00f      	b.n	800321a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fa:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <SysTick_Config+0x40>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003202:	210f      	movs	r1, #15
 8003204:	f04f 30ff 	mov.w	r0, #4294967295
 8003208:	f7ff ff8e 	bl	8003128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <SysTick_Config+0x40>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <SysTick_Config+0x40>)
 8003214:	2207      	movs	r2, #7
 8003216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	e000e010 	.word	0xe000e010

08003228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ff29 	bl	8003088 <__NVIC_SetPriorityGrouping>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003250:	f7ff ff3e 	bl	80030d0 <__NVIC_GetPriorityGrouping>
 8003254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	6978      	ldr	r0, [r7, #20]
 800325c:	f7ff ff8e 	bl	800317c <NVIC_EncodePriority>
 8003260:	4602      	mov	r2, r0
 8003262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff5d 	bl	8003128 <__NVIC_SetPriority>
}
 800326e:	bf00      	nop
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	4603      	mov	r3, r0
 800327e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff31 	bl	80030ec <__NVIC_EnableIRQ>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ffa2 	bl	80031e4 <SysTick_Config>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032b8:	f7ff fa4e 	bl	8002758 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e099      	b.n	80033fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e8:	e00f      	b.n	800330a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ea:	f7ff fa35 	bl	8002758 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d908      	bls.n	800330a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2203      	movs	r2, #3
 8003302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e078      	b.n	80033fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e8      	bne.n	80032ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4b38      	ldr	r3, [pc, #224]	; (8003404 <HAL_DMA_Init+0x158>)
 8003324:	4013      	ands	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2b04      	cmp	r3, #4
 8003362:	d107      	bne.n	8003374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	4313      	orrs	r3, r2
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f023 0307 	bic.w	r3, r3, #7
 800338a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2b04      	cmp	r3, #4
 800339c:	d117      	bne.n	80033ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00e      	beq.n	80033ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fadf 	bl	8003974 <DMA_CheckFifoParam>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2240      	movs	r2, #64	; 0x40
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033ca:	2301      	movs	r3, #1
 80033cc:	e016      	b.n	80033fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa96 	bl	8003908 <DMA_CalcBaseAndBitshift>
 80033dc:	4603      	mov	r3, r0
 80033de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	223f      	movs	r2, #63	; 0x3f
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	f010803f 	.word	0xf010803f

08003408 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_DMA_Start_IT+0x26>
 800342a:	2302      	movs	r3, #2
 800342c:	e040      	b.n	80034b0 <HAL_DMA_Start_IT+0xa8>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d12f      	bne.n	80034a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fa28 	bl	80038ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	223f      	movs	r2, #63	; 0x3f
 8003462:	409a      	lsls	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0216 	orr.w	r2, r2, #22
 8003476:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0208 	orr.w	r2, r2, #8
 800348e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e005      	b.n	80034ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
 80034ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034c6:	f7ff f947 	bl	8002758 <HAL_GetTick>
 80034ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d008      	beq.n	80034ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e052      	b.n	8003590 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0216 	bic.w	r2, r2, #22
 80034f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003508:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <HAL_DMA_Abort+0x62>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0208 	bic.w	r2, r2, #8
 8003528:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0201 	bic.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800353a:	e013      	b.n	8003564 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800353c:	f7ff f90c 	bl	8002758 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b05      	cmp	r3, #5
 8003548:	d90c      	bls.n	8003564 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2203      	movs	r2, #3
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e015      	b.n	8003590 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e4      	bne.n	800353c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	223f      	movs	r2, #63	; 0x3f
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035a4:	4b8e      	ldr	r3, [pc, #568]	; (80037e0 <HAL_DMA_IRQHandler+0x248>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a8e      	ldr	r2, [pc, #568]	; (80037e4 <HAL_DMA_IRQHandler+0x24c>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0a9b      	lsrs	r3, r3, #10
 80035b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	2208      	movs	r2, #8
 80035c4:	409a      	lsls	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01a      	beq.n	8003604 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d013      	beq.n	8003604 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0204 	bic.w	r2, r2, #4
 80035ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	2208      	movs	r2, #8
 80035f2:	409a      	lsls	r2, r3
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	2201      	movs	r2, #1
 800360a:	409a      	lsls	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d012      	beq.n	800363a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	2201      	movs	r2, #1
 8003628:	409a      	lsls	r2, r3
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	f043 0202 	orr.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	2204      	movs	r2, #4
 8003640:	409a      	lsls	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d012      	beq.n	8003670 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	2204      	movs	r2, #4
 800365e:	409a      	lsls	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003668:	f043 0204 	orr.w	r2, r3, #4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	2210      	movs	r2, #16
 8003676:	409a      	lsls	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d043      	beq.n	8003708 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d03c      	beq.n	8003708 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	2210      	movs	r2, #16
 8003694:	409a      	lsls	r2, r3
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d018      	beq.n	80036da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d108      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d024      	beq.n	8003708 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
 80036c6:	e01f      	b.n	8003708 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01b      	beq.n	8003708 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
 80036d8:	e016      	b.n	8003708 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d107      	bne.n	80036f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0208 	bic.w	r2, r2, #8
 80036f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370c:	2220      	movs	r2, #32
 800370e:	409a      	lsls	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 808f 	beq.w	8003838 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8087 	beq.w	8003838 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	2220      	movs	r2, #32
 8003730:	409a      	lsls	r2, r3
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b05      	cmp	r3, #5
 8003740:	d136      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0216 	bic.w	r2, r2, #22
 8003750:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003760:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <HAL_DMA_IRQHandler+0x1da>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0208 	bic.w	r2, r2, #8
 8003780:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	223f      	movs	r2, #63	; 0x3f
 8003788:	409a      	lsls	r2, r3
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d07e      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
        }
        return;
 80037ae:	e079      	b.n	80038a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01d      	beq.n	80037fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10d      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d031      	beq.n	8003838 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4798      	blx	r3
 80037dc:	e02c      	b.n	8003838 <HAL_DMA_IRQHandler+0x2a0>
 80037de:	bf00      	nop
 80037e0:	20000008 	.word	0x20000008
 80037e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d023      	beq.n	8003838 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
 80037f8:	e01e      	b.n	8003838 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10f      	bne.n	8003828 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0210 	bic.w	r2, r2, #16
 8003816:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	2b00      	cmp	r3, #0
 800383e:	d032      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d022      	beq.n	8003892 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2205      	movs	r2, #5
 8003850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0201 	bic.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	3301      	adds	r3, #1
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	429a      	cmp	r2, r3
 800386e:	d307      	bcc.n	8003880 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f2      	bne.n	8003864 <HAL_DMA_IRQHandler+0x2cc>
 800387e:	e000      	b.n	8003882 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003880:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
 80038a2:	e000      	b.n	80038a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80038a4:	bf00      	nop
    }
  }
}
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	d108      	bne.n	80038ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038ea:	e007      	b.n	80038fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	60da      	str	r2, [r3, #12]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	3b10      	subs	r3, #16
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <DMA_CalcBaseAndBitshift+0x64>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003922:	4a13      	ldr	r2, [pc, #76]	; (8003970 <DMA_CalcBaseAndBitshift+0x68>)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b03      	cmp	r3, #3
 8003934:	d909      	bls.n	800394a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	1d1a      	adds	r2, r3, #4
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	659a      	str	r2, [r3, #88]	; 0x58
 8003948:	e007      	b.n	800395a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	aaaaaaab 	.word	0xaaaaaaab
 8003970:	0800b784 	.word	0x0800b784

08003974 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d11f      	bne.n	80039ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d856      	bhi.n	8003a42 <DMA_CheckFifoParam+0xce>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <DMA_CheckFifoParam+0x28>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039bf 	.word	0x080039bf
 80039a4:	080039ad 	.word	0x080039ad
 80039a8:	08003a43 	.word	0x08003a43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d046      	beq.n	8003a46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039bc:	e043      	b.n	8003a46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039c6:	d140      	bne.n	8003a4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039cc:	e03d      	b.n	8003a4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d6:	d121      	bne.n	8003a1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d837      	bhi.n	8003a4e <DMA_CheckFifoParam+0xda>
 80039de:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <DMA_CheckFifoParam+0x70>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	080039fb 	.word	0x080039fb
 80039ec:	080039f5 	.word	0x080039f5
 80039f0:	08003a0d 	.word	0x08003a0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      break;
 80039f8:	e030      	b.n	8003a5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d025      	beq.n	8003a52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a0a:	e022      	b.n	8003a52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a14:	d11f      	bne.n	8003a56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a1a:	e01c      	b.n	8003a56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d903      	bls.n	8003a2a <DMA_CheckFifoParam+0xb6>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d003      	beq.n	8003a30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a28:	e018      	b.n	8003a5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a2e:	e015      	b.n	8003a5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00e      	beq.n	8003a5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e00b      	b.n	8003a5a <DMA_CheckFifoParam+0xe6>
      break;
 8003a42:	bf00      	nop
 8003a44:	e00a      	b.n	8003a5c <DMA_CheckFifoParam+0xe8>
      break;
 8003a46:	bf00      	nop
 8003a48:	e008      	b.n	8003a5c <DMA_CheckFifoParam+0xe8>
      break;
 8003a4a:	bf00      	nop
 8003a4c:	e006      	b.n	8003a5c <DMA_CheckFifoParam+0xe8>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e004      	b.n	8003a5c <DMA_CheckFifoParam+0xe8>
      break;
 8003a52:	bf00      	nop
 8003a54:	e002      	b.n	8003a5c <DMA_CheckFifoParam+0xe8>
      break;   
 8003a56:	bf00      	nop
 8003a58:	e000      	b.n	8003a5c <DMA_CheckFifoParam+0xe8>
      break;
 8003a5a:	bf00      	nop
    }
  } 
  
  return status; 
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop

08003a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	; 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	e165      	b.n	8003d54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a88:	2201      	movs	r2, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	f040 8154 	bne.w	8003d4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d005      	beq.n	8003abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d130      	bne.n	8003b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	2203      	movs	r2, #3
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003af4:	2201      	movs	r2, #1
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 0201 	and.w	r2, r3, #1
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d017      	beq.n	8003b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2203      	movs	r2, #3
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d123      	bne.n	8003bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	08da      	lsrs	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3208      	adds	r2, #8
 8003b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	220f      	movs	r2, #15
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	08da      	lsrs	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3208      	adds	r2, #8
 8003baa:	69b9      	ldr	r1, [r7, #24]
 8003bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	2203      	movs	r2, #3
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 0203 	and.w	r2, r3, #3
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 80ae 	beq.w	8003d4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	4b5d      	ldr	r3, [pc, #372]	; (8003d6c <HAL_GPIO_Init+0x300>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	4a5c      	ldr	r2, [pc, #368]	; (8003d6c <HAL_GPIO_Init+0x300>)
 8003bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c00:	6453      	str	r3, [r2, #68]	; 0x44
 8003c02:	4b5a      	ldr	r3, [pc, #360]	; (8003d6c <HAL_GPIO_Init+0x300>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c0e:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <HAL_GPIO_Init+0x304>)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	3302      	adds	r3, #2
 8003c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	220f      	movs	r2, #15
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4f      	ldr	r2, [pc, #316]	; (8003d74 <HAL_GPIO_Init+0x308>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d025      	beq.n	8003c86 <HAL_GPIO_Init+0x21a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4e      	ldr	r2, [pc, #312]	; (8003d78 <HAL_GPIO_Init+0x30c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01f      	beq.n	8003c82 <HAL_GPIO_Init+0x216>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a4d      	ldr	r2, [pc, #308]	; (8003d7c <HAL_GPIO_Init+0x310>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d019      	beq.n	8003c7e <HAL_GPIO_Init+0x212>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a4c      	ldr	r2, [pc, #304]	; (8003d80 <HAL_GPIO_Init+0x314>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_GPIO_Init+0x20e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a4b      	ldr	r2, [pc, #300]	; (8003d84 <HAL_GPIO_Init+0x318>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00d      	beq.n	8003c76 <HAL_GPIO_Init+0x20a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a4a      	ldr	r2, [pc, #296]	; (8003d88 <HAL_GPIO_Init+0x31c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <HAL_GPIO_Init+0x206>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a49      	ldr	r2, [pc, #292]	; (8003d8c <HAL_GPIO_Init+0x320>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <HAL_GPIO_Init+0x202>
 8003c6a:	2306      	movs	r3, #6
 8003c6c:	e00c      	b.n	8003c88 <HAL_GPIO_Init+0x21c>
 8003c6e:	2307      	movs	r3, #7
 8003c70:	e00a      	b.n	8003c88 <HAL_GPIO_Init+0x21c>
 8003c72:	2305      	movs	r3, #5
 8003c74:	e008      	b.n	8003c88 <HAL_GPIO_Init+0x21c>
 8003c76:	2304      	movs	r3, #4
 8003c78:	e006      	b.n	8003c88 <HAL_GPIO_Init+0x21c>
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e004      	b.n	8003c88 <HAL_GPIO_Init+0x21c>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e002      	b.n	8003c88 <HAL_GPIO_Init+0x21c>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_GPIO_Init+0x21c>
 8003c86:	2300      	movs	r3, #0
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	f002 0203 	and.w	r2, r2, #3
 8003c8e:	0092      	lsls	r2, r2, #2
 8003c90:	4093      	lsls	r3, r2
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c98:	4935      	ldr	r1, [pc, #212]	; (8003d70 <HAL_GPIO_Init+0x304>)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ca6:	4b3a      	ldr	r3, [pc, #232]	; (8003d90 <HAL_GPIO_Init+0x324>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cca:	4a31      	ldr	r2, [pc, #196]	; (8003d90 <HAL_GPIO_Init+0x324>)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cd0:	4b2f      	ldr	r3, [pc, #188]	; (8003d90 <HAL_GPIO_Init+0x324>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cf4:	4a26      	ldr	r2, [pc, #152]	; (8003d90 <HAL_GPIO_Init+0x324>)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cfa:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <HAL_GPIO_Init+0x324>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d1e:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <HAL_GPIO_Init+0x324>)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <HAL_GPIO_Init+0x324>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d48:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <HAL_GPIO_Init+0x324>)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3301      	adds	r3, #1
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b0f      	cmp	r3, #15
 8003d58:	f67f ae96 	bls.w	8003a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40013800 	.word	0x40013800
 8003d74:	40020000 	.word	0x40020000
 8003d78:	40020400 	.word	0x40020400
 8003d7c:	40020800 	.word	0x40020800
 8003d80:	40020c00 	.word	0x40020c00
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40021400 	.word	0x40021400
 8003d8c:	40021800 	.word	0x40021800
 8003d90:	40013c00 	.word	0x40013c00

08003d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	807b      	strh	r3, [r7, #2]
 8003da0:	4613      	mov	r3, r2
 8003da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003da4:	787b      	ldrb	r3, [r7, #1]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003db0:	e003      	b.n	8003dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003db2:	887b      	ldrh	r3, [r7, #2]
 8003db4:	041a      	lsls	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	619a      	str	r2, [r3, #24]
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6413      	str	r3, [r2, #64]	; 0x40
 8003de2:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <HAL_PWREx_EnableOverDrive+0x90>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x94>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003df4:	f7fe fcb0 	bl	8002758 <HAL_GetTick>
 8003df8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dfa:	e009      	b.n	8003e10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dfc:	f7fe fcac 	bl	8002758 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e0a:	d901      	bls.n	8003e10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e01f      	b.n	8003e50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e10:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d1ee      	bne.n	8003dfc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e1e:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e24:	f7fe fc98 	bl	8002758 <HAL_GetTick>
 8003e28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e2a:	e009      	b.n	8003e40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e2c:	f7fe fc94 	bl	8002758 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e3a:	d901      	bls.n	8003e40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e007      	b.n	8003e50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e40:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e4c:	d1ee      	bne.n	8003e2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	420e0040 	.word	0x420e0040
 8003e60:	40007000 	.word	0x40007000
 8003e64:	420e0044 	.word	0x420e0044

08003e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0cc      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b68      	ldr	r3, [pc, #416]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d90c      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b65      	ldr	r3, [pc, #404]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b63      	ldr	r3, [pc, #396]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0b8      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ebc:	4b59      	ldr	r3, [pc, #356]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed4:	4b53      	ldr	r3, [pc, #332]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee0:	4b50      	ldr	r3, [pc, #320]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	494d      	ldr	r1, [pc, #308]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d044      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d119      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e06f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e067      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b37      	ldr	r3, [pc, #220]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4934      	ldr	r1, [pc, #208]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fe fbfe 	bl	8002758 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fe fbfa 	bl	8002758 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e04f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b25      	ldr	r3, [pc, #148]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d20c      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e032      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4916      	ldr	r1, [pc, #88]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	490e      	ldr	r1, [pc, #56]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fee:	f000 f855 	bl	800409c <HAL_RCC_GetSysClockFreq>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	490a      	ldr	r1, [pc, #40]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	5ccb      	ldrb	r3, [r1, r3]
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe fb5e 	bl	80026d0 <HAL_InitTick>

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023c00 	.word	0x40023c00
 8004024:	40023800 	.word	0x40023800
 8004028:	0800b76c 	.word	0x0800b76c
 800402c:	20000008 	.word	0x20000008
 8004030:	2000000c 	.word	0x2000000c

08004034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <HAL_RCC_GetHCLKFreq+0x14>)
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000008 	.word	0x20000008

0800404c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004050:	f7ff fff0 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	0a9b      	lsrs	r3, r3, #10
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4903      	ldr	r1, [pc, #12]	; (8004070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004068:	4618      	mov	r0, r3
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023800 	.word	0x40023800
 8004070:	0800b77c 	.word	0x0800b77c

08004074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004078:	f7ff ffdc 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 800407c:	4602      	mov	r2, r0
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	0b5b      	lsrs	r3, r3, #13
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	4903      	ldr	r1, [pc, #12]	; (8004098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800408a:	5ccb      	ldrb	r3, [r1, r3]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40023800 	.word	0x40023800
 8004098:	0800b77c 	.word	0x0800b77c

0800409c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a0:	b0ae      	sub	sp, #184	; 0xb8
 80040a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c2:	4bcb      	ldr	r3, [pc, #812]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b0c      	cmp	r3, #12
 80040cc:	f200 8206 	bhi.w	80044dc <HAL_RCC_GetSysClockFreq+0x440>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	0800410d 	.word	0x0800410d
 80040dc:	080044dd 	.word	0x080044dd
 80040e0:	080044dd 	.word	0x080044dd
 80040e4:	080044dd 	.word	0x080044dd
 80040e8:	08004115 	.word	0x08004115
 80040ec:	080044dd 	.word	0x080044dd
 80040f0:	080044dd 	.word	0x080044dd
 80040f4:	080044dd 	.word	0x080044dd
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	080044dd 	.word	0x080044dd
 8004100:	080044dd 	.word	0x080044dd
 8004104:	080044dd 	.word	0x080044dd
 8004108:	0800430d 	.word	0x0800430d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4bb9      	ldr	r3, [pc, #740]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800410e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004112:	e1e7      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004114:	4bb8      	ldr	r3, [pc, #736]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800411a:	e1e3      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800411c:	4bb4      	ldr	r3, [pc, #720]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004128:	4bb1      	ldr	r3, [pc, #708]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d071      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004134:	4bae      	ldr	r3, [pc, #696]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004140:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800415a:	4622      	mov	r2, r4
 800415c:	462b      	mov	r3, r5
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416c:	0150      	lsls	r0, r2, #5
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4621      	mov	r1, r4
 8004174:	1a51      	subs	r1, r2, r1
 8004176:	6439      	str	r1, [r7, #64]	; 0x40
 8004178:	4629      	mov	r1, r5
 800417a:	eb63 0301 	sbc.w	r3, r3, r1
 800417e:	647b      	str	r3, [r7, #68]	; 0x44
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800418c:	4649      	mov	r1, r9
 800418e:	018b      	lsls	r3, r1, #6
 8004190:	4641      	mov	r1, r8
 8004192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004196:	4641      	mov	r1, r8
 8004198:	018a      	lsls	r2, r1, #6
 800419a:	4641      	mov	r1, r8
 800419c:	1a51      	subs	r1, r2, r1
 800419e:	63b9      	str	r1, [r7, #56]	; 0x38
 80041a0:	4649      	mov	r1, r9
 80041a2:	eb63 0301 	sbc.w	r3, r3, r1
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80041b4:	4649      	mov	r1, r9
 80041b6:	00cb      	lsls	r3, r1, #3
 80041b8:	4641      	mov	r1, r8
 80041ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041be:	4641      	mov	r1, r8
 80041c0:	00ca      	lsls	r2, r1, #3
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	4622      	mov	r2, r4
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	633b      	str	r3, [r7, #48]	; 0x30
 80041ce:	462b      	mov	r3, r5
 80041d0:	460a      	mov	r2, r1
 80041d2:	eb42 0303 	adc.w	r3, r2, r3
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041e4:	4629      	mov	r1, r5
 80041e6:	024b      	lsls	r3, r1, #9
 80041e8:	4621      	mov	r1, r4
 80041ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041ee:	4621      	mov	r1, r4
 80041f0:	024a      	lsls	r2, r1, #9
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004200:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004204:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004208:	f7fc fce6 	bl	8000bd8 <__aeabi_uldivmod>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4613      	mov	r3, r2
 8004212:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004216:	e067      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004218:	4b75      	ldr	r3, [pc, #468]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	2200      	movs	r2, #0
 8004220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004224:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800422c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004230:	67bb      	str	r3, [r7, #120]	; 0x78
 8004232:	2300      	movs	r3, #0
 8004234:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004236:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800423a:	4622      	mov	r2, r4
 800423c:	462b      	mov	r3, r5
 800423e:	f04f 0000 	mov.w	r0, #0
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	0159      	lsls	r1, r3, #5
 8004248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800424c:	0150      	lsls	r0, r2, #5
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4621      	mov	r1, r4
 8004254:	1a51      	subs	r1, r2, r1
 8004256:	62b9      	str	r1, [r7, #40]	; 0x28
 8004258:	4629      	mov	r1, r5
 800425a:	eb63 0301 	sbc.w	r3, r3, r1
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800426c:	4649      	mov	r1, r9
 800426e:	018b      	lsls	r3, r1, #6
 8004270:	4641      	mov	r1, r8
 8004272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004276:	4641      	mov	r1, r8
 8004278:	018a      	lsls	r2, r1, #6
 800427a:	4641      	mov	r1, r8
 800427c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004280:	4649      	mov	r1, r9
 8004282:	eb63 0b01 	sbc.w	fp, r3, r1
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004292:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004296:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800429a:	4692      	mov	sl, r2
 800429c:	469b      	mov	fp, r3
 800429e:	4623      	mov	r3, r4
 80042a0:	eb1a 0303 	adds.w	r3, sl, r3
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	462b      	mov	r3, r5
 80042a8:	eb4b 0303 	adc.w	r3, fp, r3
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042ba:	4629      	mov	r1, r5
 80042bc:	028b      	lsls	r3, r1, #10
 80042be:	4621      	mov	r1, r4
 80042c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042c4:	4621      	mov	r1, r4
 80042c6:	028a      	lsls	r2, r1, #10
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042d0:	2200      	movs	r2, #0
 80042d2:	673b      	str	r3, [r7, #112]	; 0x70
 80042d4:	677a      	str	r2, [r7, #116]	; 0x74
 80042d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80042da:	f7fc fc7d 	bl	8000bd8 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4613      	mov	r3, r2
 80042e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042e8:	4b41      	ldr	r3, [pc, #260]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	3301      	adds	r3, #1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80042fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800430a:	e0eb      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800430c:	4b38      	ldr	r3, [pc, #224]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004318:	4b35      	ldr	r3, [pc, #212]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d06b      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004324:	4b32      	ldr	r3, [pc, #200]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	2200      	movs	r2, #0
 800432c:	66bb      	str	r3, [r7, #104]	; 0x68
 800432e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	663b      	str	r3, [r7, #96]	; 0x60
 8004338:	2300      	movs	r3, #0
 800433a:	667b      	str	r3, [r7, #100]	; 0x64
 800433c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004340:	4622      	mov	r2, r4
 8004342:	462b      	mov	r3, r5
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	f04f 0100 	mov.w	r1, #0
 800434c:	0159      	lsls	r1, r3, #5
 800434e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004352:	0150      	lsls	r0, r2, #5
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4621      	mov	r1, r4
 800435a:	1a51      	subs	r1, r2, r1
 800435c:	61b9      	str	r1, [r7, #24]
 800435e:	4629      	mov	r1, r5
 8004360:	eb63 0301 	sbc.w	r3, r3, r1
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004372:	4659      	mov	r1, fp
 8004374:	018b      	lsls	r3, r1, #6
 8004376:	4651      	mov	r1, sl
 8004378:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800437c:	4651      	mov	r1, sl
 800437e:	018a      	lsls	r2, r1, #6
 8004380:	4651      	mov	r1, sl
 8004382:	ebb2 0801 	subs.w	r8, r2, r1
 8004386:	4659      	mov	r1, fp
 8004388:	eb63 0901 	sbc.w	r9, r3, r1
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004398:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800439c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043a0:	4690      	mov	r8, r2
 80043a2:	4699      	mov	r9, r3
 80043a4:	4623      	mov	r3, r4
 80043a6:	eb18 0303 	adds.w	r3, r8, r3
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	462b      	mov	r3, r5
 80043ae:	eb49 0303 	adc.w	r3, r9, r3
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80043c0:	4629      	mov	r1, r5
 80043c2:	024b      	lsls	r3, r1, #9
 80043c4:	4621      	mov	r1, r4
 80043c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043ca:	4621      	mov	r1, r4
 80043cc:	024a      	lsls	r2, r1, #9
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043d6:	2200      	movs	r2, #0
 80043d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80043da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80043dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043e0:	f7fc fbfa 	bl	8000bd8 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ee:	e065      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x420>
 80043f0:	40023800 	.word	0x40023800
 80043f4:	00f42400 	.word	0x00f42400
 80043f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fc:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	099b      	lsrs	r3, r3, #6
 8004402:	2200      	movs	r2, #0
 8004404:	4618      	mov	r0, r3
 8004406:	4611      	mov	r1, r2
 8004408:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800440c:	653b      	str	r3, [r7, #80]	; 0x50
 800440e:	2300      	movs	r3, #0
 8004410:	657b      	str	r3, [r7, #84]	; 0x54
 8004412:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004416:	4642      	mov	r2, r8
 8004418:	464b      	mov	r3, r9
 800441a:	f04f 0000 	mov.w	r0, #0
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	0159      	lsls	r1, r3, #5
 8004424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004428:	0150      	lsls	r0, r2, #5
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4641      	mov	r1, r8
 8004430:	1a51      	subs	r1, r2, r1
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	4649      	mov	r1, r9
 8004436:	eb63 0301 	sbc.w	r3, r3, r1
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004448:	4659      	mov	r1, fp
 800444a:	018b      	lsls	r3, r1, #6
 800444c:	4651      	mov	r1, sl
 800444e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004452:	4651      	mov	r1, sl
 8004454:	018a      	lsls	r2, r1, #6
 8004456:	4651      	mov	r1, sl
 8004458:	1a54      	subs	r4, r2, r1
 800445a:	4659      	mov	r1, fp
 800445c:	eb63 0501 	sbc.w	r5, r3, r1
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	00eb      	lsls	r3, r5, #3
 800446a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800446e:	00e2      	lsls	r2, r4, #3
 8004470:	4614      	mov	r4, r2
 8004472:	461d      	mov	r5, r3
 8004474:	4643      	mov	r3, r8
 8004476:	18e3      	adds	r3, r4, r3
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	464b      	mov	r3, r9
 800447c:	eb45 0303 	adc.w	r3, r5, r3
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800448e:	4629      	mov	r1, r5
 8004490:	028b      	lsls	r3, r1, #10
 8004492:	4621      	mov	r1, r4
 8004494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004498:	4621      	mov	r1, r4
 800449a:	028a      	lsls	r2, r1, #10
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a4:	2200      	movs	r2, #0
 80044a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044a8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044ae:	f7fc fb93 	bl	8000bd8 <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4613      	mov	r3, r2
 80044b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80044bc:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0f1b      	lsrs	r3, r3, #28
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80044ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044da:	e003      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80044de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	37b8      	adds	r7, #184	; 0xb8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	00f42400 	.word	0x00f42400

080044fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e28d      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8083 	beq.w	8004622 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800451c:	4b94      	ldr	r3, [pc, #592]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b04      	cmp	r3, #4
 8004526:	d019      	beq.n	800455c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004528:	4b91      	ldr	r3, [pc, #580]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004530:	2b08      	cmp	r3, #8
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004534:	4b8e      	ldr	r3, [pc, #568]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004540:	d00c      	beq.n	800455c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004542:	4b8b      	ldr	r3, [pc, #556]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800454a:	2b0c      	cmp	r3, #12
 800454c:	d112      	bne.n	8004574 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454e:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800455a:	d10b      	bne.n	8004574 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	4b84      	ldr	r3, [pc, #528]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d05b      	beq.n	8004620 <HAL_RCC_OscConfig+0x124>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d157      	bne.n	8004620 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e25a      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457c:	d106      	bne.n	800458c <HAL_RCC_OscConfig+0x90>
 800457e:	4b7c      	ldr	r3, [pc, #496]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a7b      	ldr	r2, [pc, #492]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e01d      	b.n	80045c8 <HAL_RCC_OscConfig+0xcc>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0xb4>
 8004596:	4b76      	ldr	r3, [pc, #472]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a75      	ldr	r2, [pc, #468]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800459c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b73      	ldr	r3, [pc, #460]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a72      	ldr	r2, [pc, #456]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0xcc>
 80045b0:	4b6f      	ldr	r3, [pc, #444]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6e      	ldr	r2, [pc, #440]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6b      	ldr	r2, [pc, #428]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d013      	beq.n	80045f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fe f8c2 	bl	8002758 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fe f8be 	bl	8002758 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e21f      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	4b61      	ldr	r3, [pc, #388]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0xdc>
 80045f6:	e014      	b.n	8004622 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fe f8ae 	bl	8002758 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004600:	f7fe f8aa 	bl	8002758 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	; 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e20b      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004612:	4b57      	ldr	r3, [pc, #348]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x104>
 800461e:	e000      	b.n	8004622 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d06f      	beq.n	800470e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800462e:	4b50      	ldr	r3, [pc, #320]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800463a:	4b4d      	ldr	r3, [pc, #308]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004642:	2b08      	cmp	r3, #8
 8004644:	d105      	bne.n	8004652 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004646:	4b4a      	ldr	r3, [pc, #296]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004652:	4b47      	ldr	r3, [pc, #284]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800465a:	2b0c      	cmp	r3, #12
 800465c:	d11c      	bne.n	8004698 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800465e:	4b44      	ldr	r3, [pc, #272]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d116      	bne.n	8004698 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466a:	4b41      	ldr	r3, [pc, #260]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_RCC_OscConfig+0x186>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d001      	beq.n	8004682 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e1d3      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004682:	4b3b      	ldr	r3, [pc, #236]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4937      	ldr	r1, [pc, #220]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004692:	4313      	orrs	r3, r2
 8004694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004696:	e03a      	b.n	800470e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d020      	beq.n	80046e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a0:	4b34      	ldr	r3, [pc, #208]	; (8004774 <HAL_RCC_OscConfig+0x278>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7fe f857 	bl	8002758 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ae:	f7fe f853 	bl	8002758 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e1b4      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046cc:	4b28      	ldr	r3, [pc, #160]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4925      	ldr	r1, [pc, #148]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	600b      	str	r3, [r1, #0]
 80046e0:	e015      	b.n	800470e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e2:	4b24      	ldr	r3, [pc, #144]	; (8004774 <HAL_RCC_OscConfig+0x278>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fe f836 	bl	8002758 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f0:	f7fe f832 	bl	8002758 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e193      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d036      	beq.n	8004788 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <HAL_RCC_OscConfig+0x27c>)
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004728:	f7fe f816 	bl	8002758 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004730:	f7fe f812 	bl	8002758 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e173      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0x234>
 800474e:	e01b      	b.n	8004788 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <HAL_RCC_OscConfig+0x27c>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004756:	f7fd ffff 	bl	8002758 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800475c:	e00e      	b.n	800477c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800475e:	f7fd fffb 	bl	8002758 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d907      	bls.n	800477c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e15c      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
 8004770:	40023800 	.word	0x40023800
 8004774:	42470000 	.word	0x42470000
 8004778:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800477c:	4b8a      	ldr	r3, [pc, #552]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800477e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ea      	bne.n	800475e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8097 	beq.w	80048c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004796:	2300      	movs	r3, #0
 8004798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479a:	4b83      	ldr	r3, [pc, #524]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10f      	bne.n	80047c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	4b7f      	ldr	r3, [pc, #508]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	4a7e      	ldr	r2, [pc, #504]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b4:	6413      	str	r3, [r2, #64]	; 0x40
 80047b6:	4b7c      	ldr	r3, [pc, #496]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c6:	4b79      	ldr	r3, [pc, #484]	; (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d118      	bne.n	8004804 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d2:	4b76      	ldr	r3, [pc, #472]	; (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a75      	ldr	r2, [pc, #468]	; (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047de:	f7fd ffbb 	bl	8002758 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e6:	f7fd ffb7 	bl	8002758 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e118      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	4b6c      	ldr	r3, [pc, #432]	; (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d106      	bne.n	800481a <HAL_RCC_OscConfig+0x31e>
 800480c:	4b66      	ldr	r3, [pc, #408]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004810:	4a65      	ldr	r2, [pc, #404]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6713      	str	r3, [r2, #112]	; 0x70
 8004818:	e01c      	b.n	8004854 <HAL_RCC_OscConfig+0x358>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b05      	cmp	r3, #5
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0x340>
 8004822:	4b61      	ldr	r3, [pc, #388]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	4a60      	ldr	r2, [pc, #384]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	6713      	str	r3, [r2, #112]	; 0x70
 800482e:	4b5e      	ldr	r3, [pc, #376]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	4a5d      	ldr	r2, [pc, #372]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6713      	str	r3, [r2, #112]	; 0x70
 800483a:	e00b      	b.n	8004854 <HAL_RCC_OscConfig+0x358>
 800483c:	4b5a      	ldr	r3, [pc, #360]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a59      	ldr	r2, [pc, #356]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	4b57      	ldr	r3, [pc, #348]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484c:	4a56      	ldr	r2, [pc, #344]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800484e:	f023 0304 	bic.w	r3, r3, #4
 8004852:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fd ff7c 	bl	8002758 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004862:	e00a      	b.n	800487a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fd ff78 	bl	8002758 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e0d7      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487a:	4b4b      	ldr	r3, [pc, #300]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0ee      	beq.n	8004864 <HAL_RCC_OscConfig+0x368>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fd ff66 	bl	8002758 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fd ff62 	bl	8002758 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e0c1      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a6:	4b40      	ldr	r3, [pc, #256]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1ee      	bne.n	8004890 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d105      	bne.n	80048c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b8:	4b3b      	ldr	r3, [pc, #236]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	4a3a      	ldr	r2, [pc, #232]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80ad 	beq.w	8004a28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ce:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d060      	beq.n	800499c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d145      	bne.n	800496e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e2:	4b33      	ldr	r3, [pc, #204]	; (80049b0 <HAL_RCC_OscConfig+0x4b4>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fd ff36 	bl	8002758 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fd ff32 	bl	8002758 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e093      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	019b      	lsls	r3, r3, #6
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	3b01      	subs	r3, #1
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	071b      	lsls	r3, r3, #28
 800493a:	491b      	ldr	r1, [pc, #108]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <HAL_RCC_OscConfig+0x4b4>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fd ff07 	bl	8002758 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800494e:	f7fd ff03 	bl	8002758 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e064      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x452>
 800496c:	e05c      	b.n	8004a28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_RCC_OscConfig+0x4b4>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fd fef0 	bl	8002758 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497c:	f7fd feec 	bl	8002758 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e04d      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x480>
 800499a:	e045      	b.n	8004a28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d107      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e040      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
 80049a8:	40023800 	.word	0x40023800
 80049ac:	40007000 	.word	0x40007000
 80049b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049b4:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <HAL_RCC_OscConfig+0x538>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d030      	beq.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d129      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d122      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d119      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	3b01      	subs	r3, #1
 80049fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d10f      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d107      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800

08004a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e07b      	b.n	8004b42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d108      	bne.n	8004a64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a5a:	d009      	beq.n	8004a70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	61da      	str	r2, [r3, #28]
 8004a62:	e005      	b.n	8004a70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fd fc6e 	bl	800236c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af4:	ea42 0103 	orr.w	r1, r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	f003 0104 	and.w	r1, r3, #4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0210 	and.w	r2, r3, #16
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b088      	sub	sp, #32
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_SPI_Transmit+0x22>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e126      	b.n	8004dba <HAL_SPI_Transmit+0x270>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b74:	f7fd fdf0 	bl	8002758 <HAL_GetTick>
 8004b78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b8e:	e10b      	b.n	8004da8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Transmit+0x52>
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ba0:	e102      	b.n	8004da8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	88fa      	ldrh	r2, [r7, #6]
 8004bba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	88fa      	ldrh	r2, [r7, #6]
 8004bc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be8:	d10f      	bne.n	8004c0a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d007      	beq.n	8004c28 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c30:	d14b      	bne.n	8004cca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_SPI_Transmit+0xf6>
 8004c3a:	8afb      	ldrh	r3, [r7, #22]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d13e      	bne.n	8004cbe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	881a      	ldrh	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	1c9a      	adds	r2, r3, #2
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c64:	e02b      	b.n	8004cbe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d112      	bne.n	8004c9a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	881a      	ldrh	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	1c9a      	adds	r2, r3, #2
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c98:	e011      	b.n	8004cbe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c9a:	f7fd fd5d 	bl	8002758 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d803      	bhi.n	8004cb2 <HAL_SPI_Transmit+0x168>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d102      	bne.n	8004cb8 <HAL_SPI_Transmit+0x16e>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cbc:	e074      	b.n	8004da8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1ce      	bne.n	8004c66 <HAL_SPI_Transmit+0x11c>
 8004cc8:	e04c      	b.n	8004d64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_SPI_Transmit+0x18e>
 8004cd2:	8afb      	ldrh	r3, [r7, #22]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d140      	bne.n	8004d5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	7812      	ldrb	r2, [r2, #0]
 8004ce4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cfe:	e02c      	b.n	8004d5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d113      	bne.n	8004d36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d34:	e011      	b.n	8004d5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d36:	f7fd fd0f 	bl	8002758 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d803      	bhi.n	8004d4e <HAL_SPI_Transmit+0x204>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d102      	bne.n	8004d54 <HAL_SPI_Transmit+0x20a>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d58:	e026      	b.n	8004da8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1cd      	bne.n	8004d00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fa55 	bl	8005218 <SPI_EndRxTxTransaction>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e000      	b.n	8004da8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004da6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004db8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b08c      	sub	sp, #48	; 0x30
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x26>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e18a      	b.n	80050fe <HAL_SPI_TransmitReceive+0x33c>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004df0:	f7fd fcb2 	bl	8002758 <HAL_GetTick>
 8004df4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e06:	887b      	ldrh	r3, [r7, #2]
 8004e08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d00f      	beq.n	8004e32 <HAL_SPI_TransmitReceive+0x70>
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e18:	d107      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d103      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x68>
 8004e22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d003      	beq.n	8004e32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e30:	e15b      	b.n	80050ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_SPI_TransmitReceive+0x82>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_SPI_TransmitReceive+0x82>
 8004e3e:	887b      	ldrh	r3, [r7, #2]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d103      	bne.n	8004e4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e4a:	e14e      	b.n	80050ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d003      	beq.n	8004e60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2205      	movs	r2, #5
 8004e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	887a      	ldrh	r2, [r7, #2]
 8004e70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	887a      	ldrh	r2, [r7, #2]
 8004e76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	887a      	ldrh	r2, [r7, #2]
 8004e82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	887a      	ldrh	r2, [r7, #2]
 8004e88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d007      	beq.n	8004eb4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ebc:	d178      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_SPI_TransmitReceive+0x10a>
 8004ec6:	8b7b      	ldrh	r3, [r7, #26]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d166      	bne.n	8004f9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	881a      	ldrh	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	1c9a      	adds	r2, r3, #2
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef0:	e053      	b.n	8004f9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d11b      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x176>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d016      	beq.n	8004f38 <HAL_SPI_TransmitReceive+0x176>
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d113      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	881a      	ldrh	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	1c9a      	adds	r2, r3, #2
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d119      	bne.n	8004f7a <HAL_SPI_TransmitReceive+0x1b8>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d014      	beq.n	8004f7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	b292      	uxth	r2, r2
 8004f5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	1c9a      	adds	r2, r3, #2
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f76:	2301      	movs	r3, #1
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f7a:	f7fd fbed 	bl	8002758 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d807      	bhi.n	8004f9a <HAL_SPI_TransmitReceive+0x1d8>
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d003      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f98:	e0a7      	b.n	80050ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1a6      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x130>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1a1      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x130>
 8004fae:	e07c      	b.n	80050aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <HAL_SPI_TransmitReceive+0x1fc>
 8004fb8:	8b7b      	ldrh	r3, [r7, #26]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d16b      	bne.n	8005096 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	7812      	ldrb	r2, [r2, #0]
 8004fca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fe4:	e057      	b.n	8005096 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d11c      	bne.n	800502e <HAL_SPI_TransmitReceive+0x26c>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d017      	beq.n	800502e <HAL_SPI_TransmitReceive+0x26c>
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d114      	bne.n	800502e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	330c      	adds	r3, #12
 800500e:	7812      	ldrb	r2, [r2, #0]
 8005010:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d119      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x2ae>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d014      	beq.n	8005070 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800506c:	2301      	movs	r3, #1
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005070:	f7fd fb72 	bl	8002758 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800507c:	429a      	cmp	r2, r3
 800507e:	d803      	bhi.n	8005088 <HAL_SPI_TransmitReceive+0x2c6>
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d102      	bne.n	800508e <HAL_SPI_TransmitReceive+0x2cc>
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	2b00      	cmp	r3, #0
 800508c:	d103      	bne.n	8005096 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005094:	e029      	b.n	80050ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1a2      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0x224>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d19d      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f8b2 	bl	8005218 <SPI_EndRxTxTransaction>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d006      	beq.n	80050c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050c6:	e010      	b.n	80050ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	e000      	b.n	80050ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80050e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3730      	adds	r7, #48	; 0x30
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005118:	f7fd fb1e 	bl	8002758 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	4413      	add	r3, r2
 8005126:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005128:	f7fd fb16 	bl	8002758 <HAL_GetTick>
 800512c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800512e:	4b39      	ldr	r3, [pc, #228]	; (8005214 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	015b      	lsls	r3, r3, #5
 8005134:	0d1b      	lsrs	r3, r3, #20
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	fb02 f303 	mul.w	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800513e:	e054      	b.n	80051ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005146:	d050      	beq.n	80051ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005148:	f7fd fb06 	bl	8002758 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	429a      	cmp	r2, r3
 8005156:	d902      	bls.n	800515e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d13d      	bne.n	80051da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800516c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005176:	d111      	bne.n	800519c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005180:	d004      	beq.n	800518c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518a:	d107      	bne.n	800519c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a4:	d10f      	bne.n	80051c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e017      	b.n	800520a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4013      	ands	r3, r2
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	bf0c      	ite	eq
 80051fa:	2301      	moveq	r3, #1
 80051fc:	2300      	movne	r3, #0
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	429a      	cmp	r2, r3
 8005206:	d19b      	bne.n	8005140 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000008 	.word	0x20000008

08005218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <SPI_EndRxTxTransaction+0x7c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <SPI_EndRxTxTransaction+0x80>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	0d5b      	lsrs	r3, r3, #21
 8005230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005234:	fb02 f303 	mul.w	r3, r2, r3
 8005238:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005242:	d112      	bne.n	800526a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2200      	movs	r2, #0
 800524c:	2180      	movs	r1, #128	; 0x80
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff ff5a 	bl	8005108 <SPI_WaitFlagStateUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d016      	beq.n	8005288 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	f043 0220 	orr.w	r2, r3, #32
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e00f      	b.n	800528a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	3b01      	subs	r3, #1
 8005274:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005280:	2b80      	cmp	r3, #128	; 0x80
 8005282:	d0f2      	beq.n	800526a <SPI_EndRxTxTransaction+0x52>
 8005284:	e000      	b.n	8005288 <SPI_EndRxTxTransaction+0x70>
        break;
 8005286:	bf00      	nop
  }

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000008 	.word	0x20000008
 8005298:	165e9f81 	.word	0x165e9f81

0800529c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e041      	b.n	8005332 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fd f89a 	bl	80023fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f000 f8f4 	bl	80054c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_TIM_ConfigClockSource+0x1c>
 8005352:	2302      	movs	r3, #2
 8005354:	e0b4      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x186>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005374:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800537c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538e:	d03e      	beq.n	800540e <HAL_TIM_ConfigClockSource+0xd4>
 8005390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005394:	f200 8087 	bhi.w	80054a6 <HAL_TIM_ConfigClockSource+0x16c>
 8005398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539c:	f000 8086 	beq.w	80054ac <HAL_TIM_ConfigClockSource+0x172>
 80053a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a4:	d87f      	bhi.n	80054a6 <HAL_TIM_ConfigClockSource+0x16c>
 80053a6:	2b70      	cmp	r3, #112	; 0x70
 80053a8:	d01a      	beq.n	80053e0 <HAL_TIM_ConfigClockSource+0xa6>
 80053aa:	2b70      	cmp	r3, #112	; 0x70
 80053ac:	d87b      	bhi.n	80054a6 <HAL_TIM_ConfigClockSource+0x16c>
 80053ae:	2b60      	cmp	r3, #96	; 0x60
 80053b0:	d050      	beq.n	8005454 <HAL_TIM_ConfigClockSource+0x11a>
 80053b2:	2b60      	cmp	r3, #96	; 0x60
 80053b4:	d877      	bhi.n	80054a6 <HAL_TIM_ConfigClockSource+0x16c>
 80053b6:	2b50      	cmp	r3, #80	; 0x50
 80053b8:	d03c      	beq.n	8005434 <HAL_TIM_ConfigClockSource+0xfa>
 80053ba:	2b50      	cmp	r3, #80	; 0x50
 80053bc:	d873      	bhi.n	80054a6 <HAL_TIM_ConfigClockSource+0x16c>
 80053be:	2b40      	cmp	r3, #64	; 0x40
 80053c0:	d058      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0x13a>
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d86f      	bhi.n	80054a6 <HAL_TIM_ConfigClockSource+0x16c>
 80053c6:	2b30      	cmp	r3, #48	; 0x30
 80053c8:	d064      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0x15a>
 80053ca:	2b30      	cmp	r3, #48	; 0x30
 80053cc:	d86b      	bhi.n	80054a6 <HAL_TIM_ConfigClockSource+0x16c>
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d060      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0x15a>
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d867      	bhi.n	80054a6 <HAL_TIM_ConfigClockSource+0x16c>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d05c      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0x15a>
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d05a      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0x15a>
 80053de:	e062      	b.n	80054a6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6899      	ldr	r1, [r3, #8]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f000 f984 	bl	80056fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005402:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	609a      	str	r2, [r3, #8]
      break;
 800540c:	e04f      	b.n	80054ae <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6899      	ldr	r1, [r3, #8]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f000 f96d 	bl	80056fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005430:	609a      	str	r2, [r3, #8]
      break;
 8005432:	e03c      	b.n	80054ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	6859      	ldr	r1, [r3, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	461a      	mov	r2, r3
 8005442:	f000 f8e1 	bl	8005608 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2150      	movs	r1, #80	; 0x50
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f93a 	bl	80056c6 <TIM_ITRx_SetConfig>
      break;
 8005452:	e02c      	b.n	80054ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	6859      	ldr	r1, [r3, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	461a      	mov	r2, r3
 8005462:	f000 f900 	bl	8005666 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2160      	movs	r1, #96	; 0x60
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f92a 	bl	80056c6 <TIM_ITRx_SetConfig>
      break;
 8005472:	e01c      	b.n	80054ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6859      	ldr	r1, [r3, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	461a      	mov	r2, r3
 8005482:	f000 f8c1 	bl	8005608 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2140      	movs	r1, #64	; 0x40
 800548c:	4618      	mov	r0, r3
 800548e:	f000 f91a 	bl	80056c6 <TIM_ITRx_SetConfig>
      break;
 8005492:	e00c      	b.n	80054ae <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f000 f911 	bl	80056c6 <TIM_ITRx_SetConfig>
      break;
 80054a4:	e003      	b.n	80054ae <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	73fb      	strb	r3, [r7, #15]
      break;
 80054aa:	e000      	b.n	80054ae <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a40      	ldr	r2, [pc, #256]	; (80055dc <TIM_Base_SetConfig+0x114>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e6:	d00f      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a3d      	ldr	r2, [pc, #244]	; (80055e0 <TIM_Base_SetConfig+0x118>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a3c      	ldr	r2, [pc, #240]	; (80055e4 <TIM_Base_SetConfig+0x11c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a3b      	ldr	r2, [pc, #236]	; (80055e8 <TIM_Base_SetConfig+0x120>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a3a      	ldr	r2, [pc, #232]	; (80055ec <TIM_Base_SetConfig+0x124>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d108      	bne.n	800551a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a2f      	ldr	r2, [pc, #188]	; (80055dc <TIM_Base_SetConfig+0x114>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d02b      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005528:	d027      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a2c      	ldr	r2, [pc, #176]	; (80055e0 <TIM_Base_SetConfig+0x118>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d023      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2b      	ldr	r2, [pc, #172]	; (80055e4 <TIM_Base_SetConfig+0x11c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01f      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a2a      	ldr	r2, [pc, #168]	; (80055e8 <TIM_Base_SetConfig+0x120>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01b      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a29      	ldr	r2, [pc, #164]	; (80055ec <TIM_Base_SetConfig+0x124>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d017      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a28      	ldr	r2, [pc, #160]	; (80055f0 <TIM_Base_SetConfig+0x128>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a27      	ldr	r2, [pc, #156]	; (80055f4 <TIM_Base_SetConfig+0x12c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00f      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a26      	ldr	r2, [pc, #152]	; (80055f8 <TIM_Base_SetConfig+0x130>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00b      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a25      	ldr	r2, [pc, #148]	; (80055fc <TIM_Base_SetConfig+0x134>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d007      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a24      	ldr	r2, [pc, #144]	; (8005600 <TIM_Base_SetConfig+0x138>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a23      	ldr	r2, [pc, #140]	; (8005604 <TIM_Base_SetConfig+0x13c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d108      	bne.n	800558c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <TIM_Base_SetConfig+0x114>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_Base_SetConfig+0xf8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a0c      	ldr	r2, [pc, #48]	; (80055ec <TIM_Base_SetConfig+0x124>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d103      	bne.n	80055c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	615a      	str	r2, [r3, #20]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40010400 	.word	0x40010400
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40014400 	.word	0x40014400
 80055f8:	40014800 	.word	0x40014800
 80055fc:	40001800 	.word	0x40001800
 8005600:	40001c00 	.word	0x40001c00
 8005604:	40002000 	.word	0x40002000

08005608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f023 0201 	bic.w	r2, r3, #1
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f023 030a 	bic.w	r3, r3, #10
 8005644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	621a      	str	r2, [r3, #32]
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005666:	b480      	push	{r7}
 8005668:	b087      	sub	sp, #28
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f023 0210 	bic.w	r2, r3, #16
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005690:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	031b      	lsls	r3, r3, #12
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	621a      	str	r2, [r3, #32]
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f043 0307 	orr.w	r3, r3, #7
 80056e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	609a      	str	r2, [r3, #8]
}
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	021a      	lsls	r2, r3, #8
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	431a      	orrs	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4313      	orrs	r3, r2
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	609a      	str	r2, [r3, #8]
}
 8005730:	bf00      	nop
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800574c:	2b01      	cmp	r3, #1
 800574e:	d101      	bne.n	8005754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005750:	2302      	movs	r3, #2
 8005752:	e05a      	b.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a21      	ldr	r2, [pc, #132]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d022      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a0:	d01d      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1d      	ldr	r2, [pc, #116]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d018      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1a      	ldr	r2, [pc, #104]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a18      	ldr	r2, [pc, #96]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d009      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a17      	ldr	r2, [pc, #92]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a15      	ldr	r2, [pc, #84]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d10c      	bne.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40010000 	.word	0x40010000
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40000c00 	.word	0x40000c00
 8005828:	40010400 	.word	0x40010400
 800582c:	40014000 	.word	0x40014000
 8005830:	40001800 	.word	0x40001800

08005834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e03f      	b.n	80058c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc fdf0 	bl	8002440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2224      	movs	r2, #36	; 0x24
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f929 	bl	8005ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800588c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800589c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b08a      	sub	sp, #40	; 0x28
 80058d2:	af02      	add	r7, sp, #8
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	d17c      	bne.n	80059e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_UART_Transmit+0x2c>
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e075      	b.n	80059ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_UART_Transmit+0x3e>
 8005908:	2302      	movs	r3, #2
 800590a:	e06e      	b.n	80059ea <HAL_UART_Transmit+0x11c>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2221      	movs	r2, #33	; 0x21
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005922:	f7fc ff19 	bl	8002758 <HAL_GetTick>
 8005926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	88fa      	ldrh	r2, [r7, #6]
 800592c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	88fa      	ldrh	r2, [r7, #6]
 8005932:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593c:	d108      	bne.n	8005950 <HAL_UART_Transmit+0x82>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	e003      	b.n	8005958 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005954:	2300      	movs	r3, #0
 8005956:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005960:	e02a      	b.n	80059b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2200      	movs	r2, #0
 800596a:	2180      	movs	r1, #128	; 0x80
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f840 	bl	80059f2 <UART_WaitOnFlagUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e036      	b.n	80059ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005990:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	3302      	adds	r3, #2
 8005996:	61bb      	str	r3, [r7, #24]
 8005998:	e007      	b.n	80059aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	3301      	adds	r3, #1
 80059a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1cf      	bne.n	8005962 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2200      	movs	r2, #0
 80059ca:	2140      	movs	r1, #64	; 0x40
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f810 	bl	80059f2 <UART_WaitOnFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e006      	b.n	80059ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	e000      	b.n	80059ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059e8:	2302      	movs	r3, #2
  }
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b090      	sub	sp, #64	; 0x40
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	603b      	str	r3, [r7, #0]
 80059fe:	4613      	mov	r3, r2
 8005a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a02:	e050      	b.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0a:	d04c      	beq.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a12:	f7fc fea1 	bl	8002758 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d241      	bcs.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a42:	637a      	str	r2, [r7, #52]	; 0x34
 8005a44:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e5      	bne.n	8005a22 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3314      	adds	r3, #20
 8005a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	613b      	str	r3, [r7, #16]
   return(result);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f023 0301 	bic.w	r3, r3, #1
 8005a6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3314      	adds	r3, #20
 8005a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a76:	623a      	str	r2, [r7, #32]
 8005a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	69f9      	ldr	r1, [r7, #28]
 8005a7c:	6a3a      	ldr	r2, [r7, #32]
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e5      	bne.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e00f      	b.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	bf0c      	ite	eq
 8005ab6:	2301      	moveq	r3, #1
 8005ab8:	2300      	movne	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	79fb      	ldrb	r3, [r7, #7]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d09f      	beq.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3740      	adds	r7, #64	; 0x40
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad4:	b0c0      	sub	sp, #256	; 0x100
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aec:	68d9      	ldr	r1, [r3, #12]
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	ea40 0301 	orr.w	r3, r0, r1
 8005af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b28:	f021 010c 	bic.w	r1, r1, #12
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b36:	430b      	orrs	r3, r1
 8005b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4a:	6999      	ldr	r1, [r3, #24]
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	ea40 0301 	orr.w	r3, r0, r1
 8005b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b8f      	ldr	r3, [pc, #572]	; (8005d9c <UART_SetConfig+0x2cc>)
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d005      	beq.n	8005b70 <UART_SetConfig+0xa0>
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4b8d      	ldr	r3, [pc, #564]	; (8005da0 <UART_SetConfig+0x2d0>)
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d104      	bne.n	8005b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b70:	f7fe fa80 	bl	8004074 <HAL_RCC_GetPCLK2Freq>
 8005b74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b78:	e003      	b.n	8005b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b7a:	f7fe fa67 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8005b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b8c:	f040 810c 	bne.w	8005da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	1891      	adds	r1, r2, r2
 8005ba8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005baa:	415b      	adcs	r3, r3
 8005bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	eb12 0801 	adds.w	r8, r2, r1
 8005bb8:	4629      	mov	r1, r5
 8005bba:	eb43 0901 	adc.w	r9, r3, r1
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bd2:	4690      	mov	r8, r2
 8005bd4:	4699      	mov	r9, r3
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	eb18 0303 	adds.w	r3, r8, r3
 8005bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005be0:	462b      	mov	r3, r5
 8005be2:	eb49 0303 	adc.w	r3, r9, r3
 8005be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bfe:	460b      	mov	r3, r1
 8005c00:	18db      	adds	r3, r3, r3
 8005c02:	653b      	str	r3, [r7, #80]	; 0x50
 8005c04:	4613      	mov	r3, r2
 8005c06:	eb42 0303 	adc.w	r3, r2, r3
 8005c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c14:	f7fa ffe0 	bl	8000bd8 <__aeabi_uldivmod>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4b61      	ldr	r3, [pc, #388]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	011c      	lsls	r4, r3, #4
 8005c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c38:	4642      	mov	r2, r8
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	1891      	adds	r1, r2, r2
 8005c3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c40:	415b      	adcs	r3, r3
 8005c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c48:	4641      	mov	r1, r8
 8005c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c4e:	4649      	mov	r1, r9
 8005c50:	eb43 0b01 	adc.w	fp, r3, r1
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c68:	4692      	mov	sl, r2
 8005c6a:	469b      	mov	fp, r3
 8005c6c:	4643      	mov	r3, r8
 8005c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c76:	464b      	mov	r3, r9
 8005c78:	eb4b 0303 	adc.w	r3, fp, r3
 8005c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c94:	460b      	mov	r3, r1
 8005c96:	18db      	adds	r3, r3, r3
 8005c98:	643b      	str	r3, [r7, #64]	; 0x40
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005caa:	f7fa ff95 	bl	8000bd8 <__aeabi_uldivmod>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4b3b      	ldr	r3, [pc, #236]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	2264      	movs	r2, #100	; 0x64
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	1acb      	subs	r3, r1, r3
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cca:	4b36      	ldr	r3, [pc, #216]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cd8:	441c      	add	r4, r3
 8005cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cec:	4642      	mov	r2, r8
 8005cee:	464b      	mov	r3, r9
 8005cf0:	1891      	adds	r1, r2, r2
 8005cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cf4:	415b      	adcs	r3, r3
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	1851      	adds	r1, r2, r1
 8005d00:	6339      	str	r1, [r7, #48]	; 0x30
 8005d02:	4649      	mov	r1, r9
 8005d04:	414b      	adcs	r3, r1
 8005d06:	637b      	str	r3, [r7, #52]	; 0x34
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d14:	4659      	mov	r1, fp
 8005d16:	00cb      	lsls	r3, r1, #3
 8005d18:	4651      	mov	r1, sl
 8005d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d1e:	4651      	mov	r1, sl
 8005d20:	00ca      	lsls	r2, r1, #3
 8005d22:	4610      	mov	r0, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	4642      	mov	r2, r8
 8005d2a:	189b      	adds	r3, r3, r2
 8005d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d30:	464b      	mov	r3, r9
 8005d32:	460a      	mov	r2, r1
 8005d34:	eb42 0303 	adc.w	r3, r2, r3
 8005d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d50:	460b      	mov	r3, r1
 8005d52:	18db      	adds	r3, r3, r3
 8005d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d56:	4613      	mov	r3, r2
 8005d58:	eb42 0303 	adc.w	r3, r2, r3
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d66:	f7fa ff37 	bl	8000bd8 <__aeabi_uldivmod>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005d70:	fba3 1302 	umull	r1, r3, r3, r2
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	2164      	movs	r1, #100	; 0x64
 8005d78:	fb01 f303 	mul.w	r3, r1, r3
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	3332      	adds	r3, #50	; 0x32
 8005d82:	4a08      	ldr	r2, [pc, #32]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005d84:	fba2 2303 	umull	r2, r3, r2, r3
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	f003 0207 	and.w	r2, r3, #7
 8005d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4422      	add	r2, r4
 8005d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d98:	e105      	b.n	8005fa6 <UART_SetConfig+0x4d6>
 8005d9a:	bf00      	nop
 8005d9c:	40011000 	.word	0x40011000
 8005da0:	40011400 	.word	0x40011400
 8005da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005db2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005dba:	4642      	mov	r2, r8
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	1891      	adds	r1, r2, r2
 8005dc0:	6239      	str	r1, [r7, #32]
 8005dc2:	415b      	adcs	r3, r3
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dca:	4641      	mov	r1, r8
 8005dcc:	1854      	adds	r4, r2, r1
 8005dce:	4649      	mov	r1, r9
 8005dd0:	eb43 0501 	adc.w	r5, r3, r1
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	00eb      	lsls	r3, r5, #3
 8005dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005de2:	00e2      	lsls	r2, r4, #3
 8005de4:	4614      	mov	r4, r2
 8005de6:	461d      	mov	r5, r3
 8005de8:	4643      	mov	r3, r8
 8005dea:	18e3      	adds	r3, r4, r3
 8005dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005df0:	464b      	mov	r3, r9
 8005df2:	eb45 0303 	adc.w	r3, r5, r3
 8005df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e16:	4629      	mov	r1, r5
 8005e18:	008b      	lsls	r3, r1, #2
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e20:	4621      	mov	r1, r4
 8005e22:	008a      	lsls	r2, r1, #2
 8005e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e28:	f7fa fed6 	bl	8000bd8 <__aeabi_uldivmod>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4b60      	ldr	r3, [pc, #384]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005e32:	fba3 2302 	umull	r2, r3, r3, r2
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	011c      	lsls	r4, r3, #4
 8005e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	464b      	mov	r3, r9
 8005e50:	1891      	adds	r1, r2, r2
 8005e52:	61b9      	str	r1, [r7, #24]
 8005e54:	415b      	adcs	r3, r3
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e5c:	4641      	mov	r1, r8
 8005e5e:	1851      	adds	r1, r2, r1
 8005e60:	6139      	str	r1, [r7, #16]
 8005e62:	4649      	mov	r1, r9
 8005e64:	414b      	adcs	r3, r1
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e74:	4659      	mov	r1, fp
 8005e76:	00cb      	lsls	r3, r1, #3
 8005e78:	4651      	mov	r1, sl
 8005e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e7e:	4651      	mov	r1, sl
 8005e80:	00ca      	lsls	r2, r1, #3
 8005e82:	4610      	mov	r0, r2
 8005e84:	4619      	mov	r1, r3
 8005e86:	4603      	mov	r3, r0
 8005e88:	4642      	mov	r2, r8
 8005e8a:	189b      	adds	r3, r3, r2
 8005e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e90:	464b      	mov	r3, r9
 8005e92:	460a      	mov	r2, r1
 8005e94:	eb42 0303 	adc.w	r3, r2, r3
 8005e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ea6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	008b      	lsls	r3, r1, #2
 8005eb8:	4641      	mov	r1, r8
 8005eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	008a      	lsls	r2, r1, #2
 8005ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ec6:	f7fa fe87 	bl	8000bd8 <__aeabi_uldivmod>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4b39      	ldr	r3, [pc, #228]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	2164      	movs	r1, #100	; 0x64
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	3332      	adds	r3, #50	; 0x32
 8005ee2:	4a34      	ldr	r2, [pc, #208]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eee:	441c      	add	r4, r3
 8005ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ef8:	677a      	str	r2, [r7, #116]	; 0x74
 8005efa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005efe:	4642      	mov	r2, r8
 8005f00:	464b      	mov	r3, r9
 8005f02:	1891      	adds	r1, r2, r2
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	415b      	adcs	r3, r3
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f0e:	4641      	mov	r1, r8
 8005f10:	1851      	adds	r1, r2, r1
 8005f12:	6039      	str	r1, [r7, #0]
 8005f14:	4649      	mov	r1, r9
 8005f16:	414b      	adcs	r3, r1
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f26:	4659      	mov	r1, fp
 8005f28:	00cb      	lsls	r3, r1, #3
 8005f2a:	4651      	mov	r1, sl
 8005f2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f30:	4651      	mov	r1, sl
 8005f32:	00ca      	lsls	r2, r1, #3
 8005f34:	4610      	mov	r0, r2
 8005f36:	4619      	mov	r1, r3
 8005f38:	4603      	mov	r3, r0
 8005f3a:	4642      	mov	r2, r8
 8005f3c:	189b      	adds	r3, r3, r2
 8005f3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f40:	464b      	mov	r3, r9
 8005f42:	460a      	mov	r2, r1
 8005f44:	eb42 0303 	adc.w	r3, r2, r3
 8005f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	663b      	str	r3, [r7, #96]	; 0x60
 8005f54:	667a      	str	r2, [r7, #100]	; 0x64
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f62:	4649      	mov	r1, r9
 8005f64:	008b      	lsls	r3, r1, #2
 8005f66:	4641      	mov	r1, r8
 8005f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f6c:	4641      	mov	r1, r8
 8005f6e:	008a      	lsls	r2, r1, #2
 8005f70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f74:	f7fa fe30 	bl	8000bd8 <__aeabi_uldivmod>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	2164      	movs	r1, #100	; 0x64
 8005f86:	fb01 f303 	mul.w	r3, r1, r3
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	3332      	adds	r3, #50	; 0x32
 8005f90:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	f003 020f 	and.w	r2, r3, #15
 8005f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4422      	add	r2, r4
 8005fa4:	609a      	str	r2, [r3, #8]
}
 8005fa6:	bf00      	nop
 8005fa8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fac:	46bd      	mov	sp, r7
 8005fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fb2:	bf00      	nop
 8005fb4:	51eb851f 	.word	0x51eb851f

08005fb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005fbc:	4904      	ldr	r1, [pc, #16]	; (8005fd0 <MX_FATFS_Init+0x18>)
 8005fbe:	4805      	ldr	r0, [pc, #20]	; (8005fd4 <MX_FATFS_Init+0x1c>)
 8005fc0:	f003 fe10 	bl	8009be4 <FATFS_LinkDriver>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4b03      	ldr	r3, [pc, #12]	; (8005fd8 <MX_FATFS_Init+0x20>)
 8005fca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005fcc:	bf00      	nop
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	20006554 	.word	0x20006554
 8005fd4:	20000014 	.word	0x20000014
 8005fd8:	20006550 	.word	0x20006550

08005fdc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005fe0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_initialize(pdrv);
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fb f929 	bl	8001250 <SD_disk_initialize>
 8005ffe:	4603      	mov	r3, r0
 8006000:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006002:	4618      	mov	r0, r3
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	4603      	mov	r3, r0
 8006012:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_status(pdrv);
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	4618      	mov	r0, r3
 8006018:	f7fb fa06 	bl	8001428 <SD_disk_status>
 800601c:	4603      	mov	r3, r0
 800601e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	607a      	str	r2, [r7, #4]
 8006032:	603b      	str	r3, [r7, #0]
 8006034:	4603      	mov	r3, r0
 8006036:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8006038:	7bf8      	ldrb	r0, [r7, #15]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	f7fb fa08 	bl	8001454 <SD_disk_read>
 8006044:	4603      	mov	r3, r0
 8006046:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	603b      	str	r3, [r7, #0]
 800605c:	4603      	mov	r3, r0
 800605e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8006060:	7bf8      	ldrb	r0, [r7, #15]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	f7fb fa5e 	bl	8001528 <SD_disk_write>
 800606c:	4603      	mov	r3, r0
 800606e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	603a      	str	r2, [r7, #0]
 8006082:	71fb      	strb	r3, [r7, #7]
 8006084:	460b      	mov	r3, r1
 8006086:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	79b9      	ldrb	r1, [r7, #6]
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f7fb face 	bl	8001630 <SD_disk_ioctl>
 8006094:	4603      	mov	r3, r0
 8006096:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	4a08      	ldr	r2, [pc, #32]	; (80060d0 <disk_status+0x30>)
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	79fa      	ldrb	r2, [r7, #7]
 80060b8:	4905      	ldr	r1, [pc, #20]	; (80060d0 <disk_status+0x30>)
 80060ba:	440a      	add	r2, r1
 80060bc:	7a12      	ldrb	r2, [r2, #8]
 80060be:	4610      	mov	r0, r2
 80060c0:	4798      	blx	r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20006780 	.word	0x20006780

080060d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	4a0d      	ldr	r2, [pc, #52]	; (800611c <disk_initialize+0x48>)
 80060e6:	5cd3      	ldrb	r3, [r2, r3]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d111      	bne.n	8006110 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	4a0b      	ldr	r2, [pc, #44]	; (800611c <disk_initialize+0x48>)
 80060f0:	2101      	movs	r1, #1
 80060f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	4a09      	ldr	r2, [pc, #36]	; (800611c <disk_initialize+0x48>)
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	79fa      	ldrb	r2, [r7, #7]
 8006102:	4906      	ldr	r1, [pc, #24]	; (800611c <disk_initialize+0x48>)
 8006104:	440a      	add	r2, r1
 8006106:	7a12      	ldrb	r2, [r2, #8]
 8006108:	4610      	mov	r0, r2
 800610a:	4798      	blx	r3
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006110:	7bfb      	ldrb	r3, [r7, #15]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20006780 	.word	0x20006780

08006120 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006120:	b590      	push	{r4, r7, lr}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4603      	mov	r3, r0
 800612e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	4a0a      	ldr	r2, [pc, #40]	; (800615c <disk_read+0x3c>)
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	689c      	ldr	r4, [r3, #8]
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	4a07      	ldr	r2, [pc, #28]	; (800615c <disk_read+0x3c>)
 8006140:	4413      	add	r3, r2
 8006142:	7a18      	ldrb	r0, [r3, #8]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	68b9      	ldr	r1, [r7, #8]
 800614a:	47a0      	blx	r4
 800614c:	4603      	mov	r3, r0
 800614e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006150:	7dfb      	ldrb	r3, [r7, #23]
}
 8006152:	4618      	mov	r0, r3
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	bd90      	pop	{r4, r7, pc}
 800615a:	bf00      	nop
 800615c:	20006780 	.word	0x20006780

08006160 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006160:	b590      	push	{r4, r7, lr}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
 800616a:	603b      	str	r3, [r7, #0]
 800616c:	4603      	mov	r3, r0
 800616e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	4a0a      	ldr	r2, [pc, #40]	; (800619c <disk_write+0x3c>)
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	68dc      	ldr	r4, [r3, #12]
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	4a07      	ldr	r2, [pc, #28]	; (800619c <disk_write+0x3c>)
 8006180:	4413      	add	r3, r2
 8006182:	7a18      	ldrb	r0, [r3, #8]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	47a0      	blx	r4
 800618c:	4603      	mov	r3, r0
 800618e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006190:	7dfb      	ldrb	r3, [r7, #23]
}
 8006192:	4618      	mov	r0, r3
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	bd90      	pop	{r4, r7, pc}
 800619a:	bf00      	nop
 800619c:	20006780 	.word	0x20006780

080061a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	603a      	str	r2, [r7, #0]
 80061aa:	71fb      	strb	r3, [r7, #7]
 80061ac:	460b      	mov	r3, r1
 80061ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	4a09      	ldr	r2, [pc, #36]	; (80061d8 <disk_ioctl+0x38>)
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	79fa      	ldrb	r2, [r7, #7]
 80061be:	4906      	ldr	r1, [pc, #24]	; (80061d8 <disk_ioctl+0x38>)
 80061c0:	440a      	add	r2, r1
 80061c2:	7a10      	ldrb	r0, [r2, #8]
 80061c4:	79b9      	ldrb	r1, [r7, #6]
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	4798      	blx	r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20006780 	.word	0x20006780

080061dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3301      	adds	r3, #1
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80061ec:	89fb      	ldrh	r3, [r7, #14]
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	b21a      	sxth	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	b21b      	sxth	r3, r3
 80061f8:	4313      	orrs	r3, r2
 80061fa:	b21b      	sxth	r3, r3
 80061fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80061fe:	89fb      	ldrh	r3, [r7, #14]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3303      	adds	r3, #3
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	3202      	adds	r2, #2
 8006224:	7812      	ldrb	r2, [r2, #0]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	3201      	adds	r2, #1
 8006232:	7812      	ldrb	r2, [r2, #0]
 8006234:	4313      	orrs	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	7812      	ldrb	r2, [r2, #0]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
	return rv;
 8006244:	68fb      	ldr	r3, [r7, #12]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	460b      	mov	r3, r1
 800625c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	887a      	ldrh	r2, [r7, #2]
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	887b      	ldrh	r3, [r7, #2]
 800626c:	0a1b      	lsrs	r3, r3, #8
 800626e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	887a      	ldrh	r2, [r7, #2]
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	0a1b      	lsrs	r3, r3, #8
 80062a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	607a      	str	r2, [r7, #4]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	0a1b      	lsrs	r3, r3, #8
 80062b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	0a1b      	lsrs	r3, r3, #8
 80062c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	607a      	str	r2, [r7, #4]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00d      	beq.n	8006316 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	1c53      	adds	r3, r2, #1
 80062fe:	613b      	str	r3, [r7, #16]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	1c59      	adds	r1, r3, #1
 8006304:	6179      	str	r1, [r7, #20]
 8006306:	7812      	ldrb	r2, [r2, #0]
 8006308:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3b01      	subs	r3, #1
 800630e:	607b      	str	r3, [r7, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f1      	bne.n	80062fa <mem_cpy+0x1a>
	}
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006322:	b480      	push	{r7}
 8006324:	b087      	sub	sp, #28
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	617a      	str	r2, [r7, #20]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3b01      	subs	r3, #1
 8006342:	607b      	str	r3, [r7, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1f3      	bne.n	8006332 <mem_set+0x10>
}
 800634a:	bf00      	nop
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006358:	b480      	push	{r7}
 800635a:	b089      	sub	sp, #36	; 0x24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	61fa      	str	r2, [r7, #28]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	4619      	mov	r1, r3
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	61ba      	str	r2, [r7, #24]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	1acb      	subs	r3, r1, r3
 8006384:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3b01      	subs	r3, #1
 800638a:	607b      	str	r3, [r7, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <mem_cmp+0x40>
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0eb      	beq.n	8006370 <mem_cmp+0x18>

	return r;
 8006398:	697b      	ldr	r3, [r7, #20]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3724      	adds	r7, #36	; 0x24
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80063b0:	e002      	b.n	80063b8 <chk_chr+0x12>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3301      	adds	r3, #1
 80063b6:	607b      	str	r3, [r7, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <chk_chr+0x26>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d1f2      	bne.n	80063b2 <chk_chr+0xc>
	return *str;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	781b      	ldrb	r3, [r3, #0]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80063e6:	2300      	movs	r3, #0
 80063e8:	60bb      	str	r3, [r7, #8]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	e029      	b.n	8006444 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80063f0:	4a27      	ldr	r2, [pc, #156]	; (8006490 <chk_lock+0xb4>)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	4413      	add	r3, r2
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d01d      	beq.n	800643a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80063fe:	4a24      	ldr	r2, [pc, #144]	; (8006490 <chk_lock+0xb4>)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	4413      	add	r3, r2
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d116      	bne.n	800643e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006410:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <chk_lock+0xb4>)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	4413      	add	r3, r2
 8006418:	3304      	adds	r3, #4
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006420:	429a      	cmp	r2, r3
 8006422:	d10c      	bne.n	800643e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006424:	4a1a      	ldr	r2, [pc, #104]	; (8006490 <chk_lock+0xb4>)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	4413      	add	r3, r2
 800642c:	3308      	adds	r3, #8
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006434:	429a      	cmp	r2, r3
 8006436:	d102      	bne.n	800643e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006438:	e007      	b.n	800644a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800643a:	2301      	movs	r3, #1
 800643c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3301      	adds	r3, #1
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d9d2      	bls.n	80063f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d109      	bne.n	8006464 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d102      	bne.n	800645c <chk_lock+0x80>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d101      	bne.n	8006460 <chk_lock+0x84>
 800645c:	2300      	movs	r3, #0
 800645e:	e010      	b.n	8006482 <chk_lock+0xa6>
 8006460:	2312      	movs	r3, #18
 8006462:	e00e      	b.n	8006482 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d108      	bne.n	800647c <chk_lock+0xa0>
 800646a:	4a09      	ldr	r2, [pc, #36]	; (8006490 <chk_lock+0xb4>)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	4413      	add	r3, r2
 8006472:	330c      	adds	r3, #12
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800647a:	d101      	bne.n	8006480 <chk_lock+0xa4>
 800647c:	2310      	movs	r3, #16
 800647e:	e000      	b.n	8006482 <chk_lock+0xa6>
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	20006560 	.word	0x20006560

08006494 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800649a:	2300      	movs	r3, #0
 800649c:	607b      	str	r3, [r7, #4]
 800649e:	e002      	b.n	80064a6 <enq_lock+0x12>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3301      	adds	r3, #1
 80064a4:	607b      	str	r3, [r7, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d806      	bhi.n	80064ba <enq_lock+0x26>
 80064ac:	4a09      	ldr	r2, [pc, #36]	; (80064d4 <enq_lock+0x40>)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	4413      	add	r3, r2
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f2      	bne.n	80064a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	bf14      	ite	ne
 80064c0:	2301      	movne	r3, #1
 80064c2:	2300      	moveq	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20006560 	.word	0x20006560

080064d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	e01f      	b.n	8006528 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80064e8:	4a41      	ldr	r2, [pc, #260]	; (80065f0 <inc_lock+0x118>)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	4413      	add	r3, r2
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d113      	bne.n	8006522 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80064fa:	4a3d      	ldr	r2, [pc, #244]	; (80065f0 <inc_lock+0x118>)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	4413      	add	r3, r2
 8006502:	3304      	adds	r3, #4
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800650a:	429a      	cmp	r2, r3
 800650c:	d109      	bne.n	8006522 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800650e:	4a38      	ldr	r2, [pc, #224]	; (80065f0 <inc_lock+0x118>)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	4413      	add	r3, r2
 8006516:	3308      	adds	r3, #8
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800651e:	429a      	cmp	r2, r3
 8006520:	d006      	beq.n	8006530 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d9dc      	bls.n	80064e8 <inc_lock+0x10>
 800652e:	e000      	b.n	8006532 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006530:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b02      	cmp	r3, #2
 8006536:	d132      	bne.n	800659e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e002      	b.n	8006544 <inc_lock+0x6c>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d806      	bhi.n	8006558 <inc_lock+0x80>
 800654a:	4a29      	ldr	r2, [pc, #164]	; (80065f0 <inc_lock+0x118>)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	4413      	add	r3, r2
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1f2      	bne.n	800653e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d101      	bne.n	8006562 <inc_lock+0x8a>
 800655e:	2300      	movs	r3, #0
 8006560:	e040      	b.n	80065e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4922      	ldr	r1, [pc, #136]	; (80065f0 <inc_lock+0x118>)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	440b      	add	r3, r1
 800656e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	491e      	ldr	r1, [pc, #120]	; (80065f0 <inc_lock+0x118>)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	440b      	add	r3, r1
 800657c:	3304      	adds	r3, #4
 800657e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695a      	ldr	r2, [r3, #20]
 8006584:	491a      	ldr	r1, [pc, #104]	; (80065f0 <inc_lock+0x118>)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	440b      	add	r3, r1
 800658c:	3308      	adds	r3, #8
 800658e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006590:	4a17      	ldr	r2, [pc, #92]	; (80065f0 <inc_lock+0x118>)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	4413      	add	r3, r2
 8006598:	330c      	adds	r3, #12
 800659a:	2200      	movs	r2, #0
 800659c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d009      	beq.n	80065b8 <inc_lock+0xe0>
 80065a4:	4a12      	ldr	r2, [pc, #72]	; (80065f0 <inc_lock+0x118>)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	4413      	add	r3, r2
 80065ac:	330c      	adds	r3, #12
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <inc_lock+0xe0>
 80065b4:	2300      	movs	r3, #0
 80065b6:	e015      	b.n	80065e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d108      	bne.n	80065d0 <inc_lock+0xf8>
 80065be:	4a0c      	ldr	r2, [pc, #48]	; (80065f0 <inc_lock+0x118>)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	4413      	add	r3, r2
 80065c6:	330c      	adds	r3, #12
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	3301      	adds	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	e001      	b.n	80065d4 <inc_lock+0xfc>
 80065d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065d4:	4906      	ldr	r1, [pc, #24]	; (80065f0 <inc_lock+0x118>)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	440b      	add	r3, r1
 80065dc:	330c      	adds	r3, #12
 80065de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	20006560 	.word	0x20006560

080065f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3b01      	subs	r3, #1
 8006600:	607b      	str	r3, [r7, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d825      	bhi.n	8006654 <dec_lock+0x60>
		n = Files[i].ctr;
 8006608:	4a17      	ldr	r2, [pc, #92]	; (8006668 <dec_lock+0x74>)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	4413      	add	r3, r2
 8006610:	330c      	adds	r3, #12
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006616:	89fb      	ldrh	r3, [r7, #14]
 8006618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800661c:	d101      	bne.n	8006622 <dec_lock+0x2e>
 800661e:	2300      	movs	r3, #0
 8006620:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006622:	89fb      	ldrh	r3, [r7, #14]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <dec_lock+0x3a>
 8006628:	89fb      	ldrh	r3, [r7, #14]
 800662a:	3b01      	subs	r3, #1
 800662c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800662e:	4a0e      	ldr	r2, [pc, #56]	; (8006668 <dec_lock+0x74>)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	4413      	add	r3, r2
 8006636:	330c      	adds	r3, #12
 8006638:	89fa      	ldrh	r2, [r7, #14]
 800663a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800663c:	89fb      	ldrh	r3, [r7, #14]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d105      	bne.n	800664e <dec_lock+0x5a>
 8006642:	4a09      	ldr	r2, [pc, #36]	; (8006668 <dec_lock+0x74>)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	4413      	add	r3, r2
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	737b      	strb	r3, [r7, #13]
 8006652:	e001      	b.n	8006658 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006654:	2302      	movs	r3, #2
 8006656:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006658:	7b7b      	ldrb	r3, [r7, #13]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20006560 	.word	0x20006560

0800666c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	e010      	b.n	800669c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800667a:	4a0d      	ldr	r2, [pc, #52]	; (80066b0 <clear_lock+0x44>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	4413      	add	r3, r2
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	429a      	cmp	r2, r3
 8006688:	d105      	bne.n	8006696 <clear_lock+0x2a>
 800668a:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <clear_lock+0x44>)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	4413      	add	r3, r2
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3301      	adds	r3, #1
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d9eb      	bls.n	800667a <clear_lock+0xe>
	}
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	20006560 	.word	0x20006560

080066b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	78db      	ldrb	r3, [r3, #3]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d034      	beq.n	8006732 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	7858      	ldrb	r0, [r3, #1]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066d8:	2301      	movs	r3, #1
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	f7ff fd40 	bl	8006160 <disk_write>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <sync_window+0x38>
			res = FR_DISK_ERR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	73fb      	strb	r3, [r7, #15]
 80066ea:	e022      	b.n	8006732 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	1ad2      	subs	r2, r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d217      	bcs.n	8006732 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	789b      	ldrb	r3, [r3, #2]
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	e010      	b.n	800672c <sync_window+0x78>
					wsect += fs->fsize;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7858      	ldrb	r0, [r3, #1]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800671e:	2301      	movs	r3, #1
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	f7ff fd1d 	bl	8006160 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	3b01      	subs	r3, #1
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d8eb      	bhi.n	800670a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	d01b      	beq.n	800678c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff ffad 	bl	80066b4 <sync_window>
 800675a:	4603      	mov	r3, r0
 800675c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d113      	bne.n	800678c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	7858      	ldrb	r0, [r3, #1]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800676e:	2301      	movs	r3, #1
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	f7ff fcd5 	bl	8006120 <disk_read>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d004      	beq.n	8006786 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800677c:	f04f 33ff 	mov.w	r3, #4294967295
 8006780:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006782:	2301      	movs	r3, #1
 8006784:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff ff87 	bl	80066b4 <sync_window>
 80067a6:	4603      	mov	r3, r0
 80067a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d159      	bne.n	8006864 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d149      	bne.n	800684c <sync_fs+0xb4>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	791b      	ldrb	r3, [r3, #4]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d145      	bne.n	800684c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	899b      	ldrh	r3, [r3, #12]
 80067ca:	461a      	mov	r2, r3
 80067cc:	2100      	movs	r1, #0
 80067ce:	f7ff fda8 	bl	8006322 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3338      	adds	r3, #56	; 0x38
 80067d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067da:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fd37 	bl	8006252 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3338      	adds	r3, #56	; 0x38
 80067e8:	4921      	ldr	r1, [pc, #132]	; (8006870 <sync_fs+0xd8>)
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff fd4c 	bl	8006288 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3338      	adds	r3, #56	; 0x38
 80067f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80067f8:	491e      	ldr	r1, [pc, #120]	; (8006874 <sync_fs+0xdc>)
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff fd44 	bl	8006288 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3338      	adds	r3, #56	; 0x38
 8006804:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f7ff fd3a 	bl	8006288 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3338      	adds	r3, #56	; 0x38
 8006818:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	4619      	mov	r1, r3
 8006822:	4610      	mov	r0, r2
 8006824:	f7ff fd30 	bl	8006288 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	7858      	ldrb	r0, [r3, #1]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006840:	2301      	movs	r3, #1
 8006842:	f7ff fc8d 	bl	8006160 <disk_write>
			fs->fsi_flag = 0;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2200      	movs	r2, #0
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff fca3 	bl	80061a0 <disk_ioctl>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <sync_fs+0xcc>
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	41615252 	.word	0x41615252
 8006874:	61417272 	.word	0x61417272

08006878 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	3b02      	subs	r3, #2
 8006886:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	3b02      	subs	r3, #2
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d301      	bcc.n	8006898 <clust2sect+0x20>
 8006894:	2300      	movs	r3, #0
 8006896:	e008      	b.n	80068aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	895b      	ldrh	r3, [r3, #10]
 800689c:	461a      	mov	r2, r3
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	fb03 f202 	mul.w	r2, r3, r2
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	4413      	add	r3, r2
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b086      	sub	sp, #24
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d904      	bls.n	80068d6 <get_fat+0x20>
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d302      	bcc.n	80068dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80068d6:	2301      	movs	r3, #1
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	e0bb      	b.n	8006a54 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80068dc:	f04f 33ff 	mov.w	r3, #4294967295
 80068e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	f000 8083 	beq.w	80069f2 <get_fat+0x13c>
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	f300 80a7 	bgt.w	8006a40 <get_fat+0x18a>
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d002      	beq.n	80068fc <get_fat+0x46>
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d056      	beq.n	80069a8 <get_fat+0xf2>
 80068fa:	e0a1      	b.n	8006a40 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	085b      	lsrs	r3, r3, #1
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	899b      	ldrh	r3, [r3, #12]
 8006912:	4619      	mov	r1, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	fbb3 f3f1 	udiv	r3, r3, r1
 800691a:	4413      	add	r3, r2
 800691c:	4619      	mov	r1, r3
 800691e:	6938      	ldr	r0, [r7, #16]
 8006920:	f7ff ff0c 	bl	800673c <move_window>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	f040 808d 	bne.w	8006a46 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	60fa      	str	r2, [r7, #12]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	8992      	ldrh	r2, [r2, #12]
 8006936:	fbb3 f1f2 	udiv	r1, r3, r2
 800693a:	fb01 f202 	mul.w	r2, r1, r2
 800693e:	1a9b      	subs	r3, r3, r2
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4413      	add	r3, r2
 8006944:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006948:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	899b      	ldrh	r3, [r3, #12]
 8006952:	4619      	mov	r1, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	fbb3 f3f1 	udiv	r3, r3, r1
 800695a:	4413      	add	r3, r2
 800695c:	4619      	mov	r1, r3
 800695e:	6938      	ldr	r0, [r7, #16]
 8006960:	f7ff feec 	bl	800673c <move_window>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d16f      	bne.n	8006a4a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	899b      	ldrh	r3, [r3, #12]
 800696e:	461a      	mov	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	fbb3 f1f2 	udiv	r1, r3, r2
 8006976:	fb01 f202 	mul.w	r2, r1, r2
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4413      	add	r3, r2
 8006980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	461a      	mov	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	4313      	orrs	r3, r2
 800698c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <get_fat+0xe8>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	091b      	lsrs	r3, r3, #4
 800699c:	e002      	b.n	80069a4 <get_fat+0xee>
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a4:	617b      	str	r3, [r7, #20]
			break;
 80069a6:	e055      	b.n	8006a54 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	899b      	ldrh	r3, [r3, #12]
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	4619      	mov	r1, r3
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80069bc:	4413      	add	r3, r2
 80069be:	4619      	mov	r1, r3
 80069c0:	6938      	ldr	r0, [r7, #16]
 80069c2:	f7ff febb 	bl	800673c <move_window>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d140      	bne.n	8006a4e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	8992      	ldrh	r2, [r2, #12]
 80069da:	fbb3 f0f2 	udiv	r0, r3, r2
 80069de:	fb00 f202 	mul.w	r2, r0, r2
 80069e2:	1a9b      	subs	r3, r3, r2
 80069e4:	440b      	add	r3, r1
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fbf8 	bl	80061dc <ld_word>
 80069ec:	4603      	mov	r3, r0
 80069ee:	617b      	str	r3, [r7, #20]
			break;
 80069f0:	e030      	b.n	8006a54 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	899b      	ldrh	r3, [r3, #12]
 80069fa:	089b      	lsrs	r3, r3, #2
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	4619      	mov	r1, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a06:	4413      	add	r3, r2
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6938      	ldr	r0, [r7, #16]
 8006a0c:	f7ff fe96 	bl	800673c <move_window>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d11d      	bne.n	8006a52 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	8992      	ldrh	r2, [r2, #12]
 8006a24:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a28:	fb00 f202 	mul.w	r2, r0, r2
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	440b      	add	r3, r1
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff fbeb 	bl	800620c <ld_dword>
 8006a36:	4603      	mov	r3, r0
 8006a38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a3c:	617b      	str	r3, [r7, #20]
			break;
 8006a3e:	e009      	b.n	8006a54 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006a40:	2301      	movs	r3, #1
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e006      	b.n	8006a54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a46:	bf00      	nop
 8006a48:	e004      	b.n	8006a54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a4a:	bf00      	nop
 8006a4c:	e002      	b.n	8006a54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a4e:	bf00      	nop
 8006a50:	e000      	b.n	8006a54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a52:	bf00      	nop
		}
	}

	return val;
 8006a54:	697b      	ldr	r3, [r7, #20]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006a5e:	b590      	push	{r4, r7, lr}
 8006a60:	b089      	sub	sp, #36	; 0x24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	f240 8102 	bls.w	8006c7a <put_fat+0x21c>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	f080 80fc 	bcs.w	8006c7a <put_fat+0x21c>
		switch (fs->fs_type) {
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	f000 80b6 	beq.w	8006bf8 <put_fat+0x19a>
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	f300 80fd 	bgt.w	8006c8c <put_fat+0x22e>
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d003      	beq.n	8006a9e <put_fat+0x40>
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	f000 8083 	beq.w	8006ba2 <put_fat+0x144>
 8006a9c:	e0f6      	b.n	8006c8c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	085b      	lsrs	r3, r3, #1
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	899b      	ldrh	r3, [r3, #12]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006abc:	4413      	add	r3, r2
 8006abe:	4619      	mov	r1, r3
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f7ff fe3b 	bl	800673c <move_window>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006aca:	7ffb      	ldrb	r3, [r7, #31]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f040 80d6 	bne.w	8006c7e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	61ba      	str	r2, [r7, #24]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	8992      	ldrh	r2, [r2, #12]
 8006ae2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ae6:	fb00 f202 	mul.w	r2, r0, r2
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	440b      	add	r3, r1
 8006aee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00d      	beq.n	8006b16 <put_fat+0xb8>
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	b25b      	sxtb	r3, r3
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	b25a      	sxtb	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	b25b      	sxtb	r3, r3
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	b25b      	sxtb	r3, r3
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	e001      	b.n	8006b1a <put_fat+0xbc>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	899b      	ldrh	r3, [r3, #12]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b34:	4413      	add	r3, r2
 8006b36:	4619      	mov	r1, r3
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7ff fdff 	bl	800673c <move_window>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b42:	7ffb      	ldrb	r3, [r7, #31]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f040 809c 	bne.w	8006c82 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	899b      	ldrh	r3, [r3, #12]
 8006b54:	461a      	mov	r2, r3
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b5c:	fb00 f202 	mul.w	r2, r0, r2
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	440b      	add	r3, r1
 8006b64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <put_fat+0x11a>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	091b      	lsrs	r3, r3, #4
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	e00e      	b.n	8006b96 <put_fat+0x138>
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b25b      	sxtb	r3, r3
 8006b7e:	f023 030f 	bic.w	r3, r3, #15
 8006b82:	b25a      	sxtb	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	0a1b      	lsrs	r3, r3, #8
 8006b88:	b25b      	sxtb	r3, r3
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	b25b      	sxtb	r3, r3
 8006b90:	4313      	orrs	r3, r2
 8006b92:	b25b      	sxtb	r3, r3
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	70da      	strb	r2, [r3, #3]
			break;
 8006ba0:	e074      	b.n	8006c8c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	899b      	ldrh	r3, [r3, #12]
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	4619      	mov	r1, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bb6:	4413      	add	r3, r2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7ff fdbe 	bl	800673c <move_window>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bc4:	7ffb      	ldrb	r3, [r7, #31]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d15d      	bne.n	8006c86 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	8992      	ldrh	r2, [r2, #12]
 8006bd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bdc:	fb00 f202 	mul.w	r2, r0, r2
 8006be0:	1a9b      	subs	r3, r3, r2
 8006be2:	440b      	add	r3, r1
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	b292      	uxth	r2, r2
 8006be8:	4611      	mov	r1, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff fb31 	bl	8006252 <st_word>
			fs->wflag = 1;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	70da      	strb	r2, [r3, #3]
			break;
 8006bf6:	e049      	b.n	8006c8c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	899b      	ldrh	r3, [r3, #12]
 8006c00:	089b      	lsrs	r3, r3, #2
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	4619      	mov	r1, r3
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c0c:	4413      	add	r3, r2
 8006c0e:	4619      	mov	r1, r3
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7ff fd93 	bl	800673c <move_window>
 8006c16:	4603      	mov	r3, r0
 8006c18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c1a:	7ffb      	ldrb	r3, [r7, #31]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d134      	bne.n	8006c8a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	8992      	ldrh	r2, [r2, #12]
 8006c34:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c38:	fb00 f202 	mul.w	r2, r0, r2
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	440b      	add	r3, r1
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff fae3 	bl	800620c <ld_dword>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006c4c:	4323      	orrs	r3, r4
 8006c4e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	8992      	ldrh	r2, [r2, #12]
 8006c5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c62:	fb00 f202 	mul.w	r2, r0, r2
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	440b      	add	r3, r1
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff fb0b 	bl	8006288 <st_dword>
			fs->wflag = 1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	70da      	strb	r2, [r3, #3]
			break;
 8006c78:	e008      	b.n	8006c8c <put_fat+0x22e>
		}
	}
 8006c7a:	bf00      	nop
 8006c7c:	e006      	b.n	8006c8c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006c7e:	bf00      	nop
 8006c80:	e004      	b.n	8006c8c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006c82:	bf00      	nop
 8006c84:	e002      	b.n	8006c8c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006c86:	bf00      	nop
 8006c88:	e000      	b.n	8006c8c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006c8a:	bf00      	nop
	return res;
 8006c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3724      	adds	r7, #36	; 0x24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd90      	pop	{r4, r7, pc}

08006c96 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b088      	sub	sp, #32
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d904      	bls.n	8006cbc <remove_chain+0x26>
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d301      	bcc.n	8006cc0 <remove_chain+0x2a>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e04b      	b.n	8006d58 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00c      	beq.n	8006ce0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	69b8      	ldr	r0, [r7, #24]
 8006cce:	f7ff fec6 	bl	8006a5e <put_fat>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006cd6:	7ffb      	ldrb	r3, [r7, #31]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <remove_chain+0x4a>
 8006cdc:	7ffb      	ldrb	r3, [r7, #31]
 8006cde:	e03b      	b.n	8006d58 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006ce0:	68b9      	ldr	r1, [r7, #8]
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7ff fde7 	bl	80068b6 <get_fat>
 8006ce8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d031      	beq.n	8006d54 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <remove_chain+0x64>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e02e      	b.n	8006d58 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d00:	d101      	bne.n	8006d06 <remove_chain+0x70>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e028      	b.n	8006d58 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006d06:	2200      	movs	r2, #0
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	69b8      	ldr	r0, [r7, #24]
 8006d0c:	f7ff fea7 	bl	8006a5e <put_fat>
 8006d10:	4603      	mov	r3, r0
 8006d12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006d14:	7ffb      	ldrb	r3, [r7, #31]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <remove_chain+0x88>
 8006d1a:	7ffb      	ldrb	r3, [r7, #31]
 8006d1c:	e01c      	b.n	8006d58 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	3b02      	subs	r3, #2
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d20b      	bcs.n	8006d44 <remove_chain+0xae>
			fs->free_clst++;
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	791b      	ldrb	r3, [r3, #4]
 8006d3a:	f043 0301 	orr.w	r3, r3, #1
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d3c6      	bcc.n	8006ce0 <remove_chain+0x4a>
 8006d52:	e000      	b.n	8006d56 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006d54:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3720      	adds	r7, #32
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10d      	bne.n	8006d92 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d004      	beq.n	8006d8c <create_chain+0x2c>
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d31b      	bcc.n	8006dc4 <create_chain+0x64>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	61bb      	str	r3, [r7, #24]
 8006d90:	e018      	b.n	8006dc4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff fd8e 	bl	80068b6 <get_fat>
 8006d9a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d801      	bhi.n	8006da6 <create_chain+0x46>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e070      	b.n	8006e88 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d101      	bne.n	8006db2 <create_chain+0x52>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	e06a      	b.n	8006e88 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d201      	bcs.n	8006dc0 <create_chain+0x60>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	e063      	b.n	8006e88 <create_chain+0x128>
		scl = clst;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d307      	bcc.n	8006de8 <create_chain+0x88>
				ncl = 2;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d901      	bls.n	8006de8 <create_chain+0x88>
 8006de4:	2300      	movs	r3, #0
 8006de6:	e04f      	b.n	8006e88 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006de8:	69f9      	ldr	r1, [r7, #28]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7ff fd63 	bl	80068b6 <get_fat>
 8006df0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00e      	beq.n	8006e16 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d003      	beq.n	8006e06 <create_chain+0xa6>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e04:	d101      	bne.n	8006e0a <create_chain+0xaa>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	e03e      	b.n	8006e88 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d1da      	bne.n	8006dc8 <create_chain+0x68>
 8006e12:	2300      	movs	r3, #0
 8006e14:	e038      	b.n	8006e88 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006e16:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006e18:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1c:	69f9      	ldr	r1, [r7, #28]
 8006e1e:	6938      	ldr	r0, [r7, #16]
 8006e20:	f7ff fe1d 	bl	8006a5e <put_fat>
 8006e24:	4603      	mov	r3, r0
 8006e26:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d109      	bne.n	8006e42 <create_chain+0xe2>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d006      	beq.n	8006e42 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6938      	ldr	r0, [r7, #16]
 8006e3a:	f7ff fe10 	bl	8006a5e <put_fat>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d116      	bne.n	8006e76 <create_chain+0x116>
		fs->last_clst = ncl;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	3b02      	subs	r3, #2
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d804      	bhi.n	8006e66 <create_chain+0x106>
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	1e5a      	subs	r2, r3, #1
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	791b      	ldrb	r3, [r3, #4]
 8006e6a:	f043 0301 	orr.w	r3, r3, #1
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	711a      	strb	r2, [r3, #4]
 8006e74:	e007      	b.n	8006e86 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d102      	bne.n	8006e82 <create_chain+0x122>
 8006e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e80:	e000      	b.n	8006e84 <create_chain+0x124>
 8006e82:	2301      	movs	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006e86:	69fb      	ldr	r3, [r7, #28]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3720      	adds	r7, #32
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	899b      	ldrh	r3, [r3, #12]
 8006eac:	461a      	mov	r2, r3
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	8952      	ldrh	r2, [r2, #10]
 8006eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1d1a      	adds	r2, r3, #4
 8006ec2:	613a      	str	r2, [r7, #16]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <clmt_clust+0x42>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e010      	b.n	8006ef4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d307      	bcc.n	8006eea <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	617b      	str	r3, [r7, #20]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ee8:	e7e9      	b.n	8006ebe <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006eea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	4413      	add	r3, r2
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f16:	d204      	bcs.n	8006f22 <dir_sdi+0x22>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006f22:	2302      	movs	r3, #2
 8006f24:	e071      	b.n	800700a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d106      	bne.n	8006f46 <dir_sdi+0x46>
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d902      	bls.n	8006f46 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10c      	bne.n	8006f66 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	8912      	ldrh	r2, [r2, #8]
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d301      	bcc.n	8006f5c <dir_sdi+0x5c>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e056      	b.n	800700a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	61da      	str	r2, [r3, #28]
 8006f64:	e02d      	b.n	8006fc2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	895b      	ldrh	r3, [r3, #10]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	899b      	ldrh	r3, [r3, #12]
 8006f70:	fb02 f303 	mul.w	r3, r2, r3
 8006f74:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006f76:	e019      	b.n	8006fac <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6979      	ldr	r1, [r7, #20]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff fc9a 	bl	80068b6 <get_fat>
 8006f82:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d101      	bne.n	8006f90 <dir_sdi+0x90>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e03c      	b.n	800700a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d904      	bls.n	8006fa0 <dir_sdi+0xa0>
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d301      	bcc.n	8006fa4 <dir_sdi+0xa4>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e032      	b.n	800700a <dir_sdi+0x10a>
			ofs -= csz;
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d2e1      	bcs.n	8006f78 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006fb4:	6979      	ldr	r1, [r7, #20]
 8006fb6:	6938      	ldr	r0, [r7, #16]
 8006fb8:	f7ff fc5e 	bl	8006878 <clust2sect>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <dir_sdi+0xd4>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e01a      	b.n	800700a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	69da      	ldr	r2, [r3, #28]
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	899b      	ldrh	r3, [r3, #12]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fe4:	441a      	add	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	899b      	ldrh	r3, [r3, #12]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ffc:	fb00 f202 	mul.w	r2, r0, r2
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	18ca      	adds	r2, r1, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b086      	sub	sp, #24
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	3320      	adds	r3, #32
 8007028:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <dir_next+0x28>
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007038:	d301      	bcc.n	800703e <dir_next+0x2c>
 800703a:	2304      	movs	r3, #4
 800703c:	e0bb      	b.n	80071b6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	899b      	ldrh	r3, [r3, #12]
 8007042:	461a      	mov	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	fbb3 f1f2 	udiv	r1, r3, r2
 800704a:	fb01 f202 	mul.w	r2, r1, r2
 800704e:	1a9b      	subs	r3, r3, r2
 8007050:	2b00      	cmp	r3, #0
 8007052:	f040 809d 	bne.w	8007190 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10b      	bne.n	8007080 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	095b      	lsrs	r3, r3, #5
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	8912      	ldrh	r2, [r2, #8]
 8007070:	4293      	cmp	r3, r2
 8007072:	f0c0 808d 	bcc.w	8007190 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	61da      	str	r2, [r3, #28]
 800707c:	2304      	movs	r3, #4
 800707e:	e09a      	b.n	80071b6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	899b      	ldrh	r3, [r3, #12]
 8007084:	461a      	mov	r2, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	fbb3 f3f2 	udiv	r3, r3, r2
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	8952      	ldrh	r2, [r2, #10]
 8007090:	3a01      	subs	r2, #1
 8007092:	4013      	ands	r3, r2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d17b      	bne.n	8007190 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f7ff fc08 	bl	80068b6 <get_fat>
 80070a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d801      	bhi.n	80070b2 <dir_next+0xa0>
 80070ae:	2302      	movs	r3, #2
 80070b0:	e081      	b.n	80071b6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b8:	d101      	bne.n	80070be <dir_next+0xac>
 80070ba:	2301      	movs	r3, #1
 80070bc:	e07b      	b.n	80071b6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d359      	bcc.n	800717c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d104      	bne.n	80070d8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	61da      	str	r2, [r3, #28]
 80070d4:	2304      	movs	r3, #4
 80070d6:	e06e      	b.n	80071b6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	4619      	mov	r1, r3
 80070e0:	4610      	mov	r0, r2
 80070e2:	f7ff fe3d 	bl	8006d60 <create_chain>
 80070e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <dir_next+0xe0>
 80070ee:	2307      	movs	r3, #7
 80070f0:	e061      	b.n	80071b6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <dir_next+0xea>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e05c      	b.n	80071b6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007102:	d101      	bne.n	8007108 <dir_next+0xf6>
 8007104:	2301      	movs	r3, #1
 8007106:	e056      	b.n	80071b6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f7ff fad3 	bl	80066b4 <sync_window>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <dir_next+0x106>
 8007114:	2301      	movs	r3, #1
 8007116:	e04e      	b.n	80071b6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	899b      	ldrh	r3, [r3, #12]
 8007122:	461a      	mov	r2, r3
 8007124:	2100      	movs	r1, #0
 8007126:	f7ff f8fc 	bl	8006322 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800712a:	2300      	movs	r3, #0
 800712c:	613b      	str	r3, [r7, #16]
 800712e:	6979      	ldr	r1, [r7, #20]
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7ff fba1 	bl	8006878 <clust2sect>
 8007136:	4602      	mov	r2, r0
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	635a      	str	r2, [r3, #52]	; 0x34
 800713c:	e012      	b.n	8007164 <dir_next+0x152>
						fs->wflag = 1;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f7ff fab5 	bl	80066b4 <sync_window>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <dir_next+0x142>
 8007150:	2301      	movs	r3, #1
 8007152:	e030      	b.n	80071b6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	3301      	adds	r3, #1
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	635a      	str	r2, [r3, #52]	; 0x34
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	895b      	ldrh	r3, [r3, #10]
 8007168:	461a      	mov	r2, r3
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	4293      	cmp	r3, r2
 800716e:	d3e6      	bcc.n	800713e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad2      	subs	r2, r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007182:	6979      	ldr	r1, [r7, #20]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff fb77 	bl	8006878 <clust2sect>
 800718a:	4602      	mov	r2, r0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	899b      	ldrh	r3, [r3, #12]
 80071a0:	461a      	mov	r2, r3
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80071a8:	fb00 f202 	mul.w	r2, r0, r2
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	18ca      	adds	r2, r1, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80071ce:	2100      	movs	r1, #0
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7ff fe95 	bl	8006f00 <dir_sdi>
 80071d6:	4603      	mov	r3, r0
 80071d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80071da:	7dfb      	ldrb	r3, [r7, #23]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d12b      	bne.n	8007238 <dir_alloc+0x7a>
		n = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	4619      	mov	r1, r3
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f7ff faa6 	bl	800673c <move_window>
 80071f0:	4603      	mov	r3, r0
 80071f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d11d      	bne.n	8007236 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2be5      	cmp	r3, #229	; 0xe5
 8007202:	d004      	beq.n	800720e <dir_alloc+0x50>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d107      	bne.n	800721e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3301      	adds	r3, #1
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	d102      	bne.n	8007222 <dir_alloc+0x64>
 800721c:	e00c      	b.n	8007238 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800721e:	2300      	movs	r3, #0
 8007220:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007222:	2101      	movs	r1, #1
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff fef4 	bl	8007012 <dir_next>
 800722a:	4603      	mov	r3, r0
 800722c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0d7      	beq.n	80071e4 <dir_alloc+0x26>
 8007234:	e000      	b.n	8007238 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007236:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	2b04      	cmp	r3, #4
 800723c:	d101      	bne.n	8007242 <dir_alloc+0x84>
 800723e:	2307      	movs	r3, #7
 8007240:	75fb      	strb	r3, [r7, #23]
	return res;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	331a      	adds	r3, #26
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe ffbe 	bl	80061dc <ld_word>
 8007260:	4603      	mov	r3, r0
 8007262:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	2b03      	cmp	r3, #3
 800726a:	d109      	bne.n	8007280 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	3314      	adds	r3, #20
 8007270:	4618      	mov	r0, r3
 8007272:	f7fe ffb3 	bl	80061dc <ld_word>
 8007276:	4603      	mov	r3, r0
 8007278:	041b      	lsls	r3, r3, #16
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4313      	orrs	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007280:	68fb      	ldr	r3, [r7, #12]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	331a      	adds	r3, #26
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	b292      	uxth	r2, r2
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe ffd6 	bl	8006252 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d109      	bne.n	80072c2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f103 0214 	add.w	r2, r3, #20
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	0c1b      	lsrs	r3, r3, #16
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f7fe ffc8 	bl	8006252 <st_word>
	}
}
 80072c2:	bf00      	nop
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80072cc:	b590      	push	{r4, r7, lr}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	331a      	adds	r3, #26
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe ff7e 	bl	80061dc <ld_word>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <cmp_lfn+0x1e>
 80072e6:	2300      	movs	r3, #0
 80072e8:	e059      	b.n	800739e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072f2:	1e5a      	subs	r2, r3, #1
 80072f4:	4613      	mov	r3, r2
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007300:	2301      	movs	r3, #1
 8007302:	81fb      	strh	r3, [r7, #14]
 8007304:	2300      	movs	r3, #0
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	e033      	b.n	8007372 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800730a:	4a27      	ldr	r2, [pc, #156]	; (80073a8 <cmp_lfn+0xdc>)
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	4413      	add	r3, r2
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	4413      	add	r3, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe ff5f 	bl	80061dc <ld_word>
 800731e:	4603      	mov	r3, r0
 8007320:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007322:	89fb      	ldrh	r3, [r7, #14]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01a      	beq.n	800735e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2bfe      	cmp	r3, #254	; 0xfe
 800732c:	d812      	bhi.n	8007354 <cmp_lfn+0x88>
 800732e:	89bb      	ldrh	r3, [r7, #12]
 8007330:	4618      	mov	r0, r3
 8007332:	f002 fca3 	bl	8009c7c <ff_wtoupper>
 8007336:	4603      	mov	r3, r0
 8007338:	461c      	mov	r4, r3
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	617a      	str	r2, [r7, #20]
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	4413      	add	r3, r2
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	4618      	mov	r0, r3
 800734a:	f002 fc97 	bl	8009c7c <ff_wtoupper>
 800734e:	4603      	mov	r3, r0
 8007350:	429c      	cmp	r4, r3
 8007352:	d001      	beq.n	8007358 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007354:	2300      	movs	r3, #0
 8007356:	e022      	b.n	800739e <cmp_lfn+0xd2>
			}
			wc = uc;
 8007358:	89bb      	ldrh	r3, [r7, #12]
 800735a:	81fb      	strh	r3, [r7, #14]
 800735c:	e006      	b.n	800736c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800735e:	89bb      	ldrh	r3, [r7, #12]
 8007360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007364:	4293      	cmp	r3, r2
 8007366:	d001      	beq.n	800736c <cmp_lfn+0xa0>
 8007368:	2300      	movs	r3, #0
 800736a:	e018      	b.n	800739e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	3301      	adds	r3, #1
 8007370:	613b      	str	r3, [r7, #16]
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	2b0c      	cmp	r3, #12
 8007376:	d9c8      	bls.n	800730a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00b      	beq.n	800739c <cmp_lfn+0xd0>
 8007384:	89fb      	ldrh	r3, [r7, #14]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d008      	beq.n	800739c <cmp_lfn+0xd0>
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <cmp_lfn+0xd0>
 8007398:	2300      	movs	r3, #0
 800739a:	e000      	b.n	800739e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800739c:	2301      	movs	r3, #1
}
 800739e:	4618      	mov	r0, r3
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd90      	pop	{r4, r7, pc}
 80073a6:	bf00      	nop
 80073a8:	0800b80c 	.word	0x0800b80c

080073ac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b088      	sub	sp, #32
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4611      	mov	r1, r2
 80073b8:	461a      	mov	r2, r3
 80073ba:	460b      	mov	r3, r1
 80073bc:	71fb      	strb	r3, [r7, #7]
 80073be:	4613      	mov	r3, r2
 80073c0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	330d      	adds	r3, #13
 80073c6:	79ba      	ldrb	r2, [r7, #6]
 80073c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	330b      	adds	r3, #11
 80073ce:	220f      	movs	r2, #15
 80073d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	330c      	adds	r3, #12
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	331a      	adds	r3, #26
 80073de:	2100      	movs	r1, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fe ff36 	bl	8006252 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	1e5a      	subs	r2, r3, #1
 80073ea:	4613      	mov	r3, r2
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	4413      	add	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	82fb      	strh	r3, [r7, #22]
 80073fa:	2300      	movs	r3, #0
 80073fc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80073fe:	8afb      	ldrh	r3, [r7, #22]
 8007400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007404:	4293      	cmp	r3, r2
 8007406:	d007      	beq.n	8007418 <put_lfn+0x6c>
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	61fa      	str	r2, [r7, #28]
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007418:	4a17      	ldr	r2, [pc, #92]	; (8007478 <put_lfn+0xcc>)
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	4413      	add	r3, r2
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	4413      	add	r3, r2
 8007426:	8afa      	ldrh	r2, [r7, #22]
 8007428:	4611      	mov	r1, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe ff11 	bl	8006252 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007430:	8afb      	ldrh	r3, [r7, #22]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d102      	bne.n	800743c <put_lfn+0x90>
 8007436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800743a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	3301      	adds	r3, #1
 8007440:	61bb      	str	r3, [r7, #24]
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b0c      	cmp	r3, #12
 8007446:	d9da      	bls.n	80073fe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007448:	8afb      	ldrh	r3, [r7, #22]
 800744a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800744e:	4293      	cmp	r3, r2
 8007450:	d006      	beq.n	8007460 <put_lfn+0xb4>
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4413      	add	r3, r2
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d103      	bne.n	8007468 <put_lfn+0xbc>
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007466:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	79fa      	ldrb	r2, [r7, #7]
 800746c:	701a      	strb	r2, [r3, #0]
}
 800746e:	bf00      	nop
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	0800b80c 	.word	0x0800b80c

0800747c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08c      	sub	sp, #48	; 0x30
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800748a:	220b      	movs	r2, #11
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7fe ff26 	bl	80062e0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2b05      	cmp	r3, #5
 8007498:	d92b      	bls.n	80074f2 <gen_numname+0x76>
		sr = seq;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800749e:	e022      	b.n	80074e6 <gen_numname+0x6a>
			wc = *lfn++;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	1c9a      	adds	r2, r3, #2
 80074a4:	607a      	str	r2, [r7, #4]
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80074aa:	2300      	movs	r3, #0
 80074ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ae:	e017      	b.n	80074e0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	005a      	lsls	r2, r3, #1
 80074b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	4413      	add	r3, r2
 80074bc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80074be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074c0:	085b      	lsrs	r3, r3, #1
 80074c2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <gen_numname+0x5e>
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80074d4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80074d8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	3301      	adds	r3, #1
 80074de:	62bb      	str	r3, [r7, #40]	; 0x28
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	2b0f      	cmp	r3, #15
 80074e4:	d9e4      	bls.n	80074b0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1d8      	bne.n	80074a0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80074f2:	2307      	movs	r3, #7
 80074f4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	f003 030f 	and.w	r3, r3, #15
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	3330      	adds	r3, #48	; 0x30
 8007502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800750a:	2b39      	cmp	r3, #57	; 0x39
 800750c:	d904      	bls.n	8007518 <gen_numname+0x9c>
 800750e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007512:	3307      	adds	r3, #7
 8007514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	1e5a      	subs	r2, r3, #1
 800751c:	62ba      	str	r2, [r7, #40]	; 0x28
 800751e:	3330      	adds	r3, #48	; 0x30
 8007520:	443b      	add	r3, r7
 8007522:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007526:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	091b      	lsrs	r3, r3, #4
 800752e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1df      	bne.n	80074f6 <gen_numname+0x7a>
	ns[i] = '~';
 8007536:	f107 0214 	add.w	r2, r7, #20
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	4413      	add	r3, r2
 800753e:	227e      	movs	r2, #126	; 0x7e
 8007540:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007542:	2300      	movs	r3, #0
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
 8007546:	e002      	b.n	800754e <gen_numname+0xd2>
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	3301      	adds	r3, #1
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
 800754e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	429a      	cmp	r2, r3
 8007554:	d205      	bcs.n	8007562 <gen_numname+0xe6>
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	4413      	add	r3, r2
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b20      	cmp	r3, #32
 8007560:	d1f2      	bne.n	8007548 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	2b07      	cmp	r3, #7
 8007566:	d807      	bhi.n	8007578 <gen_numname+0xfc>
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	62ba      	str	r2, [r7, #40]	; 0x28
 800756e:	3330      	adds	r3, #48	; 0x30
 8007570:	443b      	add	r3, r7
 8007572:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007576:	e000      	b.n	800757a <gen_numname+0xfe>
 8007578:	2120      	movs	r1, #32
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	627a      	str	r2, [r7, #36]	; 0x24
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4413      	add	r3, r2
 8007584:	460a      	mov	r2, r1
 8007586:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	2b07      	cmp	r3, #7
 800758c:	d9e9      	bls.n	8007562 <gen_numname+0xe6>
}
 800758e:	bf00      	nop
 8007590:	bf00      	nop
 8007592:	3730      	adds	r7, #48	; 0x30
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80075a4:	230b      	movs	r3, #11
 80075a6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	0852      	lsrs	r2, r2, #1
 80075ae:	01db      	lsls	r3, r3, #7
 80075b0:	4313      	orrs	r3, r2
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	1c59      	adds	r1, r3, #1
 80075b8:	6079      	str	r1, [r7, #4]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	4413      	add	r3, r2
 80075be:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	60bb      	str	r3, [r7, #8]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1ed      	bne.n	80075a8 <sum_sfn+0x10>
	return sum;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80075e8:	2100      	movs	r1, #0
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff fc88 	bl	8006f00 <dir_sdi>
 80075f0:	4603      	mov	r3, r0
 80075f2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <dir_find+0x24>
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	e0a9      	b.n	8007752 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80075fe:	23ff      	movs	r3, #255	; 0xff
 8007600:	753b      	strb	r3, [r7, #20]
 8007602:	7d3b      	ldrb	r3, [r7, #20]
 8007604:	757b      	strb	r3, [r7, #21]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f04f 32ff 	mov.w	r2, #4294967295
 800760c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	4619      	mov	r1, r3
 8007614:	6938      	ldr	r0, [r7, #16]
 8007616:	f7ff f891 	bl	800673c <move_window>
 800761a:	4603      	mov	r3, r0
 800761c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f040 8090 	bne.w	8007746 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800762e:	7dbb      	ldrb	r3, [r7, #22]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d102      	bne.n	800763a <dir_find+0x60>
 8007634:	2304      	movs	r3, #4
 8007636:	75fb      	strb	r3, [r7, #23]
 8007638:	e08a      	b.n	8007750 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	330b      	adds	r3, #11
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007646:	73fb      	strb	r3, [r7, #15]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	7bfa      	ldrb	r2, [r7, #15]
 800764c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800764e:	7dbb      	ldrb	r3, [r7, #22]
 8007650:	2be5      	cmp	r3, #229	; 0xe5
 8007652:	d007      	beq.n	8007664 <dir_find+0x8a>
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d009      	beq.n	8007672 <dir_find+0x98>
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	2b0f      	cmp	r3, #15
 8007662:	d006      	beq.n	8007672 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007664:	23ff      	movs	r3, #255	; 0xff
 8007666:	757b      	strb	r3, [r7, #21]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f04f 32ff 	mov.w	r2, #4294967295
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
 8007670:	e05e      	b.n	8007730 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	2b0f      	cmp	r3, #15
 8007676:	d136      	bne.n	80076e6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d154      	bne.n	8007730 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007686:	7dbb      	ldrb	r3, [r7, #22]
 8007688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00d      	beq.n	80076ac <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	7b5b      	ldrb	r3, [r3, #13]
 8007696:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007698:	7dbb      	ldrb	r3, [r7, #22]
 800769a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800769e:	75bb      	strb	r3, [r7, #22]
 80076a0:	7dbb      	ldrb	r3, [r7, #22]
 80076a2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	695a      	ldr	r2, [r3, #20]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80076ac:	7dba      	ldrb	r2, [r7, #22]
 80076ae:	7d7b      	ldrb	r3, [r7, #21]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d115      	bne.n	80076e0 <dir_find+0x106>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	330d      	adds	r3, #13
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	7d3a      	ldrb	r2, [r7, #20]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d10e      	bne.n	80076e0 <dir_find+0x106>
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	4619      	mov	r1, r3
 80076cc:	4610      	mov	r0, r2
 80076ce:	f7ff fdfd 	bl	80072cc <cmp_lfn>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <dir_find+0x106>
 80076d8:	7d7b      	ldrb	r3, [r7, #21]
 80076da:	3b01      	subs	r3, #1
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	e000      	b.n	80076e2 <dir_find+0x108>
 80076e0:	23ff      	movs	r3, #255	; 0xff
 80076e2:	757b      	strb	r3, [r7, #21]
 80076e4:	e024      	b.n	8007730 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80076e6:	7d7b      	ldrb	r3, [r7, #21]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d109      	bne.n	8007700 <dir_find+0x126>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7ff ff51 	bl	8007598 <sum_sfn>
 80076f6:	4603      	mov	r3, r0
 80076f8:	461a      	mov	r2, r3
 80076fa:	7d3b      	ldrb	r3, [r7, #20]
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d024      	beq.n	800774a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <dir_find+0x14a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a18      	ldr	r0, [r3, #32]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3324      	adds	r3, #36	; 0x24
 8007716:	220b      	movs	r2, #11
 8007718:	4619      	mov	r1, r3
 800771a:	f7fe fe1d 	bl	8006358 <mem_cmp>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d014      	beq.n	800774e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007724:	23ff      	movs	r3, #255	; 0xff
 8007726:	757b      	strb	r3, [r7, #21]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f04f 32ff 	mov.w	r2, #4294967295
 800772e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007730:	2100      	movs	r1, #0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff fc6d 	bl	8007012 <dir_next>
 8007738:	4603      	mov	r3, r0
 800773a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	2b00      	cmp	r3, #0
 8007740:	f43f af65 	beq.w	800760e <dir_find+0x34>
 8007744:	e004      	b.n	8007750 <dir_find+0x176>
		if (res != FR_OK) break;
 8007746:	bf00      	nop
 8007748:	e002      	b.n	8007750 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800774a:	bf00      	nop
 800774c:	e000      	b.n	8007750 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800774e:	bf00      	nop

	return res;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08c      	sub	sp, #48	; 0x30
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007770:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <dir_register+0x20>
 8007778:	2306      	movs	r3, #6
 800777a:	e0e0      	b.n	800793e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800777c:	2300      	movs	r3, #0
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
 8007780:	e002      	b.n	8007788 <dir_register+0x2c>
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	3301      	adds	r3, #1
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	691a      	ldr	r2, [r3, #16]
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4413      	add	r3, r2
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1f4      	bne.n	8007782 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800779e:	f107 030c 	add.w	r3, r7, #12
 80077a2:	220c      	movs	r2, #12
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fe fd9b 	bl	80062e0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d032      	beq.n	800781a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2240      	movs	r2, #64	; 0x40
 80077b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80077bc:	2301      	movs	r3, #1
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c0:	e016      	b.n	80077f0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	691a      	ldr	r2, [r3, #16]
 80077cc:	f107 010c 	add.w	r1, r7, #12
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	f7ff fe53 	bl	800747c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff feff 	bl	80075da <dir_find>
 80077dc:	4603      	mov	r3, r0
 80077de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80077e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	3301      	adds	r3, #1
 80077ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	2b63      	cmp	r3, #99	; 0x63
 80077f4:	d9e5      	bls.n	80077c2 <dir_register+0x66>
 80077f6:	e000      	b.n	80077fa <dir_register+0x9e>
			if (res != FR_OK) break;
 80077f8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	2b64      	cmp	r3, #100	; 0x64
 80077fe:	d101      	bne.n	8007804 <dir_register+0xa8>
 8007800:	2307      	movs	r3, #7
 8007802:	e09c      	b.n	800793e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007808:	2b04      	cmp	r3, #4
 800780a:	d002      	beq.n	8007812 <dir_register+0xb6>
 800780c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007810:	e095      	b.n	800793e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007812:	7dfa      	ldrb	r2, [r7, #23]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <dir_register+0xd8>
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	330c      	adds	r3, #12
 8007828:	4a47      	ldr	r2, [pc, #284]	; (8007948 <dir_register+0x1ec>)
 800782a:	fba2 2303 	umull	r2, r3, r2, r3
 800782e:	089b      	lsrs	r3, r3, #2
 8007830:	3301      	adds	r3, #1
 8007832:	e000      	b.n	8007836 <dir_register+0xda>
 8007834:	2301      	movs	r3, #1
 8007836:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007838:	6a39      	ldr	r1, [r7, #32]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff fcbf 	bl	80071be <dir_alloc>
 8007840:	4603      	mov	r3, r0
 8007842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800784a:	2b00      	cmp	r3, #0
 800784c:	d148      	bne.n	80078e0 <dir_register+0x184>
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	3b01      	subs	r3, #1
 8007852:	623b      	str	r3, [r7, #32]
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d042      	beq.n	80078e0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	695a      	ldr	r2, [r3, #20]
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	015b      	lsls	r3, r3, #5
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff fb4a 	bl	8006f00 <dir_sdi>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007876:	2b00      	cmp	r3, #0
 8007878:	d132      	bne.n	80078e0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3324      	adds	r3, #36	; 0x24
 800787e:	4618      	mov	r0, r3
 8007880:	f7ff fe8a 	bl	8007598 <sum_sfn>
 8007884:	4603      	mov	r3, r0
 8007886:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	4619      	mov	r1, r3
 800788e:	69f8      	ldr	r0, [r7, #28]
 8007890:	f7fe ff54 	bl	800673c <move_window>
 8007894:	4603      	mov	r3, r0
 8007896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800789a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d11d      	bne.n	80078de <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	6918      	ldr	r0, [r3, #16]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a19      	ldr	r1, [r3, #32]
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	7efb      	ldrb	r3, [r7, #27]
 80078b0:	f7ff fd7c 	bl	80073ac <put_lfn>
				fs->wflag = 1;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	2201      	movs	r2, #1
 80078b8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80078ba:	2100      	movs	r1, #0
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff fba8 	bl	8007012 <dir_next>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80078c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d107      	bne.n	80078e0 <dir_register+0x184>
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	623b      	str	r3, [r7, #32]
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1d5      	bne.n	8007888 <dir_register+0x12c>
 80078dc:	e000      	b.n	80078e0 <dir_register+0x184>
				if (res != FR_OK) break;
 80078de:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80078e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d128      	bne.n	800793a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	4619      	mov	r1, r3
 80078ee:	69f8      	ldr	r0, [r7, #28]
 80078f0:	f7fe ff24 	bl	800673c <move_window>
 80078f4:	4603      	mov	r3, r0
 80078f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80078fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d11b      	bne.n	800793a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	2220      	movs	r2, #32
 8007908:	2100      	movs	r1, #0
 800790a:	4618      	mov	r0, r3
 800790c:	f7fe fd09 	bl	8006322 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a18      	ldr	r0, [r3, #32]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3324      	adds	r3, #36	; 0x24
 8007918:	220b      	movs	r2, #11
 800791a:	4619      	mov	r1, r3
 800791c:	f7fe fce0 	bl	80062e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	330c      	adds	r3, #12
 800792c:	f002 0218 	and.w	r2, r2, #24
 8007930:	b2d2      	uxtb	r2, r2
 8007932:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	2201      	movs	r2, #1
 8007938:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800793a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800793e:	4618      	mov	r0, r3
 8007940:	3730      	adds	r7, #48	; 0x30
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	4ec4ec4f 	.word	0x4ec4ec4f

0800794c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08a      	sub	sp, #40	; 0x28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	613b      	str	r3, [r7, #16]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	61ba      	str	r2, [r7, #24]
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	4413      	add	r3, r2
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800797a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800797c:	2b1f      	cmp	r3, #31
 800797e:	d940      	bls.n	8007a02 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007982:	2b2f      	cmp	r3, #47	; 0x2f
 8007984:	d006      	beq.n	8007994 <create_name+0x48>
 8007986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007988:	2b5c      	cmp	r3, #92	; 0x5c
 800798a:	d110      	bne.n	80079ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800798c:	e002      	b.n	8007994 <create_name+0x48>
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	3301      	adds	r3, #1
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	4413      	add	r3, r2
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b2f      	cmp	r3, #47	; 0x2f
 800799e:	d0f6      	beq.n	800798e <create_name+0x42>
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	4413      	add	r3, r2
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b5c      	cmp	r3, #92	; 0x5c
 80079aa:	d0f0      	beq.n	800798e <create_name+0x42>
			break;
 80079ac:	e02a      	b.n	8007a04 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2bfe      	cmp	r3, #254	; 0xfe
 80079b2:	d901      	bls.n	80079b8 <create_name+0x6c>
 80079b4:	2306      	movs	r3, #6
 80079b6:	e17d      	b.n	8007cb4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80079b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80079be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079c0:	2101      	movs	r1, #1
 80079c2:	4618      	mov	r0, r3
 80079c4:	f002 f91e 	bl	8009c04 <ff_convert>
 80079c8:	4603      	mov	r3, r0
 80079ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80079cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <create_name+0x8a>
 80079d2:	2306      	movs	r3, #6
 80079d4:	e16e      	b.n	8007cb4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80079d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079d8:	2b7f      	cmp	r3, #127	; 0x7f
 80079da:	d809      	bhi.n	80079f0 <create_name+0xa4>
 80079dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079de:	4619      	mov	r1, r3
 80079e0:	488d      	ldr	r0, [pc, #564]	; (8007c18 <create_name+0x2cc>)
 80079e2:	f7fe fce0 	bl	80063a6 <chk_chr>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <create_name+0xa4>
 80079ec:	2306      	movs	r3, #6
 80079ee:	e161      	b.n	8007cb4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	617a      	str	r2, [r7, #20]
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007a00:	e7b4      	b.n	800796c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007a02:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	441a      	add	r2, r3
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a10:	2b1f      	cmp	r3, #31
 8007a12:	d801      	bhi.n	8007a18 <create_name+0xcc>
 8007a14:	2304      	movs	r3, #4
 8007a16:	e000      	b.n	8007a1a <create_name+0xce>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007a1e:	e011      	b.n	8007a44 <create_name+0xf8>
		w = lfn[di - 1];
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007a26:	3b01      	subs	r3, #1
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007a32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a34:	2b20      	cmp	r3, #32
 8007a36:	d002      	beq.n	8007a3e <create_name+0xf2>
 8007a38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a3c:	d106      	bne.n	8007a4c <create_name+0x100>
		di--;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1ea      	bne.n	8007a20 <create_name+0xd4>
 8007a4a:	e000      	b.n	8007a4e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007a4c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	2200      	movs	r2, #0
 8007a58:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <create_name+0x118>
 8007a60:	2306      	movs	r3, #6
 8007a62:	e127      	b.n	8007cb4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3324      	adds	r3, #36	; 0x24
 8007a68:	220b      	movs	r2, #11
 8007a6a:	2120      	movs	r1, #32
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fe fc58 	bl	8006322 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007a72:	2300      	movs	r3, #0
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	e002      	b.n	8007a7e <create_name+0x132>
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	4413      	add	r3, r2
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	2b20      	cmp	r3, #32
 8007a8a:	d0f5      	beq.n	8007a78 <create_name+0x12c>
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	2b2e      	cmp	r3, #46	; 0x2e
 8007a98:	d0ee      	beq.n	8007a78 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <create_name+0x168>
 8007aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aa4:	f043 0303 	orr.w	r3, r3, #3
 8007aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007aac:	e002      	b.n	8007ab4 <create_name+0x168>
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <create_name+0x182>
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	2b2e      	cmp	r3, #46	; 0x2e
 8007acc:	d1ef      	bne.n	8007aae <create_name+0x162>

	i = b = 0; ni = 8;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	623b      	str	r3, [r7, #32]
 8007ad8:	2308      	movs	r3, #8
 8007ada:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	61ba      	str	r2, [r7, #24]
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007aec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 8090 	beq.w	8007c14 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d006      	beq.n	8007b08 <create_name+0x1bc>
 8007afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007afc:	2b2e      	cmp	r3, #46	; 0x2e
 8007afe:	d10a      	bne.n	8007b16 <create_name+0x1ca>
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d006      	beq.n	8007b16 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b0c:	f043 0303 	orr.w	r3, r3, #3
 8007b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b14:	e07d      	b.n	8007c12 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007b16:	6a3a      	ldr	r2, [r7, #32]
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d203      	bcs.n	8007b26 <create_name+0x1da>
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d123      	bne.n	8007b6e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	2b0b      	cmp	r3, #11
 8007b2a:	d106      	bne.n	8007b3a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b30:	f043 0303 	orr.w	r3, r3, #3
 8007b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b38:	e075      	b.n	8007c26 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d005      	beq.n	8007b4e <create_name+0x202>
 8007b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b46:	f043 0303 	orr.w	r3, r3, #3
 8007b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d866      	bhi.n	8007c24 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	61bb      	str	r3, [r7, #24]
 8007b5a:	2308      	movs	r3, #8
 8007b5c:	623b      	str	r3, [r7, #32]
 8007b5e:	230b      	movs	r3, #11
 8007b60:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007b62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b6c:	e051      	b.n	8007c12 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b70:	2b7f      	cmp	r3, #127	; 0x7f
 8007b72:	d914      	bls.n	8007b9e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007b74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b76:	2100      	movs	r1, #0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f002 f843 	bl	8009c04 <ff_convert>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <create_name+0x246>
 8007b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b8a:	3b80      	subs	r3, #128	; 0x80
 8007b8c:	4a23      	ldr	r2, [pc, #140]	; (8007c1c <create_name+0x2d0>)
 8007b8e:	5cd3      	ldrb	r3, [r2, r3]
 8007b90:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007b92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b96:	f043 0302 	orr.w	r3, r3, #2
 8007b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <create_name+0x268>
 8007ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	481d      	ldr	r0, [pc, #116]	; (8007c20 <create_name+0x2d4>)
 8007baa:	f7fe fbfc 	bl	80063a6 <chk_chr>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007bb4:	235f      	movs	r3, #95	; 0x5f
 8007bb6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bbc:	f043 0303 	orr.w	r3, r3, #3
 8007bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bc4:	e01b      	b.n	8007bfe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bc8:	2b40      	cmp	r3, #64	; 0x40
 8007bca:	d909      	bls.n	8007be0 <create_name+0x294>
 8007bcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bce:	2b5a      	cmp	r3, #90	; 0x5a
 8007bd0:	d806      	bhi.n	8007be0 <create_name+0x294>
					b |= 2;
 8007bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bd6:	f043 0302 	orr.w	r3, r3, #2
 8007bda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007bde:	e00e      	b.n	8007bfe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007be2:	2b60      	cmp	r3, #96	; 0x60
 8007be4:	d90b      	bls.n	8007bfe <create_name+0x2b2>
 8007be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007be8:	2b7a      	cmp	r3, #122	; 0x7a
 8007bea:	d808      	bhi.n	8007bfe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007bec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bf0:	f043 0301 	orr.w	r3, r3, #1
 8007bf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007bf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bfa:	3b20      	subs	r3, #32
 8007bfc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	623a      	str	r2, [r7, #32]
 8007c04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c06:	b2d1      	uxtb	r1, r2
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	460a      	mov	r2, r1
 8007c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007c12:	e763      	b.n	8007adc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007c14:	bf00      	nop
 8007c16:	e006      	b.n	8007c26 <create_name+0x2da>
 8007c18:	0800b724 	.word	0x0800b724
 8007c1c:	0800b78c 	.word	0x0800b78c
 8007c20:	0800b730 	.word	0x0800b730
			if (si > di) break;			/* No extension */
 8007c24:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c2c:	2be5      	cmp	r3, #229	; 0xe5
 8007c2e:	d103      	bne.n	8007c38 <create_name+0x2ec>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2205      	movs	r2, #5
 8007c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	d104      	bne.n	8007c48 <create_name+0x2fc>
 8007c3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007c48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c4c:	f003 030c 	and.w	r3, r3, #12
 8007c50:	2b0c      	cmp	r3, #12
 8007c52:	d005      	beq.n	8007c60 <create_name+0x314>
 8007c54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c58:	f003 0303 	and.w	r3, r3, #3
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d105      	bne.n	8007c6c <create_name+0x320>
 8007c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c64:	f043 0302 	orr.w	r3, r3, #2
 8007c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d117      	bne.n	8007ca8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007c78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c7c:	f003 0303 	and.w	r3, r3, #3
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d105      	bne.n	8007c90 <create_name+0x344>
 8007c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c88:	f043 0310 	orr.w	r3, r3, #16
 8007c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007c90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c94:	f003 030c 	and.w	r3, r3, #12
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d105      	bne.n	8007ca8 <create_name+0x35c>
 8007c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca0:	f043 0308 	orr.w	r3, r3, #8
 8007ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007cae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007cb2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3728      	adds	r7, #40	; 0x28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007cd0:	e002      	b.n	8007cd8 <follow_path+0x1c>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b2f      	cmp	r3, #47	; 0x2f
 8007cde:	d0f8      	beq.n	8007cd2 <follow_path+0x16>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b5c      	cmp	r3, #92	; 0x5c
 8007ce6:	d0f4      	beq.n	8007cd2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	2200      	movs	r2, #0
 8007cec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b1f      	cmp	r3, #31
 8007cf4:	d80a      	bhi.n	8007d0c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2280      	movs	r2, #128	; 0x80
 8007cfa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007cfe:	2100      	movs	r1, #0
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff f8fd 	bl	8006f00 <dir_sdi>
 8007d06:	4603      	mov	r3, r0
 8007d08:	75fb      	strb	r3, [r7, #23]
 8007d0a:	e048      	b.n	8007d9e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d0c:	463b      	mov	r3, r7
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff fe1b 	bl	800794c <create_name>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d139      	bne.n	8007d94 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff fc5a 	bl	80075da <dir_find>
 8007d26:	4603      	mov	r3, r0
 8007d28:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007d30:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d12c      	bne.n	8007d98 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007d3e:	7afb      	ldrb	r3, [r7, #11]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d127      	bne.n	8007d98 <follow_path+0xdc>
 8007d48:	2305      	movs	r3, #5
 8007d4a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007d4c:	e024      	b.n	8007d98 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d121      	bne.n	8007d9c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	799b      	ldrb	r3, [r3, #6]
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d102      	bne.n	8007d6a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007d64:	2305      	movs	r3, #5
 8007d66:	75fb      	strb	r3, [r7, #23]
 8007d68:	e019      	b.n	8007d9e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	8992      	ldrh	r2, [r2, #12]
 8007d78:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d7c:	fb00 f202 	mul.w	r2, r0, r2
 8007d80:	1a9b      	subs	r3, r3, r2
 8007d82:	440b      	add	r3, r1
 8007d84:	4619      	mov	r1, r3
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff fa60 	bl	800724c <ld_clust>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d92:	e7bb      	b.n	8007d0c <follow_path+0x50>
			if (res != FR_OK) break;
 8007d94:	bf00      	nop
 8007d96:	e002      	b.n	8007d9e <follow_path+0xe2>
				break;
 8007d98:	bf00      	nop
 8007d9a:	e000      	b.n	8007d9e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d9c:	bf00      	nop
			}
		}
	}

	return res;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007db0:	f04f 33ff 	mov.w	r3, #4294967295
 8007db4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d031      	beq.n	8007e22 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	e002      	b.n	8007dcc <get_ldnumber+0x24>
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	2b1f      	cmp	r3, #31
 8007dd2:	d903      	bls.n	8007ddc <get_ldnumber+0x34>
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b3a      	cmp	r3, #58	; 0x3a
 8007dda:	d1f4      	bne.n	8007dc6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b3a      	cmp	r3, #58	; 0x3a
 8007de2:	d11c      	bne.n	8007e1e <get_ldnumber+0x76>
			tp = *path;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	60fa      	str	r2, [r7, #12]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	3b30      	subs	r3, #48	; 0x30
 8007df4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b09      	cmp	r3, #9
 8007dfa:	d80e      	bhi.n	8007e1a <get_ldnumber+0x72>
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d10a      	bne.n	8007e1a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d107      	bne.n	8007e1a <get_ldnumber+0x72>
					vol = (int)i;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	3301      	adds	r3, #1
 8007e12:	617b      	str	r3, [r7, #20]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	e002      	b.n	8007e24 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007e1e:	2300      	movs	r3, #0
 8007e20:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007e22:	693b      	ldr	r3, [r7, #16]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	70da      	strb	r2, [r3, #3]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f04f 32ff 	mov.w	r2, #4294967295
 8007e46:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7fe fc76 	bl	800673c <move_window>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <check_fs+0x2a>
 8007e56:	2304      	movs	r3, #4
 8007e58:	e038      	b.n	8007ecc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3338      	adds	r3, #56	; 0x38
 8007e5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe f9ba 	bl	80061dc <ld_word>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d001      	beq.n	8007e78 <check_fs+0x48>
 8007e74:	2303      	movs	r3, #3
 8007e76:	e029      	b.n	8007ecc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e7e:	2be9      	cmp	r3, #233	; 0xe9
 8007e80:	d009      	beq.n	8007e96 <check_fs+0x66>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e88:	2beb      	cmp	r3, #235	; 0xeb
 8007e8a:	d11e      	bne.n	8007eca <check_fs+0x9a>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007e92:	2b90      	cmp	r3, #144	; 0x90
 8007e94:	d119      	bne.n	8007eca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3338      	adds	r3, #56	; 0x38
 8007e9a:	3336      	adds	r3, #54	; 0x36
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe f9b5 	bl	800620c <ld_dword>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ea8:	4a0a      	ldr	r2, [pc, #40]	; (8007ed4 <check_fs+0xa4>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d101      	bne.n	8007eb2 <check_fs+0x82>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e00c      	b.n	8007ecc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3338      	adds	r3, #56	; 0x38
 8007eb6:	3352      	adds	r3, #82	; 0x52
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe f9a7 	bl	800620c <ld_dword>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	4a05      	ldr	r2, [pc, #20]	; (8007ed8 <check_fs+0xa8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d101      	bne.n	8007eca <check_fs+0x9a>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e000      	b.n	8007ecc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007eca:	2302      	movs	r3, #2
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	00544146 	.word	0x00544146
 8007ed8:	33544146 	.word	0x33544146

08007edc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b096      	sub	sp, #88	; 0x58
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2200      	movs	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f7ff ff59 	bl	8007da8 <get_ldnumber>
 8007ef6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	da01      	bge.n	8007f02 <find_volume+0x26>
 8007efe:	230b      	movs	r3, #11
 8007f00:	e265      	b.n	80083ce <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007f02:	4a9f      	ldr	r2, [pc, #636]	; (8008180 <find_volume+0x2a4>)
 8007f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <find_volume+0x3a>
 8007f12:	230c      	movs	r3, #12
 8007f14:	e25b      	b.n	80083ce <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	f023 0301 	bic.w	r3, r3, #1
 8007f22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01a      	beq.n	8007f62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	785b      	ldrb	r3, [r3, #1]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe f8b5 	bl	80060a0 <disk_status>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007f3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10c      	bne.n	8007f62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007f48:	79fb      	ldrb	r3, [r7, #7]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d007      	beq.n	8007f5e <find_volume+0x82>
 8007f4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f52:	f003 0304 	and.w	r3, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007f5a:	230a      	movs	r3, #10
 8007f5c:	e237      	b.n	80083ce <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e235      	b.n	80083ce <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	2200      	movs	r2, #0
 8007f66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	785b      	ldrb	r3, [r3, #1]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe f8ad 	bl	80060d4 <disk_initialize>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007f80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e21e      	b.n	80083ce <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d007      	beq.n	8007fa6 <find_volume+0xca>
 8007f96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007fa2:	230a      	movs	r3, #10
 8007fa4:	e213      	b.n	80083ce <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	7858      	ldrb	r0, [r3, #1]
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	330c      	adds	r3, #12
 8007fae:	461a      	mov	r2, r3
 8007fb0:	2102      	movs	r1, #2
 8007fb2:	f7fe f8f5 	bl	80061a0 <disk_ioctl>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <find_volume+0xe4>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e206      	b.n	80083ce <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	899b      	ldrh	r3, [r3, #12]
 8007fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc8:	d80d      	bhi.n	8007fe6 <find_volume+0x10a>
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	899b      	ldrh	r3, [r3, #12]
 8007fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd2:	d308      	bcc.n	8007fe6 <find_volume+0x10a>
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	899b      	ldrh	r3, [r3, #12]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fdc:	899b      	ldrh	r3, [r3, #12]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <find_volume+0x10e>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e1f1      	b.n	80083ce <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007fee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ff0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ff2:	f7ff ff1d 	bl	8007e30 <check_fs>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008000:	2b02      	cmp	r3, #2
 8008002:	d149      	bne.n	8008098 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008004:	2300      	movs	r3, #0
 8008006:	643b      	str	r3, [r7, #64]	; 0x40
 8008008:	e01e      	b.n	8008048 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008018:	4413      	add	r3, r2
 800801a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	3304      	adds	r3, #4
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d006      	beq.n	8008034 <find_volume+0x158>
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	3308      	adds	r3, #8
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe f8ee 	bl	800620c <ld_dword>
 8008030:	4602      	mov	r2, r0
 8008032:	e000      	b.n	8008036 <find_volume+0x15a>
 8008034:	2200      	movs	r2, #0
 8008036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	3358      	adds	r3, #88	; 0x58
 800803c:	443b      	add	r3, r7
 800803e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008044:	3301      	adds	r3, #1
 8008046:	643b      	str	r3, [r7, #64]	; 0x40
 8008048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800804a:	2b03      	cmp	r3, #3
 800804c:	d9dd      	bls.n	800800a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800804e:	2300      	movs	r3, #0
 8008050:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <find_volume+0x182>
 8008058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800805a:	3b01      	subs	r3, #1
 800805c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800805e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	3358      	adds	r3, #88	; 0x58
 8008064:	443b      	add	r3, r7
 8008066:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800806a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800806c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <find_volume+0x1a2>
 8008072:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008074:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008076:	f7ff fedb 	bl	8007e30 <check_fs>
 800807a:	4603      	mov	r3, r0
 800807c:	e000      	b.n	8008080 <find_volume+0x1a4>
 800807e:	2303      	movs	r3, #3
 8008080:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008084:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008088:	2b01      	cmp	r3, #1
 800808a:	d905      	bls.n	8008098 <find_volume+0x1bc>
 800808c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800808e:	3301      	adds	r3, #1
 8008090:	643b      	str	r3, [r7, #64]	; 0x40
 8008092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008094:	2b03      	cmp	r3, #3
 8008096:	d9e2      	bls.n	800805e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800809c:	2b04      	cmp	r3, #4
 800809e:	d101      	bne.n	80080a4 <find_volume+0x1c8>
 80080a0:	2301      	movs	r3, #1
 80080a2:	e194      	b.n	80083ce <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80080a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d901      	bls.n	80080b0 <find_volume+0x1d4>
 80080ac:	230d      	movs	r3, #13
 80080ae:	e18e      	b.n	80083ce <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	3338      	adds	r3, #56	; 0x38
 80080b4:	330b      	adds	r3, #11
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe f890 	bl	80061dc <ld_word>
 80080bc:	4603      	mov	r3, r0
 80080be:	461a      	mov	r2, r3
 80080c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c2:	899b      	ldrh	r3, [r3, #12]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d001      	beq.n	80080cc <find_volume+0x1f0>
 80080c8:	230d      	movs	r3, #13
 80080ca:	e180      	b.n	80083ce <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80080cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ce:	3338      	adds	r3, #56	; 0x38
 80080d0:	3316      	adds	r3, #22
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe f882 	bl	80061dc <ld_word>
 80080d8:	4603      	mov	r3, r0
 80080da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80080dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <find_volume+0x214>
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	3338      	adds	r3, #56	; 0x38
 80080e6:	3324      	adds	r3, #36	; 0x24
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fe f88f 	bl	800620c <ld_dword>
 80080ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080f4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80080f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80080fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	789b      	ldrb	r3, [r3, #2]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d005      	beq.n	8008114 <find_volume+0x238>
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	789b      	ldrb	r3, [r3, #2]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d001      	beq.n	8008114 <find_volume+0x238>
 8008110:	230d      	movs	r3, #13
 8008112:	e15c      	b.n	80083ce <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	789b      	ldrb	r3, [r3, #2]
 8008118:	461a      	mov	r2, r3
 800811a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800811c:	fb02 f303 	mul.w	r3, r2, r3
 8008120:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008128:	b29a      	uxth	r2, r3
 800812a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800812e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008130:	895b      	ldrh	r3, [r3, #10]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d008      	beq.n	8008148 <find_volume+0x26c>
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	895b      	ldrh	r3, [r3, #10]
 800813a:	461a      	mov	r2, r3
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	895b      	ldrh	r3, [r3, #10]
 8008140:	3b01      	subs	r3, #1
 8008142:	4013      	ands	r3, r2
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <find_volume+0x270>
 8008148:	230d      	movs	r3, #13
 800814a:	e140      	b.n	80083ce <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	3338      	adds	r3, #56	; 0x38
 8008150:	3311      	adds	r3, #17
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe f842 	bl	80061dc <ld_word>
 8008158:	4603      	mov	r3, r0
 800815a:	461a      	mov	r2, r3
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	891b      	ldrh	r3, [r3, #8]
 8008164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008166:	8992      	ldrh	r2, [r2, #12]
 8008168:	0952      	lsrs	r2, r2, #5
 800816a:	b292      	uxth	r2, r2
 800816c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008170:	fb01 f202 	mul.w	r2, r1, r2
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	b29b      	uxth	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <find_volume+0x2a8>
 800817c:	230d      	movs	r3, #13
 800817e:	e126      	b.n	80083ce <find_volume+0x4f2>
 8008180:	20006558 	.word	0x20006558

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	3338      	adds	r3, #56	; 0x38
 8008188:	3313      	adds	r3, #19
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe f826 	bl	80061dc <ld_word>
 8008190:	4603      	mov	r3, r0
 8008192:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008196:	2b00      	cmp	r3, #0
 8008198:	d106      	bne.n	80081a8 <find_volume+0x2cc>
 800819a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819c:	3338      	adds	r3, #56	; 0x38
 800819e:	3320      	adds	r3, #32
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe f833 	bl	800620c <ld_dword>
 80081a6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	3338      	adds	r3, #56	; 0x38
 80081ac:	330e      	adds	r3, #14
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe f814 	bl	80061dc <ld_word>
 80081b4:	4603      	mov	r3, r0
 80081b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80081b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <find_volume+0x2e6>
 80081be:	230d      	movs	r3, #13
 80081c0:	e105      	b.n	80083ce <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80081c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80081c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c6:	4413      	add	r3, r2
 80081c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ca:	8911      	ldrh	r1, [r2, #8]
 80081cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ce:	8992      	ldrh	r2, [r2, #12]
 80081d0:	0952      	lsrs	r2, r2, #5
 80081d2:	b292      	uxth	r2, r2
 80081d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80081d8:	b292      	uxth	r2, r2
 80081da:	4413      	add	r3, r2
 80081dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80081de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d201      	bcs.n	80081ea <find_volume+0x30e>
 80081e6:	230d      	movs	r3, #13
 80081e8:	e0f1      	b.n	80083ce <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80081ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081f2:	8952      	ldrh	r2, [r2, #10]
 80081f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <find_volume+0x328>
 8008200:	230d      	movs	r3, #13
 8008202:	e0e4      	b.n	80083ce <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008204:	2303      	movs	r3, #3
 8008206:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008210:	4293      	cmp	r3, r2
 8008212:	d802      	bhi.n	800821a <find_volume+0x33e>
 8008214:	2302      	movs	r3, #2
 8008216:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008220:	4293      	cmp	r3, r2
 8008222:	d802      	bhi.n	800822a <find_volume+0x34e>
 8008224:	2301      	movs	r3, #1
 8008226:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	1c9a      	adds	r2, r3, #2
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008236:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008238:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800823a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800823c:	441a      	add	r2, r3
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008242:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	441a      	add	r2, r3
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800824c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008250:	2b03      	cmp	r3, #3
 8008252:	d11e      	bne.n	8008292 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	3338      	adds	r3, #56	; 0x38
 8008258:	332a      	adds	r3, #42	; 0x2a
 800825a:	4618      	mov	r0, r3
 800825c:	f7fd ffbe 	bl	80061dc <ld_word>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <find_volume+0x38e>
 8008266:	230d      	movs	r3, #13
 8008268:	e0b1      	b.n	80083ce <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	891b      	ldrh	r3, [r3, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <find_volume+0x39a>
 8008272:	230d      	movs	r3, #13
 8008274:	e0ab      	b.n	80083ce <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	3338      	adds	r3, #56	; 0x38
 800827a:	332c      	adds	r3, #44	; 0x2c
 800827c:	4618      	mov	r0, r3
 800827e:	f7fd ffc5 	bl	800620c <ld_dword>
 8008282:	4602      	mov	r2, r0
 8008284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008286:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	647b      	str	r3, [r7, #68]	; 0x44
 8008290:	e01f      	b.n	80082d2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008294:	891b      	ldrh	r3, [r3, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <find_volume+0x3c2>
 800829a:	230d      	movs	r3, #13
 800829c:	e097      	b.n	80083ce <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800829e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a4:	441a      	add	r2, r3
 80082a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80082aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d103      	bne.n	80082ba <find_volume+0x3de>
 80082b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	e00a      	b.n	80082d0 <find_volume+0x3f4>
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	69da      	ldr	r2, [r3, #28]
 80082be:	4613      	mov	r3, r2
 80082c0:	005b      	lsls	r3, r3, #1
 80082c2:	4413      	add	r3, r2
 80082c4:	085a      	lsrs	r2, r3, #1
 80082c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80082d0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	6a1a      	ldr	r2, [r3, #32]
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	899b      	ldrh	r3, [r3, #12]
 80082da:	4619      	mov	r1, r3
 80082dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082de:	440b      	add	r3, r1
 80082e0:	3b01      	subs	r3, #1
 80082e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082e4:	8989      	ldrh	r1, [r1, #12]
 80082e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d201      	bcs.n	80082f2 <find_volume+0x416>
 80082ee:	230d      	movs	r3, #13
 80082f0:	e06d      	b.n	80083ce <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	f04f 32ff 	mov.w	r2, #4294967295
 80082f8:	619a      	str	r2, [r3, #24]
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	699a      	ldr	r2, [r3, #24]
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008304:	2280      	movs	r2, #128	; 0x80
 8008306:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800830c:	2b03      	cmp	r3, #3
 800830e:	d149      	bne.n	80083a4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	3338      	adds	r3, #56	; 0x38
 8008314:	3330      	adds	r3, #48	; 0x30
 8008316:	4618      	mov	r0, r3
 8008318:	f7fd ff60 	bl	80061dc <ld_word>
 800831c:	4603      	mov	r3, r0
 800831e:	2b01      	cmp	r3, #1
 8008320:	d140      	bne.n	80083a4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008324:	3301      	adds	r3, #1
 8008326:	4619      	mov	r1, r3
 8008328:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800832a:	f7fe fa07 	bl	800673c <move_window>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d137      	bne.n	80083a4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	2200      	movs	r2, #0
 8008338:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	3338      	adds	r3, #56	; 0x38
 800833e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008342:	4618      	mov	r0, r3
 8008344:	f7fd ff4a 	bl	80061dc <ld_word>
 8008348:	4603      	mov	r3, r0
 800834a:	461a      	mov	r2, r3
 800834c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008350:	429a      	cmp	r2, r3
 8008352:	d127      	bne.n	80083a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	3338      	adds	r3, #56	; 0x38
 8008358:	4618      	mov	r0, r3
 800835a:	f7fd ff57 	bl	800620c <ld_dword>
 800835e:	4603      	mov	r3, r0
 8008360:	4a1d      	ldr	r2, [pc, #116]	; (80083d8 <find_volume+0x4fc>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d11e      	bne.n	80083a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	3338      	adds	r3, #56	; 0x38
 800836a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800836e:	4618      	mov	r0, r3
 8008370:	f7fd ff4c 	bl	800620c <ld_dword>
 8008374:	4603      	mov	r3, r0
 8008376:	4a19      	ldr	r2, [pc, #100]	; (80083dc <find_volume+0x500>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d113      	bne.n	80083a4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	3338      	adds	r3, #56	; 0x38
 8008380:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008384:	4618      	mov	r0, r3
 8008386:	f7fd ff41 	bl	800620c <ld_dword>
 800838a:	4602      	mov	r2, r0
 800838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	3338      	adds	r3, #56	; 0x38
 8008394:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008398:	4618      	mov	r0, r3
 800839a:	f7fd ff37 	bl	800620c <ld_dword>
 800839e:	4602      	mov	r2, r0
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80083aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80083ac:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <find_volume+0x504>)
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	4b0a      	ldr	r3, [pc, #40]	; (80083e0 <find_volume+0x504>)
 80083b6:	801a      	strh	r2, [r3, #0]
 80083b8:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <find_volume+0x504>)
 80083ba:	881a      	ldrh	r2, [r3, #0]
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <find_volume+0x508>)
 80083c4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80083c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083c8:	f7fe f950 	bl	800666c <clear_lock>
#endif
	return FR_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3758      	adds	r7, #88	; 0x58
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	41615252 	.word	0x41615252
 80083dc:	61417272 	.word	0x61417272
 80083e0:	2000655c 	.word	0x2000655c
 80083e4:	20006580 	.word	0x20006580

080083e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80083f2:	2309      	movs	r3, #9
 80083f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01c      	beq.n	8008436 <validate+0x4e>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d018      	beq.n	8008436 <validate+0x4e>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d013      	beq.n	8008436 <validate+0x4e>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	889a      	ldrh	r2, [r3, #4]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	88db      	ldrh	r3, [r3, #6]
 8008418:	429a      	cmp	r2, r3
 800841a:	d10c      	bne.n	8008436 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	785b      	ldrb	r3, [r3, #1]
 8008422:	4618      	mov	r0, r3
 8008424:	f7fd fe3c 	bl	80060a0 <disk_status>
 8008428:	4603      	mov	r3, r0
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <validate+0x4e>
			res = FR_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d102      	bne.n	8008442 <validate+0x5a>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	e000      	b.n	8008444 <validate+0x5c>
 8008442:	2300      	movs	r3, #0
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	6013      	str	r3, [r2, #0]
	return res;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	4613      	mov	r3, r2
 8008460:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008466:	f107 0310 	add.w	r3, r7, #16
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff fc9c 	bl	8007da8 <get_ldnumber>
 8008470:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	2b00      	cmp	r3, #0
 8008476:	da01      	bge.n	800847c <f_mount+0x28>
 8008478:	230b      	movs	r3, #11
 800847a:	e02b      	b.n	80084d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800847c:	4a17      	ldr	r2, [pc, #92]	; (80084dc <f_mount+0x88>)
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008484:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d005      	beq.n	8008498 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800848c:	69b8      	ldr	r0, [r7, #24]
 800848e:	f7fe f8ed 	bl	800666c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	2200      	movs	r2, #0
 8008496:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	490d      	ldr	r1, [pc, #52]	; (80084dc <f_mount+0x88>)
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <f_mount+0x66>
 80084b4:	79fb      	ldrb	r3, [r7, #7]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d001      	beq.n	80084be <f_mount+0x6a>
 80084ba:	2300      	movs	r3, #0
 80084bc:	e00a      	b.n	80084d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80084be:	f107 010c 	add.w	r1, r7, #12
 80084c2:	f107 0308 	add.w	r3, r7, #8
 80084c6:	2200      	movs	r2, #0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7ff fd07 	bl	8007edc <find_volume>
 80084ce:	4603      	mov	r3, r0
 80084d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3720      	adds	r7, #32
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20006558 	.word	0x20006558

080084e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b09a      	sub	sp, #104	; 0x68
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	4613      	mov	r3, r2
 80084ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <f_open+0x18>
 80084f4:	2309      	movs	r3, #9
 80084f6:	e1bb      	b.n	8008870 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008500:	79fa      	ldrb	r2, [r7, #7]
 8008502:	f107 0114 	add.w	r1, r7, #20
 8008506:	f107 0308 	add.w	r3, r7, #8
 800850a:	4618      	mov	r0, r3
 800850c:	f7ff fce6 	bl	8007edc <find_volume>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008516:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800851a:	2b00      	cmp	r3, #0
 800851c:	f040 819f 	bne.w	800885e <f_open+0x37e>
		dj.obj.fs = fs;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	f107 0318 	add.w	r3, r7, #24
 800852a:	4611      	mov	r1, r2
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff fbc5 	bl	8007cbc <follow_path>
 8008532:	4603      	mov	r3, r0
 8008534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008538:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800853c:	2b00      	cmp	r3, #0
 800853e:	d11a      	bne.n	8008576 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008540:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008544:	b25b      	sxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	da03      	bge.n	8008552 <f_open+0x72>
				res = FR_INVALID_NAME;
 800854a:	2306      	movs	r3, #6
 800854c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008550:	e011      	b.n	8008576 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	f023 0301 	bic.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	bf14      	ite	ne
 800855c:	2301      	movne	r3, #1
 800855e:	2300      	moveq	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	461a      	mov	r2, r3
 8008564:	f107 0318 	add.w	r3, r7, #24
 8008568:	4611      	mov	r1, r2
 800856a:	4618      	mov	r0, r3
 800856c:	f7fd ff36 	bl	80063dc <chk_lock>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	f003 031c 	and.w	r3, r3, #28
 800857c:	2b00      	cmp	r3, #0
 800857e:	d07f      	beq.n	8008680 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008580:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008584:	2b00      	cmp	r3, #0
 8008586:	d017      	beq.n	80085b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008588:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800858c:	2b04      	cmp	r3, #4
 800858e:	d10e      	bne.n	80085ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008590:	f7fd ff80 	bl	8006494 <enq_lock>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d006      	beq.n	80085a8 <f_open+0xc8>
 800859a:	f107 0318 	add.w	r3, r7, #24
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff f8dc 	bl	800775c <dir_register>
 80085a4:	4603      	mov	r3, r0
 80085a6:	e000      	b.n	80085aa <f_open+0xca>
 80085a8:	2312      	movs	r3, #18
 80085aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80085ae:	79fb      	ldrb	r3, [r7, #7]
 80085b0:	f043 0308 	orr.w	r3, r3, #8
 80085b4:	71fb      	strb	r3, [r7, #7]
 80085b6:	e010      	b.n	80085da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80085b8:	7fbb      	ldrb	r3, [r7, #30]
 80085ba:	f003 0311 	and.w	r3, r3, #17
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <f_open+0xea>
					res = FR_DENIED;
 80085c2:	2307      	movs	r3, #7
 80085c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80085c8:	e007      	b.n	80085da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <f_open+0xfa>
 80085d4:	2308      	movs	r3, #8
 80085d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80085da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d168      	bne.n	80086b4 <f_open+0x1d4>
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	f003 0308 	and.w	r3, r3, #8
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d063      	beq.n	80086b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80085ec:	f7fd fcf6 	bl	8005fdc <get_fattime>
 80085f0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	330e      	adds	r3, #14
 80085f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fd fe45 	bl	8006288 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	3316      	adds	r3, #22
 8008602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008604:	4618      	mov	r0, r3
 8008606:	f7fd fe3f 	bl	8006288 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860c:	330b      	adds	r3, #11
 800860e:	2220      	movs	r2, #32
 8008610:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008616:	4611      	mov	r1, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fe17 	bl	800724c <ld_clust>
 800861e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008624:	2200      	movs	r2, #0
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe fe2f 	bl	800728a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	331c      	adds	r3, #28
 8008630:	2100      	movs	r1, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f7fd fe28 	bl	8006288 <st_dword>
					fs->wflag = 1;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2201      	movs	r2, #1
 800863c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800863e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008640:	2b00      	cmp	r3, #0
 8008642:	d037      	beq.n	80086b4 <f_open+0x1d4>
						dw = fs->winsect;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008648:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800864a:	f107 0318 	add.w	r3, r7, #24
 800864e:	2200      	movs	r2, #0
 8008650:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fb1f 	bl	8006c96 <remove_chain>
 8008658:	4603      	mov	r3, r0
 800865a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800865e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008662:	2b00      	cmp	r3, #0
 8008664:	d126      	bne.n	80086b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe f866 	bl	800673c <move_window>
 8008670:	4603      	mov	r3, r0
 8008672:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800867a:	3a01      	subs	r2, #1
 800867c:	615a      	str	r2, [r3, #20]
 800867e:	e019      	b.n	80086b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008680:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008684:	2b00      	cmp	r3, #0
 8008686:	d115      	bne.n	80086b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008688:	7fbb      	ldrb	r3, [r7, #30]
 800868a:	f003 0310 	and.w	r3, r3, #16
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008692:	2304      	movs	r3, #4
 8008694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008698:	e00c      	b.n	80086b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <f_open+0x1d4>
 80086a4:	7fbb      	ldrb	r3, [r7, #30]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <f_open+0x1d4>
						res = FR_DENIED;
 80086ae:	2307      	movs	r3, #7
 80086b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80086b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d128      	bne.n	800870e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80086bc:	79fb      	ldrb	r3, [r7, #7]
 80086be:	f003 0308 	and.w	r3, r3, #8
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80086c6:	79fb      	ldrb	r3, [r7, #7]
 80086c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80086d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bf14      	ite	ne
 80086e6:	2301      	movne	r3, #1
 80086e8:	2300      	moveq	r3, #0
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	461a      	mov	r2, r3
 80086ee:	f107 0318 	add.w	r3, r7, #24
 80086f2:	4611      	mov	r1, r2
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fd feef 	bl	80064d8 <inc_lock>
 80086fa:	4602      	mov	r2, r0
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d102      	bne.n	800870e <f_open+0x22e>
 8008708:	2302      	movs	r3, #2
 800870a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800870e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008712:	2b00      	cmp	r3, #0
 8008714:	f040 80a3 	bne.w	800885e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800871c:	4611      	mov	r1, r2
 800871e:	4618      	mov	r0, r3
 8008720:	f7fe fd94 	bl	800724c <ld_clust>
 8008724:	4602      	mov	r2, r0
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	331c      	adds	r3, #28
 800872e:	4618      	mov	r0, r3
 8008730:	f7fd fd6c 	bl	800620c <ld_dword>
 8008734:	4602      	mov	r2, r0
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	88da      	ldrh	r2, [r3, #6]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	79fa      	ldrb	r2, [r7, #7]
 8008752:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	3330      	adds	r3, #48	; 0x30
 800876a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800876e:	2100      	movs	r1, #0
 8008770:	4618      	mov	r0, r3
 8008772:	f7fd fdd6 	bl	8006322 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008776:	79fb      	ldrb	r3, [r7, #7]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b00      	cmp	r3, #0
 800877e:	d06e      	beq.n	800885e <f_open+0x37e>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d06a      	beq.n	800885e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	895b      	ldrh	r3, [r3, #10]
 8008794:	461a      	mov	r2, r3
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	899b      	ldrh	r3, [r3, #12]
 800879a:	fb02 f303 	mul.w	r3, r2, r3
 800879e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087ac:	e016      	b.n	80087dc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe f87f 	bl	80068b6 <get_fat>
 80087b8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80087ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d802      	bhi.n	80087c6 <f_open+0x2e6>
 80087c0:	2302      	movs	r3, #2
 80087c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80087c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087cc:	d102      	bne.n	80087d4 <f_open+0x2f4>
 80087ce:	2301      	movs	r3, #1
 80087d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d103      	bne.n	80087ec <f_open+0x30c>
 80087e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d8e0      	bhi.n	80087ae <f_open+0x2ce>
				}
				fp->clust = clst;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087f0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80087f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d131      	bne.n	800885e <f_open+0x37e>
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	899b      	ldrh	r3, [r3, #12]
 80087fe:	461a      	mov	r2, r3
 8008800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008802:	fbb3 f1f2 	udiv	r1, r3, r2
 8008806:	fb01 f202 	mul.w	r2, r1, r2
 800880a:	1a9b      	subs	r3, r3, r2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d026      	beq.n	800885e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008814:	4618      	mov	r0, r3
 8008816:	f7fe f82f 	bl	8006878 <clust2sect>
 800881a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800881c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800881e:	2b00      	cmp	r3, #0
 8008820:	d103      	bne.n	800882a <f_open+0x34a>
						res = FR_INT_ERR;
 8008822:	2302      	movs	r3, #2
 8008824:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008828:	e019      	b.n	800885e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	899b      	ldrh	r3, [r3, #12]
 800882e:	461a      	mov	r2, r3
 8008830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008832:	fbb3 f2f2 	udiv	r2, r3, r2
 8008836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008838:	441a      	add	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	7858      	ldrb	r0, [r3, #1]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6a1a      	ldr	r2, [r3, #32]
 800884c:	2301      	movs	r3, #1
 800884e:	f7fd fc67 	bl	8006120 <disk_read>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <f_open+0x37e>
 8008858:	2301      	movs	r3, #1
 800885a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800885e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008862:	2b00      	cmp	r3, #0
 8008864:	d002      	beq.n	800886c <f_open+0x38c>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800886c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008870:	4618      	mov	r0, r3
 8008872:	3768      	adds	r7, #104	; 0x68
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08e      	sub	sp, #56	; 0x38
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f107 0214 	add.w	r2, r7, #20
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff fda5 	bl	80083e8 <validate>
 800889e:	4603      	mov	r3, r0
 80088a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80088a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d107      	bne.n	80088bc <f_read+0x44>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	7d5b      	ldrb	r3, [r3, #21]
 80088b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <f_read+0x4a>
 80088bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80088c0:	e135      	b.n	8008b2e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	7d1b      	ldrb	r3, [r3, #20]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <f_read+0x5a>
 80088ce:	2307      	movs	r3, #7
 80088d0:	e12d      	b.n	8008b2e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	f240 811e 	bls.w	8008b24 <f_read+0x2ac>
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80088ec:	e11a      	b.n	8008b24 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	8992      	ldrh	r2, [r2, #12]
 80088f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80088fa:	fb01 f202 	mul.w	r2, r1, r2
 80088fe:	1a9b      	subs	r3, r3, r2
 8008900:	2b00      	cmp	r3, #0
 8008902:	f040 80d5 	bne.w	8008ab0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	697a      	ldr	r2, [r7, #20]
 800890c:	8992      	ldrh	r2, [r2, #12]
 800890e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	8952      	ldrh	r2, [r2, #10]
 8008916:	3a01      	subs	r2, #1
 8008918:	4013      	ands	r3, r2
 800891a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d12f      	bne.n	8008982 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d103      	bne.n	8008932 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	633b      	str	r3, [r7, #48]	; 0x30
 8008930:	e013      	b.n	800895a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008936:	2b00      	cmp	r3, #0
 8008938:	d007      	beq.n	800894a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	4619      	mov	r1, r3
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f7fe faa5 	bl	8006e90 <clmt_clust>
 8008946:	6338      	str	r0, [r7, #48]	; 0x30
 8008948:	e007      	b.n	800895a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	4619      	mov	r1, r3
 8008952:	4610      	mov	r0, r2
 8008954:	f7fd ffaf 	bl	80068b6 <get_fat>
 8008958:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895c:	2b01      	cmp	r3, #1
 800895e:	d804      	bhi.n	800896a <f_read+0xf2>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2202      	movs	r2, #2
 8008964:	755a      	strb	r2, [r3, #21]
 8008966:	2302      	movs	r3, #2
 8008968:	e0e1      	b.n	8008b2e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008970:	d104      	bne.n	800897c <f_read+0x104>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2201      	movs	r2, #1
 8008976:	755a      	strb	r2, [r3, #21]
 8008978:	2301      	movs	r3, #1
 800897a:	e0d8      	b.n	8008b2e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008980:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	4619      	mov	r1, r3
 800898a:	4610      	mov	r0, r2
 800898c:	f7fd ff74 	bl	8006878 <clust2sect>
 8008990:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d104      	bne.n	80089a2 <f_read+0x12a>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2202      	movs	r2, #2
 800899c:	755a      	strb	r2, [r3, #21]
 800899e:	2302      	movs	r3, #2
 80089a0:	e0c5      	b.n	8008b2e <f_read+0x2b6>
			sect += csect;
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	4413      	add	r3, r2
 80089a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	899b      	ldrh	r3, [r3, #12]
 80089ae:	461a      	mov	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80089b6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d041      	beq.n	8008a42 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80089be:	69fa      	ldr	r2, [r7, #28]
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	4413      	add	r3, r2
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	8952      	ldrh	r2, [r2, #10]
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d905      	bls.n	80089d8 <f_read+0x160>
					cc = fs->csize - csect;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	895b      	ldrh	r3, [r3, #10]
 80089d0:	461a      	mov	r2, r3
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	7858      	ldrb	r0, [r3, #1]
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089e2:	f7fd fb9d 	bl	8006120 <disk_read>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d004      	beq.n	80089f6 <f_read+0x17e>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2201      	movs	r2, #1
 80089f0:	755a      	strb	r2, [r3, #21]
 80089f2:	2301      	movs	r3, #1
 80089f4:	e09b      	b.n	8008b2e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	7d1b      	ldrb	r3, [r3, #20]
 80089fa:	b25b      	sxtb	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	da18      	bge.n	8008a32 <f_read+0x1ba>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6a1a      	ldr	r2, [r3, #32]
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d911      	bls.n	8008a32 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a1a      	ldr	r2, [r3, #32]
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	8992      	ldrh	r2, [r2, #12]
 8008a1a:	fb02 f303 	mul.w	r3, r2, r3
 8008a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a20:	18d0      	adds	r0, r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	899b      	ldrh	r3, [r3, #12]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	f7fd fc57 	bl	80062e0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	899b      	ldrh	r3, [r3, #12]
 8008a36:	461a      	mov	r2, r3
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	fb02 f303 	mul.w	r3, r2, r3
 8008a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008a40:	e05c      	b.n	8008afc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d02e      	beq.n	8008aaa <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	7d1b      	ldrb	r3, [r3, #20]
 8008a50:	b25b      	sxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	da18      	bge.n	8008a88 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	7858      	ldrb	r0, [r3, #1]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6a1a      	ldr	r2, [r3, #32]
 8008a64:	2301      	movs	r3, #1
 8008a66:	f7fd fb7b 	bl	8006160 <disk_write>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d004      	beq.n	8008a7a <f_read+0x202>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	755a      	strb	r2, [r3, #21]
 8008a76:	2301      	movs	r3, #1
 8008a78:	e059      	b.n	8008b2e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	7d1b      	ldrb	r3, [r3, #20]
 8008a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	7858      	ldrb	r0, [r3, #1]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a92:	2301      	movs	r3, #1
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	f7fd fb43 	bl	8006120 <disk_read>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d004      	beq.n	8008aaa <f_read+0x232>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	755a      	strb	r2, [r3, #21]
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e041      	b.n	8008b2e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	899b      	ldrh	r3, [r3, #12]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	8992      	ldrh	r2, [r2, #12]
 8008abe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ac2:	fb01 f202 	mul.w	r2, r1, r2
 8008ac6:	1a9b      	subs	r3, r3, r2
 8008ac8:	1ac3      	subs	r3, r0, r3
 8008aca:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d901      	bls.n	8008ad8 <f_read+0x260>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	8992      	ldrh	r2, [r2, #12]
 8008ae6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008aea:	fb00 f202 	mul.w	r2, r0, r2
 8008aee:	1a9b      	subs	r3, r3, r2
 8008af0:	440b      	add	r3, r1
 8008af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008af4:	4619      	mov	r1, r3
 8008af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008af8:	f7fd fbf2 	bl	80062e0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b00:	4413      	add	r3, r2
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	699a      	ldr	r2, [r3, #24]
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	441a      	add	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	619a      	str	r2, [r3, #24]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	441a      	add	r2, r3
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f47f aee1 	bne.w	80088ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3738      	adds	r7, #56	; 0x38
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b08c      	sub	sp, #48	; 0x30
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	60b9      	str	r1, [r7, #8]
 8008b40:	607a      	str	r2, [r7, #4]
 8008b42:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f107 0210 	add.w	r2, r7, #16
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff fc46 	bl	80083e8 <validate>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d107      	bne.n	8008b7a <f_write+0x44>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	7d5b      	ldrb	r3, [r3, #21]
 8008b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <f_write+0x4a>
 8008b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b7e:	e16a      	b.n	8008e56 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	7d1b      	ldrb	r3, [r3, #20]
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <f_write+0x5a>
 8008b8c:	2307      	movs	r3, #7
 8008b8e:	e162      	b.n	8008e56 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	699a      	ldr	r2, [r3, #24]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	441a      	add	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	f080 814c 	bcs.w	8008e3a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	43db      	mvns	r3, r3
 8008ba8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008baa:	e146      	b.n	8008e3a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	8992      	ldrh	r2, [r2, #12]
 8008bb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bb8:	fb01 f202 	mul.w	r2, r1, r2
 8008bbc:	1a9b      	subs	r3, r3, r2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f040 80f1 	bne.w	8008da6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	8992      	ldrh	r2, [r2, #12]
 8008bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	8952      	ldrh	r2, [r2, #10]
 8008bd4:	3a01      	subs	r2, #1
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d143      	bne.n	8008c68 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10c      	bne.n	8008c02 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d11a      	bne.n	8008c2a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe f8b1 	bl	8006d60 <create_chain>
 8008bfe:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c00:	e013      	b.n	8008c2a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d007      	beq.n	8008c1a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f7fe f93d 	bl	8006e90 <clmt_clust>
 8008c16:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c18:	e007      	b.n	8008c2a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	4619      	mov	r1, r3
 8008c22:	4610      	mov	r0, r2
 8008c24:	f7fe f89c 	bl	8006d60 <create_chain>
 8008c28:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 8109 	beq.w	8008e44 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d104      	bne.n	8008c42 <f_write+0x10c>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	755a      	strb	r2, [r3, #21]
 8008c3e:	2302      	movs	r3, #2
 8008c40:	e109      	b.n	8008e56 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c48:	d104      	bne.n	8008c54 <f_write+0x11e>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	755a      	strb	r2, [r3, #21]
 8008c50:	2301      	movs	r3, #1
 8008c52:	e100      	b.n	8008e56 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c58:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <f_write+0x132>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c66:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	7d1b      	ldrb	r3, [r3, #20]
 8008c6c:	b25b      	sxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	da18      	bge.n	8008ca4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	7858      	ldrb	r0, [r3, #1]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a1a      	ldr	r2, [r3, #32]
 8008c80:	2301      	movs	r3, #1
 8008c82:	f7fd fa6d 	bl	8006160 <disk_write>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d004      	beq.n	8008c96 <f_write+0x160>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	755a      	strb	r2, [r3, #21]
 8008c92:	2301      	movs	r3, #1
 8008c94:	e0df      	b.n	8008e56 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	7d1b      	ldrb	r3, [r3, #20]
 8008c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	4619      	mov	r1, r3
 8008cac:	4610      	mov	r0, r2
 8008cae:	f7fd fde3 	bl	8006878 <clust2sect>
 8008cb2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d104      	bne.n	8008cc4 <f_write+0x18e>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	755a      	strb	r2, [r3, #21]
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	e0c8      	b.n	8008e56 <f_write+0x320>
			sect += csect;
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	4413      	add	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	899b      	ldrh	r3, [r3, #12]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cd8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d043      	beq.n	8008d68 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	6a3b      	ldr	r3, [r7, #32]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	8952      	ldrh	r2, [r2, #10]
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d905      	bls.n	8008cfa <f_write+0x1c4>
					cc = fs->csize - csect;
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	895b      	ldrh	r3, [r3, #10]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	7858      	ldrb	r0, [r3, #1]
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	69f9      	ldr	r1, [r7, #28]
 8008d04:	f7fd fa2c 	bl	8006160 <disk_write>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d004      	beq.n	8008d18 <f_write+0x1e2>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	755a      	strb	r2, [r3, #21]
 8008d14:	2301      	movs	r3, #1
 8008d16:	e09e      	b.n	8008e56 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6a1a      	ldr	r2, [r3, #32]
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	6a3a      	ldr	r2, [r7, #32]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d918      	bls.n	8008d58 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6a1a      	ldr	r2, [r3, #32]
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	8992      	ldrh	r2, [r2, #12]
 8008d38:	fb02 f303 	mul.w	r3, r2, r3
 8008d3c:	69fa      	ldr	r2, [r7, #28]
 8008d3e:	18d1      	adds	r1, r2, r3
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	899b      	ldrh	r3, [r3, #12]
 8008d44:	461a      	mov	r2, r3
 8008d46:	f7fd facb 	bl	80062e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	7d1b      	ldrb	r3, [r3, #20]
 8008d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	899b      	ldrh	r3, [r3, #12]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	fb02 f303 	mul.w	r3, r2, r3
 8008d64:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008d66:	e04b      	b.n	8008e00 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d016      	beq.n	8008da0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	699a      	ldr	r2, [r3, #24]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d210      	bcs.n	8008da0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	7858      	ldrb	r0, [r3, #1]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d88:	2301      	movs	r3, #1
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	f7fd f9c8 	bl	8006120 <disk_read>
 8008d90:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d004      	beq.n	8008da0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	755a      	strb	r2, [r3, #21]
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e05a      	b.n	8008e56 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	899b      	ldrh	r3, [r3, #12]
 8008daa:	4618      	mov	r0, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	8992      	ldrh	r2, [r2, #12]
 8008db4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008db8:	fb01 f202 	mul.w	r2, r1, r2
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	1ac3      	subs	r3, r0, r3
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d901      	bls.n	8008dce <f_write+0x298>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	8992      	ldrh	r2, [r2, #12]
 8008ddc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008de0:	fb00 f202 	mul.w	r2, r0, r2
 8008de4:	1a9b      	subs	r3, r3, r2
 8008de6:	440b      	add	r3, r1
 8008de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dea:	69f9      	ldr	r1, [r7, #28]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fd fa77 	bl	80062e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	7d1b      	ldrb	r3, [r3, #20]
 8008df6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e00:	69fa      	ldr	r2, [r7, #28]
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	4413      	add	r3, r2
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	699a      	ldr	r2, [r3, #24]
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	441a      	add	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	619a      	str	r2, [r3, #24]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	68da      	ldr	r2, [r3, #12]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	bf38      	it	cc
 8008e20:	461a      	movcc	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	60da      	str	r2, [r3, #12]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	441a      	add	r2, r3
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f47f aeb5 	bne.w	8008bac <f_write+0x76>
 8008e42:	e000      	b.n	8008e46 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008e44:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	7d1b      	ldrb	r3, [r3, #20]
 8008e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3730      	adds	r7, #48	; 0x30
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b086      	sub	sp, #24
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f107 0208 	add.w	r2, r7, #8
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff faba 	bl	80083e8 <validate>
 8008e74:	4603      	mov	r3, r0
 8008e76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d168      	bne.n	8008f50 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	7d1b      	ldrb	r3, [r3, #20]
 8008e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d062      	beq.n	8008f50 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7d1b      	ldrb	r3, [r3, #20]
 8008e8e:	b25b      	sxtb	r3, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	da15      	bge.n	8008ec0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	7858      	ldrb	r0, [r3, #1]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1a      	ldr	r2, [r3, #32]
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	f7fd f95c 	bl	8006160 <disk_write>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <f_sync+0x54>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e04f      	b.n	8008f52 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	7d1b      	ldrb	r3, [r3, #20]
 8008eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ec0:	f7fd f88c 	bl	8005fdc <get_fattime>
 8008ec4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	f7fd fc34 	bl	800673c <move_window>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d138      	bne.n	8008f50 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	330b      	adds	r3, #11
 8008ee8:	781a      	ldrb	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	330b      	adds	r3, #11
 8008eee:	f042 0220 	orr.w	r2, r2, #32
 8008ef2:	b2d2      	uxtb	r2, r2
 8008ef4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	461a      	mov	r2, r3
 8008f00:	68f9      	ldr	r1, [r7, #12]
 8008f02:	f7fe f9c2 	bl	800728a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f103 021c 	add.w	r2, r3, #28
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	4619      	mov	r1, r3
 8008f12:	4610      	mov	r0, r2
 8008f14:	f7fd f9b8 	bl	8006288 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3316      	adds	r3, #22
 8008f1c:	6939      	ldr	r1, [r7, #16]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fd f9b2 	bl	8006288 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3312      	adds	r3, #18
 8008f28:	2100      	movs	r1, #0
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fd f991 	bl	8006252 <st_word>
					fs->wflag = 1;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2201      	movs	r2, #1
 8008f34:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fd fc2d 	bl	8006798 <sync_fs>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	7d1b      	ldrb	r3, [r3, #20]
 8008f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff ff7b 	bl	8008e5e <f_sync>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d118      	bne.n	8008fa4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f107 0208 	add.w	r2, r7, #8
 8008f78:	4611      	mov	r1, r2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff fa34 	bl	80083e8 <validate>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10c      	bne.n	8008fa4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fd fb30 	bl	80065f4 <dec_lock>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d102      	bne.n	8008fa4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b090      	sub	sp, #64	; 0x40
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f107 0208 	add.w	r2, r7, #8
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7ff fa11 	bl	80083e8 <validate>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008fcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <f_lseek+0x2e>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	7d5b      	ldrb	r3, [r3, #21]
 8008fd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008fdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <f_lseek+0x3c>
 8008fe4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008fe8:	e201      	b.n	80093ee <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 80d9 	beq.w	80091a6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffa:	d15a      	bne.n	80090b2 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	1d1a      	adds	r2, r3, #4
 8009006:	627a      	str	r2, [r7, #36]	; 0x24
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	617b      	str	r3, [r7, #20]
 800900c:	2302      	movs	r3, #2
 800900e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	2b00      	cmp	r3, #0
 800901a:	d03a      	beq.n	8009092 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	613b      	str	r3, [r7, #16]
 8009020:	2300      	movs	r3, #0
 8009022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	3302      	adds	r3, #2
 8009028:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	60fb      	str	r3, [r7, #12]
 800902e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009030:	3301      	adds	r3, #1
 8009032:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009038:	4618      	mov	r0, r3
 800903a:	f7fd fc3c 	bl	80068b6 <get_fat>
 800903e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	2b01      	cmp	r3, #1
 8009044:	d804      	bhi.n	8009050 <f_lseek+0xa2>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2202      	movs	r2, #2
 800904a:	755a      	strb	r2, [r3, #21]
 800904c:	2302      	movs	r3, #2
 800904e:	e1ce      	b.n	80093ee <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009056:	d104      	bne.n	8009062 <f_lseek+0xb4>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	755a      	strb	r2, [r3, #21]
 800905e:	2301      	movs	r3, #1
 8009060:	e1c5      	b.n	80093ee <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3301      	adds	r3, #1
 8009066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009068:	429a      	cmp	r2, r3
 800906a:	d0de      	beq.n	800902a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800906c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	429a      	cmp	r2, r3
 8009072:	d809      	bhi.n	8009088 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	1d1a      	adds	r2, r3, #4
 8009078:	627a      	str	r2, [r7, #36]	; 0x24
 800907a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	1d1a      	adds	r2, r3, #4
 8009082:	627a      	str	r2, [r7, #36]	; 0x24
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	69db      	ldr	r3, [r3, #28]
 800908c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800908e:	429a      	cmp	r2, r3
 8009090:	d3c4      	bcc.n	800901c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009098:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800909a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d803      	bhi.n	80090aa <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	e19f      	b.n	80093ea <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80090aa:	2311      	movs	r3, #17
 80090ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80090b0:	e19b      	b.n	80093ea <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d902      	bls.n	80090c2 <f_lseek+0x114>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 818d 	beq.w	80093ea <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7fd feda 	bl	8006e90 <clmt_clust>
 80090dc:	4602      	mov	r2, r0
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	4619      	mov	r1, r3
 80090ea:	4610      	mov	r0, r2
 80090ec:	f7fd fbc4 	bl	8006878 <clust2sect>
 80090f0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d104      	bne.n	8009102 <f_lseek+0x154>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	755a      	strb	r2, [r3, #21]
 80090fe:	2302      	movs	r3, #2
 8009100:	e175      	b.n	80093ee <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	3b01      	subs	r3, #1
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	8992      	ldrh	r2, [r2, #12]
 800910a:	fbb3 f3f2 	udiv	r3, r3, r2
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	8952      	ldrh	r2, [r2, #10]
 8009112:	3a01      	subs	r2, #1
 8009114:	4013      	ands	r3, r2
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	4413      	add	r3, r2
 800911a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	8992      	ldrh	r2, [r2, #12]
 8009124:	fbb3 f1f2 	udiv	r1, r3, r2
 8009128:	fb01 f202 	mul.w	r2, r1, r2
 800912c:	1a9b      	subs	r3, r3, r2
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 815b 	beq.w	80093ea <f_lseek+0x43c>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	69ba      	ldr	r2, [r7, #24]
 800913a:	429a      	cmp	r2, r3
 800913c:	f000 8155 	beq.w	80093ea <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	7d1b      	ldrb	r3, [r3, #20]
 8009144:	b25b      	sxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	da18      	bge.n	800917c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	7858      	ldrb	r0, [r3, #1]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a1a      	ldr	r2, [r3, #32]
 8009158:	2301      	movs	r3, #1
 800915a:	f7fd f801 	bl	8006160 <disk_write>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d004      	beq.n	800916e <f_lseek+0x1c0>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	755a      	strb	r2, [r3, #21]
 800916a:	2301      	movs	r3, #1
 800916c:	e13f      	b.n	80093ee <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	7d1b      	ldrb	r3, [r3, #20]
 8009172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009176:	b2da      	uxtb	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	7858      	ldrb	r0, [r3, #1]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009186:	2301      	movs	r3, #1
 8009188:	69ba      	ldr	r2, [r7, #24]
 800918a:	f7fc ffc9 	bl	8006120 <disk_read>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d004      	beq.n	800919e <f_lseek+0x1f0>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	755a      	strb	r2, [r3, #21]
 800919a:	2301      	movs	r3, #1
 800919c:	e127      	b.n	80093ee <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	69ba      	ldr	r2, [r7, #24]
 80091a2:	621a      	str	r2, [r3, #32]
 80091a4:	e121      	b.n	80093ea <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d908      	bls.n	80091c2 <f_lseek+0x214>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	7d1b      	ldrb	r3, [r3, #20]
 80091b4:	f003 0302 	and.w	r3, r3, #2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d102      	bne.n	80091c2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	637b      	str	r3, [r7, #52]	; 0x34
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 80b5 	beq.w	8009344 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	895b      	ldrh	r3, [r3, #10]
 80091de:	461a      	mov	r2, r3
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	899b      	ldrh	r3, [r3, #12]
 80091e4:	fb02 f303 	mul.w	r3, r2, r3
 80091e8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01b      	beq.n	8009228 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	1e5a      	subs	r2, r3, #1
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	1e59      	subs	r1, r3, #1
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009204:	429a      	cmp	r2, r3
 8009206:	d30f      	bcc.n	8009228 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	1e5a      	subs	r2, r3, #1
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	425b      	negs	r3, r3
 8009210:	401a      	ands	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	63bb      	str	r3, [r7, #56]	; 0x38
 8009226:	e022      	b.n	800926e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800922e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009230:	2b00      	cmp	r3, #0
 8009232:	d119      	bne.n	8009268 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f7fd fd91 	bl	8006d60 <create_chain>
 800923e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	2b01      	cmp	r3, #1
 8009244:	d104      	bne.n	8009250 <f_lseek+0x2a2>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2202      	movs	r2, #2
 800924a:	755a      	strb	r2, [r3, #21]
 800924c:	2302      	movs	r3, #2
 800924e:	e0ce      	b.n	80093ee <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009256:	d104      	bne.n	8009262 <f_lseek+0x2b4>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	755a      	strb	r2, [r3, #21]
 800925e:	2301      	movs	r3, #1
 8009260:	e0c5      	b.n	80093ee <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009266:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800926c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009270:	2b00      	cmp	r3, #0
 8009272:	d067      	beq.n	8009344 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8009274:	e03a      	b.n	80092ec <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	603b      	str	r3, [r7, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	441a      	add	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	7d1b      	ldrb	r3, [r3, #20]
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00b      	beq.n	80092ae <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800929a:	4618      	mov	r0, r3
 800929c:	f7fd fd60 	bl	8006d60 <create_chain>
 80092a0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80092a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d108      	bne.n	80092ba <f_lseek+0x30c>
							ofs = 0; break;
 80092a8:	2300      	movs	r3, #0
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	e022      	b.n	80092f4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fd faff 	bl	80068b6 <get_fat>
 80092b8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c0:	d104      	bne.n	80092cc <f_lseek+0x31e>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	755a      	strb	r2, [r3, #21]
 80092c8:	2301      	movs	r3, #1
 80092ca:	e090      	b.n	80093ee <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d904      	bls.n	80092dc <f_lseek+0x32e>
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092d8:	429a      	cmp	r2, r3
 80092da:	d304      	bcc.n	80092e6 <f_lseek+0x338>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2202      	movs	r2, #2
 80092e0:	755a      	strb	r2, [r3, #21]
 80092e2:	2302      	movs	r3, #2
 80092e4:	e083      	b.n	80093ee <f_lseek+0x440>
					fp->clust = clst;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ea:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d8c0      	bhi.n	8009276 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	699a      	ldr	r2, [r3, #24]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	441a      	add	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	899b      	ldrh	r3, [r3, #12]
 8009304:	461a      	mov	r2, r3
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	fbb3 f1f2 	udiv	r1, r3, r2
 800930c:	fb01 f202 	mul.w	r2, r1, r2
 8009310:	1a9b      	subs	r3, r3, r2
 8009312:	2b00      	cmp	r3, #0
 8009314:	d016      	beq.n	8009344 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800931a:	4618      	mov	r0, r3
 800931c:	f7fd faac 	bl	8006878 <clust2sect>
 8009320:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009324:	2b00      	cmp	r3, #0
 8009326:	d104      	bne.n	8009332 <f_lseek+0x384>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	755a      	strb	r2, [r3, #21]
 800932e:	2302      	movs	r3, #2
 8009330:	e05d      	b.n	80093ee <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	899b      	ldrh	r3, [r3, #12]
 8009336:	461a      	mov	r2, r3
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	fbb3 f3f2 	udiv	r3, r3, r2
 800933e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009340:	4413      	add	r3, r2
 8009342:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	699a      	ldr	r2, [r3, #24]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	429a      	cmp	r2, r3
 800934e:	d90a      	bls.n	8009366 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	699a      	ldr	r2, [r3, #24]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	7d1b      	ldrb	r3, [r3, #20]
 800935c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009360:	b2da      	uxtb	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	8992      	ldrh	r2, [r2, #12]
 800936e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009372:	fb01 f202 	mul.w	r2, r1, r2
 8009376:	1a9b      	subs	r3, r3, r2
 8009378:	2b00      	cmp	r3, #0
 800937a:	d036      	beq.n	80093ea <f_lseek+0x43c>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009382:	429a      	cmp	r2, r3
 8009384:	d031      	beq.n	80093ea <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7d1b      	ldrb	r3, [r3, #20]
 800938a:	b25b      	sxtb	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	da18      	bge.n	80093c2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	7858      	ldrb	r0, [r3, #1]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1a      	ldr	r2, [r3, #32]
 800939e:	2301      	movs	r3, #1
 80093a0:	f7fc fede 	bl	8006160 <disk_write>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d004      	beq.n	80093b4 <f_lseek+0x406>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	755a      	strb	r2, [r3, #21]
 80093b0:	2301      	movs	r3, #1
 80093b2:	e01c      	b.n	80093ee <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	7d1b      	ldrb	r3, [r3, #20]
 80093b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	7858      	ldrb	r0, [r3, #1]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093cc:	2301      	movs	r3, #1
 80093ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093d0:	f7fc fea6 	bl	8006120 <disk_read>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d004      	beq.n	80093e4 <f_lseek+0x436>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	755a      	strb	r2, [r3, #21]
 80093e0:	2301      	movs	r3, #1
 80093e2:	e004      	b.n	80093ee <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80093ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3740      	adds	r7, #64	; 0x40
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b092      	sub	sp, #72	; 0x48
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009402:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009406:	f107 030c 	add.w	r3, r7, #12
 800940a:	2200      	movs	r2, #0
 800940c:	4618      	mov	r0, r3
 800940e:	f7fe fd65 	bl	8007edc <find_volume>
 8009412:	4603      	mov	r3, r0
 8009414:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009418:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800941c:	2b00      	cmp	r3, #0
 800941e:	f040 8099 	bne.w	8009554 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	699a      	ldr	r2, [r3, #24]
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	3b02      	subs	r3, #2
 8009432:	429a      	cmp	r2, r3
 8009434:	d804      	bhi.n	8009440 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009438:	699a      	ldr	r2, [r3, #24]
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	e089      	b.n	8009554 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d128      	bne.n	800949e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800944c:	2302      	movs	r3, #2
 800944e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009452:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009454:	f107 0314 	add.w	r3, r7, #20
 8009458:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800945a:	4618      	mov	r0, r3
 800945c:	f7fd fa2b 	bl	80068b6 <get_fat>
 8009460:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009468:	d103      	bne.n	8009472 <f_getfree+0x7c>
 800946a:	2301      	movs	r3, #1
 800946c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009470:	e063      	b.n	800953a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009474:	2b01      	cmp	r3, #1
 8009476:	d103      	bne.n	8009480 <f_getfree+0x8a>
 8009478:	2302      	movs	r3, #2
 800947a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800947e:	e05c      	b.n	800953a <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009482:	2b00      	cmp	r3, #0
 8009484:	d102      	bne.n	800948c <f_getfree+0x96>
 8009486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009488:	3301      	adds	r3, #1
 800948a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800948c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948e:	3301      	adds	r3, #1
 8009490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009498:	429a      	cmp	r2, r3
 800949a:	d3db      	bcc.n	8009454 <f_getfree+0x5e>
 800949c:	e04d      	b.n	800953a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800949e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a8:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
 80094ae:	2300      	movs	r3, #0
 80094b0:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80094b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d113      	bne.n	80094e0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80094b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	63ba      	str	r2, [r7, #56]	; 0x38
 80094c0:	4619      	mov	r1, r3
 80094c2:	f7fd f93b 	bl	800673c <move_window>
 80094c6:	4603      	mov	r3, r0
 80094c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80094cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d131      	bne.n	8009538 <f_getfree+0x142>
							p = fs->win;
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	3338      	adds	r3, #56	; 0x38
 80094d8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80094da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094dc:	899b      	ldrh	r3, [r3, #12]
 80094de:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d10f      	bne.n	8009508 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80094e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ea:	f7fc fe77 	bl	80061dc <ld_word>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d102      	bne.n	80094fa <f_getfree+0x104>
 80094f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f6:	3301      	adds	r3, #1
 80094f8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	3302      	adds	r3, #2
 80094fe:	633b      	str	r3, [r7, #48]	; 0x30
 8009500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009502:	3b02      	subs	r3, #2
 8009504:	637b      	str	r3, [r7, #52]	; 0x34
 8009506:	e010      	b.n	800952a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800950a:	f7fc fe7f 	bl	800620c <ld_dword>
 800950e:	4603      	mov	r3, r0
 8009510:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d102      	bne.n	800951e <f_getfree+0x128>
 8009518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800951a:	3301      	adds	r3, #1
 800951c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	3304      	adds	r3, #4
 8009522:	633b      	str	r3, [r7, #48]	; 0x30
 8009524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009526:	3b04      	subs	r3, #4
 8009528:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800952a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800952c:	3b01      	subs	r3, #1
 800952e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1bd      	bne.n	80094b2 <f_getfree+0xbc>
 8009536:	e000      	b.n	800953a <f_getfree+0x144>
							if (res != FR_OK) break;
 8009538:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800953e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009544:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	791a      	ldrb	r2, [r3, #4]
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	f042 0201 	orr.w	r2, r2, #1
 8009550:	b2d2      	uxtb	r2, r2
 8009552:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009554:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009558:	4618      	mov	r0, r3
 800955a:	3748      	adds	r7, #72	; 0x48
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b088      	sub	sp, #32
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800956c:	2300      	movs	r3, #0
 800956e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009574:	e01b      	b.n	80095ae <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009576:	f107 0310 	add.w	r3, r7, #16
 800957a:	f107 0114 	add.w	r1, r7, #20
 800957e:	2201      	movs	r2, #1
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7ff f979 	bl	8008878 <f_read>
		if (rc != 1) break;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d116      	bne.n	80095ba <f_gets+0x5a>
		c = s[0];
 800958c:	7d3b      	ldrb	r3, [r7, #20]
 800958e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	2b0d      	cmp	r3, #13
 8009594:	d100      	bne.n	8009598 <f_gets+0x38>
 8009596:	e00a      	b.n	80095ae <f_gets+0x4e>
		*p++ = c;
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	61ba      	str	r2, [r7, #24]
 800959e:	7dfa      	ldrb	r2, [r7, #23]
 80095a0:	701a      	strb	r2, [r3, #0]
		n++;
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	3301      	adds	r3, #1
 80095a6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	2b0a      	cmp	r3, #10
 80095ac:	d007      	beq.n	80095be <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	69fa      	ldr	r2, [r7, #28]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	dbde      	blt.n	8009576 <f_gets+0x16>
 80095b8:	e002      	b.n	80095c0 <f_gets+0x60>
		if (rc != 1) break;
 80095ba:	bf00      	nop
 80095bc:	e000      	b.n	80095c0 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80095be:	bf00      	nop
	}
	*p = 0;
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	2200      	movs	r2, #0
 80095c4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <f_gets+0x70>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	e000      	b.n	80095d2 <f_gets+0x72>
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3720      	adds	r7, #32
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	2b0a      	cmp	r3, #10
 80095ea:	d103      	bne.n	80095f4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80095ec:	210d      	movs	r1, #13
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff fff3 	bl	80095da <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	db25      	blt.n	800964c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	60fa      	str	r2, [r7, #12]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	4413      	add	r3, r2
 800960a:	78fa      	ldrb	r2, [r7, #3]
 800960c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b3c      	cmp	r3, #60	; 0x3c
 8009612:	dd12      	ble.n	800963a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6818      	ldr	r0, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f103 010c 	add.w	r1, r3, #12
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	f107 0308 	add.w	r3, r7, #8
 8009624:	f7ff fa87 	bl	8008b36 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	429a      	cmp	r2, r3
 800962e:	d101      	bne.n	8009634 <putc_bfd+0x5a>
 8009630:	2300      	movs	r3, #0
 8009632:	e001      	b.n	8009638 <putc_bfd+0x5e>
 8009634:	f04f 33ff 	mov.w	r3, #4294967295
 8009638:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	609a      	str	r2, [r3, #8]
 800964a:	e000      	b.n	800964e <putc_bfd+0x74>
	if (i < 0) return;
 800964c:	bf00      	nop
}
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	db16      	blt.n	8009692 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6818      	ldr	r0, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f103 010c 	add.w	r1, r3, #12
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	461a      	mov	r2, r3
 8009674:	f107 030c 	add.w	r3, r7, #12
 8009678:	f7ff fa5d 	bl	8008b36 <f_write>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d107      	bne.n	8009692 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	4293      	cmp	r3, r2
 800968a:	d102      	bne.n	8009692 <putc_flush+0x3e>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	e001      	b.n	8009696 <putc_flush+0x42>
	return EOF;
 8009692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	605a      	str	r2, [r3, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	609a      	str	r2, [r3, #8]
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b096      	sub	sp, #88	; 0x58
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80096d2:	f107 030c 	add.w	r3, r7, #12
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	4618      	mov	r0, r3
 80096da:	f7ff ffe0 	bl	800969e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80096de:	e009      	b.n	80096f4 <f_puts+0x2c>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	607a      	str	r2, [r7, #4]
 80096e6:	781a      	ldrb	r2, [r3, #0]
 80096e8:	f107 030c 	add.w	r3, r7, #12
 80096ec:	4611      	mov	r1, r2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7ff ff73 	bl	80095da <putc_bfd>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1f1      	bne.n	80096e0 <f_puts+0x18>
	return putc_flush(&pb);
 80096fc:	f107 030c 	add.w	r3, r7, #12
 8009700:	4618      	mov	r0, r3
 8009702:	f7ff ffa7 	bl	8009654 <putc_flush>
 8009706:	4603      	mov	r3, r0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3758      	adds	r7, #88	; 0x58
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8009710:	b40e      	push	{r1, r2, r3}
 8009712:	b580      	push	{r7, lr}
 8009714:	b0a7      	sub	sp, #156	; 0x9c
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800971a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800971e:	6879      	ldr	r1, [r7, #4]
 8009720:	4618      	mov	r0, r3
 8009722:	f7ff ffbc 	bl	800969e <putc_init>

	va_start(arp, fmt);
 8009726:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800972a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800972c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800973c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 81f2 	beq.w	8009b2a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8009746:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800974a:	2b25      	cmp	r3, #37	; 0x25
 800974c:	d008      	beq.n	8009760 <f_printf+0x50>
			putc_bfd(&pb, c);
 800974e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009756:	4611      	mov	r1, r2
 8009758:	4618      	mov	r0, r3
 800975a:	f7ff ff3e 	bl	80095da <putc_bfd>
			continue;
 800975e:	e1e3      	b.n	8009b28 <f_printf+0x418>
		}
		w = f = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009766:	2300      	movs	r3, #0
 8009768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800976c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800977c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009780:	2b30      	cmp	r3, #48	; 0x30
 8009782:	d10b      	bne.n	800979c <f_printf+0x8c>
			f = 1; c = *fmt++;
 8009784:	2301      	movs	r3, #1
 8009786:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800978a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800979a:	e024      	b.n	80097e6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800979c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80097a0:	2b2d      	cmp	r3, #45	; 0x2d
 80097a2:	d120      	bne.n	80097e6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80097a4:	2302      	movs	r3, #2
 80097a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80097aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097ae:	1c5a      	adds	r2, r3, #1
 80097b0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80097ba:	e014      	b.n	80097e6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80097bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	461a      	mov	r2, r3
 80097ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80097ce:	4413      	add	r3, r2
 80097d0:	3b30      	subs	r3, #48	; 0x30
 80097d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80097d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097da:	1c5a      	adds	r2, r3, #1
 80097dc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 80097e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80097ea:	2b2f      	cmp	r3, #47	; 0x2f
 80097ec:	d903      	bls.n	80097f6 <f_printf+0xe6>
 80097ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80097f2:	2b39      	cmp	r3, #57	; 0x39
 80097f4:	d9e2      	bls.n	80097bc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80097f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80097fa:	2b6c      	cmp	r3, #108	; 0x6c
 80097fc:	d003      	beq.n	8009806 <f_printf+0xf6>
 80097fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009802:	2b4c      	cmp	r3, #76	; 0x4c
 8009804:	d10d      	bne.n	8009822 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8009806:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800980a:	f043 0304 	orr.w	r3, r3, #4
 800980e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009816:	1c5a      	adds	r2, r3, #1
 8009818:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8009822:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 8181 	beq.w	8009b2e <f_printf+0x41e>
		d = c;
 800982c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009830:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8009834:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009838:	2b60      	cmp	r3, #96	; 0x60
 800983a:	d908      	bls.n	800984e <f_printf+0x13e>
 800983c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009840:	2b7a      	cmp	r3, #122	; 0x7a
 8009842:	d804      	bhi.n	800984e <f_printf+0x13e>
 8009844:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009848:	3b20      	subs	r3, #32
 800984a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800984e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009852:	3b42      	subs	r3, #66	; 0x42
 8009854:	2b16      	cmp	r3, #22
 8009856:	f200 8098 	bhi.w	800998a <f_printf+0x27a>
 800985a:	a201      	add	r2, pc, #4	; (adr r2, 8009860 <f_printf+0x150>)
 800985c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009860:	0800996b 	.word	0x0800996b
 8009864:	08009953 	.word	0x08009953
 8009868:	0800997b 	.word	0x0800997b
 800986c:	0800998b 	.word	0x0800998b
 8009870:	0800998b 	.word	0x0800998b
 8009874:	0800998b 	.word	0x0800998b
 8009878:	0800998b 	.word	0x0800998b
 800987c:	0800998b 	.word	0x0800998b
 8009880:	0800998b 	.word	0x0800998b
 8009884:	0800998b 	.word	0x0800998b
 8009888:	0800998b 	.word	0x0800998b
 800988c:	0800998b 	.word	0x0800998b
 8009890:	0800998b 	.word	0x0800998b
 8009894:	08009973 	.word	0x08009973
 8009898:	0800998b 	.word	0x0800998b
 800989c:	0800998b 	.word	0x0800998b
 80098a0:	0800998b 	.word	0x0800998b
 80098a4:	080098bd 	.word	0x080098bd
 80098a8:	0800998b 	.word	0x0800998b
 80098ac:	0800997b 	.word	0x0800997b
 80098b0:	0800998b 	.word	0x0800998b
 80098b4:	0800998b 	.word	0x0800998b
 80098b8:	08009983 	.word	0x08009983
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80098bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098be:	1d1a      	adds	r2, r3, #4
 80098c0:	67ba      	str	r2, [r7, #120]	; 0x78
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 80098c6:	2300      	movs	r3, #0
 80098c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80098cc:	e004      	b.n	80098d8 <f_printf+0x1c8>
 80098ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098d2:	3301      	adds	r3, #1
 80098d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80098d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80098da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098de:	4413      	add	r3, r2
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1f3      	bne.n	80098ce <f_printf+0x1be>
			if (!(f & 2)) {
 80098e6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80098ea:	f003 0302 	and.w	r3, r3, #2
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d11a      	bne.n	8009928 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80098f2:	e005      	b.n	8009900 <f_printf+0x1f0>
 80098f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098f8:	2120      	movs	r1, #32
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff fe6d 	bl	80095da <putc_bfd>
 8009900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800990a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800990e:	429a      	cmp	r2, r3
 8009910:	d8f0      	bhi.n	80098f4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8009912:	e009      	b.n	8009928 <f_printf+0x218>
 8009914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	67fa      	str	r2, [r7, #124]	; 0x7c
 800991a:	781a      	ldrb	r2, [r3, #0]
 800991c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009920:	4611      	mov	r1, r2
 8009922:	4618      	mov	r0, r3
 8009924:	f7ff fe59 	bl	80095da <putc_bfd>
 8009928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1f1      	bne.n	8009914 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8009930:	e005      	b.n	800993e <f_printf+0x22e>
 8009932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009936:	2120      	movs	r1, #32
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fe4e 	bl	80095da <putc_bfd>
 800993e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009948:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800994c:	429a      	cmp	r2, r3
 800994e:	d8f0      	bhi.n	8009932 <f_printf+0x222>
			continue;
 8009950:	e0ea      	b.n	8009b28 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8009952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009954:	1d1a      	adds	r2, r3, #4
 8009956:	67ba      	str	r2, [r7, #120]	; 0x78
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	b2da      	uxtb	r2, r3
 800995c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009960:	4611      	mov	r1, r2
 8009962:	4618      	mov	r0, r3
 8009964:	f7ff fe39 	bl	80095da <putc_bfd>
 8009968:	e0de      	b.n	8009b28 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800996a:	2302      	movs	r3, #2
 800996c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009970:	e014      	b.n	800999c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8009972:	2308      	movs	r3, #8
 8009974:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009978:	e010      	b.n	800999c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800997a:	230a      	movs	r3, #10
 800997c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009980:	e00c      	b.n	800999c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8009982:	2310      	movs	r3, #16
 8009984:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009988:	e008      	b.n	800999c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800998a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800998e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009992:	4611      	mov	r1, r2
 8009994:	4618      	mov	r0, r3
 8009996:	f7ff fe20 	bl	80095da <putc_bfd>
 800999a:	e0c5      	b.n	8009b28 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800999c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80099a0:	f003 0304 	and.w	r3, r3, #4
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d004      	beq.n	80099b2 <f_printf+0x2a2>
 80099a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099aa:	1d1a      	adds	r2, r3, #4
 80099ac:	67ba      	str	r2, [r7, #120]	; 0x78
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	e00c      	b.n	80099cc <f_printf+0x2bc>
 80099b2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80099b6:	2b44      	cmp	r3, #68	; 0x44
 80099b8:	d104      	bne.n	80099c4 <f_printf+0x2b4>
 80099ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099bc:	1d1a      	adds	r2, r3, #4
 80099be:	67ba      	str	r2, [r7, #120]	; 0x78
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	e003      	b.n	80099cc <f_printf+0x2bc>
 80099c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099c6:	1d1a      	adds	r2, r3, #4
 80099c8:	67ba      	str	r2, [r7, #120]	; 0x78
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80099d0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80099d4:	2b44      	cmp	r3, #68	; 0x44
 80099d6:	d10e      	bne.n	80099f6 <f_printf+0x2e6>
 80099d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099dc:	2b00      	cmp	r3, #0
 80099de:	da0a      	bge.n	80099f6 <f_printf+0x2e6>
			v = 0 - v;
 80099e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099e4:	425b      	negs	r3, r3
 80099e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 80099ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80099ee:	f043 0308 	orr.w	r3, r3, #8
 80099f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80099f6:	2300      	movs	r3, #0
 80099f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80099fc:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8009a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a08:	fb01 f202 	mul.w	r2, r1, r2
 8009a0c:	1a9b      	subs	r3, r3, r2
 8009a0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8009a12:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8009a16:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8009a22:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009a26:	2b09      	cmp	r3, #9
 8009a28:	d90b      	bls.n	8009a42 <f_printf+0x332>
 8009a2a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009a2e:	2b78      	cmp	r3, #120	; 0x78
 8009a30:	d101      	bne.n	8009a36 <f_printf+0x326>
 8009a32:	2227      	movs	r2, #39	; 0x27
 8009a34:	e000      	b.n	8009a38 <f_printf+0x328>
 8009a36:	2207      	movs	r2, #7
 8009a38:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8009a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009a4c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009a50:	3230      	adds	r2, #48	; 0x30
 8009a52:	b2d2      	uxtb	r2, r2
 8009a54:	3398      	adds	r3, #152	; 0x98
 8009a56:	443b      	add	r3, r7
 8009a58:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8009a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d003      	beq.n	8009a6c <f_printf+0x35c>
 8009a64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a68:	2b1f      	cmp	r3, #31
 8009a6a:	d9c7      	bls.n	80099fc <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8009a6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009a70:	f003 0308 	and.w	r3, r3, #8
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d009      	beq.n	8009a8c <f_printf+0x37c>
 8009a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a7c:	1c5a      	adds	r2, r3, #1
 8009a7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009a82:	3398      	adds	r3, #152	; 0x98
 8009a84:	443b      	add	r3, r7
 8009a86:	222d      	movs	r2, #45	; 0x2d
 8009a88:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8009a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009a94:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <f_printf+0x394>
 8009aa0:	2330      	movs	r3, #48	; 0x30
 8009aa2:	e000      	b.n	8009aa6 <f_printf+0x396>
 8009aa4:	2320      	movs	r3, #32
 8009aa6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8009aaa:	e007      	b.n	8009abc <f_printf+0x3ac>
 8009aac:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff fd8f 	bl	80095da <putc_bfd>
 8009abc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009ac0:	f003 0302 	and.w	r3, r3, #2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d108      	bne.n	8009ada <f_printf+0x3ca>
 8009ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ad2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d8e8      	bhi.n	8009aac <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8009ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ae4:	f107 020c 	add.w	r2, r7, #12
 8009ae8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009aec:	4413      	add	r3, r2
 8009aee:	781a      	ldrb	r2, [r3, #0]
 8009af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009af4:	4611      	mov	r1, r2
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7ff fd6f 	bl	80095da <putc_bfd>
		} while (i);
 8009afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1ea      	bne.n	8009ada <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8009b04:	e007      	b.n	8009b16 <f_printf+0x406>
 8009b06:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7ff fd62 	bl	80095da <putc_bfd>
 8009b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b1a:	1c5a      	adds	r2, r3, #1
 8009b1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b20:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d8ee      	bhi.n	8009b06 <f_printf+0x3f6>
		c = *fmt++;
 8009b28:	e600      	b.n	800972c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8009b2a:	bf00      	nop
 8009b2c:	e000      	b.n	8009b30 <f_printf+0x420>
		if (!c) break;
 8009b2e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8009b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7ff fd8d 	bl	8009654 <putc_flush>
 8009b3a:	4603      	mov	r3, r0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	379c      	adds	r7, #156	; 0x9c
 8009b40:	46bd      	mov	sp, r7
 8009b42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b46:	b003      	add	sp, #12
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop

08009b4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	4613      	mov	r3, r2
 8009b58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009b62:	4b1f      	ldr	r3, [pc, #124]	; (8009be0 <FATFS_LinkDriverEx+0x94>)
 8009b64:	7a5b      	ldrb	r3, [r3, #9]
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d131      	bne.n	8009bd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009b6c:	4b1c      	ldr	r3, [pc, #112]	; (8009be0 <FATFS_LinkDriverEx+0x94>)
 8009b6e:	7a5b      	ldrb	r3, [r3, #9]
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	461a      	mov	r2, r3
 8009b74:	4b1a      	ldr	r3, [pc, #104]	; (8009be0 <FATFS_LinkDriverEx+0x94>)
 8009b76:	2100      	movs	r1, #0
 8009b78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009b7a:	4b19      	ldr	r3, [pc, #100]	; (8009be0 <FATFS_LinkDriverEx+0x94>)
 8009b7c:	7a5b      	ldrb	r3, [r3, #9]
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	4a17      	ldr	r2, [pc, #92]	; (8009be0 <FATFS_LinkDriverEx+0x94>)
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009b8a:	4b15      	ldr	r3, [pc, #84]	; (8009be0 <FATFS_LinkDriverEx+0x94>)
 8009b8c:	7a5b      	ldrb	r3, [r3, #9]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	461a      	mov	r2, r3
 8009b92:	4b13      	ldr	r3, [pc, #76]	; (8009be0 <FATFS_LinkDriverEx+0x94>)
 8009b94:	4413      	add	r3, r2
 8009b96:	79fa      	ldrb	r2, [r7, #7]
 8009b98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009b9a:	4b11      	ldr	r3, [pc, #68]	; (8009be0 <FATFS_LinkDriverEx+0x94>)
 8009b9c:	7a5b      	ldrb	r3, [r3, #9]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	b2d1      	uxtb	r1, r2
 8009ba4:	4a0e      	ldr	r2, [pc, #56]	; (8009be0 <FATFS_LinkDriverEx+0x94>)
 8009ba6:	7251      	strb	r1, [r2, #9]
 8009ba8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009baa:	7dbb      	ldrb	r3, [r7, #22]
 8009bac:	3330      	adds	r3, #48	; 0x30
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	223a      	movs	r2, #58	; 0x3a
 8009bba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	3302      	adds	r3, #2
 8009bc0:	222f      	movs	r2, #47	; 0x2f
 8009bc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	3303      	adds	r3, #3
 8009bc8:	2200      	movs	r2, #0
 8009bca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	371c      	adds	r7, #28
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	20006780 	.word	0x20006780

08009be4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009bee:	2200      	movs	r2, #0
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7ff ffaa 	bl	8009b4c <FATFS_LinkDriverEx>
 8009bf8:	4603      	mov	r3, r0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	6039      	str	r1, [r7, #0]
 8009c0e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009c10:	88fb      	ldrh	r3, [r7, #6]
 8009c12:	2b7f      	cmp	r3, #127	; 0x7f
 8009c14:	d802      	bhi.n	8009c1c <ff_convert+0x18>
		c = chr;
 8009c16:	88fb      	ldrh	r3, [r7, #6]
 8009c18:	81fb      	strh	r3, [r7, #14]
 8009c1a:	e025      	b.n	8009c68 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00b      	beq.n	8009c3a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009c22:	88fb      	ldrh	r3, [r7, #6]
 8009c24:	2bff      	cmp	r3, #255	; 0xff
 8009c26:	d805      	bhi.n	8009c34 <ff_convert+0x30>
 8009c28:	88fb      	ldrh	r3, [r7, #6]
 8009c2a:	3b80      	subs	r3, #128	; 0x80
 8009c2c:	4a12      	ldr	r2, [pc, #72]	; (8009c78 <ff_convert+0x74>)
 8009c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c32:	e000      	b.n	8009c36 <ff_convert+0x32>
 8009c34:	2300      	movs	r3, #0
 8009c36:	81fb      	strh	r3, [r7, #14]
 8009c38:	e016      	b.n	8009c68 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	81fb      	strh	r3, [r7, #14]
 8009c3e:	e009      	b.n	8009c54 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009c40:	89fb      	ldrh	r3, [r7, #14]
 8009c42:	4a0d      	ldr	r2, [pc, #52]	; (8009c78 <ff_convert+0x74>)
 8009c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c48:	88fa      	ldrh	r2, [r7, #6]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d006      	beq.n	8009c5c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009c4e:	89fb      	ldrh	r3, [r7, #14]
 8009c50:	3301      	adds	r3, #1
 8009c52:	81fb      	strh	r3, [r7, #14]
 8009c54:	89fb      	ldrh	r3, [r7, #14]
 8009c56:	2b7f      	cmp	r3, #127	; 0x7f
 8009c58:	d9f2      	bls.n	8009c40 <ff_convert+0x3c>
 8009c5a:	e000      	b.n	8009c5e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009c5c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009c5e:	89fb      	ldrh	r3, [r7, #14]
 8009c60:	3380      	adds	r3, #128	; 0x80
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009c68:	89fb      	ldrh	r3, [r7, #14]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	0800b81c 	.word	0x0800b81c

08009c7c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009c86:	88fb      	ldrh	r3, [r7, #6]
 8009c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c8c:	d201      	bcs.n	8009c92 <ff_wtoupper+0x16>
 8009c8e:	4b3e      	ldr	r3, [pc, #248]	; (8009d88 <ff_wtoupper+0x10c>)
 8009c90:	e000      	b.n	8009c94 <ff_wtoupper+0x18>
 8009c92:	4b3e      	ldr	r3, [pc, #248]	; (8009d8c <ff_wtoupper+0x110>)
 8009c94:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	1c9a      	adds	r2, r3, #2
 8009c9a:	617a      	str	r2, [r7, #20]
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009ca0:	8a7b      	ldrh	r3, [r7, #18]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d068      	beq.n	8009d78 <ff_wtoupper+0xfc>
 8009ca6:	88fa      	ldrh	r2, [r7, #6]
 8009ca8:	8a7b      	ldrh	r3, [r7, #18]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d364      	bcc.n	8009d78 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	1c9a      	adds	r2, r3, #2
 8009cb2:	617a      	str	r2, [r7, #20]
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	823b      	strh	r3, [r7, #16]
 8009cb8:	8a3b      	ldrh	r3, [r7, #16]
 8009cba:	0a1b      	lsrs	r3, r3, #8
 8009cbc:	81fb      	strh	r3, [r7, #14]
 8009cbe:	8a3b      	ldrh	r3, [r7, #16]
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009cc4:	88fa      	ldrh	r2, [r7, #6]
 8009cc6:	8a79      	ldrh	r1, [r7, #18]
 8009cc8:	8a3b      	ldrh	r3, [r7, #16]
 8009cca:	440b      	add	r3, r1
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	da49      	bge.n	8009d64 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009cd0:	89fb      	ldrh	r3, [r7, #14]
 8009cd2:	2b08      	cmp	r3, #8
 8009cd4:	d84f      	bhi.n	8009d76 <ff_wtoupper+0xfa>
 8009cd6:	a201      	add	r2, pc, #4	; (adr r2, 8009cdc <ff_wtoupper+0x60>)
 8009cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cdc:	08009d01 	.word	0x08009d01
 8009ce0:	08009d13 	.word	0x08009d13
 8009ce4:	08009d29 	.word	0x08009d29
 8009ce8:	08009d31 	.word	0x08009d31
 8009cec:	08009d39 	.word	0x08009d39
 8009cf0:	08009d41 	.word	0x08009d41
 8009cf4:	08009d49 	.word	0x08009d49
 8009cf8:	08009d51 	.word	0x08009d51
 8009cfc:	08009d59 	.word	0x08009d59
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009d00:	88fa      	ldrh	r2, [r7, #6]
 8009d02:	8a7b      	ldrh	r3, [r7, #18]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	80fb      	strh	r3, [r7, #6]
 8009d10:	e027      	b.n	8009d62 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009d12:	88fa      	ldrh	r2, [r7, #6]
 8009d14:	8a7b      	ldrh	r3, [r7, #18]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	88fa      	ldrh	r2, [r7, #6]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	80fb      	strh	r3, [r7, #6]
 8009d26:	e01c      	b.n	8009d62 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	3b10      	subs	r3, #16
 8009d2c:	80fb      	strh	r3, [r7, #6]
 8009d2e:	e018      	b.n	8009d62 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009d30:	88fb      	ldrh	r3, [r7, #6]
 8009d32:	3b20      	subs	r3, #32
 8009d34:	80fb      	strh	r3, [r7, #6]
 8009d36:	e014      	b.n	8009d62 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009d38:	88fb      	ldrh	r3, [r7, #6]
 8009d3a:	3b30      	subs	r3, #48	; 0x30
 8009d3c:	80fb      	strh	r3, [r7, #6]
 8009d3e:	e010      	b.n	8009d62 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009d40:	88fb      	ldrh	r3, [r7, #6]
 8009d42:	3b1a      	subs	r3, #26
 8009d44:	80fb      	strh	r3, [r7, #6]
 8009d46:	e00c      	b.n	8009d62 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009d48:	88fb      	ldrh	r3, [r7, #6]
 8009d4a:	3308      	adds	r3, #8
 8009d4c:	80fb      	strh	r3, [r7, #6]
 8009d4e:	e008      	b.n	8009d62 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009d50:	88fb      	ldrh	r3, [r7, #6]
 8009d52:	3b50      	subs	r3, #80	; 0x50
 8009d54:	80fb      	strh	r3, [r7, #6]
 8009d56:	e004      	b.n	8009d62 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009d58:	88fb      	ldrh	r3, [r7, #6]
 8009d5a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8009d5e:	80fb      	strh	r3, [r7, #6]
 8009d60:	bf00      	nop
			}
			break;
 8009d62:	e008      	b.n	8009d76 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009d64:	89fb      	ldrh	r3, [r7, #14]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d195      	bne.n	8009c96 <ff_wtoupper+0x1a>
 8009d6a:	8a3b      	ldrh	r3, [r7, #16]
 8009d6c:	005b      	lsls	r3, r3, #1
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	4413      	add	r3, r2
 8009d72:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009d74:	e78f      	b.n	8009c96 <ff_wtoupper+0x1a>
			break;
 8009d76:	bf00      	nop
	}

	return chr;
 8009d78:	88fb      	ldrh	r3, [r7, #6]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	0800b91c 	.word	0x0800b91c
 8009d8c:	0800bb10 	.word	0x0800bb10

08009d90 <__errno>:
 8009d90:	4b01      	ldr	r3, [pc, #4]	; (8009d98 <__errno+0x8>)
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	20000028 	.word	0x20000028

08009d9c <__libc_init_array>:
 8009d9c:	b570      	push	{r4, r5, r6, lr}
 8009d9e:	4d0d      	ldr	r5, [pc, #52]	; (8009dd4 <__libc_init_array+0x38>)
 8009da0:	4c0d      	ldr	r4, [pc, #52]	; (8009dd8 <__libc_init_array+0x3c>)
 8009da2:	1b64      	subs	r4, r4, r5
 8009da4:	10a4      	asrs	r4, r4, #2
 8009da6:	2600      	movs	r6, #0
 8009da8:	42a6      	cmp	r6, r4
 8009daa:	d109      	bne.n	8009dc0 <__libc_init_array+0x24>
 8009dac:	4d0b      	ldr	r5, [pc, #44]	; (8009ddc <__libc_init_array+0x40>)
 8009dae:	4c0c      	ldr	r4, [pc, #48]	; (8009de0 <__libc_init_array+0x44>)
 8009db0:	f001 fbd4 	bl	800b55c <_init>
 8009db4:	1b64      	subs	r4, r4, r5
 8009db6:	10a4      	asrs	r4, r4, #2
 8009db8:	2600      	movs	r6, #0
 8009dba:	42a6      	cmp	r6, r4
 8009dbc:	d105      	bne.n	8009dca <__libc_init_array+0x2e>
 8009dbe:	bd70      	pop	{r4, r5, r6, pc}
 8009dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dc4:	4798      	blx	r3
 8009dc6:	3601      	adds	r6, #1
 8009dc8:	e7ee      	b.n	8009da8 <__libc_init_array+0xc>
 8009dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dce:	4798      	blx	r3
 8009dd0:	3601      	adds	r6, #1
 8009dd2:	e7f2      	b.n	8009dba <__libc_init_array+0x1e>
 8009dd4:	0800bc38 	.word	0x0800bc38
 8009dd8:	0800bc38 	.word	0x0800bc38
 8009ddc:	0800bc38 	.word	0x0800bc38
 8009de0:	0800bc3c 	.word	0x0800bc3c

08009de4 <memset>:
 8009de4:	4402      	add	r2, r0
 8009de6:	4603      	mov	r3, r0
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d100      	bne.n	8009dee <memset+0xa>
 8009dec:	4770      	bx	lr
 8009dee:	f803 1b01 	strb.w	r1, [r3], #1
 8009df2:	e7f9      	b.n	8009de8 <memset+0x4>

08009df4 <siprintf>:
 8009df4:	b40e      	push	{r1, r2, r3}
 8009df6:	b500      	push	{lr}
 8009df8:	b09c      	sub	sp, #112	; 0x70
 8009dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8009dfc:	9002      	str	r0, [sp, #8]
 8009dfe:	9006      	str	r0, [sp, #24]
 8009e00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e04:	4809      	ldr	r0, [pc, #36]	; (8009e2c <siprintf+0x38>)
 8009e06:	9107      	str	r1, [sp, #28]
 8009e08:	9104      	str	r1, [sp, #16]
 8009e0a:	4909      	ldr	r1, [pc, #36]	; (8009e30 <siprintf+0x3c>)
 8009e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e10:	9105      	str	r1, [sp, #20]
 8009e12:	6800      	ldr	r0, [r0, #0]
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	a902      	add	r1, sp, #8
 8009e18:	f000 f868 	bl	8009eec <_svfiprintf_r>
 8009e1c:	9b02      	ldr	r3, [sp, #8]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	701a      	strb	r2, [r3, #0]
 8009e22:	b01c      	add	sp, #112	; 0x70
 8009e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e28:	b003      	add	sp, #12
 8009e2a:	4770      	bx	lr
 8009e2c:	20000028 	.word	0x20000028
 8009e30:	ffff0208 	.word	0xffff0208

08009e34 <__ssputs_r>:
 8009e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e38:	688e      	ldr	r6, [r1, #8]
 8009e3a:	429e      	cmp	r6, r3
 8009e3c:	4682      	mov	sl, r0
 8009e3e:	460c      	mov	r4, r1
 8009e40:	4690      	mov	r8, r2
 8009e42:	461f      	mov	r7, r3
 8009e44:	d838      	bhi.n	8009eb8 <__ssputs_r+0x84>
 8009e46:	898a      	ldrh	r2, [r1, #12]
 8009e48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e4c:	d032      	beq.n	8009eb4 <__ssputs_r+0x80>
 8009e4e:	6825      	ldr	r5, [r4, #0]
 8009e50:	6909      	ldr	r1, [r1, #16]
 8009e52:	eba5 0901 	sub.w	r9, r5, r1
 8009e56:	6965      	ldr	r5, [r4, #20]
 8009e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e60:	3301      	adds	r3, #1
 8009e62:	444b      	add	r3, r9
 8009e64:	106d      	asrs	r5, r5, #1
 8009e66:	429d      	cmp	r5, r3
 8009e68:	bf38      	it	cc
 8009e6a:	461d      	movcc	r5, r3
 8009e6c:	0553      	lsls	r3, r2, #21
 8009e6e:	d531      	bpl.n	8009ed4 <__ssputs_r+0xa0>
 8009e70:	4629      	mov	r1, r5
 8009e72:	f000 fb63 	bl	800a53c <_malloc_r>
 8009e76:	4606      	mov	r6, r0
 8009e78:	b950      	cbnz	r0, 8009e90 <__ssputs_r+0x5c>
 8009e7a:	230c      	movs	r3, #12
 8009e7c:	f8ca 3000 	str.w	r3, [sl]
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e86:	81a3      	strh	r3, [r4, #12]
 8009e88:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e90:	6921      	ldr	r1, [r4, #16]
 8009e92:	464a      	mov	r2, r9
 8009e94:	f000 fabe 	bl	800a414 <memcpy>
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea2:	81a3      	strh	r3, [r4, #12]
 8009ea4:	6126      	str	r6, [r4, #16]
 8009ea6:	6165      	str	r5, [r4, #20]
 8009ea8:	444e      	add	r6, r9
 8009eaa:	eba5 0509 	sub.w	r5, r5, r9
 8009eae:	6026      	str	r6, [r4, #0]
 8009eb0:	60a5      	str	r5, [r4, #8]
 8009eb2:	463e      	mov	r6, r7
 8009eb4:	42be      	cmp	r6, r7
 8009eb6:	d900      	bls.n	8009eba <__ssputs_r+0x86>
 8009eb8:	463e      	mov	r6, r7
 8009eba:	6820      	ldr	r0, [r4, #0]
 8009ebc:	4632      	mov	r2, r6
 8009ebe:	4641      	mov	r1, r8
 8009ec0:	f000 fab6 	bl	800a430 <memmove>
 8009ec4:	68a3      	ldr	r3, [r4, #8]
 8009ec6:	1b9b      	subs	r3, r3, r6
 8009ec8:	60a3      	str	r3, [r4, #8]
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	4433      	add	r3, r6
 8009ece:	6023      	str	r3, [r4, #0]
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	e7db      	b.n	8009e8c <__ssputs_r+0x58>
 8009ed4:	462a      	mov	r2, r5
 8009ed6:	f000 fba5 	bl	800a624 <_realloc_r>
 8009eda:	4606      	mov	r6, r0
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d1e1      	bne.n	8009ea4 <__ssputs_r+0x70>
 8009ee0:	6921      	ldr	r1, [r4, #16]
 8009ee2:	4650      	mov	r0, sl
 8009ee4:	f000 fabe 	bl	800a464 <_free_r>
 8009ee8:	e7c7      	b.n	8009e7a <__ssputs_r+0x46>
	...

08009eec <_svfiprintf_r>:
 8009eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	4698      	mov	r8, r3
 8009ef2:	898b      	ldrh	r3, [r1, #12]
 8009ef4:	061b      	lsls	r3, r3, #24
 8009ef6:	b09d      	sub	sp, #116	; 0x74
 8009ef8:	4607      	mov	r7, r0
 8009efa:	460d      	mov	r5, r1
 8009efc:	4614      	mov	r4, r2
 8009efe:	d50e      	bpl.n	8009f1e <_svfiprintf_r+0x32>
 8009f00:	690b      	ldr	r3, [r1, #16]
 8009f02:	b963      	cbnz	r3, 8009f1e <_svfiprintf_r+0x32>
 8009f04:	2140      	movs	r1, #64	; 0x40
 8009f06:	f000 fb19 	bl	800a53c <_malloc_r>
 8009f0a:	6028      	str	r0, [r5, #0]
 8009f0c:	6128      	str	r0, [r5, #16]
 8009f0e:	b920      	cbnz	r0, 8009f1a <_svfiprintf_r+0x2e>
 8009f10:	230c      	movs	r3, #12
 8009f12:	603b      	str	r3, [r7, #0]
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295
 8009f18:	e0d1      	b.n	800a0be <_svfiprintf_r+0x1d2>
 8009f1a:	2340      	movs	r3, #64	; 0x40
 8009f1c:	616b      	str	r3, [r5, #20]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9309      	str	r3, [sp, #36]	; 0x24
 8009f22:	2320      	movs	r3, #32
 8009f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f2c:	2330      	movs	r3, #48	; 0x30
 8009f2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0d8 <_svfiprintf_r+0x1ec>
 8009f32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f36:	f04f 0901 	mov.w	r9, #1
 8009f3a:	4623      	mov	r3, r4
 8009f3c:	469a      	mov	sl, r3
 8009f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f42:	b10a      	cbz	r2, 8009f48 <_svfiprintf_r+0x5c>
 8009f44:	2a25      	cmp	r2, #37	; 0x25
 8009f46:	d1f9      	bne.n	8009f3c <_svfiprintf_r+0x50>
 8009f48:	ebba 0b04 	subs.w	fp, sl, r4
 8009f4c:	d00b      	beq.n	8009f66 <_svfiprintf_r+0x7a>
 8009f4e:	465b      	mov	r3, fp
 8009f50:	4622      	mov	r2, r4
 8009f52:	4629      	mov	r1, r5
 8009f54:	4638      	mov	r0, r7
 8009f56:	f7ff ff6d 	bl	8009e34 <__ssputs_r>
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	f000 80aa 	beq.w	800a0b4 <_svfiprintf_r+0x1c8>
 8009f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f62:	445a      	add	r2, fp
 8009f64:	9209      	str	r2, [sp, #36]	; 0x24
 8009f66:	f89a 3000 	ldrb.w	r3, [sl]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 80a2 	beq.w	800a0b4 <_svfiprintf_r+0x1c8>
 8009f70:	2300      	movs	r3, #0
 8009f72:	f04f 32ff 	mov.w	r2, #4294967295
 8009f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f7a:	f10a 0a01 	add.w	sl, sl, #1
 8009f7e:	9304      	str	r3, [sp, #16]
 8009f80:	9307      	str	r3, [sp, #28]
 8009f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f86:	931a      	str	r3, [sp, #104]	; 0x68
 8009f88:	4654      	mov	r4, sl
 8009f8a:	2205      	movs	r2, #5
 8009f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f90:	4851      	ldr	r0, [pc, #324]	; (800a0d8 <_svfiprintf_r+0x1ec>)
 8009f92:	f7f6 f945 	bl	8000220 <memchr>
 8009f96:	9a04      	ldr	r2, [sp, #16]
 8009f98:	b9d8      	cbnz	r0, 8009fd2 <_svfiprintf_r+0xe6>
 8009f9a:	06d0      	lsls	r0, r2, #27
 8009f9c:	bf44      	itt	mi
 8009f9e:	2320      	movmi	r3, #32
 8009fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fa4:	0711      	lsls	r1, r2, #28
 8009fa6:	bf44      	itt	mi
 8009fa8:	232b      	movmi	r3, #43	; 0x2b
 8009faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fae:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb4:	d015      	beq.n	8009fe2 <_svfiprintf_r+0xf6>
 8009fb6:	9a07      	ldr	r2, [sp, #28]
 8009fb8:	4654      	mov	r4, sl
 8009fba:	2000      	movs	r0, #0
 8009fbc:	f04f 0c0a 	mov.w	ip, #10
 8009fc0:	4621      	mov	r1, r4
 8009fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fc6:	3b30      	subs	r3, #48	; 0x30
 8009fc8:	2b09      	cmp	r3, #9
 8009fca:	d94e      	bls.n	800a06a <_svfiprintf_r+0x17e>
 8009fcc:	b1b0      	cbz	r0, 8009ffc <_svfiprintf_r+0x110>
 8009fce:	9207      	str	r2, [sp, #28]
 8009fd0:	e014      	b.n	8009ffc <_svfiprintf_r+0x110>
 8009fd2:	eba0 0308 	sub.w	r3, r0, r8
 8009fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	9304      	str	r3, [sp, #16]
 8009fde:	46a2      	mov	sl, r4
 8009fe0:	e7d2      	b.n	8009f88 <_svfiprintf_r+0x9c>
 8009fe2:	9b03      	ldr	r3, [sp, #12]
 8009fe4:	1d19      	adds	r1, r3, #4
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	9103      	str	r1, [sp, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	bfbb      	ittet	lt
 8009fee:	425b      	neglt	r3, r3
 8009ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ff4:	9307      	strge	r3, [sp, #28]
 8009ff6:	9307      	strlt	r3, [sp, #28]
 8009ff8:	bfb8      	it	lt
 8009ffa:	9204      	strlt	r2, [sp, #16]
 8009ffc:	7823      	ldrb	r3, [r4, #0]
 8009ffe:	2b2e      	cmp	r3, #46	; 0x2e
 800a000:	d10c      	bne.n	800a01c <_svfiprintf_r+0x130>
 800a002:	7863      	ldrb	r3, [r4, #1]
 800a004:	2b2a      	cmp	r3, #42	; 0x2a
 800a006:	d135      	bne.n	800a074 <_svfiprintf_r+0x188>
 800a008:	9b03      	ldr	r3, [sp, #12]
 800a00a:	1d1a      	adds	r2, r3, #4
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	9203      	str	r2, [sp, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	bfb8      	it	lt
 800a014:	f04f 33ff 	movlt.w	r3, #4294967295
 800a018:	3402      	adds	r4, #2
 800a01a:	9305      	str	r3, [sp, #20]
 800a01c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0e8 <_svfiprintf_r+0x1fc>
 800a020:	7821      	ldrb	r1, [r4, #0]
 800a022:	2203      	movs	r2, #3
 800a024:	4650      	mov	r0, sl
 800a026:	f7f6 f8fb 	bl	8000220 <memchr>
 800a02a:	b140      	cbz	r0, 800a03e <_svfiprintf_r+0x152>
 800a02c:	2340      	movs	r3, #64	; 0x40
 800a02e:	eba0 000a 	sub.w	r0, r0, sl
 800a032:	fa03 f000 	lsl.w	r0, r3, r0
 800a036:	9b04      	ldr	r3, [sp, #16]
 800a038:	4303      	orrs	r3, r0
 800a03a:	3401      	adds	r4, #1
 800a03c:	9304      	str	r3, [sp, #16]
 800a03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a042:	4826      	ldr	r0, [pc, #152]	; (800a0dc <_svfiprintf_r+0x1f0>)
 800a044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a048:	2206      	movs	r2, #6
 800a04a:	f7f6 f8e9 	bl	8000220 <memchr>
 800a04e:	2800      	cmp	r0, #0
 800a050:	d038      	beq.n	800a0c4 <_svfiprintf_r+0x1d8>
 800a052:	4b23      	ldr	r3, [pc, #140]	; (800a0e0 <_svfiprintf_r+0x1f4>)
 800a054:	bb1b      	cbnz	r3, 800a09e <_svfiprintf_r+0x1b2>
 800a056:	9b03      	ldr	r3, [sp, #12]
 800a058:	3307      	adds	r3, #7
 800a05a:	f023 0307 	bic.w	r3, r3, #7
 800a05e:	3308      	adds	r3, #8
 800a060:	9303      	str	r3, [sp, #12]
 800a062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a064:	4433      	add	r3, r6
 800a066:	9309      	str	r3, [sp, #36]	; 0x24
 800a068:	e767      	b.n	8009f3a <_svfiprintf_r+0x4e>
 800a06a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a06e:	460c      	mov	r4, r1
 800a070:	2001      	movs	r0, #1
 800a072:	e7a5      	b.n	8009fc0 <_svfiprintf_r+0xd4>
 800a074:	2300      	movs	r3, #0
 800a076:	3401      	adds	r4, #1
 800a078:	9305      	str	r3, [sp, #20]
 800a07a:	4619      	mov	r1, r3
 800a07c:	f04f 0c0a 	mov.w	ip, #10
 800a080:	4620      	mov	r0, r4
 800a082:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a086:	3a30      	subs	r2, #48	; 0x30
 800a088:	2a09      	cmp	r2, #9
 800a08a:	d903      	bls.n	800a094 <_svfiprintf_r+0x1a8>
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d0c5      	beq.n	800a01c <_svfiprintf_r+0x130>
 800a090:	9105      	str	r1, [sp, #20]
 800a092:	e7c3      	b.n	800a01c <_svfiprintf_r+0x130>
 800a094:	fb0c 2101 	mla	r1, ip, r1, r2
 800a098:	4604      	mov	r4, r0
 800a09a:	2301      	movs	r3, #1
 800a09c:	e7f0      	b.n	800a080 <_svfiprintf_r+0x194>
 800a09e:	ab03      	add	r3, sp, #12
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	462a      	mov	r2, r5
 800a0a4:	4b0f      	ldr	r3, [pc, #60]	; (800a0e4 <_svfiprintf_r+0x1f8>)
 800a0a6:	a904      	add	r1, sp, #16
 800a0a8:	4638      	mov	r0, r7
 800a0aa:	f3af 8000 	nop.w
 800a0ae:	1c42      	adds	r2, r0, #1
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	d1d6      	bne.n	800a062 <_svfiprintf_r+0x176>
 800a0b4:	89ab      	ldrh	r3, [r5, #12]
 800a0b6:	065b      	lsls	r3, r3, #25
 800a0b8:	f53f af2c 	bmi.w	8009f14 <_svfiprintf_r+0x28>
 800a0bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0be:	b01d      	add	sp, #116	; 0x74
 800a0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c4:	ab03      	add	r3, sp, #12
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	462a      	mov	r2, r5
 800a0ca:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <_svfiprintf_r+0x1f8>)
 800a0cc:	a904      	add	r1, sp, #16
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	f000 f87a 	bl	800a1c8 <_printf_i>
 800a0d4:	e7eb      	b.n	800a0ae <_svfiprintf_r+0x1c2>
 800a0d6:	bf00      	nop
 800a0d8:	0800bbcc 	.word	0x0800bbcc
 800a0dc:	0800bbd6 	.word	0x0800bbd6
 800a0e0:	00000000 	.word	0x00000000
 800a0e4:	08009e35 	.word	0x08009e35
 800a0e8:	0800bbd2 	.word	0x0800bbd2

0800a0ec <_printf_common>:
 800a0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f0:	4616      	mov	r6, r2
 800a0f2:	4699      	mov	r9, r3
 800a0f4:	688a      	ldr	r2, [r1, #8]
 800a0f6:	690b      	ldr	r3, [r1, #16]
 800a0f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	bfb8      	it	lt
 800a100:	4613      	movlt	r3, r2
 800a102:	6033      	str	r3, [r6, #0]
 800a104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a108:	4607      	mov	r7, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	b10a      	cbz	r2, 800a112 <_printf_common+0x26>
 800a10e:	3301      	adds	r3, #1
 800a110:	6033      	str	r3, [r6, #0]
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	0699      	lsls	r1, r3, #26
 800a116:	bf42      	ittt	mi
 800a118:	6833      	ldrmi	r3, [r6, #0]
 800a11a:	3302      	addmi	r3, #2
 800a11c:	6033      	strmi	r3, [r6, #0]
 800a11e:	6825      	ldr	r5, [r4, #0]
 800a120:	f015 0506 	ands.w	r5, r5, #6
 800a124:	d106      	bne.n	800a134 <_printf_common+0x48>
 800a126:	f104 0a19 	add.w	sl, r4, #25
 800a12a:	68e3      	ldr	r3, [r4, #12]
 800a12c:	6832      	ldr	r2, [r6, #0]
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	42ab      	cmp	r3, r5
 800a132:	dc26      	bgt.n	800a182 <_printf_common+0x96>
 800a134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a138:	1e13      	subs	r3, r2, #0
 800a13a:	6822      	ldr	r2, [r4, #0]
 800a13c:	bf18      	it	ne
 800a13e:	2301      	movne	r3, #1
 800a140:	0692      	lsls	r2, r2, #26
 800a142:	d42b      	bmi.n	800a19c <_printf_common+0xb0>
 800a144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a148:	4649      	mov	r1, r9
 800a14a:	4638      	mov	r0, r7
 800a14c:	47c0      	blx	r8
 800a14e:	3001      	adds	r0, #1
 800a150:	d01e      	beq.n	800a190 <_printf_common+0xa4>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	68e5      	ldr	r5, [r4, #12]
 800a156:	6832      	ldr	r2, [r6, #0]
 800a158:	f003 0306 	and.w	r3, r3, #6
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	bf08      	it	eq
 800a160:	1aad      	subeq	r5, r5, r2
 800a162:	68a3      	ldr	r3, [r4, #8]
 800a164:	6922      	ldr	r2, [r4, #16]
 800a166:	bf0c      	ite	eq
 800a168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a16c:	2500      	movne	r5, #0
 800a16e:	4293      	cmp	r3, r2
 800a170:	bfc4      	itt	gt
 800a172:	1a9b      	subgt	r3, r3, r2
 800a174:	18ed      	addgt	r5, r5, r3
 800a176:	2600      	movs	r6, #0
 800a178:	341a      	adds	r4, #26
 800a17a:	42b5      	cmp	r5, r6
 800a17c:	d11a      	bne.n	800a1b4 <_printf_common+0xc8>
 800a17e:	2000      	movs	r0, #0
 800a180:	e008      	b.n	800a194 <_printf_common+0xa8>
 800a182:	2301      	movs	r3, #1
 800a184:	4652      	mov	r2, sl
 800a186:	4649      	mov	r1, r9
 800a188:	4638      	mov	r0, r7
 800a18a:	47c0      	blx	r8
 800a18c:	3001      	adds	r0, #1
 800a18e:	d103      	bne.n	800a198 <_printf_common+0xac>
 800a190:	f04f 30ff 	mov.w	r0, #4294967295
 800a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a198:	3501      	adds	r5, #1
 800a19a:	e7c6      	b.n	800a12a <_printf_common+0x3e>
 800a19c:	18e1      	adds	r1, r4, r3
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	2030      	movs	r0, #48	; 0x30
 800a1a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1a6:	4422      	add	r2, r4
 800a1a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1b0:	3302      	adds	r3, #2
 800a1b2:	e7c7      	b.n	800a144 <_printf_common+0x58>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	47c0      	blx	r8
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d0e6      	beq.n	800a190 <_printf_common+0xa4>
 800a1c2:	3601      	adds	r6, #1
 800a1c4:	e7d9      	b.n	800a17a <_printf_common+0x8e>
	...

0800a1c8 <_printf_i>:
 800a1c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1cc:	7e0f      	ldrb	r7, [r1, #24]
 800a1ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1d0:	2f78      	cmp	r7, #120	; 0x78
 800a1d2:	4691      	mov	r9, r2
 800a1d4:	4680      	mov	r8, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	469a      	mov	sl, r3
 800a1da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1de:	d807      	bhi.n	800a1f0 <_printf_i+0x28>
 800a1e0:	2f62      	cmp	r7, #98	; 0x62
 800a1e2:	d80a      	bhi.n	800a1fa <_printf_i+0x32>
 800a1e4:	2f00      	cmp	r7, #0
 800a1e6:	f000 80d8 	beq.w	800a39a <_printf_i+0x1d2>
 800a1ea:	2f58      	cmp	r7, #88	; 0x58
 800a1ec:	f000 80a3 	beq.w	800a336 <_printf_i+0x16e>
 800a1f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1f8:	e03a      	b.n	800a270 <_printf_i+0xa8>
 800a1fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1fe:	2b15      	cmp	r3, #21
 800a200:	d8f6      	bhi.n	800a1f0 <_printf_i+0x28>
 800a202:	a101      	add	r1, pc, #4	; (adr r1, 800a208 <_printf_i+0x40>)
 800a204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a208:	0800a261 	.word	0x0800a261
 800a20c:	0800a275 	.word	0x0800a275
 800a210:	0800a1f1 	.word	0x0800a1f1
 800a214:	0800a1f1 	.word	0x0800a1f1
 800a218:	0800a1f1 	.word	0x0800a1f1
 800a21c:	0800a1f1 	.word	0x0800a1f1
 800a220:	0800a275 	.word	0x0800a275
 800a224:	0800a1f1 	.word	0x0800a1f1
 800a228:	0800a1f1 	.word	0x0800a1f1
 800a22c:	0800a1f1 	.word	0x0800a1f1
 800a230:	0800a1f1 	.word	0x0800a1f1
 800a234:	0800a381 	.word	0x0800a381
 800a238:	0800a2a5 	.word	0x0800a2a5
 800a23c:	0800a363 	.word	0x0800a363
 800a240:	0800a1f1 	.word	0x0800a1f1
 800a244:	0800a1f1 	.word	0x0800a1f1
 800a248:	0800a3a3 	.word	0x0800a3a3
 800a24c:	0800a1f1 	.word	0x0800a1f1
 800a250:	0800a2a5 	.word	0x0800a2a5
 800a254:	0800a1f1 	.word	0x0800a1f1
 800a258:	0800a1f1 	.word	0x0800a1f1
 800a25c:	0800a36b 	.word	0x0800a36b
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	1d1a      	adds	r2, r3, #4
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	602a      	str	r2, [r5, #0]
 800a268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a26c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a270:	2301      	movs	r3, #1
 800a272:	e0a3      	b.n	800a3bc <_printf_i+0x1f4>
 800a274:	6820      	ldr	r0, [r4, #0]
 800a276:	6829      	ldr	r1, [r5, #0]
 800a278:	0606      	lsls	r6, r0, #24
 800a27a:	f101 0304 	add.w	r3, r1, #4
 800a27e:	d50a      	bpl.n	800a296 <_printf_i+0xce>
 800a280:	680e      	ldr	r6, [r1, #0]
 800a282:	602b      	str	r3, [r5, #0]
 800a284:	2e00      	cmp	r6, #0
 800a286:	da03      	bge.n	800a290 <_printf_i+0xc8>
 800a288:	232d      	movs	r3, #45	; 0x2d
 800a28a:	4276      	negs	r6, r6
 800a28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a290:	485e      	ldr	r0, [pc, #376]	; (800a40c <_printf_i+0x244>)
 800a292:	230a      	movs	r3, #10
 800a294:	e019      	b.n	800a2ca <_printf_i+0x102>
 800a296:	680e      	ldr	r6, [r1, #0]
 800a298:	602b      	str	r3, [r5, #0]
 800a29a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a29e:	bf18      	it	ne
 800a2a0:	b236      	sxthne	r6, r6
 800a2a2:	e7ef      	b.n	800a284 <_printf_i+0xbc>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	6820      	ldr	r0, [r4, #0]
 800a2a8:	1d19      	adds	r1, r3, #4
 800a2aa:	6029      	str	r1, [r5, #0]
 800a2ac:	0601      	lsls	r1, r0, #24
 800a2ae:	d501      	bpl.n	800a2b4 <_printf_i+0xec>
 800a2b0:	681e      	ldr	r6, [r3, #0]
 800a2b2:	e002      	b.n	800a2ba <_printf_i+0xf2>
 800a2b4:	0646      	lsls	r6, r0, #25
 800a2b6:	d5fb      	bpl.n	800a2b0 <_printf_i+0xe8>
 800a2b8:	881e      	ldrh	r6, [r3, #0]
 800a2ba:	4854      	ldr	r0, [pc, #336]	; (800a40c <_printf_i+0x244>)
 800a2bc:	2f6f      	cmp	r7, #111	; 0x6f
 800a2be:	bf0c      	ite	eq
 800a2c0:	2308      	moveq	r3, #8
 800a2c2:	230a      	movne	r3, #10
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2ca:	6865      	ldr	r5, [r4, #4]
 800a2cc:	60a5      	str	r5, [r4, #8]
 800a2ce:	2d00      	cmp	r5, #0
 800a2d0:	bfa2      	ittt	ge
 800a2d2:	6821      	ldrge	r1, [r4, #0]
 800a2d4:	f021 0104 	bicge.w	r1, r1, #4
 800a2d8:	6021      	strge	r1, [r4, #0]
 800a2da:	b90e      	cbnz	r6, 800a2e0 <_printf_i+0x118>
 800a2dc:	2d00      	cmp	r5, #0
 800a2de:	d04d      	beq.n	800a37c <_printf_i+0x1b4>
 800a2e0:	4615      	mov	r5, r2
 800a2e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2e6:	fb03 6711 	mls	r7, r3, r1, r6
 800a2ea:	5dc7      	ldrb	r7, [r0, r7]
 800a2ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2f0:	4637      	mov	r7, r6
 800a2f2:	42bb      	cmp	r3, r7
 800a2f4:	460e      	mov	r6, r1
 800a2f6:	d9f4      	bls.n	800a2e2 <_printf_i+0x11a>
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d10b      	bne.n	800a314 <_printf_i+0x14c>
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	07de      	lsls	r6, r3, #31
 800a300:	d508      	bpl.n	800a314 <_printf_i+0x14c>
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	6861      	ldr	r1, [r4, #4]
 800a306:	4299      	cmp	r1, r3
 800a308:	bfde      	ittt	le
 800a30a:	2330      	movle	r3, #48	; 0x30
 800a30c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a310:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a314:	1b52      	subs	r2, r2, r5
 800a316:	6122      	str	r2, [r4, #16]
 800a318:	f8cd a000 	str.w	sl, [sp]
 800a31c:	464b      	mov	r3, r9
 800a31e:	aa03      	add	r2, sp, #12
 800a320:	4621      	mov	r1, r4
 800a322:	4640      	mov	r0, r8
 800a324:	f7ff fee2 	bl	800a0ec <_printf_common>
 800a328:	3001      	adds	r0, #1
 800a32a:	d14c      	bne.n	800a3c6 <_printf_i+0x1fe>
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b004      	add	sp, #16
 800a332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a336:	4835      	ldr	r0, [pc, #212]	; (800a40c <_printf_i+0x244>)
 800a338:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a33c:	6829      	ldr	r1, [r5, #0]
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	f851 6b04 	ldr.w	r6, [r1], #4
 800a344:	6029      	str	r1, [r5, #0]
 800a346:	061d      	lsls	r5, r3, #24
 800a348:	d514      	bpl.n	800a374 <_printf_i+0x1ac>
 800a34a:	07df      	lsls	r7, r3, #31
 800a34c:	bf44      	itt	mi
 800a34e:	f043 0320 	orrmi.w	r3, r3, #32
 800a352:	6023      	strmi	r3, [r4, #0]
 800a354:	b91e      	cbnz	r6, 800a35e <_printf_i+0x196>
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	f023 0320 	bic.w	r3, r3, #32
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	2310      	movs	r3, #16
 800a360:	e7b0      	b.n	800a2c4 <_printf_i+0xfc>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	f043 0320 	orr.w	r3, r3, #32
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	2378      	movs	r3, #120	; 0x78
 800a36c:	4828      	ldr	r0, [pc, #160]	; (800a410 <_printf_i+0x248>)
 800a36e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a372:	e7e3      	b.n	800a33c <_printf_i+0x174>
 800a374:	0659      	lsls	r1, r3, #25
 800a376:	bf48      	it	mi
 800a378:	b2b6      	uxthmi	r6, r6
 800a37a:	e7e6      	b.n	800a34a <_printf_i+0x182>
 800a37c:	4615      	mov	r5, r2
 800a37e:	e7bb      	b.n	800a2f8 <_printf_i+0x130>
 800a380:	682b      	ldr	r3, [r5, #0]
 800a382:	6826      	ldr	r6, [r4, #0]
 800a384:	6961      	ldr	r1, [r4, #20]
 800a386:	1d18      	adds	r0, r3, #4
 800a388:	6028      	str	r0, [r5, #0]
 800a38a:	0635      	lsls	r5, r6, #24
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	d501      	bpl.n	800a394 <_printf_i+0x1cc>
 800a390:	6019      	str	r1, [r3, #0]
 800a392:	e002      	b.n	800a39a <_printf_i+0x1d2>
 800a394:	0670      	lsls	r0, r6, #25
 800a396:	d5fb      	bpl.n	800a390 <_printf_i+0x1c8>
 800a398:	8019      	strh	r1, [r3, #0]
 800a39a:	2300      	movs	r3, #0
 800a39c:	6123      	str	r3, [r4, #16]
 800a39e:	4615      	mov	r5, r2
 800a3a0:	e7ba      	b.n	800a318 <_printf_i+0x150>
 800a3a2:	682b      	ldr	r3, [r5, #0]
 800a3a4:	1d1a      	adds	r2, r3, #4
 800a3a6:	602a      	str	r2, [r5, #0]
 800a3a8:	681d      	ldr	r5, [r3, #0]
 800a3aa:	6862      	ldr	r2, [r4, #4]
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f7f5 ff36 	bl	8000220 <memchr>
 800a3b4:	b108      	cbz	r0, 800a3ba <_printf_i+0x1f2>
 800a3b6:	1b40      	subs	r0, r0, r5
 800a3b8:	6060      	str	r0, [r4, #4]
 800a3ba:	6863      	ldr	r3, [r4, #4]
 800a3bc:	6123      	str	r3, [r4, #16]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c4:	e7a8      	b.n	800a318 <_printf_i+0x150>
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	462a      	mov	r2, r5
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	47d0      	blx	sl
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d0ab      	beq.n	800a32c <_printf_i+0x164>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	079b      	lsls	r3, r3, #30
 800a3d8:	d413      	bmi.n	800a402 <_printf_i+0x23a>
 800a3da:	68e0      	ldr	r0, [r4, #12]
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	4298      	cmp	r0, r3
 800a3e0:	bfb8      	it	lt
 800a3e2:	4618      	movlt	r0, r3
 800a3e4:	e7a4      	b.n	800a330 <_printf_i+0x168>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	4649      	mov	r1, r9
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	47d0      	blx	sl
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d09b      	beq.n	800a32c <_printf_i+0x164>
 800a3f4:	3501      	adds	r5, #1
 800a3f6:	68e3      	ldr	r3, [r4, #12]
 800a3f8:	9903      	ldr	r1, [sp, #12]
 800a3fa:	1a5b      	subs	r3, r3, r1
 800a3fc:	42ab      	cmp	r3, r5
 800a3fe:	dcf2      	bgt.n	800a3e6 <_printf_i+0x21e>
 800a400:	e7eb      	b.n	800a3da <_printf_i+0x212>
 800a402:	2500      	movs	r5, #0
 800a404:	f104 0619 	add.w	r6, r4, #25
 800a408:	e7f5      	b.n	800a3f6 <_printf_i+0x22e>
 800a40a:	bf00      	nop
 800a40c:	0800bbdd 	.word	0x0800bbdd
 800a410:	0800bbee 	.word	0x0800bbee

0800a414 <memcpy>:
 800a414:	440a      	add	r2, r1
 800a416:	4291      	cmp	r1, r2
 800a418:	f100 33ff 	add.w	r3, r0, #4294967295
 800a41c:	d100      	bne.n	800a420 <memcpy+0xc>
 800a41e:	4770      	bx	lr
 800a420:	b510      	push	{r4, lr}
 800a422:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a42a:	4291      	cmp	r1, r2
 800a42c:	d1f9      	bne.n	800a422 <memcpy+0xe>
 800a42e:	bd10      	pop	{r4, pc}

0800a430 <memmove>:
 800a430:	4288      	cmp	r0, r1
 800a432:	b510      	push	{r4, lr}
 800a434:	eb01 0402 	add.w	r4, r1, r2
 800a438:	d902      	bls.n	800a440 <memmove+0x10>
 800a43a:	4284      	cmp	r4, r0
 800a43c:	4623      	mov	r3, r4
 800a43e:	d807      	bhi.n	800a450 <memmove+0x20>
 800a440:	1e43      	subs	r3, r0, #1
 800a442:	42a1      	cmp	r1, r4
 800a444:	d008      	beq.n	800a458 <memmove+0x28>
 800a446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a44a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a44e:	e7f8      	b.n	800a442 <memmove+0x12>
 800a450:	4402      	add	r2, r0
 800a452:	4601      	mov	r1, r0
 800a454:	428a      	cmp	r2, r1
 800a456:	d100      	bne.n	800a45a <memmove+0x2a>
 800a458:	bd10      	pop	{r4, pc}
 800a45a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a45e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a462:	e7f7      	b.n	800a454 <memmove+0x24>

0800a464 <_free_r>:
 800a464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a466:	2900      	cmp	r1, #0
 800a468:	d044      	beq.n	800a4f4 <_free_r+0x90>
 800a46a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a46e:	9001      	str	r0, [sp, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	f1a1 0404 	sub.w	r4, r1, #4
 800a476:	bfb8      	it	lt
 800a478:	18e4      	addlt	r4, r4, r3
 800a47a:	f000 f913 	bl	800a6a4 <__malloc_lock>
 800a47e:	4a1e      	ldr	r2, [pc, #120]	; (800a4f8 <_free_r+0x94>)
 800a480:	9801      	ldr	r0, [sp, #4]
 800a482:	6813      	ldr	r3, [r2, #0]
 800a484:	b933      	cbnz	r3, 800a494 <_free_r+0x30>
 800a486:	6063      	str	r3, [r4, #4]
 800a488:	6014      	str	r4, [r2, #0]
 800a48a:	b003      	add	sp, #12
 800a48c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a490:	f000 b90e 	b.w	800a6b0 <__malloc_unlock>
 800a494:	42a3      	cmp	r3, r4
 800a496:	d908      	bls.n	800a4aa <_free_r+0x46>
 800a498:	6825      	ldr	r5, [r4, #0]
 800a49a:	1961      	adds	r1, r4, r5
 800a49c:	428b      	cmp	r3, r1
 800a49e:	bf01      	itttt	eq
 800a4a0:	6819      	ldreq	r1, [r3, #0]
 800a4a2:	685b      	ldreq	r3, [r3, #4]
 800a4a4:	1949      	addeq	r1, r1, r5
 800a4a6:	6021      	streq	r1, [r4, #0]
 800a4a8:	e7ed      	b.n	800a486 <_free_r+0x22>
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	b10b      	cbz	r3, 800a4b4 <_free_r+0x50>
 800a4b0:	42a3      	cmp	r3, r4
 800a4b2:	d9fa      	bls.n	800a4aa <_free_r+0x46>
 800a4b4:	6811      	ldr	r1, [r2, #0]
 800a4b6:	1855      	adds	r5, r2, r1
 800a4b8:	42a5      	cmp	r5, r4
 800a4ba:	d10b      	bne.n	800a4d4 <_free_r+0x70>
 800a4bc:	6824      	ldr	r4, [r4, #0]
 800a4be:	4421      	add	r1, r4
 800a4c0:	1854      	adds	r4, r2, r1
 800a4c2:	42a3      	cmp	r3, r4
 800a4c4:	6011      	str	r1, [r2, #0]
 800a4c6:	d1e0      	bne.n	800a48a <_free_r+0x26>
 800a4c8:	681c      	ldr	r4, [r3, #0]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	6053      	str	r3, [r2, #4]
 800a4ce:	4421      	add	r1, r4
 800a4d0:	6011      	str	r1, [r2, #0]
 800a4d2:	e7da      	b.n	800a48a <_free_r+0x26>
 800a4d4:	d902      	bls.n	800a4dc <_free_r+0x78>
 800a4d6:	230c      	movs	r3, #12
 800a4d8:	6003      	str	r3, [r0, #0]
 800a4da:	e7d6      	b.n	800a48a <_free_r+0x26>
 800a4dc:	6825      	ldr	r5, [r4, #0]
 800a4de:	1961      	adds	r1, r4, r5
 800a4e0:	428b      	cmp	r3, r1
 800a4e2:	bf04      	itt	eq
 800a4e4:	6819      	ldreq	r1, [r3, #0]
 800a4e6:	685b      	ldreq	r3, [r3, #4]
 800a4e8:	6063      	str	r3, [r4, #4]
 800a4ea:	bf04      	itt	eq
 800a4ec:	1949      	addeq	r1, r1, r5
 800a4ee:	6021      	streq	r1, [r4, #0]
 800a4f0:	6054      	str	r4, [r2, #4]
 800a4f2:	e7ca      	b.n	800a48a <_free_r+0x26>
 800a4f4:	b003      	add	sp, #12
 800a4f6:	bd30      	pop	{r4, r5, pc}
 800a4f8:	2000678c 	.word	0x2000678c

0800a4fc <sbrk_aligned>:
 800a4fc:	b570      	push	{r4, r5, r6, lr}
 800a4fe:	4e0e      	ldr	r6, [pc, #56]	; (800a538 <sbrk_aligned+0x3c>)
 800a500:	460c      	mov	r4, r1
 800a502:	6831      	ldr	r1, [r6, #0]
 800a504:	4605      	mov	r5, r0
 800a506:	b911      	cbnz	r1, 800a50e <sbrk_aligned+0x12>
 800a508:	f000 f8bc 	bl	800a684 <_sbrk_r>
 800a50c:	6030      	str	r0, [r6, #0]
 800a50e:	4621      	mov	r1, r4
 800a510:	4628      	mov	r0, r5
 800a512:	f000 f8b7 	bl	800a684 <_sbrk_r>
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	d00a      	beq.n	800a530 <sbrk_aligned+0x34>
 800a51a:	1cc4      	adds	r4, r0, #3
 800a51c:	f024 0403 	bic.w	r4, r4, #3
 800a520:	42a0      	cmp	r0, r4
 800a522:	d007      	beq.n	800a534 <sbrk_aligned+0x38>
 800a524:	1a21      	subs	r1, r4, r0
 800a526:	4628      	mov	r0, r5
 800a528:	f000 f8ac 	bl	800a684 <_sbrk_r>
 800a52c:	3001      	adds	r0, #1
 800a52e:	d101      	bne.n	800a534 <sbrk_aligned+0x38>
 800a530:	f04f 34ff 	mov.w	r4, #4294967295
 800a534:	4620      	mov	r0, r4
 800a536:	bd70      	pop	{r4, r5, r6, pc}
 800a538:	20006790 	.word	0x20006790

0800a53c <_malloc_r>:
 800a53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a540:	1ccd      	adds	r5, r1, #3
 800a542:	f025 0503 	bic.w	r5, r5, #3
 800a546:	3508      	adds	r5, #8
 800a548:	2d0c      	cmp	r5, #12
 800a54a:	bf38      	it	cc
 800a54c:	250c      	movcc	r5, #12
 800a54e:	2d00      	cmp	r5, #0
 800a550:	4607      	mov	r7, r0
 800a552:	db01      	blt.n	800a558 <_malloc_r+0x1c>
 800a554:	42a9      	cmp	r1, r5
 800a556:	d905      	bls.n	800a564 <_malloc_r+0x28>
 800a558:	230c      	movs	r3, #12
 800a55a:	603b      	str	r3, [r7, #0]
 800a55c:	2600      	movs	r6, #0
 800a55e:	4630      	mov	r0, r6
 800a560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a564:	4e2e      	ldr	r6, [pc, #184]	; (800a620 <_malloc_r+0xe4>)
 800a566:	f000 f89d 	bl	800a6a4 <__malloc_lock>
 800a56a:	6833      	ldr	r3, [r6, #0]
 800a56c:	461c      	mov	r4, r3
 800a56e:	bb34      	cbnz	r4, 800a5be <_malloc_r+0x82>
 800a570:	4629      	mov	r1, r5
 800a572:	4638      	mov	r0, r7
 800a574:	f7ff ffc2 	bl	800a4fc <sbrk_aligned>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	4604      	mov	r4, r0
 800a57c:	d14d      	bne.n	800a61a <_malloc_r+0xde>
 800a57e:	6834      	ldr	r4, [r6, #0]
 800a580:	4626      	mov	r6, r4
 800a582:	2e00      	cmp	r6, #0
 800a584:	d140      	bne.n	800a608 <_malloc_r+0xcc>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	4631      	mov	r1, r6
 800a58a:	4638      	mov	r0, r7
 800a58c:	eb04 0803 	add.w	r8, r4, r3
 800a590:	f000 f878 	bl	800a684 <_sbrk_r>
 800a594:	4580      	cmp	r8, r0
 800a596:	d13a      	bne.n	800a60e <_malloc_r+0xd2>
 800a598:	6821      	ldr	r1, [r4, #0]
 800a59a:	3503      	adds	r5, #3
 800a59c:	1a6d      	subs	r5, r5, r1
 800a59e:	f025 0503 	bic.w	r5, r5, #3
 800a5a2:	3508      	adds	r5, #8
 800a5a4:	2d0c      	cmp	r5, #12
 800a5a6:	bf38      	it	cc
 800a5a8:	250c      	movcc	r5, #12
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	f7ff ffa5 	bl	800a4fc <sbrk_aligned>
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	d02b      	beq.n	800a60e <_malloc_r+0xd2>
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	442b      	add	r3, r5
 800a5ba:	6023      	str	r3, [r4, #0]
 800a5bc:	e00e      	b.n	800a5dc <_malloc_r+0xa0>
 800a5be:	6822      	ldr	r2, [r4, #0]
 800a5c0:	1b52      	subs	r2, r2, r5
 800a5c2:	d41e      	bmi.n	800a602 <_malloc_r+0xc6>
 800a5c4:	2a0b      	cmp	r2, #11
 800a5c6:	d916      	bls.n	800a5f6 <_malloc_r+0xba>
 800a5c8:	1961      	adds	r1, r4, r5
 800a5ca:	42a3      	cmp	r3, r4
 800a5cc:	6025      	str	r5, [r4, #0]
 800a5ce:	bf18      	it	ne
 800a5d0:	6059      	strne	r1, [r3, #4]
 800a5d2:	6863      	ldr	r3, [r4, #4]
 800a5d4:	bf08      	it	eq
 800a5d6:	6031      	streq	r1, [r6, #0]
 800a5d8:	5162      	str	r2, [r4, r5]
 800a5da:	604b      	str	r3, [r1, #4]
 800a5dc:	4638      	mov	r0, r7
 800a5de:	f104 060b 	add.w	r6, r4, #11
 800a5e2:	f000 f865 	bl	800a6b0 <__malloc_unlock>
 800a5e6:	f026 0607 	bic.w	r6, r6, #7
 800a5ea:	1d23      	adds	r3, r4, #4
 800a5ec:	1af2      	subs	r2, r6, r3
 800a5ee:	d0b6      	beq.n	800a55e <_malloc_r+0x22>
 800a5f0:	1b9b      	subs	r3, r3, r6
 800a5f2:	50a3      	str	r3, [r4, r2]
 800a5f4:	e7b3      	b.n	800a55e <_malloc_r+0x22>
 800a5f6:	6862      	ldr	r2, [r4, #4]
 800a5f8:	42a3      	cmp	r3, r4
 800a5fa:	bf0c      	ite	eq
 800a5fc:	6032      	streq	r2, [r6, #0]
 800a5fe:	605a      	strne	r2, [r3, #4]
 800a600:	e7ec      	b.n	800a5dc <_malloc_r+0xa0>
 800a602:	4623      	mov	r3, r4
 800a604:	6864      	ldr	r4, [r4, #4]
 800a606:	e7b2      	b.n	800a56e <_malloc_r+0x32>
 800a608:	4634      	mov	r4, r6
 800a60a:	6876      	ldr	r6, [r6, #4]
 800a60c:	e7b9      	b.n	800a582 <_malloc_r+0x46>
 800a60e:	230c      	movs	r3, #12
 800a610:	603b      	str	r3, [r7, #0]
 800a612:	4638      	mov	r0, r7
 800a614:	f000 f84c 	bl	800a6b0 <__malloc_unlock>
 800a618:	e7a1      	b.n	800a55e <_malloc_r+0x22>
 800a61a:	6025      	str	r5, [r4, #0]
 800a61c:	e7de      	b.n	800a5dc <_malloc_r+0xa0>
 800a61e:	bf00      	nop
 800a620:	2000678c 	.word	0x2000678c

0800a624 <_realloc_r>:
 800a624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a628:	4680      	mov	r8, r0
 800a62a:	4614      	mov	r4, r2
 800a62c:	460e      	mov	r6, r1
 800a62e:	b921      	cbnz	r1, 800a63a <_realloc_r+0x16>
 800a630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a634:	4611      	mov	r1, r2
 800a636:	f7ff bf81 	b.w	800a53c <_malloc_r>
 800a63a:	b92a      	cbnz	r2, 800a648 <_realloc_r+0x24>
 800a63c:	f7ff ff12 	bl	800a464 <_free_r>
 800a640:	4625      	mov	r5, r4
 800a642:	4628      	mov	r0, r5
 800a644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a648:	f000 f838 	bl	800a6bc <_malloc_usable_size_r>
 800a64c:	4284      	cmp	r4, r0
 800a64e:	4607      	mov	r7, r0
 800a650:	d802      	bhi.n	800a658 <_realloc_r+0x34>
 800a652:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a656:	d812      	bhi.n	800a67e <_realloc_r+0x5a>
 800a658:	4621      	mov	r1, r4
 800a65a:	4640      	mov	r0, r8
 800a65c:	f7ff ff6e 	bl	800a53c <_malloc_r>
 800a660:	4605      	mov	r5, r0
 800a662:	2800      	cmp	r0, #0
 800a664:	d0ed      	beq.n	800a642 <_realloc_r+0x1e>
 800a666:	42bc      	cmp	r4, r7
 800a668:	4622      	mov	r2, r4
 800a66a:	4631      	mov	r1, r6
 800a66c:	bf28      	it	cs
 800a66e:	463a      	movcs	r2, r7
 800a670:	f7ff fed0 	bl	800a414 <memcpy>
 800a674:	4631      	mov	r1, r6
 800a676:	4640      	mov	r0, r8
 800a678:	f7ff fef4 	bl	800a464 <_free_r>
 800a67c:	e7e1      	b.n	800a642 <_realloc_r+0x1e>
 800a67e:	4635      	mov	r5, r6
 800a680:	e7df      	b.n	800a642 <_realloc_r+0x1e>
	...

0800a684 <_sbrk_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d06      	ldr	r5, [pc, #24]	; (800a6a0 <_sbrk_r+0x1c>)
 800a688:	2300      	movs	r3, #0
 800a68a:	4604      	mov	r4, r0
 800a68c:	4608      	mov	r0, r1
 800a68e:	602b      	str	r3, [r5, #0]
 800a690:	f7f7 ff8a 	bl	80025a8 <_sbrk>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_sbrk_r+0x1a>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_sbrk_r+0x1a>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	20006794 	.word	0x20006794

0800a6a4 <__malloc_lock>:
 800a6a4:	4801      	ldr	r0, [pc, #4]	; (800a6ac <__malloc_lock+0x8>)
 800a6a6:	f000 b811 	b.w	800a6cc <__retarget_lock_acquire_recursive>
 800a6aa:	bf00      	nop
 800a6ac:	20006798 	.word	0x20006798

0800a6b0 <__malloc_unlock>:
 800a6b0:	4801      	ldr	r0, [pc, #4]	; (800a6b8 <__malloc_unlock+0x8>)
 800a6b2:	f000 b80c 	b.w	800a6ce <__retarget_lock_release_recursive>
 800a6b6:	bf00      	nop
 800a6b8:	20006798 	.word	0x20006798

0800a6bc <_malloc_usable_size_r>:
 800a6bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6c0:	1f18      	subs	r0, r3, #4
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	bfbc      	itt	lt
 800a6c6:	580b      	ldrlt	r3, [r1, r0]
 800a6c8:	18c0      	addlt	r0, r0, r3
 800a6ca:	4770      	bx	lr

0800a6cc <__retarget_lock_acquire_recursive>:
 800a6cc:	4770      	bx	lr

0800a6ce <__retarget_lock_release_recursive>:
 800a6ce:	4770      	bx	lr

0800a6d0 <pow>:
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	ed2d 8b02 	vpush	{d8}
 800a6d6:	eeb0 8a40 	vmov.f32	s16, s0
 800a6da:	eef0 8a60 	vmov.f32	s17, s1
 800a6de:	ec55 4b11 	vmov	r4, r5, d1
 800a6e2:	f000 f891 	bl	800a808 <__ieee754_pow>
 800a6e6:	4622      	mov	r2, r4
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	ec57 6b10 	vmov	r6, r7, d0
 800a6f2:	f7f6 fa3b 	bl	8000b6c <__aeabi_dcmpun>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d13b      	bne.n	800a772 <pow+0xa2>
 800a6fa:	ec51 0b18 	vmov	r0, r1, d8
 800a6fe:	2200      	movs	r2, #0
 800a700:	2300      	movs	r3, #0
 800a702:	f7f6 fa01 	bl	8000b08 <__aeabi_dcmpeq>
 800a706:	b1b8      	cbz	r0, 800a738 <pow+0x68>
 800a708:	2200      	movs	r2, #0
 800a70a:	2300      	movs	r3, #0
 800a70c:	4620      	mov	r0, r4
 800a70e:	4629      	mov	r1, r5
 800a710:	f7f6 f9fa 	bl	8000b08 <__aeabi_dcmpeq>
 800a714:	2800      	cmp	r0, #0
 800a716:	d146      	bne.n	800a7a6 <pow+0xd6>
 800a718:	ec45 4b10 	vmov	d0, r4, r5
 800a71c:	f000 fe8d 	bl	800b43a <finite>
 800a720:	b338      	cbz	r0, 800a772 <pow+0xa2>
 800a722:	2200      	movs	r2, #0
 800a724:	2300      	movs	r3, #0
 800a726:	4620      	mov	r0, r4
 800a728:	4629      	mov	r1, r5
 800a72a:	f7f6 f9f7 	bl	8000b1c <__aeabi_dcmplt>
 800a72e:	b300      	cbz	r0, 800a772 <pow+0xa2>
 800a730:	f7ff fb2e 	bl	8009d90 <__errno>
 800a734:	2322      	movs	r3, #34	; 0x22
 800a736:	e01b      	b.n	800a770 <pow+0xa0>
 800a738:	ec47 6b10 	vmov	d0, r6, r7
 800a73c:	f000 fe7d 	bl	800b43a <finite>
 800a740:	b9e0      	cbnz	r0, 800a77c <pow+0xac>
 800a742:	eeb0 0a48 	vmov.f32	s0, s16
 800a746:	eef0 0a68 	vmov.f32	s1, s17
 800a74a:	f000 fe76 	bl	800b43a <finite>
 800a74e:	b1a8      	cbz	r0, 800a77c <pow+0xac>
 800a750:	ec45 4b10 	vmov	d0, r4, r5
 800a754:	f000 fe71 	bl	800b43a <finite>
 800a758:	b180      	cbz	r0, 800a77c <pow+0xac>
 800a75a:	4632      	mov	r2, r6
 800a75c:	463b      	mov	r3, r7
 800a75e:	4630      	mov	r0, r6
 800a760:	4639      	mov	r1, r7
 800a762:	f7f6 fa03 	bl	8000b6c <__aeabi_dcmpun>
 800a766:	2800      	cmp	r0, #0
 800a768:	d0e2      	beq.n	800a730 <pow+0x60>
 800a76a:	f7ff fb11 	bl	8009d90 <__errno>
 800a76e:	2321      	movs	r3, #33	; 0x21
 800a770:	6003      	str	r3, [r0, #0]
 800a772:	ecbd 8b02 	vpop	{d8}
 800a776:	ec47 6b10 	vmov	d0, r6, r7
 800a77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a77c:	2200      	movs	r2, #0
 800a77e:	2300      	movs	r3, #0
 800a780:	4630      	mov	r0, r6
 800a782:	4639      	mov	r1, r7
 800a784:	f7f6 f9c0 	bl	8000b08 <__aeabi_dcmpeq>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d0f2      	beq.n	800a772 <pow+0xa2>
 800a78c:	eeb0 0a48 	vmov.f32	s0, s16
 800a790:	eef0 0a68 	vmov.f32	s1, s17
 800a794:	f000 fe51 	bl	800b43a <finite>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d0ea      	beq.n	800a772 <pow+0xa2>
 800a79c:	ec45 4b10 	vmov	d0, r4, r5
 800a7a0:	f000 fe4b 	bl	800b43a <finite>
 800a7a4:	e7c3      	b.n	800a72e <pow+0x5e>
 800a7a6:	4f01      	ldr	r7, [pc, #4]	; (800a7ac <pow+0xdc>)
 800a7a8:	2600      	movs	r6, #0
 800a7aa:	e7e2      	b.n	800a772 <pow+0xa2>
 800a7ac:	3ff00000 	.word	0x3ff00000

0800a7b0 <sqrt>:
 800a7b0:	b538      	push	{r3, r4, r5, lr}
 800a7b2:	ed2d 8b02 	vpush	{d8}
 800a7b6:	ec55 4b10 	vmov	r4, r5, d0
 800a7ba:	f000 fd53 	bl	800b264 <__ieee754_sqrt>
 800a7be:	4622      	mov	r2, r4
 800a7c0:	462b      	mov	r3, r5
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	eeb0 8a40 	vmov.f32	s16, s0
 800a7ca:	eef0 8a60 	vmov.f32	s17, s1
 800a7ce:	f7f6 f9cd 	bl	8000b6c <__aeabi_dcmpun>
 800a7d2:	b990      	cbnz	r0, 800a7fa <sqrt+0x4a>
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	4620      	mov	r0, r4
 800a7da:	4629      	mov	r1, r5
 800a7dc:	f7f6 f99e 	bl	8000b1c <__aeabi_dcmplt>
 800a7e0:	b158      	cbz	r0, 800a7fa <sqrt+0x4a>
 800a7e2:	f7ff fad5 	bl	8009d90 <__errno>
 800a7e6:	2321      	movs	r3, #33	; 0x21
 800a7e8:	6003      	str	r3, [r0, #0]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	f7f6 f84b 	bl	800088c <__aeabi_ddiv>
 800a7f6:	ec41 0b18 	vmov	d8, r0, r1
 800a7fa:	eeb0 0a48 	vmov.f32	s0, s16
 800a7fe:	eef0 0a68 	vmov.f32	s1, s17
 800a802:	ecbd 8b02 	vpop	{d8}
 800a806:	bd38      	pop	{r3, r4, r5, pc}

0800a808 <__ieee754_pow>:
 800a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	ed2d 8b06 	vpush	{d8-d10}
 800a810:	b089      	sub	sp, #36	; 0x24
 800a812:	ed8d 1b00 	vstr	d1, [sp]
 800a816:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a81a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a81e:	ea58 0102 	orrs.w	r1, r8, r2
 800a822:	ec57 6b10 	vmov	r6, r7, d0
 800a826:	d115      	bne.n	800a854 <__ieee754_pow+0x4c>
 800a828:	19b3      	adds	r3, r6, r6
 800a82a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a82e:	4152      	adcs	r2, r2
 800a830:	4299      	cmp	r1, r3
 800a832:	4b89      	ldr	r3, [pc, #548]	; (800aa58 <__ieee754_pow+0x250>)
 800a834:	4193      	sbcs	r3, r2
 800a836:	f080 84d2 	bcs.w	800b1de <__ieee754_pow+0x9d6>
 800a83a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a83e:	4630      	mov	r0, r6
 800a840:	4639      	mov	r1, r7
 800a842:	f7f5 fd43 	bl	80002cc <__adddf3>
 800a846:	ec41 0b10 	vmov	d0, r0, r1
 800a84a:	b009      	add	sp, #36	; 0x24
 800a84c:	ecbd 8b06 	vpop	{d8-d10}
 800a850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a854:	4b81      	ldr	r3, [pc, #516]	; (800aa5c <__ieee754_pow+0x254>)
 800a856:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a85a:	429c      	cmp	r4, r3
 800a85c:	ee10 aa10 	vmov	sl, s0
 800a860:	463d      	mov	r5, r7
 800a862:	dc06      	bgt.n	800a872 <__ieee754_pow+0x6a>
 800a864:	d101      	bne.n	800a86a <__ieee754_pow+0x62>
 800a866:	2e00      	cmp	r6, #0
 800a868:	d1e7      	bne.n	800a83a <__ieee754_pow+0x32>
 800a86a:	4598      	cmp	r8, r3
 800a86c:	dc01      	bgt.n	800a872 <__ieee754_pow+0x6a>
 800a86e:	d10f      	bne.n	800a890 <__ieee754_pow+0x88>
 800a870:	b172      	cbz	r2, 800a890 <__ieee754_pow+0x88>
 800a872:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a876:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a87a:	ea55 050a 	orrs.w	r5, r5, sl
 800a87e:	d1dc      	bne.n	800a83a <__ieee754_pow+0x32>
 800a880:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a884:	18db      	adds	r3, r3, r3
 800a886:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a88a:	4152      	adcs	r2, r2
 800a88c:	429d      	cmp	r5, r3
 800a88e:	e7d0      	b.n	800a832 <__ieee754_pow+0x2a>
 800a890:	2d00      	cmp	r5, #0
 800a892:	da3b      	bge.n	800a90c <__ieee754_pow+0x104>
 800a894:	4b72      	ldr	r3, [pc, #456]	; (800aa60 <__ieee754_pow+0x258>)
 800a896:	4598      	cmp	r8, r3
 800a898:	dc51      	bgt.n	800a93e <__ieee754_pow+0x136>
 800a89a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a89e:	4598      	cmp	r8, r3
 800a8a0:	f340 84ac 	ble.w	800b1fc <__ieee754_pow+0x9f4>
 800a8a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a8a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a8ac:	2b14      	cmp	r3, #20
 800a8ae:	dd0f      	ble.n	800a8d0 <__ieee754_pow+0xc8>
 800a8b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a8b4:	fa22 f103 	lsr.w	r1, r2, r3
 800a8b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	f040 849d 	bne.w	800b1fc <__ieee754_pow+0x9f4>
 800a8c2:	f001 0101 	and.w	r1, r1, #1
 800a8c6:	f1c1 0302 	rsb	r3, r1, #2
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	b182      	cbz	r2, 800a8f0 <__ieee754_pow+0xe8>
 800a8ce:	e05f      	b.n	800a990 <__ieee754_pow+0x188>
 800a8d0:	2a00      	cmp	r2, #0
 800a8d2:	d15b      	bne.n	800a98c <__ieee754_pow+0x184>
 800a8d4:	f1c3 0314 	rsb	r3, r3, #20
 800a8d8:	fa48 f103 	asr.w	r1, r8, r3
 800a8dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a8e0:	4543      	cmp	r3, r8
 800a8e2:	f040 8488 	bne.w	800b1f6 <__ieee754_pow+0x9ee>
 800a8e6:	f001 0101 	and.w	r1, r1, #1
 800a8ea:	f1c1 0302 	rsb	r3, r1, #2
 800a8ee:	9304      	str	r3, [sp, #16]
 800a8f0:	4b5c      	ldr	r3, [pc, #368]	; (800aa64 <__ieee754_pow+0x25c>)
 800a8f2:	4598      	cmp	r8, r3
 800a8f4:	d132      	bne.n	800a95c <__ieee754_pow+0x154>
 800a8f6:	f1b9 0f00 	cmp.w	r9, #0
 800a8fa:	f280 8478 	bge.w	800b1ee <__ieee754_pow+0x9e6>
 800a8fe:	4959      	ldr	r1, [pc, #356]	; (800aa64 <__ieee754_pow+0x25c>)
 800a900:	4632      	mov	r2, r6
 800a902:	463b      	mov	r3, r7
 800a904:	2000      	movs	r0, #0
 800a906:	f7f5 ffc1 	bl	800088c <__aeabi_ddiv>
 800a90a:	e79c      	b.n	800a846 <__ieee754_pow+0x3e>
 800a90c:	2300      	movs	r3, #0
 800a90e:	9304      	str	r3, [sp, #16]
 800a910:	2a00      	cmp	r2, #0
 800a912:	d13d      	bne.n	800a990 <__ieee754_pow+0x188>
 800a914:	4b51      	ldr	r3, [pc, #324]	; (800aa5c <__ieee754_pow+0x254>)
 800a916:	4598      	cmp	r8, r3
 800a918:	d1ea      	bne.n	800a8f0 <__ieee754_pow+0xe8>
 800a91a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a91e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a922:	ea53 030a 	orrs.w	r3, r3, sl
 800a926:	f000 845a 	beq.w	800b1de <__ieee754_pow+0x9d6>
 800a92a:	4b4f      	ldr	r3, [pc, #316]	; (800aa68 <__ieee754_pow+0x260>)
 800a92c:	429c      	cmp	r4, r3
 800a92e:	dd08      	ble.n	800a942 <__ieee754_pow+0x13a>
 800a930:	f1b9 0f00 	cmp.w	r9, #0
 800a934:	f2c0 8457 	blt.w	800b1e6 <__ieee754_pow+0x9de>
 800a938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a93c:	e783      	b.n	800a846 <__ieee754_pow+0x3e>
 800a93e:	2302      	movs	r3, #2
 800a940:	e7e5      	b.n	800a90e <__ieee754_pow+0x106>
 800a942:	f1b9 0f00 	cmp.w	r9, #0
 800a946:	f04f 0000 	mov.w	r0, #0
 800a94a:	f04f 0100 	mov.w	r1, #0
 800a94e:	f6bf af7a 	bge.w	800a846 <__ieee754_pow+0x3e>
 800a952:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a956:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a95a:	e774      	b.n	800a846 <__ieee754_pow+0x3e>
 800a95c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a960:	d106      	bne.n	800a970 <__ieee754_pow+0x168>
 800a962:	4632      	mov	r2, r6
 800a964:	463b      	mov	r3, r7
 800a966:	4630      	mov	r0, r6
 800a968:	4639      	mov	r1, r7
 800a96a:	f7f5 fe65 	bl	8000638 <__aeabi_dmul>
 800a96e:	e76a      	b.n	800a846 <__ieee754_pow+0x3e>
 800a970:	4b3e      	ldr	r3, [pc, #248]	; (800aa6c <__ieee754_pow+0x264>)
 800a972:	4599      	cmp	r9, r3
 800a974:	d10c      	bne.n	800a990 <__ieee754_pow+0x188>
 800a976:	2d00      	cmp	r5, #0
 800a978:	db0a      	blt.n	800a990 <__ieee754_pow+0x188>
 800a97a:	ec47 6b10 	vmov	d0, r6, r7
 800a97e:	b009      	add	sp, #36	; 0x24
 800a980:	ecbd 8b06 	vpop	{d8-d10}
 800a984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a988:	f000 bc6c 	b.w	800b264 <__ieee754_sqrt>
 800a98c:	2300      	movs	r3, #0
 800a98e:	9304      	str	r3, [sp, #16]
 800a990:	ec47 6b10 	vmov	d0, r6, r7
 800a994:	f000 fd48 	bl	800b428 <fabs>
 800a998:	ec51 0b10 	vmov	r0, r1, d0
 800a99c:	f1ba 0f00 	cmp.w	sl, #0
 800a9a0:	d129      	bne.n	800a9f6 <__ieee754_pow+0x1ee>
 800a9a2:	b124      	cbz	r4, 800a9ae <__ieee754_pow+0x1a6>
 800a9a4:	4b2f      	ldr	r3, [pc, #188]	; (800aa64 <__ieee754_pow+0x25c>)
 800a9a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d123      	bne.n	800a9f6 <__ieee754_pow+0x1ee>
 800a9ae:	f1b9 0f00 	cmp.w	r9, #0
 800a9b2:	da05      	bge.n	800a9c0 <__ieee754_pow+0x1b8>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	492a      	ldr	r1, [pc, #168]	; (800aa64 <__ieee754_pow+0x25c>)
 800a9bc:	f7f5 ff66 	bl	800088c <__aeabi_ddiv>
 800a9c0:	2d00      	cmp	r5, #0
 800a9c2:	f6bf af40 	bge.w	800a846 <__ieee754_pow+0x3e>
 800a9c6:	9b04      	ldr	r3, [sp, #16]
 800a9c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a9cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a9d0:	4323      	orrs	r3, r4
 800a9d2:	d108      	bne.n	800a9e6 <__ieee754_pow+0x1de>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4610      	mov	r0, r2
 800a9da:	4619      	mov	r1, r3
 800a9dc:	f7f5 fc74 	bl	80002c8 <__aeabi_dsub>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	e78f      	b.n	800a906 <__ieee754_pow+0xfe>
 800a9e6:	9b04      	ldr	r3, [sp, #16]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	f47f af2c 	bne.w	800a846 <__ieee754_pow+0x3e>
 800a9ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	e727      	b.n	800a846 <__ieee754_pow+0x3e>
 800a9f6:	0feb      	lsrs	r3, r5, #31
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	9306      	str	r3, [sp, #24]
 800a9fc:	9a06      	ldr	r2, [sp, #24]
 800a9fe:	9b04      	ldr	r3, [sp, #16]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	d102      	bne.n	800aa0a <__ieee754_pow+0x202>
 800aa04:	4632      	mov	r2, r6
 800aa06:	463b      	mov	r3, r7
 800aa08:	e7e6      	b.n	800a9d8 <__ieee754_pow+0x1d0>
 800aa0a:	4b19      	ldr	r3, [pc, #100]	; (800aa70 <__ieee754_pow+0x268>)
 800aa0c:	4598      	cmp	r8, r3
 800aa0e:	f340 80fb 	ble.w	800ac08 <__ieee754_pow+0x400>
 800aa12:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800aa16:	4598      	cmp	r8, r3
 800aa18:	4b13      	ldr	r3, [pc, #76]	; (800aa68 <__ieee754_pow+0x260>)
 800aa1a:	dd0c      	ble.n	800aa36 <__ieee754_pow+0x22e>
 800aa1c:	429c      	cmp	r4, r3
 800aa1e:	dc0f      	bgt.n	800aa40 <__ieee754_pow+0x238>
 800aa20:	f1b9 0f00 	cmp.w	r9, #0
 800aa24:	da0f      	bge.n	800aa46 <__ieee754_pow+0x23e>
 800aa26:	2000      	movs	r0, #0
 800aa28:	b009      	add	sp, #36	; 0x24
 800aa2a:	ecbd 8b06 	vpop	{d8-d10}
 800aa2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa32:	f000 bcf0 	b.w	800b416 <__math_oflow>
 800aa36:	429c      	cmp	r4, r3
 800aa38:	dbf2      	blt.n	800aa20 <__ieee754_pow+0x218>
 800aa3a:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <__ieee754_pow+0x25c>)
 800aa3c:	429c      	cmp	r4, r3
 800aa3e:	dd19      	ble.n	800aa74 <__ieee754_pow+0x26c>
 800aa40:	f1b9 0f00 	cmp.w	r9, #0
 800aa44:	dcef      	bgt.n	800aa26 <__ieee754_pow+0x21e>
 800aa46:	2000      	movs	r0, #0
 800aa48:	b009      	add	sp, #36	; 0x24
 800aa4a:	ecbd 8b06 	vpop	{d8-d10}
 800aa4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa52:	f000 bcd7 	b.w	800b404 <__math_uflow>
 800aa56:	bf00      	nop
 800aa58:	fff00000 	.word	0xfff00000
 800aa5c:	7ff00000 	.word	0x7ff00000
 800aa60:	433fffff 	.word	0x433fffff
 800aa64:	3ff00000 	.word	0x3ff00000
 800aa68:	3fefffff 	.word	0x3fefffff
 800aa6c:	3fe00000 	.word	0x3fe00000
 800aa70:	41e00000 	.word	0x41e00000
 800aa74:	4b60      	ldr	r3, [pc, #384]	; (800abf8 <__ieee754_pow+0x3f0>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	f7f5 fc26 	bl	80002c8 <__aeabi_dsub>
 800aa7c:	a354      	add	r3, pc, #336	; (adr r3, 800abd0 <__ieee754_pow+0x3c8>)
 800aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa82:	4604      	mov	r4, r0
 800aa84:	460d      	mov	r5, r1
 800aa86:	f7f5 fdd7 	bl	8000638 <__aeabi_dmul>
 800aa8a:	a353      	add	r3, pc, #332	; (adr r3, 800abd8 <__ieee754_pow+0x3d0>)
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	4606      	mov	r6, r0
 800aa92:	460f      	mov	r7, r1
 800aa94:	4620      	mov	r0, r4
 800aa96:	4629      	mov	r1, r5
 800aa98:	f7f5 fdce 	bl	8000638 <__aeabi_dmul>
 800aa9c:	4b57      	ldr	r3, [pc, #348]	; (800abfc <__ieee754_pow+0x3f4>)
 800aa9e:	4682      	mov	sl, r0
 800aaa0:	468b      	mov	fp, r1
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	f7f5 fdc6 	bl	8000638 <__aeabi_dmul>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	a14b      	add	r1, pc, #300	; (adr r1, 800abe0 <__ieee754_pow+0x3d8>)
 800aab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aab6:	f7f5 fc07 	bl	80002c8 <__aeabi_dsub>
 800aaba:	4622      	mov	r2, r4
 800aabc:	462b      	mov	r3, r5
 800aabe:	f7f5 fdbb 	bl	8000638 <__aeabi_dmul>
 800aac2:	4602      	mov	r2, r0
 800aac4:	460b      	mov	r3, r1
 800aac6:	2000      	movs	r0, #0
 800aac8:	494d      	ldr	r1, [pc, #308]	; (800ac00 <__ieee754_pow+0x3f8>)
 800aaca:	f7f5 fbfd 	bl	80002c8 <__aeabi_dsub>
 800aace:	4622      	mov	r2, r4
 800aad0:	4680      	mov	r8, r0
 800aad2:	4689      	mov	r9, r1
 800aad4:	462b      	mov	r3, r5
 800aad6:	4620      	mov	r0, r4
 800aad8:	4629      	mov	r1, r5
 800aada:	f7f5 fdad 	bl	8000638 <__aeabi_dmul>
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	4640      	mov	r0, r8
 800aae4:	4649      	mov	r1, r9
 800aae6:	f7f5 fda7 	bl	8000638 <__aeabi_dmul>
 800aaea:	a33f      	add	r3, pc, #252	; (adr r3, 800abe8 <__ieee754_pow+0x3e0>)
 800aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf0:	f7f5 fda2 	bl	8000638 <__aeabi_dmul>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4650      	mov	r0, sl
 800aafa:	4659      	mov	r1, fp
 800aafc:	f7f5 fbe4 	bl	80002c8 <__aeabi_dsub>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	4680      	mov	r8, r0
 800ab06:	4689      	mov	r9, r1
 800ab08:	4630      	mov	r0, r6
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	f7f5 fbde 	bl	80002cc <__adddf3>
 800ab10:	2000      	movs	r0, #0
 800ab12:	4632      	mov	r2, r6
 800ab14:	463b      	mov	r3, r7
 800ab16:	4604      	mov	r4, r0
 800ab18:	460d      	mov	r5, r1
 800ab1a:	f7f5 fbd5 	bl	80002c8 <__aeabi_dsub>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	460b      	mov	r3, r1
 800ab22:	4640      	mov	r0, r8
 800ab24:	4649      	mov	r1, r9
 800ab26:	f7f5 fbcf 	bl	80002c8 <__aeabi_dsub>
 800ab2a:	9b04      	ldr	r3, [sp, #16]
 800ab2c:	9a06      	ldr	r2, [sp, #24]
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	4313      	orrs	r3, r2
 800ab32:	4682      	mov	sl, r0
 800ab34:	468b      	mov	fp, r1
 800ab36:	f040 81e7 	bne.w	800af08 <__ieee754_pow+0x700>
 800ab3a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800abf0 <__ieee754_pow+0x3e8>
 800ab3e:	eeb0 8a47 	vmov.f32	s16, s14
 800ab42:	eef0 8a67 	vmov.f32	s17, s15
 800ab46:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ab4a:	2600      	movs	r6, #0
 800ab4c:	4632      	mov	r2, r6
 800ab4e:	463b      	mov	r3, r7
 800ab50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab54:	f7f5 fbb8 	bl	80002c8 <__aeabi_dsub>
 800ab58:	4622      	mov	r2, r4
 800ab5a:	462b      	mov	r3, r5
 800ab5c:	f7f5 fd6c 	bl	8000638 <__aeabi_dmul>
 800ab60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab64:	4680      	mov	r8, r0
 800ab66:	4689      	mov	r9, r1
 800ab68:	4650      	mov	r0, sl
 800ab6a:	4659      	mov	r1, fp
 800ab6c:	f7f5 fd64 	bl	8000638 <__aeabi_dmul>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4640      	mov	r0, r8
 800ab76:	4649      	mov	r1, r9
 800ab78:	f7f5 fba8 	bl	80002cc <__adddf3>
 800ab7c:	4632      	mov	r2, r6
 800ab7e:	463b      	mov	r3, r7
 800ab80:	4680      	mov	r8, r0
 800ab82:	4689      	mov	r9, r1
 800ab84:	4620      	mov	r0, r4
 800ab86:	4629      	mov	r1, r5
 800ab88:	f7f5 fd56 	bl	8000638 <__aeabi_dmul>
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	4604      	mov	r4, r0
 800ab90:	460d      	mov	r5, r1
 800ab92:	4602      	mov	r2, r0
 800ab94:	4649      	mov	r1, r9
 800ab96:	4640      	mov	r0, r8
 800ab98:	f7f5 fb98 	bl	80002cc <__adddf3>
 800ab9c:	4b19      	ldr	r3, [pc, #100]	; (800ac04 <__ieee754_pow+0x3fc>)
 800ab9e:	4299      	cmp	r1, r3
 800aba0:	ec45 4b19 	vmov	d9, r4, r5
 800aba4:	4606      	mov	r6, r0
 800aba6:	460f      	mov	r7, r1
 800aba8:	468b      	mov	fp, r1
 800abaa:	f340 82f1 	ble.w	800b190 <__ieee754_pow+0x988>
 800abae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800abb2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800abb6:	4303      	orrs	r3, r0
 800abb8:	f000 81e4 	beq.w	800af84 <__ieee754_pow+0x77c>
 800abbc:	ec51 0b18 	vmov	r0, r1, d8
 800abc0:	2200      	movs	r2, #0
 800abc2:	2300      	movs	r3, #0
 800abc4:	f7f5 ffaa 	bl	8000b1c <__aeabi_dcmplt>
 800abc8:	3800      	subs	r0, #0
 800abca:	bf18      	it	ne
 800abcc:	2001      	movne	r0, #1
 800abce:	e72b      	b.n	800aa28 <__ieee754_pow+0x220>
 800abd0:	60000000 	.word	0x60000000
 800abd4:	3ff71547 	.word	0x3ff71547
 800abd8:	f85ddf44 	.word	0xf85ddf44
 800abdc:	3e54ae0b 	.word	0x3e54ae0b
 800abe0:	55555555 	.word	0x55555555
 800abe4:	3fd55555 	.word	0x3fd55555
 800abe8:	652b82fe 	.word	0x652b82fe
 800abec:	3ff71547 	.word	0x3ff71547
 800abf0:	00000000 	.word	0x00000000
 800abf4:	bff00000 	.word	0xbff00000
 800abf8:	3ff00000 	.word	0x3ff00000
 800abfc:	3fd00000 	.word	0x3fd00000
 800ac00:	3fe00000 	.word	0x3fe00000
 800ac04:	408fffff 	.word	0x408fffff
 800ac08:	4bd5      	ldr	r3, [pc, #852]	; (800af60 <__ieee754_pow+0x758>)
 800ac0a:	402b      	ands	r3, r5
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	b92b      	cbnz	r3, 800ac1c <__ieee754_pow+0x414>
 800ac10:	4bd4      	ldr	r3, [pc, #848]	; (800af64 <__ieee754_pow+0x75c>)
 800ac12:	f7f5 fd11 	bl	8000638 <__aeabi_dmul>
 800ac16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	1523      	asrs	r3, r4, #20
 800ac1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ac22:	4413      	add	r3, r2
 800ac24:	9305      	str	r3, [sp, #20]
 800ac26:	4bd0      	ldr	r3, [pc, #832]	; (800af68 <__ieee754_pow+0x760>)
 800ac28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ac2c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ac30:	429c      	cmp	r4, r3
 800ac32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ac36:	dd08      	ble.n	800ac4a <__ieee754_pow+0x442>
 800ac38:	4bcc      	ldr	r3, [pc, #816]	; (800af6c <__ieee754_pow+0x764>)
 800ac3a:	429c      	cmp	r4, r3
 800ac3c:	f340 8162 	ble.w	800af04 <__ieee754_pow+0x6fc>
 800ac40:	9b05      	ldr	r3, [sp, #20]
 800ac42:	3301      	adds	r3, #1
 800ac44:	9305      	str	r3, [sp, #20]
 800ac46:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ac4a:	2400      	movs	r4, #0
 800ac4c:	00e3      	lsls	r3, r4, #3
 800ac4e:	9307      	str	r3, [sp, #28]
 800ac50:	4bc7      	ldr	r3, [pc, #796]	; (800af70 <__ieee754_pow+0x768>)
 800ac52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac56:	ed93 7b00 	vldr	d7, [r3]
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	ec53 2b17 	vmov	r2, r3, d7
 800ac60:	eeb0 9a47 	vmov.f32	s18, s14
 800ac64:	eef0 9a67 	vmov.f32	s19, s15
 800ac68:	4682      	mov	sl, r0
 800ac6a:	f7f5 fb2d 	bl	80002c8 <__aeabi_dsub>
 800ac6e:	4652      	mov	r2, sl
 800ac70:	4606      	mov	r6, r0
 800ac72:	460f      	mov	r7, r1
 800ac74:	462b      	mov	r3, r5
 800ac76:	ec51 0b19 	vmov	r0, r1, d9
 800ac7a:	f7f5 fb27 	bl	80002cc <__adddf3>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	2000      	movs	r0, #0
 800ac84:	49bb      	ldr	r1, [pc, #748]	; (800af74 <__ieee754_pow+0x76c>)
 800ac86:	f7f5 fe01 	bl	800088c <__aeabi_ddiv>
 800ac8a:	ec41 0b1a 	vmov	d10, r0, r1
 800ac8e:	4602      	mov	r2, r0
 800ac90:	460b      	mov	r3, r1
 800ac92:	4630      	mov	r0, r6
 800ac94:	4639      	mov	r1, r7
 800ac96:	f7f5 fccf 	bl	8000638 <__aeabi_dmul>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aca0:	9302      	str	r3, [sp, #8]
 800aca2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aca6:	46ab      	mov	fp, r5
 800aca8:	106d      	asrs	r5, r5, #1
 800acaa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800acae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800acb2:	ec41 0b18 	vmov	d8, r0, r1
 800acb6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800acba:	2200      	movs	r2, #0
 800acbc:	4640      	mov	r0, r8
 800acbe:	4649      	mov	r1, r9
 800acc0:	4614      	mov	r4, r2
 800acc2:	461d      	mov	r5, r3
 800acc4:	f7f5 fcb8 	bl	8000638 <__aeabi_dmul>
 800acc8:	4602      	mov	r2, r0
 800acca:	460b      	mov	r3, r1
 800accc:	4630      	mov	r0, r6
 800acce:	4639      	mov	r1, r7
 800acd0:	f7f5 fafa 	bl	80002c8 <__aeabi_dsub>
 800acd4:	ec53 2b19 	vmov	r2, r3, d9
 800acd8:	4606      	mov	r6, r0
 800acda:	460f      	mov	r7, r1
 800acdc:	4620      	mov	r0, r4
 800acde:	4629      	mov	r1, r5
 800ace0:	f7f5 faf2 	bl	80002c8 <__aeabi_dsub>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4650      	mov	r0, sl
 800acea:	4659      	mov	r1, fp
 800acec:	f7f5 faec 	bl	80002c8 <__aeabi_dsub>
 800acf0:	4642      	mov	r2, r8
 800acf2:	464b      	mov	r3, r9
 800acf4:	f7f5 fca0 	bl	8000638 <__aeabi_dmul>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	4630      	mov	r0, r6
 800acfe:	4639      	mov	r1, r7
 800ad00:	f7f5 fae2 	bl	80002c8 <__aeabi_dsub>
 800ad04:	ec53 2b1a 	vmov	r2, r3, d10
 800ad08:	f7f5 fc96 	bl	8000638 <__aeabi_dmul>
 800ad0c:	ec53 2b18 	vmov	r2, r3, d8
 800ad10:	ec41 0b19 	vmov	d9, r0, r1
 800ad14:	ec51 0b18 	vmov	r0, r1, d8
 800ad18:	f7f5 fc8e 	bl	8000638 <__aeabi_dmul>
 800ad1c:	a37c      	add	r3, pc, #496	; (adr r3, 800af10 <__ieee754_pow+0x708>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	4604      	mov	r4, r0
 800ad24:	460d      	mov	r5, r1
 800ad26:	f7f5 fc87 	bl	8000638 <__aeabi_dmul>
 800ad2a:	a37b      	add	r3, pc, #492	; (adr r3, 800af18 <__ieee754_pow+0x710>)
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	f7f5 facc 	bl	80002cc <__adddf3>
 800ad34:	4622      	mov	r2, r4
 800ad36:	462b      	mov	r3, r5
 800ad38:	f7f5 fc7e 	bl	8000638 <__aeabi_dmul>
 800ad3c:	a378      	add	r3, pc, #480	; (adr r3, 800af20 <__ieee754_pow+0x718>)
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	f7f5 fac3 	bl	80002cc <__adddf3>
 800ad46:	4622      	mov	r2, r4
 800ad48:	462b      	mov	r3, r5
 800ad4a:	f7f5 fc75 	bl	8000638 <__aeabi_dmul>
 800ad4e:	a376      	add	r3, pc, #472	; (adr r3, 800af28 <__ieee754_pow+0x720>)
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	f7f5 faba 	bl	80002cc <__adddf3>
 800ad58:	4622      	mov	r2, r4
 800ad5a:	462b      	mov	r3, r5
 800ad5c:	f7f5 fc6c 	bl	8000638 <__aeabi_dmul>
 800ad60:	a373      	add	r3, pc, #460	; (adr r3, 800af30 <__ieee754_pow+0x728>)
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	f7f5 fab1 	bl	80002cc <__adddf3>
 800ad6a:	4622      	mov	r2, r4
 800ad6c:	462b      	mov	r3, r5
 800ad6e:	f7f5 fc63 	bl	8000638 <__aeabi_dmul>
 800ad72:	a371      	add	r3, pc, #452	; (adr r3, 800af38 <__ieee754_pow+0x730>)
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	f7f5 faa8 	bl	80002cc <__adddf3>
 800ad7c:	4622      	mov	r2, r4
 800ad7e:	4606      	mov	r6, r0
 800ad80:	460f      	mov	r7, r1
 800ad82:	462b      	mov	r3, r5
 800ad84:	4620      	mov	r0, r4
 800ad86:	4629      	mov	r1, r5
 800ad88:	f7f5 fc56 	bl	8000638 <__aeabi_dmul>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4630      	mov	r0, r6
 800ad92:	4639      	mov	r1, r7
 800ad94:	f7f5 fc50 	bl	8000638 <__aeabi_dmul>
 800ad98:	4642      	mov	r2, r8
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	460d      	mov	r5, r1
 800ad9e:	464b      	mov	r3, r9
 800ada0:	ec51 0b18 	vmov	r0, r1, d8
 800ada4:	f7f5 fa92 	bl	80002cc <__adddf3>
 800ada8:	ec53 2b19 	vmov	r2, r3, d9
 800adac:	f7f5 fc44 	bl	8000638 <__aeabi_dmul>
 800adb0:	4622      	mov	r2, r4
 800adb2:	462b      	mov	r3, r5
 800adb4:	f7f5 fa8a 	bl	80002cc <__adddf3>
 800adb8:	4642      	mov	r2, r8
 800adba:	4682      	mov	sl, r0
 800adbc:	468b      	mov	fp, r1
 800adbe:	464b      	mov	r3, r9
 800adc0:	4640      	mov	r0, r8
 800adc2:	4649      	mov	r1, r9
 800adc4:	f7f5 fc38 	bl	8000638 <__aeabi_dmul>
 800adc8:	4b6b      	ldr	r3, [pc, #428]	; (800af78 <__ieee754_pow+0x770>)
 800adca:	2200      	movs	r2, #0
 800adcc:	4606      	mov	r6, r0
 800adce:	460f      	mov	r7, r1
 800add0:	f7f5 fa7c 	bl	80002cc <__adddf3>
 800add4:	4652      	mov	r2, sl
 800add6:	465b      	mov	r3, fp
 800add8:	f7f5 fa78 	bl	80002cc <__adddf3>
 800addc:	2000      	movs	r0, #0
 800adde:	4604      	mov	r4, r0
 800ade0:	460d      	mov	r5, r1
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	4640      	mov	r0, r8
 800ade8:	4649      	mov	r1, r9
 800adea:	f7f5 fc25 	bl	8000638 <__aeabi_dmul>
 800adee:	4b62      	ldr	r3, [pc, #392]	; (800af78 <__ieee754_pow+0x770>)
 800adf0:	4680      	mov	r8, r0
 800adf2:	4689      	mov	r9, r1
 800adf4:	2200      	movs	r2, #0
 800adf6:	4620      	mov	r0, r4
 800adf8:	4629      	mov	r1, r5
 800adfa:	f7f5 fa65 	bl	80002c8 <__aeabi_dsub>
 800adfe:	4632      	mov	r2, r6
 800ae00:	463b      	mov	r3, r7
 800ae02:	f7f5 fa61 	bl	80002c8 <__aeabi_dsub>
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4650      	mov	r0, sl
 800ae0c:	4659      	mov	r1, fp
 800ae0e:	f7f5 fa5b 	bl	80002c8 <__aeabi_dsub>
 800ae12:	ec53 2b18 	vmov	r2, r3, d8
 800ae16:	f7f5 fc0f 	bl	8000638 <__aeabi_dmul>
 800ae1a:	4622      	mov	r2, r4
 800ae1c:	4606      	mov	r6, r0
 800ae1e:	460f      	mov	r7, r1
 800ae20:	462b      	mov	r3, r5
 800ae22:	ec51 0b19 	vmov	r0, r1, d9
 800ae26:	f7f5 fc07 	bl	8000638 <__aeabi_dmul>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	4630      	mov	r0, r6
 800ae30:	4639      	mov	r1, r7
 800ae32:	f7f5 fa4b 	bl	80002cc <__adddf3>
 800ae36:	4606      	mov	r6, r0
 800ae38:	460f      	mov	r7, r1
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4640      	mov	r0, r8
 800ae40:	4649      	mov	r1, r9
 800ae42:	f7f5 fa43 	bl	80002cc <__adddf3>
 800ae46:	a33e      	add	r3, pc, #248	; (adr r3, 800af40 <__ieee754_pow+0x738>)
 800ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	4604      	mov	r4, r0
 800ae50:	460d      	mov	r5, r1
 800ae52:	f7f5 fbf1 	bl	8000638 <__aeabi_dmul>
 800ae56:	4642      	mov	r2, r8
 800ae58:	ec41 0b18 	vmov	d8, r0, r1
 800ae5c:	464b      	mov	r3, r9
 800ae5e:	4620      	mov	r0, r4
 800ae60:	4629      	mov	r1, r5
 800ae62:	f7f5 fa31 	bl	80002c8 <__aeabi_dsub>
 800ae66:	4602      	mov	r2, r0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	4639      	mov	r1, r7
 800ae6e:	f7f5 fa2b 	bl	80002c8 <__aeabi_dsub>
 800ae72:	a335      	add	r3, pc, #212	; (adr r3, 800af48 <__ieee754_pow+0x740>)
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	f7f5 fbde 	bl	8000638 <__aeabi_dmul>
 800ae7c:	a334      	add	r3, pc, #208	; (adr r3, 800af50 <__ieee754_pow+0x748>)
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	4606      	mov	r6, r0
 800ae84:	460f      	mov	r7, r1
 800ae86:	4620      	mov	r0, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f7f5 fbd5 	bl	8000638 <__aeabi_dmul>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	4630      	mov	r0, r6
 800ae94:	4639      	mov	r1, r7
 800ae96:	f7f5 fa19 	bl	80002cc <__adddf3>
 800ae9a:	9a07      	ldr	r2, [sp, #28]
 800ae9c:	4b37      	ldr	r3, [pc, #220]	; (800af7c <__ieee754_pow+0x774>)
 800ae9e:	4413      	add	r3, r2
 800aea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea4:	f7f5 fa12 	bl	80002cc <__adddf3>
 800aea8:	4682      	mov	sl, r0
 800aeaa:	9805      	ldr	r0, [sp, #20]
 800aeac:	468b      	mov	fp, r1
 800aeae:	f7f5 fb59 	bl	8000564 <__aeabi_i2d>
 800aeb2:	9a07      	ldr	r2, [sp, #28]
 800aeb4:	4b32      	ldr	r3, [pc, #200]	; (800af80 <__ieee754_pow+0x778>)
 800aeb6:	4413      	add	r3, r2
 800aeb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aebc:	4606      	mov	r6, r0
 800aebe:	460f      	mov	r7, r1
 800aec0:	4652      	mov	r2, sl
 800aec2:	465b      	mov	r3, fp
 800aec4:	ec51 0b18 	vmov	r0, r1, d8
 800aec8:	f7f5 fa00 	bl	80002cc <__adddf3>
 800aecc:	4642      	mov	r2, r8
 800aece:	464b      	mov	r3, r9
 800aed0:	f7f5 f9fc 	bl	80002cc <__adddf3>
 800aed4:	4632      	mov	r2, r6
 800aed6:	463b      	mov	r3, r7
 800aed8:	f7f5 f9f8 	bl	80002cc <__adddf3>
 800aedc:	2000      	movs	r0, #0
 800aede:	4632      	mov	r2, r6
 800aee0:	463b      	mov	r3, r7
 800aee2:	4604      	mov	r4, r0
 800aee4:	460d      	mov	r5, r1
 800aee6:	f7f5 f9ef 	bl	80002c8 <__aeabi_dsub>
 800aeea:	4642      	mov	r2, r8
 800aeec:	464b      	mov	r3, r9
 800aeee:	f7f5 f9eb 	bl	80002c8 <__aeabi_dsub>
 800aef2:	ec53 2b18 	vmov	r2, r3, d8
 800aef6:	f7f5 f9e7 	bl	80002c8 <__aeabi_dsub>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	4650      	mov	r0, sl
 800af00:	4659      	mov	r1, fp
 800af02:	e610      	b.n	800ab26 <__ieee754_pow+0x31e>
 800af04:	2401      	movs	r4, #1
 800af06:	e6a1      	b.n	800ac4c <__ieee754_pow+0x444>
 800af08:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800af58 <__ieee754_pow+0x750>
 800af0c:	e617      	b.n	800ab3e <__ieee754_pow+0x336>
 800af0e:	bf00      	nop
 800af10:	4a454eef 	.word	0x4a454eef
 800af14:	3fca7e28 	.word	0x3fca7e28
 800af18:	93c9db65 	.word	0x93c9db65
 800af1c:	3fcd864a 	.word	0x3fcd864a
 800af20:	a91d4101 	.word	0xa91d4101
 800af24:	3fd17460 	.word	0x3fd17460
 800af28:	518f264d 	.word	0x518f264d
 800af2c:	3fd55555 	.word	0x3fd55555
 800af30:	db6fabff 	.word	0xdb6fabff
 800af34:	3fdb6db6 	.word	0x3fdb6db6
 800af38:	33333303 	.word	0x33333303
 800af3c:	3fe33333 	.word	0x3fe33333
 800af40:	e0000000 	.word	0xe0000000
 800af44:	3feec709 	.word	0x3feec709
 800af48:	dc3a03fd 	.word	0xdc3a03fd
 800af4c:	3feec709 	.word	0x3feec709
 800af50:	145b01f5 	.word	0x145b01f5
 800af54:	be3e2fe0 	.word	0xbe3e2fe0
 800af58:	00000000 	.word	0x00000000
 800af5c:	3ff00000 	.word	0x3ff00000
 800af60:	7ff00000 	.word	0x7ff00000
 800af64:	43400000 	.word	0x43400000
 800af68:	0003988e 	.word	0x0003988e
 800af6c:	000bb679 	.word	0x000bb679
 800af70:	0800bc00 	.word	0x0800bc00
 800af74:	3ff00000 	.word	0x3ff00000
 800af78:	40080000 	.word	0x40080000
 800af7c:	0800bc20 	.word	0x0800bc20
 800af80:	0800bc10 	.word	0x0800bc10
 800af84:	a3b5      	add	r3, pc, #724	; (adr r3, 800b25c <__ieee754_pow+0xa54>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	4640      	mov	r0, r8
 800af8c:	4649      	mov	r1, r9
 800af8e:	f7f5 f99d 	bl	80002cc <__adddf3>
 800af92:	4622      	mov	r2, r4
 800af94:	ec41 0b1a 	vmov	d10, r0, r1
 800af98:	462b      	mov	r3, r5
 800af9a:	4630      	mov	r0, r6
 800af9c:	4639      	mov	r1, r7
 800af9e:	f7f5 f993 	bl	80002c8 <__aeabi_dsub>
 800afa2:	4602      	mov	r2, r0
 800afa4:	460b      	mov	r3, r1
 800afa6:	ec51 0b1a 	vmov	r0, r1, d10
 800afaa:	f7f5 fdd5 	bl	8000b58 <__aeabi_dcmpgt>
 800afae:	2800      	cmp	r0, #0
 800afb0:	f47f ae04 	bne.w	800abbc <__ieee754_pow+0x3b4>
 800afb4:	4aa4      	ldr	r2, [pc, #656]	; (800b248 <__ieee754_pow+0xa40>)
 800afb6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800afba:	4293      	cmp	r3, r2
 800afbc:	f340 8108 	ble.w	800b1d0 <__ieee754_pow+0x9c8>
 800afc0:	151b      	asrs	r3, r3, #20
 800afc2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800afc6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800afca:	fa4a f303 	asr.w	r3, sl, r3
 800afce:	445b      	add	r3, fp
 800afd0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800afd4:	4e9d      	ldr	r6, [pc, #628]	; (800b24c <__ieee754_pow+0xa44>)
 800afd6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800afda:	4116      	asrs	r6, r2
 800afdc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800afe0:	2000      	movs	r0, #0
 800afe2:	ea23 0106 	bic.w	r1, r3, r6
 800afe6:	f1c2 0214 	rsb	r2, r2, #20
 800afea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800afee:	fa4a fa02 	asr.w	sl, sl, r2
 800aff2:	f1bb 0f00 	cmp.w	fp, #0
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	4620      	mov	r0, r4
 800affc:	4629      	mov	r1, r5
 800affe:	bfb8      	it	lt
 800b000:	f1ca 0a00 	rsblt	sl, sl, #0
 800b004:	f7f5 f960 	bl	80002c8 <__aeabi_dsub>
 800b008:	ec41 0b19 	vmov	d9, r0, r1
 800b00c:	4642      	mov	r2, r8
 800b00e:	464b      	mov	r3, r9
 800b010:	ec51 0b19 	vmov	r0, r1, d9
 800b014:	f7f5 f95a 	bl	80002cc <__adddf3>
 800b018:	a37b      	add	r3, pc, #492	; (adr r3, 800b208 <__ieee754_pow+0xa00>)
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	2000      	movs	r0, #0
 800b020:	4604      	mov	r4, r0
 800b022:	460d      	mov	r5, r1
 800b024:	f7f5 fb08 	bl	8000638 <__aeabi_dmul>
 800b028:	ec53 2b19 	vmov	r2, r3, d9
 800b02c:	4606      	mov	r6, r0
 800b02e:	460f      	mov	r7, r1
 800b030:	4620      	mov	r0, r4
 800b032:	4629      	mov	r1, r5
 800b034:	f7f5 f948 	bl	80002c8 <__aeabi_dsub>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	4640      	mov	r0, r8
 800b03e:	4649      	mov	r1, r9
 800b040:	f7f5 f942 	bl	80002c8 <__aeabi_dsub>
 800b044:	a372      	add	r3, pc, #456	; (adr r3, 800b210 <__ieee754_pow+0xa08>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	f7f5 faf5 	bl	8000638 <__aeabi_dmul>
 800b04e:	a372      	add	r3, pc, #456	; (adr r3, 800b218 <__ieee754_pow+0xa10>)
 800b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b054:	4680      	mov	r8, r0
 800b056:	4689      	mov	r9, r1
 800b058:	4620      	mov	r0, r4
 800b05a:	4629      	mov	r1, r5
 800b05c:	f7f5 faec 	bl	8000638 <__aeabi_dmul>
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	4640      	mov	r0, r8
 800b066:	4649      	mov	r1, r9
 800b068:	f7f5 f930 	bl	80002cc <__adddf3>
 800b06c:	4604      	mov	r4, r0
 800b06e:	460d      	mov	r5, r1
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4630      	mov	r0, r6
 800b076:	4639      	mov	r1, r7
 800b078:	f7f5 f928 	bl	80002cc <__adddf3>
 800b07c:	4632      	mov	r2, r6
 800b07e:	463b      	mov	r3, r7
 800b080:	4680      	mov	r8, r0
 800b082:	4689      	mov	r9, r1
 800b084:	f7f5 f920 	bl	80002c8 <__aeabi_dsub>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4620      	mov	r0, r4
 800b08e:	4629      	mov	r1, r5
 800b090:	f7f5 f91a 	bl	80002c8 <__aeabi_dsub>
 800b094:	4642      	mov	r2, r8
 800b096:	4606      	mov	r6, r0
 800b098:	460f      	mov	r7, r1
 800b09a:	464b      	mov	r3, r9
 800b09c:	4640      	mov	r0, r8
 800b09e:	4649      	mov	r1, r9
 800b0a0:	f7f5 faca 	bl	8000638 <__aeabi_dmul>
 800b0a4:	a35e      	add	r3, pc, #376	; (adr r3, 800b220 <__ieee754_pow+0xa18>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	460d      	mov	r5, r1
 800b0ae:	f7f5 fac3 	bl	8000638 <__aeabi_dmul>
 800b0b2:	a35d      	add	r3, pc, #372	; (adr r3, 800b228 <__ieee754_pow+0xa20>)
 800b0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b8:	f7f5 f906 	bl	80002c8 <__aeabi_dsub>
 800b0bc:	4622      	mov	r2, r4
 800b0be:	462b      	mov	r3, r5
 800b0c0:	f7f5 faba 	bl	8000638 <__aeabi_dmul>
 800b0c4:	a35a      	add	r3, pc, #360	; (adr r3, 800b230 <__ieee754_pow+0xa28>)
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	f7f5 f8ff 	bl	80002cc <__adddf3>
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	462b      	mov	r3, r5
 800b0d2:	f7f5 fab1 	bl	8000638 <__aeabi_dmul>
 800b0d6:	a358      	add	r3, pc, #352	; (adr r3, 800b238 <__ieee754_pow+0xa30>)
 800b0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0dc:	f7f5 f8f4 	bl	80002c8 <__aeabi_dsub>
 800b0e0:	4622      	mov	r2, r4
 800b0e2:	462b      	mov	r3, r5
 800b0e4:	f7f5 faa8 	bl	8000638 <__aeabi_dmul>
 800b0e8:	a355      	add	r3, pc, #340	; (adr r3, 800b240 <__ieee754_pow+0xa38>)
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	f7f5 f8ed 	bl	80002cc <__adddf3>
 800b0f2:	4622      	mov	r2, r4
 800b0f4:	462b      	mov	r3, r5
 800b0f6:	f7f5 fa9f 	bl	8000638 <__aeabi_dmul>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	4640      	mov	r0, r8
 800b100:	4649      	mov	r1, r9
 800b102:	f7f5 f8e1 	bl	80002c8 <__aeabi_dsub>
 800b106:	4604      	mov	r4, r0
 800b108:	460d      	mov	r5, r1
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4640      	mov	r0, r8
 800b110:	4649      	mov	r1, r9
 800b112:	f7f5 fa91 	bl	8000638 <__aeabi_dmul>
 800b116:	2200      	movs	r2, #0
 800b118:	ec41 0b19 	vmov	d9, r0, r1
 800b11c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b120:	4620      	mov	r0, r4
 800b122:	4629      	mov	r1, r5
 800b124:	f7f5 f8d0 	bl	80002c8 <__aeabi_dsub>
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	ec51 0b19 	vmov	r0, r1, d9
 800b130:	f7f5 fbac 	bl	800088c <__aeabi_ddiv>
 800b134:	4632      	mov	r2, r6
 800b136:	4604      	mov	r4, r0
 800b138:	460d      	mov	r5, r1
 800b13a:	463b      	mov	r3, r7
 800b13c:	4640      	mov	r0, r8
 800b13e:	4649      	mov	r1, r9
 800b140:	f7f5 fa7a 	bl	8000638 <__aeabi_dmul>
 800b144:	4632      	mov	r2, r6
 800b146:	463b      	mov	r3, r7
 800b148:	f7f5 f8c0 	bl	80002cc <__adddf3>
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	4620      	mov	r0, r4
 800b152:	4629      	mov	r1, r5
 800b154:	f7f5 f8b8 	bl	80002c8 <__aeabi_dsub>
 800b158:	4642      	mov	r2, r8
 800b15a:	464b      	mov	r3, r9
 800b15c:	f7f5 f8b4 	bl	80002c8 <__aeabi_dsub>
 800b160:	460b      	mov	r3, r1
 800b162:	4602      	mov	r2, r0
 800b164:	493a      	ldr	r1, [pc, #232]	; (800b250 <__ieee754_pow+0xa48>)
 800b166:	2000      	movs	r0, #0
 800b168:	f7f5 f8ae 	bl	80002c8 <__aeabi_dsub>
 800b16c:	ec41 0b10 	vmov	d0, r0, r1
 800b170:	ee10 3a90 	vmov	r3, s1
 800b174:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b17c:	da2b      	bge.n	800b1d6 <__ieee754_pow+0x9ce>
 800b17e:	4650      	mov	r0, sl
 800b180:	f000 f966 	bl	800b450 <scalbn>
 800b184:	ec51 0b10 	vmov	r0, r1, d0
 800b188:	ec53 2b18 	vmov	r2, r3, d8
 800b18c:	f7ff bbed 	b.w	800a96a <__ieee754_pow+0x162>
 800b190:	4b30      	ldr	r3, [pc, #192]	; (800b254 <__ieee754_pow+0xa4c>)
 800b192:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b196:	429e      	cmp	r6, r3
 800b198:	f77f af0c 	ble.w	800afb4 <__ieee754_pow+0x7ac>
 800b19c:	4b2e      	ldr	r3, [pc, #184]	; (800b258 <__ieee754_pow+0xa50>)
 800b19e:	440b      	add	r3, r1
 800b1a0:	4303      	orrs	r3, r0
 800b1a2:	d009      	beq.n	800b1b8 <__ieee754_pow+0x9b0>
 800b1a4:	ec51 0b18 	vmov	r0, r1, d8
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f7f5 fcb6 	bl	8000b1c <__aeabi_dcmplt>
 800b1b0:	3800      	subs	r0, #0
 800b1b2:	bf18      	it	ne
 800b1b4:	2001      	movne	r0, #1
 800b1b6:	e447      	b.n	800aa48 <__ieee754_pow+0x240>
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	462b      	mov	r3, r5
 800b1bc:	f7f5 f884 	bl	80002c8 <__aeabi_dsub>
 800b1c0:	4642      	mov	r2, r8
 800b1c2:	464b      	mov	r3, r9
 800b1c4:	f7f5 fcbe 	bl	8000b44 <__aeabi_dcmpge>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	f43f aef3 	beq.w	800afb4 <__ieee754_pow+0x7ac>
 800b1ce:	e7e9      	b.n	800b1a4 <__ieee754_pow+0x99c>
 800b1d0:	f04f 0a00 	mov.w	sl, #0
 800b1d4:	e71a      	b.n	800b00c <__ieee754_pow+0x804>
 800b1d6:	ec51 0b10 	vmov	r0, r1, d0
 800b1da:	4619      	mov	r1, r3
 800b1dc:	e7d4      	b.n	800b188 <__ieee754_pow+0x980>
 800b1de:	491c      	ldr	r1, [pc, #112]	; (800b250 <__ieee754_pow+0xa48>)
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	f7ff bb30 	b.w	800a846 <__ieee754_pow+0x3e>
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	f7ff bb2c 	b.w	800a846 <__ieee754_pow+0x3e>
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	f7ff bb28 	b.w	800a846 <__ieee754_pow+0x3e>
 800b1f6:	9204      	str	r2, [sp, #16]
 800b1f8:	f7ff bb7a 	b.w	800a8f0 <__ieee754_pow+0xe8>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f7ff bb64 	b.w	800a8ca <__ieee754_pow+0xc2>
 800b202:	bf00      	nop
 800b204:	f3af 8000 	nop.w
 800b208:	00000000 	.word	0x00000000
 800b20c:	3fe62e43 	.word	0x3fe62e43
 800b210:	fefa39ef 	.word	0xfefa39ef
 800b214:	3fe62e42 	.word	0x3fe62e42
 800b218:	0ca86c39 	.word	0x0ca86c39
 800b21c:	be205c61 	.word	0xbe205c61
 800b220:	72bea4d0 	.word	0x72bea4d0
 800b224:	3e663769 	.word	0x3e663769
 800b228:	c5d26bf1 	.word	0xc5d26bf1
 800b22c:	3ebbbd41 	.word	0x3ebbbd41
 800b230:	af25de2c 	.word	0xaf25de2c
 800b234:	3f11566a 	.word	0x3f11566a
 800b238:	16bebd93 	.word	0x16bebd93
 800b23c:	3f66c16c 	.word	0x3f66c16c
 800b240:	5555553e 	.word	0x5555553e
 800b244:	3fc55555 	.word	0x3fc55555
 800b248:	3fe00000 	.word	0x3fe00000
 800b24c:	000fffff 	.word	0x000fffff
 800b250:	3ff00000 	.word	0x3ff00000
 800b254:	4090cbff 	.word	0x4090cbff
 800b258:	3f6f3400 	.word	0x3f6f3400
 800b25c:	652b82fe 	.word	0x652b82fe
 800b260:	3c971547 	.word	0x3c971547

0800b264 <__ieee754_sqrt>:
 800b264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b268:	ec55 4b10 	vmov	r4, r5, d0
 800b26c:	4e55      	ldr	r6, [pc, #340]	; (800b3c4 <__ieee754_sqrt+0x160>)
 800b26e:	43ae      	bics	r6, r5
 800b270:	ee10 0a10 	vmov	r0, s0
 800b274:	ee10 3a10 	vmov	r3, s0
 800b278:	462a      	mov	r2, r5
 800b27a:	4629      	mov	r1, r5
 800b27c:	d110      	bne.n	800b2a0 <__ieee754_sqrt+0x3c>
 800b27e:	ee10 2a10 	vmov	r2, s0
 800b282:	462b      	mov	r3, r5
 800b284:	f7f5 f9d8 	bl	8000638 <__aeabi_dmul>
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	4620      	mov	r0, r4
 800b28e:	4629      	mov	r1, r5
 800b290:	f7f5 f81c 	bl	80002cc <__adddf3>
 800b294:	4604      	mov	r4, r0
 800b296:	460d      	mov	r5, r1
 800b298:	ec45 4b10 	vmov	d0, r4, r5
 800b29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a0:	2d00      	cmp	r5, #0
 800b2a2:	dc10      	bgt.n	800b2c6 <__ieee754_sqrt+0x62>
 800b2a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b2a8:	4330      	orrs	r0, r6
 800b2aa:	d0f5      	beq.n	800b298 <__ieee754_sqrt+0x34>
 800b2ac:	b15d      	cbz	r5, 800b2c6 <__ieee754_sqrt+0x62>
 800b2ae:	ee10 2a10 	vmov	r2, s0
 800b2b2:	462b      	mov	r3, r5
 800b2b4:	ee10 0a10 	vmov	r0, s0
 800b2b8:	f7f5 f806 	bl	80002c8 <__aeabi_dsub>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	f7f5 fae4 	bl	800088c <__aeabi_ddiv>
 800b2c4:	e7e6      	b.n	800b294 <__ieee754_sqrt+0x30>
 800b2c6:	1512      	asrs	r2, r2, #20
 800b2c8:	d074      	beq.n	800b3b4 <__ieee754_sqrt+0x150>
 800b2ca:	07d4      	lsls	r4, r2, #31
 800b2cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b2d0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b2d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b2d8:	bf5e      	ittt	pl
 800b2da:	0fda      	lsrpl	r2, r3, #31
 800b2dc:	005b      	lslpl	r3, r3, #1
 800b2de:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b2e2:	2400      	movs	r4, #0
 800b2e4:	0fda      	lsrs	r2, r3, #31
 800b2e6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b2ea:	107f      	asrs	r7, r7, #1
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	2516      	movs	r5, #22
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b2f6:	1886      	adds	r6, r0, r2
 800b2f8:	428e      	cmp	r6, r1
 800b2fa:	bfde      	ittt	le
 800b2fc:	1b89      	suble	r1, r1, r6
 800b2fe:	18b0      	addle	r0, r6, r2
 800b300:	18a4      	addle	r4, r4, r2
 800b302:	0049      	lsls	r1, r1, #1
 800b304:	3d01      	subs	r5, #1
 800b306:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b30a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b30e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b312:	d1f0      	bne.n	800b2f6 <__ieee754_sqrt+0x92>
 800b314:	462a      	mov	r2, r5
 800b316:	f04f 0e20 	mov.w	lr, #32
 800b31a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b31e:	4281      	cmp	r1, r0
 800b320:	eb06 0c05 	add.w	ip, r6, r5
 800b324:	dc02      	bgt.n	800b32c <__ieee754_sqrt+0xc8>
 800b326:	d113      	bne.n	800b350 <__ieee754_sqrt+0xec>
 800b328:	459c      	cmp	ip, r3
 800b32a:	d811      	bhi.n	800b350 <__ieee754_sqrt+0xec>
 800b32c:	f1bc 0f00 	cmp.w	ip, #0
 800b330:	eb0c 0506 	add.w	r5, ip, r6
 800b334:	da43      	bge.n	800b3be <__ieee754_sqrt+0x15a>
 800b336:	2d00      	cmp	r5, #0
 800b338:	db41      	blt.n	800b3be <__ieee754_sqrt+0x15a>
 800b33a:	f100 0801 	add.w	r8, r0, #1
 800b33e:	1a09      	subs	r1, r1, r0
 800b340:	459c      	cmp	ip, r3
 800b342:	bf88      	it	hi
 800b344:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b348:	eba3 030c 	sub.w	r3, r3, ip
 800b34c:	4432      	add	r2, r6
 800b34e:	4640      	mov	r0, r8
 800b350:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b354:	f1be 0e01 	subs.w	lr, lr, #1
 800b358:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b35c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b360:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b364:	d1db      	bne.n	800b31e <__ieee754_sqrt+0xba>
 800b366:	430b      	orrs	r3, r1
 800b368:	d006      	beq.n	800b378 <__ieee754_sqrt+0x114>
 800b36a:	1c50      	adds	r0, r2, #1
 800b36c:	bf13      	iteet	ne
 800b36e:	3201      	addne	r2, #1
 800b370:	3401      	addeq	r4, #1
 800b372:	4672      	moveq	r2, lr
 800b374:	f022 0201 	bicne.w	r2, r2, #1
 800b378:	1063      	asrs	r3, r4, #1
 800b37a:	0852      	lsrs	r2, r2, #1
 800b37c:	07e1      	lsls	r1, r4, #31
 800b37e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b382:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b386:	bf48      	it	mi
 800b388:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b38c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b390:	4614      	mov	r4, r2
 800b392:	e781      	b.n	800b298 <__ieee754_sqrt+0x34>
 800b394:	0ad9      	lsrs	r1, r3, #11
 800b396:	3815      	subs	r0, #21
 800b398:	055b      	lsls	r3, r3, #21
 800b39a:	2900      	cmp	r1, #0
 800b39c:	d0fa      	beq.n	800b394 <__ieee754_sqrt+0x130>
 800b39e:	02cd      	lsls	r5, r1, #11
 800b3a0:	d50a      	bpl.n	800b3b8 <__ieee754_sqrt+0x154>
 800b3a2:	f1c2 0420 	rsb	r4, r2, #32
 800b3a6:	fa23 f404 	lsr.w	r4, r3, r4
 800b3aa:	1e55      	subs	r5, r2, #1
 800b3ac:	4093      	lsls	r3, r2
 800b3ae:	4321      	orrs	r1, r4
 800b3b0:	1b42      	subs	r2, r0, r5
 800b3b2:	e78a      	b.n	800b2ca <__ieee754_sqrt+0x66>
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	e7f0      	b.n	800b39a <__ieee754_sqrt+0x136>
 800b3b8:	0049      	lsls	r1, r1, #1
 800b3ba:	3201      	adds	r2, #1
 800b3bc:	e7ef      	b.n	800b39e <__ieee754_sqrt+0x13a>
 800b3be:	4680      	mov	r8, r0
 800b3c0:	e7bd      	b.n	800b33e <__ieee754_sqrt+0xda>
 800b3c2:	bf00      	nop
 800b3c4:	7ff00000 	.word	0x7ff00000

0800b3c8 <with_errno>:
 800b3c8:	b570      	push	{r4, r5, r6, lr}
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	460d      	mov	r5, r1
 800b3ce:	4616      	mov	r6, r2
 800b3d0:	f7fe fcde 	bl	8009d90 <__errno>
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	6006      	str	r6, [r0, #0]
 800b3d8:	4620      	mov	r0, r4
 800b3da:	bd70      	pop	{r4, r5, r6, pc}

0800b3dc <xflow>:
 800b3dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3de:	4614      	mov	r4, r2
 800b3e0:	461d      	mov	r5, r3
 800b3e2:	b108      	cbz	r0, 800b3e8 <xflow+0xc>
 800b3e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b3e8:	e9cd 2300 	strd	r2, r3, [sp]
 800b3ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	f7f5 f920 	bl	8000638 <__aeabi_dmul>
 800b3f8:	2222      	movs	r2, #34	; 0x22
 800b3fa:	b003      	add	sp, #12
 800b3fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b400:	f7ff bfe2 	b.w	800b3c8 <with_errno>

0800b404 <__math_uflow>:
 800b404:	b508      	push	{r3, lr}
 800b406:	2200      	movs	r2, #0
 800b408:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b40c:	f7ff ffe6 	bl	800b3dc <xflow>
 800b410:	ec41 0b10 	vmov	d0, r0, r1
 800b414:	bd08      	pop	{r3, pc}

0800b416 <__math_oflow>:
 800b416:	b508      	push	{r3, lr}
 800b418:	2200      	movs	r2, #0
 800b41a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b41e:	f7ff ffdd 	bl	800b3dc <xflow>
 800b422:	ec41 0b10 	vmov	d0, r0, r1
 800b426:	bd08      	pop	{r3, pc}

0800b428 <fabs>:
 800b428:	ec51 0b10 	vmov	r0, r1, d0
 800b42c:	ee10 2a10 	vmov	r2, s0
 800b430:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b434:	ec43 2b10 	vmov	d0, r2, r3
 800b438:	4770      	bx	lr

0800b43a <finite>:
 800b43a:	b082      	sub	sp, #8
 800b43c:	ed8d 0b00 	vstr	d0, [sp]
 800b440:	9801      	ldr	r0, [sp, #4]
 800b442:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b446:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b44a:	0fc0      	lsrs	r0, r0, #31
 800b44c:	b002      	add	sp, #8
 800b44e:	4770      	bx	lr

0800b450 <scalbn>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	ec55 4b10 	vmov	r4, r5, d0
 800b456:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b45a:	4606      	mov	r6, r0
 800b45c:	462b      	mov	r3, r5
 800b45e:	b99a      	cbnz	r2, 800b488 <scalbn+0x38>
 800b460:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b464:	4323      	orrs	r3, r4
 800b466:	d036      	beq.n	800b4d6 <scalbn+0x86>
 800b468:	4b39      	ldr	r3, [pc, #228]	; (800b550 <scalbn+0x100>)
 800b46a:	4629      	mov	r1, r5
 800b46c:	ee10 0a10 	vmov	r0, s0
 800b470:	2200      	movs	r2, #0
 800b472:	f7f5 f8e1 	bl	8000638 <__aeabi_dmul>
 800b476:	4b37      	ldr	r3, [pc, #220]	; (800b554 <scalbn+0x104>)
 800b478:	429e      	cmp	r6, r3
 800b47a:	4604      	mov	r4, r0
 800b47c:	460d      	mov	r5, r1
 800b47e:	da10      	bge.n	800b4a2 <scalbn+0x52>
 800b480:	a32b      	add	r3, pc, #172	; (adr r3, 800b530 <scalbn+0xe0>)
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	e03a      	b.n	800b4fe <scalbn+0xae>
 800b488:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b48c:	428a      	cmp	r2, r1
 800b48e:	d10c      	bne.n	800b4aa <scalbn+0x5a>
 800b490:	ee10 2a10 	vmov	r2, s0
 800b494:	4620      	mov	r0, r4
 800b496:	4629      	mov	r1, r5
 800b498:	f7f4 ff18 	bl	80002cc <__adddf3>
 800b49c:	4604      	mov	r4, r0
 800b49e:	460d      	mov	r5, r1
 800b4a0:	e019      	b.n	800b4d6 <scalbn+0x86>
 800b4a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	3a36      	subs	r2, #54	; 0x36
 800b4aa:	4432      	add	r2, r6
 800b4ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b4b0:	428a      	cmp	r2, r1
 800b4b2:	dd08      	ble.n	800b4c6 <scalbn+0x76>
 800b4b4:	2d00      	cmp	r5, #0
 800b4b6:	a120      	add	r1, pc, #128	; (adr r1, 800b538 <scalbn+0xe8>)
 800b4b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4bc:	da1c      	bge.n	800b4f8 <scalbn+0xa8>
 800b4be:	a120      	add	r1, pc, #128	; (adr r1, 800b540 <scalbn+0xf0>)
 800b4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c4:	e018      	b.n	800b4f8 <scalbn+0xa8>
 800b4c6:	2a00      	cmp	r2, #0
 800b4c8:	dd08      	ble.n	800b4dc <scalbn+0x8c>
 800b4ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b4ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b4d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b4d6:	ec45 4b10 	vmov	d0, r4, r5
 800b4da:	bd70      	pop	{r4, r5, r6, pc}
 800b4dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b4e0:	da19      	bge.n	800b516 <scalbn+0xc6>
 800b4e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b4e6:	429e      	cmp	r6, r3
 800b4e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b4ec:	dd0a      	ble.n	800b504 <scalbn+0xb4>
 800b4ee:	a112      	add	r1, pc, #72	; (adr r1, 800b538 <scalbn+0xe8>)
 800b4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1e2      	bne.n	800b4be <scalbn+0x6e>
 800b4f8:	a30f      	add	r3, pc, #60	; (adr r3, 800b538 <scalbn+0xe8>)
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	f7f5 f89b 	bl	8000638 <__aeabi_dmul>
 800b502:	e7cb      	b.n	800b49c <scalbn+0x4c>
 800b504:	a10a      	add	r1, pc, #40	; (adr r1, 800b530 <scalbn+0xe0>)
 800b506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0b8      	beq.n	800b480 <scalbn+0x30>
 800b50e:	a10e      	add	r1, pc, #56	; (adr r1, 800b548 <scalbn+0xf8>)
 800b510:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b514:	e7b4      	b.n	800b480 <scalbn+0x30>
 800b516:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b51a:	3236      	adds	r2, #54	; 0x36
 800b51c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b520:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b524:	4620      	mov	r0, r4
 800b526:	4b0c      	ldr	r3, [pc, #48]	; (800b558 <scalbn+0x108>)
 800b528:	2200      	movs	r2, #0
 800b52a:	e7e8      	b.n	800b4fe <scalbn+0xae>
 800b52c:	f3af 8000 	nop.w
 800b530:	c2f8f359 	.word	0xc2f8f359
 800b534:	01a56e1f 	.word	0x01a56e1f
 800b538:	8800759c 	.word	0x8800759c
 800b53c:	7e37e43c 	.word	0x7e37e43c
 800b540:	8800759c 	.word	0x8800759c
 800b544:	fe37e43c 	.word	0xfe37e43c
 800b548:	c2f8f359 	.word	0xc2f8f359
 800b54c:	81a56e1f 	.word	0x81a56e1f
 800b550:	43500000 	.word	0x43500000
 800b554:	ffff3cb0 	.word	0xffff3cb0
 800b558:	3c900000 	.word	0x3c900000

0800b55c <_init>:
 800b55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55e:	bf00      	nop
 800b560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b562:	bc08      	pop	{r3}
 800b564:	469e      	mov	lr, r3
 800b566:	4770      	bx	lr

0800b568 <_fini>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	bf00      	nop
 800b56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56e:	bc08      	pop	{r3}
 800b570:	469e      	mov	lr, r3
 800b572:	4770      	bx	lr
