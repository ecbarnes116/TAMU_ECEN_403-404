
bare-nucleo-f446re-capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b29c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800b470  0800b470  0001b470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baf0  0800baf0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800baf0  0800baf0  0001baf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baf8  0800baf8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baf8  0800baf8  0001baf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bafc  0800bafc  0001bafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800bb00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000289c  20000088  0800bb88  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002924  0800bb88  00022924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b18  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330e  00000000  00000000  00036bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00039ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0003b380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026701  00000000  00000000  0003c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b575  00000000  00000000  00062db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2ed9  00000000  00000000  0007e32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064c8  00000000  00000000  00161258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b454 	.word	0x0800b454

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800b454 	.word	0x0800b454

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <SELECT+0x1c>)
 8000ee8:	f002 fe16 	bl	8003b18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f001 fbb7 	bl	8002660 <HAL_Delay>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020400 	.word	0x40020400

08000efc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f06:	4804      	ldr	r0, [pc, #16]	; (8000f18 <DESELECT+0x1c>)
 8000f08:	f002 fe06 	bl	8003b18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f001 fba7 	bl	8002660 <HAL_Delay>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40020400 	.word	0x40020400

08000f1c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f26:	bf00      	nop
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <SPI_TxByte+0x30>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d1f8      	bne.n	8000f28 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f36:	1df9      	adds	r1, r7, #7
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <SPI_TxByte+0x30>)
 8000f3e:	f003 fcc6 	bl	80048ce <HAL_SPI_Transmit>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000150 	.word	0x20000150

08000f50 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f5c:	bf00      	nop
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <SPI_TxBuffer+0x30>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d1f8      	bne.n	8000f5e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f6c:	887a      	ldrh	r2, [r7, #2]
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <SPI_TxBuffer+0x30>)
 8000f74:	f003 fcab 	bl	80048ce <HAL_SPI_Transmit>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000150 	.word	0x20000150

08000f84 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f8a:	23ff      	movs	r3, #255	; 0xff
 8000f8c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f8e:	bf00      	nop
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <SPI_RxByte+0x34>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d1f8      	bne.n	8000f90 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f9e:	1dba      	adds	r2, r7, #6
 8000fa0:	1df9      	adds	r1, r7, #7
 8000fa2:	2364      	movs	r3, #100	; 0x64
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <SPI_RxByte+0x34>)
 8000faa:	f003 fdcc 	bl	8004b46 <HAL_SPI_TransmitReceive>

	return data;
 8000fae:	79bb      	ldrb	r3, [r7, #6]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000150 	.word	0x20000150

08000fbc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000fc4:	f7ff ffde 	bl	8000f84 <SPI_RxByte>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	701a      	strb	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <SD_ReadyWait+0x30>)
 8000fe0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fe4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000fe6:	f7ff ffcd 	bl	8000f84 <SPI_RxByte>
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2bff      	cmp	r3, #255	; 0xff
 8000ff2:	d004      	beq.n	8000ffe <SD_ReadyWait+0x26>
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SD_ReadyWait+0x30>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f3      	bne.n	8000fe6 <SD_ReadyWait+0xe>

	return res;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200026ce 	.word	0x200026ce

0800100c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001012:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001016:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001018:	f7ff ff70 	bl	8000efc <DESELECT>
	for(int i = 0; i < 10; i++)
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	e005      	b.n	800102e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001022:	20ff      	movs	r0, #255	; 0xff
 8001024:	f7ff ff7a 	bl	8000f1c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3301      	adds	r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b09      	cmp	r3, #9
 8001032:	ddf6      	ble.n	8001022 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001034:	f7ff ff52 	bl	8000edc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001038:	2340      	movs	r3, #64	; 0x40
 800103a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800104c:	2395      	movs	r3, #149	; 0x95
 800104e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001050:	463b      	mov	r3, r7
 8001052:	2106      	movs	r1, #6
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff7b 	bl	8000f50 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800105a:	e002      	b.n	8001062 <SD_PowerOn+0x56>
	{
		cnt--;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3b01      	subs	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001062:	f7ff ff8f 	bl	8000f84 <SPI_RxByte>
 8001066:	4603      	mov	r3, r0
 8001068:	2b01      	cmp	r3, #1
 800106a:	d002      	beq.n	8001072 <SD_PowerOn+0x66>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f4      	bne.n	800105c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001072:	f7ff ff43 	bl	8000efc <DESELECT>
	SPI_TxByte(0XFF);
 8001076:	20ff      	movs	r0, #255	; 0xff
 8001078:	f7ff ff50 	bl	8000f1c <SPI_TxByte>

	PowerFlag = 1;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <SD_PowerOn+0x80>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000a5 	.word	0x200000a5

08001090 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <SD_PowerOff+0x14>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	200000a5 	.word	0x200000a5

080010a8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
	return PowerFlag;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <SD_CheckPower+0x14>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200000a5 	.word	0x200000a5

080010c0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <SD_RxDataBlock+0x5c>)
 80010cc:	22c8      	movs	r2, #200	; 0xc8
 80010ce:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80010d0:	f7ff ff58 	bl	8000f84 <SPI_RxByte>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2bff      	cmp	r3, #255	; 0xff
 80010dc:	d104      	bne.n	80010e8 <SD_RxDataBlock+0x28>
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <SD_RxDataBlock+0x5c>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f3      	bne.n	80010d0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2bfe      	cmp	r3, #254	; 0xfe
 80010ec:	d001      	beq.n	80010f2 <SD_RxDataBlock+0x32>
 80010ee:	2300      	movs	r3, #0
 80010f0:	e00f      	b.n	8001112 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5f 	bl	8000fbc <SPI_RxBytePtr>
	} while(len--);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	603a      	str	r2, [r7, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f4      	bne.n	80010f2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001108:	f7ff ff3c 	bl	8000f84 <SPI_RxByte>
	SPI_RxByte();
 800110c:	f7ff ff3a 	bl	8000f84 <SPI_RxByte>

	return TRUE;
 8001110:	2301      	movs	r3, #1
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200026cd 	.word	0x200026cd

08001120 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001130:	f7ff ff52 	bl	8000fd8 <SD_ReadyWait>
 8001134:	4603      	mov	r3, r0
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d001      	beq.n	800113e <SD_TxDataBlock+0x1e>
 800113a:	2300      	movs	r3, #0
 800113c:	e02f      	b.n	800119e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff feeb 	bl	8000f1c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	2bfd      	cmp	r3, #253	; 0xfd
 800114a:	d020      	beq.n	800118e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800114c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fefd 	bl	8000f50 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001156:	f7ff ff15 	bl	8000f84 <SPI_RxByte>
		SPI_RxByte();
 800115a:	f7ff ff13 	bl	8000f84 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800115e:	e00b      	b.n	8001178 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001160:	f7ff ff10 	bl	8000f84 <SPI_RxByte>
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	f003 031f 	and.w	r3, r3, #31
 800116e:	2b05      	cmp	r3, #5
 8001170:	d006      	beq.n	8001180 <SD_TxDataBlock+0x60>
			i++;
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	3301      	adds	r3, #1
 8001176:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	2b40      	cmp	r3, #64	; 0x40
 800117c:	d9f0      	bls.n	8001160 <SD_TxDataBlock+0x40>
 800117e:	e000      	b.n	8001182 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001180:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001182:	bf00      	nop
 8001184:	f7ff fefe 	bl	8000f84 <SPI_RxByte>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0fa      	beq.n	8001184 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	2b05      	cmp	r3, #5
 8001196:	d101      	bne.n	800119c <SD_TxDataBlock+0x7c>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <SD_TxDataBlock+0x7e>

	return FALSE;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	6039      	str	r1, [r7, #0]
 80011b0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80011b2:	f7ff ff11 	bl	8000fd8 <SD_ReadyWait>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2bff      	cmp	r3, #255	; 0xff
 80011ba:	d001      	beq.n	80011c0 <SD_SendCmd+0x1a>
 80011bc:	23ff      	movs	r3, #255	; 0xff
 80011be:	e042      	b.n	8001246 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff feaa 	bl	8000f1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	0e1b      	lsrs	r3, r3, #24
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fea4 	bl	8000f1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	0c1b      	lsrs	r3, r3, #16
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe9e 	bl	8000f1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	0a1b      	lsrs	r3, r3, #8
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe98 	bl	8000f1c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fe93 	bl	8000f1c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b40      	cmp	r3, #64	; 0x40
 80011fa:	d102      	bne.n	8001202 <SD_SendCmd+0x5c>
 80011fc:	2395      	movs	r3, #149	; 0x95
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e007      	b.n	8001212 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b48      	cmp	r3, #72	; 0x48
 8001206:	d102      	bne.n	800120e <SD_SendCmd+0x68>
 8001208:	2387      	movs	r3, #135	; 0x87
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e001      	b.n	8001212 <SD_SendCmd+0x6c>
	else crc = 1;
 800120e:	2301      	movs	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fe81 	bl	8000f1c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b4c      	cmp	r3, #76	; 0x4c
 800121e:	d101      	bne.n	8001224 <SD_SendCmd+0x7e>
 8001220:	f7ff feb0 	bl	8000f84 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001224:	230a      	movs	r3, #10
 8001226:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001228:	f7ff feac 	bl	8000f84 <SPI_RxByte>
 800122c:	4603      	mov	r3, r0
 800122e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001230:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001234:	2b00      	cmp	r3, #0
 8001236:	da05      	bge.n	8001244 <SD_SendCmd+0x9e>
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	3b01      	subs	r3, #1
 800123c:	73bb      	strb	r3, [r7, #14]
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f1      	bne.n	8001228 <SD_SendCmd+0x82>

	return res;
 8001244:	7b7b      	ldrb	r3, [r7, #13]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SD_disk_initialize+0x14>
 8001260:	2301      	movs	r3, #1
 8001262:	e0d6      	b.n	8001412 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001264:	4b6d      	ldr	r3, [pc, #436]	; (800141c <SD_disk_initialize+0x1cc>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <SD_disk_initialize+0x2a>
 8001272:	4b6a      	ldr	r3, [pc, #424]	; (800141c <SD_disk_initialize+0x1cc>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	e0cb      	b.n	8001412 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800127a:	f7ff fec7 	bl	800100c <SD_PowerOn>

	/* slave select */
	SELECT();
 800127e:	f7ff fe2d 	bl	8000edc <SELECT>

	/* check disk type */
	type = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001286:	2100      	movs	r1, #0
 8001288:	2040      	movs	r0, #64	; 0x40
 800128a:	f7ff ff8c 	bl	80011a6 <SD_SendCmd>
 800128e:	4603      	mov	r3, r0
 8001290:	2b01      	cmp	r3, #1
 8001292:	f040 80a6 	bne.w	80013e2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001296:	4b62      	ldr	r3, [pc, #392]	; (8001420 <SD_disk_initialize+0x1d0>)
 8001298:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800129c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800129e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80012a2:	2048      	movs	r0, #72	; 0x48
 80012a4:	f7ff ff7f 	bl	80011a6 <SD_SendCmd>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d158      	bne.n	8001360 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e00c      	b.n	80012ce <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80012b4:	7bfc      	ldrb	r4, [r7, #15]
 80012b6:	f7ff fe65 	bl	8000f84 <SPI_RxByte>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	f104 0310 	add.w	r3, r4, #16
 80012c2:	443b      	add	r3, r7
 80012c4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	3301      	adds	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d9ef      	bls.n	80012b4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012d4:	7abb      	ldrb	r3, [r7, #10]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	f040 8083 	bne.w	80013e2 <SD_disk_initialize+0x192>
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	2baa      	cmp	r3, #170	; 0xaa
 80012e0:	d17f      	bne.n	80013e2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012e2:	2100      	movs	r1, #0
 80012e4:	2077      	movs	r0, #119	; 0x77
 80012e6:	f7ff ff5e 	bl	80011a6 <SD_SendCmd>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d807      	bhi.n	8001300 <SD_disk_initialize+0xb0>
 80012f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012f4:	2069      	movs	r0, #105	; 0x69
 80012f6:	f7ff ff56 	bl	80011a6 <SD_SendCmd>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001300:	4b47      	ldr	r3, [pc, #284]	; (8001420 <SD_disk_initialize+0x1d0>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1eb      	bne.n	80012e2 <SD_disk_initialize+0x92>
 800130a:	e000      	b.n	800130e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800130c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800130e:	4b44      	ldr	r3, [pc, #272]	; (8001420 <SD_disk_initialize+0x1d0>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d064      	beq.n	80013e2 <SD_disk_initialize+0x192>
 8001318:	2100      	movs	r1, #0
 800131a:	207a      	movs	r0, #122	; 0x7a
 800131c:	f7ff ff43 	bl	80011a6 <SD_SendCmd>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d15d      	bne.n	80013e2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	e00c      	b.n	8001346 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800132c:	7bfc      	ldrb	r4, [r7, #15]
 800132e:	f7ff fe29 	bl	8000f84 <SPI_RxByte>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	f104 0310 	add.w	r3, r4, #16
 800133a:	443b      	add	r3, r7
 800133c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	3301      	adds	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d9ef      	bls.n	800132c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800134c:	7a3b      	ldrb	r3, [r7, #8]
 800134e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SD_disk_initialize+0x10a>
 8001356:	230c      	movs	r3, #12
 8001358:	e000      	b.n	800135c <SD_disk_initialize+0x10c>
 800135a:	2304      	movs	r3, #4
 800135c:	73bb      	strb	r3, [r7, #14]
 800135e:	e040      	b.n	80013e2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001360:	2100      	movs	r1, #0
 8001362:	2077      	movs	r0, #119	; 0x77
 8001364:	f7ff ff1f 	bl	80011a6 <SD_SendCmd>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d808      	bhi.n	8001380 <SD_disk_initialize+0x130>
 800136e:	2100      	movs	r1, #0
 8001370:	2069      	movs	r0, #105	; 0x69
 8001372:	f7ff ff18 	bl	80011a6 <SD_SendCmd>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d801      	bhi.n	8001380 <SD_disk_initialize+0x130>
 800137c:	2302      	movs	r3, #2
 800137e:	e000      	b.n	8001382 <SD_disk_initialize+0x132>
 8001380:	2301      	movs	r3, #1
 8001382:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001384:	7bbb      	ldrb	r3, [r7, #14]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d10e      	bne.n	80013a8 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800138a:	2100      	movs	r1, #0
 800138c:	2077      	movs	r0, #119	; 0x77
 800138e:	f7ff ff0a 	bl	80011a6 <SD_SendCmd>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	d80e      	bhi.n	80013b6 <SD_disk_initialize+0x166>
 8001398:	2100      	movs	r1, #0
 800139a:	2069      	movs	r0, #105	; 0x69
 800139c:	f7ff ff03 	bl	80011a6 <SD_SendCmd>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d107      	bne.n	80013b6 <SD_disk_initialize+0x166>
 80013a6:	e00d      	b.n	80013c4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013a8:	2100      	movs	r1, #0
 80013aa:	2041      	movs	r0, #65	; 0x41
 80013ac:	f7ff fefb 	bl	80011a6 <SD_SendCmd>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <SD_disk_initialize+0x1d0>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1e1      	bne.n	8001384 <SD_disk_initialize+0x134>
 80013c0:	e000      	b.n	80013c4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013c2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <SD_disk_initialize+0x1d0>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d007      	beq.n	80013de <SD_disk_initialize+0x18e>
 80013ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d2:	2050      	movs	r0, #80	; 0x50
 80013d4:	f7ff fee7 	bl	80011a6 <SD_SendCmd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SD_disk_initialize+0x192>
 80013de:	2300      	movs	r3, #0
 80013e0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <SD_disk_initialize+0x1d4>)
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80013e8:	f7ff fd88 	bl	8000efc <DESELECT>
	SPI_RxByte();
 80013ec:	f7ff fdca 	bl	8000f84 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d008      	beq.n	8001408 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <SD_disk_initialize+0x1cc>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <SD_disk_initialize+0x1cc>)
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e001      	b.n	800140c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001408:	f7ff fe42 	bl	8001090 <SD_PowerOff>
	}

	return Stat;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <SD_disk_initialize+0x1cc>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bd90      	pop	{r4, r7, pc}
 800141a:	bf00      	nop
 800141c:	20000000 	.word	0x20000000
 8001420:	200026cd 	.word	0x200026cd
 8001424:	200000a4 	.word	0x200000a4

08001428 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SD_disk_status+0x14>
 8001438:	2301      	movs	r3, #1
 800143a:	e002      	b.n	8001442 <SD_disk_status+0x1a>
	return Stat;
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SD_disk_status+0x28>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000000 	.word	0x20000000

08001454 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	4603      	mov	r3, r0
 8001462:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <SD_disk_read+0x1c>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <SD_disk_read+0x20>
 8001470:	2304      	movs	r3, #4
 8001472:	e051      	b.n	8001518 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <SD_disk_read+0xcc>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SD_disk_read+0x32>
 8001482:	2303      	movs	r3, #3
 8001484:	e048      	b.n	8001518 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <SD_disk_read+0xd0>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <SD_disk_read+0x44>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	607b      	str	r3, [r7, #4]

	SELECT();
 8001498:	f7ff fd20 	bl	8000edc <SELECT>

	if (count == 1)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d111      	bne.n	80014c6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	2051      	movs	r0, #81	; 0x51
 80014a6:	f7ff fe7e 	bl	80011a6 <SD_SendCmd>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d129      	bne.n	8001504 <SD_disk_read+0xb0>
 80014b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b4:	68b8      	ldr	r0, [r7, #8]
 80014b6:	f7ff fe03 	bl	80010c0 <SD_RxDataBlock>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d021      	beq.n	8001504 <SD_disk_read+0xb0>
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	e01e      	b.n	8001504 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	2052      	movs	r0, #82	; 0x52
 80014ca:	f7ff fe6c 	bl	80011a6 <SD_SendCmd>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d117      	bne.n	8001504 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80014d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d8:	68b8      	ldr	r0, [r7, #8]
 80014da:	f7ff fdf1 	bl	80010c0 <SD_RxDataBlock>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00a      	beq.n	80014fa <SD_disk_read+0xa6>
				buff += 512;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014ea:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ed      	bne.n	80014d4 <SD_disk_read+0x80>
 80014f8:	e000      	b.n	80014fc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80014fa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80014fc:	2100      	movs	r1, #0
 80014fe:	204c      	movs	r0, #76	; 0x4c
 8001500:	f7ff fe51 	bl	80011a6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001504:	f7ff fcfa 	bl	8000efc <DESELECT>
	SPI_RxByte();
 8001508:	f7ff fd3c 	bl	8000f84 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	bf14      	ite	ne
 8001512:	2301      	movne	r3, #1
 8001514:	2300      	moveq	r3, #0
 8001516:	b2db      	uxtb	r3, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	200000a4 	.word	0x200000a4

08001528 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4603      	mov	r3, r0
 8001536:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <SD_disk_write+0x1c>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <SD_disk_write+0x20>
 8001544:	2304      	movs	r3, #4
 8001546:	e06b      	b.n	8001620 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001548:	4b37      	ldr	r3, [pc, #220]	; (8001628 <SD_disk_write+0x100>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SD_disk_write+0x32>
 8001556:	2303      	movs	r3, #3
 8001558:	e062      	b.n	8001620 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <SD_disk_write+0x100>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SD_disk_write+0x44>
 8001568:	2302      	movs	r3, #2
 800156a:	e059      	b.n	8001620 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <SD_disk_write+0x104>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <SD_disk_write+0x56>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	607b      	str	r3, [r7, #4]

	SELECT();
 800157e:	f7ff fcad 	bl	8000edc <SELECT>

	if (count == 1)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d110      	bne.n	80015aa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	2058      	movs	r0, #88	; 0x58
 800158c:	f7ff fe0b 	bl	80011a6 <SD_SendCmd>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d13a      	bne.n	800160c <SD_disk_write+0xe4>
 8001596:	21fe      	movs	r1, #254	; 0xfe
 8001598:	68b8      	ldr	r0, [r7, #8]
 800159a:	f7ff fdc1 	bl	8001120 <SD_TxDataBlock>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d033      	beq.n	800160c <SD_disk_write+0xe4>
			count = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	e030      	b.n	800160c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <SD_disk_write+0x104>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80015b6:	2100      	movs	r1, #0
 80015b8:	2077      	movs	r0, #119	; 0x77
 80015ba:	f7ff fdf4 	bl	80011a6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	2057      	movs	r0, #87	; 0x57
 80015c2:	f7ff fdf0 	bl	80011a6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	2059      	movs	r0, #89	; 0x59
 80015ca:	f7ff fdec 	bl	80011a6 <SD_SendCmd>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d11b      	bne.n	800160c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015d4:	21fc      	movs	r1, #252	; 0xfc
 80015d6:	68b8      	ldr	r0, [r7, #8]
 80015d8:	f7ff fda2 	bl	8001120 <SD_TxDataBlock>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00a      	beq.n	80015f8 <SD_disk_write+0xd0>
				buff += 512;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015e8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1ee      	bne.n	80015d4 <SD_disk_write+0xac>
 80015f6:	e000      	b.n	80015fa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015f8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80015fa:	21fd      	movs	r1, #253	; 0xfd
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fd8f 	bl	8001120 <SD_TxDataBlock>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <SD_disk_write+0xe4>
			{
				count = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800160c:	f7ff fc76 	bl	8000efc <DESELECT>
	SPI_RxByte();
 8001610:	f7ff fcb8 	bl	8000f84 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf14      	ite	ne
 800161a:	2301      	movne	r3, #1
 800161c:	2300      	moveq	r3, #0
 800161e:	b2db      	uxtb	r3, r3
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000
 800162c:	200000a4 	.word	0x200000a4

08001630 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b08b      	sub	sp, #44	; 0x2c
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	603a      	str	r2, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
 800163c:	460b      	mov	r3, r1
 800163e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SD_disk_ioctl+0x1e>
 800164a:	2304      	movs	r3, #4
 800164c:	e115      	b.n	800187a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d124      	bne.n	80016a4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d012      	beq.n	8001688 <SD_disk_ioctl+0x58>
 8001662:	2b02      	cmp	r3, #2
 8001664:	dc1a      	bgt.n	800169c <SD_disk_ioctl+0x6c>
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <SD_disk_ioctl+0x40>
 800166a:	2b01      	cmp	r3, #1
 800166c:	d006      	beq.n	800167c <SD_disk_ioctl+0x4c>
 800166e:	e015      	b.n	800169c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001670:	f7ff fd0e 	bl	8001090 <SD_PowerOff>
			res = RES_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800167a:	e0fc      	b.n	8001876 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800167c:	f7ff fcc6 	bl	800100c <SD_PowerOn>
			res = RES_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001686:	e0f6      	b.n	8001876 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	1c5c      	adds	r4, r3, #1
 800168c:	f7ff fd0c 	bl	80010a8 <SD_CheckPower>
 8001690:	4603      	mov	r3, r0
 8001692:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800169a:	e0ec      	b.n	8001876 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800169c:	2304      	movs	r3, #4
 800169e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016a2:	e0e8      	b.n	8001876 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016a4:	4b77      	ldr	r3, [pc, #476]	; (8001884 <SD_disk_ioctl+0x254>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SD_disk_ioctl+0x86>
 80016b2:	2303      	movs	r3, #3
 80016b4:	e0e1      	b.n	800187a <SD_disk_ioctl+0x24a>

		SELECT();
 80016b6:	f7ff fc11 	bl	8000edc <SELECT>

		switch (ctrl)
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	2b0d      	cmp	r3, #13
 80016be:	f200 80cb 	bhi.w	8001858 <SD_disk_ioctl+0x228>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <SD_disk_ioctl+0x98>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080017c3 	.word	0x080017c3
 80016cc:	08001701 	.word	0x08001701
 80016d0:	080017b3 	.word	0x080017b3
 80016d4:	08001859 	.word	0x08001859
 80016d8:	08001859 	.word	0x08001859
 80016dc:	08001859 	.word	0x08001859
 80016e0:	08001859 	.word	0x08001859
 80016e4:	08001859 	.word	0x08001859
 80016e8:	08001859 	.word	0x08001859
 80016ec:	08001859 	.word	0x08001859
 80016f0:	08001859 	.word	0x08001859
 80016f4:	080017d5 	.word	0x080017d5
 80016f8:	080017f9 	.word	0x080017f9
 80016fc:	0800181d 	.word	0x0800181d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001700:	2100      	movs	r1, #0
 8001702:	2049      	movs	r0, #73	; 0x49
 8001704:	f7ff fd4f 	bl	80011a6 <SD_SendCmd>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 80a8 	bne.w	8001860 <SD_disk_ioctl+0x230>
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2110      	movs	r1, #16
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fcd2 	bl	80010c0 <SD_RxDataBlock>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 809e 	beq.w	8001860 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001724:	7b3b      	ldrb	r3, [r7, #12]
 8001726:	099b      	lsrs	r3, r3, #6
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d10e      	bne.n	800174c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800172e:	7d7b      	ldrb	r3, [r7, #21]
 8001730:	b29a      	uxth	r2, r3
 8001732:	7d3b      	ldrb	r3, [r7, #20]
 8001734:	b29b      	uxth	r3, r3
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	b29b      	uxth	r3, r3
 800173a:	4413      	add	r3, r2
 800173c:	b29b      	uxth	r3, r3
 800173e:	3301      	adds	r3, #1
 8001740:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001742:	8bfb      	ldrh	r3, [r7, #30]
 8001744:	029a      	lsls	r2, r3, #10
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e02e      	b.n	80017aa <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800174c:	7c7b      	ldrb	r3, [r7, #17]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	b2da      	uxtb	r2, r3
 8001754:	7dbb      	ldrb	r3, [r7, #22]
 8001756:	09db      	lsrs	r3, r3, #7
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4413      	add	r3, r2
 800175c:	b2da      	uxtb	r2, r3
 800175e:	7d7b      	ldrb	r3, [r7, #21]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f003 0306 	and.w	r3, r3, #6
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4413      	add	r3, r2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3302      	adds	r3, #2
 8001770:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001774:	7d3b      	ldrb	r3, [r7, #20]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	b2db      	uxtb	r3, r3
 800177a:	b29a      	uxth	r2, r3
 800177c:	7cfb      	ldrb	r3, [r7, #19]
 800177e:	b29b      	uxth	r3, r3
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	b29b      	uxth	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	b29a      	uxth	r2, r3
 8001788:	7cbb      	ldrb	r3, [r7, #18]
 800178a:	029b      	lsls	r3, r3, #10
 800178c:	b29b      	uxth	r3, r3
 800178e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001792:	b29b      	uxth	r3, r3
 8001794:	4413      	add	r3, r2
 8001796:	b29b      	uxth	r3, r3
 8001798:	3301      	adds	r3, #1
 800179a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800179c:	8bfa      	ldrh	r2, [r7, #30]
 800179e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017a2:	3b09      	subs	r3, #9
 80017a4:	409a      	lsls	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80017b0:	e056      	b.n	8001860 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017c0:	e055      	b.n	800186e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80017c2:	f7ff fc09 	bl	8000fd8 <SD_ReadyWait>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2bff      	cmp	r3, #255	; 0xff
 80017ca:	d14b      	bne.n	8001864 <SD_disk_ioctl+0x234>
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017d2:	e047      	b.n	8001864 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017d4:	2100      	movs	r1, #0
 80017d6:	2049      	movs	r0, #73	; 0x49
 80017d8:	f7ff fce5 	bl	80011a6 <SD_SendCmd>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d142      	bne.n	8001868 <SD_disk_ioctl+0x238>
 80017e2:	2110      	movs	r1, #16
 80017e4:	6a38      	ldr	r0, [r7, #32]
 80017e6:	f7ff fc6b 	bl	80010c0 <SD_RxDataBlock>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d03b      	beq.n	8001868 <SD_disk_ioctl+0x238>
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017f6:	e037      	b.n	8001868 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017f8:	2100      	movs	r1, #0
 80017fa:	204a      	movs	r0, #74	; 0x4a
 80017fc:	f7ff fcd3 	bl	80011a6 <SD_SendCmd>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d132      	bne.n	800186c <SD_disk_ioctl+0x23c>
 8001806:	2110      	movs	r1, #16
 8001808:	6a38      	ldr	r0, [r7, #32]
 800180a:	f7ff fc59 	bl	80010c0 <SD_RxDataBlock>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d02b      	beq.n	800186c <SD_disk_ioctl+0x23c>
 8001814:	2300      	movs	r3, #0
 8001816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800181a:	e027      	b.n	800186c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800181c:	2100      	movs	r1, #0
 800181e:	207a      	movs	r0, #122	; 0x7a
 8001820:	f7ff fcc1 	bl	80011a6 <SD_SendCmd>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d116      	bne.n	8001858 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800182a:	2300      	movs	r3, #0
 800182c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001830:	e00b      	b.n	800184a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001832:	6a3c      	ldr	r4, [r7, #32]
 8001834:	1c63      	adds	r3, r4, #1
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	f7ff fba4 	bl	8000f84 <SPI_RxByte>
 800183c:	4603      	mov	r3, r0
 800183e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001840:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001844:	3301      	adds	r3, #1
 8001846:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800184a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800184e:	2b03      	cmp	r3, #3
 8001850:	d9ef      	bls.n	8001832 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001858:	2304      	movs	r3, #4
 800185a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800185e:	e006      	b.n	800186e <SD_disk_ioctl+0x23e>
			break;
 8001860:	bf00      	nop
 8001862:	e004      	b.n	800186e <SD_disk_ioctl+0x23e>
			break;
 8001864:	bf00      	nop
 8001866:	e002      	b.n	800186e <SD_disk_ioctl+0x23e>
			break;
 8001868:	bf00      	nop
 800186a:	e000      	b.n	800186e <SD_disk_ioctl+0x23e>
			break;
 800186c:	bf00      	nop
		}

		DESELECT();
 800186e:	f7ff fb45 	bl	8000efc <DESELECT>
		SPI_RxByte();
 8001872:	f7ff fb87 	bl	8000f84 <SPI_RxByte>
	}

	return res;
 8001876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800187a:	4618      	mov	r0, r3
 800187c:	372c      	adds	r7, #44	; 0x2c
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	20000000 	.word	0x20000000

08001888 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Print to console
int __io_putchar(int ch){
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001890:	1d39      	adds	r1, r7, #4
 8001892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001896:	2201      	movs	r2, #1
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <__io_putchar+0x20>)
 800189a:	f003 feda 	bl	8005652 <HAL_UART_Transmit>
	return ch;
 800189e:	687b      	ldr	r3, [r7, #4]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	200001f0 	.word	0x200001f0

080018ac <_write>:

int _write(int file, char *ptr, int len){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e009      	b.n	80018d2 <_write+0x26>
		__io_putchar(*ptr++);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	60ba      	str	r2, [r7, #8]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ffde 	bl	8001888 <__io_putchar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbf1      	blt.n	80018be <_write+0x12>
	}
	return len;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <send_uart>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

// Send data through UART
void send_uart(char *string){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7fe fc8f 	bl	8000210 <strlen>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <send_uart+0x2c>)
 8001902:	f003 fea6 	bl	8005652 <HAL_UART_Transmit>
}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200001f0 	.word	0x200001f0

08001914 <bufclear>:
	}
	return i;
}

// Clear buffer
void bufclear(void){
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1024; i++){
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	e007      	b.n	8001930 <bufclear+0x1c>
		buffer[i] = '\0';
 8001920:	4a09      	ldr	r2, [pc, #36]	; (8001948 <bufclear+0x34>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1024; i++){
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3301      	adds	r3, #1
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001936:	dbf3      	blt.n	8001920 <bufclear+0xc>
	}
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200022bc 	.word	0x200022bc
 800194c:	00000000 	.word	0x00000000

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b5b0      	push	{r4, r5, r7, lr}
 8001952:	b08e      	sub	sp, #56	; 0x38
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	int UART_counter = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195a:	f000 fe0f 	bl	800257c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195e:	f000 f969 	bl	8001c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001962:	f000 fb33 	bl	8001fcc <MX_GPIO_Init>
  MX_DMA_Init();
 8001966:	f000 fb11 	bl	8001f8c <MX_DMA_Init>
  MX_SPI1_Init();
 800196a:	f000 fa5f 	bl	8001e2c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800196e:	f000 fae3 	bl	8001f38 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001972:	f004 f9e3 	bl	8005d3c <MX_FATFS_Init>
  MX_ADC1_Init();
 8001976:	f000 f9cf 	bl	8001d18 <MX_ADC1_Init>
  MX_TIM1_Init();
 800197a:	f000 fa8d 	bl	8001e98 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Start DMA buffer
  // Might need to stop buffer at some point
  // HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, NUM_CHANNELS);
 800197e:	2205      	movs	r2, #5
 8001980:	4995      	ldr	r1, [pc, #596]	; (8001bd8 <main+0x288>)
 8001982:	4896      	ldr	r0, [pc, #600]	; (8001bdc <main+0x28c>)
 8001984:	f000 fed4 	bl	8002730 <HAL_ADC_Start_DMA>

  adc_buf_max = 0;
 8001988:	4b95      	ldr	r3, [pc, #596]	; (8001be0 <main+0x290>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
  uint32_t current_acc_z;



  // Mount SD card
  fresult = f_mount(&fs, "", 0);
 800198e:	2200      	movs	r2, #0
 8001990:	4994      	ldr	r1, [pc, #592]	; (8001be4 <main+0x294>)
 8001992:	4895      	ldr	r0, [pc, #596]	; (8001be8 <main+0x298>)
 8001994:	f006 fc20 	bl	80081d8 <f_mount>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	4b93      	ldr	r3, [pc, #588]	; (8001bec <main+0x29c>)
 800199e:	701a      	strb	r2, [r3, #0]

  if(fresult != FR_OK){
 80019a0:	4b92      	ldr	r3, [pc, #584]	; (8001bec <main+0x29c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <main+0x60>
	  send_uart("error in mounting SD card...\n");
 80019a8:	4891      	ldr	r0, [pc, #580]	; (8001bf0 <main+0x2a0>)
 80019aa:	f7ff ff9b 	bl	80018e4 <send_uart>
 80019ae:	e002      	b.n	80019b6 <main+0x66>
  }
  else{
	  send_uart("SD card mounted successfully...\n");
 80019b0:	4890      	ldr	r0, [pc, #576]	; (8001bf4 <main+0x2a4>)
 80019b2:	f7ff ff97 	bl	80018e4 <send_uart>
  }

  // Check free space on SD card
  f_getfree("", &fre_clust, &pfs);
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <main+0x2a8>)
 80019b8:	4990      	ldr	r1, [pc, #576]	; (8001bfc <main+0x2ac>)
 80019ba:	488a      	ldr	r0, [pc, #552]	; (8001be4 <main+0x294>)
 80019bc:	f007 f9b9 	bl	8008d32 <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80019c0:	4b8d      	ldr	r3, [pc, #564]	; (8001bf8 <main+0x2a8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	3b02      	subs	r3, #2
 80019c8:	4a8b      	ldr	r2, [pc, #556]	; (8001bf8 <main+0x2a8>)
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	8952      	ldrh	r2, [r2, #10]
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdb6 	bl	8000544 <__aeabi_ui2d>
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	4b88      	ldr	r3, [pc, #544]	; (8001c00 <main+0x2b0>)
 80019de:	f7fe fe2b 	bl	8000638 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f8d5 	bl	8000b98 <__aeabi_d2uiz>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4a84      	ldr	r2, [pc, #528]	; (8001c04 <main+0x2b4>)
 80019f2:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD card total size: \t%lu\n", total);
 80019f4:	4b83      	ldr	r3, [pc, #524]	; (8001c04 <main+0x2b4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4983      	ldr	r1, [pc, #524]	; (8001c08 <main+0x2b8>)
 80019fc:	4883      	ldr	r0, [pc, #524]	; (8001c0c <main+0x2bc>)
 80019fe:	f007 fc91 	bl	8009324 <siprintf>
  send_uart(buffer);
 8001a02:	4882      	ldr	r0, [pc, #520]	; (8001c0c <main+0x2bc>)
 8001a04:	f7ff ff6e 	bl	80018e4 <send_uart>
  bufclear();
 8001a08:	f7ff ff84 	bl	8001914 <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001a0c:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <main+0x2a8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	895b      	ldrh	r3, [r3, #10]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b79      	ldr	r3, [pc, #484]	; (8001bfc <main+0x2ac>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fd91 	bl	8000544 <__aeabi_ui2d>
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	4b76      	ldr	r3, [pc, #472]	; (8001c00 <main+0x2b0>)
 8001a28:	f7fe fe06 	bl	8000638 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f7ff f8b0 	bl	8000b98 <__aeabi_d2uiz>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4a75      	ldr	r2, [pc, #468]	; (8001c10 <main+0x2c0>)
 8001a3c:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD card free space: \t%lu\n", free_space);
 8001a3e:	4b74      	ldr	r3, [pc, #464]	; (8001c10 <main+0x2c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4973      	ldr	r1, [pc, #460]	; (8001c14 <main+0x2c4>)
 8001a46:	4871      	ldr	r0, [pc, #452]	; (8001c0c <main+0x2bc>)
 8001a48:	f007 fc6c 	bl	8009324 <siprintf>
  send_uart(buffer);
 8001a4c:	486f      	ldr	r0, [pc, #444]	; (8001c0c <main+0x2bc>)
 8001a4e:	f7ff ff49 	bl	80018e4 <send_uart>

  // Create and open file, then close file
  fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001a52:	2213      	movs	r2, #19
 8001a54:	4970      	ldr	r1, [pc, #448]	; (8001c18 <main+0x2c8>)
 8001a56:	4871      	ldr	r0, [pc, #452]	; (8001c1c <main+0x2cc>)
 8001a58:	f006 fc04 	bl	8008264 <f_open>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b62      	ldr	r3, [pc, #392]	; (8001bec <main+0x29c>)
 8001a62:	701a      	strb	r2, [r3, #0]
  fresult = f_puts("This data is from the first file\n\n", &fil);
 8001a64:	496d      	ldr	r1, [pc, #436]	; (8001c1c <main+0x2cc>)
 8001a66:	486e      	ldr	r0, [pc, #440]	; (8001c20 <main+0x2d0>)
 8001a68:	f007 facc 	bl	8009004 <f_puts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b5e      	ldr	r3, [pc, #376]	; (8001bec <main+0x29c>)
 8001a72:	701a      	strb	r2, [r3, #0]
  fresult = f_close(&fil);
 8001a74:	4869      	ldr	r0, [pc, #420]	; (8001c1c <main+0x2cc>)
 8001a76:	f007 f932 	bl	8008cde <f_close>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <main+0x29c>)
 8001a80:	701a      	strb	r2, [r3, #0]

  send_uart("file1.txt created and the data is written\n");
 8001a82:	4868      	ldr	r0, [pc, #416]	; (8001c24 <main+0x2d4>)
 8001a84:	f7ff ff2e 	bl	80018e4 <send_uart>
  fresult = f_open(&fil, "file1.txt", FA_READ);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4963      	ldr	r1, [pc, #396]	; (8001c18 <main+0x2c8>)
 8001a8c:	4863      	ldr	r0, [pc, #396]	; (8001c1c <main+0x2cc>)
 8001a8e:	f006 fbe9 	bl	8008264 <f_open>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b55      	ldr	r3, [pc, #340]	; (8001bec <main+0x29c>)
 8001a98:	701a      	strb	r2, [r3, #0]

  // Everything worked good except the "file.size" reference
  // This has been replaced in ChaN's FatFs R0.12c version with f_size(&fil)
  f_gets(buffer, f_size(&fil), &fil);
 8001a9a:	4b60      	ldr	r3, [pc, #384]	; (8001c1c <main+0x2cc>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	4a5f      	ldr	r2, [pc, #380]	; (8001c1c <main+0x2cc>)
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	485a      	ldr	r0, [pc, #360]	; (8001c0c <main+0x2bc>)
 8001aa4:	f007 f9fa 	bl	8008e9c <f_gets>
  send_uart(buffer);
 8001aa8:	4858      	ldr	r0, [pc, #352]	; (8001c0c <main+0x2bc>)
 8001aaa:	f7ff ff1b 	bl	80018e4 <send_uart>
  f_close(&fil);
 8001aae:	485b      	ldr	r0, [pc, #364]	; (8001c1c <main+0x2cc>)
 8001ab0:	f007 f915 	bl	8008cde <f_close>
  bufclear();
 8001ab4:	f7ff ff2e 	bl	8001914 <bufclear>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Initialize respective sensor data variables
	  current_audio = adc_value[0];
 8001ab8:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <main+0x288>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	633b      	str	r3, [r7, #48]	; 0x30
	  current_pressure = adc_value[1];
 8001abe:	4b46      	ldr	r3, [pc, #280]	; (8001bd8 <main+0x288>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  current_acc = sqrt(pow(adc_value[2], 2) + pow(adc_value[3], 2) + pow(adc_value[4], 2));
 8001ac4:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <main+0x288>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd3b 	bl	8000544 <__aeabi_ui2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8001bd0 <main+0x280>
 8001ad6:	ec43 2b10 	vmov	d0, r2, r3
 8001ada:	f008 fd75 	bl	800a5c8 <pow>
 8001ade:	ec55 4b10 	vmov	r4, r5, d0
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <main+0x288>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd2c 	bl	8000544 <__aeabi_ui2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001bd0 <main+0x280>
 8001af4:	ec43 2b10 	vmov	d0, r2, r3
 8001af8:	f008 fd66 	bl	800a5c8 <pow>
 8001afc:	ec53 2b10 	vmov	r2, r3, d0
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f7fe fbe2 	bl	80002cc <__adddf3>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <main+0x288>)
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fd15 	bl	8000544 <__aeabi_ui2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001bd0 <main+0x280>
 8001b22:	ec43 2b10 	vmov	d0, r2, r3
 8001b26:	f008 fd4f 	bl	800a5c8 <pow>
 8001b2a:	ec53 2b10 	vmov	r2, r3, d0
 8001b2e:	4620      	mov	r0, r4
 8001b30:	4629      	mov	r1, r5
 8001b32:	f7fe fbcb 	bl	80002cc <__adddf3>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	ec43 2b17 	vmov	d7, r2, r3
 8001b3e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b42:	eef0 0a67 	vmov.f32	s1, s15
 8001b46:	f008 fdaf 	bl	800a6a8 <sqrt>
 8001b4a:	ec53 2b10 	vmov	r2, r3, d0
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7ff f821 	bl	8000b98 <__aeabi_d2uiz>
 8001b56:	4603      	mov	r3, r0
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28

	  current_acc_x = adc_value[2];
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <main+0x288>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
	  current_acc_y = adc_value[3];
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <main+0x288>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	623b      	str	r3, [r7, #32]
	  current_acc_z = adc_value[4];
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <main+0x288>)
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	61fb      	str	r3, [r7, #28]
	  // Attempt to write outputs to console (or somewhere, idk) using HAL UART


	  //_____Test code for printing to console
	  // Increment count
	  count++;
 8001b6c:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <main+0x2d8>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <main+0x2d8>)
 8001b76:	701a      	strb	r2, [r3, #0]
	  // Print count message (doesn't work currently)
	  printf("HELLO WORLD count = %d\r\n", count);
 8001b78:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <main+0x2d8>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	482b      	ldr	r0, [pc, #172]	; (8001c2c <main+0x2dc>)
 8001b80:	f007 fbb8 	bl	80092f4 <iprintf>
	  // 250 ms delay
	  // FIXME: Change delay to be every microsecond (0.001)
	  HAL_Delay(250);
 8001b84:	20fa      	movs	r0, #250	; 0xfa
 8001b86:	f000 fd6b 	bl	8002660 <HAL_Delay>

	  if(adc_value[0] > adc_buf_max) {
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <main+0x288>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <main+0x290>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d903      	bls.n	8001b9e <main+0x24e>
		  adc_buf_max = adc_value[0];
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <main+0x288>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <main+0x290>)
 8001b9c:	6013      	str	r3, [r2, #0]
	  }

	  //Print through UART
	  printf("Current Number is: %d\r\n", UART_counter++);
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	637a      	str	r2, [r7, #52]	; 0x34
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4822      	ldr	r0, [pc, #136]	; (8001c30 <main+0x2e0>)
 8001ba8:	f007 fba4 	bl	80092f4 <iprintf>
	  HAL_Delay(500);
 8001bac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bb0:	f000 fd56 	bl	8002660 <HAL_Delay>

	  // The current samples will be the "previous" samples for the next samples
	  previous_audio = current_audio;
 8001bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb6:	61bb      	str	r3, [r7, #24]
	  previous_pressure = current_pressure;
 8001bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bba:	617b      	str	r3, [r7, #20]
	  previous_acc = current_acc;
 8001bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbe:	613b      	str	r3, [r7, #16]

	  previous_acc_x = current_acc_x;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	60fb      	str	r3, [r7, #12]
	  previous_acc_y = current_acc_y;
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	60bb      	str	r3, [r7, #8]
	  previous_acc_z = current_acc_z;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	607b      	str	r3, [r7, #4]
	  current_audio = adc_value[0];
 8001bcc:	e774      	b.n	8001ab8 <main+0x168>
 8001bce:	bf00      	nop
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	40000000 	.word	0x40000000
 8001bd8:	20000234 	.word	0x20000234
 8001bdc:	200000a8 	.word	0x200000a8
 8001be0:	20000248 	.word	0x20000248
 8001be4:	0800b470 	.word	0x0800b470
 8001be8:	20000250 	.word	0x20000250
 8001bec:	200022b8 	.word	0x200022b8
 8001bf0:	0800b474 	.word	0x0800b474
 8001bf4:	0800b494 	.word	0x0800b494
 8001bf8:	200026bc 	.word	0x200026bc
 8001bfc:	200026c0 	.word	0x200026c0
 8001c00:	3fe00000 	.word	0x3fe00000
 8001c04:	200026c4 	.word	0x200026c4
 8001c08:	0800b4b8 	.word	0x0800b4b8
 8001c0c:	200022bc 	.word	0x200022bc
 8001c10:	200026c8 	.word	0x200026c8
 8001c14:	0800b4d4 	.word	0x0800b4d4
 8001c18:	0800b4f0 	.word	0x0800b4f0
 8001c1c:	20001288 	.word	0x20001288
 8001c20:	0800b4fc 	.word	0x0800b4fc
 8001c24:	0800b520 	.word	0x0800b520
 8001c28:	2000024c 	.word	0x2000024c
 8001c2c:	0800b54c 	.word	0x0800b54c
 8001c30:	0800b568 	.word	0x0800b568

08001c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b094      	sub	sp, #80	; 0x50
 8001c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	2234      	movs	r2, #52	; 0x34
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f007 fb4e 	bl	80092e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <SystemClock_Config+0xdc>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a2b      	ldr	r2, [pc, #172]	; (8001d10 <SystemClock_Config+0xdc>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <SystemClock_Config+0xdc>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c74:	2300      	movs	r3, #0
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <SystemClock_Config+0xe0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a25      	ldr	r2, [pc, #148]	; (8001d14 <SystemClock_Config+0xe0>)
 8001c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <SystemClock_Config+0xe0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ca8:	23b4      	movs	r3, #180	; 0xb4
 8001caa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cac:	2302      	movs	r3, #2
 8001cae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fadf 	bl	8004280 <HAL_RCC_OscConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cc8:	f000 f9d0 	bl	800206c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ccc:	f001 ff3e 	bl	8003b4c <HAL_PWREx_EnableOverDrive>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001cd6:	f000 f9c9 	bl	800206c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cda:	230f      	movs	r3, #15
 8001cdc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ce6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001cec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001cf0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	2105      	movs	r1, #5
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 ff77 	bl	8003bec <HAL_RCC_ClockConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001d04:	f000 f9b2 	bl	800206c <Error_Handler>
  }
}
 8001d08:	bf00      	nop
 8001d0a:	3750      	adds	r7, #80	; 0x50
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000

08001d18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d2c:	4a3d      	ldr	r2, [pc, #244]	; (8001e24 <MX_ADC1_Init+0x10c>)
 8001d2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d44:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d4a:	4b35      	ldr	r3, [pc, #212]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d52:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d58:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d5a:	4a33      	ldr	r2, [pc, #204]	; (8001e28 <MX_ADC1_Init+0x110>)
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d5e:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001d64:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d66:	2205      	movs	r2, #5
 8001d68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d72:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d78:	4829      	ldr	r0, [pc, #164]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d7a:	f000 fc95 	bl	80026a8 <HAL_ADC_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d84:	f000 f972 	bl	800206c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001d90:	2307      	movs	r3, #7
 8001d92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	4821      	ldr	r0, [pc, #132]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001d9a:	f000 fdf7 	bl	800298c <HAL_ADC_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001da4:	f000 f962 	bl	800206c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001dac:	2302      	movs	r3, #2
 8001dae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db0:	463b      	mov	r3, r7
 8001db2:	4619      	mov	r1, r3
 8001db4:	481a      	ldr	r0, [pc, #104]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001db6:	f000 fde9 	bl	800298c <HAL_ADC_ConfigChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001dc0:	f000 f954 	bl	800206c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4813      	ldr	r0, [pc, #76]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001dd2:	f000 fddb 	bl	800298c <HAL_ADC_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001ddc:	f000 f946 	bl	800206c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001de0:	2303      	movs	r3, #3
 8001de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001de4:	2304      	movs	r3, #4
 8001de6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de8:	463b      	mov	r3, r7
 8001dea:	4619      	mov	r1, r3
 8001dec:	480c      	ldr	r0, [pc, #48]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001dee:	f000 fdcd 	bl	800298c <HAL_ADC_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001df8:	f000 f938 	bl	800206c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001e00:	2305      	movs	r3, #5
 8001e02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e04:	463b      	mov	r3, r7
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_ADC1_Init+0x108>)
 8001e0a:	f000 fdbf 	bl	800298c <HAL_ADC_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001e14:	f000 f92a 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200000a8 	.word	0x200000a8
 8001e24:	40012000 	.word	0x40012000
 8001e28:	0f000001 	.word	0x0f000001

08001e2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e60:	2210      	movs	r2, #16
 8001e62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e78:	220a      	movs	r2, #10
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <MX_SPI1_Init+0x64>)
 8001e7e:	f002 fc9d 	bl	80047bc <HAL_SPI_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e88:	f000 f8f0 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000150 	.word	0x20000150
 8001e94:	40013000 	.word	0x40013000

08001e98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	463b      	mov	r3, r7
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <MX_TIM1_Init+0x98>)
 8001eb6:	4a1f      	ldr	r2, [pc, #124]	; (8001f34 <MX_TIM1_Init+0x9c>)
 8001eb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <MX_TIM1_Init+0x98>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <MX_TIM1_Init+0x98>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <MX_TIM1_Init+0x98>)
 8001ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ecc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <MX_TIM1_Init+0x98>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <MX_TIM1_Init+0x98>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <MX_TIM1_Init+0x98>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ee0:	4813      	ldr	r0, [pc, #76]	; (8001f30 <MX_TIM1_Init+0x98>)
 8001ee2:	f003 f89d 	bl	8005020 <HAL_TIM_Base_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001eec:	f000 f8be 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	4619      	mov	r1, r3
 8001efc:	480c      	ldr	r0, [pc, #48]	; (8001f30 <MX_TIM1_Init+0x98>)
 8001efe:	f003 f8de 	bl	80050be <HAL_TIM_ConfigClockSource>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f08:	f000 f8b0 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f14:	463b      	mov	r3, r7
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_TIM1_Init+0x98>)
 8001f1a:	f003 fad1 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f24:	f000 f8a2 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200001a8 	.word	0x200001a8
 8001f34:	40010000 	.word	0x40010000

08001f38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <MX_USART1_UART_Init+0x50>)
 8001f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f5e:	220c      	movs	r2, #12
 8001f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f70:	f003 fb22 	bl	80055b8 <HAL_UART_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f7a:	f000 f877 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200001f0 	.word	0x200001f0
 8001f88:	40011000 	.word	0x40011000

08001f8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <MX_DMA_Init+0x3c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <MX_DMA_Init+0x3c>)
 8001f9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MX_DMA_Init+0x3c>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2038      	movs	r0, #56	; 0x38
 8001fb4:	f001 f875 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fb8:	2038      	movs	r0, #56	; 0x38
 8001fba:	f001 f88e 	bl	80030da <HAL_NVIC_EnableIRQ>

}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800

08001fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <MX_GPIO_Init+0x98>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a1e      	ldr	r2, [pc, #120]	; (8002064 <MX_GPIO_Init+0x98>)
 8001fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <MX_GPIO_Init+0x98>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <MX_GPIO_Init+0x98>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a17      	ldr	r2, [pc, #92]	; (8002064 <MX_GPIO_Init+0x98>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <MX_GPIO_Init+0x98>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_GPIO_Init+0x98>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <MX_GPIO_Init+0x98>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_GPIO_Init+0x98>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002036:	2200      	movs	r2, #0
 8002038:	2101      	movs	r1, #1
 800203a:	480b      	ldr	r0, [pc, #44]	; (8002068 <MX_GPIO_Init+0x9c>)
 800203c:	f001 fd6c 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002040:	2301      	movs	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	4619      	mov	r1, r3
 8002056:	4804      	ldr	r0, [pc, #16]	; (8002068 <MX_GPIO_Init+0x9c>)
 8002058:	f001 fbca 	bl	80037f0 <HAL_GPIO_Init>

}
 800205c:	bf00      	nop
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40023800 	.word	0x40023800
 8002068:	40020400 	.word	0x40020400

0800206c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
}
 8002072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002074:	e7fe      	b.n	8002074 <Error_Handler+0x8>
	...

08002078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_MspInit+0x4c>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <HAL_MspInit+0x4c>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_MspInit+0x4c>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_MspInit+0x4c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <HAL_MspInit+0x4c>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_MspInit+0x4c>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020b6:	2007      	movs	r0, #7
 80020b8:	f000 ffe8 	bl	800308c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40023800 	.word	0x40023800

080020c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2f      	ldr	r2, [pc, #188]	; (80021a4 <HAL_ADC_MspInit+0xdc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d157      	bne.n	800219a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <HAL_ADC_MspInit+0xe0>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	4a2d      	ldr	r2, [pc, #180]	; (80021a8 <HAL_ADC_MspInit+0xe0>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f8:	6453      	str	r3, [r2, #68]	; 0x44
 80020fa:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <HAL_ADC_MspInit+0xe0>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <HAL_ADC_MspInit+0xe0>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <HAL_ADC_MspInit+0xe0>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_ADC_MspInit+0xe0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002122:	231f      	movs	r3, #31
 8002124:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002126:	2303      	movs	r3, #3
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	481d      	ldr	r0, [pc, #116]	; (80021ac <HAL_ADC_MspInit+0xe4>)
 8002136:	f001 fb5b 	bl	80037f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 800213c:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <HAL_ADC_MspInit+0xec>)
 800213e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 8002142:	2200      	movs	r2, #0
 8002144:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 8002154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002158:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 800215c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002160:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 8002164:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002168:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 800216c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002170:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800217e:	480c      	ldr	r0, [pc, #48]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 8002180:	f000 ffc6 	bl	8003110 <HAL_DMA_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800218a:	f7ff ff6f 	bl	800206c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 8002192:	639a      	str	r2, [r3, #56]	; 0x38
 8002194:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <HAL_ADC_MspInit+0xe8>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40012000 	.word	0x40012000
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	200000f0 	.word	0x200000f0
 80021b4:	40026410 	.word	0x40026410

080021b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a19      	ldr	r2, [pc, #100]	; (800223c <HAL_SPI_MspInit+0x84>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d12b      	bne.n	8002232 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_SPI_MspInit+0x88>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a17      	ldr	r2, [pc, #92]	; (8002240 <HAL_SPI_MspInit+0x88>)
 80021e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_SPI_MspInit+0x88>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_SPI_MspInit+0x88>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a10      	ldr	r2, [pc, #64]	; (8002240 <HAL_SPI_MspInit+0x88>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_SPI_MspInit+0x88>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002212:	23e0      	movs	r3, #224	; 0xe0
 8002214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002222:	2305      	movs	r3, #5
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	; (8002244 <HAL_SPI_MspInit+0x8c>)
 800222e:	f001 fadf 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	; 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40013000 	.word	0x40013000
 8002240:	40023800 	.word	0x40023800
 8002244:	40020000 	.word	0x40020000

08002248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_TIM_Base_MspInit+0x3c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d10d      	bne.n	8002276 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_TIM_Base_MspInit+0x40>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_TIM_Base_MspInit+0x40>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b07      	ldr	r3, [pc, #28]	; (8002288 <HAL_TIM_Base_MspInit+0x40>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40010000 	.word	0x40010000
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_UART_MspInit+0x84>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d12c      	bne.n	8002308 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_UART_MspInit+0x88>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a17      	ldr	r2, [pc, #92]	; (8002314 <HAL_UART_MspInit+0x88>)
 80022b8:	f043 0310 	orr.w	r3, r3, #16
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_UART_MspInit+0x88>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_UART_MspInit+0x88>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a10      	ldr	r2, [pc, #64]	; (8002314 <HAL_UART_MspInit+0x88>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_UART_MspInit+0x88>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022f8:	2307      	movs	r3, #7
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <HAL_UART_MspInit+0x8c>)
 8002304:	f001 fa74 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40011000 	.word	0x40011000
 8002314:	40023800 	.word	0x40023800
 8002318:	40020000 	.word	0x40020000

0800231c <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
	if(Timer1 > 0){
 8002320:	4b0e      	ldr	r3, [pc, #56]	; (800235c <SDTimer_Handler+0x40>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <SDTimer_Handler+0x1c>
		Timer1--;
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <SDTimer_Handler+0x40>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b2da      	uxtb	r2, r3
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <SDTimer_Handler+0x40>)
 8002336:	701a      	strb	r2, [r3, #0]
		}
	if(Timer2 > 0){
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <SDTimer_Handler+0x44>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <SDTimer_Handler+0x34>
		Timer2--;
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <SDTimer_Handler+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <SDTimer_Handler+0x44>)
 800234e:	701a      	strb	r2, [r3, #0]
	}
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	200026cd 	.word	0x200026cd
 8002360:	200026ce 	.word	0x200026ce

08002364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <NMI_Handler+0x4>

0800236a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236e:	e7fe      	b.n	800236e <HardFault_Handler+0x4>

08002370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <MemManage_Handler+0x4>

08002376 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237a:	e7fe      	b.n	800237a <BusFault_Handler+0x4>

0800237c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002380:	e7fe      	b.n	8002380 <UsageFault_Handler+0x4>

08002382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <SysTick_Handler+0x30>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <SysTick_Handler+0x30>)
 80023bc:	701a      	strb	r2, [r3, #0]

	if(FatFsCnt >= 10){
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <SysTick_Handler+0x30>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b09      	cmp	r3, #9
 80023c6:	d904      	bls.n	80023d2 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Handler+0x30>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80023ce:	f7ff ffa5 	bl	800231c <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d2:	f000 f925 	bl	8002620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200026cc 	.word	0x200026cc

080023e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <DMA2_Stream0_IRQHandler+0x10>)
 80023e6:	f000 ff99 	bl	800331c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200000f0 	.word	0x200000f0

080023f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	e00a      	b.n	800241c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002406:	f3af 8000 	nop.w
 800240a:	4601      	mov	r1, r0
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	60ba      	str	r2, [r7, #8]
 8002412:	b2ca      	uxtb	r2, r1
 8002414:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	dbf0      	blt.n	8002406 <_read+0x12>
  }

  return len;
 8002424:	687b      	ldr	r3, [r7, #4]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <_close>:
  }
  return len;
}

int _close(int file)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002456:	605a      	str	r2, [r3, #4]
  return 0;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_isatty>:

int _isatty(int file)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <_sbrk+0x5c>)
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <_sbrk+0x60>)
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <_sbrk+0x64>)
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <_sbrk+0x68>)
 80024b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <_sbrk+0x64>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d207      	bcs.n	80024d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c8:	f006 fee2 	bl	8009290 <__errno>
 80024cc:	4603      	mov	r3, r0
 80024ce:	220c      	movs	r2, #12
 80024d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	e009      	b.n	80024ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <_sbrk+0x64>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <_sbrk+0x64>)
 80024e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ea:	68fb      	ldr	r3, [r7, #12]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20020000 	.word	0x20020000
 80024f8:	00000400 	.word	0x00000400
 80024fc:	200026d0 	.word	0x200026d0
 8002500:	20002928 	.word	0x20002928

08002504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <SystemInit+0x20>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	4a05      	ldr	r2, [pc, #20]	; (8002524 <SystemInit+0x20>)
 8002510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002560 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800252c:	480d      	ldr	r0, [pc, #52]	; (8002564 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800252e:	490e      	ldr	r1, [pc, #56]	; (8002568 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002530:	4a0e      	ldr	r2, [pc, #56]	; (800256c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002534:	e002      	b.n	800253c <LoopCopyDataInit>

08002536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800253a:	3304      	adds	r3, #4

0800253c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800253c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002540:	d3f9      	bcc.n	8002536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002542:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002544:	4c0b      	ldr	r4, [pc, #44]	; (8002574 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002548:	e001      	b.n	800254e <LoopFillZerobss>

0800254a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800254a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800254c:	3204      	adds	r2, #4

0800254e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002550:	d3fb      	bcc.n	800254a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002552:	f7ff ffd7 	bl	8002504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002556:	f006 fea1 	bl	800929c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800255a:	f7ff f9f9 	bl	8001950 <main>
  bx  lr    
 800255e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002560:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002568:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800256c:	0800bb00 	.word	0x0800bb00
  ldr r2, =_sbss
 8002570:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002574:	20002924 	.word	0x20002924

08002578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002578:	e7fe      	b.n	8002578 <ADC_IRQHandler>
	...

0800257c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_Init+0x40>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <HAL_Init+0x40>)
 8002586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800258a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_Init+0x40>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <HAL_Init+0x40>)
 8002592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_Init+0x40>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <HAL_Init+0x40>)
 800259e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a4:	2003      	movs	r0, #3
 80025a6:	f000 fd71 	bl	800308c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025aa:	2000      	movs	r0, #0
 80025ac:	f000 f808 	bl	80025c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b0:	f7ff fd62 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023c00 	.word	0x40023c00

080025c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_InitTick+0x54>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_InitTick+0x58>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fd89 	bl	80030f6 <HAL_SYSTICK_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00e      	b.n	800260c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b0f      	cmp	r3, #15
 80025f2:	d80a      	bhi.n	800260a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f4:	2200      	movs	r2, #0
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295
 80025fc:	f000 fd51 	bl	80030a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <HAL_InitTick+0x5c>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000004 	.word	0x20000004
 8002618:	2000000c 	.word	0x2000000c
 800261c:	20000008 	.word	0x20000008

08002620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x20>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_IncTick+0x24>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4413      	add	r3, r2
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_IncTick+0x24>)
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	2000000c 	.word	0x2000000c
 8002644:	200026d4 	.word	0x200026d4

08002648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_GetTick+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	200026d4 	.word	0x200026d4

08002660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff ffee 	bl	8002648 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d005      	beq.n	8002686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_Delay+0x44>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002686:	bf00      	nop
 8002688:	f7ff ffde 	bl	8002648 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	429a      	cmp	r2, r3
 8002696:	d8f7      	bhi.n	8002688 <HAL_Delay+0x28>
  {
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	2000000c 	.word	0x2000000c

080026a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e033      	b.n	8002726 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff fcfe 	bl	80020c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d118      	bne.n	8002718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	f043 0202 	orr.w	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fa78 	bl	8002bf0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
 8002716:	e001      	b.n	800271c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_ADC_Start_DMA+0x1e>
 800274a:	2302      	movs	r3, #2
 800274c:	e0e9      	b.n	8002922 <HAL_ADC_Start_DMA+0x1f2>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d018      	beq.n	8002796 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002774:	4b6d      	ldr	r3, [pc, #436]	; (800292c <HAL_ADC_Start_DMA+0x1fc>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a6d      	ldr	r2, [pc, #436]	; (8002930 <HAL_ADC_Start_DMA+0x200>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0c9a      	lsrs	r2, r3, #18
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002788:	e002      	b.n	8002790 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	3b01      	subs	r3, #1
 800278e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f9      	bne.n	800278a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a4:	d107      	bne.n	80027b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	f040 80a1 	bne.w	8002908 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002804:	d106      	bne.n	8002814 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f023 0206 	bic.w	r2, r3, #6
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
 8002812:	e002      	b.n	800281a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002822:	4b44      	ldr	r3, [pc, #272]	; (8002934 <HAL_ADC_Start_DMA+0x204>)
 8002824:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	4a43      	ldr	r2, [pc, #268]	; (8002938 <HAL_ADC_Start_DMA+0x208>)
 800282c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	4a42      	ldr	r2, [pc, #264]	; (800293c <HAL_ADC_Start_DMA+0x20c>)
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	4a41      	ldr	r2, [pc, #260]	; (8002940 <HAL_ADC_Start_DMA+0x210>)
 800283c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002846:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002856:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002866:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	334c      	adds	r3, #76	; 0x4c
 8002872:	4619      	mov	r1, r3
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f000 fcf8 	bl	800326c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	2b00      	cmp	r3, #0
 8002886:	d12a      	bne.n	80028de <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a2d      	ldr	r2, [pc, #180]	; (8002944 <HAL_ADC_Start_DMA+0x214>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d015      	beq.n	80028be <HAL_ADC_Start_DMA+0x18e>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2c      	ldr	r2, [pc, #176]	; (8002948 <HAL_ADC_Start_DMA+0x218>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d105      	bne.n	80028a8 <HAL_ADC_Start_DMA+0x178>
 800289c:	4b25      	ldr	r3, [pc, #148]	; (8002934 <HAL_ADC_Start_DMA+0x204>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <HAL_ADC_Start_DMA+0x21c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d136      	bne.n	8002920 <HAL_ADC_Start_DMA+0x1f0>
 80028b2:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_ADC_Start_DMA+0x204>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d130      	bne.n	8002920 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d129      	bne.n	8002920 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	e020      	b.n	8002920 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a18      	ldr	r2, [pc, #96]	; (8002944 <HAL_ADC_Start_DMA+0x214>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d11b      	bne.n	8002920 <HAL_ADC_Start_DMA+0x1f0>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d114      	bne.n	8002920 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	e00b      	b.n	8002920 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f043 0210 	orr.w	r2, r3, #16
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	f043 0201 	orr.w	r2, r3, #1
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000004 	.word	0x20000004
 8002930:	431bde83 	.word	0x431bde83
 8002934:	40012300 	.word	0x40012300
 8002938:	08002de9 	.word	0x08002de9
 800293c:	08002ea3 	.word	0x08002ea3
 8002940:	08002ebf 	.word	0x08002ebf
 8002944:	40012000 	.word	0x40012000
 8002948:	40012100 	.word	0x40012100
 800294c:	40012200 	.word	0x40012200

08002950 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1c>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e113      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x244>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b09      	cmp	r3, #9
 80029b6:	d925      	bls.n	8002a04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68d9      	ldr	r1, [r3, #12]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	3b1e      	subs	r3, #30
 80029ce:	2207      	movs	r2, #7
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43da      	mvns	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	400a      	ands	r2, r1
 80029dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68d9      	ldr	r1, [r3, #12]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4618      	mov	r0, r3
 80029f0:	4603      	mov	r3, r0
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4403      	add	r3, r0
 80029f6:	3b1e      	subs	r3, #30
 80029f8:	409a      	lsls	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	e022      	b.n	8002a4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6919      	ldr	r1, [r3, #16]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	2207      	movs	r2, #7
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	400a      	ands	r2, r1
 8002a26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6919      	ldr	r1, [r3, #16]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4403      	add	r3, r0
 8002a40:	409a      	lsls	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d824      	bhi.n	8002a9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	3b05      	subs	r3, #5
 8002a64:	221f      	movs	r2, #31
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	400a      	ands	r2, r1
 8002a72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4618      	mov	r0, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3b05      	subs	r3, #5
 8002a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	635a      	str	r2, [r3, #52]	; 0x34
 8002a9a:	e04c      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b0c      	cmp	r3, #12
 8002aa2:	d824      	bhi.n	8002aee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3b23      	subs	r3, #35	; 0x23
 8002ab6:	221f      	movs	r2, #31
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43da      	mvns	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	3b23      	subs	r3, #35	; 0x23
 8002ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
 8002aec:	e023      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	3b41      	subs	r3, #65	; 0x41
 8002b00:	221f      	movs	r2, #31
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43da      	mvns	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	3b41      	subs	r3, #65	; 0x41
 8002b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b36:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <HAL_ADC_ConfigChannel+0x250>)
 8002b38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a28      	ldr	r2, [pc, #160]	; (8002be0 <HAL_ADC_ConfigChannel+0x254>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d10f      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1d8>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b12      	cmp	r3, #18
 8002b4a:	d10b      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_ADC_ConfigChannel+0x254>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d12b      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x23a>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <HAL_ADC_ConfigChannel+0x258>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d003      	beq.n	8002b80 <HAL_ADC_ConfigChannel+0x1f4>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b11      	cmp	r3, #17
 8002b7e:	d122      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a11      	ldr	r2, [pc, #68]	; (8002be4 <HAL_ADC_ConfigChannel+0x258>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d111      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_ADC_ConfigChannel+0x25c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a11      	ldr	r2, [pc, #68]	; (8002bec <HAL_ADC_ConfigChannel+0x260>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	0c9a      	lsrs	r2, r3, #18
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bb8:	e002      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f9      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	40012300 	.word	0x40012300
 8002be0:	40012000 	.word	0x40012000
 8002be4:	10000012 	.word	0x10000012
 8002be8:	20000004 	.word	0x20000004
 8002bec:	431bde83 	.word	0x431bde83

08002bf0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf8:	4b79      	ldr	r3, [pc, #484]	; (8002de0 <ADC_Init+0x1f0>)
 8002bfa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	021a      	lsls	r2, r3, #8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	4a58      	ldr	r2, [pc, #352]	; (8002de4 <ADC_Init+0x1f4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d022      	beq.n	8002cce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6899      	ldr	r1, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6899      	ldr	r1, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	e00f      	b.n	8002cee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0202 	bic.w	r2, r2, #2
 8002cfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6899      	ldr	r1, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7e1b      	ldrb	r3, [r3, #24]
 8002d08:	005a      	lsls	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01b      	beq.n	8002d54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6859      	ldr	r1, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	3b01      	subs	r3, #1
 8002d48:	035a      	lsls	r2, r3, #13
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	e007      	b.n	8002d64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	051a      	lsls	r2, r3, #20
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6899      	ldr	r1, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002da6:	025a      	lsls	r2, r3, #9
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6899      	ldr	r1, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	029a      	lsls	r2, r3, #10
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	40012300 	.word	0x40012300
 8002de4:	0f000001 	.word	0x0f000001

08002de8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d13c      	bne.n	8002e7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d12b      	bne.n	8002e74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d127      	bne.n	8002e74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d119      	bne.n	8002e74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0220 	bic.w	r2, r2, #32
 8002e4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff fd6b 	bl	8002950 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e7a:	e00e      	b.n	8002e9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff fd75 	bl	8002978 <HAL_ADC_ErrorCallback>
}
 8002e8e:	e004      	b.n	8002e9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff fd57 	bl	8002964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2240      	movs	r2, #64	; 0x40
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f043 0204 	orr.w	r2, r3, #4
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff fd4a 	bl	8002978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	60d3      	str	r3, [r2, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <__NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db0b      	blt.n	8002f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <__NVIC_EnableIRQ+0x38>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2001      	movs	r0, #1
 8002f72:	fa00 f202 	lsl.w	r2, r0, r2
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
         );
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d301      	bcc.n	800305e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <SysTick_Config+0x40>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003066:	210f      	movs	r1, #15
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f7ff ff8e 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SysTick_Config+0x40>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SysTick_Config+0x40>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff29 	bl	8002eec <__NVIC_SetPriorityGrouping>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b4:	f7ff ff3e 	bl	8002f34 <__NVIC_GetPriorityGrouping>
 80030b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f7ff ff8e 	bl	8002fe0 <NVIC_EncodePriority>
 80030c4:	4602      	mov	r2, r0
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff5d 	bl	8002f8c <__NVIC_SetPriority>
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff31 	bl	8002f50 <__NVIC_EnableIRQ>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ffa2 	bl	8003048 <SysTick_Config>
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800311c:	f7ff fa94 	bl	8002648 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e099      	b.n	8003260 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800314c:	e00f      	b.n	800316e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800314e:	f7ff fa7b 	bl	8002648 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b05      	cmp	r3, #5
 800315a:	d908      	bls.n	800316e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2203      	movs	r2, #3
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e078      	b.n	8003260 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e8      	bne.n	800314e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_DMA_Init+0x158>)
 8003188:	4013      	ands	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800319a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d107      	bne.n	80031d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	4313      	orrs	r3, r2
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f023 0307 	bic.w	r3, r3, #7
 80031ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d117      	bne.n	8003232 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00e      	beq.n	8003232 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fa6f 	bl	80036f8 <DMA_CheckFifoParam>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2240      	movs	r2, #64	; 0x40
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800322e:	2301      	movs	r3, #1
 8003230:	e016      	b.n	8003260 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa26 	bl	800368c <DMA_CalcBaseAndBitshift>
 8003240:	4603      	mov	r3, r0
 8003242:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	223f      	movs	r2, #63	; 0x3f
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	f010803f 	.word	0xf010803f

0800326c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_DMA_Start_IT+0x26>
 800328e:	2302      	movs	r3, #2
 8003290:	e040      	b.n	8003314 <HAL_DMA_Start_IT+0xa8>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d12f      	bne.n	8003306 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f9b8 	bl	8003630 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	223f      	movs	r2, #63	; 0x3f
 80032c6:	409a      	lsls	r2, r3
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0216 	orr.w	r2, r2, #22
 80032da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e005      	b.n	8003312 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800330e:	2302      	movs	r3, #2
 8003310:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003312:	7dfb      	ldrb	r3, [r7, #23]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003328:	4b8e      	ldr	r3, [pc, #568]	; (8003564 <HAL_DMA_IRQHandler+0x248>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a8e      	ldr	r2, [pc, #568]	; (8003568 <HAL_DMA_IRQHandler+0x24c>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0a9b      	lsrs	r3, r3, #10
 8003334:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	2208      	movs	r2, #8
 8003348:	409a      	lsls	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01a      	beq.n	8003388 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0204 	bic.w	r2, r2, #4
 800336e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	2208      	movs	r2, #8
 8003376:	409a      	lsls	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003380:	f043 0201 	orr.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	2201      	movs	r2, #1
 800338e:	409a      	lsls	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d012      	beq.n	80033be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	2201      	movs	r2, #1
 80033ac:	409a      	lsls	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f043 0202 	orr.w	r2, r3, #2
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	2204      	movs	r2, #4
 80033c4:	409a      	lsls	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d012      	beq.n	80033f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00b      	beq.n	80033f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	2204      	movs	r2, #4
 80033e2:	409a      	lsls	r2, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	f043 0204 	orr.w	r2, r3, #4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2210      	movs	r2, #16
 80033fa:	409a      	lsls	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d043      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d03c      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	2210      	movs	r2, #16
 8003418:	409a      	lsls	r2, r3
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d018      	beq.n	800345e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d108      	bne.n	800344c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d024      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
 800344a:	e01f      	b.n	800348c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01b      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
 800345c:	e016      	b.n	800348c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d107      	bne.n	800347c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0208 	bic.w	r2, r2, #8
 800347a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	2220      	movs	r2, #32
 8003492:	409a      	lsls	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 808f 	beq.w	80035bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8087 	beq.w	80035bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	2220      	movs	r2, #32
 80034b4:	409a      	lsls	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d136      	bne.n	8003534 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0216 	bic.w	r2, r2, #22
 80034d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <HAL_DMA_IRQHandler+0x1da>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0208 	bic.w	r2, r2, #8
 8003504:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	223f      	movs	r2, #63	; 0x3f
 800350c:	409a      	lsls	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	2b00      	cmp	r3, #0
 8003528:	d07e      	beq.n	8003628 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
        }
        return;
 8003532:	e079      	b.n	8003628 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01d      	beq.n	800357e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10d      	bne.n	800356c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	2b00      	cmp	r3, #0
 8003556:	d031      	beq.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
 8003560:	e02c      	b.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
 8003562:	bf00      	nop
 8003564:	20000004 	.word	0x20000004
 8003568:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d023      	beq.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
 800357c:	e01e      	b.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10f      	bne.n	80035ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0210 	bic.w	r2, r2, #16
 800359a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d032      	beq.n	800362a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d022      	beq.n	8003616 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2205      	movs	r2, #5
 80035d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3301      	adds	r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d307      	bcc.n	8003604 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f2      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x2cc>
 8003602:	e000      	b.n	8003606 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003604:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
 8003626:	e000      	b.n	800362a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003628:	bf00      	nop
    }
  }
}
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800364c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d108      	bne.n	8003670 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800366e:	e007      	b.n	8003680 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	60da      	str	r2, [r3, #12]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	3b10      	subs	r3, #16
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <DMA_CalcBaseAndBitshift+0x64>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036a6:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <DMA_CalcBaseAndBitshift+0x68>)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d909      	bls.n	80036ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	; 0x58
 80036cc:	e007      	b.n	80036de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	aaaaaaab 	.word	0xaaaaaaab
 80036f4:	0800b5e0 	.word	0x0800b5e0

080036f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11f      	bne.n	8003752 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d856      	bhi.n	80037c6 <DMA_CheckFifoParam+0xce>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <DMA_CheckFifoParam+0x28>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003731 	.word	0x08003731
 8003724:	08003743 	.word	0x08003743
 8003728:	08003731 	.word	0x08003731
 800372c:	080037c7 	.word	0x080037c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d046      	beq.n	80037ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003740:	e043      	b.n	80037ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800374a:	d140      	bne.n	80037ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e03d      	b.n	80037ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375a:	d121      	bne.n	80037a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d837      	bhi.n	80037d2 <DMA_CheckFifoParam+0xda>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <DMA_CheckFifoParam+0x70>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	08003779 	.word	0x08003779
 800376c:	0800377f 	.word	0x0800377f
 8003770:	08003779 	.word	0x08003779
 8003774:	08003791 	.word	0x08003791
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      break;
 800377c:	e030      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d025      	beq.n	80037d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378e:	e022      	b.n	80037d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003798:	d11f      	bne.n	80037da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800379e:	e01c      	b.n	80037da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d903      	bls.n	80037ae <DMA_CheckFifoParam+0xb6>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d003      	beq.n	80037b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037ac:	e018      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      break;
 80037b2:	e015      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00e      	beq.n	80037de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      break;
 80037c4:	e00b      	b.n	80037de <DMA_CheckFifoParam+0xe6>
      break;
 80037c6:	bf00      	nop
 80037c8:	e00a      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
 80037cc:	e008      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ce:	bf00      	nop
 80037d0:	e006      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037d2:	bf00      	nop
 80037d4:	e004      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
    }
  } 
  
  return status; 
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop

080037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e165      	b.n	8003ad8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800380c:	2201      	movs	r2, #1
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	429a      	cmp	r2, r3
 8003826:	f040 8154 	bne.w	8003ad2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d005      	beq.n	8003842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800383e:	2b02      	cmp	r3, #2
 8003840:	d130      	bne.n	80038a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003878:	2201      	movs	r2, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 0201 	and.w	r2, r3, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d017      	beq.n	80038e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d123      	bne.n	8003934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	08da      	lsrs	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3208      	adds	r2, #8
 800392e:	69b9      	ldr	r1, [r7, #24]
 8003930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0203 	and.w	r2, r3, #3
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80ae 	beq.w	8003ad2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b5d      	ldr	r3, [pc, #372]	; (8003af0 <HAL_GPIO_Init+0x300>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	4a5c      	ldr	r2, [pc, #368]	; (8003af0 <HAL_GPIO_Init+0x300>)
 8003980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b5a      	ldr	r3, [pc, #360]	; (8003af0 <HAL_GPIO_Init+0x300>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003992:	4a58      	ldr	r2, [pc, #352]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3302      	adds	r3, #2
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4f      	ldr	r2, [pc, #316]	; (8003af8 <HAL_GPIO_Init+0x308>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d025      	beq.n	8003a0a <HAL_GPIO_Init+0x21a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4e      	ldr	r2, [pc, #312]	; (8003afc <HAL_GPIO_Init+0x30c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01f      	beq.n	8003a06 <HAL_GPIO_Init+0x216>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a4d      	ldr	r2, [pc, #308]	; (8003b00 <HAL_GPIO_Init+0x310>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d019      	beq.n	8003a02 <HAL_GPIO_Init+0x212>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4c      	ldr	r2, [pc, #304]	; (8003b04 <HAL_GPIO_Init+0x314>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <HAL_GPIO_Init+0x20e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4b      	ldr	r2, [pc, #300]	; (8003b08 <HAL_GPIO_Init+0x318>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00d      	beq.n	80039fa <HAL_GPIO_Init+0x20a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4a      	ldr	r2, [pc, #296]	; (8003b0c <HAL_GPIO_Init+0x31c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d007      	beq.n	80039f6 <HAL_GPIO_Init+0x206>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a49      	ldr	r2, [pc, #292]	; (8003b10 <HAL_GPIO_Init+0x320>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <HAL_GPIO_Init+0x202>
 80039ee:	2306      	movs	r3, #6
 80039f0:	e00c      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 80039f2:	2307      	movs	r3, #7
 80039f4:	e00a      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 80039f6:	2305      	movs	r3, #5
 80039f8:	e008      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 80039fa:	2304      	movs	r3, #4
 80039fc:	e006      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 80039fe:	2303      	movs	r3, #3
 8003a00:	e004      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e002      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	f002 0203 	and.w	r2, r2, #3
 8003a12:	0092      	lsls	r2, r2, #2
 8003a14:	4093      	lsls	r3, r2
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a1c:	4935      	ldr	r1, [pc, #212]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	089b      	lsrs	r3, r3, #2
 8003a22:	3302      	adds	r3, #2
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a2a:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a4e:	4a31      	ldr	r2, [pc, #196]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a54:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a78:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a7e:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aa2:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003acc:	4a11      	ldr	r2, [pc, #68]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	f67f ae96 	bls.w	800380c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	3724      	adds	r7, #36	; 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40013800 	.word	0x40013800
 8003af8:	40020000 	.word	0x40020000
 8003afc:	40020400 	.word	0x40020400
 8003b00:	40020800 	.word	0x40020800
 8003b04:	40020c00 	.word	0x40020c00
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40021400 	.word	0x40021400
 8003b10:	40021800 	.word	0x40021800
 8003b14:	40013c00 	.word	0x40013c00

08003b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	807b      	strh	r3, [r7, #2]
 8003b24:	4613      	mov	r3, r2
 8003b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b28:	787b      	ldrb	r3, [r7, #1]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b34:	e003      	b.n	8003b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	041a      	lsls	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	619a      	str	r2, [r3, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_PWREx_EnableOverDrive+0x90>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a1f      	ldr	r2, [pc, #124]	; (8003bdc <HAL_PWREx_EnableOverDrive+0x90>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <HAL_PWREx_EnableOverDrive+0x90>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b78:	f7fe fd66 	bl	8002648 <HAL_GetTick>
 8003b7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b7e:	e009      	b.n	8003b94 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b80:	f7fe fd62 	bl	8002648 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b8e:	d901      	bls.n	8003b94 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e01f      	b.n	8003bd4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d1ee      	bne.n	8003b80 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ba8:	f7fe fd4e 	bl	8002648 <HAL_GetTick>
 8003bac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bae:	e009      	b.n	8003bc4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bb0:	f7fe fd4a 	bl	8002648 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bbe:	d901      	bls.n	8003bc4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e007      	b.n	8003bd4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bd0:	d1ee      	bne.n	8003bb0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	420e0040 	.word	0x420e0040
 8003be4:	40007000 	.word	0x40007000
 8003be8:	420e0044 	.word	0x420e0044

08003bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0cc      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c00:	4b68      	ldr	r3, [pc, #416]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d90c      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b65      	ldr	r3, [pc, #404]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b63      	ldr	r3, [pc, #396]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0b8      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a58      	ldr	r2, [pc, #352]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c58:	4b53      	ldr	r3, [pc, #332]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	494d      	ldr	r1, [pc, #308]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d044      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d119      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e07f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d003      	beq.n	8003caa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003caa:	4b3f      	ldr	r3, [pc, #252]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e06f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e067      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b37      	ldr	r3, [pc, #220]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4934      	ldr	r1, [pc, #208]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fe fcb4 	bl	8002648 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fe fcb0 	bl	8002648 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e04f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d20c      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e032      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4916      	ldr	r1, [pc, #88]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	490e      	ldr	r1, [pc, #56]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d72:	f000 f855 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	490a      	ldr	r1, [pc, #40]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	5ccb      	ldrb	r3, [r1, r3]
 8003d86:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fc14 	bl	80025c0 <HAL_InitTick>

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023c00 	.word	0x40023c00
 8003da8:	40023800 	.word	0x40023800
 8003dac:	0800b5c8 	.word	0x0800b5c8
 8003db0:	20000004 	.word	0x20000004
 8003db4:	20000008 	.word	0x20000008

08003db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000004 	.word	0x20000004

08003dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dd4:	f7ff fff0 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0a9b      	lsrs	r3, r3, #10
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	; (8003df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	0800b5d8 	.word	0x0800b5d8

08003df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dfc:	f7ff ffdc 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0b5b      	lsrs	r3, r3, #13
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4903      	ldr	r1, [pc, #12]	; (8003e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	0800b5d8 	.word	0x0800b5d8

08003e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b0ae      	sub	sp, #184	; 0xb8
 8003e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e46:	4bcb      	ldr	r3, [pc, #812]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b0c      	cmp	r3, #12
 8003e50:	f200 8206 	bhi.w	8004260 <HAL_RCC_GetSysClockFreq+0x440>
 8003e54:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003e91 	.word	0x08003e91
 8003e60:	08004261 	.word	0x08004261
 8003e64:	08004261 	.word	0x08004261
 8003e68:	08004261 	.word	0x08004261
 8003e6c:	08003e99 	.word	0x08003e99
 8003e70:	08004261 	.word	0x08004261
 8003e74:	08004261 	.word	0x08004261
 8003e78:	08004261 	.word	0x08004261
 8003e7c:	08003ea1 	.word	0x08003ea1
 8003e80:	08004261 	.word	0x08004261
 8003e84:	08004261 	.word	0x08004261
 8003e88:	08004261 	.word	0x08004261
 8003e8c:	08004091 	.word	0x08004091
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e90:	4bb9      	ldr	r3, [pc, #740]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003e96:	e1e7      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e98:	4bb8      	ldr	r3, [pc, #736]	; (800417c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e9e:	e1e3      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea0:	4bb4      	ldr	r3, [pc, #720]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eac:	4bb1      	ldr	r3, [pc, #708]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d071      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb8:	4bae      	ldr	r3, [pc, #696]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ec4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003eda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ede:	4622      	mov	r2, r4
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f04f 0100 	mov.w	r1, #0
 8003eea:	0159      	lsls	r1, r3, #5
 8003eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef0:	0150      	lsls	r0, r2, #5
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	1a51      	subs	r1, r2, r1
 8003efa:	6439      	str	r1, [r7, #64]	; 0x40
 8003efc:	4629      	mov	r1, r5
 8003efe:	eb63 0301 	sbc.w	r3, r3, r1
 8003f02:	647b      	str	r3, [r7, #68]	; 0x44
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003f10:	4649      	mov	r1, r9
 8003f12:	018b      	lsls	r3, r1, #6
 8003f14:	4641      	mov	r1, r8
 8003f16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	018a      	lsls	r2, r1, #6
 8003f1e:	4641      	mov	r1, r8
 8003f20:	1a51      	subs	r1, r2, r1
 8003f22:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f24:	4649      	mov	r1, r9
 8003f26:	eb63 0301 	sbc.w	r3, r3, r1
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003f38:	4649      	mov	r1, r9
 8003f3a:	00cb      	lsls	r3, r1, #3
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f42:	4641      	mov	r1, r8
 8003f44:	00ca      	lsls	r2, r1, #3
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4622      	mov	r2, r4
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	633b      	str	r3, [r7, #48]	; 0x30
 8003f52:	462b      	mov	r3, r5
 8003f54:	460a      	mov	r2, r1
 8003f56:	eb42 0303 	adc.w	r3, r2, r3
 8003f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f68:	4629      	mov	r1, r5
 8003f6a:	024b      	lsls	r3, r1, #9
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f72:	4621      	mov	r1, r4
 8003f74:	024a      	lsls	r2, r1, #9
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003f8c:	f7fc fe24 	bl	8000bd8 <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4613      	mov	r3, r2
 8003f96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f9a:	e067      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9c:	4b75      	ldr	r3, [pc, #468]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fa8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	462b      	mov	r3, r5
 8003fc2:	f04f 0000 	mov.w	r0, #0
 8003fc6:	f04f 0100 	mov.w	r1, #0
 8003fca:	0159      	lsls	r1, r3, #5
 8003fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fd0:	0150      	lsls	r0, r2, #5
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	1a51      	subs	r1, r2, r1
 8003fda:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fdc:	4629      	mov	r1, r5
 8003fde:	eb63 0301 	sbc.w	r3, r3, r1
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	018b      	lsls	r3, r1, #6
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	018a      	lsls	r2, r1, #6
 8003ffe:	4641      	mov	r1, r8
 8004000:	ebb2 0a01 	subs.w	sl, r2, r1
 8004004:	4649      	mov	r1, r9
 8004006:	eb63 0b01 	sbc.w	fp, r3, r1
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004016:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800401a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800401e:	4692      	mov	sl, r2
 8004020:	469b      	mov	fp, r3
 8004022:	4623      	mov	r3, r4
 8004024:	eb1a 0303 	adds.w	r3, sl, r3
 8004028:	623b      	str	r3, [r7, #32]
 800402a:	462b      	mov	r3, r5
 800402c:	eb4b 0303 	adc.w	r3, fp, r3
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800403e:	4629      	mov	r1, r5
 8004040:	028b      	lsls	r3, r1, #10
 8004042:	4621      	mov	r1, r4
 8004044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004048:	4621      	mov	r1, r4
 800404a:	028a      	lsls	r2, r1, #10
 800404c:	4610      	mov	r0, r2
 800404e:	4619      	mov	r1, r3
 8004050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004054:	2200      	movs	r2, #0
 8004056:	673b      	str	r3, [r7, #112]	; 0x70
 8004058:	677a      	str	r2, [r7, #116]	; 0x74
 800405a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800405e:	f7fc fdbb 	bl	8000bd8 <__aeabi_uldivmod>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4613      	mov	r3, r2
 8004068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800406c:	4b41      	ldr	r3, [pc, #260]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	3301      	adds	r3, #1
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800407e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004082:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004086:	fbb2 f3f3 	udiv	r3, r2, r3
 800408a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800408e:	e0eb      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004090:	4b38      	ldr	r3, [pc, #224]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004098:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800409c:	4b35      	ldr	r3, [pc, #212]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d06b      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a8:	4b32      	ldr	r3, [pc, #200]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	099b      	lsrs	r3, r3, #6
 80040ae:	2200      	movs	r2, #0
 80040b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80040b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	663b      	str	r3, [r7, #96]	; 0x60
 80040bc:	2300      	movs	r3, #0
 80040be:	667b      	str	r3, [r7, #100]	; 0x64
 80040c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80040c4:	4622      	mov	r2, r4
 80040c6:	462b      	mov	r3, r5
 80040c8:	f04f 0000 	mov.w	r0, #0
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	0159      	lsls	r1, r3, #5
 80040d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d6:	0150      	lsls	r0, r2, #5
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4621      	mov	r1, r4
 80040de:	1a51      	subs	r1, r2, r1
 80040e0:	61b9      	str	r1, [r7, #24]
 80040e2:	4629      	mov	r1, r5
 80040e4:	eb63 0301 	sbc.w	r3, r3, r1
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040f6:	4659      	mov	r1, fp
 80040f8:	018b      	lsls	r3, r1, #6
 80040fa:	4651      	mov	r1, sl
 80040fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004100:	4651      	mov	r1, sl
 8004102:	018a      	lsls	r2, r1, #6
 8004104:	4651      	mov	r1, sl
 8004106:	ebb2 0801 	subs.w	r8, r2, r1
 800410a:	4659      	mov	r1, fp
 800410c:	eb63 0901 	sbc.w	r9, r3, r1
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800411c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004120:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004124:	4690      	mov	r8, r2
 8004126:	4699      	mov	r9, r3
 8004128:	4623      	mov	r3, r4
 800412a:	eb18 0303 	adds.w	r3, r8, r3
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	462b      	mov	r3, r5
 8004132:	eb49 0303 	adc.w	r3, r9, r3
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004144:	4629      	mov	r1, r5
 8004146:	024b      	lsls	r3, r1, #9
 8004148:	4621      	mov	r1, r4
 800414a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800414e:	4621      	mov	r1, r4
 8004150:	024a      	lsls	r2, r1, #9
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800415a:	2200      	movs	r2, #0
 800415c:	65bb      	str	r3, [r7, #88]	; 0x58
 800415e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004160:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004164:	f7fc fd38 	bl	8000bd8 <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4613      	mov	r3, r2
 800416e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004172:	e065      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x420>
 8004174:	40023800 	.word	0x40023800
 8004178:	00f42400 	.word	0x00f42400
 800417c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004180:	4b3d      	ldr	r3, [pc, #244]	; (8004278 <HAL_RCC_GetSysClockFreq+0x458>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	099b      	lsrs	r3, r3, #6
 8004186:	2200      	movs	r2, #0
 8004188:	4618      	mov	r0, r3
 800418a:	4611      	mov	r1, r2
 800418c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004190:	653b      	str	r3, [r7, #80]	; 0x50
 8004192:	2300      	movs	r3, #0
 8004194:	657b      	str	r3, [r7, #84]	; 0x54
 8004196:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800419a:	4642      	mov	r2, r8
 800419c:	464b      	mov	r3, r9
 800419e:	f04f 0000 	mov.w	r0, #0
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	0159      	lsls	r1, r3, #5
 80041a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ac:	0150      	lsls	r0, r2, #5
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4641      	mov	r1, r8
 80041b4:	1a51      	subs	r1, r2, r1
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	4649      	mov	r1, r9
 80041ba:	eb63 0301 	sbc.w	r3, r3, r1
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041cc:	4659      	mov	r1, fp
 80041ce:	018b      	lsls	r3, r1, #6
 80041d0:	4651      	mov	r1, sl
 80041d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041d6:	4651      	mov	r1, sl
 80041d8:	018a      	lsls	r2, r1, #6
 80041da:	4651      	mov	r1, sl
 80041dc:	1a54      	subs	r4, r2, r1
 80041de:	4659      	mov	r1, fp
 80041e0:	eb63 0501 	sbc.w	r5, r3, r1
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	00eb      	lsls	r3, r5, #3
 80041ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f2:	00e2      	lsls	r2, r4, #3
 80041f4:	4614      	mov	r4, r2
 80041f6:	461d      	mov	r5, r3
 80041f8:	4643      	mov	r3, r8
 80041fa:	18e3      	adds	r3, r4, r3
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	464b      	mov	r3, r9
 8004200:	eb45 0303 	adc.w	r3, r5, r3
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004212:	4629      	mov	r1, r5
 8004214:	028b      	lsls	r3, r1, #10
 8004216:	4621      	mov	r1, r4
 8004218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800421c:	4621      	mov	r1, r4
 800421e:	028a      	lsls	r2, r1, #10
 8004220:	4610      	mov	r0, r2
 8004222:	4619      	mov	r1, r3
 8004224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004228:	2200      	movs	r2, #0
 800422a:	64bb      	str	r3, [r7, #72]	; 0x48
 800422c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800422e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004232:	f7fc fcd1 	bl	8000bd8 <__aeabi_uldivmod>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4613      	mov	r3, r2
 800423c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004240:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <HAL_RCC_GetSysClockFreq+0x458>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0f1b      	lsrs	r3, r3, #28
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800424e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004256:	fbb2 f3f3 	udiv	r3, r2, r3
 800425a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800425e:	e003      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004266:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004268:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800426c:	4618      	mov	r0, r3
 800426e:	37b8      	adds	r7, #184	; 0xb8
 8004270:	46bd      	mov	sp, r7
 8004272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800
 800427c:	00f42400 	.word	0x00f42400

08004280 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e28d      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8083 	beq.w	80043a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042a0:	4b94      	ldr	r3, [pc, #592]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d019      	beq.n	80042e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042ac:	4b91      	ldr	r3, [pc, #580]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d106      	bne.n	80042c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042b8:	4b8e      	ldr	r3, [pc, #568]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c4:	d00c      	beq.n	80042e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c6:	4b8b      	ldr	r3, [pc, #556]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d112      	bne.n	80042f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042d2:	4b88      	ldr	r3, [pc, #544]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042de:	d10b      	bne.n	80042f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	4b84      	ldr	r3, [pc, #528]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d05b      	beq.n	80043a4 <HAL_RCC_OscConfig+0x124>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d157      	bne.n	80043a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e25a      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d106      	bne.n	8004310 <HAL_RCC_OscConfig+0x90>
 8004302:	4b7c      	ldr	r3, [pc, #496]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a7b      	ldr	r2, [pc, #492]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e01d      	b.n	800434c <HAL_RCC_OscConfig+0xcc>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004318:	d10c      	bne.n	8004334 <HAL_RCC_OscConfig+0xb4>
 800431a:	4b76      	ldr	r3, [pc, #472]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a75      	ldr	r2, [pc, #468]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b73      	ldr	r3, [pc, #460]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a72      	ldr	r2, [pc, #456]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e00b      	b.n	800434c <HAL_RCC_OscConfig+0xcc>
 8004334:	4b6f      	ldr	r3, [pc, #444]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a6e      	ldr	r2, [pc, #440]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 800433a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	4b6c      	ldr	r3, [pc, #432]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6b      	ldr	r2, [pc, #428]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800434a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fe f978 	bl	8002648 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800435c:	f7fe f974 	bl	8002648 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	; 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e21f      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	4b61      	ldr	r3, [pc, #388]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0xdc>
 800437a:	e014      	b.n	80043a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fe f964 	bl	8002648 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004384:	f7fe f960 	bl	8002648 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e20b      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	4b57      	ldr	r3, [pc, #348]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x104>
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d06f      	beq.n	8004492 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043b2:	4b50      	ldr	r3, [pc, #320]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d017      	beq.n	80043ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043be:	4b4d      	ldr	r3, [pc, #308]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d105      	bne.n	80043d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043ca:	4b4a      	ldr	r3, [pc, #296]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d6:	4b47      	ldr	r3, [pc, #284]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043de:	2b0c      	cmp	r3, #12
 80043e0:	d11c      	bne.n	800441c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b44      	ldr	r3, [pc, #272]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d116      	bne.n	800441c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_RCC_OscConfig+0x186>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d001      	beq.n	8004406 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e1d3      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004406:	4b3b      	ldr	r3, [pc, #236]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4937      	ldr	r1, [pc, #220]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	e03a      	b.n	8004492 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d020      	beq.n	8004466 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004424:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <HAL_RCC_OscConfig+0x278>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fe f90d 	bl	8002648 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004432:	f7fe f909 	bl	8002648 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e1b4      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004444:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004450:	4b28      	ldr	r3, [pc, #160]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4925      	ldr	r1, [pc, #148]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]
 8004464:	e015      	b.n	8004492 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCC_OscConfig+0x278>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fe f8ec 	bl	8002648 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004474:	f7fe f8e8 	bl	8002648 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e193      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d036      	beq.n	800450c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d016      	beq.n	80044d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <HAL_RCC_OscConfig+0x27c>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fe f8cc 	bl	8002648 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b4:	f7fe f8c8 	bl	8002648 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e173      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80044c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x234>
 80044d2:	e01b      	b.n	800450c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <HAL_RCC_OscConfig+0x27c>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044da:	f7fe f8b5 	bl	8002648 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e0:	e00e      	b.n	8004500 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e2:	f7fe f8b1 	bl	8002648 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d907      	bls.n	8004500 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e15c      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
 80044f4:	40023800 	.word	0x40023800
 80044f8:	42470000 	.word	0x42470000
 80044fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004500:	4b8a      	ldr	r3, [pc, #552]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ea      	bne.n	80044e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8097 	beq.w	8004648 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451a:	2300      	movs	r3, #0
 800451c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451e:	4b83      	ldr	r3, [pc, #524]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	4b7f      	ldr	r3, [pc, #508]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	4a7e      	ldr	r2, [pc, #504]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004538:	6413      	str	r3, [r2, #64]	; 0x40
 800453a:	4b7c      	ldr	r3, [pc, #496]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454a:	4b79      	ldr	r3, [pc, #484]	; (8004730 <HAL_RCC_OscConfig+0x4b0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d118      	bne.n	8004588 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004556:	4b76      	ldr	r3, [pc, #472]	; (8004730 <HAL_RCC_OscConfig+0x4b0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a75      	ldr	r2, [pc, #468]	; (8004730 <HAL_RCC_OscConfig+0x4b0>)
 800455c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004562:	f7fe f871 	bl	8002648 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456a:	f7fe f86d 	bl	8002648 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e118      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457c:	4b6c      	ldr	r3, [pc, #432]	; (8004730 <HAL_RCC_OscConfig+0x4b0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d106      	bne.n	800459e <HAL_RCC_OscConfig+0x31e>
 8004590:	4b66      	ldr	r3, [pc, #408]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a65      	ldr	r2, [pc, #404]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	e01c      	b.n	80045d8 <HAL_RCC_OscConfig+0x358>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x340>
 80045a6:	4b61      	ldr	r3, [pc, #388]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a60      	ldr	r2, [pc, #384]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045ac:	f043 0304 	orr.w	r3, r3, #4
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
 80045b2:	4b5e      	ldr	r3, [pc, #376]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a5d      	ldr	r2, [pc, #372]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0x358>
 80045c0:	4b5a      	ldr	r3, [pc, #360]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4a59      	ldr	r2, [pc, #356]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	6713      	str	r3, [r2, #112]	; 0x70
 80045cc:	4b57      	ldr	r3, [pc, #348]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	4a56      	ldr	r2, [pc, #344]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045d2:	f023 0304 	bic.w	r3, r3, #4
 80045d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d015      	beq.n	800460c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fe f832 	bl	8002648 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fe f82e 	bl	8002648 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0d7      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fe:	4b4b      	ldr	r3, [pc, #300]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ee      	beq.n	80045e8 <HAL_RCC_OscConfig+0x368>
 800460a:	e014      	b.n	8004636 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fe f81c 	bl	8002648 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004612:	e00a      	b.n	800462a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fe f818 	bl	8002648 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e0c1      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462a:	4b40      	ldr	r3, [pc, #256]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1ee      	bne.n	8004614 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463c:	4b3b      	ldr	r3, [pc, #236]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	4a3a      	ldr	r2, [pc, #232]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004646:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80ad 	beq.w	80047ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004652:	4b36      	ldr	r3, [pc, #216]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
 800465a:	2b08      	cmp	r3, #8
 800465c:	d060      	beq.n	8004720 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d145      	bne.n	80046f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004666:	4b33      	ldr	r3, [pc, #204]	; (8004734 <HAL_RCC_OscConfig+0x4b4>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fd ffec 	bl	8002648 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004674:	f7fd ffe8 	bl	8002648 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e093      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	019b      	lsls	r3, r3, #6
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	3b01      	subs	r3, #1
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	071b      	lsls	r3, r3, #28
 80046be:	491b      	ldr	r1, [pc, #108]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x4b4>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd ffbd 	bl	8002648 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fd ffb9 	bl	8002648 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e064      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x452>
 80046f0:	e05c      	b.n	80047ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_RCC_OscConfig+0x4b4>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fd ffa6 	bl	8002648 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fd ffa2 	bl	8002648 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e04d      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x480>
 800471e:	e045      	b.n	80047ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e040      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004738:	4b1f      	ldr	r3, [pc, #124]	; (80047b8 <HAL_RCC_OscConfig+0x538>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d030      	beq.n	80047a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d129      	bne.n	80047a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d122      	bne.n	80047a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800476e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004770:	4293      	cmp	r3, r2
 8004772:	d119      	bne.n	80047a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d10f      	bne.n	80047a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800

080047bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07b      	b.n	80048c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d108      	bne.n	80047e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047de:	d009      	beq.n	80047f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	61da      	str	r2, [r3, #28]
 80047e6:	e005      	b.n	80047f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fd fcd2 	bl	80021b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004878:	ea42 0103 	orr.w	r1, r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004880:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	0c1b      	lsrs	r3, r3, #16
 8004892:	f003 0104 	and.w	r1, r3, #4
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	f003 0210 	and.w	r2, r3, #16
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b088      	sub	sp, #32
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	603b      	str	r3, [r7, #0]
 80048da:	4613      	mov	r3, r2
 80048dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_SPI_Transmit+0x22>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e126      	b.n	8004b3e <HAL_SPI_Transmit+0x270>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048f8:	f7fd fea6 	bl	8002648 <HAL_GetTick>
 80048fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b01      	cmp	r3, #1
 800490c:	d002      	beq.n	8004914 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800490e:	2302      	movs	r3, #2
 8004910:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004912:	e10b      	b.n	8004b2c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_SPI_Transmit+0x52>
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004924:	e102      	b.n	8004b2c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2203      	movs	r2, #3
 800492a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	88fa      	ldrh	r2, [r7, #6]
 800493e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800496c:	d10f      	bne.n	800498e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800497c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800498c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	d007      	beq.n	80049ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b4:	d14b      	bne.n	8004a4e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_SPI_Transmit+0xf6>
 80049be:	8afb      	ldrh	r3, [r7, #22]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d13e      	bne.n	8004a42 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	881a      	ldrh	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	1c9a      	adds	r2, r3, #2
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049e8:	e02b      	b.n	8004a42 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d112      	bne.n	8004a1e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	881a      	ldrh	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	1c9a      	adds	r2, r3, #2
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a1c:	e011      	b.n	8004a42 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a1e:	f7fd fe13 	bl	8002648 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d803      	bhi.n	8004a36 <HAL_SPI_Transmit+0x168>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a34:	d102      	bne.n	8004a3c <HAL_SPI_Transmit+0x16e>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a40:	e074      	b.n	8004b2c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1ce      	bne.n	80049ea <HAL_SPI_Transmit+0x11c>
 8004a4c:	e04c      	b.n	8004ae8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_SPI_Transmit+0x18e>
 8004a56:	8afb      	ldrh	r3, [r7, #22]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d140      	bne.n	8004ade <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	330c      	adds	r3, #12
 8004a66:	7812      	ldrb	r2, [r2, #0]
 8004a68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a82:	e02c      	b.n	8004ade <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d113      	bne.n	8004aba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	7812      	ldrb	r2, [r2, #0]
 8004a9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ab8:	e011      	b.n	8004ade <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aba:	f7fd fdc5 	bl	8002648 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d803      	bhi.n	8004ad2 <HAL_SPI_Transmit+0x204>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d102      	bne.n	8004ad8 <HAL_SPI_Transmit+0x20a>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004adc:	e026      	b.n	8004b2c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1cd      	bne.n	8004a84 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	6839      	ldr	r1, [r7, #0]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fa55 	bl	8004f9c <SPI_EndRxTxTransaction>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e000      	b.n	8004b2c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b08c      	sub	sp, #48	; 0x30
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b54:	2301      	movs	r3, #1
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x26>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e18a      	b.n	8004e82 <HAL_SPI_TransmitReceive+0x33c>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b74:	f7fd fd68 	bl	8002648 <HAL_GetTick>
 8004b78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b8a:	887b      	ldrh	r3, [r7, #2]
 8004b8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d00f      	beq.n	8004bb6 <HAL_SPI_TransmitReceive+0x70>
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b9c:	d107      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x68>
 8004ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d003      	beq.n	8004bb6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004bae:	2302      	movs	r3, #2
 8004bb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bb4:	e15b      	b.n	8004e6e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_SPI_TransmitReceive+0x82>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_SPI_TransmitReceive+0x82>
 8004bc2:	887b      	ldrh	r3, [r7, #2]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d103      	bne.n	8004bd0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bce:	e14e      	b.n	8004e6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d003      	beq.n	8004be4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2205      	movs	r2, #5
 8004be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	887a      	ldrh	r2, [r7, #2]
 8004bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	887a      	ldrh	r2, [r7, #2]
 8004bfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	887a      	ldrh	r2, [r7, #2]
 8004c06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	2b40      	cmp	r3, #64	; 0x40
 8004c26:	d007      	beq.n	8004c38 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c40:	d178      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_SPI_TransmitReceive+0x10a>
 8004c4a:	8b7b      	ldrh	r3, [r7, #26]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d166      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	881a      	ldrh	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c74:	e053      	b.n	8004d1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d11b      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x176>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <HAL_SPI_TransmitReceive+0x176>
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d113      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	881a      	ldrh	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	1c9a      	adds	r2, r3, #2
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d119      	bne.n	8004cfe <HAL_SPI_TransmitReceive+0x1b8>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d014      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cfe:	f7fd fca3 	bl	8002648 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d807      	bhi.n	8004d1e <HAL_SPI_TransmitReceive+0x1d8>
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d003      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d1c:	e0a7      	b.n	8004e6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1a6      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x130>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1a1      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x130>
 8004d32:	e07c      	b.n	8004e2e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_SPI_TransmitReceive+0x1fc>
 8004d3c:	8b7b      	ldrh	r3, [r7, #26]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d16b      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	7812      	ldrb	r2, [r2, #0]
 8004d4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d68:	e057      	b.n	8004e1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d11c      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x26c>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d017      	beq.n	8004db2 <HAL_SPI_TransmitReceive+0x26c>
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d114      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	7812      	ldrb	r2, [r2, #0]
 8004d94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d119      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x2ae>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d014      	beq.n	8004df4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004df0:	2301      	movs	r3, #1
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004df4:	f7fd fc28 	bl	8002648 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d803      	bhi.n	8004e0c <HAL_SPI_TransmitReceive+0x2c6>
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d102      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x2cc>
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e18:	e029      	b.n	8004e6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1a2      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x224>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d19d      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f8b2 	bl	8004f9c <SPI_EndRxTxTransaction>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d006      	beq.n	8004e4c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e4a:	e010      	b.n	8004e6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10b      	bne.n	8004e6c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	e000      	b.n	8004e6e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004e6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3730      	adds	r7, #48	; 0x30
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e9c:	f7fd fbd4 	bl	8002648 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004eac:	f7fd fbcc 	bl	8002648 <HAL_GetTick>
 8004eb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eb2:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	015b      	lsls	r3, r3, #5
 8004eb8:	0d1b      	lsrs	r3, r3, #20
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	fb02 f303 	mul.w	r3, r2, r3
 8004ec0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ec2:	e054      	b.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eca:	d050      	beq.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ecc:	f7fd fbbc 	bl	8002648 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d902      	bls.n	8004ee2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d13d      	bne.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ef0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004efa:	d111      	bne.n	8004f20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f04:	d004      	beq.n	8004f10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0e:	d107      	bne.n	8004f20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f28:	d10f      	bne.n	8004f4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e017      	b.n	8004f8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4013      	ands	r3, r2
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	bf0c      	ite	eq
 8004f7e:	2301      	moveq	r3, #1
 8004f80:	2300      	movne	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d19b      	bne.n	8004ec4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000004 	.word	0x20000004

08004f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <SPI_EndRxTxTransaction+0x7c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1b      	ldr	r2, [pc, #108]	; (800501c <SPI_EndRxTxTransaction+0x80>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	0d5b      	lsrs	r3, r3, #21
 8004fb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fb8:	fb02 f303 	mul.w	r3, r2, r3
 8004fbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc6:	d112      	bne.n	8004fee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2180      	movs	r1, #128	; 0x80
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff ff5a 	bl	8004e8c <SPI_WaitFlagStateUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d016      	beq.n	800500c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	f043 0220 	orr.w	r2, r3, #32
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e00f      	b.n	800500e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005004:	2b80      	cmp	r3, #128	; 0x80
 8005006:	d0f2      	beq.n	8004fee <SPI_EndRxTxTransaction+0x52>
 8005008:	e000      	b.n	800500c <SPI_EndRxTxTransaction+0x70>
        break;
 800500a:	bf00      	nop
  }

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000004 	.word	0x20000004
 800501c:	165e9f81 	.word	0x165e9f81

08005020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e041      	b.n	80050b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fd f8fe 	bl	8002248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3304      	adds	r3, #4
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f000 f8f4 	bl	800524c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_TIM_ConfigClockSource+0x1c>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e0b4      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x186>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005100:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005112:	d03e      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0xd4>
 8005114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005118:	f200 8087 	bhi.w	800522a <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005120:	f000 8086 	beq.w	8005230 <HAL_TIM_ConfigClockSource+0x172>
 8005124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005128:	d87f      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x16c>
 800512a:	2b70      	cmp	r3, #112	; 0x70
 800512c:	d01a      	beq.n	8005164 <HAL_TIM_ConfigClockSource+0xa6>
 800512e:	2b70      	cmp	r3, #112	; 0x70
 8005130:	d87b      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x16c>
 8005132:	2b60      	cmp	r3, #96	; 0x60
 8005134:	d050      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0x11a>
 8005136:	2b60      	cmp	r3, #96	; 0x60
 8005138:	d877      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x16c>
 800513a:	2b50      	cmp	r3, #80	; 0x50
 800513c:	d03c      	beq.n	80051b8 <HAL_TIM_ConfigClockSource+0xfa>
 800513e:	2b50      	cmp	r3, #80	; 0x50
 8005140:	d873      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x16c>
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d058      	beq.n	80051f8 <HAL_TIM_ConfigClockSource+0x13a>
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d86f      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x16c>
 800514a:	2b30      	cmp	r3, #48	; 0x30
 800514c:	d064      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x15a>
 800514e:	2b30      	cmp	r3, #48	; 0x30
 8005150:	d86b      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x16c>
 8005152:	2b20      	cmp	r3, #32
 8005154:	d060      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x15a>
 8005156:	2b20      	cmp	r3, #32
 8005158:	d867      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x16c>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d05c      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x15a>
 800515e:	2b10      	cmp	r3, #16
 8005160:	d05a      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x15a>
 8005162:	e062      	b.n	800522a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6899      	ldr	r1, [r3, #8]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f000 f984 	bl	8005480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005186:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	609a      	str	r2, [r3, #8]
      break;
 8005190:	e04f      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	6899      	ldr	r1, [r3, #8]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f000 f96d 	bl	8005480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b4:	609a      	str	r2, [r3, #8]
      break;
 80051b6:	e03c      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	6859      	ldr	r1, [r3, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	461a      	mov	r2, r3
 80051c6:	f000 f8e1 	bl	800538c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2150      	movs	r1, #80	; 0x50
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 f93a 	bl	800544a <TIM_ITRx_SetConfig>
      break;
 80051d6:	e02c      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	461a      	mov	r2, r3
 80051e6:	f000 f900 	bl	80053ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2160      	movs	r1, #96	; 0x60
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 f92a 	bl	800544a <TIM_ITRx_SetConfig>
      break;
 80051f6:	e01c      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	461a      	mov	r2, r3
 8005206:	f000 f8c1 	bl	800538c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2140      	movs	r1, #64	; 0x40
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f91a 	bl	800544a <TIM_ITRx_SetConfig>
      break;
 8005216:	e00c      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f000 f911 	bl	800544a <TIM_ITRx_SetConfig>
      break;
 8005228:	e003      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
      break;
 800522e:	e000      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005230:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005242:	7bfb      	ldrb	r3, [r7, #15]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a40      	ldr	r2, [pc, #256]	; (8005360 <TIM_Base_SetConfig+0x114>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d013      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526a:	d00f      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a3d      	ldr	r2, [pc, #244]	; (8005364 <TIM_Base_SetConfig+0x118>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00b      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a3c      	ldr	r2, [pc, #240]	; (8005368 <TIM_Base_SetConfig+0x11c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a3b      	ldr	r2, [pc, #236]	; (800536c <TIM_Base_SetConfig+0x120>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a3a      	ldr	r2, [pc, #232]	; (8005370 <TIM_Base_SetConfig+0x124>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d108      	bne.n	800529e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2f      	ldr	r2, [pc, #188]	; (8005360 <TIM_Base_SetConfig+0x114>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d02b      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ac:	d027      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a2c      	ldr	r2, [pc, #176]	; (8005364 <TIM_Base_SetConfig+0x118>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d023      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a2b      	ldr	r2, [pc, #172]	; (8005368 <TIM_Base_SetConfig+0x11c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01f      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a2a      	ldr	r2, [pc, #168]	; (800536c <TIM_Base_SetConfig+0x120>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01b      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a29      	ldr	r2, [pc, #164]	; (8005370 <TIM_Base_SetConfig+0x124>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d017      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a28      	ldr	r2, [pc, #160]	; (8005374 <TIM_Base_SetConfig+0x128>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a27      	ldr	r2, [pc, #156]	; (8005378 <TIM_Base_SetConfig+0x12c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a26      	ldr	r2, [pc, #152]	; (800537c <TIM_Base_SetConfig+0x130>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a25      	ldr	r2, [pc, #148]	; (8005380 <TIM_Base_SetConfig+0x134>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a24      	ldr	r2, [pc, #144]	; (8005384 <TIM_Base_SetConfig+0x138>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a23      	ldr	r2, [pc, #140]	; (8005388 <TIM_Base_SetConfig+0x13c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d108      	bne.n	8005310 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <TIM_Base_SetConfig+0x114>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_Base_SetConfig+0xf8>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a0c      	ldr	r2, [pc, #48]	; (8005370 <TIM_Base_SetConfig+0x124>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d103      	bne.n	800534c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	615a      	str	r2, [r3, #20]
}
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40010000 	.word	0x40010000
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40010400 	.word	0x40010400
 8005374:	40014000 	.word	0x40014000
 8005378:	40014400 	.word	0x40014400
 800537c:	40014800 	.word	0x40014800
 8005380:	40001800 	.word	0x40001800
 8005384:	40001c00 	.word	0x40001c00
 8005388:	40002000 	.word	0x40002000

0800538c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f023 0201 	bic.w	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f023 030a 	bic.w	r3, r3, #10
 80053c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b087      	sub	sp, #28
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f023 0210 	bic.w	r2, r3, #16
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	031b      	lsls	r3, r3, #12
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	621a      	str	r2, [r3, #32]
}
 800543e:	bf00      	nop
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	f043 0307 	orr.w	r3, r3, #7
 800546c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	609a      	str	r2, [r3, #8]
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800549a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	021a      	lsls	r2, r3, #8
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	609a      	str	r2, [r3, #8]
}
 80054b4:	bf00      	nop
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e05a      	b.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a21      	ldr	r2, [pc, #132]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d022      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005524:	d01d      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1d      	ldr	r2, [pc, #116]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d018      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1b      	ldr	r2, [pc, #108]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1a      	ldr	r2, [pc, #104]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00e      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a18      	ldr	r2, [pc, #96]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d009      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a17      	ldr	r2, [pc, #92]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d004      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a15      	ldr	r2, [pc, #84]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d10c      	bne.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	4313      	orrs	r3, r2
 8005572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40010000 	.word	0x40010000
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	40010400 	.word	0x40010400
 80055b0:	40014000 	.word	0x40014000
 80055b4:	40001800 	.word	0x40001800

080055b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e03f      	b.n	800564a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fc fe54 	bl	800228c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2224      	movs	r2, #36	; 0x24
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f929 	bl	8005854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695a      	ldr	r2, [r3, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b08a      	sub	sp, #40	; 0x28
 8005656:	af02      	add	r7, sp, #8
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	4613      	mov	r3, r2
 8005660:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b20      	cmp	r3, #32
 8005670:	d17c      	bne.n	800576c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_UART_Transmit+0x2c>
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e075      	b.n	800576e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_UART_Transmit+0x3e>
 800568c:	2302      	movs	r3, #2
 800568e:	e06e      	b.n	800576e <HAL_UART_Transmit+0x11c>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2221      	movs	r2, #33	; 0x21
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056a6:	f7fc ffcf 	bl	8002648 <HAL_GetTick>
 80056aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	88fa      	ldrh	r2, [r7, #6]
 80056b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c0:	d108      	bne.n	80056d4 <HAL_UART_Transmit+0x82>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d104      	bne.n	80056d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	e003      	b.n	80056dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056e4:	e02a      	b.n	800573c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2200      	movs	r2, #0
 80056ee:	2180      	movs	r1, #128	; 0x80
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f840 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e036      	b.n	800576e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10b      	bne.n	800571e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005714:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	3302      	adds	r3, #2
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	e007      	b.n	800572e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	781a      	ldrb	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	3301      	adds	r3, #1
 800572c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1cf      	bne.n	80056e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2200      	movs	r2, #0
 800574e:	2140      	movs	r1, #64	; 0x40
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f810 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e006      	b.n	800576e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b090      	sub	sp, #64	; 0x40
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005786:	e050      	b.n	800582a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d04c      	beq.n	800582a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005796:	f7fc ff57 	bl	8002648 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d241      	bcs.n	800582a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057c6:	637a      	str	r2, [r7, #52]	; 0x34
 80057c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057ce:	e841 2300 	strex	r3, r2, [r1]
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1e5      	bne.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3314      	adds	r3, #20
 80057e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3314      	adds	r3, #20
 80057f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057fa:	623a      	str	r2, [r7, #32]
 80057fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	69f9      	ldr	r1, [r7, #28]
 8005800:	6a3a      	ldr	r2, [r7, #32]
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	61bb      	str	r3, [r7, #24]
   return(result);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e5      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e00f      	b.n	800584a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4013      	ands	r3, r2
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	bf0c      	ite	eq
 800583a:	2301      	moveq	r3, #1
 800583c:	2300      	movne	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	429a      	cmp	r2, r3
 8005846:	d09f      	beq.n	8005788 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3740      	adds	r7, #64	; 0x40
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005858:	b0c0      	sub	sp, #256	; 0x100
 800585a:	af00      	add	r7, sp, #0
 800585c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005870:	68d9      	ldr	r1, [r3, #12]
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	ea40 0301 	orr.w	r3, r0, r1
 800587c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	431a      	orrs	r2, r3
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	431a      	orrs	r2, r3
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058ac:	f021 010c 	bic.w	r1, r1, #12
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058ba:	430b      	orrs	r3, r1
 80058bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ce:	6999      	ldr	r1, [r3, #24]
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	ea40 0301 	orr.w	r3, r0, r1
 80058da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4b8f      	ldr	r3, [pc, #572]	; (8005b20 <UART_SetConfig+0x2cc>)
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d005      	beq.n	80058f4 <UART_SetConfig+0xa0>
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4b8d      	ldr	r3, [pc, #564]	; (8005b24 <UART_SetConfig+0x2d0>)
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d104      	bne.n	80058fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058f4:	f7fe fa80 	bl	8003df8 <HAL_RCC_GetPCLK2Freq>
 80058f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058fc:	e003      	b.n	8005906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058fe:	f7fe fa67 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 8005902:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005910:	f040 810c 	bne.w	8005b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005918:	2200      	movs	r2, #0
 800591a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800591e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005926:	4622      	mov	r2, r4
 8005928:	462b      	mov	r3, r5
 800592a:	1891      	adds	r1, r2, r2
 800592c:	65b9      	str	r1, [r7, #88]	; 0x58
 800592e:	415b      	adcs	r3, r3
 8005930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005936:	4621      	mov	r1, r4
 8005938:	eb12 0801 	adds.w	r8, r2, r1
 800593c:	4629      	mov	r1, r5
 800593e:	eb43 0901 	adc.w	r9, r3, r1
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800594e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005956:	4690      	mov	r8, r2
 8005958:	4699      	mov	r9, r3
 800595a:	4623      	mov	r3, r4
 800595c:	eb18 0303 	adds.w	r3, r8, r3
 8005960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005964:	462b      	mov	r3, r5
 8005966:	eb49 0303 	adc.w	r3, r9, r3
 800596a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800597a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800597e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005982:	460b      	mov	r3, r1
 8005984:	18db      	adds	r3, r3, r3
 8005986:	653b      	str	r3, [r7, #80]	; 0x50
 8005988:	4613      	mov	r3, r2
 800598a:	eb42 0303 	adc.w	r3, r2, r3
 800598e:	657b      	str	r3, [r7, #84]	; 0x54
 8005990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005998:	f7fb f91e 	bl	8000bd8 <__aeabi_uldivmod>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4b61      	ldr	r3, [pc, #388]	; (8005b28 <UART_SetConfig+0x2d4>)
 80059a2:	fba3 2302 	umull	r2, r3, r3, r2
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	011c      	lsls	r4, r3, #4
 80059aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059bc:	4642      	mov	r2, r8
 80059be:	464b      	mov	r3, r9
 80059c0:	1891      	adds	r1, r2, r2
 80059c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80059c4:	415b      	adcs	r3, r3
 80059c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059cc:	4641      	mov	r1, r8
 80059ce:	eb12 0a01 	adds.w	sl, r2, r1
 80059d2:	4649      	mov	r1, r9
 80059d4:	eb43 0b01 	adc.w	fp, r3, r1
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ec:	4692      	mov	sl, r2
 80059ee:	469b      	mov	fp, r3
 80059f0:	4643      	mov	r3, r8
 80059f2:	eb1a 0303 	adds.w	r3, sl, r3
 80059f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059fa:	464b      	mov	r3, r9
 80059fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005a00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	18db      	adds	r3, r3, r3
 8005a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a1e:	4613      	mov	r3, r2
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	647b      	str	r3, [r7, #68]	; 0x44
 8005a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a2e:	f7fb f8d3 	bl	8000bd8 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	4b3b      	ldr	r3, [pc, #236]	; (8005b28 <UART_SetConfig+0x2d4>)
 8005a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	2264      	movs	r2, #100	; 0x64
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	1acb      	subs	r3, r1, r3
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a4e:	4b36      	ldr	r3, [pc, #216]	; (8005b28 <UART_SetConfig+0x2d4>)
 8005a50:	fba3 2302 	umull	r2, r3, r3, r2
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a5c:	441c      	add	r4, r3
 8005a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a70:	4642      	mov	r2, r8
 8005a72:	464b      	mov	r3, r9
 8005a74:	1891      	adds	r1, r2, r2
 8005a76:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a78:	415b      	adcs	r3, r3
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a80:	4641      	mov	r1, r8
 8005a82:	1851      	adds	r1, r2, r1
 8005a84:	6339      	str	r1, [r7, #48]	; 0x30
 8005a86:	4649      	mov	r1, r9
 8005a88:	414b      	adcs	r3, r1
 8005a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a98:	4659      	mov	r1, fp
 8005a9a:	00cb      	lsls	r3, r1, #3
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa2:	4651      	mov	r1, sl
 8005aa4:	00ca      	lsls	r2, r1, #3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4642      	mov	r2, r8
 8005aae:	189b      	adds	r3, r3, r2
 8005ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	eb42 0303 	adc.w	r3, r2, r3
 8005abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005acc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	18db      	adds	r3, r3, r3
 8005ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ada:	4613      	mov	r3, r2
 8005adc:	eb42 0303 	adc.w	r3, r2, r3
 8005ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005aea:	f7fb f875 	bl	8000bd8 <__aeabi_uldivmod>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4b0d      	ldr	r3, [pc, #52]	; (8005b28 <UART_SetConfig+0x2d4>)
 8005af4:	fba3 1302 	umull	r1, r3, r3, r2
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	2164      	movs	r1, #100	; 0x64
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	3332      	adds	r3, #50	; 0x32
 8005b06:	4a08      	ldr	r2, [pc, #32]	; (8005b28 <UART_SetConfig+0x2d4>)
 8005b08:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	f003 0207 	and.w	r2, r3, #7
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4422      	add	r2, r4
 8005b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b1c:	e105      	b.n	8005d2a <UART_SetConfig+0x4d6>
 8005b1e:	bf00      	nop
 8005b20:	40011000 	.word	0x40011000
 8005b24:	40011400 	.word	0x40011400
 8005b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b30:	2200      	movs	r2, #0
 8005b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b3e:	4642      	mov	r2, r8
 8005b40:	464b      	mov	r3, r9
 8005b42:	1891      	adds	r1, r2, r2
 8005b44:	6239      	str	r1, [r7, #32]
 8005b46:	415b      	adcs	r3, r3
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b4e:	4641      	mov	r1, r8
 8005b50:	1854      	adds	r4, r2, r1
 8005b52:	4649      	mov	r1, r9
 8005b54:	eb43 0501 	adc.w	r5, r3, r1
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	00eb      	lsls	r3, r5, #3
 8005b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b66:	00e2      	lsls	r2, r4, #3
 8005b68:	4614      	mov	r4, r2
 8005b6a:	461d      	mov	r5, r3
 8005b6c:	4643      	mov	r3, r8
 8005b6e:	18e3      	adds	r3, r4, r3
 8005b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b74:	464b      	mov	r3, r9
 8005b76:	eb45 0303 	adc.w	r3, r5, r3
 8005b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	008b      	lsls	r3, r1, #2
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	008a      	lsls	r2, r1, #2
 8005ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bac:	f7fb f814 	bl	8000bd8 <__aeabi_uldivmod>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4b60      	ldr	r3, [pc, #384]	; (8005d38 <UART_SetConfig+0x4e4>)
 8005bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	011c      	lsls	r4, r3, #4
 8005bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	1891      	adds	r1, r2, r2
 8005bd6:	61b9      	str	r1, [r7, #24]
 8005bd8:	415b      	adcs	r3, r3
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005be0:	4641      	mov	r1, r8
 8005be2:	1851      	adds	r1, r2, r1
 8005be4:	6139      	str	r1, [r7, #16]
 8005be6:	4649      	mov	r1, r9
 8005be8:	414b      	adcs	r3, r1
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bf8:	4659      	mov	r1, fp
 8005bfa:	00cb      	lsls	r3, r1, #3
 8005bfc:	4651      	mov	r1, sl
 8005bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c02:	4651      	mov	r1, sl
 8005c04:	00ca      	lsls	r2, r1, #3
 8005c06:	4610      	mov	r0, r2
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	189b      	adds	r3, r3, r2
 8005c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c14:	464b      	mov	r3, r9
 8005c16:	460a      	mov	r2, r1
 8005c18:	eb42 0303 	adc.w	r3, r2, r3
 8005c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c38:	4649      	mov	r1, r9
 8005c3a:	008b      	lsls	r3, r1, #2
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c42:	4641      	mov	r1, r8
 8005c44:	008a      	lsls	r2, r1, #2
 8005c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c4a:	f7fa ffc5 	bl	8000bd8 <__aeabi_uldivmod>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4b39      	ldr	r3, [pc, #228]	; (8005d38 <UART_SetConfig+0x4e4>)
 8005c54:	fba3 1302 	umull	r1, r3, r3, r2
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	2164      	movs	r1, #100	; 0x64
 8005c5c:	fb01 f303 	mul.w	r3, r1, r3
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	3332      	adds	r3, #50	; 0x32
 8005c66:	4a34      	ldr	r2, [pc, #208]	; (8005d38 <UART_SetConfig+0x4e4>)
 8005c68:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6c:	095b      	lsrs	r3, r3, #5
 8005c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c72:	441c      	add	r4, r3
 8005c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c78:	2200      	movs	r2, #0
 8005c7a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c7c:	677a      	str	r2, [r7, #116]	; 0x74
 8005c7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c82:	4642      	mov	r2, r8
 8005c84:	464b      	mov	r3, r9
 8005c86:	1891      	adds	r1, r2, r2
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	415b      	adcs	r3, r3
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c92:	4641      	mov	r1, r8
 8005c94:	1851      	adds	r1, r2, r1
 8005c96:	6039      	str	r1, [r7, #0]
 8005c98:	4649      	mov	r1, r9
 8005c9a:	414b      	adcs	r3, r1
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005caa:	4659      	mov	r1, fp
 8005cac:	00cb      	lsls	r3, r1, #3
 8005cae:	4651      	mov	r1, sl
 8005cb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cb4:	4651      	mov	r1, sl
 8005cb6:	00ca      	lsls	r2, r1, #3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	4642      	mov	r2, r8
 8005cc0:	189b      	adds	r3, r3, r2
 8005cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cc4:	464b      	mov	r3, r9
 8005cc6:	460a      	mov	r2, r1
 8005cc8:	eb42 0303 	adc.w	r3, r2, r3
 8005ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8005cd8:	667a      	str	r2, [r7, #100]	; 0x64
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	008b      	lsls	r3, r1, #2
 8005cea:	4641      	mov	r1, r8
 8005cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf0:	4641      	mov	r1, r8
 8005cf2:	008a      	lsls	r2, r1, #2
 8005cf4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cf8:	f7fa ff6e 	bl	8000bd8 <__aeabi_uldivmod>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <UART_SetConfig+0x4e4>)
 8005d02:	fba3 1302 	umull	r1, r3, r3, r2
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	2164      	movs	r1, #100	; 0x64
 8005d0a:	fb01 f303 	mul.w	r3, r1, r3
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	3332      	adds	r3, #50	; 0x32
 8005d14:	4a08      	ldr	r2, [pc, #32]	; (8005d38 <UART_SetConfig+0x4e4>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	f003 020f 	and.w	r2, r3, #15
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4422      	add	r2, r4
 8005d28:	609a      	str	r2, [r3, #8]
}
 8005d2a:	bf00      	nop
 8005d2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	51eb851f 	.word	0x51eb851f

08005d3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005d40:	4904      	ldr	r1, [pc, #16]	; (8005d54 <MX_FATFS_Init+0x18>)
 8005d42:	4805      	ldr	r0, [pc, #20]	; (8005d58 <MX_FATFS_Init+0x1c>)
 8005d44:	f003 f9ce 	bl	80090e4 <FATFS_LinkDriver>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <MX_FATFS_Init+0x20>)
 8005d4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d50:	bf00      	nop
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	200026dc 	.word	0x200026dc
 8005d58:	20000010 	.word	0x20000010
 8005d5c:	200026d8 	.word	0x200026d8

08005d60 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005d64:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_initialize(pdrv);
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fb fa67 	bl	8001250 <SD_disk_initialize>
 8005d82:	4603      	mov	r3, r0
 8005d84:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	4603      	mov	r3, r0
 8005d96:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_status(pdrv);
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fb fb44 	bl	8001428 <SD_disk_status>
 8005da0:	4603      	mov	r3, r0
 8005da2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	4603      	mov	r3, r0
 8005dba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8005dbc:	7bf8      	ldrb	r0, [r7, #15]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	f7fb fb46 	bl	8001454 <SD_disk_read>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	4603      	mov	r3, r0
 8005de2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8005de4:	7bf8      	ldrb	r0, [r7, #15]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	f7fb fb9c 	bl	8001528 <SD_disk_write>
 8005df0:	4603      	mov	r3, r0
 8005df2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	603a      	str	r2, [r7, #0]
 8005e06:	71fb      	strb	r3, [r7, #7]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	79b9      	ldrb	r1, [r7, #6]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fb fc0c 	bl	8001630 <SD_disk_ioctl>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005e2e:	79fb      	ldrb	r3, [r7, #7]
 8005e30:	4a08      	ldr	r2, [pc, #32]	; (8005e54 <disk_status+0x30>)
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	79fa      	ldrb	r2, [r7, #7]
 8005e3c:	4905      	ldr	r1, [pc, #20]	; (8005e54 <disk_status+0x30>)
 8005e3e:	440a      	add	r2, r1
 8005e40:	7a12      	ldrb	r2, [r2, #8]
 8005e42:	4610      	mov	r0, r2
 8005e44:	4798      	blx	r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	20002908 	.word	0x20002908

08005e58 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	4a0d      	ldr	r2, [pc, #52]	; (8005ea0 <disk_initialize+0x48>)
 8005e6a:	5cd3      	ldrb	r3, [r2, r3]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d111      	bne.n	8005e94 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	4a0b      	ldr	r2, [pc, #44]	; (8005ea0 <disk_initialize+0x48>)
 8005e74:	2101      	movs	r1, #1
 8005e76:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <disk_initialize+0x48>)
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	79fa      	ldrb	r2, [r7, #7]
 8005e86:	4906      	ldr	r1, [pc, #24]	; (8005ea0 <disk_initialize+0x48>)
 8005e88:	440a      	add	r2, r1
 8005e8a:	7a12      	ldrb	r2, [r2, #8]
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4798      	blx	r3
 8005e90:	4603      	mov	r3, r0
 8005e92:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20002908 	.word	0x20002908

08005ea4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ee0 <disk_read+0x3c>)
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	689c      	ldr	r4, [r3, #8]
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	4a07      	ldr	r2, [pc, #28]	; (8005ee0 <disk_read+0x3c>)
 8005ec4:	4413      	add	r3, r2
 8005ec6:	7a18      	ldrb	r0, [r3, #8]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	68b9      	ldr	r1, [r7, #8]
 8005ece:	47a0      	blx	r4
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd90      	pop	{r4, r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20002908 	.word	0x20002908

08005ee4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	4a0a      	ldr	r2, [pc, #40]	; (8005f20 <disk_write+0x3c>)
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	68dc      	ldr	r4, [r3, #12]
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	4a07      	ldr	r2, [pc, #28]	; (8005f20 <disk_write+0x3c>)
 8005f04:	4413      	add	r3, r2
 8005f06:	7a18      	ldrb	r0, [r3, #8]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	47a0      	blx	r4
 8005f10:	4603      	mov	r3, r0
 8005f12:	75fb      	strb	r3, [r7, #23]
  return res;
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd90      	pop	{r4, r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20002908 	.word	0x20002908

08005f24 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	603a      	str	r2, [r7, #0]
 8005f2e:	71fb      	strb	r3, [r7, #7]
 8005f30:	460b      	mov	r3, r1
 8005f32:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <disk_ioctl+0x38>)
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	79fa      	ldrb	r2, [r7, #7]
 8005f42:	4906      	ldr	r1, [pc, #24]	; (8005f5c <disk_ioctl+0x38>)
 8005f44:	440a      	add	r2, r1
 8005f46:	7a10      	ldrb	r0, [r2, #8]
 8005f48:	79b9      	ldrb	r1, [r7, #6]
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	4798      	blx	r3
 8005f4e:	4603      	mov	r3, r0
 8005f50:	73fb      	strb	r3, [r7, #15]
  return res;
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	20002908 	.word	0x20002908

08005f60 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005f70:	89fb      	ldrh	r3, [r7, #14]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	b21a      	sxth	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	b21b      	sxth	r3, r3
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	b21b      	sxth	r3, r3
 8005f80:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005f82:	89fb      	ldrh	r3, [r7, #14]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3303      	adds	r3, #3
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	3202      	adds	r2, #2
 8005fa8:	7812      	ldrb	r2, [r2, #0]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	3201      	adds	r2, #1
 8005fb6:	7812      	ldrb	r2, [r2, #0]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	7812      	ldrb	r2, [r2, #0]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
	return rv;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	887a      	ldrh	r2, [r7, #2]
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	887b      	ldrh	r3, [r7, #2]
 8005ff0:	0a1b      	lsrs	r3, r3, #8
 8005ff2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	887a      	ldrh	r2, [r7, #2]
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	0a1b      	lsrs	r3, r3, #8
 8006026:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	0a1b      	lsrs	r3, r3, #8
 800604a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	607a      	str	r2, [r7, #4]
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00d      	beq.n	800609a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	1c53      	adds	r3, r2, #1
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	1c59      	adds	r1, r3, #1
 8006088:	6179      	str	r1, [r7, #20]
 800608a:	7812      	ldrb	r2, [r2, #0]
 800608c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3b01      	subs	r3, #1
 8006092:	607b      	str	r3, [r7, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1f1      	bne.n	800607e <mem_cpy+0x1a>
	}
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80060a6:	b480      	push	{r7}
 80060a8:	b087      	sub	sp, #28
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	617a      	str	r2, [r7, #20]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f3      	bne.n	80060b6 <mem_set+0x10>
}
 80060ce:	bf00      	nop
 80060d0:	bf00      	nop
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80060dc:	b480      	push	{r7}
 80060de:	b089      	sub	sp, #36	; 0x24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	61fa      	str	r2, [r7, #28]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	4619      	mov	r1, r3
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	61ba      	str	r2, [r7, #24]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	1acb      	subs	r3, r1, r3
 8006108:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3b01      	subs	r3, #1
 800610e:	607b      	str	r3, [r7, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <mem_cmp+0x40>
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0eb      	beq.n	80060f4 <mem_cmp+0x18>

	return r;
 800611c:	697b      	ldr	r3, [r7, #20]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3724      	adds	r7, #36	; 0x24
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006134:	e002      	b.n	800613c <chk_chr+0x12>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3301      	adds	r3, #1
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d005      	beq.n	8006150 <chk_chr+0x26>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	4293      	cmp	r3, r2
 800614e:	d1f2      	bne.n	8006136 <chk_chr+0xc>
	return *str;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	781b      	ldrb	r3, [r3, #0]
}
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800616a:	2300      	movs	r3, #0
 800616c:	60bb      	str	r3, [r7, #8]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	e029      	b.n	80061c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006174:	4a27      	ldr	r2, [pc, #156]	; (8006214 <chk_lock+0xb4>)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	4413      	add	r3, r2
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01d      	beq.n	80061be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006182:	4a24      	ldr	r2, [pc, #144]	; (8006214 <chk_lock+0xb4>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	4413      	add	r3, r2
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d116      	bne.n	80061c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006194:	4a1f      	ldr	r2, [pc, #124]	; (8006214 <chk_lock+0xb4>)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	011b      	lsls	r3, r3, #4
 800619a:	4413      	add	r3, r2
 800619c:	3304      	adds	r3, #4
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d10c      	bne.n	80061c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80061a8:	4a1a      	ldr	r2, [pc, #104]	; (8006214 <chk_lock+0xb4>)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	4413      	add	r3, r2
 80061b0:	3308      	adds	r3, #8
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d102      	bne.n	80061c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80061bc:	e007      	b.n	80061ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80061be:	2301      	movs	r3, #1
 80061c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3301      	adds	r3, #1
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d9d2      	bls.n	8006174 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d109      	bne.n	80061e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <chk_lock+0x80>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d101      	bne.n	80061e4 <chk_lock+0x84>
 80061e0:	2300      	movs	r3, #0
 80061e2:	e010      	b.n	8006206 <chk_lock+0xa6>
 80061e4:	2312      	movs	r3, #18
 80061e6:	e00e      	b.n	8006206 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d108      	bne.n	8006200 <chk_lock+0xa0>
 80061ee:	4a09      	ldr	r2, [pc, #36]	; (8006214 <chk_lock+0xb4>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	4413      	add	r3, r2
 80061f6:	330c      	adds	r3, #12
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061fe:	d101      	bne.n	8006204 <chk_lock+0xa4>
 8006200:	2310      	movs	r3, #16
 8006202:	e000      	b.n	8006206 <chk_lock+0xa6>
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	200026e8 	.word	0x200026e8

08006218 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800621e:	2300      	movs	r3, #0
 8006220:	607b      	str	r3, [r7, #4]
 8006222:	e002      	b.n	800622a <enq_lock+0x12>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3301      	adds	r3, #1
 8006228:	607b      	str	r3, [r7, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d806      	bhi.n	800623e <enq_lock+0x26>
 8006230:	4a09      	ldr	r2, [pc, #36]	; (8006258 <enq_lock+0x40>)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	4413      	add	r3, r2
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1f2      	bne.n	8006224 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b02      	cmp	r3, #2
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	b2db      	uxtb	r3, r3
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	200026e8 	.word	0x200026e8

0800625c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	e01f      	b.n	80062ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800626c:	4a41      	ldr	r2, [pc, #260]	; (8006374 <inc_lock+0x118>)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	4413      	add	r3, r2
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d113      	bne.n	80062a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800627e:	4a3d      	ldr	r2, [pc, #244]	; (8006374 <inc_lock+0x118>)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	4413      	add	r3, r2
 8006286:	3304      	adds	r3, #4
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800628e:	429a      	cmp	r2, r3
 8006290:	d109      	bne.n	80062a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006292:	4a38      	ldr	r2, [pc, #224]	; (8006374 <inc_lock+0x118>)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	4413      	add	r3, r2
 800629a:	3308      	adds	r3, #8
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d006      	beq.n	80062b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3301      	adds	r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d9dc      	bls.n	800626c <inc_lock+0x10>
 80062b2:	e000      	b.n	80062b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80062b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d132      	bne.n	8006322 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	e002      	b.n	80062c8 <inc_lock+0x6c>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d806      	bhi.n	80062dc <inc_lock+0x80>
 80062ce:	4a29      	ldr	r2, [pc, #164]	; (8006374 <inc_lock+0x118>)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	4413      	add	r3, r2
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1f2      	bne.n	80062c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d101      	bne.n	80062e6 <inc_lock+0x8a>
 80062e2:	2300      	movs	r3, #0
 80062e4:	e040      	b.n	8006368 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4922      	ldr	r1, [pc, #136]	; (8006374 <inc_lock+0x118>)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	440b      	add	r3, r1
 80062f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	491e      	ldr	r1, [pc, #120]	; (8006374 <inc_lock+0x118>)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	440b      	add	r3, r1
 8006300:	3304      	adds	r3, #4
 8006302:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695a      	ldr	r2, [r3, #20]
 8006308:	491a      	ldr	r1, [pc, #104]	; (8006374 <inc_lock+0x118>)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	440b      	add	r3, r1
 8006310:	3308      	adds	r3, #8
 8006312:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006314:	4a17      	ldr	r2, [pc, #92]	; (8006374 <inc_lock+0x118>)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	4413      	add	r3, r2
 800631c:	330c      	adds	r3, #12
 800631e:	2200      	movs	r2, #0
 8006320:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d009      	beq.n	800633c <inc_lock+0xe0>
 8006328:	4a12      	ldr	r2, [pc, #72]	; (8006374 <inc_lock+0x118>)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	011b      	lsls	r3, r3, #4
 800632e:	4413      	add	r3, r2
 8006330:	330c      	adds	r3, #12
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <inc_lock+0xe0>
 8006338:	2300      	movs	r3, #0
 800633a:	e015      	b.n	8006368 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d108      	bne.n	8006354 <inc_lock+0xf8>
 8006342:	4a0c      	ldr	r2, [pc, #48]	; (8006374 <inc_lock+0x118>)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	4413      	add	r3, r2
 800634a:	330c      	adds	r3, #12
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	e001      	b.n	8006358 <inc_lock+0xfc>
 8006354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006358:	4906      	ldr	r1, [pc, #24]	; (8006374 <inc_lock+0x118>)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	440b      	add	r3, r1
 8006360:	330c      	adds	r3, #12
 8006362:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3301      	adds	r3, #1
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	200026e8 	.word	0x200026e8

08006378 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3b01      	subs	r3, #1
 8006384:	607b      	str	r3, [r7, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d825      	bhi.n	80063d8 <dec_lock+0x60>
		n = Files[i].ctr;
 800638c:	4a17      	ldr	r2, [pc, #92]	; (80063ec <dec_lock+0x74>)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	4413      	add	r3, r2
 8006394:	330c      	adds	r3, #12
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800639a:	89fb      	ldrh	r3, [r7, #14]
 800639c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a0:	d101      	bne.n	80063a6 <dec_lock+0x2e>
 80063a2:	2300      	movs	r3, #0
 80063a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80063a6:	89fb      	ldrh	r3, [r7, #14]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <dec_lock+0x3a>
 80063ac:	89fb      	ldrh	r3, [r7, #14]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80063b2:	4a0e      	ldr	r2, [pc, #56]	; (80063ec <dec_lock+0x74>)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	4413      	add	r3, r2
 80063ba:	330c      	adds	r3, #12
 80063bc:	89fa      	ldrh	r2, [r7, #14]
 80063be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80063c0:	89fb      	ldrh	r3, [r7, #14]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d105      	bne.n	80063d2 <dec_lock+0x5a>
 80063c6:	4a09      	ldr	r2, [pc, #36]	; (80063ec <dec_lock+0x74>)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	4413      	add	r3, r2
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	737b      	strb	r3, [r7, #13]
 80063d6:	e001      	b.n	80063dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80063d8:	2302      	movs	r3, #2
 80063da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80063dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	200026e8 	.word	0x200026e8

080063f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	e010      	b.n	8006420 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80063fe:	4a0d      	ldr	r2, [pc, #52]	; (8006434 <clear_lock+0x44>)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	4413      	add	r3, r2
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	429a      	cmp	r2, r3
 800640c:	d105      	bne.n	800641a <clear_lock+0x2a>
 800640e:	4a09      	ldr	r2, [pc, #36]	; (8006434 <clear_lock+0x44>)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	4413      	add	r3, r2
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3301      	adds	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d9eb      	bls.n	80063fe <clear_lock+0xe>
	}
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	200026e8 	.word	0x200026e8

08006438 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	78db      	ldrb	r3, [r3, #3]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d034      	beq.n	80064b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006450:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	7858      	ldrb	r0, [r3, #1]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800645c:	2301      	movs	r3, #1
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	f7ff fd40 	bl	8005ee4 <disk_write>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <sync_window+0x38>
			res = FR_DISK_ERR;
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
 800646e:	e022      	b.n	80064b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	1ad2      	subs	r2, r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	429a      	cmp	r2, r3
 8006484:	d217      	bcs.n	80064b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	789b      	ldrb	r3, [r3, #2]
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	e010      	b.n	80064b0 <sync_window+0x78>
					wsect += fs->fsize;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4413      	add	r3, r2
 8006496:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	7858      	ldrb	r0, [r3, #1]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80064a2:	2301      	movs	r3, #1
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	f7ff fd1d 	bl	8005ee4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d8eb      	bhi.n	800648e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d01b      	beq.n	8006510 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ffad 	bl	8006438 <sync_window>
 80064de:	4603      	mov	r3, r0
 80064e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d113      	bne.n	8006510 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	7858      	ldrb	r0, [r3, #1]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80064f2:	2301      	movs	r3, #1
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	f7ff fcd5 	bl	8005ea4 <disk_read>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d004      	beq.n	800650a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006506:	2301      	movs	r3, #1
 8006508:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006510:	7bfb      	ldrb	r3, [r7, #15]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff ff87 	bl	8006438 <sync_window>
 800652a:	4603      	mov	r3, r0
 800652c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d159      	bne.n	80065e8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d149      	bne.n	80065d0 <sync_fs+0xb4>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	791b      	ldrb	r3, [r3, #4]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d145      	bne.n	80065d0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	899b      	ldrh	r3, [r3, #12]
 800654e:	461a      	mov	r2, r3
 8006550:	2100      	movs	r1, #0
 8006552:	f7ff fda8 	bl	80060a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3338      	adds	r3, #56	; 0x38
 800655a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800655e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff fd37 	bl	8005fd6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3338      	adds	r3, #56	; 0x38
 800656c:	4921      	ldr	r1, [pc, #132]	; (80065f4 <sync_fs+0xd8>)
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff fd4c 	bl	800600c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3338      	adds	r3, #56	; 0x38
 8006578:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800657c:	491e      	ldr	r1, [pc, #120]	; (80065f8 <sync_fs+0xdc>)
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fd44 	bl	800600c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3338      	adds	r3, #56	; 0x38
 8006588:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	4619      	mov	r1, r3
 8006592:	4610      	mov	r0, r2
 8006594:	f7ff fd3a 	bl	800600c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3338      	adds	r3, #56	; 0x38
 800659c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	4619      	mov	r1, r3
 80065a6:	4610      	mov	r0, r2
 80065a8:	f7ff fd30 	bl	800600c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	7858      	ldrb	r0, [r3, #1]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c4:	2301      	movs	r3, #1
 80065c6:	f7ff fc8d 	bl	8005ee4 <disk_write>
			fs->fsi_flag = 0;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	785b      	ldrb	r3, [r3, #1]
 80065d4:	2200      	movs	r2, #0
 80065d6:	2100      	movs	r1, #0
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fca3 	bl	8005f24 <disk_ioctl>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <sync_fs+0xcc>
 80065e4:	2301      	movs	r3, #1
 80065e6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	41615252 	.word	0x41615252
 80065f8:	61417272 	.word	0x61417272

080065fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	3b02      	subs	r3, #2
 800660a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	3b02      	subs	r3, #2
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d301      	bcc.n	800661c <clust2sect+0x20>
 8006618:	2300      	movs	r3, #0
 800661a:	e008      	b.n	800662e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	895b      	ldrh	r3, [r3, #10]
 8006620:	461a      	mov	r2, r3
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	fb03 f202 	mul.w	r2, r3, r2
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	4413      	add	r3, r2
}
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b086      	sub	sp, #24
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d904      	bls.n	800665a <get_fat+0x20>
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d302      	bcc.n	8006660 <get_fat+0x26>
		val = 1;	/* Internal error */
 800665a:	2301      	movs	r3, #1
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	e0bb      	b.n	80067d8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006660:	f04f 33ff 	mov.w	r3, #4294967295
 8006664:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b03      	cmp	r3, #3
 800666c:	f000 8083 	beq.w	8006776 <get_fat+0x13c>
 8006670:	2b03      	cmp	r3, #3
 8006672:	f300 80a7 	bgt.w	80067c4 <get_fat+0x18a>
 8006676:	2b01      	cmp	r3, #1
 8006678:	d002      	beq.n	8006680 <get_fat+0x46>
 800667a:	2b02      	cmp	r3, #2
 800667c:	d056      	beq.n	800672c <get_fat+0xf2>
 800667e:	e0a1      	b.n	80067c4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	899b      	ldrh	r3, [r3, #12]
 8006696:	4619      	mov	r1, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	fbb3 f3f1 	udiv	r3, r3, r1
 800669e:	4413      	add	r3, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	6938      	ldr	r0, [r7, #16]
 80066a4:	f7ff ff0c 	bl	80064c0 <move_window>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f040 808d 	bne.w	80067ca <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	60fa      	str	r2, [r7, #12]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	8992      	ldrh	r2, [r2, #12]
 80066ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80066be:	fb01 f202 	mul.w	r2, r1, r2
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4413      	add	r3, r2
 80066c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	899b      	ldrh	r3, [r3, #12]
 80066d6:	4619      	mov	r1, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	fbb3 f3f1 	udiv	r3, r3, r1
 80066de:	4413      	add	r3, r2
 80066e0:	4619      	mov	r1, r3
 80066e2:	6938      	ldr	r0, [r7, #16]
 80066e4:	f7ff feec 	bl	80064c0 <move_window>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d16f      	bne.n	80067ce <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	899b      	ldrh	r3, [r3, #12]
 80066f2:	461a      	mov	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80066fa:	fb01 f202 	mul.w	r2, r1, r2
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	461a      	mov	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4313      	orrs	r3, r2
 8006710:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <get_fat+0xe8>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	091b      	lsrs	r3, r3, #4
 8006720:	e002      	b.n	8006728 <get_fat+0xee>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006728:	617b      	str	r3, [r7, #20]
			break;
 800672a:	e055      	b.n	80067d8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	899b      	ldrh	r3, [r3, #12]
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	b29b      	uxth	r3, r3
 8006738:	4619      	mov	r1, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006740:	4413      	add	r3, r2
 8006742:	4619      	mov	r1, r3
 8006744:	6938      	ldr	r0, [r7, #16]
 8006746:	f7ff febb 	bl	80064c0 <move_window>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d140      	bne.n	80067d2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	8992      	ldrh	r2, [r2, #12]
 800675e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006762:	fb00 f202 	mul.w	r2, r0, r2
 8006766:	1a9b      	subs	r3, r3, r2
 8006768:	440b      	add	r3, r1
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fbf8 	bl	8005f60 <ld_word>
 8006770:	4603      	mov	r3, r0
 8006772:	617b      	str	r3, [r7, #20]
			break;
 8006774:	e030      	b.n	80067d8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	899b      	ldrh	r3, [r3, #12]
 800677e:	089b      	lsrs	r3, r3, #2
 8006780:	b29b      	uxth	r3, r3
 8006782:	4619      	mov	r1, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	fbb3 f3f1 	udiv	r3, r3, r1
 800678a:	4413      	add	r3, r2
 800678c:	4619      	mov	r1, r3
 800678e:	6938      	ldr	r0, [r7, #16]
 8006790:	f7ff fe96 	bl	80064c0 <move_window>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d11d      	bne.n	80067d6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	8992      	ldrh	r2, [r2, #12]
 80067a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80067ac:	fb00 f202 	mul.w	r2, r0, r2
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	440b      	add	r3, r1
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fbeb 	bl	8005f90 <ld_dword>
 80067ba:	4603      	mov	r3, r0
 80067bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80067c0:	617b      	str	r3, [r7, #20]
			break;
 80067c2:	e009      	b.n	80067d8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80067c4:	2301      	movs	r3, #1
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	e006      	b.n	80067d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067ca:	bf00      	nop
 80067cc:	e004      	b.n	80067d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067ce:	bf00      	nop
 80067d0:	e002      	b.n	80067d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80067d2:	bf00      	nop
 80067d4:	e000      	b.n	80067d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067d6:	bf00      	nop
		}
	}

	return val;
 80067d8:	697b      	ldr	r3, [r7, #20]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80067e2:	b590      	push	{r4, r7, lr}
 80067e4:	b089      	sub	sp, #36	; 0x24
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80067ee:	2302      	movs	r3, #2
 80067f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	f240 8102 	bls.w	80069fe <put_fat+0x21c>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	429a      	cmp	r2, r3
 8006802:	f080 80fc 	bcs.w	80069fe <put_fat+0x21c>
		switch (fs->fs_type) {
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b03      	cmp	r3, #3
 800680c:	f000 80b6 	beq.w	800697c <put_fat+0x19a>
 8006810:	2b03      	cmp	r3, #3
 8006812:	f300 80fd 	bgt.w	8006a10 <put_fat+0x22e>
 8006816:	2b01      	cmp	r3, #1
 8006818:	d003      	beq.n	8006822 <put_fat+0x40>
 800681a:	2b02      	cmp	r3, #2
 800681c:	f000 8083 	beq.w	8006926 <put_fat+0x144>
 8006820:	e0f6      	b.n	8006a10 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	61bb      	str	r3, [r7, #24]
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	4413      	add	r3, r2
 800682e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	899b      	ldrh	r3, [r3, #12]
 8006838:	4619      	mov	r1, r3
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006840:	4413      	add	r3, r2
 8006842:	4619      	mov	r1, r3
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f7ff fe3b 	bl	80064c0 <move_window>
 800684a:	4603      	mov	r3, r0
 800684c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800684e:	7ffb      	ldrb	r3, [r7, #31]
 8006850:	2b00      	cmp	r3, #0
 8006852:	f040 80d6 	bne.w	8006a02 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	61ba      	str	r2, [r7, #24]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	8992      	ldrh	r2, [r2, #12]
 8006866:	fbb3 f0f2 	udiv	r0, r3, r2
 800686a:	fb00 f202 	mul.w	r2, r0, r2
 800686e:	1a9b      	subs	r3, r3, r2
 8006870:	440b      	add	r3, r1
 8006872:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00d      	beq.n	800689a <put_fat+0xb8>
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	b25b      	sxtb	r3, r3
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	b25a      	sxtb	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	b25b      	sxtb	r3, r3
 8006892:	4313      	orrs	r3, r2
 8006894:	b25b      	sxtb	r3, r3
 8006896:	b2db      	uxtb	r3, r3
 8006898:	e001      	b.n	800689e <put_fat+0xbc>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	899b      	ldrh	r3, [r3, #12]
 80068b0:	4619      	mov	r1, r3
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80068b8:	4413      	add	r3, r2
 80068ba:	4619      	mov	r1, r3
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7ff fdff 	bl	80064c0 <move_window>
 80068c2:	4603      	mov	r3, r0
 80068c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068c6:	7ffb      	ldrb	r3, [r7, #31]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f040 809c 	bne.w	8006a06 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	899b      	ldrh	r3, [r3, #12]
 80068d8:	461a      	mov	r2, r3
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80068e0:	fb00 f202 	mul.w	r2, r0, r2
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	440b      	add	r3, r1
 80068e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <put_fat+0x11a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	091b      	lsrs	r3, r3, #4
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	e00e      	b.n	800691a <put_fat+0x138>
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	b25b      	sxtb	r3, r3
 8006902:	f023 030f 	bic.w	r3, r3, #15
 8006906:	b25a      	sxtb	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	b25b      	sxtb	r3, r3
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	b25b      	sxtb	r3, r3
 8006914:	4313      	orrs	r3, r2
 8006916:	b25b      	sxtb	r3, r3
 8006918:	b2db      	uxtb	r3, r3
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	70da      	strb	r2, [r3, #3]
			break;
 8006924:	e074      	b.n	8006a10 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	899b      	ldrh	r3, [r3, #12]
 800692e:	085b      	lsrs	r3, r3, #1
 8006930:	b29b      	uxth	r3, r3
 8006932:	4619      	mov	r1, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	fbb3 f3f1 	udiv	r3, r3, r1
 800693a:	4413      	add	r3, r2
 800693c:	4619      	mov	r1, r3
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7ff fdbe 	bl	80064c0 <move_window>
 8006944:	4603      	mov	r3, r0
 8006946:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006948:	7ffb      	ldrb	r3, [r7, #31]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d15d      	bne.n	8006a0a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	8992      	ldrh	r2, [r2, #12]
 800695c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006960:	fb00 f202 	mul.w	r2, r0, r2
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	440b      	add	r3, r1
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	b292      	uxth	r2, r2
 800696c:	4611      	mov	r1, r2
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fb31 	bl	8005fd6 <st_word>
			fs->wflag = 1;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	70da      	strb	r2, [r3, #3]
			break;
 800697a:	e049      	b.n	8006a10 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	899b      	ldrh	r3, [r3, #12]
 8006984:	089b      	lsrs	r3, r3, #2
 8006986:	b29b      	uxth	r3, r3
 8006988:	4619      	mov	r1, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006990:	4413      	add	r3, r2
 8006992:	4619      	mov	r1, r3
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f7ff fd93 	bl	80064c0 <move_window>
 800699a:	4603      	mov	r3, r0
 800699c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800699e:	7ffb      	ldrb	r3, [r7, #31]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d134      	bne.n	8006a0e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	8992      	ldrh	r2, [r2, #12]
 80069b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80069bc:	fb00 f202 	mul.w	r2, r0, r2
 80069c0:	1a9b      	subs	r3, r3, r2
 80069c2:	440b      	add	r3, r1
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fae3 	bl	8005f90 <ld_dword>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069d0:	4323      	orrs	r3, r4
 80069d2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	8992      	ldrh	r2, [r2, #12]
 80069e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80069e6:	fb00 f202 	mul.w	r2, r0, r2
 80069ea:	1a9b      	subs	r3, r3, r2
 80069ec:	440b      	add	r3, r1
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff fb0b 	bl	800600c <st_dword>
			fs->wflag = 1;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	70da      	strb	r2, [r3, #3]
			break;
 80069fc:	e008      	b.n	8006a10 <put_fat+0x22e>
		}
	}
 80069fe:	bf00      	nop
 8006a00:	e006      	b.n	8006a10 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006a02:	bf00      	nop
 8006a04:	e004      	b.n	8006a10 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006a06:	bf00      	nop
 8006a08:	e002      	b.n	8006a10 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006a0a:	bf00      	nop
 8006a0c:	e000      	b.n	8006a10 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006a0e:	bf00      	nop
	return res;
 8006a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3724      	adds	r7, #36	; 0x24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd90      	pop	{r4, r7, pc}

08006a1a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b088      	sub	sp, #32
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d904      	bls.n	8006a40 <remove_chain+0x26>
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d301      	bcc.n	8006a44 <remove_chain+0x2a>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e04b      	b.n	8006adc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00c      	beq.n	8006a64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	69b8      	ldr	r0, [r7, #24]
 8006a52:	f7ff fec6 	bl	80067e2 <put_fat>
 8006a56:	4603      	mov	r3, r0
 8006a58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006a5a:	7ffb      	ldrb	r3, [r7, #31]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <remove_chain+0x4a>
 8006a60:	7ffb      	ldrb	r3, [r7, #31]
 8006a62:	e03b      	b.n	8006adc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff fde7 	bl	800663a <get_fat>
 8006a6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d031      	beq.n	8006ad8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <remove_chain+0x64>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e02e      	b.n	8006adc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a84:	d101      	bne.n	8006a8a <remove_chain+0x70>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e028      	b.n	8006adc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	68b9      	ldr	r1, [r7, #8]
 8006a8e:	69b8      	ldr	r0, [r7, #24]
 8006a90:	f7ff fea7 	bl	80067e2 <put_fat>
 8006a94:	4603      	mov	r3, r0
 8006a96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006a98:	7ffb      	ldrb	r3, [r7, #31]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <remove_chain+0x88>
 8006a9e:	7ffb      	ldrb	r3, [r7, #31]
 8006aa0:	e01c      	b.n	8006adc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	699a      	ldr	r2, [r3, #24]
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	3b02      	subs	r3, #2
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d20b      	bcs.n	8006ac8 <remove_chain+0xae>
			fs->free_clst++;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	791b      	ldrb	r3, [r3, #4]
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d3c6      	bcc.n	8006a64 <remove_chain+0x4a>
 8006ad6:	e000      	b.n	8006ada <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006ad8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10d      	bne.n	8006b16 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <create_chain+0x2c>
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d31b      	bcc.n	8006b48 <create_chain+0x64>
 8006b10:	2301      	movs	r3, #1
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	e018      	b.n	8006b48 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff fd8e 	bl	800663a <get_fat>
 8006b1e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d801      	bhi.n	8006b2a <create_chain+0x46>
 8006b26:	2301      	movs	r3, #1
 8006b28:	e070      	b.n	8006c0c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d101      	bne.n	8006b36 <create_chain+0x52>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	e06a      	b.n	8006c0c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d201      	bcs.n	8006b44 <create_chain+0x60>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	e063      	b.n	8006c0c <create_chain+0x128>
		scl = clst;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d307      	bcc.n	8006b6c <create_chain+0x88>
				ncl = 2;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d901      	bls.n	8006b6c <create_chain+0x88>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e04f      	b.n	8006c0c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006b6c:	69f9      	ldr	r1, [r7, #28]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff fd63 	bl	800663a <get_fat>
 8006b74:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00e      	beq.n	8006b9a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d003      	beq.n	8006b8a <create_chain+0xa6>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d101      	bne.n	8006b8e <create_chain+0xaa>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	e03e      	b.n	8006c0c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d1da      	bne.n	8006b4c <create_chain+0x68>
 8006b96:	2300      	movs	r3, #0
 8006b98:	e038      	b.n	8006c0c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006b9a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba0:	69f9      	ldr	r1, [r7, #28]
 8006ba2:	6938      	ldr	r0, [r7, #16]
 8006ba4:	f7ff fe1d 	bl	80067e2 <put_fat>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <create_chain+0xe2>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d006      	beq.n	8006bc6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006bb8:	69fa      	ldr	r2, [r7, #28]
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6938      	ldr	r0, [r7, #16]
 8006bbe:	f7ff fe10 	bl	80067e2 <put_fat>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d116      	bne.n	8006bfa <create_chain+0x116>
		fs->last_clst = ncl;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	3b02      	subs	r3, #2
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d804      	bhi.n	8006bea <create_chain+0x106>
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	1e5a      	subs	r2, r3, #1
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	791b      	ldrb	r3, [r3, #4]
 8006bee:	f043 0301 	orr.w	r3, r3, #1
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	711a      	strb	r2, [r3, #4]
 8006bf8:	e007      	b.n	8006c0a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d102      	bne.n	8006c06 <create_chain+0x122>
 8006c00:	f04f 33ff 	mov.w	r3, #4294967295
 8006c04:	e000      	b.n	8006c08 <create_chain+0x124>
 8006c06:	2301      	movs	r3, #1
 8006c08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006c0a:	69fb      	ldr	r3, [r7, #28]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3720      	adds	r7, #32
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	3304      	adds	r3, #4
 8006c2a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	899b      	ldrh	r3, [r3, #12]
 8006c30:	461a      	mov	r2, r3
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	8952      	ldrh	r2, [r2, #10]
 8006c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1d1a      	adds	r2, r3, #4
 8006c46:	613a      	str	r2, [r7, #16]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <clmt_clust+0x42>
 8006c52:	2300      	movs	r3, #0
 8006c54:	e010      	b.n	8006c78 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d307      	bcc.n	8006c6e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c6c:	e7e9      	b.n	8006c42 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006c6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	4413      	add	r3, r2
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c9a:	d204      	bcs.n	8006ca6 <dir_sdi+0x22>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <dir_sdi+0x26>
		return FR_INT_ERR;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e071      	b.n	8006d8e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <dir_sdi+0x46>
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d902      	bls.n	8006cca <dir_sdi+0x46>
		clst = fs->dirbase;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10c      	bne.n	8006cea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	8912      	ldrh	r2, [r2, #8]
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d301      	bcc.n	8006ce0 <dir_sdi+0x5c>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e056      	b.n	8006d8e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	61da      	str	r2, [r3, #28]
 8006ce8:	e02d      	b.n	8006d46 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	895b      	ldrh	r3, [r3, #10]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	899b      	ldrh	r3, [r3, #12]
 8006cf4:	fb02 f303 	mul.w	r3, r2, r3
 8006cf8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006cfa:	e019      	b.n	8006d30 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6979      	ldr	r1, [r7, #20]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff fc9a 	bl	800663a <get_fat>
 8006d06:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d101      	bne.n	8006d14 <dir_sdi+0x90>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e03c      	b.n	8006d8e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d904      	bls.n	8006d24 <dir_sdi+0xa0>
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d301      	bcc.n	8006d28 <dir_sdi+0xa4>
 8006d24:	2302      	movs	r3, #2
 8006d26:	e032      	b.n	8006d8e <dir_sdi+0x10a>
			ofs -= csz;
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d2e1      	bcs.n	8006cfc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006d38:	6979      	ldr	r1, [r7, #20]
 8006d3a:	6938      	ldr	r0, [r7, #16]
 8006d3c:	f7ff fc5e 	bl	80065fc <clust2sect>
 8006d40:	4602      	mov	r2, r0
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <dir_sdi+0xd4>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e01a      	b.n	8006d8e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	69da      	ldr	r2, [r3, #28]
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	899b      	ldrh	r3, [r3, #12]
 8006d60:	4619      	mov	r1, r3
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d68:	441a      	add	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	899b      	ldrh	r3, [r3, #12]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d80:	fb00 f202 	mul.w	r2, r0, r2
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	18ca      	adds	r2, r1, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b086      	sub	sp, #24
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	3320      	adds	r3, #32
 8006dac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <dir_next+0x28>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dbc:	d301      	bcc.n	8006dc2 <dir_next+0x2c>
 8006dbe:	2304      	movs	r3, #4
 8006dc0:	e0bb      	b.n	8006f3a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	899b      	ldrh	r3, [r3, #12]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dce:	fb01 f202 	mul.w	r2, r1, r2
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f040 809d 	bne.w	8006f14 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	8912      	ldrh	r2, [r2, #8]
 8006df4:	4293      	cmp	r3, r2
 8006df6:	f0c0 808d 	bcc.w	8006f14 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	61da      	str	r2, [r3, #28]
 8006e00:	2304      	movs	r3, #4
 8006e02:	e09a      	b.n	8006f3a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	899b      	ldrh	r3, [r3, #12]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	8952      	ldrh	r2, [r2, #10]
 8006e14:	3a01      	subs	r2, #1
 8006e16:	4013      	ands	r3, r2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d17b      	bne.n	8006f14 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	4619      	mov	r1, r3
 8006e24:	4610      	mov	r0, r2
 8006e26:	f7ff fc08 	bl	800663a <get_fat>
 8006e2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d801      	bhi.n	8006e36 <dir_next+0xa0>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e081      	b.n	8006f3a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d101      	bne.n	8006e42 <dir_next+0xac>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e07b      	b.n	8006f3a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d359      	bcc.n	8006f00 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	61da      	str	r2, [r3, #28]
 8006e58:	2304      	movs	r3, #4
 8006e5a:	e06e      	b.n	8006f3a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	4619      	mov	r1, r3
 8006e64:	4610      	mov	r0, r2
 8006e66:	f7ff fe3d 	bl	8006ae4 <create_chain>
 8006e6a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <dir_next+0xe0>
 8006e72:	2307      	movs	r3, #7
 8006e74:	e061      	b.n	8006f3a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <dir_next+0xea>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e05c      	b.n	8006f3a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	d101      	bne.n	8006e8c <dir_next+0xf6>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e056      	b.n	8006f3a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f7ff fad3 	bl	8006438 <sync_window>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <dir_next+0x106>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e04e      	b.n	8006f3a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	899b      	ldrh	r3, [r3, #12]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	f7ff f8fc 	bl	80060a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006eae:	2300      	movs	r3, #0
 8006eb0:	613b      	str	r3, [r7, #16]
 8006eb2:	6979      	ldr	r1, [r7, #20]
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7ff fba1 	bl	80065fc <clust2sect>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	635a      	str	r2, [r3, #52]	; 0x34
 8006ec0:	e012      	b.n	8006ee8 <dir_next+0x152>
						fs->wflag = 1;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f7ff fab5 	bl	8006438 <sync_window>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <dir_next+0x142>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e030      	b.n	8006f3a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	3301      	adds	r3, #1
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	635a      	str	r2, [r3, #52]	; 0x34
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	895b      	ldrh	r3, [r3, #10]
 8006eec:	461a      	mov	r2, r3
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d3e6      	bcc.n	8006ec2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	1ad2      	subs	r2, r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006f06:	6979      	ldr	r1, [r7, #20]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff fb77 	bl	80065fc <clust2sect>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	899b      	ldrh	r3, [r3, #12]
 8006f24:	461a      	mov	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f2c:	fb00 f202 	mul.w	r2, r0, r2
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	18ca      	adds	r2, r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b086      	sub	sp, #24
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006f52:	2100      	movs	r1, #0
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff fe95 	bl	8006c84 <dir_sdi>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d12b      	bne.n	8006fbc <dir_alloc+0x7a>
		n = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff faa6 	bl	80064c0 <move_window>
 8006f74:	4603      	mov	r3, r0
 8006f76:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d11d      	bne.n	8006fba <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2be5      	cmp	r3, #229	; 0xe5
 8006f86:	d004      	beq.n	8006f92 <dir_alloc+0x50>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d107      	bne.n	8006fa2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	3301      	adds	r3, #1
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d102      	bne.n	8006fa6 <dir_alloc+0x64>
 8006fa0:	e00c      	b.n	8006fbc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff fef4 	bl	8006d96 <dir_next>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0d7      	beq.n	8006f68 <dir_alloc+0x26>
 8006fb8:	e000      	b.n	8006fbc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006fba:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d101      	bne.n	8006fc6 <dir_alloc+0x84>
 8006fc2:	2307      	movs	r3, #7
 8006fc4:	75fb      	strb	r3, [r7, #23]
	return res;
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	331a      	adds	r3, #26
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe ffbe 	bl	8005f60 <ld_word>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d109      	bne.n	8007004 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	3314      	adds	r3, #20
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe ffb3 	bl	8005f60 <ld_word>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	041b      	lsls	r3, r3, #16
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007004:	68fb      	ldr	r3, [r7, #12]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	331a      	adds	r3, #26
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	b292      	uxth	r2, r2
 8007022:	4611      	mov	r1, r2
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe ffd6 	bl	8005fd6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	2b03      	cmp	r3, #3
 8007030:	d109      	bne.n	8007046 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f103 0214 	add.w	r2, r3, #20
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	0c1b      	lsrs	r3, r3, #16
 800703c:	b29b      	uxth	r3, r3
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fe ffc8 	bl	8005fd6 <st_word>
	}
}
 8007046:	bf00      	nop
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	331a      	adds	r3, #26
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe ff7e 	bl	8005f60 <ld_word>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <cmp_lfn+0x1e>
 800706a:	2300      	movs	r3, #0
 800706c:	e059      	b.n	8007122 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007076:	1e5a      	subs	r2, r3, #1
 8007078:	4613      	mov	r3, r2
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007084:	2301      	movs	r3, #1
 8007086:	81fb      	strh	r3, [r7, #14]
 8007088:	2300      	movs	r3, #0
 800708a:	613b      	str	r3, [r7, #16]
 800708c:	e033      	b.n	80070f6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800708e:	4a27      	ldr	r2, [pc, #156]	; (800712c <cmp_lfn+0xdc>)
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	4413      	add	r3, r2
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	4413      	add	r3, r2
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe ff5f 	bl	8005f60 <ld_word>
 80070a2:	4603      	mov	r3, r0
 80070a4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80070a6:	89fb      	ldrh	r3, [r7, #14]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01a      	beq.n	80070e2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2bfe      	cmp	r3, #254	; 0xfe
 80070b0:	d812      	bhi.n	80070d8 <cmp_lfn+0x88>
 80070b2:	89bb      	ldrh	r3, [r7, #12]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f002 f861 	bl	800917c <ff_wtoupper>
 80070ba:	4603      	mov	r3, r0
 80070bc:	461c      	mov	r4, r3
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	617a      	str	r2, [r7, #20]
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f002 f855 	bl	800917c <ff_wtoupper>
 80070d2:	4603      	mov	r3, r0
 80070d4:	429c      	cmp	r4, r3
 80070d6:	d001      	beq.n	80070dc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80070d8:	2300      	movs	r3, #0
 80070da:	e022      	b.n	8007122 <cmp_lfn+0xd2>
			}
			wc = uc;
 80070dc:	89bb      	ldrh	r3, [r7, #12]
 80070de:	81fb      	strh	r3, [r7, #14]
 80070e0:	e006      	b.n	80070f0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80070e2:	89bb      	ldrh	r3, [r7, #12]
 80070e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d001      	beq.n	80070f0 <cmp_lfn+0xa0>
 80070ec:	2300      	movs	r3, #0
 80070ee:	e018      	b.n	8007122 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	3301      	adds	r3, #1
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b0c      	cmp	r3, #12
 80070fa:	d9c8      	bls.n	800708e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00b      	beq.n	8007120 <cmp_lfn+0xd0>
 8007108:	89fb      	ldrh	r3, [r7, #14]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d008      	beq.n	8007120 <cmp_lfn+0xd0>
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	4413      	add	r3, r2
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <cmp_lfn+0xd0>
 800711c:	2300      	movs	r3, #0
 800711e:	e000      	b.n	8007122 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007120:	2301      	movs	r3, #1
}
 8007122:	4618      	mov	r0, r3
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	bd90      	pop	{r4, r7, pc}
 800712a:	bf00      	nop
 800712c:	0800b668 	.word	0x0800b668

08007130 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	4611      	mov	r1, r2
 800713c:	461a      	mov	r2, r3
 800713e:	460b      	mov	r3, r1
 8007140:	71fb      	strb	r3, [r7, #7]
 8007142:	4613      	mov	r3, r2
 8007144:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	330d      	adds	r3, #13
 800714a:	79ba      	ldrb	r2, [r7, #6]
 800714c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	330b      	adds	r3, #11
 8007152:	220f      	movs	r2, #15
 8007154:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	330c      	adds	r3, #12
 800715a:	2200      	movs	r2, #0
 800715c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	331a      	adds	r3, #26
 8007162:	2100      	movs	r1, #0
 8007164:	4618      	mov	r0, r3
 8007166:	f7fe ff36 	bl	8005fd6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	1e5a      	subs	r2, r3, #1
 800716e:	4613      	mov	r3, r2
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	4413      	add	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800717a:	2300      	movs	r3, #0
 800717c:	82fb      	strh	r3, [r7, #22]
 800717e:	2300      	movs	r3, #0
 8007180:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007182:	8afb      	ldrh	r3, [r7, #22]
 8007184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007188:	4293      	cmp	r3, r2
 800718a:	d007      	beq.n	800719c <put_lfn+0x6c>
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	61fa      	str	r2, [r7, #28]
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800719c:	4a17      	ldr	r2, [pc, #92]	; (80071fc <put_lfn+0xcc>)
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	4413      	add	r3, r2
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	4413      	add	r3, r2
 80071aa:	8afa      	ldrh	r2, [r7, #22]
 80071ac:	4611      	mov	r1, r2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fe ff11 	bl	8005fd6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80071b4:	8afb      	ldrh	r3, [r7, #22]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d102      	bne.n	80071c0 <put_lfn+0x90>
 80071ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071be:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	3301      	adds	r3, #1
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b0c      	cmp	r3, #12
 80071ca:	d9da      	bls.n	8007182 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80071cc:	8afb      	ldrh	r3, [r7, #22]
 80071ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d006      	beq.n	80071e4 <put_lfn+0xb4>
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4413      	add	r3, r2
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d103      	bne.n	80071ec <put_lfn+0xbc>
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ea:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	79fa      	ldrb	r2, [r7, #7]
 80071f0:	701a      	strb	r2, [r3, #0]
}
 80071f2:	bf00      	nop
 80071f4:	3720      	adds	r7, #32
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	0800b668 	.word	0x0800b668

08007200 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08c      	sub	sp, #48	; 0x30
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800720e:	220b      	movs	r2, #11
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f7fe ff26 	bl	8006064 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b05      	cmp	r3, #5
 800721c:	d92b      	bls.n	8007276 <gen_numname+0x76>
		sr = seq;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007222:	e022      	b.n	800726a <gen_numname+0x6a>
			wc = *lfn++;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	1c9a      	adds	r2, r3, #2
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800722e:	2300      	movs	r3, #0
 8007230:	62bb      	str	r3, [r7, #40]	; 0x28
 8007232:	e017      	b.n	8007264 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	005a      	lsls	r2, r3, #1
 8007238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	4413      	add	r3, r2
 8007240:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007242:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007244:	085b      	lsrs	r3, r3, #1
 8007246:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <gen_numname+0x5e>
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007258:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800725c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	3301      	adds	r3, #1
 8007262:	62bb      	str	r3, [r7, #40]	; 0x28
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	2b0f      	cmp	r3, #15
 8007268:	d9e4      	bls.n	8007234 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1d8      	bne.n	8007224 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007276:	2307      	movs	r3, #7
 8007278:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	f003 030f 	and.w	r3, r3, #15
 8007282:	b2db      	uxtb	r3, r3
 8007284:	3330      	adds	r3, #48	; 0x30
 8007286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800728a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800728e:	2b39      	cmp	r3, #57	; 0x39
 8007290:	d904      	bls.n	800729c <gen_numname+0x9c>
 8007292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007296:	3307      	adds	r3, #7
 8007298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	1e5a      	subs	r2, r3, #1
 80072a0:	62ba      	str	r2, [r7, #40]	; 0x28
 80072a2:	3330      	adds	r3, #48	; 0x30
 80072a4:	443b      	add	r3, r7
 80072a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80072aa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	091b      	lsrs	r3, r3, #4
 80072b2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1df      	bne.n	800727a <gen_numname+0x7a>
	ns[i] = '~';
 80072ba:	f107 0214 	add.w	r2, r7, #20
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	4413      	add	r3, r2
 80072c2:	227e      	movs	r2, #126	; 0x7e
 80072c4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
 80072ca:	e002      	b.n	80072d2 <gen_numname+0xd2>
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	3301      	adds	r3, #1
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
 80072d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d205      	bcs.n	80072e6 <gen_numname+0xe6>
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	4413      	add	r3, r2
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	d1f2      	bne.n	80072cc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	2b07      	cmp	r3, #7
 80072ea:	d807      	bhi.n	80072fc <gen_numname+0xfc>
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	62ba      	str	r2, [r7, #40]	; 0x28
 80072f2:	3330      	adds	r3, #48	; 0x30
 80072f4:	443b      	add	r3, r7
 80072f6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80072fa:	e000      	b.n	80072fe <gen_numname+0xfe>
 80072fc:	2120      	movs	r1, #32
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	627a      	str	r2, [r7, #36]	; 0x24
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4413      	add	r3, r2
 8007308:	460a      	mov	r2, r1
 800730a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	2b07      	cmp	r3, #7
 8007310:	d9e9      	bls.n	80072e6 <gen_numname+0xe6>
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	3730      	adds	r7, #48	; 0x30
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007328:	230b      	movs	r3, #11
 800732a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	b2da      	uxtb	r2, r3
 8007330:	0852      	lsrs	r2, r2, #1
 8007332:	01db      	lsls	r3, r3, #7
 8007334:	4313      	orrs	r3, r2
 8007336:	b2da      	uxtb	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	1c59      	adds	r1, r3, #1
 800733c:	6079      	str	r1, [r7, #4]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	4413      	add	r3, r2
 8007342:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	3b01      	subs	r3, #1
 8007348:	60bb      	str	r3, [r7, #8]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1ed      	bne.n	800732c <sum_sfn+0x10>
	return sum;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b086      	sub	sp, #24
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800736c:	2100      	movs	r1, #0
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff fc88 	bl	8006c84 <dir_sdi>
 8007374:	4603      	mov	r3, r0
 8007376:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <dir_find+0x24>
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	e0a9      	b.n	80074d6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007382:	23ff      	movs	r3, #255	; 0xff
 8007384:	753b      	strb	r3, [r7, #20]
 8007386:	7d3b      	ldrb	r3, [r7, #20]
 8007388:	757b      	strb	r3, [r7, #21]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f04f 32ff 	mov.w	r2, #4294967295
 8007390:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	4619      	mov	r1, r3
 8007398:	6938      	ldr	r0, [r7, #16]
 800739a:	f7ff f891 	bl	80064c0 <move_window>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 8090 	bne.w	80074ca <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80073b2:	7dbb      	ldrb	r3, [r7, #22]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d102      	bne.n	80073be <dir_find+0x60>
 80073b8:	2304      	movs	r3, #4
 80073ba:	75fb      	strb	r3, [r7, #23]
 80073bc:	e08a      	b.n	80074d4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	330b      	adds	r3, #11
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073ca:	73fb      	strb	r3, [r7, #15]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	7bfa      	ldrb	r2, [r7, #15]
 80073d0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80073d2:	7dbb      	ldrb	r3, [r7, #22]
 80073d4:	2be5      	cmp	r3, #229	; 0xe5
 80073d6:	d007      	beq.n	80073e8 <dir_find+0x8a>
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d009      	beq.n	80073f6 <dir_find+0x98>
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	2b0f      	cmp	r3, #15
 80073e6:	d006      	beq.n	80073f6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80073e8:	23ff      	movs	r3, #255	; 0xff
 80073ea:	757b      	strb	r3, [r7, #21]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f04f 32ff 	mov.w	r2, #4294967295
 80073f2:	631a      	str	r2, [r3, #48]	; 0x30
 80073f4:	e05e      	b.n	80074b4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
 80073f8:	2b0f      	cmp	r3, #15
 80073fa:	d136      	bne.n	800746a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d154      	bne.n	80074b4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800740a:	7dbb      	ldrb	r3, [r7, #22]
 800740c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00d      	beq.n	8007430 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	7b5b      	ldrb	r3, [r3, #13]
 800741a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800741c:	7dbb      	ldrb	r3, [r7, #22]
 800741e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007422:	75bb      	strb	r3, [r7, #22]
 8007424:	7dbb      	ldrb	r3, [r7, #22]
 8007426:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	695a      	ldr	r2, [r3, #20]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007430:	7dba      	ldrb	r2, [r7, #22]
 8007432:	7d7b      	ldrb	r3, [r7, #21]
 8007434:	429a      	cmp	r2, r3
 8007436:	d115      	bne.n	8007464 <dir_find+0x106>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	330d      	adds	r3, #13
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	7d3a      	ldrb	r2, [r7, #20]
 8007442:	429a      	cmp	r2, r3
 8007444:	d10e      	bne.n	8007464 <dir_find+0x106>
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	691a      	ldr	r2, [r3, #16]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7ff fdfd 	bl	8007050 <cmp_lfn>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <dir_find+0x106>
 800745c:	7d7b      	ldrb	r3, [r7, #21]
 800745e:	3b01      	subs	r3, #1
 8007460:	b2db      	uxtb	r3, r3
 8007462:	e000      	b.n	8007466 <dir_find+0x108>
 8007464:	23ff      	movs	r3, #255	; 0xff
 8007466:	757b      	strb	r3, [r7, #21]
 8007468:	e024      	b.n	80074b4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800746a:	7d7b      	ldrb	r3, [r7, #21]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d109      	bne.n	8007484 <dir_find+0x126>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff ff51 	bl	800731c <sum_sfn>
 800747a:	4603      	mov	r3, r0
 800747c:	461a      	mov	r2, r3
 800747e:	7d3b      	ldrb	r3, [r7, #20]
 8007480:	4293      	cmp	r3, r2
 8007482:	d024      	beq.n	80074ce <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <dir_find+0x14a>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a18      	ldr	r0, [r3, #32]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3324      	adds	r3, #36	; 0x24
 800749a:	220b      	movs	r2, #11
 800749c:	4619      	mov	r1, r3
 800749e:	f7fe fe1d 	bl	80060dc <mem_cmp>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d014      	beq.n	80074d2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80074a8:	23ff      	movs	r3, #255	; 0xff
 80074aa:	757b      	strb	r3, [r7, #21]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f04f 32ff 	mov.w	r2, #4294967295
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80074b4:	2100      	movs	r1, #0
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff fc6d 	bl	8006d96 <dir_next>
 80074bc:	4603      	mov	r3, r0
 80074be:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f43f af65 	beq.w	8007392 <dir_find+0x34>
 80074c8:	e004      	b.n	80074d4 <dir_find+0x176>
		if (res != FR_OK) break;
 80074ca:	bf00      	nop
 80074cc:	e002      	b.n	80074d4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80074ce:	bf00      	nop
 80074d0:	e000      	b.n	80074d4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80074d2:	bf00      	nop

	return res;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08c      	sub	sp, #48	; 0x30
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80074f4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <dir_register+0x20>
 80074fc:	2306      	movs	r3, #6
 80074fe:	e0e0      	b.n	80076c2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007500:	2300      	movs	r3, #0
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
 8007504:	e002      	b.n	800750c <dir_register+0x2c>
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	3301      	adds	r3, #1
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	691a      	ldr	r2, [r3, #16]
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f4      	bne.n	8007506 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007522:	f107 030c 	add.w	r3, r7, #12
 8007526:	220c      	movs	r2, #12
 8007528:	4618      	mov	r0, r3
 800752a:	f7fe fd9b 	bl	8006064 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d032      	beq.n	800759e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2240      	movs	r2, #64	; 0x40
 800753c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007540:	2301      	movs	r3, #1
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28
 8007544:	e016      	b.n	8007574 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	691a      	ldr	r2, [r3, #16]
 8007550:	f107 010c 	add.w	r1, r7, #12
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	f7ff fe53 	bl	8007200 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff feff 	bl	800735e <dir_find>
 8007560:	4603      	mov	r3, r0
 8007562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800756a:	2b00      	cmp	r3, #0
 800756c:	d106      	bne.n	800757c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	3301      	adds	r3, #1
 8007572:	62bb      	str	r3, [r7, #40]	; 0x28
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	2b63      	cmp	r3, #99	; 0x63
 8007578:	d9e5      	bls.n	8007546 <dir_register+0x66>
 800757a:	e000      	b.n	800757e <dir_register+0x9e>
			if (res != FR_OK) break;
 800757c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	2b64      	cmp	r3, #100	; 0x64
 8007582:	d101      	bne.n	8007588 <dir_register+0xa8>
 8007584:	2307      	movs	r3, #7
 8007586:	e09c      	b.n	80076c2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007588:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800758c:	2b04      	cmp	r3, #4
 800758e:	d002      	beq.n	8007596 <dir_register+0xb6>
 8007590:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007594:	e095      	b.n	80076c2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007596:	7dfa      	ldrb	r2, [r7, #23]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d007      	beq.n	80075b8 <dir_register+0xd8>
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	330c      	adds	r3, #12
 80075ac:	4a47      	ldr	r2, [pc, #284]	; (80076cc <dir_register+0x1ec>)
 80075ae:	fba2 2303 	umull	r2, r3, r2, r3
 80075b2:	089b      	lsrs	r3, r3, #2
 80075b4:	3301      	adds	r3, #1
 80075b6:	e000      	b.n	80075ba <dir_register+0xda>
 80075b8:	2301      	movs	r3, #1
 80075ba:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80075bc:	6a39      	ldr	r1, [r7, #32]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff fcbf 	bl	8006f42 <dir_alloc>
 80075c4:	4603      	mov	r3, r0
 80075c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80075ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d148      	bne.n	8007664 <dir_register+0x184>
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	623b      	str	r3, [r7, #32]
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d042      	beq.n	8007664 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695a      	ldr	r2, [r3, #20]
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	015b      	lsls	r3, r3, #5
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff fb4a 	bl	8006c84 <dir_sdi>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80075f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d132      	bne.n	8007664 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3324      	adds	r3, #36	; 0x24
 8007602:	4618      	mov	r0, r3
 8007604:	f7ff fe8a 	bl	800731c <sum_sfn>
 8007608:	4603      	mov	r3, r0
 800760a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	4619      	mov	r1, r3
 8007612:	69f8      	ldr	r0, [r7, #28]
 8007614:	f7fe ff54 	bl	80064c0 <move_window>
 8007618:	4603      	mov	r3, r0
 800761a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800761e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007622:	2b00      	cmp	r3, #0
 8007624:	d11d      	bne.n	8007662 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	6918      	ldr	r0, [r3, #16]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a19      	ldr	r1, [r3, #32]
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	b2da      	uxtb	r2, r3
 8007632:	7efb      	ldrb	r3, [r7, #27]
 8007634:	f7ff fd7c 	bl	8007130 <put_lfn>
				fs->wflag = 1;
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	2201      	movs	r2, #1
 800763c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800763e:	2100      	movs	r1, #0
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff fba8 	bl	8006d96 <dir_next>
 8007646:	4603      	mov	r3, r0
 8007648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800764c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007650:	2b00      	cmp	r3, #0
 8007652:	d107      	bne.n	8007664 <dir_register+0x184>
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	3b01      	subs	r3, #1
 8007658:	623b      	str	r3, [r7, #32]
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1d5      	bne.n	800760c <dir_register+0x12c>
 8007660:	e000      	b.n	8007664 <dir_register+0x184>
				if (res != FR_OK) break;
 8007662:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007668:	2b00      	cmp	r3, #0
 800766a:	d128      	bne.n	80076be <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	4619      	mov	r1, r3
 8007672:	69f8      	ldr	r0, [r7, #28]
 8007674:	f7fe ff24 	bl	80064c0 <move_window>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800767e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007682:	2b00      	cmp	r3, #0
 8007684:	d11b      	bne.n	80076be <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	2220      	movs	r2, #32
 800768c:	2100      	movs	r1, #0
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe fd09 	bl	80060a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a18      	ldr	r0, [r3, #32]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3324      	adds	r3, #36	; 0x24
 800769c:	220b      	movs	r2, #11
 800769e:	4619      	mov	r1, r3
 80076a0:	f7fe fce0 	bl	8006064 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	330c      	adds	r3, #12
 80076b0:	f002 0218 	and.w	r2, r2, #24
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	2201      	movs	r2, #1
 80076bc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80076be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3730      	adds	r7, #48	; 0x30
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	4ec4ec4f 	.word	0x4ec4ec4f

080076d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08a      	sub	sp, #40	; 0x28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	2300      	movs	r3, #0
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	61ba      	str	r2, [r7, #24]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4413      	add	r3, r2
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80076fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007700:	2b1f      	cmp	r3, #31
 8007702:	d940      	bls.n	8007786 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007706:	2b2f      	cmp	r3, #47	; 0x2f
 8007708:	d006      	beq.n	8007718 <create_name+0x48>
 800770a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800770c:	2b5c      	cmp	r3, #92	; 0x5c
 800770e:	d110      	bne.n	8007732 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007710:	e002      	b.n	8007718 <create_name+0x48>
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	3301      	adds	r3, #1
 8007716:	61bb      	str	r3, [r7, #24]
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	4413      	add	r3, r2
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b2f      	cmp	r3, #47	; 0x2f
 8007722:	d0f6      	beq.n	8007712 <create_name+0x42>
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	4413      	add	r3, r2
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b5c      	cmp	r3, #92	; 0x5c
 800772e:	d0f0      	beq.n	8007712 <create_name+0x42>
			break;
 8007730:	e02a      	b.n	8007788 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2bfe      	cmp	r3, #254	; 0xfe
 8007736:	d901      	bls.n	800773c <create_name+0x6c>
 8007738:	2306      	movs	r3, #6
 800773a:	e17d      	b.n	8007a38 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800773c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800773e:	b2db      	uxtb	r3, r3
 8007740:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007744:	2101      	movs	r1, #1
 8007746:	4618      	mov	r0, r3
 8007748:	f001 fcdc 	bl	8009104 <ff_convert>
 800774c:	4603      	mov	r3, r0
 800774e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <create_name+0x8a>
 8007756:	2306      	movs	r3, #6
 8007758:	e16e      	b.n	8007a38 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800775a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800775c:	2b7f      	cmp	r3, #127	; 0x7f
 800775e:	d809      	bhi.n	8007774 <create_name+0xa4>
 8007760:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007762:	4619      	mov	r1, r3
 8007764:	488d      	ldr	r0, [pc, #564]	; (800799c <create_name+0x2cc>)
 8007766:	f7fe fce0 	bl	800612a <chk_chr>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <create_name+0xa4>
 8007770:	2306      	movs	r3, #6
 8007772:	e161      	b.n	8007a38 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	617a      	str	r2, [r7, #20]
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007782:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007784:	e7b4      	b.n	80076f0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007786:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	441a      	add	r2, r3
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007794:	2b1f      	cmp	r3, #31
 8007796:	d801      	bhi.n	800779c <create_name+0xcc>
 8007798:	2304      	movs	r3, #4
 800779a:	e000      	b.n	800779e <create_name+0xce>
 800779c:	2300      	movs	r3, #0
 800779e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80077a2:	e011      	b.n	80077c8 <create_name+0xf8>
		w = lfn[di - 1];
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80077aa:	3b01      	subs	r3, #1
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4413      	add	r3, r2
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80077b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d002      	beq.n	80077c2 <create_name+0xf2>
 80077bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077be:	2b2e      	cmp	r3, #46	; 0x2e
 80077c0:	d106      	bne.n	80077d0 <create_name+0x100>
		di--;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1ea      	bne.n	80077a4 <create_name+0xd4>
 80077ce:	e000      	b.n	80077d2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80077d0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	4413      	add	r3, r2
 80077da:	2200      	movs	r2, #0
 80077dc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <create_name+0x118>
 80077e4:	2306      	movs	r3, #6
 80077e6:	e127      	b.n	8007a38 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3324      	adds	r3, #36	; 0x24
 80077ec:	220b      	movs	r2, #11
 80077ee:	2120      	movs	r1, #32
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe fc58 	bl	80060a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80077f6:	2300      	movs	r3, #0
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	e002      	b.n	8007802 <create_name+0x132>
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	3301      	adds	r3, #1
 8007800:	61bb      	str	r3, [r7, #24]
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	4413      	add	r3, r2
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	2b20      	cmp	r3, #32
 800780e:	d0f5      	beq.n	80077fc <create_name+0x12c>
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	2b2e      	cmp	r3, #46	; 0x2e
 800781c:	d0ee      	beq.n	80077fc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d009      	beq.n	8007838 <create_name+0x168>
 8007824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007828:	f043 0303 	orr.w	r3, r3, #3
 800782c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007830:	e002      	b.n	8007838 <create_name+0x168>
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	3b01      	subs	r3, #1
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d009      	beq.n	8007852 <create_name+0x182>
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007844:	3b01      	subs	r3, #1
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	2b2e      	cmp	r3, #46	; 0x2e
 8007850:	d1ef      	bne.n	8007832 <create_name+0x162>

	i = b = 0; ni = 8;
 8007852:	2300      	movs	r3, #0
 8007854:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007858:	2300      	movs	r3, #0
 800785a:	623b      	str	r3, [r7, #32]
 800785c:	2308      	movs	r3, #8
 800785e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	1c5a      	adds	r2, r3, #1
 8007864:	61ba      	str	r2, [r7, #24]
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4413      	add	r3, r2
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 8090 	beq.w	8007998 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800787a:	2b20      	cmp	r3, #32
 800787c:	d006      	beq.n	800788c <create_name+0x1bc>
 800787e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007880:	2b2e      	cmp	r3, #46	; 0x2e
 8007882:	d10a      	bne.n	800789a <create_name+0x1ca>
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	429a      	cmp	r2, r3
 800788a:	d006      	beq.n	800789a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800788c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007890:	f043 0303 	orr.w	r3, r3, #3
 8007894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007898:	e07d      	b.n	8007996 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800789a:	6a3a      	ldr	r2, [r7, #32]
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d203      	bcs.n	80078aa <create_name+0x1da>
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d123      	bne.n	80078f2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	2b0b      	cmp	r3, #11
 80078ae:	d106      	bne.n	80078be <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80078b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078b4:	f043 0303 	orr.w	r3, r3, #3
 80078b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078bc:	e075      	b.n	80079aa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d005      	beq.n	80078d2 <create_name+0x202>
 80078c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078ca:	f043 0303 	orr.w	r3, r3, #3
 80078ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d866      	bhi.n	80079a8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	61bb      	str	r3, [r7, #24]
 80078de:	2308      	movs	r3, #8
 80078e0:	623b      	str	r3, [r7, #32]
 80078e2:	230b      	movs	r3, #11
 80078e4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80078e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80078f0:	e051      	b.n	8007996 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80078f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078f4:	2b7f      	cmp	r3, #127	; 0x7f
 80078f6:	d914      	bls.n	8007922 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80078f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078fa:	2100      	movs	r1, #0
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 fc01 	bl	8009104 <ff_convert>
 8007902:	4603      	mov	r3, r0
 8007904:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <create_name+0x246>
 800790c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800790e:	3b80      	subs	r3, #128	; 0x80
 8007910:	4a23      	ldr	r2, [pc, #140]	; (80079a0 <create_name+0x2d0>)
 8007912:	5cd3      	ldrb	r3, [r2, r3]
 8007914:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800791a:	f043 0302 	orr.w	r3, r3, #2
 800791e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <create_name+0x268>
 8007928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800792a:	4619      	mov	r1, r3
 800792c:	481d      	ldr	r0, [pc, #116]	; (80079a4 <create_name+0x2d4>)
 800792e:	f7fe fbfc 	bl	800612a <chk_chr>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d008      	beq.n	800794a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007938:	235f      	movs	r3, #95	; 0x5f
 800793a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800793c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007940:	f043 0303 	orr.w	r3, r3, #3
 8007944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007948:	e01b      	b.n	8007982 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800794a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800794c:	2b40      	cmp	r3, #64	; 0x40
 800794e:	d909      	bls.n	8007964 <create_name+0x294>
 8007950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007952:	2b5a      	cmp	r3, #90	; 0x5a
 8007954:	d806      	bhi.n	8007964 <create_name+0x294>
					b |= 2;
 8007956:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800795a:	f043 0302 	orr.w	r3, r3, #2
 800795e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007962:	e00e      	b.n	8007982 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007966:	2b60      	cmp	r3, #96	; 0x60
 8007968:	d90b      	bls.n	8007982 <create_name+0x2b2>
 800796a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800796c:	2b7a      	cmp	r3, #122	; 0x7a
 800796e:	d808      	bhi.n	8007982 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007970:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007974:	f043 0301 	orr.w	r3, r3, #1
 8007978:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800797c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800797e:	3b20      	subs	r3, #32
 8007980:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	623a      	str	r2, [r7, #32]
 8007988:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800798a:	b2d1      	uxtb	r1, r2
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	4413      	add	r3, r2
 8007990:	460a      	mov	r2, r1
 8007992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007996:	e763      	b.n	8007860 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007998:	bf00      	nop
 800799a:	e006      	b.n	80079aa <create_name+0x2da>
 800799c:	0800b580 	.word	0x0800b580
 80079a0:	0800b5e8 	.word	0x0800b5e8
 80079a4:	0800b58c 	.word	0x0800b58c
			if (si > di) break;			/* No extension */
 80079a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079b0:	2be5      	cmp	r3, #229	; 0xe5
 80079b2:	d103      	bne.n	80079bc <create_name+0x2ec>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2205      	movs	r2, #5
 80079b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	2b08      	cmp	r3, #8
 80079c0:	d104      	bne.n	80079cc <create_name+0x2fc>
 80079c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80079cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079d0:	f003 030c 	and.w	r3, r3, #12
 80079d4:	2b0c      	cmp	r3, #12
 80079d6:	d005      	beq.n	80079e4 <create_name+0x314>
 80079d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079dc:	f003 0303 	and.w	r3, r3, #3
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d105      	bne.n	80079f0 <create_name+0x320>
 80079e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079e8:	f043 0302 	orr.w	r3, r3, #2
 80079ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80079f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d117      	bne.n	8007a2c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80079fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a00:	f003 0303 	and.w	r3, r3, #3
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d105      	bne.n	8007a14 <create_name+0x344>
 8007a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a0c:	f043 0310 	orr.w	r3, r3, #16
 8007a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007a14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a18:	f003 030c 	and.w	r3, r3, #12
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d105      	bne.n	8007a2c <create_name+0x35c>
 8007a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a24:	f043 0308 	orr.w	r3, r3, #8
 8007a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007a36:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3728      	adds	r7, #40	; 0x28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007a54:	e002      	b.n	8007a5c <follow_path+0x1c>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b2f      	cmp	r3, #47	; 0x2f
 8007a62:	d0f8      	beq.n	8007a56 <follow_path+0x16>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b5c      	cmp	r3, #92	; 0x5c
 8007a6a:	d0f4      	beq.n	8007a56 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	2b1f      	cmp	r3, #31
 8007a78:	d80a      	bhi.n	8007a90 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2280      	movs	r2, #128	; 0x80
 8007a7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007a82:	2100      	movs	r1, #0
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7ff f8fd 	bl	8006c84 <dir_sdi>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	75fb      	strb	r3, [r7, #23]
 8007a8e:	e048      	b.n	8007b22 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a90:	463b      	mov	r3, r7
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff fe1b 	bl	80076d0 <create_name>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d139      	bne.n	8007b18 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff fc5a 	bl	800735e <dir_find>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ab4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00a      	beq.n	8007ad2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d12c      	bne.n	8007b1c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d127      	bne.n	8007b1c <follow_path+0xdc>
 8007acc:	2305      	movs	r3, #5
 8007ace:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007ad0:	e024      	b.n	8007b1c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ad2:	7afb      	ldrb	r3, [r7, #11]
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d121      	bne.n	8007b20 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	799b      	ldrb	r3, [r3, #6]
 8007ae0:	f003 0310 	and.w	r3, r3, #16
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007ae8:	2305      	movs	r3, #5
 8007aea:	75fb      	strb	r3, [r7, #23]
 8007aec:	e019      	b.n	8007b22 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	8992      	ldrh	r2, [r2, #12]
 8007afc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b00:	fb00 f202 	mul.w	r2, r0, r2
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	440b      	add	r3, r1
 8007b08:	4619      	mov	r1, r3
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f7ff fa60 	bl	8006fd0 <ld_clust>
 8007b10:	4602      	mov	r2, r0
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b16:	e7bb      	b.n	8007a90 <follow_path+0x50>
			if (res != FR_OK) break;
 8007b18:	bf00      	nop
 8007b1a:	e002      	b.n	8007b22 <follow_path+0xe2>
				break;
 8007b1c:	bf00      	nop
 8007b1e:	e000      	b.n	8007b22 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b20:	bf00      	nop
			}
		}
	}

	return res;
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007b34:	f04f 33ff 	mov.w	r3, #4294967295
 8007b38:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d031      	beq.n	8007ba6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	e002      	b.n	8007b50 <get_ldnumber+0x24>
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	2b1f      	cmp	r3, #31
 8007b56:	d903      	bls.n	8007b60 <get_ldnumber+0x34>
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b3a      	cmp	r3, #58	; 0x3a
 8007b5e:	d1f4      	bne.n	8007b4a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b3a      	cmp	r3, #58	; 0x3a
 8007b66:	d11c      	bne.n	8007ba2 <get_ldnumber+0x76>
			tp = *path;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	60fa      	str	r2, [r7, #12]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	3b30      	subs	r3, #48	; 0x30
 8007b78:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2b09      	cmp	r3, #9
 8007b7e:	d80e      	bhi.n	8007b9e <get_ldnumber+0x72>
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d10a      	bne.n	8007b9e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d107      	bne.n	8007b9e <get_ldnumber+0x72>
					vol = (int)i;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	3301      	adds	r3, #1
 8007b96:	617b      	str	r3, [r7, #20]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	e002      	b.n	8007ba8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007ba6:	693b      	ldr	r3, [r7, #16]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	371c      	adds	r7, #28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	70da      	strb	r2, [r3, #3]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bca:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fe fc76 	bl	80064c0 <move_window>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <check_fs+0x2a>
 8007bda:	2304      	movs	r3, #4
 8007bdc:	e038      	b.n	8007c50 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3338      	adds	r3, #56	; 0x38
 8007be2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe f9ba 	bl	8005f60 <ld_word>
 8007bec:	4603      	mov	r3, r0
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d001      	beq.n	8007bfc <check_fs+0x48>
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e029      	b.n	8007c50 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c02:	2be9      	cmp	r3, #233	; 0xe9
 8007c04:	d009      	beq.n	8007c1a <check_fs+0x66>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c0c:	2beb      	cmp	r3, #235	; 0xeb
 8007c0e:	d11e      	bne.n	8007c4e <check_fs+0x9a>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c16:	2b90      	cmp	r3, #144	; 0x90
 8007c18:	d119      	bne.n	8007c4e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3338      	adds	r3, #56	; 0x38
 8007c1e:	3336      	adds	r3, #54	; 0x36
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fe f9b5 	bl	8005f90 <ld_dword>
 8007c26:	4603      	mov	r3, r0
 8007c28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c2c:	4a0a      	ldr	r2, [pc, #40]	; (8007c58 <check_fs+0xa4>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d101      	bne.n	8007c36 <check_fs+0x82>
 8007c32:	2300      	movs	r3, #0
 8007c34:	e00c      	b.n	8007c50 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	3338      	adds	r3, #56	; 0x38
 8007c3a:	3352      	adds	r3, #82	; 0x52
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe f9a7 	bl	8005f90 <ld_dword>
 8007c42:	4603      	mov	r3, r0
 8007c44:	4a05      	ldr	r2, [pc, #20]	; (8007c5c <check_fs+0xa8>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d101      	bne.n	8007c4e <check_fs+0x9a>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e000      	b.n	8007c50 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007c4e:	2302      	movs	r3, #2
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	00544146 	.word	0x00544146
 8007c5c:	33544146 	.word	0x33544146

08007c60 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b096      	sub	sp, #88	; 0x58
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f7ff ff59 	bl	8007b2c <get_ldnumber>
 8007c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	da01      	bge.n	8007c86 <find_volume+0x26>
 8007c82:	230b      	movs	r3, #11
 8007c84:	e265      	b.n	8008152 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c86:	4a9f      	ldr	r2, [pc, #636]	; (8007f04 <find_volume+0x2a4>)
 8007c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c8e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <find_volume+0x3a>
 8007c96:	230c      	movs	r3, #12
 8007c98:	e25b      	b.n	8008152 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c9e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	f023 0301 	bic.w	r3, r3, #1
 8007ca6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d01a      	beq.n	8007ce6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	785b      	ldrb	r3, [r3, #1]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fe f8b5 	bl	8005e24 <disk_status>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10c      	bne.n	8007ce6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ccc:	79fb      	ldrb	r3, [r7, #7]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d007      	beq.n	8007ce2 <find_volume+0x82>
 8007cd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cd6:	f003 0304 	and.w	r3, r3, #4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007cde:	230a      	movs	r3, #10
 8007ce0:	e237      	b.n	8008152 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e235      	b.n	8008152 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	785b      	ldrb	r3, [r3, #1]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fe f8ad 	bl	8005e58 <disk_initialize>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007d04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007d10:	2303      	movs	r3, #3
 8007d12:	e21e      	b.n	8008152 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d007      	beq.n	8007d2a <find_volume+0xca>
 8007d1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007d26:	230a      	movs	r3, #10
 8007d28:	e213      	b.n	8008152 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	7858      	ldrb	r0, [r3, #1]
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	330c      	adds	r3, #12
 8007d32:	461a      	mov	r2, r3
 8007d34:	2102      	movs	r1, #2
 8007d36:	f7fe f8f5 	bl	8005f24 <disk_ioctl>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <find_volume+0xe4>
 8007d40:	2301      	movs	r3, #1
 8007d42:	e206      	b.n	8008152 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	899b      	ldrh	r3, [r3, #12]
 8007d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d4c:	d80d      	bhi.n	8007d6a <find_volume+0x10a>
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	899b      	ldrh	r3, [r3, #12]
 8007d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d56:	d308      	bcc.n	8007d6a <find_volume+0x10a>
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	899b      	ldrh	r3, [r3, #12]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	899b      	ldrh	r3, [r3, #12]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	4013      	ands	r3, r2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <find_volume+0x10e>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e1f1      	b.n	8008152 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d76:	f7ff ff1d 	bl	8007bb4 <check_fs>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007d80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d149      	bne.n	8007e1c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d88:	2300      	movs	r3, #0
 8007d8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d8c:	e01e      	b.n	8007dcc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d90:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007d9c:	4413      	add	r3, r2
 8007d9e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	3304      	adds	r3, #4
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d006      	beq.n	8007db8 <find_volume+0x158>
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	3308      	adds	r3, #8
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fe f8ee 	bl	8005f90 <ld_dword>
 8007db4:	4602      	mov	r2, r0
 8007db6:	e000      	b.n	8007dba <find_volume+0x15a>
 8007db8:	2200      	movs	r2, #0
 8007dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	3358      	adds	r3, #88	; 0x58
 8007dc0:	443b      	add	r3, r7
 8007dc2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc8:	3301      	adds	r3, #1
 8007dca:	643b      	str	r3, [r7, #64]	; 0x40
 8007dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d9dd      	bls.n	8007d8e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <find_volume+0x182>
 8007ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dde:	3b01      	subs	r3, #1
 8007de0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	3358      	adds	r3, #88	; 0x58
 8007de8:	443b      	add	r3, r7
 8007dea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007dee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d005      	beq.n	8007e02 <find_volume+0x1a2>
 8007df6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007df8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007dfa:	f7ff fedb 	bl	8007bb4 <check_fs>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	e000      	b.n	8007e04 <find_volume+0x1a4>
 8007e02:	2303      	movs	r3, #3
 8007e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d905      	bls.n	8007e1c <find_volume+0x1bc>
 8007e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e12:	3301      	adds	r3, #1
 8007e14:	643b      	str	r3, [r7, #64]	; 0x40
 8007e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d9e2      	bls.n	8007de2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007e1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d101      	bne.n	8007e28 <find_volume+0x1c8>
 8007e24:	2301      	movs	r3, #1
 8007e26:	e194      	b.n	8008152 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d901      	bls.n	8007e34 <find_volume+0x1d4>
 8007e30:	230d      	movs	r3, #13
 8007e32:	e18e      	b.n	8008152 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	3338      	adds	r3, #56	; 0x38
 8007e38:	330b      	adds	r3, #11
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe f890 	bl	8005f60 <ld_word>
 8007e40:	4603      	mov	r3, r0
 8007e42:	461a      	mov	r2, r3
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	899b      	ldrh	r3, [r3, #12]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d001      	beq.n	8007e50 <find_volume+0x1f0>
 8007e4c:	230d      	movs	r3, #13
 8007e4e:	e180      	b.n	8008152 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e52:	3338      	adds	r3, #56	; 0x38
 8007e54:	3316      	adds	r3, #22
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe f882 	bl	8005f60 <ld_word>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d106      	bne.n	8007e74 <find_volume+0x214>
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	3338      	adds	r3, #56	; 0x38
 8007e6a:	3324      	adds	r3, #36	; 0x24
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe f88f 	bl	8005f90 <ld_dword>
 8007e72:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e78:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e86:	789b      	ldrb	r3, [r3, #2]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d005      	beq.n	8007e98 <find_volume+0x238>
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	789b      	ldrb	r3, [r3, #2]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d001      	beq.n	8007e98 <find_volume+0x238>
 8007e94:	230d      	movs	r3, #13
 8007e96:	e15c      	b.n	8008152 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	789b      	ldrb	r3, [r3, #2]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea0:	fb02 f303 	mul.w	r3, r2, r3
 8007ea4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	895b      	ldrh	r3, [r3, #10]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d008      	beq.n	8007ecc <find_volume+0x26c>
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	895b      	ldrh	r3, [r3, #10]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec2:	895b      	ldrh	r3, [r3, #10]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <find_volume+0x270>
 8007ecc:	230d      	movs	r3, #13
 8007ece:	e140      	b.n	8008152 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	3338      	adds	r3, #56	; 0x38
 8007ed4:	3311      	adds	r3, #17
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe f842 	bl	8005f60 <ld_word>
 8007edc:	4603      	mov	r3, r0
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	891b      	ldrh	r3, [r3, #8]
 8007ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eea:	8992      	ldrh	r2, [r2, #12]
 8007eec:	0952      	lsrs	r2, r2, #5
 8007eee:	b292      	uxth	r2, r2
 8007ef0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ef4:	fb01 f202 	mul.w	r2, r1, r2
 8007ef8:	1a9b      	subs	r3, r3, r2
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <find_volume+0x2a8>
 8007f00:	230d      	movs	r3, #13
 8007f02:	e126      	b.n	8008152 <find_volume+0x4f2>
 8007f04:	200026e0 	.word	0x200026e0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0a:	3338      	adds	r3, #56	; 0x38
 8007f0c:	3313      	adds	r3, #19
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe f826 	bl	8005f60 <ld_word>
 8007f14:	4603      	mov	r3, r0
 8007f16:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d106      	bne.n	8007f2c <find_volume+0x2cc>
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	3338      	adds	r3, #56	; 0x38
 8007f22:	3320      	adds	r3, #32
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fe f833 	bl	8005f90 <ld_dword>
 8007f2a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	3338      	adds	r3, #56	; 0x38
 8007f30:	330e      	adds	r3, #14
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe f814 	bl	8005f60 <ld_word>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007f3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d101      	bne.n	8007f46 <find_volume+0x2e6>
 8007f42:	230d      	movs	r3, #13
 8007f44:	e105      	b.n	8008152 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007f46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f4a:	4413      	add	r3, r2
 8007f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f4e:	8911      	ldrh	r1, [r2, #8]
 8007f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f52:	8992      	ldrh	r2, [r2, #12]
 8007f54:	0952      	lsrs	r2, r2, #5
 8007f56:	b292      	uxth	r2, r2
 8007f58:	fbb1 f2f2 	udiv	r2, r1, r2
 8007f5c:	b292      	uxth	r2, r2
 8007f5e:	4413      	add	r3, r2
 8007f60:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d201      	bcs.n	8007f6e <find_volume+0x30e>
 8007f6a:	230d      	movs	r3, #13
 8007f6c:	e0f1      	b.n	8008152 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f76:	8952      	ldrh	r2, [r2, #10]
 8007f78:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <find_volume+0x328>
 8007f84:	230d      	movs	r3, #13
 8007f86:	e0e4      	b.n	8008152 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d802      	bhi.n	8007f9e <find_volume+0x33e>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d802      	bhi.n	8007fae <find_volume+0x34e>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	1c9a      	adds	r2, r3, #2
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fba:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007fbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fc0:	441a      	add	r2, r3
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007fc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	441a      	add	r2, r3
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d11e      	bne.n	8008016 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	3338      	adds	r3, #56	; 0x38
 8007fdc:	332a      	adds	r3, #42	; 0x2a
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fd ffbe 	bl	8005f60 <ld_word>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <find_volume+0x38e>
 8007fea:	230d      	movs	r3, #13
 8007fec:	e0b1      	b.n	8008152 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	891b      	ldrh	r3, [r3, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <find_volume+0x39a>
 8007ff6:	230d      	movs	r3, #13
 8007ff8:	e0ab      	b.n	8008152 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	3338      	adds	r3, #56	; 0x38
 8007ffe:	332c      	adds	r3, #44	; 0x2c
 8008000:	4618      	mov	r0, r3
 8008002:	f7fd ffc5 	bl	8005f90 <ld_dword>
 8008006:	4602      	mov	r2, r0
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	647b      	str	r3, [r7, #68]	; 0x44
 8008014:	e01f      	b.n	8008056 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	891b      	ldrh	r3, [r3, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <find_volume+0x3c2>
 800801e:	230d      	movs	r3, #13
 8008020:	e097      	b.n	8008152 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008028:	441a      	add	r2, r3
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800802e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008032:	2b02      	cmp	r3, #2
 8008034:	d103      	bne.n	800803e <find_volume+0x3de>
 8008036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	e00a      	b.n	8008054 <find_volume+0x3f4>
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	69da      	ldr	r2, [r3, #28]
 8008042:	4613      	mov	r3, r2
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	4413      	add	r3, r2
 8008048:	085a      	lsrs	r2, r3, #1
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008054:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	6a1a      	ldr	r2, [r3, #32]
 800805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805c:	899b      	ldrh	r3, [r3, #12]
 800805e:	4619      	mov	r1, r3
 8008060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008062:	440b      	add	r3, r1
 8008064:	3b01      	subs	r3, #1
 8008066:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008068:	8989      	ldrh	r1, [r1, #12]
 800806a:	fbb3 f3f1 	udiv	r3, r3, r1
 800806e:	429a      	cmp	r2, r3
 8008070:	d201      	bcs.n	8008076 <find_volume+0x416>
 8008072:	230d      	movs	r3, #13
 8008074:	e06d      	b.n	8008152 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	f04f 32ff 	mov.w	r2, #4294967295
 800807c:	619a      	str	r2, [r3, #24]
 800807e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008080:	699a      	ldr	r2, [r3, #24]
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	2280      	movs	r2, #128	; 0x80
 800808a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800808c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008090:	2b03      	cmp	r3, #3
 8008092:	d149      	bne.n	8008128 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	3338      	adds	r3, #56	; 0x38
 8008098:	3330      	adds	r3, #48	; 0x30
 800809a:	4618      	mov	r0, r3
 800809c:	f7fd ff60 	bl	8005f60 <ld_word>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d140      	bne.n	8008128 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80080a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080a8:	3301      	adds	r3, #1
 80080aa:	4619      	mov	r1, r3
 80080ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080ae:	f7fe fa07 	bl	80064c0 <move_window>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d137      	bne.n	8008128 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	2200      	movs	r2, #0
 80080bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	3338      	adds	r3, #56	; 0x38
 80080c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fd ff4a 	bl	8005f60 <ld_word>
 80080cc:	4603      	mov	r3, r0
 80080ce:	461a      	mov	r2, r3
 80080d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d127      	bne.n	8008128 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	3338      	adds	r3, #56	; 0x38
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fd ff57 	bl	8005f90 <ld_dword>
 80080e2:	4603      	mov	r3, r0
 80080e4:	4a1d      	ldr	r2, [pc, #116]	; (800815c <find_volume+0x4fc>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d11e      	bne.n	8008128 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	3338      	adds	r3, #56	; 0x38
 80080ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fd ff4c 	bl	8005f90 <ld_dword>
 80080f8:	4603      	mov	r3, r0
 80080fa:	4a19      	ldr	r2, [pc, #100]	; (8008160 <find_volume+0x500>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d113      	bne.n	8008128 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	3338      	adds	r3, #56	; 0x38
 8008104:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008108:	4618      	mov	r0, r3
 800810a:	f7fd ff41 	bl	8005f90 <ld_dword>
 800810e:	4602      	mov	r2, r0
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	3338      	adds	r3, #56	; 0x38
 8008118:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800811c:	4618      	mov	r0, r3
 800811e:	f7fd ff37 	bl	8005f90 <ld_dword>
 8008122:	4602      	mov	r2, r0
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800812e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008130:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <find_volume+0x504>)
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	3301      	adds	r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	4b0a      	ldr	r3, [pc, #40]	; (8008164 <find_volume+0x504>)
 800813a:	801a      	strh	r2, [r3, #0]
 800813c:	4b09      	ldr	r3, [pc, #36]	; (8008164 <find_volume+0x504>)
 800813e:	881a      	ldrh	r2, [r3, #0]
 8008140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008142:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	4a08      	ldr	r2, [pc, #32]	; (8008168 <find_volume+0x508>)
 8008148:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800814a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800814c:	f7fe f950 	bl	80063f0 <clear_lock>
#endif
	return FR_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3758      	adds	r7, #88	; 0x58
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	41615252 	.word	0x41615252
 8008160:	61417272 	.word	0x61417272
 8008164:	200026e4 	.word	0x200026e4
 8008168:	20002708 	.word	0x20002708

0800816c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008176:	2309      	movs	r3, #9
 8008178:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01c      	beq.n	80081ba <validate+0x4e>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d018      	beq.n	80081ba <validate+0x4e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d013      	beq.n	80081ba <validate+0x4e>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	889a      	ldrh	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	88db      	ldrh	r3, [r3, #6]
 800819c:	429a      	cmp	r2, r3
 800819e:	d10c      	bne.n	80081ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	785b      	ldrb	r3, [r3, #1]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fd fe3c 	bl	8005e24 <disk_status>
 80081ac:	4603      	mov	r3, r0
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <validate+0x4e>
			res = FR_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d102      	bne.n	80081c6 <validate+0x5a>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	e000      	b.n	80081c8 <validate+0x5c>
 80081c6:	2300      	movs	r3, #0
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	6013      	str	r3, [r2, #0]
	return res;
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	4613      	mov	r3, r2
 80081e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80081ea:	f107 0310 	add.w	r3, r7, #16
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff fc9c 	bl	8007b2c <get_ldnumber>
 80081f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	da01      	bge.n	8008200 <f_mount+0x28>
 80081fc:	230b      	movs	r3, #11
 80081fe:	e02b      	b.n	8008258 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008200:	4a17      	ldr	r2, [pc, #92]	; (8008260 <f_mount+0x88>)
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008208:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008210:	69b8      	ldr	r0, [r7, #24]
 8008212:	f7fe f8ed 	bl	80063f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2200      	movs	r2, #0
 800821a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	490d      	ldr	r1, [pc, #52]	; (8008260 <f_mount+0x88>)
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <f_mount+0x66>
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d001      	beq.n	8008242 <f_mount+0x6a>
 800823e:	2300      	movs	r3, #0
 8008240:	e00a      	b.n	8008258 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008242:	f107 010c 	add.w	r1, r7, #12
 8008246:	f107 0308 	add.w	r3, r7, #8
 800824a:	2200      	movs	r2, #0
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff fd07 	bl	8007c60 <find_volume>
 8008252:	4603      	mov	r3, r0
 8008254:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008256:	7dfb      	ldrb	r3, [r7, #23]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3720      	adds	r7, #32
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	200026e0 	.word	0x200026e0

08008264 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b09a      	sub	sp, #104	; 0x68
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4613      	mov	r3, r2
 8008270:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <f_open+0x18>
 8008278:	2309      	movs	r3, #9
 800827a:	e1bb      	b.n	80085f4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008282:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008284:	79fa      	ldrb	r2, [r7, #7]
 8008286:	f107 0114 	add.w	r1, r7, #20
 800828a:	f107 0308 	add.w	r3, r7, #8
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff fce6 	bl	8007c60 <find_volume>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800829a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f040 819f 	bne.w	80085e2 <f_open+0x37e>
		dj.obj.fs = fs;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	f107 0318 	add.w	r3, r7, #24
 80082ae:	4611      	mov	r1, r2
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff fbc5 	bl	8007a40 <follow_path>
 80082b6:	4603      	mov	r3, r0
 80082b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80082bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d11a      	bne.n	80082fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80082c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80082c8:	b25b      	sxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	da03      	bge.n	80082d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80082ce:	2306      	movs	r3, #6
 80082d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80082d4:	e011      	b.n	80082fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	f023 0301 	bic.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bf14      	ite	ne
 80082e0:	2301      	movne	r3, #1
 80082e2:	2300      	moveq	r3, #0
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	461a      	mov	r2, r3
 80082e8:	f107 0318 	add.w	r3, r7, #24
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fd ff36 	bl	8006160 <chk_lock>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	f003 031c 	and.w	r3, r3, #28
 8008300:	2b00      	cmp	r3, #0
 8008302:	d07f      	beq.n	8008404 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008304:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008308:	2b00      	cmp	r3, #0
 800830a:	d017      	beq.n	800833c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800830c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008310:	2b04      	cmp	r3, #4
 8008312:	d10e      	bne.n	8008332 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008314:	f7fd ff80 	bl	8006218 <enq_lock>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d006      	beq.n	800832c <f_open+0xc8>
 800831e:	f107 0318 	add.w	r3, r7, #24
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff f8dc 	bl	80074e0 <dir_register>
 8008328:	4603      	mov	r3, r0
 800832a:	e000      	b.n	800832e <f_open+0xca>
 800832c:	2312      	movs	r3, #18
 800832e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	f043 0308 	orr.w	r3, r3, #8
 8008338:	71fb      	strb	r3, [r7, #7]
 800833a:	e010      	b.n	800835e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800833c:	7fbb      	ldrb	r3, [r7, #30]
 800833e:	f003 0311 	and.w	r3, r3, #17
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <f_open+0xea>
					res = FR_DENIED;
 8008346:	2307      	movs	r3, #7
 8008348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800834c:	e007      	b.n	800835e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <f_open+0xfa>
 8008358:	2308      	movs	r3, #8
 800835a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800835e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008362:	2b00      	cmp	r3, #0
 8008364:	d168      	bne.n	8008438 <f_open+0x1d4>
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d063      	beq.n	8008438 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008370:	f7fd fcf6 	bl	8005d60 <get_fattime>
 8008374:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	330e      	adds	r3, #14
 800837a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800837c:	4618      	mov	r0, r3
 800837e:	f7fd fe45 	bl	800600c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008384:	3316      	adds	r3, #22
 8008386:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008388:	4618      	mov	r0, r3
 800838a:	f7fd fe3f 	bl	800600c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	330b      	adds	r3, #11
 8008392:	2220      	movs	r2, #32
 8008394:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800839a:	4611      	mov	r1, r2
 800839c:	4618      	mov	r0, r3
 800839e:	f7fe fe17 	bl	8006fd0 <ld_clust>
 80083a2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083a8:	2200      	movs	r2, #0
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fe2f 	bl	800700e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	331c      	adds	r3, #28
 80083b4:	2100      	movs	r1, #0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fd fe28 	bl	800600c <st_dword>
					fs->wflag = 1;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2201      	movs	r2, #1
 80083c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80083c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d037      	beq.n	8008438 <f_open+0x1d4>
						dw = fs->winsect;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083cc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80083ce:	f107 0318 	add.w	r3, r7, #24
 80083d2:	2200      	movs	r2, #0
 80083d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fb1f 	bl	8006a1a <remove_chain>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80083e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d126      	bne.n	8008438 <f_open+0x1d4>
							res = move_window(fs, dw);
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fe f866 	bl	80064c0 <move_window>
 80083f4:	4603      	mov	r3, r0
 80083f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083fe:	3a01      	subs	r2, #1
 8008400:	615a      	str	r2, [r3, #20]
 8008402:	e019      	b.n	8008438 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008408:	2b00      	cmp	r3, #0
 800840a:	d115      	bne.n	8008438 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800840c:	7fbb      	ldrb	r3, [r7, #30]
 800840e:	f003 0310 	and.w	r3, r3, #16
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008416:	2304      	movs	r3, #4
 8008418:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800841c:	e00c      	b.n	8008438 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	f003 0302 	and.w	r3, r3, #2
 8008424:	2b00      	cmp	r3, #0
 8008426:	d007      	beq.n	8008438 <f_open+0x1d4>
 8008428:	7fbb      	ldrb	r3, [r7, #30]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <f_open+0x1d4>
						res = FR_DENIED;
 8008432:	2307      	movs	r3, #7
 8008434:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008438:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800843c:	2b00      	cmp	r3, #0
 800843e:	d128      	bne.n	8008492 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	f003 0308 	and.w	r3, r3, #8
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008450:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800845a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	f023 0301 	bic.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	bf14      	ite	ne
 800846a:	2301      	movne	r3, #1
 800846c:	2300      	moveq	r3, #0
 800846e:	b2db      	uxtb	r3, r3
 8008470:	461a      	mov	r2, r3
 8008472:	f107 0318 	add.w	r3, r7, #24
 8008476:	4611      	mov	r1, r2
 8008478:	4618      	mov	r0, r3
 800847a:	f7fd feef 	bl	800625c <inc_lock>
 800847e:	4602      	mov	r2, r0
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d102      	bne.n	8008492 <f_open+0x22e>
 800848c:	2302      	movs	r3, #2
 800848e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008492:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008496:	2b00      	cmp	r3, #0
 8008498:	f040 80a3 	bne.w	80085e2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084a0:	4611      	mov	r1, r2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fd94 	bl	8006fd0 <ld_clust>
 80084a8:	4602      	mov	r2, r0
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	331c      	adds	r3, #28
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fd fd6c 	bl	8005f90 <ld_dword>
 80084b8:	4602      	mov	r2, r0
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	88da      	ldrh	r2, [r3, #6]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	79fa      	ldrb	r2, [r7, #7]
 80084d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3330      	adds	r3, #48	; 0x30
 80084ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80084f2:	2100      	movs	r1, #0
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fd fdd6 	bl	80060a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b00      	cmp	r3, #0
 8008502:	d06e      	beq.n	80085e2 <f_open+0x37e>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d06a      	beq.n	80085e2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	68da      	ldr	r2, [r3, #12]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	895b      	ldrh	r3, [r3, #10]
 8008518:	461a      	mov	r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	899b      	ldrh	r3, [r3, #12]
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008530:	e016      	b.n	8008560 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe f87f 	bl	800663a <get_fat>
 800853c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800853e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008540:	2b01      	cmp	r3, #1
 8008542:	d802      	bhi.n	800854a <f_open+0x2e6>
 8008544:	2302      	movs	r3, #2
 8008546:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800854a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d102      	bne.n	8008558 <f_open+0x2f4>
 8008552:	2301      	movs	r3, #1
 8008554:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008558:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800855a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008560:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008564:	2b00      	cmp	r3, #0
 8008566:	d103      	bne.n	8008570 <f_open+0x30c>
 8008568:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800856a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800856c:	429a      	cmp	r2, r3
 800856e:	d8e0      	bhi.n	8008532 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008574:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008576:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800857a:	2b00      	cmp	r3, #0
 800857c:	d131      	bne.n	80085e2 <f_open+0x37e>
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	899b      	ldrh	r3, [r3, #12]
 8008582:	461a      	mov	r2, r3
 8008584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008586:	fbb3 f1f2 	udiv	r1, r3, r2
 800858a:	fb01 f202 	mul.w	r2, r1, r2
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d026      	beq.n	80085e2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008598:	4618      	mov	r0, r3
 800859a:	f7fe f82f 	bl	80065fc <clust2sect>
 800859e:	64f8      	str	r0, [r7, #76]	; 0x4c
 80085a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <f_open+0x34a>
						res = FR_INT_ERR;
 80085a6:	2302      	movs	r3, #2
 80085a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80085ac:	e019      	b.n	80085e2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	899b      	ldrh	r3, [r3, #12]
 80085b2:	461a      	mov	r2, r3
 80085b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80085ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085bc:	441a      	add	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	7858      	ldrb	r0, [r3, #1]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a1a      	ldr	r2, [r3, #32]
 80085d0:	2301      	movs	r3, #1
 80085d2:	f7fd fc67 	bl	8005ea4 <disk_read>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <f_open+0x37e>
 80085dc:	2301      	movs	r3, #1
 80085de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80085e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <f_open+0x38c>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80085f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3768      	adds	r7, #104	; 0x68
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08e      	sub	sp, #56	; 0x38
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f107 0214 	add.w	r2, r7, #20
 800861a:	4611      	mov	r1, r2
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff fda5 	bl	800816c <validate>
 8008622:	4603      	mov	r3, r0
 8008624:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008628:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800862c:	2b00      	cmp	r3, #0
 800862e:	d107      	bne.n	8008640 <f_read+0x44>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	7d5b      	ldrb	r3, [r3, #21]
 8008634:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008638:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <f_read+0x4a>
 8008640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008644:	e135      	b.n	80088b2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	7d1b      	ldrb	r3, [r3, #20]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <f_read+0x5a>
 8008652:	2307      	movs	r3, #7
 8008654:	e12d      	b.n	80088b2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	68da      	ldr	r2, [r3, #12]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	429a      	cmp	r2, r3
 8008668:	f240 811e 	bls.w	80088a8 <f_read+0x2ac>
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008670:	e11a      	b.n	80088a8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	8992      	ldrh	r2, [r2, #12]
 800867a:	fbb3 f1f2 	udiv	r1, r3, r2
 800867e:	fb01 f202 	mul.w	r2, r1, r2
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	2b00      	cmp	r3, #0
 8008686:	f040 80d5 	bne.w	8008834 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	8992      	ldrh	r2, [r2, #12]
 8008692:	fbb3 f3f2 	udiv	r3, r3, r2
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	8952      	ldrh	r2, [r2, #10]
 800869a:	3a01      	subs	r2, #1
 800869c:	4013      	ands	r3, r2
 800869e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d12f      	bne.n	8008706 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d103      	bne.n	80086b6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	633b      	str	r3, [r7, #48]	; 0x30
 80086b4:	e013      	b.n	80086de <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d007      	beq.n	80086ce <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	4619      	mov	r1, r3
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f7fe faa5 	bl	8006c14 <clmt_clust>
 80086ca:	6338      	str	r0, [r7, #48]	; 0x30
 80086cc:	e007      	b.n	80086de <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	4619      	mov	r1, r3
 80086d6:	4610      	mov	r0, r2
 80086d8:	f7fd ffaf 	bl	800663a <get_fat>
 80086dc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d804      	bhi.n	80086ee <f_read+0xf2>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2202      	movs	r2, #2
 80086e8:	755a      	strb	r2, [r3, #21]
 80086ea:	2302      	movs	r3, #2
 80086ec:	e0e1      	b.n	80088b2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f4:	d104      	bne.n	8008700 <f_read+0x104>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	755a      	strb	r2, [r3, #21]
 80086fc:	2301      	movs	r3, #1
 80086fe:	e0d8      	b.n	80088b2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008704:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	4619      	mov	r1, r3
 800870e:	4610      	mov	r0, r2
 8008710:	f7fd ff74 	bl	80065fc <clust2sect>
 8008714:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d104      	bne.n	8008726 <f_read+0x12a>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2202      	movs	r2, #2
 8008720:	755a      	strb	r2, [r3, #21]
 8008722:	2302      	movs	r3, #2
 8008724:	e0c5      	b.n	80088b2 <f_read+0x2b6>
			sect += csect;
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	4413      	add	r3, r2
 800872c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	899b      	ldrh	r3, [r3, #12]
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	fbb3 f3f2 	udiv	r3, r3, r2
 800873a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	2b00      	cmp	r3, #0
 8008740:	d041      	beq.n	80087c6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008742:	69fa      	ldr	r2, [r7, #28]
 8008744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008746:	4413      	add	r3, r2
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	8952      	ldrh	r2, [r2, #10]
 800874c:	4293      	cmp	r3, r2
 800874e:	d905      	bls.n	800875c <f_read+0x160>
					cc = fs->csize - csect;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	895b      	ldrh	r3, [r3, #10]
 8008754:	461a      	mov	r2, r3
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	7858      	ldrb	r0, [r3, #1]
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008766:	f7fd fb9d 	bl	8005ea4 <disk_read>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <f_read+0x17e>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2201      	movs	r2, #1
 8008774:	755a      	strb	r2, [r3, #21]
 8008776:	2301      	movs	r3, #1
 8008778:	e09b      	b.n	80088b2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	7d1b      	ldrb	r3, [r3, #20]
 800877e:	b25b      	sxtb	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	da18      	bge.n	80087b6 <f_read+0x1ba>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a1a      	ldr	r2, [r3, #32]
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800878e:	429a      	cmp	r2, r3
 8008790:	d911      	bls.n	80087b6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a1a      	ldr	r2, [r3, #32]
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	8992      	ldrh	r2, [r2, #12]
 800879e:	fb02 f303 	mul.w	r3, r2, r3
 80087a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a4:	18d0      	adds	r0, r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	899b      	ldrh	r3, [r3, #12]
 80087b0:	461a      	mov	r2, r3
 80087b2:	f7fd fc57 	bl	8006064 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	899b      	ldrh	r3, [r3, #12]
 80087ba:	461a      	mov	r2, r3
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	fb02 f303 	mul.w	r3, r2, r3
 80087c2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80087c4:	e05c      	b.n	8008880 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d02e      	beq.n	800882e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	7d1b      	ldrb	r3, [r3, #20]
 80087d4:	b25b      	sxtb	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	da18      	bge.n	800880c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	7858      	ldrb	r0, [r3, #1]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a1a      	ldr	r2, [r3, #32]
 80087e8:	2301      	movs	r3, #1
 80087ea:	f7fd fb7b 	bl	8005ee4 <disk_write>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d004      	beq.n	80087fe <f_read+0x202>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	755a      	strb	r2, [r3, #21]
 80087fa:	2301      	movs	r3, #1
 80087fc:	e059      	b.n	80088b2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	7d1b      	ldrb	r3, [r3, #20]
 8008802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008806:	b2da      	uxtb	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	7858      	ldrb	r0, [r3, #1]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008816:	2301      	movs	r3, #1
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	f7fd fb43 	bl	8005ea4 <disk_read>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <f_read+0x232>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	755a      	strb	r2, [r3, #21]
 800882a:	2301      	movs	r3, #1
 800882c:	e041      	b.n	80088b2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	899b      	ldrh	r3, [r3, #12]
 8008838:	4618      	mov	r0, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	8992      	ldrh	r2, [r2, #12]
 8008842:	fbb3 f1f2 	udiv	r1, r3, r2
 8008846:	fb01 f202 	mul.w	r2, r1, r2
 800884a:	1a9b      	subs	r3, r3, r2
 800884c:	1ac3      	subs	r3, r0, r3
 800884e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	429a      	cmp	r2, r3
 8008856:	d901      	bls.n	800885c <f_read+0x260>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	8992      	ldrh	r2, [r2, #12]
 800886a:	fbb3 f0f2 	udiv	r0, r3, r2
 800886e:	fb00 f202 	mul.w	r2, r0, r2
 8008872:	1a9b      	subs	r3, r3, r2
 8008874:	440b      	add	r3, r1
 8008876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008878:	4619      	mov	r1, r3
 800887a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800887c:	f7fd fbf2 	bl	8006064 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008884:	4413      	add	r3, r2
 8008886:	627b      	str	r3, [r7, #36]	; 0x24
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	699a      	ldr	r2, [r3, #24]
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888e:	441a      	add	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	619a      	str	r2, [r3, #24]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	441a      	add	r2, r3
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f47f aee1 	bne.w	8008672 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3738      	adds	r7, #56	; 0x38
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b08c      	sub	sp, #48	; 0x30
 80088be:	af00      	add	r7, sp, #0
 80088c0:	60f8      	str	r0, [r7, #12]
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	607a      	str	r2, [r7, #4]
 80088c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2200      	movs	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f107 0210 	add.w	r2, r7, #16
 80088d8:	4611      	mov	r1, r2
 80088da:	4618      	mov	r0, r3
 80088dc:	f7ff fc46 	bl	800816c <validate>
 80088e0:	4603      	mov	r3, r0
 80088e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80088e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d107      	bne.n	80088fe <f_write+0x44>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	7d5b      	ldrb	r3, [r3, #21]
 80088f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80088f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <f_write+0x4a>
 80088fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008902:	e16a      	b.n	8008bda <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	7d1b      	ldrb	r3, [r3, #20]
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <f_write+0x5a>
 8008910:	2307      	movs	r3, #7
 8008912:	e162      	b.n	8008bda <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	699a      	ldr	r2, [r3, #24]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	441a      	add	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	429a      	cmp	r2, r3
 8008922:	f080 814c 	bcs.w	8008bbe <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	43db      	mvns	r3, r3
 800892c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800892e:	e146      	b.n	8008bbe <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	8992      	ldrh	r2, [r2, #12]
 8008938:	fbb3 f1f2 	udiv	r1, r3, r2
 800893c:	fb01 f202 	mul.w	r2, r1, r2
 8008940:	1a9b      	subs	r3, r3, r2
 8008942:	2b00      	cmp	r3, #0
 8008944:	f040 80f1 	bne.w	8008b2a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	8992      	ldrh	r2, [r2, #12]
 8008950:	fbb3 f3f2 	udiv	r3, r3, r2
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	8952      	ldrh	r2, [r2, #10]
 8008958:	3a01      	subs	r2, #1
 800895a:	4013      	ands	r3, r2
 800895c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d143      	bne.n	80089ec <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10c      	bne.n	8008986 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	2b00      	cmp	r3, #0
 8008976:	d11a      	bne.n	80089ae <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2100      	movs	r1, #0
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe f8b1 	bl	8006ae4 <create_chain>
 8008982:	62b8      	str	r0, [r7, #40]	; 0x28
 8008984:	e013      	b.n	80089ae <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898a:	2b00      	cmp	r3, #0
 800898c:	d007      	beq.n	800899e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	4619      	mov	r1, r3
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f7fe f93d 	bl	8006c14 <clmt_clust>
 800899a:	62b8      	str	r0, [r7, #40]	; 0x28
 800899c:	e007      	b.n	80089ae <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	4619      	mov	r1, r3
 80089a6:	4610      	mov	r0, r2
 80089a8:	f7fe f89c 	bl	8006ae4 <create_chain>
 80089ac:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 8109 	beq.w	8008bc8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80089b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d104      	bne.n	80089c6 <f_write+0x10c>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2202      	movs	r2, #2
 80089c0:	755a      	strb	r2, [r3, #21]
 80089c2:	2302      	movs	r3, #2
 80089c4:	e109      	b.n	8008bda <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089cc:	d104      	bne.n	80089d8 <f_write+0x11e>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2201      	movs	r2, #1
 80089d2:	755a      	strb	r2, [r3, #21]
 80089d4:	2301      	movs	r3, #1
 80089d6:	e100      	b.n	8008bda <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089dc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d102      	bne.n	80089ec <f_write+0x132>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	7d1b      	ldrb	r3, [r3, #20]
 80089f0:	b25b      	sxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	da18      	bge.n	8008a28 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	7858      	ldrb	r0, [r3, #1]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6a1a      	ldr	r2, [r3, #32]
 8008a04:	2301      	movs	r3, #1
 8008a06:	f7fd fa6d 	bl	8005ee4 <disk_write>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d004      	beq.n	8008a1a <f_write+0x160>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2201      	movs	r2, #1
 8008a14:	755a      	strb	r2, [r3, #21]
 8008a16:	2301      	movs	r3, #1
 8008a18:	e0df      	b.n	8008bda <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	7d1b      	ldrb	r3, [r3, #20]
 8008a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f7fd fde3 	bl	80065fc <clust2sect>
 8008a36:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d104      	bne.n	8008a48 <f_write+0x18e>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2202      	movs	r2, #2
 8008a42:	755a      	strb	r2, [r3, #21]
 8008a44:	2302      	movs	r3, #2
 8008a46:	e0c8      	b.n	8008bda <f_write+0x320>
			sect += csect;
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	899b      	ldrh	r3, [r3, #12]
 8008a54:	461a      	mov	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a5c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d043      	beq.n	8008aec <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	4413      	add	r3, r2
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	8952      	ldrh	r2, [r2, #10]
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d905      	bls.n	8008a7e <f_write+0x1c4>
					cc = fs->csize - csect;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	895b      	ldrh	r3, [r3, #10]
 8008a76:	461a      	mov	r2, r3
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	7858      	ldrb	r0, [r3, #1]
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	69f9      	ldr	r1, [r7, #28]
 8008a88:	f7fd fa2c 	bl	8005ee4 <disk_write>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d004      	beq.n	8008a9c <f_write+0x1e2>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	755a      	strb	r2, [r3, #21]
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e09e      	b.n	8008bda <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a1a      	ldr	r2, [r3, #32]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	6a3a      	ldr	r2, [r7, #32]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d918      	bls.n	8008adc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6a1a      	ldr	r2, [r3, #32]
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	8992      	ldrh	r2, [r2, #12]
 8008abc:	fb02 f303 	mul.w	r3, r2, r3
 8008ac0:	69fa      	ldr	r2, [r7, #28]
 8008ac2:	18d1      	adds	r1, r2, r3
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	899b      	ldrh	r3, [r3, #12]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	f7fd facb 	bl	8006064 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	7d1b      	ldrb	r3, [r3, #20]
 8008ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	899b      	ldrh	r3, [r3, #12]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	fb02 f303 	mul.w	r3, r2, r3
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008aea:	e04b      	b.n	8008b84 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d016      	beq.n	8008b24 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	699a      	ldr	r2, [r3, #24]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d210      	bcs.n	8008b24 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	7858      	ldrb	r0, [r3, #1]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	f7fd f9c8 	bl	8005ea4 <disk_read>
 8008b14:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	755a      	strb	r2, [r3, #21]
 8008b20:	2301      	movs	r3, #1
 8008b22:	e05a      	b.n	8008bda <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	899b      	ldrh	r3, [r3, #12]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	8992      	ldrh	r2, [r2, #12]
 8008b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b3c:	fb01 f202 	mul.w	r2, r1, r2
 8008b40:	1a9b      	subs	r3, r3, r2
 8008b42:	1ac3      	subs	r3, r0, r3
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d901      	bls.n	8008b52 <f_write+0x298>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	8992      	ldrh	r2, [r2, #12]
 8008b60:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b64:	fb00 f202 	mul.w	r2, r0, r2
 8008b68:	1a9b      	subs	r3, r3, r2
 8008b6a:	440b      	add	r3, r1
 8008b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6e:	69f9      	ldr	r1, [r7, #28]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fd fa77 	bl	8006064 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	7d1b      	ldrb	r3, [r3, #20]
 8008b7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b84:	69fa      	ldr	r2, [r7, #28]
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	4413      	add	r3, r2
 8008b8a:	61fb      	str	r3, [r7, #28]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	699a      	ldr	r2, [r3, #24]
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	441a      	add	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	619a      	str	r2, [r3, #24]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	68da      	ldr	r2, [r3, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	bf38      	it	cc
 8008ba4:	461a      	movcc	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	60da      	str	r2, [r3, #12]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	441a      	add	r2, r3
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f47f aeb5 	bne.w	8008930 <f_write+0x76>
 8008bc6:	e000      	b.n	8008bca <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008bc8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	7d1b      	ldrb	r3, [r3, #20]
 8008bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3730      	adds	r7, #48	; 0x30
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b086      	sub	sp, #24
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f107 0208 	add.w	r2, r7, #8
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff faba 	bl	800816c <validate>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d168      	bne.n	8008cd4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	7d1b      	ldrb	r3, [r3, #20]
 8008c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d062      	beq.n	8008cd4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	7d1b      	ldrb	r3, [r3, #20]
 8008c12:	b25b      	sxtb	r3, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	da15      	bge.n	8008c44 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	7858      	ldrb	r0, [r3, #1]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1a      	ldr	r2, [r3, #32]
 8008c26:	2301      	movs	r3, #1
 8008c28:	f7fd f95c 	bl	8005ee4 <disk_write>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <f_sync+0x54>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e04f      	b.n	8008cd6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	7d1b      	ldrb	r3, [r3, #20]
 8008c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008c44:	f7fd f88c 	bl	8005d60 <get_fattime>
 8008c48:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f7fd fc34 	bl	80064c0 <move_window>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d138      	bne.n	8008cd4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c66:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	330b      	adds	r3, #11
 8008c6c:	781a      	ldrb	r2, [r3, #0]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	330b      	adds	r3, #11
 8008c72:	f042 0220 	orr.w	r2, r2, #32
 8008c76:	b2d2      	uxtb	r2, r2
 8008c78:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	461a      	mov	r2, r3
 8008c84:	68f9      	ldr	r1, [r7, #12]
 8008c86:	f7fe f9c2 	bl	800700e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f103 021c 	add.w	r2, r3, #28
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	4619      	mov	r1, r3
 8008c96:	4610      	mov	r0, r2
 8008c98:	f7fd f9b8 	bl	800600c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3316      	adds	r3, #22
 8008ca0:	6939      	ldr	r1, [r7, #16]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fd f9b2 	bl	800600c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	3312      	adds	r3, #18
 8008cac:	2100      	movs	r1, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fd f991 	bl	8005fd6 <st_word>
					fs->wflag = 1;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fd fc2d 	bl	800651c <sync_fs>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	7d1b      	ldrb	r3, [r3, #20]
 8008cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff ff7b 	bl	8008be2 <f_sync>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d118      	bne.n	8008d28 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f107 0208 	add.w	r2, r7, #8
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7ff fa34 	bl	800816c <validate>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10c      	bne.n	8008d28 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fd fb30 	bl	8006378 <dec_lock>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d102      	bne.n	8008d28 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b092      	sub	sp, #72	; 0x48
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008d3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008d42:	f107 030c 	add.w	r3, r7, #12
 8008d46:	2200      	movs	r2, #0
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fe ff89 	bl	8007c60 <find_volume>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008d54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f040 8099 	bne.w	8008e90 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	699a      	ldr	r2, [r3, #24]
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	3b02      	subs	r3, #2
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d804      	bhi.n	8008d7c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	699a      	ldr	r2, [r3, #24]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	e089      	b.n	8008e90 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d128      	bne.n	8008dda <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008d90:	f107 0314 	add.w	r3, r7, #20
 8008d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fd fc4f 	bl	800663a <get_fat>
 8008d9c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da4:	d103      	bne.n	8008dae <f_getfree+0x7c>
 8008da6:	2301      	movs	r3, #1
 8008da8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008dac:	e063      	b.n	8008e76 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d103      	bne.n	8008dbc <f_getfree+0x8a>
 8008db4:	2302      	movs	r3, #2
 8008db6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008dba:	e05c      	b.n	8008e76 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d102      	bne.n	8008dc8 <f_getfree+0x96>
 8008dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dca:	3301      	adds	r3, #1
 8008dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d3db      	bcc.n	8008d90 <f_getfree+0x5e>
 8008dd8:	e04d      	b.n	8008e76 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dea:	2300      	movs	r3, #0
 8008dec:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d113      	bne.n	8008e1c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	63ba      	str	r2, [r7, #56]	; 0x38
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f7fd fb5f 	bl	80064c0 <move_window>
 8008e02:	4603      	mov	r3, r0
 8008e04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008e08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d131      	bne.n	8008e74 <f_getfree+0x142>
							p = fs->win;
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	3338      	adds	r3, #56	; 0x38
 8008e14:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e18:	899b      	ldrh	r3, [r3, #12]
 8008e1a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d10f      	bne.n	8008e44 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e26:	f7fd f89b 	bl	8005f60 <ld_word>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <f_getfree+0x104>
 8008e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e32:	3301      	adds	r3, #1
 8008e34:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	3302      	adds	r3, #2
 8008e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8008e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e3e:	3b02      	subs	r3, #2
 8008e40:	637b      	str	r3, [r7, #52]	; 0x34
 8008e42:	e010      	b.n	8008e66 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e46:	f7fd f8a3 	bl	8005f90 <ld_dword>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d102      	bne.n	8008e5a <f_getfree+0x128>
 8008e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e56:	3301      	adds	r3, #1
 8008e58:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e62:	3b04      	subs	r3, #4
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1bd      	bne.n	8008dee <f_getfree+0xbc>
 8008e72:	e000      	b.n	8008e76 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008e74:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e7a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e80:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	791a      	ldrb	r2, [r3, #4]
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	f042 0201 	orr.w	r2, r2, #1
 8008e8c:	b2d2      	uxtb	r2, r2
 8008e8e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008e90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3748      	adds	r7, #72	; 0x48
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008eb0:	e01b      	b.n	8008eea <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008eb2:	f107 0310 	add.w	r3, r7, #16
 8008eb6:	f107 0114 	add.w	r1, r7, #20
 8008eba:	2201      	movs	r2, #1
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff fb9d 	bl	80085fc <f_read>
		if (rc != 1) break;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d116      	bne.n	8008ef6 <f_gets+0x5a>
		c = s[0];
 8008ec8:	7d3b      	ldrb	r3, [r7, #20]
 8008eca:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	2b0d      	cmp	r3, #13
 8008ed0:	d100      	bne.n	8008ed4 <f_gets+0x38>
 8008ed2:	e00a      	b.n	8008eea <f_gets+0x4e>
		*p++ = c;
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	61ba      	str	r2, [r7, #24]
 8008eda:	7dfa      	ldrb	r2, [r7, #23]
 8008edc:	701a      	strb	r2, [r3, #0]
		n++;
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	2b0a      	cmp	r3, #10
 8008ee8:	d007      	beq.n	8008efa <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	dbde      	blt.n	8008eb2 <f_gets+0x16>
 8008ef4:	e002      	b.n	8008efc <f_gets+0x60>
		if (rc != 1) break;
 8008ef6:	bf00      	nop
 8008ef8:	e000      	b.n	8008efc <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008efa:	bf00      	nop
	}
	*p = 0;
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	2200      	movs	r2, #0
 8008f00:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <f_gets+0x70>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	e000      	b.n	8008f0e <f_gets+0x72>
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3720      	adds	r7, #32
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008f22:	78fb      	ldrb	r3, [r7, #3]
 8008f24:	2b0a      	cmp	r3, #10
 8008f26:	d103      	bne.n	8008f30 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008f28:	210d      	movs	r1, #13
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff fff3 	bl	8008f16 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	db25      	blt.n	8008f88 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	60fa      	str	r2, [r7, #12]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	4413      	add	r3, r2
 8008f46:	78fa      	ldrb	r2, [r7, #3]
 8008f48:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b3c      	cmp	r3, #60	; 0x3c
 8008f4e:	dd12      	ble.n	8008f76 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f103 010c 	add.w	r1, r3, #12
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	f107 0308 	add.w	r3, r7, #8
 8008f60:	f7ff fcab 	bl	80088ba <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d101      	bne.n	8008f70 <putc_bfd+0x5a>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	e001      	b.n	8008f74 <putc_bfd+0x5e>
 8008f70:	f04f 33ff 	mov.w	r3, #4294967295
 8008f74:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	1c5a      	adds	r2, r3, #1
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	609a      	str	r2, [r3, #8]
 8008f86:	e000      	b.n	8008f8a <putc_bfd+0x74>
	if (i < 0) return;
 8008f88:	bf00      	nop
}
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	db16      	blt.n	8008fce <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6818      	ldr	r0, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f103 010c 	add.w	r1, r3, #12
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f107 030c 	add.w	r3, r7, #12
 8008fb4:	f7ff fc81 	bl	80088ba <f_write>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d107      	bne.n	8008fce <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d102      	bne.n	8008fce <putc_flush+0x3e>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	e001      	b.n	8008fd2 <putc_flush+0x42>
	return EOF;
 8008fce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	605a      	str	r2, [r3, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	609a      	str	r2, [r3, #8]
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b096      	sub	sp, #88	; 0x58
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800900e:	f107 030c 	add.w	r3, r7, #12
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	4618      	mov	r0, r3
 8009016:	f7ff ffe0 	bl	8008fda <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800901a:	e009      	b.n	8009030 <f_puts+0x2c>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	607a      	str	r2, [r7, #4]
 8009022:	781a      	ldrb	r2, [r3, #0]
 8009024:	f107 030c 	add.w	r3, r7, #12
 8009028:	4611      	mov	r1, r2
 800902a:	4618      	mov	r0, r3
 800902c:	f7ff ff73 	bl	8008f16 <putc_bfd>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1f1      	bne.n	800901c <f_puts+0x18>
	return putc_flush(&pb);
 8009038:	f107 030c 	add.w	r3, r7, #12
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff ffa7 	bl	8008f90 <putc_flush>
 8009042:	4603      	mov	r3, r0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3758      	adds	r7, #88	; 0x58
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	4613      	mov	r3, r2
 8009058:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800905a:	2301      	movs	r3, #1
 800905c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009062:	4b1f      	ldr	r3, [pc, #124]	; (80090e0 <FATFS_LinkDriverEx+0x94>)
 8009064:	7a5b      	ldrb	r3, [r3, #9]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	d131      	bne.n	80090d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800906c:	4b1c      	ldr	r3, [pc, #112]	; (80090e0 <FATFS_LinkDriverEx+0x94>)
 800906e:	7a5b      	ldrb	r3, [r3, #9]
 8009070:	b2db      	uxtb	r3, r3
 8009072:	461a      	mov	r2, r3
 8009074:	4b1a      	ldr	r3, [pc, #104]	; (80090e0 <FATFS_LinkDriverEx+0x94>)
 8009076:	2100      	movs	r1, #0
 8009078:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800907a:	4b19      	ldr	r3, [pc, #100]	; (80090e0 <FATFS_LinkDriverEx+0x94>)
 800907c:	7a5b      	ldrb	r3, [r3, #9]
 800907e:	b2db      	uxtb	r3, r3
 8009080:	4a17      	ldr	r2, [pc, #92]	; (80090e0 <FATFS_LinkDriverEx+0x94>)
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800908a:	4b15      	ldr	r3, [pc, #84]	; (80090e0 <FATFS_LinkDriverEx+0x94>)
 800908c:	7a5b      	ldrb	r3, [r3, #9]
 800908e:	b2db      	uxtb	r3, r3
 8009090:	461a      	mov	r2, r3
 8009092:	4b13      	ldr	r3, [pc, #76]	; (80090e0 <FATFS_LinkDriverEx+0x94>)
 8009094:	4413      	add	r3, r2
 8009096:	79fa      	ldrb	r2, [r7, #7]
 8009098:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800909a:	4b11      	ldr	r3, [pc, #68]	; (80090e0 <FATFS_LinkDriverEx+0x94>)
 800909c:	7a5b      	ldrb	r3, [r3, #9]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	b2d1      	uxtb	r1, r2
 80090a4:	4a0e      	ldr	r2, [pc, #56]	; (80090e0 <FATFS_LinkDriverEx+0x94>)
 80090a6:	7251      	strb	r1, [r2, #9]
 80090a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80090aa:	7dbb      	ldrb	r3, [r7, #22]
 80090ac:	3330      	adds	r3, #48	; 0x30
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	3301      	adds	r3, #1
 80090b8:	223a      	movs	r2, #58	; 0x3a
 80090ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	3302      	adds	r3, #2
 80090c0:	222f      	movs	r2, #47	; 0x2f
 80090c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	3303      	adds	r3, #3
 80090c8:	2200      	movs	r2, #0
 80090ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	20002908 	.word	0x20002908

080090e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090ee:	2200      	movs	r2, #0
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7ff ffaa 	bl	800904c <FATFS_LinkDriverEx>
 80090f8:	4603      	mov	r3, r0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	6039      	str	r1, [r7, #0]
 800910e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009110:	88fb      	ldrh	r3, [r7, #6]
 8009112:	2b7f      	cmp	r3, #127	; 0x7f
 8009114:	d802      	bhi.n	800911c <ff_convert+0x18>
		c = chr;
 8009116:	88fb      	ldrh	r3, [r7, #6]
 8009118:	81fb      	strh	r3, [r7, #14]
 800911a:	e025      	b.n	8009168 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00b      	beq.n	800913a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009122:	88fb      	ldrh	r3, [r7, #6]
 8009124:	2bff      	cmp	r3, #255	; 0xff
 8009126:	d805      	bhi.n	8009134 <ff_convert+0x30>
 8009128:	88fb      	ldrh	r3, [r7, #6]
 800912a:	3b80      	subs	r3, #128	; 0x80
 800912c:	4a12      	ldr	r2, [pc, #72]	; (8009178 <ff_convert+0x74>)
 800912e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009132:	e000      	b.n	8009136 <ff_convert+0x32>
 8009134:	2300      	movs	r3, #0
 8009136:	81fb      	strh	r3, [r7, #14]
 8009138:	e016      	b.n	8009168 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800913a:	2300      	movs	r3, #0
 800913c:	81fb      	strh	r3, [r7, #14]
 800913e:	e009      	b.n	8009154 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009140:	89fb      	ldrh	r3, [r7, #14]
 8009142:	4a0d      	ldr	r2, [pc, #52]	; (8009178 <ff_convert+0x74>)
 8009144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009148:	88fa      	ldrh	r2, [r7, #6]
 800914a:	429a      	cmp	r2, r3
 800914c:	d006      	beq.n	800915c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800914e:	89fb      	ldrh	r3, [r7, #14]
 8009150:	3301      	adds	r3, #1
 8009152:	81fb      	strh	r3, [r7, #14]
 8009154:	89fb      	ldrh	r3, [r7, #14]
 8009156:	2b7f      	cmp	r3, #127	; 0x7f
 8009158:	d9f2      	bls.n	8009140 <ff_convert+0x3c>
 800915a:	e000      	b.n	800915e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800915c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800915e:	89fb      	ldrh	r3, [r7, #14]
 8009160:	3380      	adds	r3, #128	; 0x80
 8009162:	b29b      	uxth	r3, r3
 8009164:	b2db      	uxtb	r3, r3
 8009166:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009168:	89fb      	ldrh	r3, [r7, #14]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	0800b678 	.word	0x0800b678

0800917c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009186:	88fb      	ldrh	r3, [r7, #6]
 8009188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800918c:	d201      	bcs.n	8009192 <ff_wtoupper+0x16>
 800918e:	4b3e      	ldr	r3, [pc, #248]	; (8009288 <ff_wtoupper+0x10c>)
 8009190:	e000      	b.n	8009194 <ff_wtoupper+0x18>
 8009192:	4b3e      	ldr	r3, [pc, #248]	; (800928c <ff_wtoupper+0x110>)
 8009194:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	1c9a      	adds	r2, r3, #2
 800919a:	617a      	str	r2, [r7, #20]
 800919c:	881b      	ldrh	r3, [r3, #0]
 800919e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80091a0:	8a7b      	ldrh	r3, [r7, #18]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d068      	beq.n	8009278 <ff_wtoupper+0xfc>
 80091a6:	88fa      	ldrh	r2, [r7, #6]
 80091a8:	8a7b      	ldrh	r3, [r7, #18]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d364      	bcc.n	8009278 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	1c9a      	adds	r2, r3, #2
 80091b2:	617a      	str	r2, [r7, #20]
 80091b4:	881b      	ldrh	r3, [r3, #0]
 80091b6:	823b      	strh	r3, [r7, #16]
 80091b8:	8a3b      	ldrh	r3, [r7, #16]
 80091ba:	0a1b      	lsrs	r3, r3, #8
 80091bc:	81fb      	strh	r3, [r7, #14]
 80091be:	8a3b      	ldrh	r3, [r7, #16]
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80091c4:	88fa      	ldrh	r2, [r7, #6]
 80091c6:	8a79      	ldrh	r1, [r7, #18]
 80091c8:	8a3b      	ldrh	r3, [r7, #16]
 80091ca:	440b      	add	r3, r1
 80091cc:	429a      	cmp	r2, r3
 80091ce:	da49      	bge.n	8009264 <ff_wtoupper+0xe8>
			switch (cmd) {
 80091d0:	89fb      	ldrh	r3, [r7, #14]
 80091d2:	2b08      	cmp	r3, #8
 80091d4:	d84f      	bhi.n	8009276 <ff_wtoupper+0xfa>
 80091d6:	a201      	add	r2, pc, #4	; (adr r2, 80091dc <ff_wtoupper+0x60>)
 80091d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091dc:	08009201 	.word	0x08009201
 80091e0:	08009213 	.word	0x08009213
 80091e4:	08009229 	.word	0x08009229
 80091e8:	08009231 	.word	0x08009231
 80091ec:	08009239 	.word	0x08009239
 80091f0:	08009241 	.word	0x08009241
 80091f4:	08009249 	.word	0x08009249
 80091f8:	08009251 	.word	0x08009251
 80091fc:	08009259 	.word	0x08009259
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009200:	88fa      	ldrh	r2, [r7, #6]
 8009202:	8a7b      	ldrh	r3, [r7, #18]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	4413      	add	r3, r2
 800920c:	881b      	ldrh	r3, [r3, #0]
 800920e:	80fb      	strh	r3, [r7, #6]
 8009210:	e027      	b.n	8009262 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009212:	88fa      	ldrh	r2, [r7, #6]
 8009214:	8a7b      	ldrh	r3, [r7, #18]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	b29b      	uxth	r3, r3
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	b29b      	uxth	r3, r3
 8009220:	88fa      	ldrh	r2, [r7, #6]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	80fb      	strh	r3, [r7, #6]
 8009226:	e01c      	b.n	8009262 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009228:	88fb      	ldrh	r3, [r7, #6]
 800922a:	3b10      	subs	r3, #16
 800922c:	80fb      	strh	r3, [r7, #6]
 800922e:	e018      	b.n	8009262 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009230:	88fb      	ldrh	r3, [r7, #6]
 8009232:	3b20      	subs	r3, #32
 8009234:	80fb      	strh	r3, [r7, #6]
 8009236:	e014      	b.n	8009262 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009238:	88fb      	ldrh	r3, [r7, #6]
 800923a:	3b30      	subs	r3, #48	; 0x30
 800923c:	80fb      	strh	r3, [r7, #6]
 800923e:	e010      	b.n	8009262 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009240:	88fb      	ldrh	r3, [r7, #6]
 8009242:	3b1a      	subs	r3, #26
 8009244:	80fb      	strh	r3, [r7, #6]
 8009246:	e00c      	b.n	8009262 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009248:	88fb      	ldrh	r3, [r7, #6]
 800924a:	3308      	adds	r3, #8
 800924c:	80fb      	strh	r3, [r7, #6]
 800924e:	e008      	b.n	8009262 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009250:	88fb      	ldrh	r3, [r7, #6]
 8009252:	3b50      	subs	r3, #80	; 0x50
 8009254:	80fb      	strh	r3, [r7, #6]
 8009256:	e004      	b.n	8009262 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800925e:	80fb      	strh	r3, [r7, #6]
 8009260:	bf00      	nop
			}
			break;
 8009262:	e008      	b.n	8009276 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009264:	89fb      	ldrh	r3, [r7, #14]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d195      	bne.n	8009196 <ff_wtoupper+0x1a>
 800926a:	8a3b      	ldrh	r3, [r7, #16]
 800926c:	005b      	lsls	r3, r3, #1
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	4413      	add	r3, r2
 8009272:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009274:	e78f      	b.n	8009196 <ff_wtoupper+0x1a>
			break;
 8009276:	bf00      	nop
	}

	return chr;
 8009278:	88fb      	ldrh	r3, [r7, #6]
}
 800927a:	4618      	mov	r0, r3
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	0800b778 	.word	0x0800b778
 800928c:	0800b96c 	.word	0x0800b96c

08009290 <__errno>:
 8009290:	4b01      	ldr	r3, [pc, #4]	; (8009298 <__errno+0x8>)
 8009292:	6818      	ldr	r0, [r3, #0]
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	20000024 	.word	0x20000024

0800929c <__libc_init_array>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	4d0d      	ldr	r5, [pc, #52]	; (80092d4 <__libc_init_array+0x38>)
 80092a0:	4c0d      	ldr	r4, [pc, #52]	; (80092d8 <__libc_init_array+0x3c>)
 80092a2:	1b64      	subs	r4, r4, r5
 80092a4:	10a4      	asrs	r4, r4, #2
 80092a6:	2600      	movs	r6, #0
 80092a8:	42a6      	cmp	r6, r4
 80092aa:	d109      	bne.n	80092c0 <__libc_init_array+0x24>
 80092ac:	4d0b      	ldr	r5, [pc, #44]	; (80092dc <__libc_init_array+0x40>)
 80092ae:	4c0c      	ldr	r4, [pc, #48]	; (80092e0 <__libc_init_array+0x44>)
 80092b0:	f002 f8d0 	bl	800b454 <_init>
 80092b4:	1b64      	subs	r4, r4, r5
 80092b6:	10a4      	asrs	r4, r4, #2
 80092b8:	2600      	movs	r6, #0
 80092ba:	42a6      	cmp	r6, r4
 80092bc:	d105      	bne.n	80092ca <__libc_init_array+0x2e>
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c4:	4798      	blx	r3
 80092c6:	3601      	adds	r6, #1
 80092c8:	e7ee      	b.n	80092a8 <__libc_init_array+0xc>
 80092ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ce:	4798      	blx	r3
 80092d0:	3601      	adds	r6, #1
 80092d2:	e7f2      	b.n	80092ba <__libc_init_array+0x1e>
 80092d4:	0800baf8 	.word	0x0800baf8
 80092d8:	0800baf8 	.word	0x0800baf8
 80092dc:	0800baf8 	.word	0x0800baf8
 80092e0:	0800bafc 	.word	0x0800bafc

080092e4 <memset>:
 80092e4:	4402      	add	r2, r0
 80092e6:	4603      	mov	r3, r0
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d100      	bne.n	80092ee <memset+0xa>
 80092ec:	4770      	bx	lr
 80092ee:	f803 1b01 	strb.w	r1, [r3], #1
 80092f2:	e7f9      	b.n	80092e8 <memset+0x4>

080092f4 <iprintf>:
 80092f4:	b40f      	push	{r0, r1, r2, r3}
 80092f6:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <iprintf+0x2c>)
 80092f8:	b513      	push	{r0, r1, r4, lr}
 80092fa:	681c      	ldr	r4, [r3, #0]
 80092fc:	b124      	cbz	r4, 8009308 <iprintf+0x14>
 80092fe:	69a3      	ldr	r3, [r4, #24]
 8009300:	b913      	cbnz	r3, 8009308 <iprintf+0x14>
 8009302:	4620      	mov	r0, r4
 8009304:	f000 f886 	bl	8009414 <__sinit>
 8009308:	ab05      	add	r3, sp, #20
 800930a:	9a04      	ldr	r2, [sp, #16]
 800930c:	68a1      	ldr	r1, [r4, #8]
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	4620      	mov	r0, r4
 8009312:	f000 fb39 	bl	8009988 <_vfiprintf_r>
 8009316:	b002      	add	sp, #8
 8009318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800931c:	b004      	add	sp, #16
 800931e:	4770      	bx	lr
 8009320:	20000024 	.word	0x20000024

08009324 <siprintf>:
 8009324:	b40e      	push	{r1, r2, r3}
 8009326:	b500      	push	{lr}
 8009328:	b09c      	sub	sp, #112	; 0x70
 800932a:	ab1d      	add	r3, sp, #116	; 0x74
 800932c:	9002      	str	r0, [sp, #8]
 800932e:	9006      	str	r0, [sp, #24]
 8009330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009334:	4809      	ldr	r0, [pc, #36]	; (800935c <siprintf+0x38>)
 8009336:	9107      	str	r1, [sp, #28]
 8009338:	9104      	str	r1, [sp, #16]
 800933a:	4909      	ldr	r1, [pc, #36]	; (8009360 <siprintf+0x3c>)
 800933c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009340:	9105      	str	r1, [sp, #20]
 8009342:	6800      	ldr	r0, [r0, #0]
 8009344:	9301      	str	r3, [sp, #4]
 8009346:	a902      	add	r1, sp, #8
 8009348:	f000 f9f4 	bl	8009734 <_svfiprintf_r>
 800934c:	9b02      	ldr	r3, [sp, #8]
 800934e:	2200      	movs	r2, #0
 8009350:	701a      	strb	r2, [r3, #0]
 8009352:	b01c      	add	sp, #112	; 0x70
 8009354:	f85d eb04 	ldr.w	lr, [sp], #4
 8009358:	b003      	add	sp, #12
 800935a:	4770      	bx	lr
 800935c:	20000024 	.word	0x20000024
 8009360:	ffff0208 	.word	0xffff0208

08009364 <std>:
 8009364:	2300      	movs	r3, #0
 8009366:	b510      	push	{r4, lr}
 8009368:	4604      	mov	r4, r0
 800936a:	e9c0 3300 	strd	r3, r3, [r0]
 800936e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009372:	6083      	str	r3, [r0, #8]
 8009374:	8181      	strh	r1, [r0, #12]
 8009376:	6643      	str	r3, [r0, #100]	; 0x64
 8009378:	81c2      	strh	r2, [r0, #14]
 800937a:	6183      	str	r3, [r0, #24]
 800937c:	4619      	mov	r1, r3
 800937e:	2208      	movs	r2, #8
 8009380:	305c      	adds	r0, #92	; 0x5c
 8009382:	f7ff ffaf 	bl	80092e4 <memset>
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <std+0x38>)
 8009388:	6263      	str	r3, [r4, #36]	; 0x24
 800938a:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <std+0x3c>)
 800938c:	62a3      	str	r3, [r4, #40]	; 0x28
 800938e:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <std+0x40>)
 8009390:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009392:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <std+0x44>)
 8009394:	6224      	str	r4, [r4, #32]
 8009396:	6323      	str	r3, [r4, #48]	; 0x30
 8009398:	bd10      	pop	{r4, pc}
 800939a:	bf00      	nop
 800939c:	08009f31 	.word	0x08009f31
 80093a0:	08009f53 	.word	0x08009f53
 80093a4:	08009f8b 	.word	0x08009f8b
 80093a8:	08009faf 	.word	0x08009faf

080093ac <_cleanup_r>:
 80093ac:	4901      	ldr	r1, [pc, #4]	; (80093b4 <_cleanup_r+0x8>)
 80093ae:	f000 b8af 	b.w	8009510 <_fwalk_reent>
 80093b2:	bf00      	nop
 80093b4:	0800a289 	.word	0x0800a289

080093b8 <__sfmoreglue>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	2268      	movs	r2, #104	; 0x68
 80093bc:	1e4d      	subs	r5, r1, #1
 80093be:	4355      	muls	r5, r2
 80093c0:	460e      	mov	r6, r1
 80093c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093c6:	f000 f8e5 	bl	8009594 <_malloc_r>
 80093ca:	4604      	mov	r4, r0
 80093cc:	b140      	cbz	r0, 80093e0 <__sfmoreglue+0x28>
 80093ce:	2100      	movs	r1, #0
 80093d0:	e9c0 1600 	strd	r1, r6, [r0]
 80093d4:	300c      	adds	r0, #12
 80093d6:	60a0      	str	r0, [r4, #8]
 80093d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093dc:	f7ff ff82 	bl	80092e4 <memset>
 80093e0:	4620      	mov	r0, r4
 80093e2:	bd70      	pop	{r4, r5, r6, pc}

080093e4 <__sfp_lock_acquire>:
 80093e4:	4801      	ldr	r0, [pc, #4]	; (80093ec <__sfp_lock_acquire+0x8>)
 80093e6:	f000 b8b3 	b.w	8009550 <__retarget_lock_acquire_recursive>
 80093ea:	bf00      	nop
 80093ec:	20002915 	.word	0x20002915

080093f0 <__sfp_lock_release>:
 80093f0:	4801      	ldr	r0, [pc, #4]	; (80093f8 <__sfp_lock_release+0x8>)
 80093f2:	f000 b8ae 	b.w	8009552 <__retarget_lock_release_recursive>
 80093f6:	bf00      	nop
 80093f8:	20002915 	.word	0x20002915

080093fc <__sinit_lock_acquire>:
 80093fc:	4801      	ldr	r0, [pc, #4]	; (8009404 <__sinit_lock_acquire+0x8>)
 80093fe:	f000 b8a7 	b.w	8009550 <__retarget_lock_acquire_recursive>
 8009402:	bf00      	nop
 8009404:	20002916 	.word	0x20002916

08009408 <__sinit_lock_release>:
 8009408:	4801      	ldr	r0, [pc, #4]	; (8009410 <__sinit_lock_release+0x8>)
 800940a:	f000 b8a2 	b.w	8009552 <__retarget_lock_release_recursive>
 800940e:	bf00      	nop
 8009410:	20002916 	.word	0x20002916

08009414 <__sinit>:
 8009414:	b510      	push	{r4, lr}
 8009416:	4604      	mov	r4, r0
 8009418:	f7ff fff0 	bl	80093fc <__sinit_lock_acquire>
 800941c:	69a3      	ldr	r3, [r4, #24]
 800941e:	b11b      	cbz	r3, 8009428 <__sinit+0x14>
 8009420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009424:	f7ff bff0 	b.w	8009408 <__sinit_lock_release>
 8009428:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800942c:	6523      	str	r3, [r4, #80]	; 0x50
 800942e:	4b13      	ldr	r3, [pc, #76]	; (800947c <__sinit+0x68>)
 8009430:	4a13      	ldr	r2, [pc, #76]	; (8009480 <__sinit+0x6c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	62a2      	str	r2, [r4, #40]	; 0x28
 8009436:	42a3      	cmp	r3, r4
 8009438:	bf04      	itt	eq
 800943a:	2301      	moveq	r3, #1
 800943c:	61a3      	streq	r3, [r4, #24]
 800943e:	4620      	mov	r0, r4
 8009440:	f000 f820 	bl	8009484 <__sfp>
 8009444:	6060      	str	r0, [r4, #4]
 8009446:	4620      	mov	r0, r4
 8009448:	f000 f81c 	bl	8009484 <__sfp>
 800944c:	60a0      	str	r0, [r4, #8]
 800944e:	4620      	mov	r0, r4
 8009450:	f000 f818 	bl	8009484 <__sfp>
 8009454:	2200      	movs	r2, #0
 8009456:	60e0      	str	r0, [r4, #12]
 8009458:	2104      	movs	r1, #4
 800945a:	6860      	ldr	r0, [r4, #4]
 800945c:	f7ff ff82 	bl	8009364 <std>
 8009460:	68a0      	ldr	r0, [r4, #8]
 8009462:	2201      	movs	r2, #1
 8009464:	2109      	movs	r1, #9
 8009466:	f7ff ff7d 	bl	8009364 <std>
 800946a:	68e0      	ldr	r0, [r4, #12]
 800946c:	2202      	movs	r2, #2
 800946e:	2112      	movs	r1, #18
 8009470:	f7ff ff78 	bl	8009364 <std>
 8009474:	2301      	movs	r3, #1
 8009476:	61a3      	str	r3, [r4, #24]
 8009478:	e7d2      	b.n	8009420 <__sinit+0xc>
 800947a:	bf00      	nop
 800947c:	0800ba28 	.word	0x0800ba28
 8009480:	080093ad 	.word	0x080093ad

08009484 <__sfp>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	4607      	mov	r7, r0
 8009488:	f7ff ffac 	bl	80093e4 <__sfp_lock_acquire>
 800948c:	4b1e      	ldr	r3, [pc, #120]	; (8009508 <__sfp+0x84>)
 800948e:	681e      	ldr	r6, [r3, #0]
 8009490:	69b3      	ldr	r3, [r6, #24]
 8009492:	b913      	cbnz	r3, 800949a <__sfp+0x16>
 8009494:	4630      	mov	r0, r6
 8009496:	f7ff ffbd 	bl	8009414 <__sinit>
 800949a:	3648      	adds	r6, #72	; 0x48
 800949c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	d503      	bpl.n	80094ac <__sfp+0x28>
 80094a4:	6833      	ldr	r3, [r6, #0]
 80094a6:	b30b      	cbz	r3, 80094ec <__sfp+0x68>
 80094a8:	6836      	ldr	r6, [r6, #0]
 80094aa:	e7f7      	b.n	800949c <__sfp+0x18>
 80094ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094b0:	b9d5      	cbnz	r5, 80094e8 <__sfp+0x64>
 80094b2:	4b16      	ldr	r3, [pc, #88]	; (800950c <__sfp+0x88>)
 80094b4:	60e3      	str	r3, [r4, #12]
 80094b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094ba:	6665      	str	r5, [r4, #100]	; 0x64
 80094bc:	f000 f847 	bl	800954e <__retarget_lock_init_recursive>
 80094c0:	f7ff ff96 	bl	80093f0 <__sfp_lock_release>
 80094c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094cc:	6025      	str	r5, [r4, #0]
 80094ce:	61a5      	str	r5, [r4, #24]
 80094d0:	2208      	movs	r2, #8
 80094d2:	4629      	mov	r1, r5
 80094d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094d8:	f7ff ff04 	bl	80092e4 <memset>
 80094dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094e4:	4620      	mov	r0, r4
 80094e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e8:	3468      	adds	r4, #104	; 0x68
 80094ea:	e7d9      	b.n	80094a0 <__sfp+0x1c>
 80094ec:	2104      	movs	r1, #4
 80094ee:	4638      	mov	r0, r7
 80094f0:	f7ff ff62 	bl	80093b8 <__sfmoreglue>
 80094f4:	4604      	mov	r4, r0
 80094f6:	6030      	str	r0, [r6, #0]
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d1d5      	bne.n	80094a8 <__sfp+0x24>
 80094fc:	f7ff ff78 	bl	80093f0 <__sfp_lock_release>
 8009500:	230c      	movs	r3, #12
 8009502:	603b      	str	r3, [r7, #0]
 8009504:	e7ee      	b.n	80094e4 <__sfp+0x60>
 8009506:	bf00      	nop
 8009508:	0800ba28 	.word	0x0800ba28
 800950c:	ffff0001 	.word	0xffff0001

08009510 <_fwalk_reent>:
 8009510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009514:	4606      	mov	r6, r0
 8009516:	4688      	mov	r8, r1
 8009518:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800951c:	2700      	movs	r7, #0
 800951e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009522:	f1b9 0901 	subs.w	r9, r9, #1
 8009526:	d505      	bpl.n	8009534 <_fwalk_reent+0x24>
 8009528:	6824      	ldr	r4, [r4, #0]
 800952a:	2c00      	cmp	r4, #0
 800952c:	d1f7      	bne.n	800951e <_fwalk_reent+0xe>
 800952e:	4638      	mov	r0, r7
 8009530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009534:	89ab      	ldrh	r3, [r5, #12]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d907      	bls.n	800954a <_fwalk_reent+0x3a>
 800953a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800953e:	3301      	adds	r3, #1
 8009540:	d003      	beq.n	800954a <_fwalk_reent+0x3a>
 8009542:	4629      	mov	r1, r5
 8009544:	4630      	mov	r0, r6
 8009546:	47c0      	blx	r8
 8009548:	4307      	orrs	r7, r0
 800954a:	3568      	adds	r5, #104	; 0x68
 800954c:	e7e9      	b.n	8009522 <_fwalk_reent+0x12>

0800954e <__retarget_lock_init_recursive>:
 800954e:	4770      	bx	lr

08009550 <__retarget_lock_acquire_recursive>:
 8009550:	4770      	bx	lr

08009552 <__retarget_lock_release_recursive>:
 8009552:	4770      	bx	lr

08009554 <sbrk_aligned>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	4e0e      	ldr	r6, [pc, #56]	; (8009590 <sbrk_aligned+0x3c>)
 8009558:	460c      	mov	r4, r1
 800955a:	6831      	ldr	r1, [r6, #0]
 800955c:	4605      	mov	r5, r0
 800955e:	b911      	cbnz	r1, 8009566 <sbrk_aligned+0x12>
 8009560:	f000 fcd6 	bl	8009f10 <_sbrk_r>
 8009564:	6030      	str	r0, [r6, #0]
 8009566:	4621      	mov	r1, r4
 8009568:	4628      	mov	r0, r5
 800956a:	f000 fcd1 	bl	8009f10 <_sbrk_r>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	d00a      	beq.n	8009588 <sbrk_aligned+0x34>
 8009572:	1cc4      	adds	r4, r0, #3
 8009574:	f024 0403 	bic.w	r4, r4, #3
 8009578:	42a0      	cmp	r0, r4
 800957a:	d007      	beq.n	800958c <sbrk_aligned+0x38>
 800957c:	1a21      	subs	r1, r4, r0
 800957e:	4628      	mov	r0, r5
 8009580:	f000 fcc6 	bl	8009f10 <_sbrk_r>
 8009584:	3001      	adds	r0, #1
 8009586:	d101      	bne.n	800958c <sbrk_aligned+0x38>
 8009588:	f04f 34ff 	mov.w	r4, #4294967295
 800958c:	4620      	mov	r0, r4
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	2000291c 	.word	0x2000291c

08009594 <_malloc_r>:
 8009594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009598:	1ccd      	adds	r5, r1, #3
 800959a:	f025 0503 	bic.w	r5, r5, #3
 800959e:	3508      	adds	r5, #8
 80095a0:	2d0c      	cmp	r5, #12
 80095a2:	bf38      	it	cc
 80095a4:	250c      	movcc	r5, #12
 80095a6:	2d00      	cmp	r5, #0
 80095a8:	4607      	mov	r7, r0
 80095aa:	db01      	blt.n	80095b0 <_malloc_r+0x1c>
 80095ac:	42a9      	cmp	r1, r5
 80095ae:	d905      	bls.n	80095bc <_malloc_r+0x28>
 80095b0:	230c      	movs	r3, #12
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	2600      	movs	r6, #0
 80095b6:	4630      	mov	r0, r6
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095bc:	4e2e      	ldr	r6, [pc, #184]	; (8009678 <_malloc_r+0xe4>)
 80095be:	f000 ff3f 	bl	800a440 <__malloc_lock>
 80095c2:	6833      	ldr	r3, [r6, #0]
 80095c4:	461c      	mov	r4, r3
 80095c6:	bb34      	cbnz	r4, 8009616 <_malloc_r+0x82>
 80095c8:	4629      	mov	r1, r5
 80095ca:	4638      	mov	r0, r7
 80095cc:	f7ff ffc2 	bl	8009554 <sbrk_aligned>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	4604      	mov	r4, r0
 80095d4:	d14d      	bne.n	8009672 <_malloc_r+0xde>
 80095d6:	6834      	ldr	r4, [r6, #0]
 80095d8:	4626      	mov	r6, r4
 80095da:	2e00      	cmp	r6, #0
 80095dc:	d140      	bne.n	8009660 <_malloc_r+0xcc>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	4631      	mov	r1, r6
 80095e2:	4638      	mov	r0, r7
 80095e4:	eb04 0803 	add.w	r8, r4, r3
 80095e8:	f000 fc92 	bl	8009f10 <_sbrk_r>
 80095ec:	4580      	cmp	r8, r0
 80095ee:	d13a      	bne.n	8009666 <_malloc_r+0xd2>
 80095f0:	6821      	ldr	r1, [r4, #0]
 80095f2:	3503      	adds	r5, #3
 80095f4:	1a6d      	subs	r5, r5, r1
 80095f6:	f025 0503 	bic.w	r5, r5, #3
 80095fa:	3508      	adds	r5, #8
 80095fc:	2d0c      	cmp	r5, #12
 80095fe:	bf38      	it	cc
 8009600:	250c      	movcc	r5, #12
 8009602:	4629      	mov	r1, r5
 8009604:	4638      	mov	r0, r7
 8009606:	f7ff ffa5 	bl	8009554 <sbrk_aligned>
 800960a:	3001      	adds	r0, #1
 800960c:	d02b      	beq.n	8009666 <_malloc_r+0xd2>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	442b      	add	r3, r5
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	e00e      	b.n	8009634 <_malloc_r+0xa0>
 8009616:	6822      	ldr	r2, [r4, #0]
 8009618:	1b52      	subs	r2, r2, r5
 800961a:	d41e      	bmi.n	800965a <_malloc_r+0xc6>
 800961c:	2a0b      	cmp	r2, #11
 800961e:	d916      	bls.n	800964e <_malloc_r+0xba>
 8009620:	1961      	adds	r1, r4, r5
 8009622:	42a3      	cmp	r3, r4
 8009624:	6025      	str	r5, [r4, #0]
 8009626:	bf18      	it	ne
 8009628:	6059      	strne	r1, [r3, #4]
 800962a:	6863      	ldr	r3, [r4, #4]
 800962c:	bf08      	it	eq
 800962e:	6031      	streq	r1, [r6, #0]
 8009630:	5162      	str	r2, [r4, r5]
 8009632:	604b      	str	r3, [r1, #4]
 8009634:	4638      	mov	r0, r7
 8009636:	f104 060b 	add.w	r6, r4, #11
 800963a:	f000 ff07 	bl	800a44c <__malloc_unlock>
 800963e:	f026 0607 	bic.w	r6, r6, #7
 8009642:	1d23      	adds	r3, r4, #4
 8009644:	1af2      	subs	r2, r6, r3
 8009646:	d0b6      	beq.n	80095b6 <_malloc_r+0x22>
 8009648:	1b9b      	subs	r3, r3, r6
 800964a:	50a3      	str	r3, [r4, r2]
 800964c:	e7b3      	b.n	80095b6 <_malloc_r+0x22>
 800964e:	6862      	ldr	r2, [r4, #4]
 8009650:	42a3      	cmp	r3, r4
 8009652:	bf0c      	ite	eq
 8009654:	6032      	streq	r2, [r6, #0]
 8009656:	605a      	strne	r2, [r3, #4]
 8009658:	e7ec      	b.n	8009634 <_malloc_r+0xa0>
 800965a:	4623      	mov	r3, r4
 800965c:	6864      	ldr	r4, [r4, #4]
 800965e:	e7b2      	b.n	80095c6 <_malloc_r+0x32>
 8009660:	4634      	mov	r4, r6
 8009662:	6876      	ldr	r6, [r6, #4]
 8009664:	e7b9      	b.n	80095da <_malloc_r+0x46>
 8009666:	230c      	movs	r3, #12
 8009668:	603b      	str	r3, [r7, #0]
 800966a:	4638      	mov	r0, r7
 800966c:	f000 feee 	bl	800a44c <__malloc_unlock>
 8009670:	e7a1      	b.n	80095b6 <_malloc_r+0x22>
 8009672:	6025      	str	r5, [r4, #0]
 8009674:	e7de      	b.n	8009634 <_malloc_r+0xa0>
 8009676:	bf00      	nop
 8009678:	20002918 	.word	0x20002918

0800967c <__ssputs_r>:
 800967c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009680:	688e      	ldr	r6, [r1, #8]
 8009682:	429e      	cmp	r6, r3
 8009684:	4682      	mov	sl, r0
 8009686:	460c      	mov	r4, r1
 8009688:	4690      	mov	r8, r2
 800968a:	461f      	mov	r7, r3
 800968c:	d838      	bhi.n	8009700 <__ssputs_r+0x84>
 800968e:	898a      	ldrh	r2, [r1, #12]
 8009690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009694:	d032      	beq.n	80096fc <__ssputs_r+0x80>
 8009696:	6825      	ldr	r5, [r4, #0]
 8009698:	6909      	ldr	r1, [r1, #16]
 800969a:	eba5 0901 	sub.w	r9, r5, r1
 800969e:	6965      	ldr	r5, [r4, #20]
 80096a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096a8:	3301      	adds	r3, #1
 80096aa:	444b      	add	r3, r9
 80096ac:	106d      	asrs	r5, r5, #1
 80096ae:	429d      	cmp	r5, r3
 80096b0:	bf38      	it	cc
 80096b2:	461d      	movcc	r5, r3
 80096b4:	0553      	lsls	r3, r2, #21
 80096b6:	d531      	bpl.n	800971c <__ssputs_r+0xa0>
 80096b8:	4629      	mov	r1, r5
 80096ba:	f7ff ff6b 	bl	8009594 <_malloc_r>
 80096be:	4606      	mov	r6, r0
 80096c0:	b950      	cbnz	r0, 80096d8 <__ssputs_r+0x5c>
 80096c2:	230c      	movs	r3, #12
 80096c4:	f8ca 3000 	str.w	r3, [sl]
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ce:	81a3      	strh	r3, [r4, #12]
 80096d0:	f04f 30ff 	mov.w	r0, #4294967295
 80096d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d8:	6921      	ldr	r1, [r4, #16]
 80096da:	464a      	mov	r2, r9
 80096dc:	f000 fe88 	bl	800a3f0 <memcpy>
 80096e0:	89a3      	ldrh	r3, [r4, #12]
 80096e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	6126      	str	r6, [r4, #16]
 80096ee:	6165      	str	r5, [r4, #20]
 80096f0:	444e      	add	r6, r9
 80096f2:	eba5 0509 	sub.w	r5, r5, r9
 80096f6:	6026      	str	r6, [r4, #0]
 80096f8:	60a5      	str	r5, [r4, #8]
 80096fa:	463e      	mov	r6, r7
 80096fc:	42be      	cmp	r6, r7
 80096fe:	d900      	bls.n	8009702 <__ssputs_r+0x86>
 8009700:	463e      	mov	r6, r7
 8009702:	6820      	ldr	r0, [r4, #0]
 8009704:	4632      	mov	r2, r6
 8009706:	4641      	mov	r1, r8
 8009708:	f000 fe80 	bl	800a40c <memmove>
 800970c:	68a3      	ldr	r3, [r4, #8]
 800970e:	1b9b      	subs	r3, r3, r6
 8009710:	60a3      	str	r3, [r4, #8]
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	4433      	add	r3, r6
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	2000      	movs	r0, #0
 800971a:	e7db      	b.n	80096d4 <__ssputs_r+0x58>
 800971c:	462a      	mov	r2, r5
 800971e:	f000 fee7 	bl	800a4f0 <_realloc_r>
 8009722:	4606      	mov	r6, r0
 8009724:	2800      	cmp	r0, #0
 8009726:	d1e1      	bne.n	80096ec <__ssputs_r+0x70>
 8009728:	6921      	ldr	r1, [r4, #16]
 800972a:	4650      	mov	r0, sl
 800972c:	f000 fe94 	bl	800a458 <_free_r>
 8009730:	e7c7      	b.n	80096c2 <__ssputs_r+0x46>
	...

08009734 <_svfiprintf_r>:
 8009734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	4698      	mov	r8, r3
 800973a:	898b      	ldrh	r3, [r1, #12]
 800973c:	061b      	lsls	r3, r3, #24
 800973e:	b09d      	sub	sp, #116	; 0x74
 8009740:	4607      	mov	r7, r0
 8009742:	460d      	mov	r5, r1
 8009744:	4614      	mov	r4, r2
 8009746:	d50e      	bpl.n	8009766 <_svfiprintf_r+0x32>
 8009748:	690b      	ldr	r3, [r1, #16]
 800974a:	b963      	cbnz	r3, 8009766 <_svfiprintf_r+0x32>
 800974c:	2140      	movs	r1, #64	; 0x40
 800974e:	f7ff ff21 	bl	8009594 <_malloc_r>
 8009752:	6028      	str	r0, [r5, #0]
 8009754:	6128      	str	r0, [r5, #16]
 8009756:	b920      	cbnz	r0, 8009762 <_svfiprintf_r+0x2e>
 8009758:	230c      	movs	r3, #12
 800975a:	603b      	str	r3, [r7, #0]
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	e0d1      	b.n	8009906 <_svfiprintf_r+0x1d2>
 8009762:	2340      	movs	r3, #64	; 0x40
 8009764:	616b      	str	r3, [r5, #20]
 8009766:	2300      	movs	r3, #0
 8009768:	9309      	str	r3, [sp, #36]	; 0x24
 800976a:	2320      	movs	r3, #32
 800976c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009770:	f8cd 800c 	str.w	r8, [sp, #12]
 8009774:	2330      	movs	r3, #48	; 0x30
 8009776:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009920 <_svfiprintf_r+0x1ec>
 800977a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800977e:	f04f 0901 	mov.w	r9, #1
 8009782:	4623      	mov	r3, r4
 8009784:	469a      	mov	sl, r3
 8009786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800978a:	b10a      	cbz	r2, 8009790 <_svfiprintf_r+0x5c>
 800978c:	2a25      	cmp	r2, #37	; 0x25
 800978e:	d1f9      	bne.n	8009784 <_svfiprintf_r+0x50>
 8009790:	ebba 0b04 	subs.w	fp, sl, r4
 8009794:	d00b      	beq.n	80097ae <_svfiprintf_r+0x7a>
 8009796:	465b      	mov	r3, fp
 8009798:	4622      	mov	r2, r4
 800979a:	4629      	mov	r1, r5
 800979c:	4638      	mov	r0, r7
 800979e:	f7ff ff6d 	bl	800967c <__ssputs_r>
 80097a2:	3001      	adds	r0, #1
 80097a4:	f000 80aa 	beq.w	80098fc <_svfiprintf_r+0x1c8>
 80097a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097aa:	445a      	add	r2, fp
 80097ac:	9209      	str	r2, [sp, #36]	; 0x24
 80097ae:	f89a 3000 	ldrb.w	r3, [sl]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 80a2 	beq.w	80098fc <_svfiprintf_r+0x1c8>
 80097b8:	2300      	movs	r3, #0
 80097ba:	f04f 32ff 	mov.w	r2, #4294967295
 80097be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097c2:	f10a 0a01 	add.w	sl, sl, #1
 80097c6:	9304      	str	r3, [sp, #16]
 80097c8:	9307      	str	r3, [sp, #28]
 80097ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097ce:	931a      	str	r3, [sp, #104]	; 0x68
 80097d0:	4654      	mov	r4, sl
 80097d2:	2205      	movs	r2, #5
 80097d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d8:	4851      	ldr	r0, [pc, #324]	; (8009920 <_svfiprintf_r+0x1ec>)
 80097da:	f7f6 fd21 	bl	8000220 <memchr>
 80097de:	9a04      	ldr	r2, [sp, #16]
 80097e0:	b9d8      	cbnz	r0, 800981a <_svfiprintf_r+0xe6>
 80097e2:	06d0      	lsls	r0, r2, #27
 80097e4:	bf44      	itt	mi
 80097e6:	2320      	movmi	r3, #32
 80097e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ec:	0711      	lsls	r1, r2, #28
 80097ee:	bf44      	itt	mi
 80097f0:	232b      	movmi	r3, #43	; 0x2b
 80097f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097f6:	f89a 3000 	ldrb.w	r3, [sl]
 80097fa:	2b2a      	cmp	r3, #42	; 0x2a
 80097fc:	d015      	beq.n	800982a <_svfiprintf_r+0xf6>
 80097fe:	9a07      	ldr	r2, [sp, #28]
 8009800:	4654      	mov	r4, sl
 8009802:	2000      	movs	r0, #0
 8009804:	f04f 0c0a 	mov.w	ip, #10
 8009808:	4621      	mov	r1, r4
 800980a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800980e:	3b30      	subs	r3, #48	; 0x30
 8009810:	2b09      	cmp	r3, #9
 8009812:	d94e      	bls.n	80098b2 <_svfiprintf_r+0x17e>
 8009814:	b1b0      	cbz	r0, 8009844 <_svfiprintf_r+0x110>
 8009816:	9207      	str	r2, [sp, #28]
 8009818:	e014      	b.n	8009844 <_svfiprintf_r+0x110>
 800981a:	eba0 0308 	sub.w	r3, r0, r8
 800981e:	fa09 f303 	lsl.w	r3, r9, r3
 8009822:	4313      	orrs	r3, r2
 8009824:	9304      	str	r3, [sp, #16]
 8009826:	46a2      	mov	sl, r4
 8009828:	e7d2      	b.n	80097d0 <_svfiprintf_r+0x9c>
 800982a:	9b03      	ldr	r3, [sp, #12]
 800982c:	1d19      	adds	r1, r3, #4
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	9103      	str	r1, [sp, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	bfbb      	ittet	lt
 8009836:	425b      	neglt	r3, r3
 8009838:	f042 0202 	orrlt.w	r2, r2, #2
 800983c:	9307      	strge	r3, [sp, #28]
 800983e:	9307      	strlt	r3, [sp, #28]
 8009840:	bfb8      	it	lt
 8009842:	9204      	strlt	r2, [sp, #16]
 8009844:	7823      	ldrb	r3, [r4, #0]
 8009846:	2b2e      	cmp	r3, #46	; 0x2e
 8009848:	d10c      	bne.n	8009864 <_svfiprintf_r+0x130>
 800984a:	7863      	ldrb	r3, [r4, #1]
 800984c:	2b2a      	cmp	r3, #42	; 0x2a
 800984e:	d135      	bne.n	80098bc <_svfiprintf_r+0x188>
 8009850:	9b03      	ldr	r3, [sp, #12]
 8009852:	1d1a      	adds	r2, r3, #4
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	9203      	str	r2, [sp, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	bfb8      	it	lt
 800985c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009860:	3402      	adds	r4, #2
 8009862:	9305      	str	r3, [sp, #20]
 8009864:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009930 <_svfiprintf_r+0x1fc>
 8009868:	7821      	ldrb	r1, [r4, #0]
 800986a:	2203      	movs	r2, #3
 800986c:	4650      	mov	r0, sl
 800986e:	f7f6 fcd7 	bl	8000220 <memchr>
 8009872:	b140      	cbz	r0, 8009886 <_svfiprintf_r+0x152>
 8009874:	2340      	movs	r3, #64	; 0x40
 8009876:	eba0 000a 	sub.w	r0, r0, sl
 800987a:	fa03 f000 	lsl.w	r0, r3, r0
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	4303      	orrs	r3, r0
 8009882:	3401      	adds	r4, #1
 8009884:	9304      	str	r3, [sp, #16]
 8009886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800988a:	4826      	ldr	r0, [pc, #152]	; (8009924 <_svfiprintf_r+0x1f0>)
 800988c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009890:	2206      	movs	r2, #6
 8009892:	f7f6 fcc5 	bl	8000220 <memchr>
 8009896:	2800      	cmp	r0, #0
 8009898:	d038      	beq.n	800990c <_svfiprintf_r+0x1d8>
 800989a:	4b23      	ldr	r3, [pc, #140]	; (8009928 <_svfiprintf_r+0x1f4>)
 800989c:	bb1b      	cbnz	r3, 80098e6 <_svfiprintf_r+0x1b2>
 800989e:	9b03      	ldr	r3, [sp, #12]
 80098a0:	3307      	adds	r3, #7
 80098a2:	f023 0307 	bic.w	r3, r3, #7
 80098a6:	3308      	adds	r3, #8
 80098a8:	9303      	str	r3, [sp, #12]
 80098aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ac:	4433      	add	r3, r6
 80098ae:	9309      	str	r3, [sp, #36]	; 0x24
 80098b0:	e767      	b.n	8009782 <_svfiprintf_r+0x4e>
 80098b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80098b6:	460c      	mov	r4, r1
 80098b8:	2001      	movs	r0, #1
 80098ba:	e7a5      	b.n	8009808 <_svfiprintf_r+0xd4>
 80098bc:	2300      	movs	r3, #0
 80098be:	3401      	adds	r4, #1
 80098c0:	9305      	str	r3, [sp, #20]
 80098c2:	4619      	mov	r1, r3
 80098c4:	f04f 0c0a 	mov.w	ip, #10
 80098c8:	4620      	mov	r0, r4
 80098ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ce:	3a30      	subs	r2, #48	; 0x30
 80098d0:	2a09      	cmp	r2, #9
 80098d2:	d903      	bls.n	80098dc <_svfiprintf_r+0x1a8>
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d0c5      	beq.n	8009864 <_svfiprintf_r+0x130>
 80098d8:	9105      	str	r1, [sp, #20]
 80098da:	e7c3      	b.n	8009864 <_svfiprintf_r+0x130>
 80098dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80098e0:	4604      	mov	r4, r0
 80098e2:	2301      	movs	r3, #1
 80098e4:	e7f0      	b.n	80098c8 <_svfiprintf_r+0x194>
 80098e6:	ab03      	add	r3, sp, #12
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	462a      	mov	r2, r5
 80098ec:	4b0f      	ldr	r3, [pc, #60]	; (800992c <_svfiprintf_r+0x1f8>)
 80098ee:	a904      	add	r1, sp, #16
 80098f0:	4638      	mov	r0, r7
 80098f2:	f3af 8000 	nop.w
 80098f6:	1c42      	adds	r2, r0, #1
 80098f8:	4606      	mov	r6, r0
 80098fa:	d1d6      	bne.n	80098aa <_svfiprintf_r+0x176>
 80098fc:	89ab      	ldrh	r3, [r5, #12]
 80098fe:	065b      	lsls	r3, r3, #25
 8009900:	f53f af2c 	bmi.w	800975c <_svfiprintf_r+0x28>
 8009904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009906:	b01d      	add	sp, #116	; 0x74
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	ab03      	add	r3, sp, #12
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	462a      	mov	r2, r5
 8009912:	4b06      	ldr	r3, [pc, #24]	; (800992c <_svfiprintf_r+0x1f8>)
 8009914:	a904      	add	r1, sp, #16
 8009916:	4638      	mov	r0, r7
 8009918:	f000 f9d4 	bl	8009cc4 <_printf_i>
 800991c:	e7eb      	b.n	80098f6 <_svfiprintf_r+0x1c2>
 800991e:	bf00      	nop
 8009920:	0800ba8c 	.word	0x0800ba8c
 8009924:	0800ba96 	.word	0x0800ba96
 8009928:	00000000 	.word	0x00000000
 800992c:	0800967d 	.word	0x0800967d
 8009930:	0800ba92 	.word	0x0800ba92

08009934 <__sfputc_r>:
 8009934:	6893      	ldr	r3, [r2, #8]
 8009936:	3b01      	subs	r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	b410      	push	{r4}
 800993c:	6093      	str	r3, [r2, #8]
 800993e:	da08      	bge.n	8009952 <__sfputc_r+0x1e>
 8009940:	6994      	ldr	r4, [r2, #24]
 8009942:	42a3      	cmp	r3, r4
 8009944:	db01      	blt.n	800994a <__sfputc_r+0x16>
 8009946:	290a      	cmp	r1, #10
 8009948:	d103      	bne.n	8009952 <__sfputc_r+0x1e>
 800994a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800994e:	f000 bb33 	b.w	8009fb8 <__swbuf_r>
 8009952:	6813      	ldr	r3, [r2, #0]
 8009954:	1c58      	adds	r0, r3, #1
 8009956:	6010      	str	r0, [r2, #0]
 8009958:	7019      	strb	r1, [r3, #0]
 800995a:	4608      	mov	r0, r1
 800995c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009960:	4770      	bx	lr

08009962 <__sfputs_r>:
 8009962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009964:	4606      	mov	r6, r0
 8009966:	460f      	mov	r7, r1
 8009968:	4614      	mov	r4, r2
 800996a:	18d5      	adds	r5, r2, r3
 800996c:	42ac      	cmp	r4, r5
 800996e:	d101      	bne.n	8009974 <__sfputs_r+0x12>
 8009970:	2000      	movs	r0, #0
 8009972:	e007      	b.n	8009984 <__sfputs_r+0x22>
 8009974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009978:	463a      	mov	r2, r7
 800997a:	4630      	mov	r0, r6
 800997c:	f7ff ffda 	bl	8009934 <__sfputc_r>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d1f3      	bne.n	800996c <__sfputs_r+0xa>
 8009984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009988 <_vfiprintf_r>:
 8009988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998c:	460d      	mov	r5, r1
 800998e:	b09d      	sub	sp, #116	; 0x74
 8009990:	4614      	mov	r4, r2
 8009992:	4698      	mov	r8, r3
 8009994:	4606      	mov	r6, r0
 8009996:	b118      	cbz	r0, 80099a0 <_vfiprintf_r+0x18>
 8009998:	6983      	ldr	r3, [r0, #24]
 800999a:	b90b      	cbnz	r3, 80099a0 <_vfiprintf_r+0x18>
 800999c:	f7ff fd3a 	bl	8009414 <__sinit>
 80099a0:	4b89      	ldr	r3, [pc, #548]	; (8009bc8 <_vfiprintf_r+0x240>)
 80099a2:	429d      	cmp	r5, r3
 80099a4:	d11b      	bne.n	80099de <_vfiprintf_r+0x56>
 80099a6:	6875      	ldr	r5, [r6, #4]
 80099a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099aa:	07d9      	lsls	r1, r3, #31
 80099ac:	d405      	bmi.n	80099ba <_vfiprintf_r+0x32>
 80099ae:	89ab      	ldrh	r3, [r5, #12]
 80099b0:	059a      	lsls	r2, r3, #22
 80099b2:	d402      	bmi.n	80099ba <_vfiprintf_r+0x32>
 80099b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099b6:	f7ff fdcb 	bl	8009550 <__retarget_lock_acquire_recursive>
 80099ba:	89ab      	ldrh	r3, [r5, #12]
 80099bc:	071b      	lsls	r3, r3, #28
 80099be:	d501      	bpl.n	80099c4 <_vfiprintf_r+0x3c>
 80099c0:	692b      	ldr	r3, [r5, #16]
 80099c2:	b9eb      	cbnz	r3, 8009a00 <_vfiprintf_r+0x78>
 80099c4:	4629      	mov	r1, r5
 80099c6:	4630      	mov	r0, r6
 80099c8:	f000 fb5a 	bl	800a080 <__swsetup_r>
 80099cc:	b1c0      	cbz	r0, 8009a00 <_vfiprintf_r+0x78>
 80099ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099d0:	07dc      	lsls	r4, r3, #31
 80099d2:	d50e      	bpl.n	80099f2 <_vfiprintf_r+0x6a>
 80099d4:	f04f 30ff 	mov.w	r0, #4294967295
 80099d8:	b01d      	add	sp, #116	; 0x74
 80099da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099de:	4b7b      	ldr	r3, [pc, #492]	; (8009bcc <_vfiprintf_r+0x244>)
 80099e0:	429d      	cmp	r5, r3
 80099e2:	d101      	bne.n	80099e8 <_vfiprintf_r+0x60>
 80099e4:	68b5      	ldr	r5, [r6, #8]
 80099e6:	e7df      	b.n	80099a8 <_vfiprintf_r+0x20>
 80099e8:	4b79      	ldr	r3, [pc, #484]	; (8009bd0 <_vfiprintf_r+0x248>)
 80099ea:	429d      	cmp	r5, r3
 80099ec:	bf08      	it	eq
 80099ee:	68f5      	ldreq	r5, [r6, #12]
 80099f0:	e7da      	b.n	80099a8 <_vfiprintf_r+0x20>
 80099f2:	89ab      	ldrh	r3, [r5, #12]
 80099f4:	0598      	lsls	r0, r3, #22
 80099f6:	d4ed      	bmi.n	80099d4 <_vfiprintf_r+0x4c>
 80099f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099fa:	f7ff fdaa 	bl	8009552 <__retarget_lock_release_recursive>
 80099fe:	e7e9      	b.n	80099d4 <_vfiprintf_r+0x4c>
 8009a00:	2300      	movs	r3, #0
 8009a02:	9309      	str	r3, [sp, #36]	; 0x24
 8009a04:	2320      	movs	r3, #32
 8009a06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a0e:	2330      	movs	r3, #48	; 0x30
 8009a10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009bd4 <_vfiprintf_r+0x24c>
 8009a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a18:	f04f 0901 	mov.w	r9, #1
 8009a1c:	4623      	mov	r3, r4
 8009a1e:	469a      	mov	sl, r3
 8009a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a24:	b10a      	cbz	r2, 8009a2a <_vfiprintf_r+0xa2>
 8009a26:	2a25      	cmp	r2, #37	; 0x25
 8009a28:	d1f9      	bne.n	8009a1e <_vfiprintf_r+0x96>
 8009a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8009a2e:	d00b      	beq.n	8009a48 <_vfiprintf_r+0xc0>
 8009a30:	465b      	mov	r3, fp
 8009a32:	4622      	mov	r2, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7ff ff93 	bl	8009962 <__sfputs_r>
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	f000 80aa 	beq.w	8009b96 <_vfiprintf_r+0x20e>
 8009a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a44:	445a      	add	r2, fp
 8009a46:	9209      	str	r2, [sp, #36]	; 0x24
 8009a48:	f89a 3000 	ldrb.w	r3, [sl]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 80a2 	beq.w	8009b96 <_vfiprintf_r+0x20e>
 8009a52:	2300      	movs	r3, #0
 8009a54:	f04f 32ff 	mov.w	r2, #4294967295
 8009a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a5c:	f10a 0a01 	add.w	sl, sl, #1
 8009a60:	9304      	str	r3, [sp, #16]
 8009a62:	9307      	str	r3, [sp, #28]
 8009a64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a68:	931a      	str	r3, [sp, #104]	; 0x68
 8009a6a:	4654      	mov	r4, sl
 8009a6c:	2205      	movs	r2, #5
 8009a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a72:	4858      	ldr	r0, [pc, #352]	; (8009bd4 <_vfiprintf_r+0x24c>)
 8009a74:	f7f6 fbd4 	bl	8000220 <memchr>
 8009a78:	9a04      	ldr	r2, [sp, #16]
 8009a7a:	b9d8      	cbnz	r0, 8009ab4 <_vfiprintf_r+0x12c>
 8009a7c:	06d1      	lsls	r1, r2, #27
 8009a7e:	bf44      	itt	mi
 8009a80:	2320      	movmi	r3, #32
 8009a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a86:	0713      	lsls	r3, r2, #28
 8009a88:	bf44      	itt	mi
 8009a8a:	232b      	movmi	r3, #43	; 0x2b
 8009a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a90:	f89a 3000 	ldrb.w	r3, [sl]
 8009a94:	2b2a      	cmp	r3, #42	; 0x2a
 8009a96:	d015      	beq.n	8009ac4 <_vfiprintf_r+0x13c>
 8009a98:	9a07      	ldr	r2, [sp, #28]
 8009a9a:	4654      	mov	r4, sl
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	f04f 0c0a 	mov.w	ip, #10
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aa8:	3b30      	subs	r3, #48	; 0x30
 8009aaa:	2b09      	cmp	r3, #9
 8009aac:	d94e      	bls.n	8009b4c <_vfiprintf_r+0x1c4>
 8009aae:	b1b0      	cbz	r0, 8009ade <_vfiprintf_r+0x156>
 8009ab0:	9207      	str	r2, [sp, #28]
 8009ab2:	e014      	b.n	8009ade <_vfiprintf_r+0x156>
 8009ab4:	eba0 0308 	sub.w	r3, r0, r8
 8009ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8009abc:	4313      	orrs	r3, r2
 8009abe:	9304      	str	r3, [sp, #16]
 8009ac0:	46a2      	mov	sl, r4
 8009ac2:	e7d2      	b.n	8009a6a <_vfiprintf_r+0xe2>
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	1d19      	adds	r1, r3, #4
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	9103      	str	r1, [sp, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	bfbb      	ittet	lt
 8009ad0:	425b      	neglt	r3, r3
 8009ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ad6:	9307      	strge	r3, [sp, #28]
 8009ad8:	9307      	strlt	r3, [sp, #28]
 8009ada:	bfb8      	it	lt
 8009adc:	9204      	strlt	r2, [sp, #16]
 8009ade:	7823      	ldrb	r3, [r4, #0]
 8009ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ae2:	d10c      	bne.n	8009afe <_vfiprintf_r+0x176>
 8009ae4:	7863      	ldrb	r3, [r4, #1]
 8009ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae8:	d135      	bne.n	8009b56 <_vfiprintf_r+0x1ce>
 8009aea:	9b03      	ldr	r3, [sp, #12]
 8009aec:	1d1a      	adds	r2, r3, #4
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	9203      	str	r2, [sp, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	bfb8      	it	lt
 8009af6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009afa:	3402      	adds	r4, #2
 8009afc:	9305      	str	r3, [sp, #20]
 8009afe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009be4 <_vfiprintf_r+0x25c>
 8009b02:	7821      	ldrb	r1, [r4, #0]
 8009b04:	2203      	movs	r2, #3
 8009b06:	4650      	mov	r0, sl
 8009b08:	f7f6 fb8a 	bl	8000220 <memchr>
 8009b0c:	b140      	cbz	r0, 8009b20 <_vfiprintf_r+0x198>
 8009b0e:	2340      	movs	r3, #64	; 0x40
 8009b10:	eba0 000a 	sub.w	r0, r0, sl
 8009b14:	fa03 f000 	lsl.w	r0, r3, r0
 8009b18:	9b04      	ldr	r3, [sp, #16]
 8009b1a:	4303      	orrs	r3, r0
 8009b1c:	3401      	adds	r4, #1
 8009b1e:	9304      	str	r3, [sp, #16]
 8009b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b24:	482c      	ldr	r0, [pc, #176]	; (8009bd8 <_vfiprintf_r+0x250>)
 8009b26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b2a:	2206      	movs	r2, #6
 8009b2c:	f7f6 fb78 	bl	8000220 <memchr>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d03f      	beq.n	8009bb4 <_vfiprintf_r+0x22c>
 8009b34:	4b29      	ldr	r3, [pc, #164]	; (8009bdc <_vfiprintf_r+0x254>)
 8009b36:	bb1b      	cbnz	r3, 8009b80 <_vfiprintf_r+0x1f8>
 8009b38:	9b03      	ldr	r3, [sp, #12]
 8009b3a:	3307      	adds	r3, #7
 8009b3c:	f023 0307 	bic.w	r3, r3, #7
 8009b40:	3308      	adds	r3, #8
 8009b42:	9303      	str	r3, [sp, #12]
 8009b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b46:	443b      	add	r3, r7
 8009b48:	9309      	str	r3, [sp, #36]	; 0x24
 8009b4a:	e767      	b.n	8009a1c <_vfiprintf_r+0x94>
 8009b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b50:	460c      	mov	r4, r1
 8009b52:	2001      	movs	r0, #1
 8009b54:	e7a5      	b.n	8009aa2 <_vfiprintf_r+0x11a>
 8009b56:	2300      	movs	r3, #0
 8009b58:	3401      	adds	r4, #1
 8009b5a:	9305      	str	r3, [sp, #20]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	f04f 0c0a 	mov.w	ip, #10
 8009b62:	4620      	mov	r0, r4
 8009b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b68:	3a30      	subs	r2, #48	; 0x30
 8009b6a:	2a09      	cmp	r2, #9
 8009b6c:	d903      	bls.n	8009b76 <_vfiprintf_r+0x1ee>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0c5      	beq.n	8009afe <_vfiprintf_r+0x176>
 8009b72:	9105      	str	r1, [sp, #20]
 8009b74:	e7c3      	b.n	8009afe <_vfiprintf_r+0x176>
 8009b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e7f0      	b.n	8009b62 <_vfiprintf_r+0x1da>
 8009b80:	ab03      	add	r3, sp, #12
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	462a      	mov	r2, r5
 8009b86:	4b16      	ldr	r3, [pc, #88]	; (8009be0 <_vfiprintf_r+0x258>)
 8009b88:	a904      	add	r1, sp, #16
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f3af 8000 	nop.w
 8009b90:	4607      	mov	r7, r0
 8009b92:	1c78      	adds	r0, r7, #1
 8009b94:	d1d6      	bne.n	8009b44 <_vfiprintf_r+0x1bc>
 8009b96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b98:	07d9      	lsls	r1, r3, #31
 8009b9a:	d405      	bmi.n	8009ba8 <_vfiprintf_r+0x220>
 8009b9c:	89ab      	ldrh	r3, [r5, #12]
 8009b9e:	059a      	lsls	r2, r3, #22
 8009ba0:	d402      	bmi.n	8009ba8 <_vfiprintf_r+0x220>
 8009ba2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ba4:	f7ff fcd5 	bl	8009552 <__retarget_lock_release_recursive>
 8009ba8:	89ab      	ldrh	r3, [r5, #12]
 8009baa:	065b      	lsls	r3, r3, #25
 8009bac:	f53f af12 	bmi.w	80099d4 <_vfiprintf_r+0x4c>
 8009bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bb2:	e711      	b.n	80099d8 <_vfiprintf_r+0x50>
 8009bb4:	ab03      	add	r3, sp, #12
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	462a      	mov	r2, r5
 8009bba:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <_vfiprintf_r+0x258>)
 8009bbc:	a904      	add	r1, sp, #16
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f000 f880 	bl	8009cc4 <_printf_i>
 8009bc4:	e7e4      	b.n	8009b90 <_vfiprintf_r+0x208>
 8009bc6:	bf00      	nop
 8009bc8:	0800ba4c 	.word	0x0800ba4c
 8009bcc:	0800ba6c 	.word	0x0800ba6c
 8009bd0:	0800ba2c 	.word	0x0800ba2c
 8009bd4:	0800ba8c 	.word	0x0800ba8c
 8009bd8:	0800ba96 	.word	0x0800ba96
 8009bdc:	00000000 	.word	0x00000000
 8009be0:	08009963 	.word	0x08009963
 8009be4:	0800ba92 	.word	0x0800ba92

08009be8 <_printf_common>:
 8009be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bec:	4616      	mov	r6, r2
 8009bee:	4699      	mov	r9, r3
 8009bf0:	688a      	ldr	r2, [r1, #8]
 8009bf2:	690b      	ldr	r3, [r1, #16]
 8009bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	bfb8      	it	lt
 8009bfc:	4613      	movlt	r3, r2
 8009bfe:	6033      	str	r3, [r6, #0]
 8009c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c04:	4607      	mov	r7, r0
 8009c06:	460c      	mov	r4, r1
 8009c08:	b10a      	cbz	r2, 8009c0e <_printf_common+0x26>
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	6033      	str	r3, [r6, #0]
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	0699      	lsls	r1, r3, #26
 8009c12:	bf42      	ittt	mi
 8009c14:	6833      	ldrmi	r3, [r6, #0]
 8009c16:	3302      	addmi	r3, #2
 8009c18:	6033      	strmi	r3, [r6, #0]
 8009c1a:	6825      	ldr	r5, [r4, #0]
 8009c1c:	f015 0506 	ands.w	r5, r5, #6
 8009c20:	d106      	bne.n	8009c30 <_printf_common+0x48>
 8009c22:	f104 0a19 	add.w	sl, r4, #25
 8009c26:	68e3      	ldr	r3, [r4, #12]
 8009c28:	6832      	ldr	r2, [r6, #0]
 8009c2a:	1a9b      	subs	r3, r3, r2
 8009c2c:	42ab      	cmp	r3, r5
 8009c2e:	dc26      	bgt.n	8009c7e <_printf_common+0x96>
 8009c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c34:	1e13      	subs	r3, r2, #0
 8009c36:	6822      	ldr	r2, [r4, #0]
 8009c38:	bf18      	it	ne
 8009c3a:	2301      	movne	r3, #1
 8009c3c:	0692      	lsls	r2, r2, #26
 8009c3e:	d42b      	bmi.n	8009c98 <_printf_common+0xb0>
 8009c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c44:	4649      	mov	r1, r9
 8009c46:	4638      	mov	r0, r7
 8009c48:	47c0      	blx	r8
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	d01e      	beq.n	8009c8c <_printf_common+0xa4>
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	68e5      	ldr	r5, [r4, #12]
 8009c52:	6832      	ldr	r2, [r6, #0]
 8009c54:	f003 0306 	and.w	r3, r3, #6
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	bf08      	it	eq
 8009c5c:	1aad      	subeq	r5, r5, r2
 8009c5e:	68a3      	ldr	r3, [r4, #8]
 8009c60:	6922      	ldr	r2, [r4, #16]
 8009c62:	bf0c      	ite	eq
 8009c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c68:	2500      	movne	r5, #0
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	bfc4      	itt	gt
 8009c6e:	1a9b      	subgt	r3, r3, r2
 8009c70:	18ed      	addgt	r5, r5, r3
 8009c72:	2600      	movs	r6, #0
 8009c74:	341a      	adds	r4, #26
 8009c76:	42b5      	cmp	r5, r6
 8009c78:	d11a      	bne.n	8009cb0 <_printf_common+0xc8>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	e008      	b.n	8009c90 <_printf_common+0xa8>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	4652      	mov	r2, sl
 8009c82:	4649      	mov	r1, r9
 8009c84:	4638      	mov	r0, r7
 8009c86:	47c0      	blx	r8
 8009c88:	3001      	adds	r0, #1
 8009c8a:	d103      	bne.n	8009c94 <_printf_common+0xac>
 8009c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c94:	3501      	adds	r5, #1
 8009c96:	e7c6      	b.n	8009c26 <_printf_common+0x3e>
 8009c98:	18e1      	adds	r1, r4, r3
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	2030      	movs	r0, #48	; 0x30
 8009c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ca2:	4422      	add	r2, r4
 8009ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cac:	3302      	adds	r3, #2
 8009cae:	e7c7      	b.n	8009c40 <_printf_common+0x58>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	4622      	mov	r2, r4
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	47c0      	blx	r8
 8009cba:	3001      	adds	r0, #1
 8009cbc:	d0e6      	beq.n	8009c8c <_printf_common+0xa4>
 8009cbe:	3601      	adds	r6, #1
 8009cc0:	e7d9      	b.n	8009c76 <_printf_common+0x8e>
	...

08009cc4 <_printf_i>:
 8009cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc8:	7e0f      	ldrb	r7, [r1, #24]
 8009cca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ccc:	2f78      	cmp	r7, #120	; 0x78
 8009cce:	4691      	mov	r9, r2
 8009cd0:	4680      	mov	r8, r0
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	469a      	mov	sl, r3
 8009cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cda:	d807      	bhi.n	8009cec <_printf_i+0x28>
 8009cdc:	2f62      	cmp	r7, #98	; 0x62
 8009cde:	d80a      	bhi.n	8009cf6 <_printf_i+0x32>
 8009ce0:	2f00      	cmp	r7, #0
 8009ce2:	f000 80d8 	beq.w	8009e96 <_printf_i+0x1d2>
 8009ce6:	2f58      	cmp	r7, #88	; 0x58
 8009ce8:	f000 80a3 	beq.w	8009e32 <_printf_i+0x16e>
 8009cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cf4:	e03a      	b.n	8009d6c <_printf_i+0xa8>
 8009cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cfa:	2b15      	cmp	r3, #21
 8009cfc:	d8f6      	bhi.n	8009cec <_printf_i+0x28>
 8009cfe:	a101      	add	r1, pc, #4	; (adr r1, 8009d04 <_printf_i+0x40>)
 8009d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d04:	08009d5d 	.word	0x08009d5d
 8009d08:	08009d71 	.word	0x08009d71
 8009d0c:	08009ced 	.word	0x08009ced
 8009d10:	08009ced 	.word	0x08009ced
 8009d14:	08009ced 	.word	0x08009ced
 8009d18:	08009ced 	.word	0x08009ced
 8009d1c:	08009d71 	.word	0x08009d71
 8009d20:	08009ced 	.word	0x08009ced
 8009d24:	08009ced 	.word	0x08009ced
 8009d28:	08009ced 	.word	0x08009ced
 8009d2c:	08009ced 	.word	0x08009ced
 8009d30:	08009e7d 	.word	0x08009e7d
 8009d34:	08009da1 	.word	0x08009da1
 8009d38:	08009e5f 	.word	0x08009e5f
 8009d3c:	08009ced 	.word	0x08009ced
 8009d40:	08009ced 	.word	0x08009ced
 8009d44:	08009e9f 	.word	0x08009e9f
 8009d48:	08009ced 	.word	0x08009ced
 8009d4c:	08009da1 	.word	0x08009da1
 8009d50:	08009ced 	.word	0x08009ced
 8009d54:	08009ced 	.word	0x08009ced
 8009d58:	08009e67 	.word	0x08009e67
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	1d1a      	adds	r2, r3, #4
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	602a      	str	r2, [r5, #0]
 8009d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e0a3      	b.n	8009eb8 <_printf_i+0x1f4>
 8009d70:	6820      	ldr	r0, [r4, #0]
 8009d72:	6829      	ldr	r1, [r5, #0]
 8009d74:	0606      	lsls	r6, r0, #24
 8009d76:	f101 0304 	add.w	r3, r1, #4
 8009d7a:	d50a      	bpl.n	8009d92 <_printf_i+0xce>
 8009d7c:	680e      	ldr	r6, [r1, #0]
 8009d7e:	602b      	str	r3, [r5, #0]
 8009d80:	2e00      	cmp	r6, #0
 8009d82:	da03      	bge.n	8009d8c <_printf_i+0xc8>
 8009d84:	232d      	movs	r3, #45	; 0x2d
 8009d86:	4276      	negs	r6, r6
 8009d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d8c:	485e      	ldr	r0, [pc, #376]	; (8009f08 <_printf_i+0x244>)
 8009d8e:	230a      	movs	r3, #10
 8009d90:	e019      	b.n	8009dc6 <_printf_i+0x102>
 8009d92:	680e      	ldr	r6, [r1, #0]
 8009d94:	602b      	str	r3, [r5, #0]
 8009d96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d9a:	bf18      	it	ne
 8009d9c:	b236      	sxthne	r6, r6
 8009d9e:	e7ef      	b.n	8009d80 <_printf_i+0xbc>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	6820      	ldr	r0, [r4, #0]
 8009da4:	1d19      	adds	r1, r3, #4
 8009da6:	6029      	str	r1, [r5, #0]
 8009da8:	0601      	lsls	r1, r0, #24
 8009daa:	d501      	bpl.n	8009db0 <_printf_i+0xec>
 8009dac:	681e      	ldr	r6, [r3, #0]
 8009dae:	e002      	b.n	8009db6 <_printf_i+0xf2>
 8009db0:	0646      	lsls	r6, r0, #25
 8009db2:	d5fb      	bpl.n	8009dac <_printf_i+0xe8>
 8009db4:	881e      	ldrh	r6, [r3, #0]
 8009db6:	4854      	ldr	r0, [pc, #336]	; (8009f08 <_printf_i+0x244>)
 8009db8:	2f6f      	cmp	r7, #111	; 0x6f
 8009dba:	bf0c      	ite	eq
 8009dbc:	2308      	moveq	r3, #8
 8009dbe:	230a      	movne	r3, #10
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dc6:	6865      	ldr	r5, [r4, #4]
 8009dc8:	60a5      	str	r5, [r4, #8]
 8009dca:	2d00      	cmp	r5, #0
 8009dcc:	bfa2      	ittt	ge
 8009dce:	6821      	ldrge	r1, [r4, #0]
 8009dd0:	f021 0104 	bicge.w	r1, r1, #4
 8009dd4:	6021      	strge	r1, [r4, #0]
 8009dd6:	b90e      	cbnz	r6, 8009ddc <_printf_i+0x118>
 8009dd8:	2d00      	cmp	r5, #0
 8009dda:	d04d      	beq.n	8009e78 <_printf_i+0x1b4>
 8009ddc:	4615      	mov	r5, r2
 8009dde:	fbb6 f1f3 	udiv	r1, r6, r3
 8009de2:	fb03 6711 	mls	r7, r3, r1, r6
 8009de6:	5dc7      	ldrb	r7, [r0, r7]
 8009de8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009dec:	4637      	mov	r7, r6
 8009dee:	42bb      	cmp	r3, r7
 8009df0:	460e      	mov	r6, r1
 8009df2:	d9f4      	bls.n	8009dde <_printf_i+0x11a>
 8009df4:	2b08      	cmp	r3, #8
 8009df6:	d10b      	bne.n	8009e10 <_printf_i+0x14c>
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	07de      	lsls	r6, r3, #31
 8009dfc:	d508      	bpl.n	8009e10 <_printf_i+0x14c>
 8009dfe:	6923      	ldr	r3, [r4, #16]
 8009e00:	6861      	ldr	r1, [r4, #4]
 8009e02:	4299      	cmp	r1, r3
 8009e04:	bfde      	ittt	le
 8009e06:	2330      	movle	r3, #48	; 0x30
 8009e08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e10:	1b52      	subs	r2, r2, r5
 8009e12:	6122      	str	r2, [r4, #16]
 8009e14:	f8cd a000 	str.w	sl, [sp]
 8009e18:	464b      	mov	r3, r9
 8009e1a:	aa03      	add	r2, sp, #12
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	4640      	mov	r0, r8
 8009e20:	f7ff fee2 	bl	8009be8 <_printf_common>
 8009e24:	3001      	adds	r0, #1
 8009e26:	d14c      	bne.n	8009ec2 <_printf_i+0x1fe>
 8009e28:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2c:	b004      	add	sp, #16
 8009e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e32:	4835      	ldr	r0, [pc, #212]	; (8009f08 <_printf_i+0x244>)
 8009e34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e38:	6829      	ldr	r1, [r5, #0]
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e40:	6029      	str	r1, [r5, #0]
 8009e42:	061d      	lsls	r5, r3, #24
 8009e44:	d514      	bpl.n	8009e70 <_printf_i+0x1ac>
 8009e46:	07df      	lsls	r7, r3, #31
 8009e48:	bf44      	itt	mi
 8009e4a:	f043 0320 	orrmi.w	r3, r3, #32
 8009e4e:	6023      	strmi	r3, [r4, #0]
 8009e50:	b91e      	cbnz	r6, 8009e5a <_printf_i+0x196>
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	f023 0320 	bic.w	r3, r3, #32
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	2310      	movs	r3, #16
 8009e5c:	e7b0      	b.n	8009dc0 <_printf_i+0xfc>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	f043 0320 	orr.w	r3, r3, #32
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	2378      	movs	r3, #120	; 0x78
 8009e68:	4828      	ldr	r0, [pc, #160]	; (8009f0c <_printf_i+0x248>)
 8009e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e6e:	e7e3      	b.n	8009e38 <_printf_i+0x174>
 8009e70:	0659      	lsls	r1, r3, #25
 8009e72:	bf48      	it	mi
 8009e74:	b2b6      	uxthmi	r6, r6
 8009e76:	e7e6      	b.n	8009e46 <_printf_i+0x182>
 8009e78:	4615      	mov	r5, r2
 8009e7a:	e7bb      	b.n	8009df4 <_printf_i+0x130>
 8009e7c:	682b      	ldr	r3, [r5, #0]
 8009e7e:	6826      	ldr	r6, [r4, #0]
 8009e80:	6961      	ldr	r1, [r4, #20]
 8009e82:	1d18      	adds	r0, r3, #4
 8009e84:	6028      	str	r0, [r5, #0]
 8009e86:	0635      	lsls	r5, r6, #24
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	d501      	bpl.n	8009e90 <_printf_i+0x1cc>
 8009e8c:	6019      	str	r1, [r3, #0]
 8009e8e:	e002      	b.n	8009e96 <_printf_i+0x1d2>
 8009e90:	0670      	lsls	r0, r6, #25
 8009e92:	d5fb      	bpl.n	8009e8c <_printf_i+0x1c8>
 8009e94:	8019      	strh	r1, [r3, #0]
 8009e96:	2300      	movs	r3, #0
 8009e98:	6123      	str	r3, [r4, #16]
 8009e9a:	4615      	mov	r5, r2
 8009e9c:	e7ba      	b.n	8009e14 <_printf_i+0x150>
 8009e9e:	682b      	ldr	r3, [r5, #0]
 8009ea0:	1d1a      	adds	r2, r3, #4
 8009ea2:	602a      	str	r2, [r5, #0]
 8009ea4:	681d      	ldr	r5, [r3, #0]
 8009ea6:	6862      	ldr	r2, [r4, #4]
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f7f6 f9b8 	bl	8000220 <memchr>
 8009eb0:	b108      	cbz	r0, 8009eb6 <_printf_i+0x1f2>
 8009eb2:	1b40      	subs	r0, r0, r5
 8009eb4:	6060      	str	r0, [r4, #4]
 8009eb6:	6863      	ldr	r3, [r4, #4]
 8009eb8:	6123      	str	r3, [r4, #16]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ec0:	e7a8      	b.n	8009e14 <_printf_i+0x150>
 8009ec2:	6923      	ldr	r3, [r4, #16]
 8009ec4:	462a      	mov	r2, r5
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	4640      	mov	r0, r8
 8009eca:	47d0      	blx	sl
 8009ecc:	3001      	adds	r0, #1
 8009ece:	d0ab      	beq.n	8009e28 <_printf_i+0x164>
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	079b      	lsls	r3, r3, #30
 8009ed4:	d413      	bmi.n	8009efe <_printf_i+0x23a>
 8009ed6:	68e0      	ldr	r0, [r4, #12]
 8009ed8:	9b03      	ldr	r3, [sp, #12]
 8009eda:	4298      	cmp	r0, r3
 8009edc:	bfb8      	it	lt
 8009ede:	4618      	movlt	r0, r3
 8009ee0:	e7a4      	b.n	8009e2c <_printf_i+0x168>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	4632      	mov	r2, r6
 8009ee6:	4649      	mov	r1, r9
 8009ee8:	4640      	mov	r0, r8
 8009eea:	47d0      	blx	sl
 8009eec:	3001      	adds	r0, #1
 8009eee:	d09b      	beq.n	8009e28 <_printf_i+0x164>
 8009ef0:	3501      	adds	r5, #1
 8009ef2:	68e3      	ldr	r3, [r4, #12]
 8009ef4:	9903      	ldr	r1, [sp, #12]
 8009ef6:	1a5b      	subs	r3, r3, r1
 8009ef8:	42ab      	cmp	r3, r5
 8009efa:	dcf2      	bgt.n	8009ee2 <_printf_i+0x21e>
 8009efc:	e7eb      	b.n	8009ed6 <_printf_i+0x212>
 8009efe:	2500      	movs	r5, #0
 8009f00:	f104 0619 	add.w	r6, r4, #25
 8009f04:	e7f5      	b.n	8009ef2 <_printf_i+0x22e>
 8009f06:	bf00      	nop
 8009f08:	0800ba9d 	.word	0x0800ba9d
 8009f0c:	0800baae 	.word	0x0800baae

08009f10 <_sbrk_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4d06      	ldr	r5, [pc, #24]	; (8009f2c <_sbrk_r+0x1c>)
 8009f14:	2300      	movs	r3, #0
 8009f16:	4604      	mov	r4, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	602b      	str	r3, [r5, #0]
 8009f1c:	f7f8 fabc 	bl	8002498 <_sbrk>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_sbrk_r+0x1a>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_sbrk_r+0x1a>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	20002920 	.word	0x20002920

08009f30 <__sread>:
 8009f30:	b510      	push	{r4, lr}
 8009f32:	460c      	mov	r4, r1
 8009f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f38:	f000 fb0a 	bl	800a550 <_read_r>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	bfab      	itete	ge
 8009f40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f42:	89a3      	ldrhlt	r3, [r4, #12]
 8009f44:	181b      	addge	r3, r3, r0
 8009f46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f4a:	bfac      	ite	ge
 8009f4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f4e:	81a3      	strhlt	r3, [r4, #12]
 8009f50:	bd10      	pop	{r4, pc}

08009f52 <__swrite>:
 8009f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f56:	461f      	mov	r7, r3
 8009f58:	898b      	ldrh	r3, [r1, #12]
 8009f5a:	05db      	lsls	r3, r3, #23
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	460c      	mov	r4, r1
 8009f60:	4616      	mov	r6, r2
 8009f62:	d505      	bpl.n	8009f70 <__swrite+0x1e>
 8009f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f68:	2302      	movs	r3, #2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f000 f9c8 	bl	800a300 <_lseek_r>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f7a:	81a3      	strh	r3, [r4, #12]
 8009f7c:	4632      	mov	r2, r6
 8009f7e:	463b      	mov	r3, r7
 8009f80:	4628      	mov	r0, r5
 8009f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f86:	f000 b869 	b.w	800a05c <_write_r>

08009f8a <__sseek>:
 8009f8a:	b510      	push	{r4, lr}
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f92:	f000 f9b5 	bl	800a300 <_lseek_r>
 8009f96:	1c43      	adds	r3, r0, #1
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	bf15      	itete	ne
 8009f9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009fa6:	81a3      	strheq	r3, [r4, #12]
 8009fa8:	bf18      	it	ne
 8009faa:	81a3      	strhne	r3, [r4, #12]
 8009fac:	bd10      	pop	{r4, pc}

08009fae <__sclose>:
 8009fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb2:	f000 b8d3 	b.w	800a15c <_close_r>
	...

08009fb8 <__swbuf_r>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	460e      	mov	r6, r1
 8009fbc:	4614      	mov	r4, r2
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	b118      	cbz	r0, 8009fca <__swbuf_r+0x12>
 8009fc2:	6983      	ldr	r3, [r0, #24]
 8009fc4:	b90b      	cbnz	r3, 8009fca <__swbuf_r+0x12>
 8009fc6:	f7ff fa25 	bl	8009414 <__sinit>
 8009fca:	4b21      	ldr	r3, [pc, #132]	; (800a050 <__swbuf_r+0x98>)
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d12b      	bne.n	800a028 <__swbuf_r+0x70>
 8009fd0:	686c      	ldr	r4, [r5, #4]
 8009fd2:	69a3      	ldr	r3, [r4, #24]
 8009fd4:	60a3      	str	r3, [r4, #8]
 8009fd6:	89a3      	ldrh	r3, [r4, #12]
 8009fd8:	071a      	lsls	r2, r3, #28
 8009fda:	d52f      	bpl.n	800a03c <__swbuf_r+0x84>
 8009fdc:	6923      	ldr	r3, [r4, #16]
 8009fde:	b36b      	cbz	r3, 800a03c <__swbuf_r+0x84>
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	6820      	ldr	r0, [r4, #0]
 8009fe4:	1ac0      	subs	r0, r0, r3
 8009fe6:	6963      	ldr	r3, [r4, #20]
 8009fe8:	b2f6      	uxtb	r6, r6
 8009fea:	4283      	cmp	r3, r0
 8009fec:	4637      	mov	r7, r6
 8009fee:	dc04      	bgt.n	8009ffa <__swbuf_r+0x42>
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f000 f948 	bl	800a288 <_fflush_r>
 8009ff8:	bb30      	cbnz	r0, 800a048 <__swbuf_r+0x90>
 8009ffa:	68a3      	ldr	r3, [r4, #8]
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	60a3      	str	r3, [r4, #8]
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	6022      	str	r2, [r4, #0]
 800a006:	701e      	strb	r6, [r3, #0]
 800a008:	6963      	ldr	r3, [r4, #20]
 800a00a:	3001      	adds	r0, #1
 800a00c:	4283      	cmp	r3, r0
 800a00e:	d004      	beq.n	800a01a <__swbuf_r+0x62>
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	07db      	lsls	r3, r3, #31
 800a014:	d506      	bpl.n	800a024 <__swbuf_r+0x6c>
 800a016:	2e0a      	cmp	r6, #10
 800a018:	d104      	bne.n	800a024 <__swbuf_r+0x6c>
 800a01a:	4621      	mov	r1, r4
 800a01c:	4628      	mov	r0, r5
 800a01e:	f000 f933 	bl	800a288 <_fflush_r>
 800a022:	b988      	cbnz	r0, 800a048 <__swbuf_r+0x90>
 800a024:	4638      	mov	r0, r7
 800a026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a028:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <__swbuf_r+0x9c>)
 800a02a:	429c      	cmp	r4, r3
 800a02c:	d101      	bne.n	800a032 <__swbuf_r+0x7a>
 800a02e:	68ac      	ldr	r4, [r5, #8]
 800a030:	e7cf      	b.n	8009fd2 <__swbuf_r+0x1a>
 800a032:	4b09      	ldr	r3, [pc, #36]	; (800a058 <__swbuf_r+0xa0>)
 800a034:	429c      	cmp	r4, r3
 800a036:	bf08      	it	eq
 800a038:	68ec      	ldreq	r4, [r5, #12]
 800a03a:	e7ca      	b.n	8009fd2 <__swbuf_r+0x1a>
 800a03c:	4621      	mov	r1, r4
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 f81e 	bl	800a080 <__swsetup_r>
 800a044:	2800      	cmp	r0, #0
 800a046:	d0cb      	beq.n	8009fe0 <__swbuf_r+0x28>
 800a048:	f04f 37ff 	mov.w	r7, #4294967295
 800a04c:	e7ea      	b.n	800a024 <__swbuf_r+0x6c>
 800a04e:	bf00      	nop
 800a050:	0800ba4c 	.word	0x0800ba4c
 800a054:	0800ba6c 	.word	0x0800ba6c
 800a058:	0800ba2c 	.word	0x0800ba2c

0800a05c <_write_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d07      	ldr	r5, [pc, #28]	; (800a07c <_write_r+0x20>)
 800a060:	4604      	mov	r4, r0
 800a062:	4608      	mov	r0, r1
 800a064:	4611      	mov	r1, r2
 800a066:	2200      	movs	r2, #0
 800a068:	602a      	str	r2, [r5, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	f7f7 fc1e 	bl	80018ac <_write>
 800a070:	1c43      	adds	r3, r0, #1
 800a072:	d102      	bne.n	800a07a <_write_r+0x1e>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	b103      	cbz	r3, 800a07a <_write_r+0x1e>
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	20002920 	.word	0x20002920

0800a080 <__swsetup_r>:
 800a080:	4b32      	ldr	r3, [pc, #200]	; (800a14c <__swsetup_r+0xcc>)
 800a082:	b570      	push	{r4, r5, r6, lr}
 800a084:	681d      	ldr	r5, [r3, #0]
 800a086:	4606      	mov	r6, r0
 800a088:	460c      	mov	r4, r1
 800a08a:	b125      	cbz	r5, 800a096 <__swsetup_r+0x16>
 800a08c:	69ab      	ldr	r3, [r5, #24]
 800a08e:	b913      	cbnz	r3, 800a096 <__swsetup_r+0x16>
 800a090:	4628      	mov	r0, r5
 800a092:	f7ff f9bf 	bl	8009414 <__sinit>
 800a096:	4b2e      	ldr	r3, [pc, #184]	; (800a150 <__swsetup_r+0xd0>)
 800a098:	429c      	cmp	r4, r3
 800a09a:	d10f      	bne.n	800a0bc <__swsetup_r+0x3c>
 800a09c:	686c      	ldr	r4, [r5, #4]
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0a4:	0719      	lsls	r1, r3, #28
 800a0a6:	d42c      	bmi.n	800a102 <__swsetup_r+0x82>
 800a0a8:	06dd      	lsls	r5, r3, #27
 800a0aa:	d411      	bmi.n	800a0d0 <__swsetup_r+0x50>
 800a0ac:	2309      	movs	r3, #9
 800a0ae:	6033      	str	r3, [r6, #0]
 800a0b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0b4:	81a3      	strh	r3, [r4, #12]
 800a0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ba:	e03e      	b.n	800a13a <__swsetup_r+0xba>
 800a0bc:	4b25      	ldr	r3, [pc, #148]	; (800a154 <__swsetup_r+0xd4>)
 800a0be:	429c      	cmp	r4, r3
 800a0c0:	d101      	bne.n	800a0c6 <__swsetup_r+0x46>
 800a0c2:	68ac      	ldr	r4, [r5, #8]
 800a0c4:	e7eb      	b.n	800a09e <__swsetup_r+0x1e>
 800a0c6:	4b24      	ldr	r3, [pc, #144]	; (800a158 <__swsetup_r+0xd8>)
 800a0c8:	429c      	cmp	r4, r3
 800a0ca:	bf08      	it	eq
 800a0cc:	68ec      	ldreq	r4, [r5, #12]
 800a0ce:	e7e6      	b.n	800a09e <__swsetup_r+0x1e>
 800a0d0:	0758      	lsls	r0, r3, #29
 800a0d2:	d512      	bpl.n	800a0fa <__swsetup_r+0x7a>
 800a0d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0d6:	b141      	cbz	r1, 800a0ea <__swsetup_r+0x6a>
 800a0d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0dc:	4299      	cmp	r1, r3
 800a0de:	d002      	beq.n	800a0e6 <__swsetup_r+0x66>
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f000 f9b9 	bl	800a458 <_free_r>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	6363      	str	r3, [r4, #52]	; 0x34
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0f0:	81a3      	strh	r3, [r4, #12]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	6063      	str	r3, [r4, #4]
 800a0f6:	6923      	ldr	r3, [r4, #16]
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	89a3      	ldrh	r3, [r4, #12]
 800a0fc:	f043 0308 	orr.w	r3, r3, #8
 800a100:	81a3      	strh	r3, [r4, #12]
 800a102:	6923      	ldr	r3, [r4, #16]
 800a104:	b94b      	cbnz	r3, 800a11a <__swsetup_r+0x9a>
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a10c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a110:	d003      	beq.n	800a11a <__swsetup_r+0x9a>
 800a112:	4621      	mov	r1, r4
 800a114:	4630      	mov	r0, r6
 800a116:	f000 f92b 	bl	800a370 <__smakebuf_r>
 800a11a:	89a0      	ldrh	r0, [r4, #12]
 800a11c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a120:	f010 0301 	ands.w	r3, r0, #1
 800a124:	d00a      	beq.n	800a13c <__swsetup_r+0xbc>
 800a126:	2300      	movs	r3, #0
 800a128:	60a3      	str	r3, [r4, #8]
 800a12a:	6963      	ldr	r3, [r4, #20]
 800a12c:	425b      	negs	r3, r3
 800a12e:	61a3      	str	r3, [r4, #24]
 800a130:	6923      	ldr	r3, [r4, #16]
 800a132:	b943      	cbnz	r3, 800a146 <__swsetup_r+0xc6>
 800a134:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a138:	d1ba      	bne.n	800a0b0 <__swsetup_r+0x30>
 800a13a:	bd70      	pop	{r4, r5, r6, pc}
 800a13c:	0781      	lsls	r1, r0, #30
 800a13e:	bf58      	it	pl
 800a140:	6963      	ldrpl	r3, [r4, #20]
 800a142:	60a3      	str	r3, [r4, #8]
 800a144:	e7f4      	b.n	800a130 <__swsetup_r+0xb0>
 800a146:	2000      	movs	r0, #0
 800a148:	e7f7      	b.n	800a13a <__swsetup_r+0xba>
 800a14a:	bf00      	nop
 800a14c:	20000024 	.word	0x20000024
 800a150:	0800ba4c 	.word	0x0800ba4c
 800a154:	0800ba6c 	.word	0x0800ba6c
 800a158:	0800ba2c 	.word	0x0800ba2c

0800a15c <_close_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4d06      	ldr	r5, [pc, #24]	; (800a178 <_close_r+0x1c>)
 800a160:	2300      	movs	r3, #0
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	602b      	str	r3, [r5, #0]
 800a168:	f7f8 f961 	bl	800242e <_close>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_close_r+0x1a>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b103      	cbz	r3, 800a176 <_close_r+0x1a>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	20002920 	.word	0x20002920

0800a17c <__sflush_r>:
 800a17c:	898a      	ldrh	r2, [r1, #12]
 800a17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a182:	4605      	mov	r5, r0
 800a184:	0710      	lsls	r0, r2, #28
 800a186:	460c      	mov	r4, r1
 800a188:	d458      	bmi.n	800a23c <__sflush_r+0xc0>
 800a18a:	684b      	ldr	r3, [r1, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dc05      	bgt.n	800a19c <__sflush_r+0x20>
 800a190:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a192:	2b00      	cmp	r3, #0
 800a194:	dc02      	bgt.n	800a19c <__sflush_r+0x20>
 800a196:	2000      	movs	r0, #0
 800a198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a19c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a19e:	2e00      	cmp	r6, #0
 800a1a0:	d0f9      	beq.n	800a196 <__sflush_r+0x1a>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1a8:	682f      	ldr	r7, [r5, #0]
 800a1aa:	602b      	str	r3, [r5, #0]
 800a1ac:	d032      	beq.n	800a214 <__sflush_r+0x98>
 800a1ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	075a      	lsls	r2, r3, #29
 800a1b4:	d505      	bpl.n	800a1c2 <__sflush_r+0x46>
 800a1b6:	6863      	ldr	r3, [r4, #4]
 800a1b8:	1ac0      	subs	r0, r0, r3
 800a1ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1bc:	b10b      	cbz	r3, 800a1c2 <__sflush_r+0x46>
 800a1be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1c0:	1ac0      	subs	r0, r0, r3
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1c8:	6a21      	ldr	r1, [r4, #32]
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b0      	blx	r6
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	d106      	bne.n	800a1e2 <__sflush_r+0x66>
 800a1d4:	6829      	ldr	r1, [r5, #0]
 800a1d6:	291d      	cmp	r1, #29
 800a1d8:	d82c      	bhi.n	800a234 <__sflush_r+0xb8>
 800a1da:	4a2a      	ldr	r2, [pc, #168]	; (800a284 <__sflush_r+0x108>)
 800a1dc:	40ca      	lsrs	r2, r1
 800a1de:	07d6      	lsls	r6, r2, #31
 800a1e0:	d528      	bpl.n	800a234 <__sflush_r+0xb8>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	6062      	str	r2, [r4, #4]
 800a1e6:	04d9      	lsls	r1, r3, #19
 800a1e8:	6922      	ldr	r2, [r4, #16]
 800a1ea:	6022      	str	r2, [r4, #0]
 800a1ec:	d504      	bpl.n	800a1f8 <__sflush_r+0x7c>
 800a1ee:	1c42      	adds	r2, r0, #1
 800a1f0:	d101      	bne.n	800a1f6 <__sflush_r+0x7a>
 800a1f2:	682b      	ldr	r3, [r5, #0]
 800a1f4:	b903      	cbnz	r3, 800a1f8 <__sflush_r+0x7c>
 800a1f6:	6560      	str	r0, [r4, #84]	; 0x54
 800a1f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1fa:	602f      	str	r7, [r5, #0]
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	d0ca      	beq.n	800a196 <__sflush_r+0x1a>
 800a200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a204:	4299      	cmp	r1, r3
 800a206:	d002      	beq.n	800a20e <__sflush_r+0x92>
 800a208:	4628      	mov	r0, r5
 800a20a:	f000 f925 	bl	800a458 <_free_r>
 800a20e:	2000      	movs	r0, #0
 800a210:	6360      	str	r0, [r4, #52]	; 0x34
 800a212:	e7c1      	b.n	800a198 <__sflush_r+0x1c>
 800a214:	6a21      	ldr	r1, [r4, #32]
 800a216:	2301      	movs	r3, #1
 800a218:	4628      	mov	r0, r5
 800a21a:	47b0      	blx	r6
 800a21c:	1c41      	adds	r1, r0, #1
 800a21e:	d1c7      	bne.n	800a1b0 <__sflush_r+0x34>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0c4      	beq.n	800a1b0 <__sflush_r+0x34>
 800a226:	2b1d      	cmp	r3, #29
 800a228:	d001      	beq.n	800a22e <__sflush_r+0xb2>
 800a22a:	2b16      	cmp	r3, #22
 800a22c:	d101      	bne.n	800a232 <__sflush_r+0xb6>
 800a22e:	602f      	str	r7, [r5, #0]
 800a230:	e7b1      	b.n	800a196 <__sflush_r+0x1a>
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a238:	81a3      	strh	r3, [r4, #12]
 800a23a:	e7ad      	b.n	800a198 <__sflush_r+0x1c>
 800a23c:	690f      	ldr	r7, [r1, #16]
 800a23e:	2f00      	cmp	r7, #0
 800a240:	d0a9      	beq.n	800a196 <__sflush_r+0x1a>
 800a242:	0793      	lsls	r3, r2, #30
 800a244:	680e      	ldr	r6, [r1, #0]
 800a246:	bf08      	it	eq
 800a248:	694b      	ldreq	r3, [r1, #20]
 800a24a:	600f      	str	r7, [r1, #0]
 800a24c:	bf18      	it	ne
 800a24e:	2300      	movne	r3, #0
 800a250:	eba6 0807 	sub.w	r8, r6, r7
 800a254:	608b      	str	r3, [r1, #8]
 800a256:	f1b8 0f00 	cmp.w	r8, #0
 800a25a:	dd9c      	ble.n	800a196 <__sflush_r+0x1a>
 800a25c:	6a21      	ldr	r1, [r4, #32]
 800a25e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a260:	4643      	mov	r3, r8
 800a262:	463a      	mov	r2, r7
 800a264:	4628      	mov	r0, r5
 800a266:	47b0      	blx	r6
 800a268:	2800      	cmp	r0, #0
 800a26a:	dc06      	bgt.n	800a27a <__sflush_r+0xfe>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	e78e      	b.n	800a198 <__sflush_r+0x1c>
 800a27a:	4407      	add	r7, r0
 800a27c:	eba8 0800 	sub.w	r8, r8, r0
 800a280:	e7e9      	b.n	800a256 <__sflush_r+0xda>
 800a282:	bf00      	nop
 800a284:	20400001 	.word	0x20400001

0800a288 <_fflush_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	690b      	ldr	r3, [r1, #16]
 800a28c:	4605      	mov	r5, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	b913      	cbnz	r3, 800a298 <_fflush_r+0x10>
 800a292:	2500      	movs	r5, #0
 800a294:	4628      	mov	r0, r5
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	b118      	cbz	r0, 800a2a2 <_fflush_r+0x1a>
 800a29a:	6983      	ldr	r3, [r0, #24]
 800a29c:	b90b      	cbnz	r3, 800a2a2 <_fflush_r+0x1a>
 800a29e:	f7ff f8b9 	bl	8009414 <__sinit>
 800a2a2:	4b14      	ldr	r3, [pc, #80]	; (800a2f4 <_fflush_r+0x6c>)
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	d11b      	bne.n	800a2e0 <_fflush_r+0x58>
 800a2a8:	686c      	ldr	r4, [r5, #4]
 800a2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0ef      	beq.n	800a292 <_fflush_r+0xa>
 800a2b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2b4:	07d0      	lsls	r0, r2, #31
 800a2b6:	d404      	bmi.n	800a2c2 <_fflush_r+0x3a>
 800a2b8:	0599      	lsls	r1, r3, #22
 800a2ba:	d402      	bmi.n	800a2c2 <_fflush_r+0x3a>
 800a2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2be:	f7ff f947 	bl	8009550 <__retarget_lock_acquire_recursive>
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	f7ff ff59 	bl	800a17c <__sflush_r>
 800a2ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2cc:	07da      	lsls	r2, r3, #31
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	d4e0      	bmi.n	800a294 <_fflush_r+0xc>
 800a2d2:	89a3      	ldrh	r3, [r4, #12]
 800a2d4:	059b      	lsls	r3, r3, #22
 800a2d6:	d4dd      	bmi.n	800a294 <_fflush_r+0xc>
 800a2d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2da:	f7ff f93a 	bl	8009552 <__retarget_lock_release_recursive>
 800a2de:	e7d9      	b.n	800a294 <_fflush_r+0xc>
 800a2e0:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <_fflush_r+0x70>)
 800a2e2:	429c      	cmp	r4, r3
 800a2e4:	d101      	bne.n	800a2ea <_fflush_r+0x62>
 800a2e6:	68ac      	ldr	r4, [r5, #8]
 800a2e8:	e7df      	b.n	800a2aa <_fflush_r+0x22>
 800a2ea:	4b04      	ldr	r3, [pc, #16]	; (800a2fc <_fflush_r+0x74>)
 800a2ec:	429c      	cmp	r4, r3
 800a2ee:	bf08      	it	eq
 800a2f0:	68ec      	ldreq	r4, [r5, #12]
 800a2f2:	e7da      	b.n	800a2aa <_fflush_r+0x22>
 800a2f4:	0800ba4c 	.word	0x0800ba4c
 800a2f8:	0800ba6c 	.word	0x0800ba6c
 800a2fc:	0800ba2c 	.word	0x0800ba2c

0800a300 <_lseek_r>:
 800a300:	b538      	push	{r3, r4, r5, lr}
 800a302:	4d07      	ldr	r5, [pc, #28]	; (800a320 <_lseek_r+0x20>)
 800a304:	4604      	mov	r4, r0
 800a306:	4608      	mov	r0, r1
 800a308:	4611      	mov	r1, r2
 800a30a:	2200      	movs	r2, #0
 800a30c:	602a      	str	r2, [r5, #0]
 800a30e:	461a      	mov	r2, r3
 800a310:	f7f8 f8b4 	bl	800247c <_lseek>
 800a314:	1c43      	adds	r3, r0, #1
 800a316:	d102      	bne.n	800a31e <_lseek_r+0x1e>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	b103      	cbz	r3, 800a31e <_lseek_r+0x1e>
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	bd38      	pop	{r3, r4, r5, pc}
 800a320:	20002920 	.word	0x20002920

0800a324 <__swhatbuf_r>:
 800a324:	b570      	push	{r4, r5, r6, lr}
 800a326:	460e      	mov	r6, r1
 800a328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a32c:	2900      	cmp	r1, #0
 800a32e:	b096      	sub	sp, #88	; 0x58
 800a330:	4614      	mov	r4, r2
 800a332:	461d      	mov	r5, r3
 800a334:	da08      	bge.n	800a348 <__swhatbuf_r+0x24>
 800a336:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	602a      	str	r2, [r5, #0]
 800a33e:	061a      	lsls	r2, r3, #24
 800a340:	d410      	bmi.n	800a364 <__swhatbuf_r+0x40>
 800a342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a346:	e00e      	b.n	800a366 <__swhatbuf_r+0x42>
 800a348:	466a      	mov	r2, sp
 800a34a:	f000 f913 	bl	800a574 <_fstat_r>
 800a34e:	2800      	cmp	r0, #0
 800a350:	dbf1      	blt.n	800a336 <__swhatbuf_r+0x12>
 800a352:	9a01      	ldr	r2, [sp, #4]
 800a354:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a358:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a35c:	425a      	negs	r2, r3
 800a35e:	415a      	adcs	r2, r3
 800a360:	602a      	str	r2, [r5, #0]
 800a362:	e7ee      	b.n	800a342 <__swhatbuf_r+0x1e>
 800a364:	2340      	movs	r3, #64	; 0x40
 800a366:	2000      	movs	r0, #0
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	b016      	add	sp, #88	; 0x58
 800a36c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a370 <__smakebuf_r>:
 800a370:	898b      	ldrh	r3, [r1, #12]
 800a372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a374:	079d      	lsls	r5, r3, #30
 800a376:	4606      	mov	r6, r0
 800a378:	460c      	mov	r4, r1
 800a37a:	d507      	bpl.n	800a38c <__smakebuf_r+0x1c>
 800a37c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	6123      	str	r3, [r4, #16]
 800a384:	2301      	movs	r3, #1
 800a386:	6163      	str	r3, [r4, #20]
 800a388:	b002      	add	sp, #8
 800a38a:	bd70      	pop	{r4, r5, r6, pc}
 800a38c:	ab01      	add	r3, sp, #4
 800a38e:	466a      	mov	r2, sp
 800a390:	f7ff ffc8 	bl	800a324 <__swhatbuf_r>
 800a394:	9900      	ldr	r1, [sp, #0]
 800a396:	4605      	mov	r5, r0
 800a398:	4630      	mov	r0, r6
 800a39a:	f7ff f8fb 	bl	8009594 <_malloc_r>
 800a39e:	b948      	cbnz	r0, 800a3b4 <__smakebuf_r+0x44>
 800a3a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3a4:	059a      	lsls	r2, r3, #22
 800a3a6:	d4ef      	bmi.n	800a388 <__smakebuf_r+0x18>
 800a3a8:	f023 0303 	bic.w	r3, r3, #3
 800a3ac:	f043 0302 	orr.w	r3, r3, #2
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	e7e3      	b.n	800a37c <__smakebuf_r+0xc>
 800a3b4:	4b0d      	ldr	r3, [pc, #52]	; (800a3ec <__smakebuf_r+0x7c>)
 800a3b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	6020      	str	r0, [r4, #0]
 800a3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	9b00      	ldr	r3, [sp, #0]
 800a3c4:	6163      	str	r3, [r4, #20]
 800a3c6:	9b01      	ldr	r3, [sp, #4]
 800a3c8:	6120      	str	r0, [r4, #16]
 800a3ca:	b15b      	cbz	r3, 800a3e4 <__smakebuf_r+0x74>
 800a3cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f000 f8e1 	bl	800a598 <_isatty_r>
 800a3d6:	b128      	cbz	r0, 800a3e4 <__smakebuf_r+0x74>
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	f023 0303 	bic.w	r3, r3, #3
 800a3de:	f043 0301 	orr.w	r3, r3, #1
 800a3e2:	81a3      	strh	r3, [r4, #12]
 800a3e4:	89a0      	ldrh	r0, [r4, #12]
 800a3e6:	4305      	orrs	r5, r0
 800a3e8:	81a5      	strh	r5, [r4, #12]
 800a3ea:	e7cd      	b.n	800a388 <__smakebuf_r+0x18>
 800a3ec:	080093ad 	.word	0x080093ad

0800a3f0 <memcpy>:
 800a3f0:	440a      	add	r2, r1
 800a3f2:	4291      	cmp	r1, r2
 800a3f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3f8:	d100      	bne.n	800a3fc <memcpy+0xc>
 800a3fa:	4770      	bx	lr
 800a3fc:	b510      	push	{r4, lr}
 800a3fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a402:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a406:	4291      	cmp	r1, r2
 800a408:	d1f9      	bne.n	800a3fe <memcpy+0xe>
 800a40a:	bd10      	pop	{r4, pc}

0800a40c <memmove>:
 800a40c:	4288      	cmp	r0, r1
 800a40e:	b510      	push	{r4, lr}
 800a410:	eb01 0402 	add.w	r4, r1, r2
 800a414:	d902      	bls.n	800a41c <memmove+0x10>
 800a416:	4284      	cmp	r4, r0
 800a418:	4623      	mov	r3, r4
 800a41a:	d807      	bhi.n	800a42c <memmove+0x20>
 800a41c:	1e43      	subs	r3, r0, #1
 800a41e:	42a1      	cmp	r1, r4
 800a420:	d008      	beq.n	800a434 <memmove+0x28>
 800a422:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a42a:	e7f8      	b.n	800a41e <memmove+0x12>
 800a42c:	4402      	add	r2, r0
 800a42e:	4601      	mov	r1, r0
 800a430:	428a      	cmp	r2, r1
 800a432:	d100      	bne.n	800a436 <memmove+0x2a>
 800a434:	bd10      	pop	{r4, pc}
 800a436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a43a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a43e:	e7f7      	b.n	800a430 <memmove+0x24>

0800a440 <__malloc_lock>:
 800a440:	4801      	ldr	r0, [pc, #4]	; (800a448 <__malloc_lock+0x8>)
 800a442:	f7ff b885 	b.w	8009550 <__retarget_lock_acquire_recursive>
 800a446:	bf00      	nop
 800a448:	20002914 	.word	0x20002914

0800a44c <__malloc_unlock>:
 800a44c:	4801      	ldr	r0, [pc, #4]	; (800a454 <__malloc_unlock+0x8>)
 800a44e:	f7ff b880 	b.w	8009552 <__retarget_lock_release_recursive>
 800a452:	bf00      	nop
 800a454:	20002914 	.word	0x20002914

0800a458 <_free_r>:
 800a458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a45a:	2900      	cmp	r1, #0
 800a45c:	d044      	beq.n	800a4e8 <_free_r+0x90>
 800a45e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a462:	9001      	str	r0, [sp, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	f1a1 0404 	sub.w	r4, r1, #4
 800a46a:	bfb8      	it	lt
 800a46c:	18e4      	addlt	r4, r4, r3
 800a46e:	f7ff ffe7 	bl	800a440 <__malloc_lock>
 800a472:	4a1e      	ldr	r2, [pc, #120]	; (800a4ec <_free_r+0x94>)
 800a474:	9801      	ldr	r0, [sp, #4]
 800a476:	6813      	ldr	r3, [r2, #0]
 800a478:	b933      	cbnz	r3, 800a488 <_free_r+0x30>
 800a47a:	6063      	str	r3, [r4, #4]
 800a47c:	6014      	str	r4, [r2, #0]
 800a47e:	b003      	add	sp, #12
 800a480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a484:	f7ff bfe2 	b.w	800a44c <__malloc_unlock>
 800a488:	42a3      	cmp	r3, r4
 800a48a:	d908      	bls.n	800a49e <_free_r+0x46>
 800a48c:	6825      	ldr	r5, [r4, #0]
 800a48e:	1961      	adds	r1, r4, r5
 800a490:	428b      	cmp	r3, r1
 800a492:	bf01      	itttt	eq
 800a494:	6819      	ldreq	r1, [r3, #0]
 800a496:	685b      	ldreq	r3, [r3, #4]
 800a498:	1949      	addeq	r1, r1, r5
 800a49a:	6021      	streq	r1, [r4, #0]
 800a49c:	e7ed      	b.n	800a47a <_free_r+0x22>
 800a49e:	461a      	mov	r2, r3
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	b10b      	cbz	r3, 800a4a8 <_free_r+0x50>
 800a4a4:	42a3      	cmp	r3, r4
 800a4a6:	d9fa      	bls.n	800a49e <_free_r+0x46>
 800a4a8:	6811      	ldr	r1, [r2, #0]
 800a4aa:	1855      	adds	r5, r2, r1
 800a4ac:	42a5      	cmp	r5, r4
 800a4ae:	d10b      	bne.n	800a4c8 <_free_r+0x70>
 800a4b0:	6824      	ldr	r4, [r4, #0]
 800a4b2:	4421      	add	r1, r4
 800a4b4:	1854      	adds	r4, r2, r1
 800a4b6:	42a3      	cmp	r3, r4
 800a4b8:	6011      	str	r1, [r2, #0]
 800a4ba:	d1e0      	bne.n	800a47e <_free_r+0x26>
 800a4bc:	681c      	ldr	r4, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	6053      	str	r3, [r2, #4]
 800a4c2:	4421      	add	r1, r4
 800a4c4:	6011      	str	r1, [r2, #0]
 800a4c6:	e7da      	b.n	800a47e <_free_r+0x26>
 800a4c8:	d902      	bls.n	800a4d0 <_free_r+0x78>
 800a4ca:	230c      	movs	r3, #12
 800a4cc:	6003      	str	r3, [r0, #0]
 800a4ce:	e7d6      	b.n	800a47e <_free_r+0x26>
 800a4d0:	6825      	ldr	r5, [r4, #0]
 800a4d2:	1961      	adds	r1, r4, r5
 800a4d4:	428b      	cmp	r3, r1
 800a4d6:	bf04      	itt	eq
 800a4d8:	6819      	ldreq	r1, [r3, #0]
 800a4da:	685b      	ldreq	r3, [r3, #4]
 800a4dc:	6063      	str	r3, [r4, #4]
 800a4de:	bf04      	itt	eq
 800a4e0:	1949      	addeq	r1, r1, r5
 800a4e2:	6021      	streq	r1, [r4, #0]
 800a4e4:	6054      	str	r4, [r2, #4]
 800a4e6:	e7ca      	b.n	800a47e <_free_r+0x26>
 800a4e8:	b003      	add	sp, #12
 800a4ea:	bd30      	pop	{r4, r5, pc}
 800a4ec:	20002918 	.word	0x20002918

0800a4f0 <_realloc_r>:
 800a4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f4:	4680      	mov	r8, r0
 800a4f6:	4614      	mov	r4, r2
 800a4f8:	460e      	mov	r6, r1
 800a4fa:	b921      	cbnz	r1, 800a506 <_realloc_r+0x16>
 800a4fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a500:	4611      	mov	r1, r2
 800a502:	f7ff b847 	b.w	8009594 <_malloc_r>
 800a506:	b92a      	cbnz	r2, 800a514 <_realloc_r+0x24>
 800a508:	f7ff ffa6 	bl	800a458 <_free_r>
 800a50c:	4625      	mov	r5, r4
 800a50e:	4628      	mov	r0, r5
 800a510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a514:	f000 f850 	bl	800a5b8 <_malloc_usable_size_r>
 800a518:	4284      	cmp	r4, r0
 800a51a:	4607      	mov	r7, r0
 800a51c:	d802      	bhi.n	800a524 <_realloc_r+0x34>
 800a51e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a522:	d812      	bhi.n	800a54a <_realloc_r+0x5a>
 800a524:	4621      	mov	r1, r4
 800a526:	4640      	mov	r0, r8
 800a528:	f7ff f834 	bl	8009594 <_malloc_r>
 800a52c:	4605      	mov	r5, r0
 800a52e:	2800      	cmp	r0, #0
 800a530:	d0ed      	beq.n	800a50e <_realloc_r+0x1e>
 800a532:	42bc      	cmp	r4, r7
 800a534:	4622      	mov	r2, r4
 800a536:	4631      	mov	r1, r6
 800a538:	bf28      	it	cs
 800a53a:	463a      	movcs	r2, r7
 800a53c:	f7ff ff58 	bl	800a3f0 <memcpy>
 800a540:	4631      	mov	r1, r6
 800a542:	4640      	mov	r0, r8
 800a544:	f7ff ff88 	bl	800a458 <_free_r>
 800a548:	e7e1      	b.n	800a50e <_realloc_r+0x1e>
 800a54a:	4635      	mov	r5, r6
 800a54c:	e7df      	b.n	800a50e <_realloc_r+0x1e>
	...

0800a550 <_read_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4d07      	ldr	r5, [pc, #28]	; (800a570 <_read_r+0x20>)
 800a554:	4604      	mov	r4, r0
 800a556:	4608      	mov	r0, r1
 800a558:	4611      	mov	r1, r2
 800a55a:	2200      	movs	r2, #0
 800a55c:	602a      	str	r2, [r5, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	f7f7 ff48 	bl	80023f4 <_read>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_read_r+0x1e>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_read_r+0x1e>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	20002920 	.word	0x20002920

0800a574 <_fstat_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4d07      	ldr	r5, [pc, #28]	; (800a594 <_fstat_r+0x20>)
 800a578:	2300      	movs	r3, #0
 800a57a:	4604      	mov	r4, r0
 800a57c:	4608      	mov	r0, r1
 800a57e:	4611      	mov	r1, r2
 800a580:	602b      	str	r3, [r5, #0]
 800a582:	f7f7 ff60 	bl	8002446 <_fstat>
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	d102      	bne.n	800a590 <_fstat_r+0x1c>
 800a58a:	682b      	ldr	r3, [r5, #0]
 800a58c:	b103      	cbz	r3, 800a590 <_fstat_r+0x1c>
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	bd38      	pop	{r3, r4, r5, pc}
 800a592:	bf00      	nop
 800a594:	20002920 	.word	0x20002920

0800a598 <_isatty_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4d06      	ldr	r5, [pc, #24]	; (800a5b4 <_isatty_r+0x1c>)
 800a59c:	2300      	movs	r3, #0
 800a59e:	4604      	mov	r4, r0
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	602b      	str	r3, [r5, #0]
 800a5a4:	f7f7 ff5f 	bl	8002466 <_isatty>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d102      	bne.n	800a5b2 <_isatty_r+0x1a>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	b103      	cbz	r3, 800a5b2 <_isatty_r+0x1a>
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	bd38      	pop	{r3, r4, r5, pc}
 800a5b4:	20002920 	.word	0x20002920

0800a5b8 <_malloc_usable_size_r>:
 800a5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5bc:	1f18      	subs	r0, r3, #4
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	bfbc      	itt	lt
 800a5c2:	580b      	ldrlt	r3, [r1, r0]
 800a5c4:	18c0      	addlt	r0, r0, r3
 800a5c6:	4770      	bx	lr

0800a5c8 <pow>:
 800a5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ca:	ed2d 8b02 	vpush	{d8}
 800a5ce:	eeb0 8a40 	vmov.f32	s16, s0
 800a5d2:	eef0 8a60 	vmov.f32	s17, s1
 800a5d6:	ec55 4b11 	vmov	r4, r5, d1
 800a5da:	f000 f891 	bl	800a700 <__ieee754_pow>
 800a5de:	4622      	mov	r2, r4
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	ec57 6b10 	vmov	r6, r7, d0
 800a5ea:	f7f6 fabf 	bl	8000b6c <__aeabi_dcmpun>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d13b      	bne.n	800a66a <pow+0xa2>
 800a5f2:	ec51 0b18 	vmov	r0, r1, d8
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f7f6 fa85 	bl	8000b08 <__aeabi_dcmpeq>
 800a5fe:	b1b8      	cbz	r0, 800a630 <pow+0x68>
 800a600:	2200      	movs	r2, #0
 800a602:	2300      	movs	r3, #0
 800a604:	4620      	mov	r0, r4
 800a606:	4629      	mov	r1, r5
 800a608:	f7f6 fa7e 	bl	8000b08 <__aeabi_dcmpeq>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d146      	bne.n	800a69e <pow+0xd6>
 800a610:	ec45 4b10 	vmov	d0, r4, r5
 800a614:	f000 fe8d 	bl	800b332 <finite>
 800a618:	b338      	cbz	r0, 800a66a <pow+0xa2>
 800a61a:	2200      	movs	r2, #0
 800a61c:	2300      	movs	r3, #0
 800a61e:	4620      	mov	r0, r4
 800a620:	4629      	mov	r1, r5
 800a622:	f7f6 fa7b 	bl	8000b1c <__aeabi_dcmplt>
 800a626:	b300      	cbz	r0, 800a66a <pow+0xa2>
 800a628:	f7fe fe32 	bl	8009290 <__errno>
 800a62c:	2322      	movs	r3, #34	; 0x22
 800a62e:	e01b      	b.n	800a668 <pow+0xa0>
 800a630:	ec47 6b10 	vmov	d0, r6, r7
 800a634:	f000 fe7d 	bl	800b332 <finite>
 800a638:	b9e0      	cbnz	r0, 800a674 <pow+0xac>
 800a63a:	eeb0 0a48 	vmov.f32	s0, s16
 800a63e:	eef0 0a68 	vmov.f32	s1, s17
 800a642:	f000 fe76 	bl	800b332 <finite>
 800a646:	b1a8      	cbz	r0, 800a674 <pow+0xac>
 800a648:	ec45 4b10 	vmov	d0, r4, r5
 800a64c:	f000 fe71 	bl	800b332 <finite>
 800a650:	b180      	cbz	r0, 800a674 <pow+0xac>
 800a652:	4632      	mov	r2, r6
 800a654:	463b      	mov	r3, r7
 800a656:	4630      	mov	r0, r6
 800a658:	4639      	mov	r1, r7
 800a65a:	f7f6 fa87 	bl	8000b6c <__aeabi_dcmpun>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d0e2      	beq.n	800a628 <pow+0x60>
 800a662:	f7fe fe15 	bl	8009290 <__errno>
 800a666:	2321      	movs	r3, #33	; 0x21
 800a668:	6003      	str	r3, [r0, #0]
 800a66a:	ecbd 8b02 	vpop	{d8}
 800a66e:	ec47 6b10 	vmov	d0, r6, r7
 800a672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a674:	2200      	movs	r2, #0
 800a676:	2300      	movs	r3, #0
 800a678:	4630      	mov	r0, r6
 800a67a:	4639      	mov	r1, r7
 800a67c:	f7f6 fa44 	bl	8000b08 <__aeabi_dcmpeq>
 800a680:	2800      	cmp	r0, #0
 800a682:	d0f2      	beq.n	800a66a <pow+0xa2>
 800a684:	eeb0 0a48 	vmov.f32	s0, s16
 800a688:	eef0 0a68 	vmov.f32	s1, s17
 800a68c:	f000 fe51 	bl	800b332 <finite>
 800a690:	2800      	cmp	r0, #0
 800a692:	d0ea      	beq.n	800a66a <pow+0xa2>
 800a694:	ec45 4b10 	vmov	d0, r4, r5
 800a698:	f000 fe4b 	bl	800b332 <finite>
 800a69c:	e7c3      	b.n	800a626 <pow+0x5e>
 800a69e:	4f01      	ldr	r7, [pc, #4]	; (800a6a4 <pow+0xdc>)
 800a6a0:	2600      	movs	r6, #0
 800a6a2:	e7e2      	b.n	800a66a <pow+0xa2>
 800a6a4:	3ff00000 	.word	0x3ff00000

0800a6a8 <sqrt>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	ed2d 8b02 	vpush	{d8}
 800a6ae:	ec55 4b10 	vmov	r4, r5, d0
 800a6b2:	f000 fd53 	bl	800b15c <__ieee754_sqrt>
 800a6b6:	4622      	mov	r2, r4
 800a6b8:	462b      	mov	r3, r5
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	4629      	mov	r1, r5
 800a6be:	eeb0 8a40 	vmov.f32	s16, s0
 800a6c2:	eef0 8a60 	vmov.f32	s17, s1
 800a6c6:	f7f6 fa51 	bl	8000b6c <__aeabi_dcmpun>
 800a6ca:	b990      	cbnz	r0, 800a6f2 <sqrt+0x4a>
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	f7f6 fa22 	bl	8000b1c <__aeabi_dcmplt>
 800a6d8:	b158      	cbz	r0, 800a6f2 <sqrt+0x4a>
 800a6da:	f7fe fdd9 	bl	8009290 <__errno>
 800a6de:	2321      	movs	r3, #33	; 0x21
 800a6e0:	6003      	str	r3, [r0, #0]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	f7f6 f8cf 	bl	800088c <__aeabi_ddiv>
 800a6ee:	ec41 0b18 	vmov	d8, r0, r1
 800a6f2:	eeb0 0a48 	vmov.f32	s0, s16
 800a6f6:	eef0 0a68 	vmov.f32	s1, s17
 800a6fa:	ecbd 8b02 	vpop	{d8}
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}

0800a700 <__ieee754_pow>:
 800a700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a704:	ed2d 8b06 	vpush	{d8-d10}
 800a708:	b089      	sub	sp, #36	; 0x24
 800a70a:	ed8d 1b00 	vstr	d1, [sp]
 800a70e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a712:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a716:	ea58 0102 	orrs.w	r1, r8, r2
 800a71a:	ec57 6b10 	vmov	r6, r7, d0
 800a71e:	d115      	bne.n	800a74c <__ieee754_pow+0x4c>
 800a720:	19b3      	adds	r3, r6, r6
 800a722:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a726:	4152      	adcs	r2, r2
 800a728:	4299      	cmp	r1, r3
 800a72a:	4b89      	ldr	r3, [pc, #548]	; (800a950 <__ieee754_pow+0x250>)
 800a72c:	4193      	sbcs	r3, r2
 800a72e:	f080 84d2 	bcs.w	800b0d6 <__ieee754_pow+0x9d6>
 800a732:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a736:	4630      	mov	r0, r6
 800a738:	4639      	mov	r1, r7
 800a73a:	f7f5 fdc7 	bl	80002cc <__adddf3>
 800a73e:	ec41 0b10 	vmov	d0, r0, r1
 800a742:	b009      	add	sp, #36	; 0x24
 800a744:	ecbd 8b06 	vpop	{d8-d10}
 800a748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a74c:	4b81      	ldr	r3, [pc, #516]	; (800a954 <__ieee754_pow+0x254>)
 800a74e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a752:	429c      	cmp	r4, r3
 800a754:	ee10 aa10 	vmov	sl, s0
 800a758:	463d      	mov	r5, r7
 800a75a:	dc06      	bgt.n	800a76a <__ieee754_pow+0x6a>
 800a75c:	d101      	bne.n	800a762 <__ieee754_pow+0x62>
 800a75e:	2e00      	cmp	r6, #0
 800a760:	d1e7      	bne.n	800a732 <__ieee754_pow+0x32>
 800a762:	4598      	cmp	r8, r3
 800a764:	dc01      	bgt.n	800a76a <__ieee754_pow+0x6a>
 800a766:	d10f      	bne.n	800a788 <__ieee754_pow+0x88>
 800a768:	b172      	cbz	r2, 800a788 <__ieee754_pow+0x88>
 800a76a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a76e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a772:	ea55 050a 	orrs.w	r5, r5, sl
 800a776:	d1dc      	bne.n	800a732 <__ieee754_pow+0x32>
 800a778:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a77c:	18db      	adds	r3, r3, r3
 800a77e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a782:	4152      	adcs	r2, r2
 800a784:	429d      	cmp	r5, r3
 800a786:	e7d0      	b.n	800a72a <__ieee754_pow+0x2a>
 800a788:	2d00      	cmp	r5, #0
 800a78a:	da3b      	bge.n	800a804 <__ieee754_pow+0x104>
 800a78c:	4b72      	ldr	r3, [pc, #456]	; (800a958 <__ieee754_pow+0x258>)
 800a78e:	4598      	cmp	r8, r3
 800a790:	dc51      	bgt.n	800a836 <__ieee754_pow+0x136>
 800a792:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a796:	4598      	cmp	r8, r3
 800a798:	f340 84ac 	ble.w	800b0f4 <__ieee754_pow+0x9f4>
 800a79c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a7a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a7a4:	2b14      	cmp	r3, #20
 800a7a6:	dd0f      	ble.n	800a7c8 <__ieee754_pow+0xc8>
 800a7a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a7ac:	fa22 f103 	lsr.w	r1, r2, r3
 800a7b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	f040 849d 	bne.w	800b0f4 <__ieee754_pow+0x9f4>
 800a7ba:	f001 0101 	and.w	r1, r1, #1
 800a7be:	f1c1 0302 	rsb	r3, r1, #2
 800a7c2:	9304      	str	r3, [sp, #16]
 800a7c4:	b182      	cbz	r2, 800a7e8 <__ieee754_pow+0xe8>
 800a7c6:	e05f      	b.n	800a888 <__ieee754_pow+0x188>
 800a7c8:	2a00      	cmp	r2, #0
 800a7ca:	d15b      	bne.n	800a884 <__ieee754_pow+0x184>
 800a7cc:	f1c3 0314 	rsb	r3, r3, #20
 800a7d0:	fa48 f103 	asr.w	r1, r8, r3
 800a7d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d8:	4543      	cmp	r3, r8
 800a7da:	f040 8488 	bne.w	800b0ee <__ieee754_pow+0x9ee>
 800a7de:	f001 0101 	and.w	r1, r1, #1
 800a7e2:	f1c1 0302 	rsb	r3, r1, #2
 800a7e6:	9304      	str	r3, [sp, #16]
 800a7e8:	4b5c      	ldr	r3, [pc, #368]	; (800a95c <__ieee754_pow+0x25c>)
 800a7ea:	4598      	cmp	r8, r3
 800a7ec:	d132      	bne.n	800a854 <__ieee754_pow+0x154>
 800a7ee:	f1b9 0f00 	cmp.w	r9, #0
 800a7f2:	f280 8478 	bge.w	800b0e6 <__ieee754_pow+0x9e6>
 800a7f6:	4959      	ldr	r1, [pc, #356]	; (800a95c <__ieee754_pow+0x25c>)
 800a7f8:	4632      	mov	r2, r6
 800a7fa:	463b      	mov	r3, r7
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	f7f6 f845 	bl	800088c <__aeabi_ddiv>
 800a802:	e79c      	b.n	800a73e <__ieee754_pow+0x3e>
 800a804:	2300      	movs	r3, #0
 800a806:	9304      	str	r3, [sp, #16]
 800a808:	2a00      	cmp	r2, #0
 800a80a:	d13d      	bne.n	800a888 <__ieee754_pow+0x188>
 800a80c:	4b51      	ldr	r3, [pc, #324]	; (800a954 <__ieee754_pow+0x254>)
 800a80e:	4598      	cmp	r8, r3
 800a810:	d1ea      	bne.n	800a7e8 <__ieee754_pow+0xe8>
 800a812:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a816:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a81a:	ea53 030a 	orrs.w	r3, r3, sl
 800a81e:	f000 845a 	beq.w	800b0d6 <__ieee754_pow+0x9d6>
 800a822:	4b4f      	ldr	r3, [pc, #316]	; (800a960 <__ieee754_pow+0x260>)
 800a824:	429c      	cmp	r4, r3
 800a826:	dd08      	ble.n	800a83a <__ieee754_pow+0x13a>
 800a828:	f1b9 0f00 	cmp.w	r9, #0
 800a82c:	f2c0 8457 	blt.w	800b0de <__ieee754_pow+0x9de>
 800a830:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a834:	e783      	b.n	800a73e <__ieee754_pow+0x3e>
 800a836:	2302      	movs	r3, #2
 800a838:	e7e5      	b.n	800a806 <__ieee754_pow+0x106>
 800a83a:	f1b9 0f00 	cmp.w	r9, #0
 800a83e:	f04f 0000 	mov.w	r0, #0
 800a842:	f04f 0100 	mov.w	r1, #0
 800a846:	f6bf af7a 	bge.w	800a73e <__ieee754_pow+0x3e>
 800a84a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a84e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a852:	e774      	b.n	800a73e <__ieee754_pow+0x3e>
 800a854:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a858:	d106      	bne.n	800a868 <__ieee754_pow+0x168>
 800a85a:	4632      	mov	r2, r6
 800a85c:	463b      	mov	r3, r7
 800a85e:	4630      	mov	r0, r6
 800a860:	4639      	mov	r1, r7
 800a862:	f7f5 fee9 	bl	8000638 <__aeabi_dmul>
 800a866:	e76a      	b.n	800a73e <__ieee754_pow+0x3e>
 800a868:	4b3e      	ldr	r3, [pc, #248]	; (800a964 <__ieee754_pow+0x264>)
 800a86a:	4599      	cmp	r9, r3
 800a86c:	d10c      	bne.n	800a888 <__ieee754_pow+0x188>
 800a86e:	2d00      	cmp	r5, #0
 800a870:	db0a      	blt.n	800a888 <__ieee754_pow+0x188>
 800a872:	ec47 6b10 	vmov	d0, r6, r7
 800a876:	b009      	add	sp, #36	; 0x24
 800a878:	ecbd 8b06 	vpop	{d8-d10}
 800a87c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a880:	f000 bc6c 	b.w	800b15c <__ieee754_sqrt>
 800a884:	2300      	movs	r3, #0
 800a886:	9304      	str	r3, [sp, #16]
 800a888:	ec47 6b10 	vmov	d0, r6, r7
 800a88c:	f000 fd48 	bl	800b320 <fabs>
 800a890:	ec51 0b10 	vmov	r0, r1, d0
 800a894:	f1ba 0f00 	cmp.w	sl, #0
 800a898:	d129      	bne.n	800a8ee <__ieee754_pow+0x1ee>
 800a89a:	b124      	cbz	r4, 800a8a6 <__ieee754_pow+0x1a6>
 800a89c:	4b2f      	ldr	r3, [pc, #188]	; (800a95c <__ieee754_pow+0x25c>)
 800a89e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d123      	bne.n	800a8ee <__ieee754_pow+0x1ee>
 800a8a6:	f1b9 0f00 	cmp.w	r9, #0
 800a8aa:	da05      	bge.n	800a8b8 <__ieee754_pow+0x1b8>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	492a      	ldr	r1, [pc, #168]	; (800a95c <__ieee754_pow+0x25c>)
 800a8b4:	f7f5 ffea 	bl	800088c <__aeabi_ddiv>
 800a8b8:	2d00      	cmp	r5, #0
 800a8ba:	f6bf af40 	bge.w	800a73e <__ieee754_pow+0x3e>
 800a8be:	9b04      	ldr	r3, [sp, #16]
 800a8c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a8c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a8c8:	4323      	orrs	r3, r4
 800a8ca:	d108      	bne.n	800a8de <__ieee754_pow+0x1de>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	f7f5 fcf8 	bl	80002c8 <__aeabi_dsub>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	e78f      	b.n	800a7fe <__ieee754_pow+0xfe>
 800a8de:	9b04      	ldr	r3, [sp, #16]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	f47f af2c 	bne.w	800a73e <__ieee754_pow+0x3e>
 800a8e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	e727      	b.n	800a73e <__ieee754_pow+0x3e>
 800a8ee:	0feb      	lsrs	r3, r5, #31
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	9306      	str	r3, [sp, #24]
 800a8f4:	9a06      	ldr	r2, [sp, #24]
 800a8f6:	9b04      	ldr	r3, [sp, #16]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	d102      	bne.n	800a902 <__ieee754_pow+0x202>
 800a8fc:	4632      	mov	r2, r6
 800a8fe:	463b      	mov	r3, r7
 800a900:	e7e6      	b.n	800a8d0 <__ieee754_pow+0x1d0>
 800a902:	4b19      	ldr	r3, [pc, #100]	; (800a968 <__ieee754_pow+0x268>)
 800a904:	4598      	cmp	r8, r3
 800a906:	f340 80fb 	ble.w	800ab00 <__ieee754_pow+0x400>
 800a90a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a90e:	4598      	cmp	r8, r3
 800a910:	4b13      	ldr	r3, [pc, #76]	; (800a960 <__ieee754_pow+0x260>)
 800a912:	dd0c      	ble.n	800a92e <__ieee754_pow+0x22e>
 800a914:	429c      	cmp	r4, r3
 800a916:	dc0f      	bgt.n	800a938 <__ieee754_pow+0x238>
 800a918:	f1b9 0f00 	cmp.w	r9, #0
 800a91c:	da0f      	bge.n	800a93e <__ieee754_pow+0x23e>
 800a91e:	2000      	movs	r0, #0
 800a920:	b009      	add	sp, #36	; 0x24
 800a922:	ecbd 8b06 	vpop	{d8-d10}
 800a926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92a:	f000 bcf0 	b.w	800b30e <__math_oflow>
 800a92e:	429c      	cmp	r4, r3
 800a930:	dbf2      	blt.n	800a918 <__ieee754_pow+0x218>
 800a932:	4b0a      	ldr	r3, [pc, #40]	; (800a95c <__ieee754_pow+0x25c>)
 800a934:	429c      	cmp	r4, r3
 800a936:	dd19      	ble.n	800a96c <__ieee754_pow+0x26c>
 800a938:	f1b9 0f00 	cmp.w	r9, #0
 800a93c:	dcef      	bgt.n	800a91e <__ieee754_pow+0x21e>
 800a93e:	2000      	movs	r0, #0
 800a940:	b009      	add	sp, #36	; 0x24
 800a942:	ecbd 8b06 	vpop	{d8-d10}
 800a946:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94a:	f000 bcd7 	b.w	800b2fc <__math_uflow>
 800a94e:	bf00      	nop
 800a950:	fff00000 	.word	0xfff00000
 800a954:	7ff00000 	.word	0x7ff00000
 800a958:	433fffff 	.word	0x433fffff
 800a95c:	3ff00000 	.word	0x3ff00000
 800a960:	3fefffff 	.word	0x3fefffff
 800a964:	3fe00000 	.word	0x3fe00000
 800a968:	41e00000 	.word	0x41e00000
 800a96c:	4b60      	ldr	r3, [pc, #384]	; (800aaf0 <__ieee754_pow+0x3f0>)
 800a96e:	2200      	movs	r2, #0
 800a970:	f7f5 fcaa 	bl	80002c8 <__aeabi_dsub>
 800a974:	a354      	add	r3, pc, #336	; (adr r3, 800aac8 <__ieee754_pow+0x3c8>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	4604      	mov	r4, r0
 800a97c:	460d      	mov	r5, r1
 800a97e:	f7f5 fe5b 	bl	8000638 <__aeabi_dmul>
 800a982:	a353      	add	r3, pc, #332	; (adr r3, 800aad0 <__ieee754_pow+0x3d0>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	4606      	mov	r6, r0
 800a98a:	460f      	mov	r7, r1
 800a98c:	4620      	mov	r0, r4
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f5 fe52 	bl	8000638 <__aeabi_dmul>
 800a994:	4b57      	ldr	r3, [pc, #348]	; (800aaf4 <__ieee754_pow+0x3f4>)
 800a996:	4682      	mov	sl, r0
 800a998:	468b      	mov	fp, r1
 800a99a:	2200      	movs	r2, #0
 800a99c:	4620      	mov	r0, r4
 800a99e:	4629      	mov	r1, r5
 800a9a0:	f7f5 fe4a 	bl	8000638 <__aeabi_dmul>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	a14b      	add	r1, pc, #300	; (adr r1, 800aad8 <__ieee754_pow+0x3d8>)
 800a9aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9ae:	f7f5 fc8b 	bl	80002c8 <__aeabi_dsub>
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	462b      	mov	r3, r5
 800a9b6:	f7f5 fe3f 	bl	8000638 <__aeabi_dmul>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	2000      	movs	r0, #0
 800a9c0:	494d      	ldr	r1, [pc, #308]	; (800aaf8 <__ieee754_pow+0x3f8>)
 800a9c2:	f7f5 fc81 	bl	80002c8 <__aeabi_dsub>
 800a9c6:	4622      	mov	r2, r4
 800a9c8:	4680      	mov	r8, r0
 800a9ca:	4689      	mov	r9, r1
 800a9cc:	462b      	mov	r3, r5
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	f7f5 fe31 	bl	8000638 <__aeabi_dmul>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	4640      	mov	r0, r8
 800a9dc:	4649      	mov	r1, r9
 800a9de:	f7f5 fe2b 	bl	8000638 <__aeabi_dmul>
 800a9e2:	a33f      	add	r3, pc, #252	; (adr r3, 800aae0 <__ieee754_pow+0x3e0>)
 800a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e8:	f7f5 fe26 	bl	8000638 <__aeabi_dmul>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4650      	mov	r0, sl
 800a9f2:	4659      	mov	r1, fp
 800a9f4:	f7f5 fc68 	bl	80002c8 <__aeabi_dsub>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4680      	mov	r8, r0
 800a9fe:	4689      	mov	r9, r1
 800aa00:	4630      	mov	r0, r6
 800aa02:	4639      	mov	r1, r7
 800aa04:	f7f5 fc62 	bl	80002cc <__adddf3>
 800aa08:	2000      	movs	r0, #0
 800aa0a:	4632      	mov	r2, r6
 800aa0c:	463b      	mov	r3, r7
 800aa0e:	4604      	mov	r4, r0
 800aa10:	460d      	mov	r5, r1
 800aa12:	f7f5 fc59 	bl	80002c8 <__aeabi_dsub>
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	4640      	mov	r0, r8
 800aa1c:	4649      	mov	r1, r9
 800aa1e:	f7f5 fc53 	bl	80002c8 <__aeabi_dsub>
 800aa22:	9b04      	ldr	r3, [sp, #16]
 800aa24:	9a06      	ldr	r2, [sp, #24]
 800aa26:	3b01      	subs	r3, #1
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	4682      	mov	sl, r0
 800aa2c:	468b      	mov	fp, r1
 800aa2e:	f040 81e7 	bne.w	800ae00 <__ieee754_pow+0x700>
 800aa32:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800aae8 <__ieee754_pow+0x3e8>
 800aa36:	eeb0 8a47 	vmov.f32	s16, s14
 800aa3a:	eef0 8a67 	vmov.f32	s17, s15
 800aa3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aa42:	2600      	movs	r6, #0
 800aa44:	4632      	mov	r2, r6
 800aa46:	463b      	mov	r3, r7
 800aa48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa4c:	f7f5 fc3c 	bl	80002c8 <__aeabi_dsub>
 800aa50:	4622      	mov	r2, r4
 800aa52:	462b      	mov	r3, r5
 800aa54:	f7f5 fdf0 	bl	8000638 <__aeabi_dmul>
 800aa58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa5c:	4680      	mov	r8, r0
 800aa5e:	4689      	mov	r9, r1
 800aa60:	4650      	mov	r0, sl
 800aa62:	4659      	mov	r1, fp
 800aa64:	f7f5 fde8 	bl	8000638 <__aeabi_dmul>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	4649      	mov	r1, r9
 800aa70:	f7f5 fc2c 	bl	80002cc <__adddf3>
 800aa74:	4632      	mov	r2, r6
 800aa76:	463b      	mov	r3, r7
 800aa78:	4680      	mov	r8, r0
 800aa7a:	4689      	mov	r9, r1
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	f7f5 fdda 	bl	8000638 <__aeabi_dmul>
 800aa84:	460b      	mov	r3, r1
 800aa86:	4604      	mov	r4, r0
 800aa88:	460d      	mov	r5, r1
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	4649      	mov	r1, r9
 800aa8e:	4640      	mov	r0, r8
 800aa90:	f7f5 fc1c 	bl	80002cc <__adddf3>
 800aa94:	4b19      	ldr	r3, [pc, #100]	; (800aafc <__ieee754_pow+0x3fc>)
 800aa96:	4299      	cmp	r1, r3
 800aa98:	ec45 4b19 	vmov	d9, r4, r5
 800aa9c:	4606      	mov	r6, r0
 800aa9e:	460f      	mov	r7, r1
 800aaa0:	468b      	mov	fp, r1
 800aaa2:	f340 82f1 	ble.w	800b088 <__ieee754_pow+0x988>
 800aaa6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aaaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aaae:	4303      	orrs	r3, r0
 800aab0:	f000 81e4 	beq.w	800ae7c <__ieee754_pow+0x77c>
 800aab4:	ec51 0b18 	vmov	r0, r1, d8
 800aab8:	2200      	movs	r2, #0
 800aaba:	2300      	movs	r3, #0
 800aabc:	f7f6 f82e 	bl	8000b1c <__aeabi_dcmplt>
 800aac0:	3800      	subs	r0, #0
 800aac2:	bf18      	it	ne
 800aac4:	2001      	movne	r0, #1
 800aac6:	e72b      	b.n	800a920 <__ieee754_pow+0x220>
 800aac8:	60000000 	.word	0x60000000
 800aacc:	3ff71547 	.word	0x3ff71547
 800aad0:	f85ddf44 	.word	0xf85ddf44
 800aad4:	3e54ae0b 	.word	0x3e54ae0b
 800aad8:	55555555 	.word	0x55555555
 800aadc:	3fd55555 	.word	0x3fd55555
 800aae0:	652b82fe 	.word	0x652b82fe
 800aae4:	3ff71547 	.word	0x3ff71547
 800aae8:	00000000 	.word	0x00000000
 800aaec:	bff00000 	.word	0xbff00000
 800aaf0:	3ff00000 	.word	0x3ff00000
 800aaf4:	3fd00000 	.word	0x3fd00000
 800aaf8:	3fe00000 	.word	0x3fe00000
 800aafc:	408fffff 	.word	0x408fffff
 800ab00:	4bd5      	ldr	r3, [pc, #852]	; (800ae58 <__ieee754_pow+0x758>)
 800ab02:	402b      	ands	r3, r5
 800ab04:	2200      	movs	r2, #0
 800ab06:	b92b      	cbnz	r3, 800ab14 <__ieee754_pow+0x414>
 800ab08:	4bd4      	ldr	r3, [pc, #848]	; (800ae5c <__ieee754_pow+0x75c>)
 800ab0a:	f7f5 fd95 	bl	8000638 <__aeabi_dmul>
 800ab0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ab12:	460c      	mov	r4, r1
 800ab14:	1523      	asrs	r3, r4, #20
 800ab16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ab1a:	4413      	add	r3, r2
 800ab1c:	9305      	str	r3, [sp, #20]
 800ab1e:	4bd0      	ldr	r3, [pc, #832]	; (800ae60 <__ieee754_pow+0x760>)
 800ab20:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ab24:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ab28:	429c      	cmp	r4, r3
 800ab2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ab2e:	dd08      	ble.n	800ab42 <__ieee754_pow+0x442>
 800ab30:	4bcc      	ldr	r3, [pc, #816]	; (800ae64 <__ieee754_pow+0x764>)
 800ab32:	429c      	cmp	r4, r3
 800ab34:	f340 8162 	ble.w	800adfc <__ieee754_pow+0x6fc>
 800ab38:	9b05      	ldr	r3, [sp, #20]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	9305      	str	r3, [sp, #20]
 800ab3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ab42:	2400      	movs	r4, #0
 800ab44:	00e3      	lsls	r3, r4, #3
 800ab46:	9307      	str	r3, [sp, #28]
 800ab48:	4bc7      	ldr	r3, [pc, #796]	; (800ae68 <__ieee754_pow+0x768>)
 800ab4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab4e:	ed93 7b00 	vldr	d7, [r3]
 800ab52:	4629      	mov	r1, r5
 800ab54:	ec53 2b17 	vmov	r2, r3, d7
 800ab58:	eeb0 9a47 	vmov.f32	s18, s14
 800ab5c:	eef0 9a67 	vmov.f32	s19, s15
 800ab60:	4682      	mov	sl, r0
 800ab62:	f7f5 fbb1 	bl	80002c8 <__aeabi_dsub>
 800ab66:	4652      	mov	r2, sl
 800ab68:	4606      	mov	r6, r0
 800ab6a:	460f      	mov	r7, r1
 800ab6c:	462b      	mov	r3, r5
 800ab6e:	ec51 0b19 	vmov	r0, r1, d9
 800ab72:	f7f5 fbab 	bl	80002cc <__adddf3>
 800ab76:	4602      	mov	r2, r0
 800ab78:	460b      	mov	r3, r1
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	49bb      	ldr	r1, [pc, #748]	; (800ae6c <__ieee754_pow+0x76c>)
 800ab7e:	f7f5 fe85 	bl	800088c <__aeabi_ddiv>
 800ab82:	ec41 0b1a 	vmov	d10, r0, r1
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	f7f5 fd53 	bl	8000638 <__aeabi_dmul>
 800ab92:	2300      	movs	r3, #0
 800ab94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab98:	9302      	str	r3, [sp, #8]
 800ab9a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab9e:	46ab      	mov	fp, r5
 800aba0:	106d      	asrs	r5, r5, #1
 800aba2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aba6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800abaa:	ec41 0b18 	vmov	d8, r0, r1
 800abae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800abb2:	2200      	movs	r2, #0
 800abb4:	4640      	mov	r0, r8
 800abb6:	4649      	mov	r1, r9
 800abb8:	4614      	mov	r4, r2
 800abba:	461d      	mov	r5, r3
 800abbc:	f7f5 fd3c 	bl	8000638 <__aeabi_dmul>
 800abc0:	4602      	mov	r2, r0
 800abc2:	460b      	mov	r3, r1
 800abc4:	4630      	mov	r0, r6
 800abc6:	4639      	mov	r1, r7
 800abc8:	f7f5 fb7e 	bl	80002c8 <__aeabi_dsub>
 800abcc:	ec53 2b19 	vmov	r2, r3, d9
 800abd0:	4606      	mov	r6, r0
 800abd2:	460f      	mov	r7, r1
 800abd4:	4620      	mov	r0, r4
 800abd6:	4629      	mov	r1, r5
 800abd8:	f7f5 fb76 	bl	80002c8 <__aeabi_dsub>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4650      	mov	r0, sl
 800abe2:	4659      	mov	r1, fp
 800abe4:	f7f5 fb70 	bl	80002c8 <__aeabi_dsub>
 800abe8:	4642      	mov	r2, r8
 800abea:	464b      	mov	r3, r9
 800abec:	f7f5 fd24 	bl	8000638 <__aeabi_dmul>
 800abf0:	4602      	mov	r2, r0
 800abf2:	460b      	mov	r3, r1
 800abf4:	4630      	mov	r0, r6
 800abf6:	4639      	mov	r1, r7
 800abf8:	f7f5 fb66 	bl	80002c8 <__aeabi_dsub>
 800abfc:	ec53 2b1a 	vmov	r2, r3, d10
 800ac00:	f7f5 fd1a 	bl	8000638 <__aeabi_dmul>
 800ac04:	ec53 2b18 	vmov	r2, r3, d8
 800ac08:	ec41 0b19 	vmov	d9, r0, r1
 800ac0c:	ec51 0b18 	vmov	r0, r1, d8
 800ac10:	f7f5 fd12 	bl	8000638 <__aeabi_dmul>
 800ac14:	a37c      	add	r3, pc, #496	; (adr r3, 800ae08 <__ieee754_pow+0x708>)
 800ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	460d      	mov	r5, r1
 800ac1e:	f7f5 fd0b 	bl	8000638 <__aeabi_dmul>
 800ac22:	a37b      	add	r3, pc, #492	; (adr r3, 800ae10 <__ieee754_pow+0x710>)
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	f7f5 fb50 	bl	80002cc <__adddf3>
 800ac2c:	4622      	mov	r2, r4
 800ac2e:	462b      	mov	r3, r5
 800ac30:	f7f5 fd02 	bl	8000638 <__aeabi_dmul>
 800ac34:	a378      	add	r3, pc, #480	; (adr r3, 800ae18 <__ieee754_pow+0x718>)
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	f7f5 fb47 	bl	80002cc <__adddf3>
 800ac3e:	4622      	mov	r2, r4
 800ac40:	462b      	mov	r3, r5
 800ac42:	f7f5 fcf9 	bl	8000638 <__aeabi_dmul>
 800ac46:	a376      	add	r3, pc, #472	; (adr r3, 800ae20 <__ieee754_pow+0x720>)
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	f7f5 fb3e 	bl	80002cc <__adddf3>
 800ac50:	4622      	mov	r2, r4
 800ac52:	462b      	mov	r3, r5
 800ac54:	f7f5 fcf0 	bl	8000638 <__aeabi_dmul>
 800ac58:	a373      	add	r3, pc, #460	; (adr r3, 800ae28 <__ieee754_pow+0x728>)
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	f7f5 fb35 	bl	80002cc <__adddf3>
 800ac62:	4622      	mov	r2, r4
 800ac64:	462b      	mov	r3, r5
 800ac66:	f7f5 fce7 	bl	8000638 <__aeabi_dmul>
 800ac6a:	a371      	add	r3, pc, #452	; (adr r3, 800ae30 <__ieee754_pow+0x730>)
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	f7f5 fb2c 	bl	80002cc <__adddf3>
 800ac74:	4622      	mov	r2, r4
 800ac76:	4606      	mov	r6, r0
 800ac78:	460f      	mov	r7, r1
 800ac7a:	462b      	mov	r3, r5
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	4629      	mov	r1, r5
 800ac80:	f7f5 fcda 	bl	8000638 <__aeabi_dmul>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	4630      	mov	r0, r6
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	f7f5 fcd4 	bl	8000638 <__aeabi_dmul>
 800ac90:	4642      	mov	r2, r8
 800ac92:	4604      	mov	r4, r0
 800ac94:	460d      	mov	r5, r1
 800ac96:	464b      	mov	r3, r9
 800ac98:	ec51 0b18 	vmov	r0, r1, d8
 800ac9c:	f7f5 fb16 	bl	80002cc <__adddf3>
 800aca0:	ec53 2b19 	vmov	r2, r3, d9
 800aca4:	f7f5 fcc8 	bl	8000638 <__aeabi_dmul>
 800aca8:	4622      	mov	r2, r4
 800acaa:	462b      	mov	r3, r5
 800acac:	f7f5 fb0e 	bl	80002cc <__adddf3>
 800acb0:	4642      	mov	r2, r8
 800acb2:	4682      	mov	sl, r0
 800acb4:	468b      	mov	fp, r1
 800acb6:	464b      	mov	r3, r9
 800acb8:	4640      	mov	r0, r8
 800acba:	4649      	mov	r1, r9
 800acbc:	f7f5 fcbc 	bl	8000638 <__aeabi_dmul>
 800acc0:	4b6b      	ldr	r3, [pc, #428]	; (800ae70 <__ieee754_pow+0x770>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	4606      	mov	r6, r0
 800acc6:	460f      	mov	r7, r1
 800acc8:	f7f5 fb00 	bl	80002cc <__adddf3>
 800accc:	4652      	mov	r2, sl
 800acce:	465b      	mov	r3, fp
 800acd0:	f7f5 fafc 	bl	80002cc <__adddf3>
 800acd4:	2000      	movs	r0, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	460d      	mov	r5, r1
 800acda:	4602      	mov	r2, r0
 800acdc:	460b      	mov	r3, r1
 800acde:	4640      	mov	r0, r8
 800ace0:	4649      	mov	r1, r9
 800ace2:	f7f5 fca9 	bl	8000638 <__aeabi_dmul>
 800ace6:	4b62      	ldr	r3, [pc, #392]	; (800ae70 <__ieee754_pow+0x770>)
 800ace8:	4680      	mov	r8, r0
 800acea:	4689      	mov	r9, r1
 800acec:	2200      	movs	r2, #0
 800acee:	4620      	mov	r0, r4
 800acf0:	4629      	mov	r1, r5
 800acf2:	f7f5 fae9 	bl	80002c8 <__aeabi_dsub>
 800acf6:	4632      	mov	r2, r6
 800acf8:	463b      	mov	r3, r7
 800acfa:	f7f5 fae5 	bl	80002c8 <__aeabi_dsub>
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	4650      	mov	r0, sl
 800ad04:	4659      	mov	r1, fp
 800ad06:	f7f5 fadf 	bl	80002c8 <__aeabi_dsub>
 800ad0a:	ec53 2b18 	vmov	r2, r3, d8
 800ad0e:	f7f5 fc93 	bl	8000638 <__aeabi_dmul>
 800ad12:	4622      	mov	r2, r4
 800ad14:	4606      	mov	r6, r0
 800ad16:	460f      	mov	r7, r1
 800ad18:	462b      	mov	r3, r5
 800ad1a:	ec51 0b19 	vmov	r0, r1, d9
 800ad1e:	f7f5 fc8b 	bl	8000638 <__aeabi_dmul>
 800ad22:	4602      	mov	r2, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4630      	mov	r0, r6
 800ad28:	4639      	mov	r1, r7
 800ad2a:	f7f5 facf 	bl	80002cc <__adddf3>
 800ad2e:	4606      	mov	r6, r0
 800ad30:	460f      	mov	r7, r1
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	4640      	mov	r0, r8
 800ad38:	4649      	mov	r1, r9
 800ad3a:	f7f5 fac7 	bl	80002cc <__adddf3>
 800ad3e:	a33e      	add	r3, pc, #248	; (adr r3, 800ae38 <__ieee754_pow+0x738>)
 800ad40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad44:	2000      	movs	r0, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	460d      	mov	r5, r1
 800ad4a:	f7f5 fc75 	bl	8000638 <__aeabi_dmul>
 800ad4e:	4642      	mov	r2, r8
 800ad50:	ec41 0b18 	vmov	d8, r0, r1
 800ad54:	464b      	mov	r3, r9
 800ad56:	4620      	mov	r0, r4
 800ad58:	4629      	mov	r1, r5
 800ad5a:	f7f5 fab5 	bl	80002c8 <__aeabi_dsub>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	460b      	mov	r3, r1
 800ad62:	4630      	mov	r0, r6
 800ad64:	4639      	mov	r1, r7
 800ad66:	f7f5 faaf 	bl	80002c8 <__aeabi_dsub>
 800ad6a:	a335      	add	r3, pc, #212	; (adr r3, 800ae40 <__ieee754_pow+0x740>)
 800ad6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad70:	f7f5 fc62 	bl	8000638 <__aeabi_dmul>
 800ad74:	a334      	add	r3, pc, #208	; (adr r3, 800ae48 <__ieee754_pow+0x748>)
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	460f      	mov	r7, r1
 800ad7e:	4620      	mov	r0, r4
 800ad80:	4629      	mov	r1, r5
 800ad82:	f7f5 fc59 	bl	8000638 <__aeabi_dmul>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7f5 fa9d 	bl	80002cc <__adddf3>
 800ad92:	9a07      	ldr	r2, [sp, #28]
 800ad94:	4b37      	ldr	r3, [pc, #220]	; (800ae74 <__ieee754_pow+0x774>)
 800ad96:	4413      	add	r3, r2
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f7f5 fa96 	bl	80002cc <__adddf3>
 800ada0:	4682      	mov	sl, r0
 800ada2:	9805      	ldr	r0, [sp, #20]
 800ada4:	468b      	mov	fp, r1
 800ada6:	f7f5 fbdd 	bl	8000564 <__aeabi_i2d>
 800adaa:	9a07      	ldr	r2, [sp, #28]
 800adac:	4b32      	ldr	r3, [pc, #200]	; (800ae78 <__ieee754_pow+0x778>)
 800adae:	4413      	add	r3, r2
 800adb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800adb4:	4606      	mov	r6, r0
 800adb6:	460f      	mov	r7, r1
 800adb8:	4652      	mov	r2, sl
 800adba:	465b      	mov	r3, fp
 800adbc:	ec51 0b18 	vmov	r0, r1, d8
 800adc0:	f7f5 fa84 	bl	80002cc <__adddf3>
 800adc4:	4642      	mov	r2, r8
 800adc6:	464b      	mov	r3, r9
 800adc8:	f7f5 fa80 	bl	80002cc <__adddf3>
 800adcc:	4632      	mov	r2, r6
 800adce:	463b      	mov	r3, r7
 800add0:	f7f5 fa7c 	bl	80002cc <__adddf3>
 800add4:	2000      	movs	r0, #0
 800add6:	4632      	mov	r2, r6
 800add8:	463b      	mov	r3, r7
 800adda:	4604      	mov	r4, r0
 800addc:	460d      	mov	r5, r1
 800adde:	f7f5 fa73 	bl	80002c8 <__aeabi_dsub>
 800ade2:	4642      	mov	r2, r8
 800ade4:	464b      	mov	r3, r9
 800ade6:	f7f5 fa6f 	bl	80002c8 <__aeabi_dsub>
 800adea:	ec53 2b18 	vmov	r2, r3, d8
 800adee:	f7f5 fa6b 	bl	80002c8 <__aeabi_dsub>
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	4650      	mov	r0, sl
 800adf8:	4659      	mov	r1, fp
 800adfa:	e610      	b.n	800aa1e <__ieee754_pow+0x31e>
 800adfc:	2401      	movs	r4, #1
 800adfe:	e6a1      	b.n	800ab44 <__ieee754_pow+0x444>
 800ae00:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ae50 <__ieee754_pow+0x750>
 800ae04:	e617      	b.n	800aa36 <__ieee754_pow+0x336>
 800ae06:	bf00      	nop
 800ae08:	4a454eef 	.word	0x4a454eef
 800ae0c:	3fca7e28 	.word	0x3fca7e28
 800ae10:	93c9db65 	.word	0x93c9db65
 800ae14:	3fcd864a 	.word	0x3fcd864a
 800ae18:	a91d4101 	.word	0xa91d4101
 800ae1c:	3fd17460 	.word	0x3fd17460
 800ae20:	518f264d 	.word	0x518f264d
 800ae24:	3fd55555 	.word	0x3fd55555
 800ae28:	db6fabff 	.word	0xdb6fabff
 800ae2c:	3fdb6db6 	.word	0x3fdb6db6
 800ae30:	33333303 	.word	0x33333303
 800ae34:	3fe33333 	.word	0x3fe33333
 800ae38:	e0000000 	.word	0xe0000000
 800ae3c:	3feec709 	.word	0x3feec709
 800ae40:	dc3a03fd 	.word	0xdc3a03fd
 800ae44:	3feec709 	.word	0x3feec709
 800ae48:	145b01f5 	.word	0x145b01f5
 800ae4c:	be3e2fe0 	.word	0xbe3e2fe0
 800ae50:	00000000 	.word	0x00000000
 800ae54:	3ff00000 	.word	0x3ff00000
 800ae58:	7ff00000 	.word	0x7ff00000
 800ae5c:	43400000 	.word	0x43400000
 800ae60:	0003988e 	.word	0x0003988e
 800ae64:	000bb679 	.word	0x000bb679
 800ae68:	0800bac0 	.word	0x0800bac0
 800ae6c:	3ff00000 	.word	0x3ff00000
 800ae70:	40080000 	.word	0x40080000
 800ae74:	0800bae0 	.word	0x0800bae0
 800ae78:	0800bad0 	.word	0x0800bad0
 800ae7c:	a3b5      	add	r3, pc, #724	; (adr r3, 800b154 <__ieee754_pow+0xa54>)
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	4640      	mov	r0, r8
 800ae84:	4649      	mov	r1, r9
 800ae86:	f7f5 fa21 	bl	80002cc <__adddf3>
 800ae8a:	4622      	mov	r2, r4
 800ae8c:	ec41 0b1a 	vmov	d10, r0, r1
 800ae90:	462b      	mov	r3, r5
 800ae92:	4630      	mov	r0, r6
 800ae94:	4639      	mov	r1, r7
 800ae96:	f7f5 fa17 	bl	80002c8 <__aeabi_dsub>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	ec51 0b1a 	vmov	r0, r1, d10
 800aea2:	f7f5 fe59 	bl	8000b58 <__aeabi_dcmpgt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	f47f ae04 	bne.w	800aab4 <__ieee754_pow+0x3b4>
 800aeac:	4aa4      	ldr	r2, [pc, #656]	; (800b140 <__ieee754_pow+0xa40>)
 800aeae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	f340 8108 	ble.w	800b0c8 <__ieee754_pow+0x9c8>
 800aeb8:	151b      	asrs	r3, r3, #20
 800aeba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800aebe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800aec2:	fa4a f303 	asr.w	r3, sl, r3
 800aec6:	445b      	add	r3, fp
 800aec8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800aecc:	4e9d      	ldr	r6, [pc, #628]	; (800b144 <__ieee754_pow+0xa44>)
 800aece:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800aed2:	4116      	asrs	r6, r2
 800aed4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800aed8:	2000      	movs	r0, #0
 800aeda:	ea23 0106 	bic.w	r1, r3, r6
 800aede:	f1c2 0214 	rsb	r2, r2, #20
 800aee2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800aee6:	fa4a fa02 	asr.w	sl, sl, r2
 800aeea:	f1bb 0f00 	cmp.w	fp, #0
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	4620      	mov	r0, r4
 800aef4:	4629      	mov	r1, r5
 800aef6:	bfb8      	it	lt
 800aef8:	f1ca 0a00 	rsblt	sl, sl, #0
 800aefc:	f7f5 f9e4 	bl	80002c8 <__aeabi_dsub>
 800af00:	ec41 0b19 	vmov	d9, r0, r1
 800af04:	4642      	mov	r2, r8
 800af06:	464b      	mov	r3, r9
 800af08:	ec51 0b19 	vmov	r0, r1, d9
 800af0c:	f7f5 f9de 	bl	80002cc <__adddf3>
 800af10:	a37b      	add	r3, pc, #492	; (adr r3, 800b100 <__ieee754_pow+0xa00>)
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	2000      	movs	r0, #0
 800af18:	4604      	mov	r4, r0
 800af1a:	460d      	mov	r5, r1
 800af1c:	f7f5 fb8c 	bl	8000638 <__aeabi_dmul>
 800af20:	ec53 2b19 	vmov	r2, r3, d9
 800af24:	4606      	mov	r6, r0
 800af26:	460f      	mov	r7, r1
 800af28:	4620      	mov	r0, r4
 800af2a:	4629      	mov	r1, r5
 800af2c:	f7f5 f9cc 	bl	80002c8 <__aeabi_dsub>
 800af30:	4602      	mov	r2, r0
 800af32:	460b      	mov	r3, r1
 800af34:	4640      	mov	r0, r8
 800af36:	4649      	mov	r1, r9
 800af38:	f7f5 f9c6 	bl	80002c8 <__aeabi_dsub>
 800af3c:	a372      	add	r3, pc, #456	; (adr r3, 800b108 <__ieee754_pow+0xa08>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	f7f5 fb79 	bl	8000638 <__aeabi_dmul>
 800af46:	a372      	add	r3, pc, #456	; (adr r3, 800b110 <__ieee754_pow+0xa10>)
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	4680      	mov	r8, r0
 800af4e:	4689      	mov	r9, r1
 800af50:	4620      	mov	r0, r4
 800af52:	4629      	mov	r1, r5
 800af54:	f7f5 fb70 	bl	8000638 <__aeabi_dmul>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	4640      	mov	r0, r8
 800af5e:	4649      	mov	r1, r9
 800af60:	f7f5 f9b4 	bl	80002cc <__adddf3>
 800af64:	4604      	mov	r4, r0
 800af66:	460d      	mov	r5, r1
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4630      	mov	r0, r6
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 f9ac 	bl	80002cc <__adddf3>
 800af74:	4632      	mov	r2, r6
 800af76:	463b      	mov	r3, r7
 800af78:	4680      	mov	r8, r0
 800af7a:	4689      	mov	r9, r1
 800af7c:	f7f5 f9a4 	bl	80002c8 <__aeabi_dsub>
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	4620      	mov	r0, r4
 800af86:	4629      	mov	r1, r5
 800af88:	f7f5 f99e 	bl	80002c8 <__aeabi_dsub>
 800af8c:	4642      	mov	r2, r8
 800af8e:	4606      	mov	r6, r0
 800af90:	460f      	mov	r7, r1
 800af92:	464b      	mov	r3, r9
 800af94:	4640      	mov	r0, r8
 800af96:	4649      	mov	r1, r9
 800af98:	f7f5 fb4e 	bl	8000638 <__aeabi_dmul>
 800af9c:	a35e      	add	r3, pc, #376	; (adr r3, 800b118 <__ieee754_pow+0xa18>)
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	4604      	mov	r4, r0
 800afa4:	460d      	mov	r5, r1
 800afa6:	f7f5 fb47 	bl	8000638 <__aeabi_dmul>
 800afaa:	a35d      	add	r3, pc, #372	; (adr r3, 800b120 <__ieee754_pow+0xa20>)
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	f7f5 f98a 	bl	80002c8 <__aeabi_dsub>
 800afb4:	4622      	mov	r2, r4
 800afb6:	462b      	mov	r3, r5
 800afb8:	f7f5 fb3e 	bl	8000638 <__aeabi_dmul>
 800afbc:	a35a      	add	r3, pc, #360	; (adr r3, 800b128 <__ieee754_pow+0xa28>)
 800afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc2:	f7f5 f983 	bl	80002cc <__adddf3>
 800afc6:	4622      	mov	r2, r4
 800afc8:	462b      	mov	r3, r5
 800afca:	f7f5 fb35 	bl	8000638 <__aeabi_dmul>
 800afce:	a358      	add	r3, pc, #352	; (adr r3, 800b130 <__ieee754_pow+0xa30>)
 800afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd4:	f7f5 f978 	bl	80002c8 <__aeabi_dsub>
 800afd8:	4622      	mov	r2, r4
 800afda:	462b      	mov	r3, r5
 800afdc:	f7f5 fb2c 	bl	8000638 <__aeabi_dmul>
 800afe0:	a355      	add	r3, pc, #340	; (adr r3, 800b138 <__ieee754_pow+0xa38>)
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	f7f5 f971 	bl	80002cc <__adddf3>
 800afea:	4622      	mov	r2, r4
 800afec:	462b      	mov	r3, r5
 800afee:	f7f5 fb23 	bl	8000638 <__aeabi_dmul>
 800aff2:	4602      	mov	r2, r0
 800aff4:	460b      	mov	r3, r1
 800aff6:	4640      	mov	r0, r8
 800aff8:	4649      	mov	r1, r9
 800affa:	f7f5 f965 	bl	80002c8 <__aeabi_dsub>
 800affe:	4604      	mov	r4, r0
 800b000:	460d      	mov	r5, r1
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4640      	mov	r0, r8
 800b008:	4649      	mov	r1, r9
 800b00a:	f7f5 fb15 	bl	8000638 <__aeabi_dmul>
 800b00e:	2200      	movs	r2, #0
 800b010:	ec41 0b19 	vmov	d9, r0, r1
 800b014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b018:	4620      	mov	r0, r4
 800b01a:	4629      	mov	r1, r5
 800b01c:	f7f5 f954 	bl	80002c8 <__aeabi_dsub>
 800b020:	4602      	mov	r2, r0
 800b022:	460b      	mov	r3, r1
 800b024:	ec51 0b19 	vmov	r0, r1, d9
 800b028:	f7f5 fc30 	bl	800088c <__aeabi_ddiv>
 800b02c:	4632      	mov	r2, r6
 800b02e:	4604      	mov	r4, r0
 800b030:	460d      	mov	r5, r1
 800b032:	463b      	mov	r3, r7
 800b034:	4640      	mov	r0, r8
 800b036:	4649      	mov	r1, r9
 800b038:	f7f5 fafe 	bl	8000638 <__aeabi_dmul>
 800b03c:	4632      	mov	r2, r6
 800b03e:	463b      	mov	r3, r7
 800b040:	f7f5 f944 	bl	80002cc <__adddf3>
 800b044:	4602      	mov	r2, r0
 800b046:	460b      	mov	r3, r1
 800b048:	4620      	mov	r0, r4
 800b04a:	4629      	mov	r1, r5
 800b04c:	f7f5 f93c 	bl	80002c8 <__aeabi_dsub>
 800b050:	4642      	mov	r2, r8
 800b052:	464b      	mov	r3, r9
 800b054:	f7f5 f938 	bl	80002c8 <__aeabi_dsub>
 800b058:	460b      	mov	r3, r1
 800b05a:	4602      	mov	r2, r0
 800b05c:	493a      	ldr	r1, [pc, #232]	; (800b148 <__ieee754_pow+0xa48>)
 800b05e:	2000      	movs	r0, #0
 800b060:	f7f5 f932 	bl	80002c8 <__aeabi_dsub>
 800b064:	ec41 0b10 	vmov	d0, r0, r1
 800b068:	ee10 3a90 	vmov	r3, s1
 800b06c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b074:	da2b      	bge.n	800b0ce <__ieee754_pow+0x9ce>
 800b076:	4650      	mov	r0, sl
 800b078:	f000 f966 	bl	800b348 <scalbn>
 800b07c:	ec51 0b10 	vmov	r0, r1, d0
 800b080:	ec53 2b18 	vmov	r2, r3, d8
 800b084:	f7ff bbed 	b.w	800a862 <__ieee754_pow+0x162>
 800b088:	4b30      	ldr	r3, [pc, #192]	; (800b14c <__ieee754_pow+0xa4c>)
 800b08a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b08e:	429e      	cmp	r6, r3
 800b090:	f77f af0c 	ble.w	800aeac <__ieee754_pow+0x7ac>
 800b094:	4b2e      	ldr	r3, [pc, #184]	; (800b150 <__ieee754_pow+0xa50>)
 800b096:	440b      	add	r3, r1
 800b098:	4303      	orrs	r3, r0
 800b09a:	d009      	beq.n	800b0b0 <__ieee754_pow+0x9b0>
 800b09c:	ec51 0b18 	vmov	r0, r1, d8
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f7f5 fd3a 	bl	8000b1c <__aeabi_dcmplt>
 800b0a8:	3800      	subs	r0, #0
 800b0aa:	bf18      	it	ne
 800b0ac:	2001      	movne	r0, #1
 800b0ae:	e447      	b.n	800a940 <__ieee754_pow+0x240>
 800b0b0:	4622      	mov	r2, r4
 800b0b2:	462b      	mov	r3, r5
 800b0b4:	f7f5 f908 	bl	80002c8 <__aeabi_dsub>
 800b0b8:	4642      	mov	r2, r8
 800b0ba:	464b      	mov	r3, r9
 800b0bc:	f7f5 fd42 	bl	8000b44 <__aeabi_dcmpge>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	f43f aef3 	beq.w	800aeac <__ieee754_pow+0x7ac>
 800b0c6:	e7e9      	b.n	800b09c <__ieee754_pow+0x99c>
 800b0c8:	f04f 0a00 	mov.w	sl, #0
 800b0cc:	e71a      	b.n	800af04 <__ieee754_pow+0x804>
 800b0ce:	ec51 0b10 	vmov	r0, r1, d0
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	e7d4      	b.n	800b080 <__ieee754_pow+0x980>
 800b0d6:	491c      	ldr	r1, [pc, #112]	; (800b148 <__ieee754_pow+0xa48>)
 800b0d8:	2000      	movs	r0, #0
 800b0da:	f7ff bb30 	b.w	800a73e <__ieee754_pow+0x3e>
 800b0de:	2000      	movs	r0, #0
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	f7ff bb2c 	b.w	800a73e <__ieee754_pow+0x3e>
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	f7ff bb28 	b.w	800a73e <__ieee754_pow+0x3e>
 800b0ee:	9204      	str	r2, [sp, #16]
 800b0f0:	f7ff bb7a 	b.w	800a7e8 <__ieee754_pow+0xe8>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f7ff bb64 	b.w	800a7c2 <__ieee754_pow+0xc2>
 800b0fa:	bf00      	nop
 800b0fc:	f3af 8000 	nop.w
 800b100:	00000000 	.word	0x00000000
 800b104:	3fe62e43 	.word	0x3fe62e43
 800b108:	fefa39ef 	.word	0xfefa39ef
 800b10c:	3fe62e42 	.word	0x3fe62e42
 800b110:	0ca86c39 	.word	0x0ca86c39
 800b114:	be205c61 	.word	0xbe205c61
 800b118:	72bea4d0 	.word	0x72bea4d0
 800b11c:	3e663769 	.word	0x3e663769
 800b120:	c5d26bf1 	.word	0xc5d26bf1
 800b124:	3ebbbd41 	.word	0x3ebbbd41
 800b128:	af25de2c 	.word	0xaf25de2c
 800b12c:	3f11566a 	.word	0x3f11566a
 800b130:	16bebd93 	.word	0x16bebd93
 800b134:	3f66c16c 	.word	0x3f66c16c
 800b138:	5555553e 	.word	0x5555553e
 800b13c:	3fc55555 	.word	0x3fc55555
 800b140:	3fe00000 	.word	0x3fe00000
 800b144:	000fffff 	.word	0x000fffff
 800b148:	3ff00000 	.word	0x3ff00000
 800b14c:	4090cbff 	.word	0x4090cbff
 800b150:	3f6f3400 	.word	0x3f6f3400
 800b154:	652b82fe 	.word	0x652b82fe
 800b158:	3c971547 	.word	0x3c971547

0800b15c <__ieee754_sqrt>:
 800b15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b160:	ec55 4b10 	vmov	r4, r5, d0
 800b164:	4e55      	ldr	r6, [pc, #340]	; (800b2bc <__ieee754_sqrt+0x160>)
 800b166:	43ae      	bics	r6, r5
 800b168:	ee10 0a10 	vmov	r0, s0
 800b16c:	ee10 3a10 	vmov	r3, s0
 800b170:	462a      	mov	r2, r5
 800b172:	4629      	mov	r1, r5
 800b174:	d110      	bne.n	800b198 <__ieee754_sqrt+0x3c>
 800b176:	ee10 2a10 	vmov	r2, s0
 800b17a:	462b      	mov	r3, r5
 800b17c:	f7f5 fa5c 	bl	8000638 <__aeabi_dmul>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	4620      	mov	r0, r4
 800b186:	4629      	mov	r1, r5
 800b188:	f7f5 f8a0 	bl	80002cc <__adddf3>
 800b18c:	4604      	mov	r4, r0
 800b18e:	460d      	mov	r5, r1
 800b190:	ec45 4b10 	vmov	d0, r4, r5
 800b194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b198:	2d00      	cmp	r5, #0
 800b19a:	dc10      	bgt.n	800b1be <__ieee754_sqrt+0x62>
 800b19c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b1a0:	4330      	orrs	r0, r6
 800b1a2:	d0f5      	beq.n	800b190 <__ieee754_sqrt+0x34>
 800b1a4:	b15d      	cbz	r5, 800b1be <__ieee754_sqrt+0x62>
 800b1a6:	ee10 2a10 	vmov	r2, s0
 800b1aa:	462b      	mov	r3, r5
 800b1ac:	ee10 0a10 	vmov	r0, s0
 800b1b0:	f7f5 f88a 	bl	80002c8 <__aeabi_dsub>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	f7f5 fb68 	bl	800088c <__aeabi_ddiv>
 800b1bc:	e7e6      	b.n	800b18c <__ieee754_sqrt+0x30>
 800b1be:	1512      	asrs	r2, r2, #20
 800b1c0:	d074      	beq.n	800b2ac <__ieee754_sqrt+0x150>
 800b1c2:	07d4      	lsls	r4, r2, #31
 800b1c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b1c8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b1cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b1d0:	bf5e      	ittt	pl
 800b1d2:	0fda      	lsrpl	r2, r3, #31
 800b1d4:	005b      	lslpl	r3, r3, #1
 800b1d6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b1da:	2400      	movs	r4, #0
 800b1dc:	0fda      	lsrs	r2, r3, #31
 800b1de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b1e2:	107f      	asrs	r7, r7, #1
 800b1e4:	005b      	lsls	r3, r3, #1
 800b1e6:	2516      	movs	r5, #22
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b1ee:	1886      	adds	r6, r0, r2
 800b1f0:	428e      	cmp	r6, r1
 800b1f2:	bfde      	ittt	le
 800b1f4:	1b89      	suble	r1, r1, r6
 800b1f6:	18b0      	addle	r0, r6, r2
 800b1f8:	18a4      	addle	r4, r4, r2
 800b1fa:	0049      	lsls	r1, r1, #1
 800b1fc:	3d01      	subs	r5, #1
 800b1fe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b202:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b206:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b20a:	d1f0      	bne.n	800b1ee <__ieee754_sqrt+0x92>
 800b20c:	462a      	mov	r2, r5
 800b20e:	f04f 0e20 	mov.w	lr, #32
 800b212:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b216:	4281      	cmp	r1, r0
 800b218:	eb06 0c05 	add.w	ip, r6, r5
 800b21c:	dc02      	bgt.n	800b224 <__ieee754_sqrt+0xc8>
 800b21e:	d113      	bne.n	800b248 <__ieee754_sqrt+0xec>
 800b220:	459c      	cmp	ip, r3
 800b222:	d811      	bhi.n	800b248 <__ieee754_sqrt+0xec>
 800b224:	f1bc 0f00 	cmp.w	ip, #0
 800b228:	eb0c 0506 	add.w	r5, ip, r6
 800b22c:	da43      	bge.n	800b2b6 <__ieee754_sqrt+0x15a>
 800b22e:	2d00      	cmp	r5, #0
 800b230:	db41      	blt.n	800b2b6 <__ieee754_sqrt+0x15a>
 800b232:	f100 0801 	add.w	r8, r0, #1
 800b236:	1a09      	subs	r1, r1, r0
 800b238:	459c      	cmp	ip, r3
 800b23a:	bf88      	it	hi
 800b23c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b240:	eba3 030c 	sub.w	r3, r3, ip
 800b244:	4432      	add	r2, r6
 800b246:	4640      	mov	r0, r8
 800b248:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b24c:	f1be 0e01 	subs.w	lr, lr, #1
 800b250:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b254:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b258:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b25c:	d1db      	bne.n	800b216 <__ieee754_sqrt+0xba>
 800b25e:	430b      	orrs	r3, r1
 800b260:	d006      	beq.n	800b270 <__ieee754_sqrt+0x114>
 800b262:	1c50      	adds	r0, r2, #1
 800b264:	bf13      	iteet	ne
 800b266:	3201      	addne	r2, #1
 800b268:	3401      	addeq	r4, #1
 800b26a:	4672      	moveq	r2, lr
 800b26c:	f022 0201 	bicne.w	r2, r2, #1
 800b270:	1063      	asrs	r3, r4, #1
 800b272:	0852      	lsrs	r2, r2, #1
 800b274:	07e1      	lsls	r1, r4, #31
 800b276:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b27a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b27e:	bf48      	it	mi
 800b280:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b284:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b288:	4614      	mov	r4, r2
 800b28a:	e781      	b.n	800b190 <__ieee754_sqrt+0x34>
 800b28c:	0ad9      	lsrs	r1, r3, #11
 800b28e:	3815      	subs	r0, #21
 800b290:	055b      	lsls	r3, r3, #21
 800b292:	2900      	cmp	r1, #0
 800b294:	d0fa      	beq.n	800b28c <__ieee754_sqrt+0x130>
 800b296:	02cd      	lsls	r5, r1, #11
 800b298:	d50a      	bpl.n	800b2b0 <__ieee754_sqrt+0x154>
 800b29a:	f1c2 0420 	rsb	r4, r2, #32
 800b29e:	fa23 f404 	lsr.w	r4, r3, r4
 800b2a2:	1e55      	subs	r5, r2, #1
 800b2a4:	4093      	lsls	r3, r2
 800b2a6:	4321      	orrs	r1, r4
 800b2a8:	1b42      	subs	r2, r0, r5
 800b2aa:	e78a      	b.n	800b1c2 <__ieee754_sqrt+0x66>
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	e7f0      	b.n	800b292 <__ieee754_sqrt+0x136>
 800b2b0:	0049      	lsls	r1, r1, #1
 800b2b2:	3201      	adds	r2, #1
 800b2b4:	e7ef      	b.n	800b296 <__ieee754_sqrt+0x13a>
 800b2b6:	4680      	mov	r8, r0
 800b2b8:	e7bd      	b.n	800b236 <__ieee754_sqrt+0xda>
 800b2ba:	bf00      	nop
 800b2bc:	7ff00000 	.word	0x7ff00000

0800b2c0 <with_errno>:
 800b2c0:	b570      	push	{r4, r5, r6, lr}
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	460d      	mov	r5, r1
 800b2c6:	4616      	mov	r6, r2
 800b2c8:	f7fd ffe2 	bl	8009290 <__errno>
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	6006      	str	r6, [r0, #0]
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	bd70      	pop	{r4, r5, r6, pc}

0800b2d4 <xflow>:
 800b2d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2d6:	4614      	mov	r4, r2
 800b2d8:	461d      	mov	r5, r3
 800b2da:	b108      	cbz	r0, 800b2e0 <xflow+0xc>
 800b2dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2e0:	e9cd 2300 	strd	r2, r3, [sp]
 800b2e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	f7f5 f9a4 	bl	8000638 <__aeabi_dmul>
 800b2f0:	2222      	movs	r2, #34	; 0x22
 800b2f2:	b003      	add	sp, #12
 800b2f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2f8:	f7ff bfe2 	b.w	800b2c0 <with_errno>

0800b2fc <__math_uflow>:
 800b2fc:	b508      	push	{r3, lr}
 800b2fe:	2200      	movs	r2, #0
 800b300:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b304:	f7ff ffe6 	bl	800b2d4 <xflow>
 800b308:	ec41 0b10 	vmov	d0, r0, r1
 800b30c:	bd08      	pop	{r3, pc}

0800b30e <__math_oflow>:
 800b30e:	b508      	push	{r3, lr}
 800b310:	2200      	movs	r2, #0
 800b312:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b316:	f7ff ffdd 	bl	800b2d4 <xflow>
 800b31a:	ec41 0b10 	vmov	d0, r0, r1
 800b31e:	bd08      	pop	{r3, pc}

0800b320 <fabs>:
 800b320:	ec51 0b10 	vmov	r0, r1, d0
 800b324:	ee10 2a10 	vmov	r2, s0
 800b328:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b32c:	ec43 2b10 	vmov	d0, r2, r3
 800b330:	4770      	bx	lr

0800b332 <finite>:
 800b332:	b082      	sub	sp, #8
 800b334:	ed8d 0b00 	vstr	d0, [sp]
 800b338:	9801      	ldr	r0, [sp, #4]
 800b33a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b33e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b342:	0fc0      	lsrs	r0, r0, #31
 800b344:	b002      	add	sp, #8
 800b346:	4770      	bx	lr

0800b348 <scalbn>:
 800b348:	b570      	push	{r4, r5, r6, lr}
 800b34a:	ec55 4b10 	vmov	r4, r5, d0
 800b34e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b352:	4606      	mov	r6, r0
 800b354:	462b      	mov	r3, r5
 800b356:	b99a      	cbnz	r2, 800b380 <scalbn+0x38>
 800b358:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b35c:	4323      	orrs	r3, r4
 800b35e:	d036      	beq.n	800b3ce <scalbn+0x86>
 800b360:	4b39      	ldr	r3, [pc, #228]	; (800b448 <scalbn+0x100>)
 800b362:	4629      	mov	r1, r5
 800b364:	ee10 0a10 	vmov	r0, s0
 800b368:	2200      	movs	r2, #0
 800b36a:	f7f5 f965 	bl	8000638 <__aeabi_dmul>
 800b36e:	4b37      	ldr	r3, [pc, #220]	; (800b44c <scalbn+0x104>)
 800b370:	429e      	cmp	r6, r3
 800b372:	4604      	mov	r4, r0
 800b374:	460d      	mov	r5, r1
 800b376:	da10      	bge.n	800b39a <scalbn+0x52>
 800b378:	a32b      	add	r3, pc, #172	; (adr r3, 800b428 <scalbn+0xe0>)
 800b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37e:	e03a      	b.n	800b3f6 <scalbn+0xae>
 800b380:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b384:	428a      	cmp	r2, r1
 800b386:	d10c      	bne.n	800b3a2 <scalbn+0x5a>
 800b388:	ee10 2a10 	vmov	r2, s0
 800b38c:	4620      	mov	r0, r4
 800b38e:	4629      	mov	r1, r5
 800b390:	f7f4 ff9c 	bl	80002cc <__adddf3>
 800b394:	4604      	mov	r4, r0
 800b396:	460d      	mov	r5, r1
 800b398:	e019      	b.n	800b3ce <scalbn+0x86>
 800b39a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b39e:	460b      	mov	r3, r1
 800b3a0:	3a36      	subs	r2, #54	; 0x36
 800b3a2:	4432      	add	r2, r6
 800b3a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b3a8:	428a      	cmp	r2, r1
 800b3aa:	dd08      	ble.n	800b3be <scalbn+0x76>
 800b3ac:	2d00      	cmp	r5, #0
 800b3ae:	a120      	add	r1, pc, #128	; (adr r1, 800b430 <scalbn+0xe8>)
 800b3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3b4:	da1c      	bge.n	800b3f0 <scalbn+0xa8>
 800b3b6:	a120      	add	r1, pc, #128	; (adr r1, 800b438 <scalbn+0xf0>)
 800b3b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3bc:	e018      	b.n	800b3f0 <scalbn+0xa8>
 800b3be:	2a00      	cmp	r2, #0
 800b3c0:	dd08      	ble.n	800b3d4 <scalbn+0x8c>
 800b3c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b3ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b3ce:	ec45 4b10 	vmov	d0, r4, r5
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b3d8:	da19      	bge.n	800b40e <scalbn+0xc6>
 800b3da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b3de:	429e      	cmp	r6, r3
 800b3e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b3e4:	dd0a      	ble.n	800b3fc <scalbn+0xb4>
 800b3e6:	a112      	add	r1, pc, #72	; (adr r1, 800b430 <scalbn+0xe8>)
 800b3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1e2      	bne.n	800b3b6 <scalbn+0x6e>
 800b3f0:	a30f      	add	r3, pc, #60	; (adr r3, 800b430 <scalbn+0xe8>)
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	f7f5 f91f 	bl	8000638 <__aeabi_dmul>
 800b3fa:	e7cb      	b.n	800b394 <scalbn+0x4c>
 800b3fc:	a10a      	add	r1, pc, #40	; (adr r1, 800b428 <scalbn+0xe0>)
 800b3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0b8      	beq.n	800b378 <scalbn+0x30>
 800b406:	a10e      	add	r1, pc, #56	; (adr r1, 800b440 <scalbn+0xf8>)
 800b408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b40c:	e7b4      	b.n	800b378 <scalbn+0x30>
 800b40e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b412:	3236      	adds	r2, #54	; 0x36
 800b414:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b418:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b41c:	4620      	mov	r0, r4
 800b41e:	4b0c      	ldr	r3, [pc, #48]	; (800b450 <scalbn+0x108>)
 800b420:	2200      	movs	r2, #0
 800b422:	e7e8      	b.n	800b3f6 <scalbn+0xae>
 800b424:	f3af 8000 	nop.w
 800b428:	c2f8f359 	.word	0xc2f8f359
 800b42c:	01a56e1f 	.word	0x01a56e1f
 800b430:	8800759c 	.word	0x8800759c
 800b434:	7e37e43c 	.word	0x7e37e43c
 800b438:	8800759c 	.word	0x8800759c
 800b43c:	fe37e43c 	.word	0xfe37e43c
 800b440:	c2f8f359 	.word	0xc2f8f359
 800b444:	81a56e1f 	.word	0x81a56e1f
 800b448:	43500000 	.word	0x43500000
 800b44c:	ffff3cb0 	.word	0xffff3cb0
 800b450:	3c900000 	.word	0x3c900000

0800b454 <_init>:
 800b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b456:	bf00      	nop
 800b458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45a:	bc08      	pop	{r3}
 800b45c:	469e      	mov	lr, r3
 800b45e:	4770      	bx	lr

0800b460 <_fini>:
 800b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b462:	bf00      	nop
 800b464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b466:	bc08      	pop	{r3}
 800b468:	469e      	mov	lr, r3
 800b46a:	4770      	bx	lr
