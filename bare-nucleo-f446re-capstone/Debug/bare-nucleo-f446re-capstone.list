
bare-nucleo-f446re-capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  08009050  08009050  00019050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009618  08009618  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009618  08009618  00019618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009620  08009620  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006838  20000088  080096b0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200068c0  080096b0  000268c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011913  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4d  00000000  00000000  000319cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00034618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  000354c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cd0  00000000  00000000  00036230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001573f  00000000  00000000  0005af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8e0b  00000000  00000000  0007063f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014944a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000403c  00000000  00000000  0014949c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009038 	.word	0x08009038

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08009038 	.word	0x08009038

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b974 	b.w	8000bcc <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468e      	mov	lr, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d14d      	bne.n	80009a6 <__udivmoddi4+0xaa>
 800090a:	428a      	cmp	r2, r1
 800090c:	4694      	mov	ip, r2
 800090e:	d969      	bls.n	80009e4 <__udivmoddi4+0xe8>
 8000910:	fab2 f282 	clz	r2, r2
 8000914:	b152      	cbz	r2, 800092c <__udivmoddi4+0x30>
 8000916:	fa01 f302 	lsl.w	r3, r1, r2
 800091a:	f1c2 0120 	rsb	r1, r2, #32
 800091e:	fa20 f101 	lsr.w	r1, r0, r1
 8000922:	fa0c fc02 	lsl.w	ip, ip, r2
 8000926:	ea41 0e03 	orr.w	lr, r1, r3
 800092a:	4094      	lsls	r4, r2
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	0c21      	lsrs	r1, r4, #16
 8000932:	fbbe f6f8 	udiv	r6, lr, r8
 8000936:	fa1f f78c 	uxth.w	r7, ip
 800093a:	fb08 e316 	mls	r3, r8, r6, lr
 800093e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000942:	fb06 f107 	mul.w	r1, r6, r7
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000952:	f080 811f 	bcs.w	8000b94 <__udivmoddi4+0x298>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 811c 	bls.w	8000b94 <__udivmoddi4+0x298>
 800095c:	3e02      	subs	r6, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a5b      	subs	r3, r3, r1
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb3 f0f8 	udiv	r0, r3, r8
 8000968:	fb08 3310 	mls	r3, r8, r0, r3
 800096c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000970:	fb00 f707 	mul.w	r7, r0, r7
 8000974:	42a7      	cmp	r7, r4
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x92>
 8000978:	eb1c 0404 	adds.w	r4, ip, r4
 800097c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000980:	f080 810a 	bcs.w	8000b98 <__udivmoddi4+0x29c>
 8000984:	42a7      	cmp	r7, r4
 8000986:	f240 8107 	bls.w	8000b98 <__udivmoddi4+0x29c>
 800098a:	4464      	add	r4, ip
 800098c:	3802      	subs	r0, #2
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	1be4      	subs	r4, r4, r7
 8000994:	2600      	movs	r6, #0
 8000996:	b11d      	cbz	r5, 80009a0 <__udivmoddi4+0xa4>
 8000998:	40d4      	lsrs	r4, r2
 800099a:	2300      	movs	r3, #0
 800099c:	e9c5 4300 	strd	r4, r3, [r5]
 80009a0:	4631      	mov	r1, r6
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d909      	bls.n	80009be <__udivmoddi4+0xc2>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	f000 80ef 	beq.w	8000b8e <__udivmoddi4+0x292>
 80009b0:	2600      	movs	r6, #0
 80009b2:	e9c5 0100 	strd	r0, r1, [r5]
 80009b6:	4630      	mov	r0, r6
 80009b8:	4631      	mov	r1, r6
 80009ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009be:	fab3 f683 	clz	r6, r3
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d14a      	bne.n	8000a5c <__udivmoddi4+0x160>
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d302      	bcc.n	80009d0 <__udivmoddi4+0xd4>
 80009ca:	4282      	cmp	r2, r0
 80009cc:	f200 80f9 	bhi.w	8000bc2 <__udivmoddi4+0x2c6>
 80009d0:	1a84      	subs	r4, r0, r2
 80009d2:	eb61 0303 	sbc.w	r3, r1, r3
 80009d6:	2001      	movs	r0, #1
 80009d8:	469e      	mov	lr, r3
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d0e0      	beq.n	80009a0 <__udivmoddi4+0xa4>
 80009de:	e9c5 4e00 	strd	r4, lr, [r5]
 80009e2:	e7dd      	b.n	80009a0 <__udivmoddi4+0xa4>
 80009e4:	b902      	cbnz	r2, 80009e8 <__udivmoddi4+0xec>
 80009e6:	deff      	udf	#255	; 0xff
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	f040 8092 	bne.w	8000b16 <__udivmoddi4+0x21a>
 80009f2:	eba1 010c 	sub.w	r1, r1, ip
 80009f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009fa:	fa1f fe8c 	uxth.w	lr, ip
 80009fe:	2601      	movs	r6, #1
 8000a00:	0c20      	lsrs	r0, r4, #16
 8000a02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a06:	fb07 1113 	mls	r1, r7, r3, r1
 8000a0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a0e:	fb0e f003 	mul.w	r0, lr, r3
 8000a12:	4288      	cmp	r0, r1
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x12c>
 8000a16:	eb1c 0101 	adds.w	r1, ip, r1
 8000a1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x12a>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f200 80cb 	bhi.w	8000bbc <__udivmoddi4+0x2c0>
 8000a26:	4643      	mov	r3, r8
 8000a28:	1a09      	subs	r1, r1, r0
 8000a2a:	b2a4      	uxth	r4, r4
 8000a2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a30:	fb07 1110 	mls	r1, r7, r0, r1
 8000a34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a38:	fb0e fe00 	mul.w	lr, lr, r0
 8000a3c:	45a6      	cmp	lr, r4
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x156>
 8000a40:	eb1c 0404 	adds.w	r4, ip, r4
 8000a44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a48:	d202      	bcs.n	8000a50 <__udivmoddi4+0x154>
 8000a4a:	45a6      	cmp	lr, r4
 8000a4c:	f200 80bb 	bhi.w	8000bc6 <__udivmoddi4+0x2ca>
 8000a50:	4608      	mov	r0, r1
 8000a52:	eba4 040e 	sub.w	r4, r4, lr
 8000a56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a5a:	e79c      	b.n	8000996 <__udivmoddi4+0x9a>
 8000a5c:	f1c6 0720 	rsb	r7, r6, #32
 8000a60:	40b3      	lsls	r3, r6
 8000a62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a72:	431c      	orrs	r4, r3
 8000a74:	40f9      	lsrs	r1, r7
 8000a76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a82:	0c20      	lsrs	r0, r4, #16
 8000a84:	fa1f fe8c 	uxth.w	lr, ip
 8000a88:	fb09 1118 	mls	r1, r9, r8, r1
 8000a8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a90:	fb08 f00e 	mul.w	r0, r8, lr
 8000a94:	4288      	cmp	r0, r1
 8000a96:	fa02 f206 	lsl.w	r2, r2, r6
 8000a9a:	d90b      	bls.n	8000ab4 <__udivmoddi4+0x1b8>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aa4:	f080 8088 	bcs.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f240 8085 	bls.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aae:	f1a8 0802 	sub.w	r8, r8, #2
 8000ab2:	4461      	add	r1, ip
 8000ab4:	1a09      	subs	r1, r1, r0
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000abc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ac0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ac4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ac8:	458e      	cmp	lr, r1
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x1e2>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ad4:	d26c      	bcs.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ad6:	458e      	cmp	lr, r1
 8000ad8:	d96a      	bls.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ada:	3802      	subs	r0, #2
 8000adc:	4461      	add	r1, ip
 8000ade:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ae6:	eba1 010e 	sub.w	r1, r1, lr
 8000aea:	42a1      	cmp	r1, r4
 8000aec:	46c8      	mov	r8, r9
 8000aee:	46a6      	mov	lr, r4
 8000af0:	d356      	bcc.n	8000ba0 <__udivmoddi4+0x2a4>
 8000af2:	d053      	beq.n	8000b9c <__udivmoddi4+0x2a0>
 8000af4:	b15d      	cbz	r5, 8000b0e <__udivmoddi4+0x212>
 8000af6:	ebb3 0208 	subs.w	r2, r3, r8
 8000afa:	eb61 010e 	sbc.w	r1, r1, lr
 8000afe:	fa01 f707 	lsl.w	r7, r1, r7
 8000b02:	fa22 f306 	lsr.w	r3, r2, r6
 8000b06:	40f1      	lsrs	r1, r6
 8000b08:	431f      	orrs	r7, r3
 8000b0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b0e:	2600      	movs	r6, #0
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	40d8      	lsrs	r0, r3
 8000b1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b20:	fa21 f303 	lsr.w	r3, r1, r3
 8000b24:	4091      	lsls	r1, r2
 8000b26:	4301      	orrs	r1, r0
 8000b28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2c:	fa1f fe8c 	uxth.w	lr, ip
 8000b30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b34:	fb07 3610 	mls	r6, r7, r0, r3
 8000b38:	0c0b      	lsrs	r3, r1, #16
 8000b3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b42:	429e      	cmp	r6, r3
 8000b44:	fa04 f402 	lsl.w	r4, r4, r2
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x260>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b52:	d22f      	bcs.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d92d      	bls.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	b289      	uxth	r1, r1
 8000b60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b64:	fb07 3316 	mls	r3, r7, r6, r3
 8000b68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b70:	428b      	cmp	r3, r1
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x28a>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b7c:	d216      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d914      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b82:	3e02      	subs	r6, #2
 8000b84:	4461      	add	r1, ip
 8000b86:	1ac9      	subs	r1, r1, r3
 8000b88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b8c:	e738      	b.n	8000a00 <__udivmoddi4+0x104>
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e705      	b.n	80009a0 <__udivmoddi4+0xa4>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e3      	b.n	8000960 <__udivmoddi4+0x64>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6f8      	b.n	800098e <__udivmoddi4+0x92>
 8000b9c:	454b      	cmp	r3, r9
 8000b9e:	d2a9      	bcs.n	8000af4 <__udivmoddi4+0x1f8>
 8000ba0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ba4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7a3      	b.n	8000af4 <__udivmoddi4+0x1f8>
 8000bac:	4646      	mov	r6, r8
 8000bae:	e7ea      	b.n	8000b86 <__udivmoddi4+0x28a>
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	e794      	b.n	8000ade <__udivmoddi4+0x1e2>
 8000bb4:	4640      	mov	r0, r8
 8000bb6:	e7d1      	b.n	8000b5c <__udivmoddi4+0x260>
 8000bb8:	46d0      	mov	r8, sl
 8000bba:	e77b      	b.n	8000ab4 <__udivmoddi4+0x1b8>
 8000bbc:	3b02      	subs	r3, #2
 8000bbe:	4461      	add	r1, ip
 8000bc0:	e732      	b.n	8000a28 <__udivmoddi4+0x12c>
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	e709      	b.n	80009da <__udivmoddi4+0xde>
 8000bc6:	4464      	add	r4, ip
 8000bc8:	3802      	subs	r0, #2
 8000bca:	e742      	b.n	8000a52 <__udivmoddi4+0x156>

08000bcc <__aeabi_idiv0>:
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bda:	4804      	ldr	r0, [pc, #16]	; (8000bec <SELECT+0x1c>)
 8000bdc:	f002 fc9c 	bl	8003518 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f001 fa51 	bl	8002088 <HAL_Delay>
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40020400 	.word	0x40020400

08000bf0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <DESELECT+0x1c>)
 8000bfc:	f002 fc8c 	bl	8003518 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f001 fa41 	bl	8002088 <HAL_Delay>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40020400 	.word	0x40020400

08000c10 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c1a:	bf00      	nop
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <SPI_TxByte+0x30>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d1f8      	bne.n	8000c1c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000c2a:	1df9      	adds	r1, r7, #7
 8000c2c:	2364      	movs	r3, #100	; 0x64
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <SPI_TxByte+0x30>)
 8000c32:	f003 fb4c 	bl	80042ce <HAL_SPI_Transmit>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000150 	.word	0x20000150

08000c44 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c50:	bf00      	nop
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <SPI_TxBuffer+0x30>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d1f8      	bne.n	8000c52 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c60:	887a      	ldrh	r2, [r7, #2]
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	4803      	ldr	r0, [pc, #12]	; (8000c74 <SPI_TxBuffer+0x30>)
 8000c68:	f003 fb31 	bl	80042ce <HAL_SPI_Transmit>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000150 	.word	0x20000150

08000c78 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c7e:	23ff      	movs	r3, #255	; 0xff
 8000c80:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c82:	bf00      	nop
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <SPI_RxByte+0x34>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d1f8      	bne.n	8000c84 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c92:	1dba      	adds	r2, r7, #6
 8000c94:	1df9      	adds	r1, r7, #7
 8000c96:	2364      	movs	r3, #100	; 0x64
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <SPI_RxByte+0x34>)
 8000c9e:	f003 fc52 	bl	8004546 <HAL_SPI_TransmitReceive>

	return data;
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000150 	.word	0x20000150

08000cb0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000cb8:	f7ff ffde 	bl	8000c78 <SPI_RxByte>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	701a      	strb	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <SD_ReadyWait+0x30>)
 8000cd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cd8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000cda:	f7ff ffcd 	bl	8000c78 <SPI_RxByte>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2bff      	cmp	r3, #255	; 0xff
 8000ce6:	d004      	beq.n	8000cf2 <SD_ReadyWait+0x26>
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <SD_ReadyWait+0x30>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f3      	bne.n	8000cda <SD_ReadyWait+0xe>

	return res;
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000666a 	.word	0x2000666a

08000d00 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000d06:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d0a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000d0c:	f7ff ff70 	bl	8000bf0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	e005      	b.n	8000d22 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000d16:	20ff      	movs	r0, #255	; 0xff
 8000d18:	f7ff ff7a 	bl	8000c10 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	2b09      	cmp	r3, #9
 8000d26:	ddf6      	ble.n	8000d16 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000d28:	f7ff ff52 	bl	8000bd0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000d2c:	2340      	movs	r3, #64	; 0x40
 8000d2e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000d40:	2395      	movs	r3, #149	; 0x95
 8000d42:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000d44:	463b      	mov	r3, r7
 8000d46:	2106      	movs	r1, #6
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff7b 	bl	8000c44 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d4e:	e002      	b.n	8000d56 <SD_PowerOn+0x56>
	{
		cnt--;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d56:	f7ff ff8f 	bl	8000c78 <SPI_RxByte>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d002      	beq.n	8000d66 <SD_PowerOn+0x66>
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f4      	bne.n	8000d50 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d66:	f7ff ff43 	bl	8000bf0 <DESELECT>
	SPI_TxByte(0XFF);
 8000d6a:	20ff      	movs	r0, #255	; 0xff
 8000d6c:	f7ff ff50 	bl	8000c10 <SPI_TxByte>

	PowerFlag = 1;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <SD_PowerOn+0x80>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200000a5 	.word	0x200000a5

08000d84 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <SD_PowerOff+0x14>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	200000a5 	.word	0x200000a5

08000d9c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <SD_CheckPower+0x14>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200000a5 	.word	0x200000a5

08000db4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <SD_RxDataBlock+0x5c>)
 8000dc0:	22c8      	movs	r2, #200	; 0xc8
 8000dc2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000dc4:	f7ff ff58 	bl	8000c78 <SPI_RxByte>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	2bff      	cmp	r3, #255	; 0xff
 8000dd0:	d104      	bne.n	8000ddc <SD_RxDataBlock+0x28>
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <SD_RxDataBlock+0x5c>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f3      	bne.n	8000dc4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	2bfe      	cmp	r3, #254	; 0xfe
 8000de0:	d001      	beq.n	8000de6 <SD_RxDataBlock+0x32>
 8000de2:	2300      	movs	r3, #0
 8000de4:	e00f      	b.n	8000e06 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5f 	bl	8000cb0 <SPI_RxBytePtr>
	} while(len--);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	1e5a      	subs	r2, r3, #1
 8000df6:	603a      	str	r2, [r7, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1f4      	bne.n	8000de6 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000dfc:	f7ff ff3c 	bl	8000c78 <SPI_RxByte>
	SPI_RxByte();
 8000e00:	f7ff ff3a 	bl	8000c78 <SPI_RxByte>

	return TRUE;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20006669 	.word	0x20006669

08000e14 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e24:	f7ff ff52 	bl	8000ccc <SD_ReadyWait>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2bff      	cmp	r3, #255	; 0xff
 8000e2c:	d001      	beq.n	8000e32 <SD_TxDataBlock+0x1e>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e02f      	b.n	8000e92 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff feeb 	bl	8000c10 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	2bfd      	cmp	r3, #253	; 0xfd
 8000e3e:	d020      	beq.n	8000e82 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff fefd 	bl	8000c44 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000e4a:	f7ff ff15 	bl	8000c78 <SPI_RxByte>
		SPI_RxByte();
 8000e4e:	f7ff ff13 	bl	8000c78 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e52:	e00b      	b.n	8000e6c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e54:	f7ff ff10 	bl	8000c78 <SPI_RxByte>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	f003 031f 	and.w	r3, r3, #31
 8000e62:	2b05      	cmp	r3, #5
 8000e64:	d006      	beq.n	8000e74 <SD_TxDataBlock+0x60>
			i++;
 8000e66:	7bbb      	ldrb	r3, [r7, #14]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e6c:	7bbb      	ldrb	r3, [r7, #14]
 8000e6e:	2b40      	cmp	r3, #64	; 0x40
 8000e70:	d9f0      	bls.n	8000e54 <SD_TxDataBlock+0x40>
 8000e72:	e000      	b.n	8000e76 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e74:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e76:	bf00      	nop
 8000e78:	f7ff fefe 	bl	8000c78 <SPI_RxByte>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0fa      	beq.n	8000e78 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	2b05      	cmp	r3, #5
 8000e8a:	d101      	bne.n	8000e90 <SD_TxDataBlock+0x7c>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	6039      	str	r1, [r7, #0]
 8000ea4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000ea6:	f7ff ff11 	bl	8000ccc <SD_ReadyWait>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2bff      	cmp	r3, #255	; 0xff
 8000eae:	d001      	beq.n	8000eb4 <SD_SendCmd+0x1a>
 8000eb0:	23ff      	movs	r3, #255	; 0xff
 8000eb2:	e042      	b.n	8000f3a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff feaa 	bl	8000c10 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	0e1b      	lsrs	r3, r3, #24
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fea4 	bl	8000c10 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	0c1b      	lsrs	r3, r3, #16
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fe9e 	bl	8000c10 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	0a1b      	lsrs	r3, r3, #8
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe98 	bl	8000c10 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe93 	bl	8000c10 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b40      	cmp	r3, #64	; 0x40
 8000eee:	d102      	bne.n	8000ef6 <SD_SendCmd+0x5c>
 8000ef0:	2395      	movs	r3, #149	; 0x95
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e007      	b.n	8000f06 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b48      	cmp	r3, #72	; 0x48
 8000efa:	d102      	bne.n	8000f02 <SD_SendCmd+0x68>
 8000efc:	2387      	movs	r3, #135	; 0x87
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e001      	b.n	8000f06 <SD_SendCmd+0x6c>
	else crc = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fe81 	bl	8000c10 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b4c      	cmp	r3, #76	; 0x4c
 8000f12:	d101      	bne.n	8000f18 <SD_SendCmd+0x7e>
 8000f14:	f7ff feb0 	bl	8000c78 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000f18:	230a      	movs	r3, #10
 8000f1a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000f1c:	f7ff feac 	bl	8000c78 <SPI_RxByte>
 8000f20:	4603      	mov	r3, r0
 8000f22:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000f24:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	da05      	bge.n	8000f38 <SD_SendCmd+0x9e>
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	73bb      	strb	r3, [r7, #14]
 8000f32:	7bbb      	ldrb	r3, [r7, #14]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f1      	bne.n	8000f1c <SD_SendCmd+0x82>

	return res;
 8000f38:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SD_disk_initialize+0x14>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e0d6      	b.n	8001106 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f58:	4b6d      	ldr	r3, [pc, #436]	; (8001110 <SD_disk_initialize+0x1cc>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <SD_disk_initialize+0x2a>
 8000f66:	4b6a      	ldr	r3, [pc, #424]	; (8001110 <SD_disk_initialize+0x1cc>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	e0cb      	b.n	8001106 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000f6e:	f7ff fec7 	bl	8000d00 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f72:	f7ff fe2d 	bl	8000bd0 <SELECT>

	/* check disk type */
	type = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2040      	movs	r0, #64	; 0x40
 8000f7e:	f7ff ff8c 	bl	8000e9a <SD_SendCmd>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	f040 80a6 	bne.w	80010d6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f8a:	4b62      	ldr	r3, [pc, #392]	; (8001114 <SD_disk_initialize+0x1d0>)
 8000f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f90:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f92:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f96:	2048      	movs	r0, #72	; 0x48
 8000f98:	f7ff ff7f 	bl	8000e9a <SD_SendCmd>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d158      	bne.n	8001054 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e00c      	b.n	8000fc2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000fa8:	7bfc      	ldrb	r4, [r7, #15]
 8000faa:	f7ff fe65 	bl	8000c78 <SPI_RxByte>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	f104 0310 	add.w	r3, r4, #16
 8000fb6:	443b      	add	r3, r7
 8000fb8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d9ef      	bls.n	8000fa8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000fc8:	7abb      	ldrb	r3, [r7, #10]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	f040 8083 	bne.w	80010d6 <SD_disk_initialize+0x192>
 8000fd0:	7afb      	ldrb	r3, [r7, #11]
 8000fd2:	2baa      	cmp	r3, #170	; 0xaa
 8000fd4:	d17f      	bne.n	80010d6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2077      	movs	r0, #119	; 0x77
 8000fda:	f7ff ff5e 	bl	8000e9a <SD_SendCmd>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d807      	bhi.n	8000ff4 <SD_disk_initialize+0xb0>
 8000fe4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fe8:	2069      	movs	r0, #105	; 0x69
 8000fea:	f7ff ff56 	bl	8000e9a <SD_SendCmd>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d005      	beq.n	8001000 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000ff4:	4b47      	ldr	r3, [pc, #284]	; (8001114 <SD_disk_initialize+0x1d0>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1eb      	bne.n	8000fd6 <SD_disk_initialize+0x92>
 8000ffe:	e000      	b.n	8001002 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001000:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001002:	4b44      	ldr	r3, [pc, #272]	; (8001114 <SD_disk_initialize+0x1d0>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d064      	beq.n	80010d6 <SD_disk_initialize+0x192>
 800100c:	2100      	movs	r1, #0
 800100e:	207a      	movs	r0, #122	; 0x7a
 8001010:	f7ff ff43 	bl	8000e9a <SD_SendCmd>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d15d      	bne.n	80010d6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e00c      	b.n	800103a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001020:	7bfc      	ldrb	r4, [r7, #15]
 8001022:	f7ff fe29 	bl	8000c78 <SPI_RxByte>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	f104 0310 	add.w	r3, r4, #16
 800102e:	443b      	add	r3, r7
 8001030:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3301      	adds	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b03      	cmp	r3, #3
 800103e:	d9ef      	bls.n	8001020 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001040:	7a3b      	ldrb	r3, [r7, #8]
 8001042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SD_disk_initialize+0x10a>
 800104a:	230c      	movs	r3, #12
 800104c:	e000      	b.n	8001050 <SD_disk_initialize+0x10c>
 800104e:	2304      	movs	r3, #4
 8001050:	73bb      	strb	r3, [r7, #14]
 8001052:	e040      	b.n	80010d6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001054:	2100      	movs	r1, #0
 8001056:	2077      	movs	r0, #119	; 0x77
 8001058:	f7ff ff1f 	bl	8000e9a <SD_SendCmd>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d808      	bhi.n	8001074 <SD_disk_initialize+0x130>
 8001062:	2100      	movs	r1, #0
 8001064:	2069      	movs	r0, #105	; 0x69
 8001066:	f7ff ff18 	bl	8000e9a <SD_SendCmd>
 800106a:	4603      	mov	r3, r0
 800106c:	2b01      	cmp	r3, #1
 800106e:	d801      	bhi.n	8001074 <SD_disk_initialize+0x130>
 8001070:	2302      	movs	r3, #2
 8001072:	e000      	b.n	8001076 <SD_disk_initialize+0x132>
 8001074:	2301      	movs	r3, #1
 8001076:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d10e      	bne.n	800109c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800107e:	2100      	movs	r1, #0
 8001080:	2077      	movs	r0, #119	; 0x77
 8001082:	f7ff ff0a 	bl	8000e9a <SD_SendCmd>
 8001086:	4603      	mov	r3, r0
 8001088:	2b01      	cmp	r3, #1
 800108a:	d80e      	bhi.n	80010aa <SD_disk_initialize+0x166>
 800108c:	2100      	movs	r1, #0
 800108e:	2069      	movs	r0, #105	; 0x69
 8001090:	f7ff ff03 	bl	8000e9a <SD_SendCmd>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d107      	bne.n	80010aa <SD_disk_initialize+0x166>
 800109a:	e00d      	b.n	80010b8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800109c:	2100      	movs	r1, #0
 800109e:	2041      	movs	r0, #65	; 0x41
 80010a0:	f7ff fefb 	bl	8000e9a <SD_SendCmd>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <SD_disk_initialize+0x1d0>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1e1      	bne.n	8001078 <SD_disk_initialize+0x134>
 80010b4:	e000      	b.n	80010b8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80010b6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <SD_disk_initialize+0x1d0>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <SD_disk_initialize+0x18e>
 80010c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c6:	2050      	movs	r0, #80	; 0x50
 80010c8:	f7ff fee7 	bl	8000e9a <SD_SendCmd>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SD_disk_initialize+0x192>
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <SD_disk_initialize+0x1d4>)
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80010dc:	f7ff fd88 	bl	8000bf0 <DESELECT>
	SPI_RxByte();
 80010e0:	f7ff fdca 	bl	8000c78 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <SD_disk_initialize+0x1cc>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <SD_disk_initialize+0x1cc>)
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e001      	b.n	8001100 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010fc:	f7ff fe42 	bl	8000d84 <SD_PowerOff>
	}

	return Stat;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <SD_disk_initialize+0x1cc>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
}
 8001106:	4618      	mov	r0, r3
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000
 8001114:	20006669 	.word	0x20006669
 8001118:	200000a4 	.word	0x200000a4

0800111c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SD_disk_status+0x14>
 800112c:	2301      	movs	r3, #1
 800112e:	e002      	b.n	8001136 <SD_disk_status+0x1a>
	return Stat;
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SD_disk_status+0x28>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000000 	.word	0x20000000

08001148 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d102      	bne.n	8001164 <SD_disk_read+0x1c>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <SD_disk_read+0x20>
 8001164:	2304      	movs	r3, #4
 8001166:	e051      	b.n	800120c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <SD_disk_read+0xcc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SD_disk_read+0x32>
 8001176:	2303      	movs	r3, #3
 8001178:	e048      	b.n	800120c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <SD_disk_read+0xd0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <SD_disk_read+0x44>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	025b      	lsls	r3, r3, #9
 800118a:	607b      	str	r3, [r7, #4]

	SELECT();
 800118c:	f7ff fd20 	bl	8000bd0 <SELECT>

	if (count == 1)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d111      	bne.n	80011ba <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	2051      	movs	r0, #81	; 0x51
 800119a:	f7ff fe7e 	bl	8000e9a <SD_SendCmd>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d129      	bne.n	80011f8 <SD_disk_read+0xb0>
 80011a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a8:	68b8      	ldr	r0, [r7, #8]
 80011aa:	f7ff fe03 	bl	8000db4 <SD_RxDataBlock>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d021      	beq.n	80011f8 <SD_disk_read+0xb0>
 80011b4:	2300      	movs	r3, #0
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	e01e      	b.n	80011f8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	2052      	movs	r0, #82	; 0x52
 80011be:	f7ff fe6c 	bl	8000e9a <SD_SendCmd>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d117      	bne.n	80011f8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80011c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	f7ff fdf1 	bl	8000db4 <SD_RxDataBlock>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00a      	beq.n	80011ee <SD_disk_read+0xa6>
				buff += 512;
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011de:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1ed      	bne.n	80011c8 <SD_disk_read+0x80>
 80011ec:	e000      	b.n	80011f0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80011ee:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80011f0:	2100      	movs	r1, #0
 80011f2:	204c      	movs	r0, #76	; 0x4c
 80011f4:	f7ff fe51 	bl	8000e9a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011f8:	f7ff fcfa 	bl	8000bf0 <DESELECT>
	SPI_RxByte();
 80011fc:	f7ff fd3c 	bl	8000c78 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	bf14      	ite	ne
 8001206:	2301      	movne	r3, #1
 8001208:	2300      	moveq	r3, #0
 800120a:	b2db      	uxtb	r3, r3
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000000 	.word	0x20000000
 8001218:	200000a4 	.word	0x200000a4

0800121c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <SD_disk_write+0x1c>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <SD_disk_write+0x20>
 8001238:	2304      	movs	r3, #4
 800123a:	e06b      	b.n	8001314 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800123c:	4b37      	ldr	r3, [pc, #220]	; (800131c <SD_disk_write+0x100>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SD_disk_write+0x32>
 800124a:	2303      	movs	r3, #3
 800124c:	e062      	b.n	8001314 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <SD_disk_write+0x100>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SD_disk_write+0x44>
 800125c:	2302      	movs	r3, #2
 800125e:	e059      	b.n	8001314 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001260:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <SD_disk_write+0x104>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <SD_disk_write+0x56>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	025b      	lsls	r3, r3, #9
 8001270:	607b      	str	r3, [r7, #4]

	SELECT();
 8001272:	f7ff fcad 	bl	8000bd0 <SELECT>

	if (count == 1)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d110      	bne.n	800129e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	2058      	movs	r0, #88	; 0x58
 8001280:	f7ff fe0b 	bl	8000e9a <SD_SendCmd>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d13a      	bne.n	8001300 <SD_disk_write+0xe4>
 800128a:	21fe      	movs	r1, #254	; 0xfe
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	f7ff fdc1 	bl	8000e14 <SD_TxDataBlock>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d033      	beq.n	8001300 <SD_disk_write+0xe4>
			count = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	e030      	b.n	8001300 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <SD_disk_write+0x104>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80012aa:	2100      	movs	r1, #0
 80012ac:	2077      	movs	r0, #119	; 0x77
 80012ae:	f7ff fdf4 	bl	8000e9a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	2057      	movs	r0, #87	; 0x57
 80012b6:	f7ff fdf0 	bl	8000e9a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	2059      	movs	r0, #89	; 0x59
 80012be:	f7ff fdec 	bl	8000e9a <SD_SendCmd>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d11b      	bne.n	8001300 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012c8:	21fc      	movs	r1, #252	; 0xfc
 80012ca:	68b8      	ldr	r0, [r7, #8]
 80012cc:	f7ff fda2 	bl	8000e14 <SD_TxDataBlock>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00a      	beq.n	80012ec <SD_disk_write+0xd0>
				buff += 512;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012dc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1ee      	bne.n	80012c8 <SD_disk_write+0xac>
 80012ea:	e000      	b.n	80012ee <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012ec:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80012ee:	21fd      	movs	r1, #253	; 0xfd
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff fd8f 	bl	8000e14 <SD_TxDataBlock>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <SD_disk_write+0xe4>
			{
				count = 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001300:	f7ff fc76 	bl	8000bf0 <DESELECT>
	SPI_RxByte();
 8001304:	f7ff fcb8 	bl	8000c78 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000000 	.word	0x20000000
 8001320:	200000a4 	.word	0x200000a4

08001324 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b08b      	sub	sp, #44	; 0x2c
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	603a      	str	r2, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	460b      	mov	r3, r1
 8001332:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SD_disk_ioctl+0x1e>
 800133e:	2304      	movs	r3, #4
 8001340:	e115      	b.n	800156e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d124      	bne.n	8001398 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d012      	beq.n	800137c <SD_disk_ioctl+0x58>
 8001356:	2b02      	cmp	r3, #2
 8001358:	dc1a      	bgt.n	8001390 <SD_disk_ioctl+0x6c>
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <SD_disk_ioctl+0x40>
 800135e:	2b01      	cmp	r3, #1
 8001360:	d006      	beq.n	8001370 <SD_disk_ioctl+0x4c>
 8001362:	e015      	b.n	8001390 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001364:	f7ff fd0e 	bl	8000d84 <SD_PowerOff>
			res = RES_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800136e:	e0fc      	b.n	800156a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001370:	f7ff fcc6 	bl	8000d00 <SD_PowerOn>
			res = RES_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800137a:	e0f6      	b.n	800156a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	1c5c      	adds	r4, r3, #1
 8001380:	f7ff fd0c 	bl	8000d9c <SD_CheckPower>
 8001384:	4603      	mov	r3, r0
 8001386:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001388:	2300      	movs	r3, #0
 800138a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800138e:	e0ec      	b.n	800156a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001390:	2304      	movs	r3, #4
 8001392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001396:	e0e8      	b.n	800156a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001398:	4b77      	ldr	r3, [pc, #476]	; (8001578 <SD_disk_ioctl+0x254>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SD_disk_ioctl+0x86>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e0e1      	b.n	800156e <SD_disk_ioctl+0x24a>

		SELECT();
 80013aa:	f7ff fc11 	bl	8000bd0 <SELECT>

		switch (ctrl)
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	2b0d      	cmp	r3, #13
 80013b2:	f200 80cb 	bhi.w	800154c <SD_disk_ioctl+0x228>
 80013b6:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <SD_disk_ioctl+0x98>)
 80013b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013bc:	080014b7 	.word	0x080014b7
 80013c0:	080013f5 	.word	0x080013f5
 80013c4:	080014a7 	.word	0x080014a7
 80013c8:	0800154d 	.word	0x0800154d
 80013cc:	0800154d 	.word	0x0800154d
 80013d0:	0800154d 	.word	0x0800154d
 80013d4:	0800154d 	.word	0x0800154d
 80013d8:	0800154d 	.word	0x0800154d
 80013dc:	0800154d 	.word	0x0800154d
 80013e0:	0800154d 	.word	0x0800154d
 80013e4:	0800154d 	.word	0x0800154d
 80013e8:	080014c9 	.word	0x080014c9
 80013ec:	080014ed 	.word	0x080014ed
 80013f0:	08001511 	.word	0x08001511
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013f4:	2100      	movs	r1, #0
 80013f6:	2049      	movs	r0, #73	; 0x49
 80013f8:	f7ff fd4f 	bl	8000e9a <SD_SendCmd>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 80a8 	bne.w	8001554 <SD_disk_ioctl+0x230>
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2110      	movs	r1, #16
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fcd2 	bl	8000db4 <SD_RxDataBlock>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 809e 	beq.w	8001554 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001418:	7b3b      	ldrb	r3, [r7, #12]
 800141a:	099b      	lsrs	r3, r3, #6
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d10e      	bne.n	8001440 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001422:	7d7b      	ldrb	r3, [r7, #21]
 8001424:	b29a      	uxth	r2, r3
 8001426:	7d3b      	ldrb	r3, [r7, #20]
 8001428:	b29b      	uxth	r3, r3
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	b29b      	uxth	r3, r3
 800142e:	4413      	add	r3, r2
 8001430:	b29b      	uxth	r3, r3
 8001432:	3301      	adds	r3, #1
 8001434:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001436:	8bfb      	ldrh	r3, [r7, #30]
 8001438:	029a      	lsls	r2, r3, #10
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e02e      	b.n	800149e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001440:	7c7b      	ldrb	r3, [r7, #17]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	b2da      	uxtb	r2, r3
 8001448:	7dbb      	ldrb	r3, [r7, #22]
 800144a:	09db      	lsrs	r3, r3, #7
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4413      	add	r3, r2
 8001450:	b2da      	uxtb	r2, r3
 8001452:	7d7b      	ldrb	r3, [r7, #21]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f003 0306 	and.w	r3, r3, #6
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4413      	add	r3, r2
 8001460:	b2db      	uxtb	r3, r3
 8001462:	3302      	adds	r3, #2
 8001464:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001468:	7d3b      	ldrb	r3, [r7, #20]
 800146a:	099b      	lsrs	r3, r3, #6
 800146c:	b2db      	uxtb	r3, r3
 800146e:	b29a      	uxth	r2, r3
 8001470:	7cfb      	ldrb	r3, [r7, #19]
 8001472:	b29b      	uxth	r3, r3
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	b29b      	uxth	r3, r3
 8001478:	4413      	add	r3, r2
 800147a:	b29a      	uxth	r2, r3
 800147c:	7cbb      	ldrb	r3, [r7, #18]
 800147e:	029b      	lsls	r3, r3, #10
 8001480:	b29b      	uxth	r3, r3
 8001482:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b29b      	uxth	r3, r3
 800148c:	3301      	adds	r3, #1
 800148e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001496:	3b09      	subs	r3, #9
 8001498:	409a      	lsls	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80014a4:	e056      	b.n	8001554 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ac:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014b4:	e055      	b.n	8001562 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80014b6:	f7ff fc09 	bl	8000ccc <SD_ReadyWait>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2bff      	cmp	r3, #255	; 0xff
 80014be:	d14b      	bne.n	8001558 <SD_disk_ioctl+0x234>
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014c6:	e047      	b.n	8001558 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014c8:	2100      	movs	r1, #0
 80014ca:	2049      	movs	r0, #73	; 0x49
 80014cc:	f7ff fce5 	bl	8000e9a <SD_SendCmd>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d142      	bne.n	800155c <SD_disk_ioctl+0x238>
 80014d6:	2110      	movs	r1, #16
 80014d8:	6a38      	ldr	r0, [r7, #32]
 80014da:	f7ff fc6b 	bl	8000db4 <SD_RxDataBlock>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d03b      	beq.n	800155c <SD_disk_ioctl+0x238>
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014ea:	e037      	b.n	800155c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014ec:	2100      	movs	r1, #0
 80014ee:	204a      	movs	r0, #74	; 0x4a
 80014f0:	f7ff fcd3 	bl	8000e9a <SD_SendCmd>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d132      	bne.n	8001560 <SD_disk_ioctl+0x23c>
 80014fa:	2110      	movs	r1, #16
 80014fc:	6a38      	ldr	r0, [r7, #32]
 80014fe:	f7ff fc59 	bl	8000db4 <SD_RxDataBlock>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d02b      	beq.n	8001560 <SD_disk_ioctl+0x23c>
 8001508:	2300      	movs	r3, #0
 800150a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800150e:	e027      	b.n	8001560 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001510:	2100      	movs	r1, #0
 8001512:	207a      	movs	r0, #122	; 0x7a
 8001514:	f7ff fcc1 	bl	8000e9a <SD_SendCmd>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d116      	bne.n	800154c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001524:	e00b      	b.n	800153e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001526:	6a3c      	ldr	r4, [r7, #32]
 8001528:	1c63      	adds	r3, r4, #1
 800152a:	623b      	str	r3, [r7, #32]
 800152c:	f7ff fba4 	bl	8000c78 <SPI_RxByte>
 8001530:	4603      	mov	r3, r0
 8001532:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001534:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001538:	3301      	adds	r3, #1
 800153a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800153e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001542:	2b03      	cmp	r3, #3
 8001544:	d9ef      	bls.n	8001526 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800154c:	2304      	movs	r3, #4
 800154e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001552:	e006      	b.n	8001562 <SD_disk_ioctl+0x23e>
			break;
 8001554:	bf00      	nop
 8001556:	e004      	b.n	8001562 <SD_disk_ioctl+0x23e>
			break;
 8001558:	bf00      	nop
 800155a:	e002      	b.n	8001562 <SD_disk_ioctl+0x23e>
			break;
 800155c:	bf00      	nop
 800155e:	e000      	b.n	8001562 <SD_disk_ioctl+0x23e>
			break;
 8001560:	bf00      	nop
		}

		DESELECT();
 8001562:	f7ff fb45 	bl	8000bf0 <DESELECT>
		SPI_RxByte();
 8001566:	f7ff fb87 	bl	8000c78 <SPI_RxByte>
	}

	return res;
 800156a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800156e:	4618      	mov	r0, r3
 8001570:	372c      	adds	r7, #44	; 0x2c
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	bf00      	nop
 8001578:	20000000 	.word	0x20000000

0800157c <send_uart>:

FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void send_uart(char *string){
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7fe fe43 	bl	8000210 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	b29a      	uxth	r2, r3
 8001592:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <send_uart+0x2c>)
 800159a:	f003 fa8e 	bl	8004aba <HAL_UART_Transmit>
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200001a8 	.word	0x200001a8

080015ac <bufclear>:
		i++;
	}
	return i;
}

void bufclear(void){
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1024; i++){
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	e007      	b.n	80015c8 <bufclear+0x1c>
		buffer[i] = '\0';
 80015b8:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <bufclear+0x34>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1024; i++){
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3301      	adds	r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ce:	dbf3      	blt.n	80015b8 <bufclear+0xc>
	}
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20006258 	.word	0x20006258

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e8:	f000 fcdc 	bl	8001fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f8dc 	bl	80017a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f0:	f000 fa1e 	bl	8001a30 <MX_GPIO_Init>
  MX_DMA_Init();
 80015f4:	f000 f9fc 	bl	80019f0 <MX_DMA_Init>
  MX_SPI1_Init();
 80015f8:	f000 f99a 	bl	8001930 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80015fc:	f000 f9ce 	bl	800199c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001600:	f003 fdd0 	bl	80051a4 <MX_FATFS_Init>
  MX_ADC1_Init();
 8001604:	f000 f942 	bl	800188c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Code to start the buffer goes here
  // 12:30 Digi-Key Getting Started With STM32 & Nucleo Part 4
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800160c:	4951      	ldr	r1, [pc, #324]	; (8001754 <main+0x170>)
 800160e:	4852      	ldr	r0, [pc, #328]	; (8001758 <main+0x174>)
 8001610:	f000 fda2 	bl	8002158 <HAL_ADC_Start_DMA>


  // Mount SD card
  fresult = f_mount(&fs, " ", 0);
 8001614:	2200      	movs	r2, #0
 8001616:	4951      	ldr	r1, [pc, #324]	; (800175c <main+0x178>)
 8001618:	4851      	ldr	r0, [pc, #324]	; (8001760 <main+0x17c>)
 800161a:	f006 f811 	bl	8007640 <f_mount>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	4b50      	ldr	r3, [pc, #320]	; (8001764 <main+0x180>)
 8001624:	701a      	strb	r2, [r3, #0]

  if(fresult != FR_OK){
 8001626:	4b4f      	ldr	r3, [pc, #316]	; (8001764 <main+0x180>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <main+0x52>
	  send_uart("error in mounting SD card...\n");
 800162e:	484e      	ldr	r0, [pc, #312]	; (8001768 <main+0x184>)
 8001630:	f7ff ffa4 	bl	800157c <send_uart>
 8001634:	e002      	b.n	800163c <main+0x58>
  }
  else{
	  send_uart("SD card mounted successfully...\n");
 8001636:	484d      	ldr	r0, [pc, #308]	; (800176c <main+0x188>)
 8001638:	f7ff ffa0 	bl	800157c <send_uart>
  }

  // Check free space on card
  f_getfree("", &fre_clust, &pfs);
 800163c:	4a4c      	ldr	r2, [pc, #304]	; (8001770 <main+0x18c>)
 800163e:	494d      	ldr	r1, [pc, #308]	; (8001774 <main+0x190>)
 8001640:	484d      	ldr	r0, [pc, #308]	; (8001778 <main+0x194>)
 8001642:	f006 fdaa 	bl	800819a <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * (pfs->csize * 0.5));
 8001646:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <main+0x18c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	3b02      	subs	r3, #2
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f8a2 	bl	8000798 <__aeabi_ui2d>
 8001654:	4604      	mov	r4, r0
 8001656:	460d      	mov	r5, r1
 8001658:	4b45      	ldr	r3, [pc, #276]	; (8001770 <main+0x18c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	895b      	ldrh	r3, [r3, #10]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff f8aa 	bl	80007b8 <__aeabi_i2d>
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4b44      	ldr	r3, [pc, #272]	; (800177c <main+0x198>)
 800166a:	f7fe fe29 	bl	80002c0 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4620      	mov	r0, r4
 8001674:	4629      	mov	r1, r5
 8001676:	f7fe fe23 	bl	80002c0 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff f903 	bl	800088c <__aeabi_d2uiz>
 8001686:	4603      	mov	r3, r0
 8001688:	4a3d      	ldr	r2, [pc, #244]	; (8001780 <main+0x19c>)
 800168a:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD card total size: \t%lu\n", total);
 800168c:	4b3c      	ldr	r3, [pc, #240]	; (8001780 <main+0x19c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	493c      	ldr	r1, [pc, #240]	; (8001784 <main+0x1a0>)
 8001694:	483c      	ldr	r0, [pc, #240]	; (8001788 <main+0x1a4>)
 8001696:	f007 f861 	bl	800875c <siprintf>
  send_uart(buffer);
 800169a:	483b      	ldr	r0, [pc, #236]	; (8001788 <main+0x1a4>)
 800169c:	f7ff ff6e 	bl	800157c <send_uart>
  bufclear();
 80016a0:	f7ff ff84 	bl	80015ac <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80016a4:	4b32      	ldr	r3, [pc, #200]	; (8001770 <main+0x18c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	895b      	ldrh	r3, [r3, #10]
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <main+0x190>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff f86f 	bl	8000798 <__aeabi_ui2d>
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b2f      	ldr	r3, [pc, #188]	; (800177c <main+0x198>)
 80016c0:	f7fe fdfe 	bl	80002c0 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff f8de 	bl	800088c <__aeabi_d2uiz>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4a2e      	ldr	r2, [pc, #184]	; (800178c <main+0x1a8>)
 80016d4:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD card free space: \t%lu\n", free_space);
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <main+0x1a8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	492c      	ldr	r1, [pc, #176]	; (8001790 <main+0x1ac>)
 80016de:	482a      	ldr	r0, [pc, #168]	; (8001788 <main+0x1a4>)
 80016e0:	f007 f83c 	bl	800875c <siprintf>
  send_uart(buffer);
 80016e4:	4828      	ldr	r0, [pc, #160]	; (8001788 <main+0x1a4>)
 80016e6:	f7ff ff49 	bl	800157c <send_uart>

  // Create and open file, then close file
  fresult = f_open(&fil, "file2.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80016ea:	2213      	movs	r2, #19
 80016ec:	4929      	ldr	r1, [pc, #164]	; (8001794 <main+0x1b0>)
 80016ee:	482a      	ldr	r0, [pc, #168]	; (8001798 <main+0x1b4>)
 80016f0:	f005 ffec 	bl	80076cc <f_open>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <main+0x180>)
 80016fa:	701a      	strb	r2, [r3, #0]
  fresult = f_puts("This data is from the first file\n\n", &fil);
 80016fc:	4926      	ldr	r1, [pc, #152]	; (8001798 <main+0x1b4>)
 80016fe:	4827      	ldr	r0, [pc, #156]	; (800179c <main+0x1b8>)
 8001700:	f006 feb4 	bl	800846c <f_puts>
 8001704:	4603      	mov	r3, r0
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <main+0x180>)
 800170a:	701a      	strb	r2, [r3, #0]
  fresult = f_close(&fil);
 800170c:	4822      	ldr	r0, [pc, #136]	; (8001798 <main+0x1b4>)
 800170e:	f006 fd1a 	bl	8008146 <f_close>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <main+0x180>)
 8001718:	701a      	strb	r2, [r3, #0]

  send_uart("file1.txt created and the data is written\n");
 800171a:	4821      	ldr	r0, [pc, #132]	; (80017a0 <main+0x1bc>)
 800171c:	f7ff ff2e 	bl	800157c <send_uart>
  fresult = f_open(&fil, "file1.txt", FA_READ);
 8001720:	2201      	movs	r2, #1
 8001722:	4920      	ldr	r1, [pc, #128]	; (80017a4 <main+0x1c0>)
 8001724:	481c      	ldr	r0, [pc, #112]	; (8001798 <main+0x1b4>)
 8001726:	f005 ffd1 	bl	80076cc <f_open>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <main+0x180>)
 8001730:	701a      	strb	r2, [r3, #0]

  // Everything works good except the "file.size" reference.
  // This has been replaced in ChaN's FatFs R0.12c version with f_size(&fil).
  f_gets(buffer, f_size(&fil), &fil);
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <main+0x1b4>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	4a18      	ldr	r2, [pc, #96]	; (8001798 <main+0x1b4>)
 8001738:	4619      	mov	r1, r3
 800173a:	4813      	ldr	r0, [pc, #76]	; (8001788 <main+0x1a4>)
 800173c:	f006 fde2 	bl	8008304 <f_gets>
  send_uart(buffer);
 8001740:	4811      	ldr	r0, [pc, #68]	; (8001788 <main+0x1a4>)
 8001742:	f7ff ff1b 	bl	800157c <send_uart>
  f_close(&fil);
 8001746:	4814      	ldr	r0, [pc, #80]	; (8001798 <main+0x1b4>)
 8001748:	f006 fcfd 	bl	8008146 <f_close>
  bufclear();
 800174c:	f7ff ff2e 	bl	80015ac <bufclear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001750:	e7fe      	b.n	8001750 <main+0x16c>
 8001752:	bf00      	nop
 8001754:	200001ec 	.word	0x200001ec
 8001758:	200000a8 	.word	0x200000a8
 800175c:	08009050 	.word	0x08009050
 8001760:	200041ec 	.word	0x200041ec
 8001764:	20006254 	.word	0x20006254
 8001768:	08009054 	.word	0x08009054
 800176c:	08009074 	.word	0x08009074
 8001770:	20006658 	.word	0x20006658
 8001774:	2000665c 	.word	0x2000665c
 8001778:	08009098 	.word	0x08009098
 800177c:	3fe00000 	.word	0x3fe00000
 8001780:	20006660 	.word	0x20006660
 8001784:	0800909c 	.word	0x0800909c
 8001788:	20006258 	.word	0x20006258
 800178c:	20006664 	.word	0x20006664
 8001790:	080090b8 	.word	0x080090b8
 8001794:	080090d4 	.word	0x080090d4
 8001798:	20005224 	.word	0x20005224
 800179c:	080090e0 	.word	0x080090e0
 80017a0:	08009104 	.word	0x08009104
 80017a4:	08009130 	.word	0x08009130

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	; 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	2234      	movs	r2, #52	; 0x34
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f006 ffc8 	bl	800874c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <SystemClock_Config+0xdc>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	4a2b      	ldr	r2, [pc, #172]	; (8001884 <SystemClock_Config+0xdc>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	; 0x40
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <SystemClock_Config+0xdc>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	2300      	movs	r3, #0
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	4b26      	ldr	r3, [pc, #152]	; (8001888 <SystemClock_Config+0xe0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a25      	ldr	r2, [pc, #148]	; (8001888 <SystemClock_Config+0xe0>)
 80017f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <SystemClock_Config+0xe0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001804:	2301      	movs	r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800180c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180e:	2302      	movs	r3, #2
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001818:	2304      	movs	r3, #4
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800181c:	23b4      	movs	r3, #180	; 0xb4
 800181e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001820:	2302      	movs	r3, #2
 8001822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001824:	2302      	movs	r3, #2
 8001826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001828:	2302      	movs	r3, #2
 800182a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4618      	mov	r0, r3
 8001832:	f002 fa25 	bl	8003c80 <HAL_RCC_OscConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800183c:	f000 f97e 	bl	8001b3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001840:	f001 fe84 	bl	800354c <HAL_PWREx_EnableOverDrive>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800184a:	f000 f977 	bl	8001b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184e:	230f      	movs	r3, #15
 8001850:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001852:	2302      	movs	r3, #2
 8001854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800185a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800185e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001860:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001864:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	2105      	movs	r1, #5
 800186c:	4618      	mov	r0, r3
 800186e:	f001 febd 	bl	80035ec <HAL_RCC_ClockConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001878:	f000 f960 	bl	8001b3c <Error_Handler>
  }
}
 800187c:	bf00      	nop
 800187e:	3750      	adds	r7, #80	; 0x50
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	40007000 	.word	0x40007000

0800188c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001892:	463b      	mov	r3, r7
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <MX_ADC1_Init+0x98>)
 80018a0:	4a21      	ldr	r2, [pc, #132]	; (8001928 <MX_ADC1_Init+0x9c>)
 80018a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <MX_ADC1_Init+0x98>)
 80018a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <MX_ADC1_Init+0x98>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <MX_ADC1_Init+0x98>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_ADC1_Init+0x98>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <MX_ADC1_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <MX_ADC1_Init+0x98>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <MX_ADC1_Init+0x98>)
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <MX_ADC1_Init+0xa0>)
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_ADC1_Init+0x98>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_ADC1_Init+0x98>)
 80018da:	2201      	movs	r2, #1
 80018dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_ADC1_Init+0x98>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_ADC1_Init+0x98>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <MX_ADC1_Init+0x98>)
 80018ee:	f000 fbef 	bl	80020d0 <HAL_ADC_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018f8:	f000 f920 	bl	8001b3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001900:	2301      	movs	r3, #1
 8001902:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001904:	2301      	movs	r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001908:	463b      	mov	r3, r7
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_ADC1_Init+0x98>)
 800190e:	f000 fd3d 	bl	800238c <HAL_ADC_ConfigChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001918:	f000 f910 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200000a8 	.word	0x200000a8
 8001928:	40012000 	.word	0x40012000
 800192c:	0f000001 	.word	0x0f000001

08001930 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <MX_SPI1_Init+0x64>)
 8001936:	4a18      	ldr	r2, [pc, #96]	; (8001998 <MX_SPI1_Init+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_SPI1_Init+0x64>)
 800193c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <MX_SPI1_Init+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_SPI1_Init+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_SPI1_Init+0x64>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_SPI1_Init+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_SPI1_Init+0x64>)
 800195c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001960:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_SPI1_Init+0x64>)
 8001964:	2210      	movs	r2, #16
 8001966:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <MX_SPI1_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_SPI1_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <MX_SPI1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_SPI1_Init+0x64>)
 800197c:	220a      	movs	r2, #10
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <MX_SPI1_Init+0x64>)
 8001982:	f002 fc1b 	bl	80041bc <HAL_SPI_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800198c:	f000 f8d6 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000150 	.word	0x20000150
 8001998:	40013000 	.word	0x40013000

0800199c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <MX_USART1_UART_Init+0x50>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_USART1_UART_Init+0x4c>)
 80019d4:	f003 f824 	bl	8004a20 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019de:	f000 f8ad 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200001a8 	.word	0x200001a8
 80019ec:	40011000 	.word	0x40011000

080019f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_DMA_Init+0x3c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <MX_DMA_Init+0x3c>)
 8001a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_DMA_Init+0x3c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2038      	movs	r0, #56	; 0x38
 8001a18:	f001 f843 	bl	8002aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a1c:	2038      	movs	r0, #56	; 0x38
 8001a1e:	f001 f85c 	bl	8002ada <HAL_NVIC_EnableIRQ>

}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <MX_GPIO_Init+0xc0>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a28      	ldr	r2, [pc, #160]	; (8001af0 <MX_GPIO_Init+0xc0>)
 8001a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <MX_GPIO_Init+0xc0>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <MX_GPIO_Init+0xc0>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <MX_GPIO_Init+0xc0>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <MX_GPIO_Init+0xc0>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <MX_GPIO_Init+0xc0>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <MX_GPIO_Init+0xc0>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <MX_GPIO_Init+0xc0>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	4815      	ldr	r0, [pc, #84]	; (8001af4 <MX_GPIO_Init+0xc4>)
 8001aa0:	f001 fd3a 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4813      	ldr	r0, [pc, #76]	; (8001af8 <MX_GPIO_Init+0xc8>)
 8001aaa:	f001 fd35 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480b      	ldr	r0, [pc, #44]	; (8001af4 <MX_GPIO_Init+0xc4>)
 8001ac6:	f001 fb93 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aca:	2301      	movs	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_GPIO_Init+0xc8>)
 8001ae2:	f001 fb85 	bl	80031f0 <HAL_GPIO_Init>

}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020400 	.word	0x40020400

08001afc <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when buffer is half filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2120      	movs	r1, #32
 8001b08:	4803      	ldr	r0, [pc, #12]	; (8001b18 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001b0a:	f001 fd05 	bl	8003518 <HAL_GPIO_WritePin>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40020000 	.word	0x40020000

08001b1c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2120      	movs	r1, #32
 8001b28:	4803      	ldr	r0, [pc, #12]	; (8001b38 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001b2a:	f001 fcf5 	bl	8003518 <HAL_GPIO_WritePin>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40020000 	.word	0x40020000

08001b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <Error_Handler+0x8>
	...

08001b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b86:	2007      	movs	r0, #7
 8001b88:	f000 ff80 	bl	8002a8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800

08001b98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2f      	ldr	r2, [pc, #188]	; (8001c74 <HAL_ADC_MspInit+0xdc>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d157      	bne.n	8001c6a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_ADC_MspInit+0xe0>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a2d      	ldr	r2, [pc, #180]	; (8001c78 <HAL_ADC_MspInit+0xe0>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_ADC_MspInit+0xe0>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_ADC_MspInit+0xe0>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <HAL_ADC_MspInit+0xe0>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_ADC_MspInit+0xe0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001bf2:	231f      	movs	r3, #31
 8001bf4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	481d      	ldr	r0, [pc, #116]	; (8001c7c <HAL_ADC_MspInit+0xe4>)
 8001c06:	f001 faf3 	bl	80031f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c0c:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <HAL_ADC_MspInit+0xec>)
 8001c0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c40:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c4e:	480c      	ldr	r0, [pc, #48]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c50:	f000 ff5e 	bl	8002b10 <HAL_DMA_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c5a:	f7ff ff6f 	bl	8001b3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c62:	639a      	str	r2, [r3, #56]	; 0x38
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_ADC_MspInit+0xe8>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40012000 	.word	0x40012000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	200000f0 	.word	0x200000f0
 8001c84:	40026410 	.word	0x40026410

08001c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a28      	ldr	r2, [pc, #160]	; (8001d48 <HAL_SPI_MspInit+0xc0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d149      	bne.n	8001d3e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_SPI_MspInit+0xc4>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a26      	ldr	r2, [pc, #152]	; (8001d4c <HAL_SPI_MspInit+0xc4>)
 8001cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_SPI_MspInit+0xc4>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_SPI_MspInit+0xc4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <HAL_SPI_MspInit+0xc4>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_SPI_MspInit+0xc4>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_SPI_MspInit+0xc4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_SPI_MspInit+0xc4>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_SPI_MspInit+0xc4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cfe:	23c0      	movs	r3, #192	; 0xc0
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d0e:	2305      	movs	r3, #5
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <HAL_SPI_MspInit+0xc8>)
 8001d1a:	f001 fa69 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d1e:	2308      	movs	r3, #8
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d2e:	2305      	movs	r3, #5
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	4806      	ldr	r0, [pc, #24]	; (8001d54 <HAL_SPI_MspInit+0xcc>)
 8001d3a:	f001 fa59 	bl	80031f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	; 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40013000 	.word	0x40013000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400

08001d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <HAL_UART_MspInit+0x84>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d12c      	bne.n	8001dd4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_UART_MspInit+0x88>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <HAL_UART_MspInit+0x88>)
 8001d84:	f043 0310 	orr.w	r3, r3, #16
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_UART_MspInit+0x88>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_UART_MspInit+0x88>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a10      	ldr	r2, [pc, #64]	; (8001de0 <HAL_UART_MspInit+0x88>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_UART_MspInit+0x88>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001db2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dc4:	2307      	movs	r3, #7
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4805      	ldr	r0, [pc, #20]	; (8001de4 <HAL_UART_MspInit+0x8c>)
 8001dd0:	f001 fa0e 	bl	80031f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3728      	adds	r7, #40	; 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40011000 	.word	0x40011000
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000

08001de8 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
	if(Timer1 > 0){
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <SDTimer_Handler+0x40>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <SDTimer_Handler+0x1c>
		Timer1--;
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <SDTimer_Handler+0x40>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <SDTimer_Handler+0x40>)
 8001e02:	701a      	strb	r2, [r3, #0]
		}
	if(Timer2 > 0){
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <SDTimer_Handler+0x44>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <SDTimer_Handler+0x34>
		Timer2--;
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <SDTimer_Handler+0x44>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <SDTimer_Handler+0x44>)
 8001e1a:	701a      	strb	r2, [r3, #0]
	}
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20006669 	.word	0x20006669
 8001e2c:	2000666a 	.word	0x2000666a

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <NMI_Handler+0x4>

08001e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <MemManage_Handler+0x4>

08001e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <SysTick_Handler+0x30>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <SysTick_Handler+0x30>)
 8001e88:	701a      	strb	r2, [r3, #0]

	if(FatFsCnt >= 10){
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <SysTick_Handler+0x30>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b09      	cmp	r3, #9
 8001e92:	d904      	bls.n	8001e9e <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <SysTick_Handler+0x30>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001e9a:	f7ff ffa5 	bl	8001de8 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e9e:	f000 f8d3 	bl	8002048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20006668 	.word	0x20006668

08001eac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <DMA2_Stream0_IRQHandler+0x10>)
 8001eb2:	f000 ff33 	bl	8002d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200000f0 	.word	0x200000f0

08001ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec8:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <_sbrk+0x5c>)
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <_sbrk+0x60>)
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d102      	bne.n	8001ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <_sbrk+0x64>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <_sbrk+0x68>)
 8001ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d207      	bcs.n	8001f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef0:	f006 fc02 	bl	80086f8 <__errno>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e009      	b.n	8001f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <_sbrk+0x64>)
 8001f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20020000 	.word	0x20020000
 8001f20:	00000400 	.word	0x00000400
 8001f24:	2000666c 	.word	0x2000666c
 8001f28:	200068c0 	.word	0x200068c0

08001f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <SystemInit+0x20>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f36:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <SystemInit+0x20>)
 8001f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f56:	490e      	ldr	r1, [pc, #56]	; (8001f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f58:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f6c:	4c0b      	ldr	r4, [pc, #44]	; (8001f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f7a:	f7ff ffd7 	bl	8001f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f7e:	f006 fbc1 	bl	8008704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f82:	f7ff fb2f 	bl	80015e4 <main>
  bx  lr    
 8001f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f90:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001f94:	08009628 	.word	0x08009628
  ldr r2, =_sbss
 8001f98:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001f9c:	200068c0 	.word	0x200068c0

08001fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <ADC_IRQHandler>
	...

08001fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <HAL_Init+0x40>)
 8001fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_Init+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_Init+0x40>)
 8001fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_Init+0x40>)
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 fd5d 	bl	8002a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f808 	bl	8001fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd8:	f7ff fdb6 	bl	8001b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023c00 	.word	0x40023c00

08001fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_InitTick+0x54>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_InitTick+0x58>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fd75 	bl	8002af6 <HAL_SYSTICK_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e00e      	b.n	8002034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d80a      	bhi.n	8002032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201c:	2200      	movs	r2, #0
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f000 fd3d 	bl	8002aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <HAL_InitTick+0x5c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000004 	.word	0x20000004
 8002040:	2000000c 	.word	0x2000000c
 8002044:	20000008 	.word	0x20000008

08002048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_IncTick+0x20>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x24>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_IncTick+0x24>)
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	2000000c 	.word	0x2000000c
 800206c:	20006670 	.word	0x20006670

08002070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return uwTick;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_GetTick+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20006670 	.word	0x20006670

08002088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff ffee 	bl	8002070 <HAL_GetTick>
 8002094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d005      	beq.n	80020ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_Delay+0x44>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ae:	bf00      	nop
 80020b0:	f7ff ffde 	bl	8002070 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d8f7      	bhi.n	80020b0 <HAL_Delay+0x28>
  {
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000000c 	.word	0x2000000c

080020d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e033      	b.n	800214e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fd52 	bl	8001b98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d118      	bne.n	8002140 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002116:	f023 0302 	bic.w	r3, r3, #2
 800211a:	f043 0202 	orr.w	r2, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fa64 	bl	80025f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
 800213e:	e001      	b.n	8002144 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_ADC_Start_DMA+0x1e>
 8002172:	2302      	movs	r3, #2
 8002174:	e0e9      	b.n	800234a <HAL_ADC_Start_DMA+0x1f2>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d018      	beq.n	80021be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800219c:	4b6d      	ldr	r3, [pc, #436]	; (8002354 <HAL_ADC_Start_DMA+0x1fc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a6d      	ldr	r2, [pc, #436]	; (8002358 <HAL_ADC_Start_DMA+0x200>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0c9a      	lsrs	r2, r3, #18
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80021b0:	e002      	b.n	80021b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f9      	bne.n	80021b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021cc:	d107      	bne.n	80021de <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	f040 80a1 	bne.w	8002330 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002218:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222c:	d106      	bne.n	800223c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f023 0206 	bic.w	r2, r3, #6
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
 800223a:	e002      	b.n	8002242 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800224a:	4b44      	ldr	r3, [pc, #272]	; (800235c <HAL_ADC_Start_DMA+0x204>)
 800224c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	4a43      	ldr	r2, [pc, #268]	; (8002360 <HAL_ADC_Start_DMA+0x208>)
 8002254:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	4a42      	ldr	r2, [pc, #264]	; (8002364 <HAL_ADC_Start_DMA+0x20c>)
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	4a41      	ldr	r2, [pc, #260]	; (8002368 <HAL_ADC_Start_DMA+0x210>)
 8002264:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800226e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800227e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800228e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	334c      	adds	r3, #76	; 0x4c
 800229a:	4619      	mov	r1, r3
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f000 fce4 	bl	8002c6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d12a      	bne.n	8002306 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2d      	ldr	r2, [pc, #180]	; (800236c <HAL_ADC_Start_DMA+0x214>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d015      	beq.n	80022e6 <HAL_ADC_Start_DMA+0x18e>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a2c      	ldr	r2, [pc, #176]	; (8002370 <HAL_ADC_Start_DMA+0x218>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d105      	bne.n	80022d0 <HAL_ADC_Start_DMA+0x178>
 80022c4:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_ADC_Start_DMA+0x204>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a27      	ldr	r2, [pc, #156]	; (8002374 <HAL_ADC_Start_DMA+0x21c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d136      	bne.n	8002348 <HAL_ADC_Start_DMA+0x1f0>
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <HAL_ADC_Start_DMA+0x204>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d130      	bne.n	8002348 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d129      	bne.n	8002348 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	e020      	b.n	8002348 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a18      	ldr	r2, [pc, #96]	; (800236c <HAL_ADC_Start_DMA+0x214>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d11b      	bne.n	8002348 <HAL_ADC_Start_DMA+0x1f0>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d114      	bne.n	8002348 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	e00b      	b.n	8002348 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f043 0210 	orr.w	r2, r3, #16
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	f043 0201 	orr.w	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000004 	.word	0x20000004
 8002358:	431bde83 	.word	0x431bde83
 800235c:	40012300 	.word	0x40012300
 8002360:	080027e9 	.word	0x080027e9
 8002364:	080028a3 	.word	0x080028a3
 8002368:	080028bf 	.word	0x080028bf
 800236c:	40012000 	.word	0x40012000
 8002370:	40012100 	.word	0x40012100
 8002374:	40012200 	.word	0x40012200

08002378 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1c>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e113      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x244>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b09      	cmp	r3, #9
 80023b6:	d925      	bls.n	8002404 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68d9      	ldr	r1, [r3, #12]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	3b1e      	subs	r3, #30
 80023ce:	2207      	movs	r2, #7
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43da      	mvns	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	400a      	ands	r2, r1
 80023dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68d9      	ldr	r1, [r3, #12]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	4603      	mov	r3, r0
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4403      	add	r3, r0
 80023f6:	3b1e      	subs	r3, #30
 80023f8:	409a      	lsls	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	e022      	b.n	800244a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6919      	ldr	r1, [r3, #16]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	2207      	movs	r2, #7
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	400a      	ands	r2, r1
 8002426:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6919      	ldr	r1, [r3, #16]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	4618      	mov	r0, r3
 800243a:	4603      	mov	r3, r0
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4403      	add	r3, r0
 8002440:	409a      	lsls	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b06      	cmp	r3, #6
 8002450:	d824      	bhi.n	800249c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	3b05      	subs	r3, #5
 8002464:	221f      	movs	r2, #31
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	400a      	ands	r2, r1
 8002472:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	3b05      	subs	r3, #5
 800248e:	fa00 f203 	lsl.w	r2, r0, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	635a      	str	r2, [r3, #52]	; 0x34
 800249a:	e04c      	b.n	8002536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	d824      	bhi.n	80024ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	3b23      	subs	r3, #35	; 0x23
 80024b6:	221f      	movs	r2, #31
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43da      	mvns	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	400a      	ands	r2, r1
 80024c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	3b23      	subs	r3, #35	; 0x23
 80024e0:	fa00 f203 	lsl.w	r2, r0, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
 80024ec:	e023      	b.n	8002536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	3b41      	subs	r3, #65	; 0x41
 8002500:	221f      	movs	r2, #31
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	400a      	ands	r2, r1
 800250e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	4618      	mov	r0, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	3b41      	subs	r3, #65	; 0x41
 800252a:	fa00 f203 	lsl.w	r2, r0, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002536:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_ADC_ConfigChannel+0x250>)
 8002538:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_ADC_ConfigChannel+0x254>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d10f      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x1d8>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b12      	cmp	r3, #18
 800254a:	d10b      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <HAL_ADC_ConfigChannel+0x254>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d12b      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x23a>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <HAL_ADC_ConfigChannel+0x258>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d003      	beq.n	8002580 <HAL_ADC_ConfigChannel+0x1f4>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b11      	cmp	r3, #17
 800257e:	d122      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a11      	ldr	r2, [pc, #68]	; (80025e4 <HAL_ADC_ConfigChannel+0x258>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d111      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_ADC_ConfigChannel+0x25c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a11      	ldr	r2, [pc, #68]	; (80025ec <HAL_ADC_ConfigChannel+0x260>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	0c9a      	lsrs	r2, r3, #18
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025b8:	e002      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	3b01      	subs	r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f9      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40012300 	.word	0x40012300
 80025e0:	40012000 	.word	0x40012000
 80025e4:	10000012 	.word	0x10000012
 80025e8:	20000004 	.word	0x20000004
 80025ec:	431bde83 	.word	0x431bde83

080025f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025f8:	4b79      	ldr	r3, [pc, #484]	; (80027e0 <ADC_Init+0x1f0>)
 80025fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	431a      	orrs	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	021a      	lsls	r2, r3, #8
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6899      	ldr	r1, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	4a58      	ldr	r2, [pc, #352]	; (80027e4 <ADC_Init+0x1f4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d022      	beq.n	80026ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002696:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6899      	ldr	r1, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	e00f      	b.n	80026ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0202 	bic.w	r2, r2, #2
 80026fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6899      	ldr	r1, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7e1b      	ldrb	r3, [r3, #24]
 8002708:	005a      	lsls	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01b      	beq.n	8002754 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800272a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800273a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	3b01      	subs	r3, #1
 8002748:	035a      	lsls	r2, r3, #13
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	e007      	b.n	8002764 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002762:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	3b01      	subs	r3, #1
 8002780:	051a      	lsls	r2, r3, #20
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027a6:	025a      	lsls	r2, r3, #9
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6899      	ldr	r1, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	029a      	lsls	r2, r3, #10
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	609a      	str	r2, [r3, #8]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	40012300 	.word	0x40012300
 80027e4:	0f000001 	.word	0x0f000001

080027e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d13c      	bne.n	800287c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d12b      	bne.n	8002874 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002820:	2b00      	cmp	r3, #0
 8002822:	d127      	bne.n	8002874 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800282e:	2b00      	cmp	r3, #0
 8002830:	d006      	beq.n	8002840 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800283c:	2b00      	cmp	r3, #0
 800283e:	d119      	bne.n	8002874 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0220 	bic.w	r2, r2, #32
 800284e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f7ff f951 	bl	8001b1c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800287a:	e00e      	b.n	800289a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff fd75 	bl	8002378 <HAL_ADC_ErrorCallback>
}
 800288e:	e004      	b.n	800289a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	4798      	blx	r3
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff f923 	bl	8001afc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2240      	movs	r2, #64	; 0x40
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f043 0204 	orr.w	r2, r3, #4
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff fd4a 	bl	8002378 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002908:	4013      	ands	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291e:	4a04      	ldr	r2, [pc, #16]	; (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	60d3      	str	r3, [r2, #12]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <__NVIC_GetPriorityGrouping+0x18>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	f003 0307 	and.w	r3, r3, #7
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	2b00      	cmp	r3, #0
 8002960:	db0b      	blt.n	800297a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	f003 021f 	and.w	r2, r3, #31
 8002968:	4907      	ldr	r1, [pc, #28]	; (8002988 <__NVIC_EnableIRQ+0x38>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2001      	movs	r0, #1
 8002972:	fa00 f202 	lsl.w	r2, r0, r2
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000e100 	.word	0xe000e100

0800298c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	2b00      	cmp	r3, #0
 800299e:	db0a      	blt.n	80029b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	490c      	ldr	r1, [pc, #48]	; (80029d8 <__NVIC_SetPriority+0x4c>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	0112      	lsls	r2, r2, #4
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	440b      	add	r3, r1
 80029b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b4:	e00a      	b.n	80029cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4908      	ldr	r1, [pc, #32]	; (80029dc <__NVIC_SetPriority+0x50>)
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	3b04      	subs	r3, #4
 80029c4:	0112      	lsls	r2, r2, #4
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	440b      	add	r3, r1
 80029ca:	761a      	strb	r2, [r3, #24]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000e100 	.word	0xe000e100
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	; 0x24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f1c3 0307 	rsb	r3, r3, #7
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	bf28      	it	cs
 80029fe:	2304      	movcs	r3, #4
 8002a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2b06      	cmp	r3, #6
 8002a08:	d902      	bls.n	8002a10 <NVIC_EncodePriority+0x30>
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3b03      	subs	r3, #3
 8002a0e:	e000      	b.n	8002a12 <NVIC_EncodePriority+0x32>
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	f04f 32ff 	mov.w	r2, #4294967295
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	401a      	ands	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a28:	f04f 31ff 	mov.w	r1, #4294967295
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	43d9      	mvns	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a38:	4313      	orrs	r3, r2
         );
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a58:	d301      	bcc.n	8002a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e00f      	b.n	8002a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <SysTick_Config+0x40>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a66:	210f      	movs	r1, #15
 8002a68:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6c:	f7ff ff8e 	bl	800298c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <SysTick_Config+0x40>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a76:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <SysTick_Config+0x40>)
 8002a78:	2207      	movs	r2, #7
 8002a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	e000e010 	.word	0xe000e010

08002a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ff29 	bl	80028ec <__NVIC_SetPriorityGrouping>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b086      	sub	sp, #24
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab4:	f7ff ff3e 	bl	8002934 <__NVIC_GetPriorityGrouping>
 8002ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	6978      	ldr	r0, [r7, #20]
 8002ac0:	f7ff ff8e 	bl	80029e0 <NVIC_EncodePriority>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff5d 	bl	800298c <__NVIC_SetPriority>
}
 8002ad2:	bf00      	nop
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff31 	bl	8002950 <__NVIC_EnableIRQ>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ffa2 	bl	8002a48 <SysTick_Config>
 8002b04:	4603      	mov	r3, r0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff faa8 	bl	8002070 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e099      	b.n	8002c60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4c:	e00f      	b.n	8002b6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b4e:	f7ff fa8f 	bl	8002070 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d908      	bls.n	8002b6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2203      	movs	r2, #3
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e078      	b.n	8002c60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e8      	bne.n	8002b4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <HAL_DMA_Init+0x158>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d107      	bne.n	8002bd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f023 0307 	bic.w	r3, r3, #7
 8002bee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d117      	bne.n	8002c32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fa6f 	bl	80030f8 <DMA_CheckFifoParam>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e016      	b.n	8002c60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fa26 	bl	800308c <DMA_CalcBaseAndBitshift>
 8002c40:	4603      	mov	r3, r0
 8002c42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	223f      	movs	r2, #63	; 0x3f
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	f010803f 	.word	0xf010803f

08002c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_DMA_Start_IT+0x26>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e040      	b.n	8002d14 <HAL_DMA_Start_IT+0xa8>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d12f      	bne.n	8002d06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f9b8 	bl	8003030 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	223f      	movs	r2, #63	; 0x3f
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0216 	orr.w	r2, r2, #22
 8002cda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0208 	orr.w	r2, r2, #8
 8002cf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e005      	b.n	8002d12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d28:	4b8e      	ldr	r3, [pc, #568]	; (8002f64 <HAL_DMA_IRQHandler+0x248>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a8e      	ldr	r2, [pc, #568]	; (8002f68 <HAL_DMA_IRQHandler+0x24c>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	0a9b      	lsrs	r3, r3, #10
 8002d34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d46:	2208      	movs	r2, #8
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01a      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0204 	bic.w	r2, r2, #4
 8002d6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	2208      	movs	r2, #8
 8002d76:	409a      	lsls	r2, r3
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d012      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002daa:	2201      	movs	r2, #1
 8002dac:	409a      	lsls	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	f043 0202 	orr.w	r2, r3, #2
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d012      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	2204      	movs	r2, #4
 8002de2:	409a      	lsls	r2, r3
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	f043 0204 	orr.w	r2, r3, #4
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df8:	2210      	movs	r2, #16
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d043      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d03c      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	2210      	movs	r2, #16
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d018      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d108      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d024      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
 8002e4a:	e01f      	b.n	8002e8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01b      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
 8002e5c:	e016      	b.n	8002e8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d107      	bne.n	8002e7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0208 	bic.w	r2, r2, #8
 8002e7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	2220      	movs	r2, #32
 8002e92:	409a      	lsls	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 808f 	beq.w	8002fbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8087 	beq.w	8002fbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	d136      	bne.n	8002f34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0216 	bic.w	r2, r2, #22
 8002ed4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ee4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d103      	bne.n	8002ef6 <HAL_DMA_IRQHandler+0x1da>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d007      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0208 	bic.w	r2, r2, #8
 8002f04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	223f      	movs	r2, #63	; 0x3f
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d07e      	beq.n	8003028 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
        }
        return;
 8002f32:	e079      	b.n	8003028 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01d      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10d      	bne.n	8002f6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d031      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
 8002f60:	e02c      	b.n	8002fbc <HAL_DMA_IRQHandler+0x2a0>
 8002f62:	bf00      	nop
 8002f64:	20000004 	.word	0x20000004
 8002f68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d023      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4798      	blx	r3
 8002f7c:	e01e      	b.n	8002fbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10f      	bne.n	8002fac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0210 	bic.w	r2, r2, #16
 8002f9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d032      	beq.n	800302a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d022      	beq.n	8003016 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2205      	movs	r2, #5
 8002fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	3301      	adds	r3, #1
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d307      	bcc.n	8003004 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f2      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x2cc>
 8003002:	e000      	b.n	8003006 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003004:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4798      	blx	r3
 8003026:	e000      	b.n	800302a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003028:	bf00      	nop
    }
  }
}
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800304c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d108      	bne.n	8003070 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800306e:	e007      	b.n	8003080 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	60da      	str	r2, [r3, #12]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	3b10      	subs	r3, #16
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <DMA_CalcBaseAndBitshift+0x64>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030a6:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <DMA_CalcBaseAndBitshift+0x68>)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d909      	bls.n	80030ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030c2:	f023 0303 	bic.w	r3, r3, #3
 80030c6:	1d1a      	adds	r2, r3, #4
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	659a      	str	r2, [r3, #88]	; 0x58
 80030cc:	e007      	b.n	80030de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030d6:	f023 0303 	bic.w	r3, r3, #3
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	aaaaaaab 	.word	0xaaaaaaab
 80030f4:	0800919c 	.word	0x0800919c

080030f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d11f      	bne.n	8003152 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d856      	bhi.n	80031c6 <DMA_CheckFifoParam+0xce>
 8003118:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <DMA_CheckFifoParam+0x28>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003131 	.word	0x08003131
 8003124:	08003143 	.word	0x08003143
 8003128:	08003131 	.word	0x08003131
 800312c:	080031c7 	.word	0x080031c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d046      	beq.n	80031ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003140:	e043      	b.n	80031ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800314a:	d140      	bne.n	80031ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003150:	e03d      	b.n	80031ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315a:	d121      	bne.n	80031a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d837      	bhi.n	80031d2 <DMA_CheckFifoParam+0xda>
 8003162:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <DMA_CheckFifoParam+0x70>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	08003179 	.word	0x08003179
 800316c:	0800317f 	.word	0x0800317f
 8003170:	08003179 	.word	0x08003179
 8003174:	08003191 	.word	0x08003191
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      break;
 800317c:	e030      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d025      	beq.n	80031d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318e:	e022      	b.n	80031d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003198:	d11f      	bne.n	80031da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800319e:	e01c      	b.n	80031da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d903      	bls.n	80031ae <DMA_CheckFifoParam+0xb6>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d003      	beq.n	80031b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031ac:	e018      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
      break;
 80031b2:	e015      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00e      	beq.n	80031de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      break;
 80031c4:	e00b      	b.n	80031de <DMA_CheckFifoParam+0xe6>
      break;
 80031c6:	bf00      	nop
 80031c8:	e00a      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      break;
 80031ca:	bf00      	nop
 80031cc:	e008      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      break;
 80031ce:	bf00      	nop
 80031d0:	e006      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      break;
 80031d2:	bf00      	nop
 80031d4:	e004      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      break;
 80031d6:	bf00      	nop
 80031d8:	e002      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80031da:	bf00      	nop
 80031dc:	e000      	b.n	80031e0 <DMA_CheckFifoParam+0xe8>
      break;
 80031de:	bf00      	nop
    }
  } 
  
  return status; 
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop

080031f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	e165      	b.n	80034d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800320c:	2201      	movs	r2, #1
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	429a      	cmp	r2, r3
 8003226:	f040 8154 	bne.w	80034d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d005      	beq.n	8003242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800323e:	2b02      	cmp	r3, #2
 8003240:	d130      	bne.n	80032a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	2203      	movs	r2, #3
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003278:	2201      	movs	r2, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 0201 	and.w	r2, r3, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d017      	beq.n	80032e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d123      	bne.n	8003334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	08da      	lsrs	r2, r3, #3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3208      	adds	r2, #8
 80032f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	220f      	movs	r2, #15
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	08da      	lsrs	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3208      	adds	r2, #8
 800332e:	69b9      	ldr	r1, [r7, #24]
 8003330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	2203      	movs	r2, #3
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0203 	and.w	r2, r3, #3
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80ae 	beq.w	80034d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <HAL_GPIO_Init+0x300>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	4a5c      	ldr	r2, [pc, #368]	; (80034f0 <HAL_GPIO_Init+0x300>)
 8003380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003384:	6453      	str	r3, [r2, #68]	; 0x44
 8003386:	4b5a      	ldr	r3, [pc, #360]	; (80034f0 <HAL_GPIO_Init+0x300>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003392:	4a58      	ldr	r2, [pc, #352]	; (80034f4 <HAL_GPIO_Init+0x304>)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	3302      	adds	r3, #2
 800339a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	220f      	movs	r2, #15
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a4f      	ldr	r2, [pc, #316]	; (80034f8 <HAL_GPIO_Init+0x308>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d025      	beq.n	800340a <HAL_GPIO_Init+0x21a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a4e      	ldr	r2, [pc, #312]	; (80034fc <HAL_GPIO_Init+0x30c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01f      	beq.n	8003406 <HAL_GPIO_Init+0x216>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a4d      	ldr	r2, [pc, #308]	; (8003500 <HAL_GPIO_Init+0x310>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d019      	beq.n	8003402 <HAL_GPIO_Init+0x212>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4c      	ldr	r2, [pc, #304]	; (8003504 <HAL_GPIO_Init+0x314>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_GPIO_Init+0x20e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4b      	ldr	r2, [pc, #300]	; (8003508 <HAL_GPIO_Init+0x318>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00d      	beq.n	80033fa <HAL_GPIO_Init+0x20a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4a      	ldr	r2, [pc, #296]	; (800350c <HAL_GPIO_Init+0x31c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d007      	beq.n	80033f6 <HAL_GPIO_Init+0x206>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a49      	ldr	r2, [pc, #292]	; (8003510 <HAL_GPIO_Init+0x320>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_GPIO_Init+0x202>
 80033ee:	2306      	movs	r3, #6
 80033f0:	e00c      	b.n	800340c <HAL_GPIO_Init+0x21c>
 80033f2:	2307      	movs	r3, #7
 80033f4:	e00a      	b.n	800340c <HAL_GPIO_Init+0x21c>
 80033f6:	2305      	movs	r3, #5
 80033f8:	e008      	b.n	800340c <HAL_GPIO_Init+0x21c>
 80033fa:	2304      	movs	r3, #4
 80033fc:	e006      	b.n	800340c <HAL_GPIO_Init+0x21c>
 80033fe:	2303      	movs	r3, #3
 8003400:	e004      	b.n	800340c <HAL_GPIO_Init+0x21c>
 8003402:	2302      	movs	r3, #2
 8003404:	e002      	b.n	800340c <HAL_GPIO_Init+0x21c>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_GPIO_Init+0x21c>
 800340a:	2300      	movs	r3, #0
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	f002 0203 	and.w	r2, r2, #3
 8003412:	0092      	lsls	r2, r2, #2
 8003414:	4093      	lsls	r3, r2
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800341c:	4935      	ldr	r1, [pc, #212]	; (80034f4 <HAL_GPIO_Init+0x304>)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	3302      	adds	r3, #2
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800342a:	4b3a      	ldr	r3, [pc, #232]	; (8003514 <HAL_GPIO_Init+0x324>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800344e:	4a31      	ldr	r2, [pc, #196]	; (8003514 <HAL_GPIO_Init+0x324>)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003454:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <HAL_GPIO_Init+0x324>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003478:	4a26      	ldr	r2, [pc, #152]	; (8003514 <HAL_GPIO_Init+0x324>)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800347e:	4b25      	ldr	r3, [pc, #148]	; (8003514 <HAL_GPIO_Init+0x324>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034a2:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <HAL_GPIO_Init+0x324>)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034a8:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <HAL_GPIO_Init+0x324>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034cc:	4a11      	ldr	r2, [pc, #68]	; (8003514 <HAL_GPIO_Init+0x324>)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3301      	adds	r3, #1
 80034d6:	61fb      	str	r3, [r7, #28]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b0f      	cmp	r3, #15
 80034dc:	f67f ae96 	bls.w	800320c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40013800 	.word	0x40013800
 80034f8:	40020000 	.word	0x40020000
 80034fc:	40020400 	.word	0x40020400
 8003500:	40020800 	.word	0x40020800
 8003504:	40020c00 	.word	0x40020c00
 8003508:	40021000 	.word	0x40021000
 800350c:	40021400 	.word	0x40021400
 8003510:	40021800 	.word	0x40021800
 8003514:	40013c00 	.word	0x40013c00

08003518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	807b      	strh	r3, [r7, #2]
 8003524:	4613      	mov	r3, r2
 8003526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003528:	787b      	ldrb	r3, [r7, #1]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352e:	887a      	ldrh	r2, [r7, #2]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003534:	e003      	b.n	800353e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003536:	887b      	ldrh	r3, [r7, #2]
 8003538:	041a      	lsls	r2, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	619a      	str	r2, [r3, #24]
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	603b      	str	r3, [r7, #0]
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <HAL_PWREx_EnableOverDrive+0x90>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	4a1f      	ldr	r2, [pc, #124]	; (80035dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003564:	6413      	str	r3, [r2, #64]	; 0x40
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003572:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003578:	f7fe fd7a 	bl	8002070 <HAL_GetTick>
 800357c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800357e:	e009      	b.n	8003594 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003580:	f7fe fd76 	bl	8002070 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800358e:	d901      	bls.n	8003594 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e01f      	b.n	80035d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003594:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a0:	d1ee      	bne.n	8003580 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035a8:	f7fe fd62 	bl	8002070 <HAL_GetTick>
 80035ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035ae:	e009      	b.n	80035c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035b0:	f7fe fd5e 	bl	8002070 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035be:	d901      	bls.n	80035c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e007      	b.n	80035d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035d0:	d1ee      	bne.n	80035b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800
 80035e0:	420e0040 	.word	0x420e0040
 80035e4:	40007000 	.word	0x40007000
 80035e8:	420e0044 	.word	0x420e0044

080035ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0cc      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003600:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d90c      	bls.n	8003628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b65      	ldr	r3, [pc, #404]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0b8      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003640:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800364a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003658:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a52      	ldr	r2, [pc, #328]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003664:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	494d      	ldr	r1, [pc, #308]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d044      	beq.n	800370c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d119      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e07f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e06f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ba:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e067      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f023 0203 	bic.w	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4934      	ldr	r1, [pc, #208]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036dc:	f7fe fcc8 	bl	8002070 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e4:	f7fe fcc4 	bl	8002070 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e04f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 020c 	and.w	r2, r3, #12
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	429a      	cmp	r2, r3
 800370a:	d1eb      	bne.n	80036e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d20c      	bcs.n	8003734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e032      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4916      	ldr	r1, [pc, #88]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	490e      	ldr	r1, [pc, #56]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003772:	f000 f855 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8003776:	4602      	mov	r2, r0
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	490a      	ldr	r1, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	5ccb      	ldrb	r3, [r1, r3]
 8003786:	fa22 f303 	lsr.w	r3, r2, r3
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fc28 	bl	8001fe8 <HAL_InitTick>

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023c00 	.word	0x40023c00
 80037a8:	40023800 	.word	0x40023800
 80037ac:	08009184 	.word	0x08009184
 80037b0:	20000004 	.word	0x20000004
 80037b4:	20000008 	.word	0x20000008

080037b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_RCC_GetHCLKFreq+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000004 	.word	0x20000004

080037d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037d4:	f7ff fff0 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0a9b      	lsrs	r3, r3, #10
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4903      	ldr	r1, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	08009194 	.word	0x08009194

080037f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037fc:	f7ff ffdc 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0b5b      	lsrs	r3, r3, #13
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4903      	ldr	r1, [pc, #12]	; (800381c <HAL_RCC_GetPCLK2Freq+0x24>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800
 800381c:	08009194 	.word	0x08009194

08003820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003824:	b0ae      	sub	sp, #184	; 0xb8
 8003826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003846:	4bcb      	ldr	r3, [pc, #812]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	2b0c      	cmp	r3, #12
 8003850:	f200 8206 	bhi.w	8003c60 <HAL_RCC_GetSysClockFreq+0x440>
 8003854:	a201      	add	r2, pc, #4	; (adr r2, 800385c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	08003891 	.word	0x08003891
 8003860:	08003c61 	.word	0x08003c61
 8003864:	08003c61 	.word	0x08003c61
 8003868:	08003c61 	.word	0x08003c61
 800386c:	08003899 	.word	0x08003899
 8003870:	08003c61 	.word	0x08003c61
 8003874:	08003c61 	.word	0x08003c61
 8003878:	08003c61 	.word	0x08003c61
 800387c:	080038a1 	.word	0x080038a1
 8003880:	08003c61 	.word	0x08003c61
 8003884:	08003c61 	.word	0x08003c61
 8003888:	08003c61 	.word	0x08003c61
 800388c:	08003a91 	.word	0x08003a91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003890:	4bb9      	ldr	r3, [pc, #740]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003892:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003896:	e1e7      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003898:	4bb8      	ldr	r3, [pc, #736]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x35c>)
 800389a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800389e:	e1e3      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a0:	4bb4      	ldr	r3, [pc, #720]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x354>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ac:	4bb1      	ldr	r3, [pc, #708]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x354>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d071      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b8:	4bae      	ldr	r3, [pc, #696]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x354>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	099b      	lsrs	r3, r3, #6
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80038c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038d4:	2300      	movs	r3, #0
 80038d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038de:	4622      	mov	r2, r4
 80038e0:	462b      	mov	r3, r5
 80038e2:	f04f 0000 	mov.w	r0, #0
 80038e6:	f04f 0100 	mov.w	r1, #0
 80038ea:	0159      	lsls	r1, r3, #5
 80038ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f0:	0150      	lsls	r0, r2, #5
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4621      	mov	r1, r4
 80038f8:	1a51      	subs	r1, r2, r1
 80038fa:	6439      	str	r1, [r7, #64]	; 0x40
 80038fc:	4629      	mov	r1, r5
 80038fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003902:	647b      	str	r3, [r7, #68]	; 0x44
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003910:	4649      	mov	r1, r9
 8003912:	018b      	lsls	r3, r1, #6
 8003914:	4641      	mov	r1, r8
 8003916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800391a:	4641      	mov	r1, r8
 800391c:	018a      	lsls	r2, r1, #6
 800391e:	4641      	mov	r1, r8
 8003920:	1a51      	subs	r1, r2, r1
 8003922:	63b9      	str	r1, [r7, #56]	; 0x38
 8003924:	4649      	mov	r1, r9
 8003926:	eb63 0301 	sbc.w	r3, r3, r1
 800392a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003938:	4649      	mov	r1, r9
 800393a:	00cb      	lsls	r3, r1, #3
 800393c:	4641      	mov	r1, r8
 800393e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003942:	4641      	mov	r1, r8
 8003944:	00ca      	lsls	r2, r1, #3
 8003946:	4610      	mov	r0, r2
 8003948:	4619      	mov	r1, r3
 800394a:	4603      	mov	r3, r0
 800394c:	4622      	mov	r2, r4
 800394e:	189b      	adds	r3, r3, r2
 8003950:	633b      	str	r3, [r7, #48]	; 0x30
 8003952:	462b      	mov	r3, r5
 8003954:	460a      	mov	r2, r1
 8003956:	eb42 0303 	adc.w	r3, r2, r3
 800395a:	637b      	str	r3, [r7, #52]	; 0x34
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003968:	4629      	mov	r1, r5
 800396a:	024b      	lsls	r3, r1, #9
 800396c:	4621      	mov	r1, r4
 800396e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003972:	4621      	mov	r1, r4
 8003974:	024a      	lsls	r2, r1, #9
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800397e:	2200      	movs	r2, #0
 8003980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003984:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003988:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800398c:	f7fc ff9e 	bl	80008cc <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4613      	mov	r3, r2
 8003996:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800399a:	e067      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399c:	4b75      	ldr	r3, [pc, #468]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x354>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	099b      	lsrs	r3, r3, #6
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039a8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80039ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039b6:	2300      	movs	r3, #0
 80039b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80039be:	4622      	mov	r2, r4
 80039c0:	462b      	mov	r3, r5
 80039c2:	f04f 0000 	mov.w	r0, #0
 80039c6:	f04f 0100 	mov.w	r1, #0
 80039ca:	0159      	lsls	r1, r3, #5
 80039cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d0:	0150      	lsls	r0, r2, #5
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4621      	mov	r1, r4
 80039d8:	1a51      	subs	r1, r2, r1
 80039da:	62b9      	str	r1, [r7, #40]	; 0x28
 80039dc:	4629      	mov	r1, r5
 80039de:	eb63 0301 	sbc.w	r3, r3, r1
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80039f0:	4649      	mov	r1, r9
 80039f2:	018b      	lsls	r3, r1, #6
 80039f4:	4641      	mov	r1, r8
 80039f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039fa:	4641      	mov	r1, r8
 80039fc:	018a      	lsls	r2, r1, #6
 80039fe:	4641      	mov	r1, r8
 8003a00:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a04:	4649      	mov	r1, r9
 8003a06:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a16:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a1e:	4692      	mov	sl, r2
 8003a20:	469b      	mov	fp, r3
 8003a22:	4623      	mov	r3, r4
 8003a24:	eb1a 0303 	adds.w	r3, sl, r3
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	462b      	mov	r3, r5
 8003a2c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003a3e:	4629      	mov	r1, r5
 8003a40:	028b      	lsls	r3, r1, #10
 8003a42:	4621      	mov	r1, r4
 8003a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a48:	4621      	mov	r1, r4
 8003a4a:	028a      	lsls	r2, r1, #10
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a54:	2200      	movs	r2, #0
 8003a56:	673b      	str	r3, [r7, #112]	; 0x70
 8003a58:	677a      	str	r2, [r7, #116]	; 0x74
 8003a5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003a5e:	f7fc ff35 	bl	80008cc <__aeabi_uldivmod>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4613      	mov	r3, r2
 8003a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a6c:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	3301      	adds	r3, #1
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a8e:	e0eb      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a90:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a9c:	4b35      	ldr	r3, [pc, #212]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d06b      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa8:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	099b      	lsrs	r3, r3, #6
 8003aae:	2200      	movs	r2, #0
 8003ab0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ab2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aba:	663b      	str	r3, [r7, #96]	; 0x60
 8003abc:	2300      	movs	r3, #0
 8003abe:	667b      	str	r3, [r7, #100]	; 0x64
 8003ac0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	462b      	mov	r3, r5
 8003ac8:	f04f 0000 	mov.w	r0, #0
 8003acc:	f04f 0100 	mov.w	r1, #0
 8003ad0:	0159      	lsls	r1, r3, #5
 8003ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad6:	0150      	lsls	r0, r2, #5
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4621      	mov	r1, r4
 8003ade:	1a51      	subs	r1, r2, r1
 8003ae0:	61b9      	str	r1, [r7, #24]
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003af6:	4659      	mov	r1, fp
 8003af8:	018b      	lsls	r3, r1, #6
 8003afa:	4651      	mov	r1, sl
 8003afc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b00:	4651      	mov	r1, sl
 8003b02:	018a      	lsls	r2, r1, #6
 8003b04:	4651      	mov	r1, sl
 8003b06:	ebb2 0801 	subs.w	r8, r2, r1
 8003b0a:	4659      	mov	r1, fp
 8003b0c:	eb63 0901 	sbc.w	r9, r3, r1
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b24:	4690      	mov	r8, r2
 8003b26:	4699      	mov	r9, r3
 8003b28:	4623      	mov	r3, r4
 8003b2a:	eb18 0303 	adds.w	r3, r8, r3
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	462b      	mov	r3, r5
 8003b32:	eb49 0303 	adc.w	r3, r9, r3
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003b44:	4629      	mov	r1, r5
 8003b46:	024b      	lsls	r3, r1, #9
 8003b48:	4621      	mov	r1, r4
 8003b4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b4e:	4621      	mov	r1, r4
 8003b50:	024a      	lsls	r2, r1, #9
 8003b52:	4610      	mov	r0, r2
 8003b54:	4619      	mov	r1, r3
 8003b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b64:	f7fc feb2 	bl	80008cc <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b72:	e065      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x420>
 8003b74:	40023800 	.word	0x40023800
 8003b78:	00f42400 	.word	0x00f42400
 8003b7c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b80:	4b3d      	ldr	r3, [pc, #244]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	2200      	movs	r2, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b90:	653b      	str	r3, [r7, #80]	; 0x50
 8003b92:	2300      	movs	r3, #0
 8003b94:	657b      	str	r3, [r7, #84]	; 0x54
 8003b96:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003b9a:	4642      	mov	r2, r8
 8003b9c:	464b      	mov	r3, r9
 8003b9e:	f04f 0000 	mov.w	r0, #0
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	0159      	lsls	r1, r3, #5
 8003ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bac:	0150      	lsls	r0, r2, #5
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	1a51      	subs	r1, r2, r1
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	4649      	mov	r1, r9
 8003bba:	eb63 0301 	sbc.w	r3, r3, r1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003bcc:	4659      	mov	r1, fp
 8003bce:	018b      	lsls	r3, r1, #6
 8003bd0:	4651      	mov	r1, sl
 8003bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	018a      	lsls	r2, r1, #6
 8003bda:	4651      	mov	r1, sl
 8003bdc:	1a54      	subs	r4, r2, r1
 8003bde:	4659      	mov	r1, fp
 8003be0:	eb63 0501 	sbc.w	r5, r3, r1
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	00eb      	lsls	r3, r5, #3
 8003bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bf2:	00e2      	lsls	r2, r4, #3
 8003bf4:	4614      	mov	r4, r2
 8003bf6:	461d      	mov	r5, r3
 8003bf8:	4643      	mov	r3, r8
 8003bfa:	18e3      	adds	r3, r4, r3
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	464b      	mov	r3, r9
 8003c00:	eb45 0303 	adc.w	r3, r5, r3
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c12:	4629      	mov	r1, r5
 8003c14:	028b      	lsls	r3, r1, #10
 8003c16:	4621      	mov	r1, r4
 8003c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	028a      	lsls	r2, r1, #10
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c28:	2200      	movs	r2, #0
 8003c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c2c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c32:	f7fc fe4b 	bl	80008cc <__aeabi_uldivmod>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c40:	4b0d      	ldr	r3, [pc, #52]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	0f1b      	lsrs	r3, r3, #28
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003c4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c5e:	e003      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	37b8      	adds	r7, #184	; 0xb8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	00f42400 	.word	0x00f42400

08003c80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e28d      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8083 	beq.w	8003da6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ca0:	4b94      	ldr	r3, [pc, #592]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d019      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cac:	4b91      	ldr	r3, [pc, #580]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d106      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cb8:	4b8e      	ldr	r3, [pc, #568]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc4:	d00c      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d112      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cd2:	4b88      	ldr	r3, [pc, #544]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cde:	d10b      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce0:	4b84      	ldr	r3, [pc, #528]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d05b      	beq.n	8003da4 <HAL_RCC_OscConfig+0x124>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d157      	bne.n	8003da4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e25a      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d00:	d106      	bne.n	8003d10 <HAL_RCC_OscConfig+0x90>
 8003d02:	4b7c      	ldr	r3, [pc, #496]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a7b      	ldr	r2, [pc, #492]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e01d      	b.n	8003d4c <HAL_RCC_OscConfig+0xcc>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0xb4>
 8003d1a:	4b76      	ldr	r3, [pc, #472]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a75      	ldr	r2, [pc, #468]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	4b73      	ldr	r3, [pc, #460]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a72      	ldr	r2, [pc, #456]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e00b      	b.n	8003d4c <HAL_RCC_OscConfig+0xcc>
 8003d34:	4b6f      	ldr	r3, [pc, #444]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a6e      	ldr	r2, [pc, #440]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b6c      	ldr	r3, [pc, #432]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a6b      	ldr	r2, [pc, #428]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d013      	beq.n	8003d7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fe f98c 	bl	8002070 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fe f988 	bl	8002070 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	; 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e21f      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b61      	ldr	r3, [pc, #388]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0xdc>
 8003d7a:	e014      	b.n	8003da6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fe f978 	bl	8002070 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d84:	f7fe f974 	bl	8002070 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e20b      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d96:	4b57      	ldr	r3, [pc, #348]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x104>
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d06f      	beq.n	8003e92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003db2:	4b50      	ldr	r3, [pc, #320]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d017      	beq.n	8003dee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dbe:	4b4d      	ldr	r3, [pc, #308]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d105      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dca:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	d11c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de2:	4b44      	ldr	r3, [pc, #272]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d116      	bne.n	8003e1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_RCC_OscConfig+0x186>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d001      	beq.n	8003e06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e1d3      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e06:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4937      	ldr	r1, [pc, #220]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1a:	e03a      	b.n	8003e92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e24:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7fe f921 	bl	8002070 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e32:	f7fe f91d 	bl	8002070 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e1b4      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e44:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4925      	ldr	r1, [pc, #148]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]
 8003e64:	e015      	b.n	8003e92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fe f900 	bl	8002070 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e74:	f7fe f8fc 	bl	8002070 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e193      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d036      	beq.n	8003f0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <HAL_RCC_OscConfig+0x27c>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fe f8e0 	bl	8002070 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb4:	f7fe f8dc 	bl	8002070 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e173      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x234>
 8003ed2:	e01b      	b.n	8003f0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed4:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_OscConfig+0x27c>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eda:	f7fe f8c9 	bl	8002070 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	e00e      	b.n	8003f00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee2:	f7fe f8c5 	bl	8002070 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d907      	bls.n	8003f00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e15c      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	42470000 	.word	0x42470000
 8003efc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	4b8a      	ldr	r3, [pc, #552]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ea      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8097 	beq.w	8004048 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1e:	4b83      	ldr	r3, [pc, #524]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	4b7f      	ldr	r3, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a7e      	ldr	r2, [pc, #504]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3a:	4b7c      	ldr	r3, [pc, #496]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b79      	ldr	r3, [pc, #484]	; (8004130 <HAL_RCC_OscConfig+0x4b0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d118      	bne.n	8003f88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f56:	4b76      	ldr	r3, [pc, #472]	; (8004130 <HAL_RCC_OscConfig+0x4b0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a75      	ldr	r2, [pc, #468]	; (8004130 <HAL_RCC_OscConfig+0x4b0>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f62:	f7fe f885 	bl	8002070 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6a:	f7fe f881 	bl	8002070 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e118      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	4b6c      	ldr	r3, [pc, #432]	; (8004130 <HAL_RCC_OscConfig+0x4b0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x31e>
 8003f90:	4b66      	ldr	r3, [pc, #408]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	4a65      	ldr	r2, [pc, #404]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9c:	e01c      	b.n	8003fd8 <HAL_RCC_OscConfig+0x358>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x340>
 8003fa6:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	4a60      	ldr	r2, [pc, #384]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003fac:	f043 0304 	orr.w	r3, r3, #4
 8003fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb2:	4b5e      	ldr	r3, [pc, #376]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a5d      	ldr	r2, [pc, #372]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbe:	e00b      	b.n	8003fd8 <HAL_RCC_OscConfig+0x358>
 8003fc0:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	4a59      	ldr	r2, [pc, #356]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70
 8003fcc:	4b57      	ldr	r3, [pc, #348]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a56      	ldr	r2, [pc, #344]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8003fd2:	f023 0304 	bic.w	r3, r3, #4
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d015      	beq.n	800400c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fe f846 	bl	8002070 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fe f842 	bl	8002070 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e0d7      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffe:	4b4b      	ldr	r3, [pc, #300]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0ee      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x368>
 800400a:	e014      	b.n	8004036 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400c:	f7fe f830 	bl	8002070 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004012:	e00a      	b.n	800402a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004014:	f7fe f82c 	bl	8002070 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e0c1      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402a:	4b40      	ldr	r3, [pc, #256]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1ee      	bne.n	8004014 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d105      	bne.n	8004048 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403c:	4b3b      	ldr	r3, [pc, #236]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	4a3a      	ldr	r2, [pc, #232]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8004042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004046:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80ad 	beq.w	80041ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004052:	4b36      	ldr	r3, [pc, #216]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b08      	cmp	r3, #8
 800405c:	d060      	beq.n	8004120 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d145      	bne.n	80040f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b33      	ldr	r3, [pc, #204]	; (8004134 <HAL_RCC_OscConfig+0x4b4>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fe f800 	bl	8002070 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7fd fffc 	bl	8002070 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e093      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	4b29      	ldr	r3, [pc, #164]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	019b      	lsls	r3, r3, #6
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	061b      	lsls	r3, r3, #24
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	491b      	ldr	r1, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCC_OscConfig+0x4b4>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ca:	f7fd ffd1 	bl	8002070 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d2:	f7fd ffcd 	bl	8002070 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e064      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x452>
 80040f0:	e05c      	b.n	80041ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <HAL_RCC_OscConfig+0x4b4>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fd ffba 	bl	8002070 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004100:	f7fd ffb6 	bl	8002070 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e04d      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_OscConfig+0x4ac>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x480>
 800411e:	e045      	b.n	80041ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d107      	bne.n	8004138 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e040      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
 800412c:	40023800 	.word	0x40023800
 8004130:	40007000 	.word	0x40007000
 8004134:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004138:	4b1f      	ldr	r3, [pc, #124]	; (80041b8 <HAL_RCC_OscConfig+0x538>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d030      	beq.n	80041a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d129      	bne.n	80041a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d122      	bne.n	80041a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004168:	4013      	ands	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800416e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004170:	4293      	cmp	r3, r2
 8004172:	d119      	bne.n	80041a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	3b01      	subs	r3, #1
 8004182:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d10f      	bne.n	80041a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004194:	429a      	cmp	r2, r3
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800

080041bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07b      	b.n	80042c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041de:	d009      	beq.n	80041f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	61da      	str	r2, [r3, #28]
 80041e6:	e005      	b.n	80041f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fd fd3a 	bl	8001c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	ea42 0103 	orr.w	r1, r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f003 0104 	and.w	r1, r3, #4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0210 	and.w	r2, r3, #16
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b088      	sub	sp, #32
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	4613      	mov	r3, r2
 80042dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_SPI_Transmit+0x22>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e126      	b.n	800453e <HAL_SPI_Transmit+0x270>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f8:	f7fd feba 	bl	8002070 <HAL_GetTick>
 80042fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d002      	beq.n	8004314 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800430e:	2302      	movs	r3, #2
 8004310:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004312:	e10b      	b.n	800452c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_SPI_Transmit+0x52>
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004324:	e102      	b.n	800452c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2203      	movs	r2, #3
 800432a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436c:	d10f      	bne.n	800438e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800438c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d007      	beq.n	80043ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b4:	d14b      	bne.n	800444e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_SPI_Transmit+0xf6>
 80043be:	8afb      	ldrh	r3, [r7, #22]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d13e      	bne.n	8004442 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	881a      	ldrh	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	1c9a      	adds	r2, r3, #2
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043e8:	e02b      	b.n	8004442 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d112      	bne.n	800441e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	881a      	ldrh	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	1c9a      	adds	r2, r3, #2
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	86da      	strh	r2, [r3, #54]	; 0x36
 800441c:	e011      	b.n	8004442 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800441e:	f7fd fe27 	bl	8002070 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d803      	bhi.n	8004436 <HAL_SPI_Transmit+0x168>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d102      	bne.n	800443c <HAL_SPI_Transmit+0x16e>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004440:	e074      	b.n	800452c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ce      	bne.n	80043ea <HAL_SPI_Transmit+0x11c>
 800444c:	e04c      	b.n	80044e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_SPI_Transmit+0x18e>
 8004456:	8afb      	ldrh	r3, [r7, #22]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d140      	bne.n	80044de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	7812      	ldrb	r2, [r2, #0]
 8004468:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004482:	e02c      	b.n	80044de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b02      	cmp	r3, #2
 8004490:	d113      	bne.n	80044ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	7812      	ldrb	r2, [r2, #0]
 800449e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80044b8:	e011      	b.n	80044de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ba:	f7fd fdd9 	bl	8002070 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d803      	bhi.n	80044d2 <HAL_SPI_Transmit+0x204>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d102      	bne.n	80044d8 <HAL_SPI_Transmit+0x20a>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044dc:	e026      	b.n	800452c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1cd      	bne.n	8004484 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fa55 	bl	800499c <SPI_EndRxTxTransaction>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	77fb      	strb	r3, [r7, #31]
 8004528:	e000      	b.n	800452c <HAL_SPI_Transmit+0x25e>
  }

error:
 800452a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800453c:	7ffb      	ldrb	r3, [r7, #31]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b08c      	sub	sp, #48	; 0x30
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004554:	2301      	movs	r3, #1
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_SPI_TransmitReceive+0x26>
 8004568:	2302      	movs	r3, #2
 800456a:	e18a      	b.n	8004882 <HAL_SPI_TransmitReceive+0x33c>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004574:	f7fd fd7c 	bl	8002070 <HAL_GetTick>
 8004578:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800458a:	887b      	ldrh	r3, [r7, #2]
 800458c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800458e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004592:	2b01      	cmp	r3, #1
 8004594:	d00f      	beq.n	80045b6 <HAL_SPI_TransmitReceive+0x70>
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800459c:	d107      	bne.n	80045ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d103      	bne.n	80045ae <HAL_SPI_TransmitReceive+0x68>
 80045a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d003      	beq.n	80045b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80045ae:	2302      	movs	r3, #2
 80045b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045b4:	e15b      	b.n	800486e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_SPI_TransmitReceive+0x82>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_TransmitReceive+0x82>
 80045c2:	887b      	ldrh	r3, [r7, #2]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d103      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045ce:	e14e      	b.n	800486e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d003      	beq.n	80045e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2205      	movs	r2, #5
 80045e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	887a      	ldrh	r2, [r7, #2]
 80045f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	887a      	ldrh	r2, [r7, #2]
 80045fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	887a      	ldrh	r2, [r7, #2]
 8004606:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	887a      	ldrh	r2, [r7, #2]
 800460c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b40      	cmp	r3, #64	; 0x40
 8004626:	d007      	beq.n	8004638 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004636:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004640:	d178      	bne.n	8004734 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_SPI_TransmitReceive+0x10a>
 800464a:	8b7b      	ldrh	r3, [r7, #26]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d166      	bne.n	800471e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	881a      	ldrh	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	1c9a      	adds	r2, r3, #2
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004674:	e053      	b.n	800471e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b02      	cmp	r3, #2
 8004682:	d11b      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x176>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <HAL_SPI_TransmitReceive+0x176>
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d113      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	881a      	ldrh	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d119      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x1b8>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d014      	beq.n	80046fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	b292      	uxth	r2, r2
 80046e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	1c9a      	adds	r2, r3, #2
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046fa:	2301      	movs	r3, #1
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046fe:	f7fd fcb7 	bl	8002070 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800470a:	429a      	cmp	r2, r3
 800470c:	d807      	bhi.n	800471e <HAL_SPI_TransmitReceive+0x1d8>
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d003      	beq.n	800471e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800471c:	e0a7      	b.n	800486e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1a6      	bne.n	8004676 <HAL_SPI_TransmitReceive+0x130>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1a1      	bne.n	8004676 <HAL_SPI_TransmitReceive+0x130>
 8004732:	e07c      	b.n	800482e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <HAL_SPI_TransmitReceive+0x1fc>
 800473c:	8b7b      	ldrh	r3, [r7, #26]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d16b      	bne.n	800481a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	7812      	ldrb	r2, [r2, #0]
 800474e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004768:	e057      	b.n	800481a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d11c      	bne.n	80047b2 <HAL_SPI_TransmitReceive+0x26c>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d017      	beq.n	80047b2 <HAL_SPI_TransmitReceive+0x26c>
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d114      	bne.n	80047b2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	330c      	adds	r3, #12
 8004792:	7812      	ldrb	r2, [r2, #0]
 8004794:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d119      	bne.n	80047f4 <HAL_SPI_TransmitReceive+0x2ae>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d014      	beq.n	80047f4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047f0:	2301      	movs	r3, #1
 80047f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047f4:	f7fd fc3c 	bl	8002070 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004800:	429a      	cmp	r2, r3
 8004802:	d803      	bhi.n	800480c <HAL_SPI_TransmitReceive+0x2c6>
 8004804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d102      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x2cc>
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004818:	e029      	b.n	800486e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1a2      	bne.n	800476a <HAL_SPI_TransmitReceive+0x224>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d19d      	bne.n	800476a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800482e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004830:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f8b2 	bl	800499c <SPI_EndRxTxTransaction>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d006      	beq.n	800484c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800484a:	e010      	b.n	800486e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10b      	bne.n	800486c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	e000      	b.n	800486e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800486c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800487e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004882:	4618      	mov	r0, r3
 8004884:	3730      	adds	r7, #48	; 0x30
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	4613      	mov	r3, r2
 800489a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800489c:	f7fd fbe8 	bl	8002070 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	4413      	add	r3, r2
 80048aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048ac:	f7fd fbe0 	bl	8002070 <HAL_GetTick>
 80048b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048b2:	4b39      	ldr	r3, [pc, #228]	; (8004998 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	015b      	lsls	r3, r3, #5
 80048b8:	0d1b      	lsrs	r3, r3, #20
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	fb02 f303 	mul.w	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048c2:	e054      	b.n	800496e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d050      	beq.n	800496e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048cc:	f7fd fbd0 	bl	8002070 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d902      	bls.n	80048e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d13d      	bne.n	800495e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048fa:	d111      	bne.n	8004920 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004904:	d004      	beq.n	8004910 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490e:	d107      	bne.n	8004920 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800491e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004928:	d10f      	bne.n	800494a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004948:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e017      	b.n	800498e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	3b01      	subs	r3, #1
 800496c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4013      	ands	r3, r2
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	429a      	cmp	r2, r3
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	429a      	cmp	r2, r3
 800498a:	d19b      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000004 	.word	0x20000004

0800499c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049a8:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <SPI_EndRxTxTransaction+0x7c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <SPI_EndRxTxTransaction+0x80>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	0d5b      	lsrs	r3, r3, #21
 80049b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c6:	d112      	bne.n	80049ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2200      	movs	r2, #0
 80049d0:	2180      	movs	r1, #128	; 0x80
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff ff5a 	bl	800488c <SPI_WaitFlagStateUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d016      	beq.n	8004a0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e00f      	b.n	8004a0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a04:	2b80      	cmp	r3, #128	; 0x80
 8004a06:	d0f2      	beq.n	80049ee <SPI_EndRxTxTransaction+0x52>
 8004a08:	e000      	b.n	8004a0c <SPI_EndRxTxTransaction+0x70>
        break;
 8004a0a:	bf00      	nop
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000004 	.word	0x20000004
 8004a1c:	165e9f81 	.word	0x165e9f81

08004a20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e03f      	b.n	8004ab2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fd f986 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2224      	movs	r2, #36	; 0x24
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f929 	bl	8004cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695a      	ldr	r2, [r3, #20]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b08a      	sub	sp, #40	; 0x28
 8004abe:	af02      	add	r7, sp, #8
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	603b      	str	r3, [r7, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d17c      	bne.n	8004bd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_UART_Transmit+0x2c>
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e075      	b.n	8004bd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_UART_Transmit+0x3e>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e06e      	b.n	8004bd6 <HAL_UART_Transmit+0x11c>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2221      	movs	r2, #33	; 0x21
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b0e:	f7fd faaf 	bl	8002070 <HAL_GetTick>
 8004b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	88fa      	ldrh	r2, [r7, #6]
 8004b1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b28:	d108      	bne.n	8004b3c <HAL_UART_Transmit+0x82>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	e003      	b.n	8004b44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b4c:	e02a      	b.n	8004ba4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2200      	movs	r2, #0
 8004b56:	2180      	movs	r1, #128	; 0x80
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f840 	bl	8004bde <UART_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e036      	b.n	8004bd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	3302      	adds	r3, #2
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	e007      	b.n	8004b96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	781a      	ldrb	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	3301      	adds	r3, #1
 8004b94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1cf      	bne.n	8004b4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2140      	movs	r1, #64	; 0x40
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f810 	bl	8004bde <UART_WaitOnFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e006      	b.n	8004bd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e000      	b.n	8004bd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004bd4:	2302      	movs	r3, #2
  }
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b090      	sub	sp, #64	; 0x40
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	603b      	str	r3, [r7, #0]
 8004bea:	4613      	mov	r3, r2
 8004bec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bee:	e050      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d04c      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x30>
 8004bfe:	f7fd fa37 	bl	8002070 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d241      	bcs.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c2e:	637a      	str	r2, [r7, #52]	; 0x34
 8004c30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e5      	bne.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3314      	adds	r3, #20
 8004c48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	613b      	str	r3, [r7, #16]
   return(result);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c62:	623a      	str	r2, [r7, #32]
 8004c64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	69f9      	ldr	r1, [r7, #28]
 8004c68:	6a3a      	ldr	r2, [r7, #32]
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e5      	bne.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e00f      	b.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d09f      	beq.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3740      	adds	r7, #64	; 0x40
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc0:	b0c0      	sub	sp, #256	; 0x100
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	68d9      	ldr	r1, [r3, #12]
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	ea40 0301 	orr.w	r3, r0, r1
 8004ce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d14:	f021 010c 	bic.w	r1, r1, #12
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d22:	430b      	orrs	r3, r1
 8004d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d36:	6999      	ldr	r1, [r3, #24]
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	ea40 0301 	orr.w	r3, r0, r1
 8004d42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b8f      	ldr	r3, [pc, #572]	; (8004f88 <UART_SetConfig+0x2cc>)
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d005      	beq.n	8004d5c <UART_SetConfig+0xa0>
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b8d      	ldr	r3, [pc, #564]	; (8004f8c <UART_SetConfig+0x2d0>)
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d104      	bne.n	8004d66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d5c:	f7fe fd4c 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 8004d60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d64:	e003      	b.n	8004d6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d66:	f7fe fd33 	bl	80037d0 <HAL_RCC_GetPCLK1Freq>
 8004d6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d78:	f040 810c 	bne.w	8004f94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d80:	2200      	movs	r2, #0
 8004d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d8e:	4622      	mov	r2, r4
 8004d90:	462b      	mov	r3, r5
 8004d92:	1891      	adds	r1, r2, r2
 8004d94:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d96:	415b      	adcs	r3, r3
 8004d98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d9e:	4621      	mov	r1, r4
 8004da0:	eb12 0801 	adds.w	r8, r2, r1
 8004da4:	4629      	mov	r1, r5
 8004da6:	eb43 0901 	adc.w	r9, r3, r1
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dbe:	4690      	mov	r8, r2
 8004dc0:	4699      	mov	r9, r3
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	eb18 0303 	adds.w	r3, r8, r3
 8004dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dcc:	462b      	mov	r3, r5
 8004dce:	eb49 0303 	adc.w	r3, r9, r3
 8004dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004de2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004de6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dea:	460b      	mov	r3, r1
 8004dec:	18db      	adds	r3, r3, r3
 8004dee:	653b      	str	r3, [r7, #80]	; 0x50
 8004df0:	4613      	mov	r3, r2
 8004df2:	eb42 0303 	adc.w	r3, r2, r3
 8004df6:	657b      	str	r3, [r7, #84]	; 0x54
 8004df8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e00:	f7fb fd64 	bl	80008cc <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4b61      	ldr	r3, [pc, #388]	; (8004f90 <UART_SetConfig+0x2d4>)
 8004e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	011c      	lsls	r4, r3, #4
 8004e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e24:	4642      	mov	r2, r8
 8004e26:	464b      	mov	r3, r9
 8004e28:	1891      	adds	r1, r2, r2
 8004e2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e2c:	415b      	adcs	r3, r3
 8004e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e34:	4641      	mov	r1, r8
 8004e36:	eb12 0a01 	adds.w	sl, r2, r1
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e54:	4692      	mov	sl, r2
 8004e56:	469b      	mov	fp, r3
 8004e58:	4643      	mov	r3, r8
 8004e5a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e62:	464b      	mov	r3, r9
 8004e64:	eb4b 0303 	adc.w	r3, fp, r3
 8004e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e80:	460b      	mov	r3, r1
 8004e82:	18db      	adds	r3, r3, r3
 8004e84:	643b      	str	r3, [r7, #64]	; 0x40
 8004e86:	4613      	mov	r3, r2
 8004e88:	eb42 0303 	adc.w	r3, r2, r3
 8004e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e96:	f7fb fd19 	bl	80008cc <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4b3b      	ldr	r3, [pc, #236]	; (8004f90 <UART_SetConfig+0x2d4>)
 8004ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2264      	movs	r2, #100	; 0x64
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	1acb      	subs	r3, r1, r3
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004eb6:	4b36      	ldr	r3, [pc, #216]	; (8004f90 <UART_SetConfig+0x2d4>)
 8004eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ec4:	441c      	add	r4, r3
 8004ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ed0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ed4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ed8:	4642      	mov	r2, r8
 8004eda:	464b      	mov	r3, r9
 8004edc:	1891      	adds	r1, r2, r2
 8004ede:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ee0:	415b      	adcs	r3, r3
 8004ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ee8:	4641      	mov	r1, r8
 8004eea:	1851      	adds	r1, r2, r1
 8004eec:	6339      	str	r1, [r7, #48]	; 0x30
 8004eee:	4649      	mov	r1, r9
 8004ef0:	414b      	adcs	r3, r1
 8004ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f00:	4659      	mov	r1, fp
 8004f02:	00cb      	lsls	r3, r1, #3
 8004f04:	4651      	mov	r1, sl
 8004f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	00ca      	lsls	r2, r1, #3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	4619      	mov	r1, r3
 8004f12:	4603      	mov	r3, r0
 8004f14:	4642      	mov	r2, r8
 8004f16:	189b      	adds	r3, r3, r2
 8004f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	460a      	mov	r2, r1
 8004f20:	eb42 0303 	adc.w	r3, r2, r3
 8004f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	18db      	adds	r3, r3, r3
 8004f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f42:	4613      	mov	r3, r2
 8004f44:	eb42 0303 	adc.w	r3, r2, r3
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f52:	f7fb fcbb 	bl	80008cc <__aeabi_uldivmod>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <UART_SetConfig+0x2d4>)
 8004f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	2164      	movs	r1, #100	; 0x64
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	3332      	adds	r3, #50	; 0x32
 8004f6e:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <UART_SetConfig+0x2d4>)
 8004f70:	fba2 2303 	umull	r2, r3, r2, r3
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	f003 0207 	and.w	r2, r3, #7
 8004f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4422      	add	r2, r4
 8004f82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f84:	e105      	b.n	8005192 <UART_SetConfig+0x4d6>
 8004f86:	bf00      	nop
 8004f88:	40011000 	.word	0x40011000
 8004f8c:	40011400 	.word	0x40011400
 8004f90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fa6:	4642      	mov	r2, r8
 8004fa8:	464b      	mov	r3, r9
 8004faa:	1891      	adds	r1, r2, r2
 8004fac:	6239      	str	r1, [r7, #32]
 8004fae:	415b      	adcs	r3, r3
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	1854      	adds	r4, r2, r1
 8004fba:	4649      	mov	r1, r9
 8004fbc:	eb43 0501 	adc.w	r5, r3, r1
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	00eb      	lsls	r3, r5, #3
 8004fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fce:	00e2      	lsls	r2, r4, #3
 8004fd0:	4614      	mov	r4, r2
 8004fd2:	461d      	mov	r5, r3
 8004fd4:	4643      	mov	r3, r8
 8004fd6:	18e3      	adds	r3, r4, r3
 8004fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fdc:	464b      	mov	r3, r9
 8004fde:	eb45 0303 	adc.w	r3, r5, r3
 8004fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005002:	4629      	mov	r1, r5
 8005004:	008b      	lsls	r3, r1, #2
 8005006:	4621      	mov	r1, r4
 8005008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500c:	4621      	mov	r1, r4
 800500e:	008a      	lsls	r2, r1, #2
 8005010:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005014:	f7fb fc5a 	bl	80008cc <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4b60      	ldr	r3, [pc, #384]	; (80051a0 <UART_SetConfig+0x4e4>)
 800501e:	fba3 2302 	umull	r2, r3, r3, r2
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	011c      	lsls	r4, r3, #4
 8005026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800502a:	2200      	movs	r2, #0
 800502c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005030:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005034:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	1891      	adds	r1, r2, r2
 800503e:	61b9      	str	r1, [r7, #24]
 8005040:	415b      	adcs	r3, r3
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005048:	4641      	mov	r1, r8
 800504a:	1851      	adds	r1, r2, r1
 800504c:	6139      	str	r1, [r7, #16]
 800504e:	4649      	mov	r1, r9
 8005050:	414b      	adcs	r3, r1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005060:	4659      	mov	r1, fp
 8005062:	00cb      	lsls	r3, r1, #3
 8005064:	4651      	mov	r1, sl
 8005066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506a:	4651      	mov	r1, sl
 800506c:	00ca      	lsls	r2, r1, #3
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	4603      	mov	r3, r0
 8005074:	4642      	mov	r2, r8
 8005076:	189b      	adds	r3, r3, r2
 8005078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800507c:	464b      	mov	r3, r9
 800507e:	460a      	mov	r2, r1
 8005080:	eb42 0303 	adc.w	r3, r2, r3
 8005084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	67bb      	str	r3, [r7, #120]	; 0x78
 8005092:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050a0:	4649      	mov	r1, r9
 80050a2:	008b      	lsls	r3, r1, #2
 80050a4:	4641      	mov	r1, r8
 80050a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050aa:	4641      	mov	r1, r8
 80050ac:	008a      	lsls	r2, r1, #2
 80050ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050b2:	f7fb fc0b 	bl	80008cc <__aeabi_uldivmod>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4b39      	ldr	r3, [pc, #228]	; (80051a0 <UART_SetConfig+0x4e4>)
 80050bc:	fba3 1302 	umull	r1, r3, r3, r2
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	2164      	movs	r1, #100	; 0x64
 80050c4:	fb01 f303 	mul.w	r3, r1, r3
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	3332      	adds	r3, #50	; 0x32
 80050ce:	4a34      	ldr	r2, [pc, #208]	; (80051a0 <UART_SetConfig+0x4e4>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050da:	441c      	add	r4, r3
 80050dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050e0:	2200      	movs	r2, #0
 80050e2:	673b      	str	r3, [r7, #112]	; 0x70
 80050e4:	677a      	str	r2, [r7, #116]	; 0x74
 80050e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050ea:	4642      	mov	r2, r8
 80050ec:	464b      	mov	r3, r9
 80050ee:	1891      	adds	r1, r2, r2
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	415b      	adcs	r3, r3
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050fa:	4641      	mov	r1, r8
 80050fc:	1851      	adds	r1, r2, r1
 80050fe:	6039      	str	r1, [r7, #0]
 8005100:	4649      	mov	r1, r9
 8005102:	414b      	adcs	r3, r1
 8005104:	607b      	str	r3, [r7, #4]
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005112:	4659      	mov	r1, fp
 8005114:	00cb      	lsls	r3, r1, #3
 8005116:	4651      	mov	r1, sl
 8005118:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800511c:	4651      	mov	r1, sl
 800511e:	00ca      	lsls	r2, r1, #3
 8005120:	4610      	mov	r0, r2
 8005122:	4619      	mov	r1, r3
 8005124:	4603      	mov	r3, r0
 8005126:	4642      	mov	r2, r8
 8005128:	189b      	adds	r3, r3, r2
 800512a:	66bb      	str	r3, [r7, #104]	; 0x68
 800512c:	464b      	mov	r3, r9
 800512e:	460a      	mov	r2, r1
 8005130:	eb42 0303 	adc.w	r3, r2, r3
 8005134:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	663b      	str	r3, [r7, #96]	; 0x60
 8005140:	667a      	str	r2, [r7, #100]	; 0x64
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800514e:	4649      	mov	r1, r9
 8005150:	008b      	lsls	r3, r1, #2
 8005152:	4641      	mov	r1, r8
 8005154:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005158:	4641      	mov	r1, r8
 800515a:	008a      	lsls	r2, r1, #2
 800515c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005160:	f7fb fbb4 	bl	80008cc <__aeabi_uldivmod>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <UART_SetConfig+0x4e4>)
 800516a:	fba3 1302 	umull	r1, r3, r3, r2
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	2164      	movs	r1, #100	; 0x64
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	3332      	adds	r3, #50	; 0x32
 800517c:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <UART_SetConfig+0x4e4>)
 800517e:	fba2 2303 	umull	r2, r3, r2, r3
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	f003 020f 	and.w	r2, r3, #15
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4422      	add	r2, r4
 8005190:	609a      	str	r2, [r3, #8]
}
 8005192:	bf00      	nop
 8005194:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005198:	46bd      	mov	sp, r7
 800519a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800519e:	bf00      	nop
 80051a0:	51eb851f 	.word	0x51eb851f

080051a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80051a8:	4904      	ldr	r1, [pc, #16]	; (80051bc <MX_FATFS_Init+0x18>)
 80051aa:	4805      	ldr	r0, [pc, #20]	; (80051c0 <MX_FATFS_Init+0x1c>)
 80051ac:	f003 f9ce 	bl	800854c <FATFS_LinkDriver>
 80051b0:	4603      	mov	r3, r0
 80051b2:	461a      	mov	r2, r3
 80051b4:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <MX_FATFS_Init+0x20>)
 80051b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80051b8:	bf00      	nop
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20006678 	.word	0x20006678
 80051c0:	20000010 	.word	0x20000010
 80051c4:	20006674 	.word	0x20006674

080051c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80051cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_initialize(pdrv);
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fb fead 	bl	8000f44 <SD_disk_initialize>
 80051ea:	4603      	mov	r3, r0
 80051ec:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	4603      	mov	r3, r0
 80051fe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_status(pdrv);
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	4618      	mov	r0, r3
 8005204:	f7fb ff8a 	bl	800111c <SD_disk_status>
 8005208:	4603      	mov	r3, r0
 800520a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8005224:	7bf8      	ldrb	r0, [r7, #15]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	f7fb ff8c 	bl	8001148 <SD_disk_read>
 8005230:	4603      	mov	r3, r0
 8005232:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4603      	mov	r3, r0
 800524a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800524c:	7bf8      	ldrb	r0, [r7, #15]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	f7fb ffe2 	bl	800121c <SD_disk_write>
 8005258:	4603      	mov	r3, r0
 800525a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	603a      	str	r2, [r7, #0]
 800526e:	71fb      	strb	r3, [r7, #7]
 8005270:	460b      	mov	r3, r1
 8005272:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	79b9      	ldrb	r1, [r7, #6]
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f7fc f852 	bl	8001324 <SD_disk_ioctl>
 8005280:	4603      	mov	r3, r0
 8005282:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	4a08      	ldr	r2, [pc, #32]	; (80052bc <disk_status+0x30>)
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	79fa      	ldrb	r2, [r7, #7]
 80052a4:	4905      	ldr	r1, [pc, #20]	; (80052bc <disk_status+0x30>)
 80052a6:	440a      	add	r2, r1
 80052a8:	7a12      	ldrb	r2, [r2, #8]
 80052aa:	4610      	mov	r0, r2
 80052ac:	4798      	blx	r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	200068a4 	.word	0x200068a4

080052c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	4a0d      	ldr	r2, [pc, #52]	; (8005308 <disk_initialize+0x48>)
 80052d2:	5cd3      	ldrb	r3, [r2, r3]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d111      	bne.n	80052fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	4a0b      	ldr	r2, [pc, #44]	; (8005308 <disk_initialize+0x48>)
 80052dc:	2101      	movs	r1, #1
 80052de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	4a09      	ldr	r2, [pc, #36]	; (8005308 <disk_initialize+0x48>)
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	79fa      	ldrb	r2, [r7, #7]
 80052ee:	4906      	ldr	r1, [pc, #24]	; (8005308 <disk_initialize+0x48>)
 80052f0:	440a      	add	r2, r1
 80052f2:	7a12      	ldrb	r2, [r2, #8]
 80052f4:	4610      	mov	r0, r2
 80052f6:	4798      	blx	r3
 80052f8:	4603      	mov	r3, r0
 80052fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	200068a4 	.word	0x200068a4

0800530c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4603      	mov	r3, r0
 800531a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <disk_read+0x3c>)
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	689c      	ldr	r4, [r3, #8]
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	4a07      	ldr	r2, [pc, #28]	; (8005348 <disk_read+0x3c>)
 800532c:	4413      	add	r3, r2
 800532e:	7a18      	ldrb	r0, [r3, #8]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	47a0      	blx	r4
 8005338:	4603      	mov	r3, r0
 800533a:	75fb      	strb	r3, [r7, #23]
  return res;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
}
 800533e:	4618      	mov	r0, r3
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	bd90      	pop	{r4, r7, pc}
 8005346:	bf00      	nop
 8005348:	200068a4 	.word	0x200068a4

0800534c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <disk_write+0x3c>)
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	68dc      	ldr	r4, [r3, #12]
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	4a07      	ldr	r2, [pc, #28]	; (8005388 <disk_write+0x3c>)
 800536c:	4413      	add	r3, r2
 800536e:	7a18      	ldrb	r0, [r3, #8]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	47a0      	blx	r4
 8005378:	4603      	mov	r3, r0
 800537a:	75fb      	strb	r3, [r7, #23]
  return res;
 800537c:	7dfb      	ldrb	r3, [r7, #23]
}
 800537e:	4618      	mov	r0, r3
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	bd90      	pop	{r4, r7, pc}
 8005386:	bf00      	nop
 8005388:	200068a4 	.word	0x200068a4

0800538c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	603a      	str	r2, [r7, #0]
 8005396:	71fb      	strb	r3, [r7, #7]
 8005398:	460b      	mov	r3, r1
 800539a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <disk_ioctl+0x38>)
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	79fa      	ldrb	r2, [r7, #7]
 80053aa:	4906      	ldr	r1, [pc, #24]	; (80053c4 <disk_ioctl+0x38>)
 80053ac:	440a      	add	r2, r1
 80053ae:	7a10      	ldrb	r0, [r2, #8]
 80053b0:	79b9      	ldrb	r1, [r7, #6]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	4798      	blx	r3
 80053b6:	4603      	mov	r3, r0
 80053b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	200068a4 	.word	0x200068a4

080053c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3301      	adds	r3, #1
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80053d8:	89fb      	ldrh	r3, [r7, #14]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	b21a      	sxth	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b21b      	sxth	r3, r3
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b21b      	sxth	r3, r3
 80053e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80053ea:	89fb      	ldrh	r3, [r7, #14]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3303      	adds	r3, #3
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	3202      	adds	r2, #2
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	3201      	adds	r2, #1
 800541e:	7812      	ldrb	r2, [r2, #0]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	7812      	ldrb	r2, [r2, #0]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005430:	68fb      	ldr	r3, [r7, #12]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	460b      	mov	r3, r1
 8005448:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	887a      	ldrh	r2, [r7, #2]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	887b      	ldrh	r3, [r7, #2]
 8005458:	0a1b      	lsrs	r3, r3, #8
 800545a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	607a      	str	r2, [r7, #4]
 8005462:	887a      	ldrh	r2, [r7, #2]
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	0a1b      	lsrs	r3, r3, #8
 800548e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	607a      	str	r2, [r7, #4]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	0a1b      	lsrs	r3, r3, #8
 80054a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	0a1b      	lsrs	r3, r3, #8
 80054b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	607a      	str	r2, [r7, #4]
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00d      	beq.n	8005502 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	1c53      	adds	r3, r2, #1
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1c59      	adds	r1, r3, #1
 80054f0:	6179      	str	r1, [r7, #20]
 80054f2:	7812      	ldrb	r2, [r2, #0]
 80054f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	607b      	str	r3, [r7, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f1      	bne.n	80054e6 <mem_cpy+0x1a>
	}
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800550e:	b480      	push	{r7}
 8005510:	b087      	sub	sp, #28
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	617a      	str	r2, [r7, #20]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3b01      	subs	r3, #1
 800552e:	607b      	str	r3, [r7, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f3      	bne.n	800551e <mem_set+0x10>
}
 8005536:	bf00      	nop
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	; 0x24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	61fa      	str	r2, [r7, #28]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	4619      	mov	r1, r3
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	61ba      	str	r2, [r7, #24]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	1acb      	subs	r3, r1, r3
 8005570:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3b01      	subs	r3, #1
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <mem_cmp+0x40>
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0eb      	beq.n	800555c <mem_cmp+0x18>

	return r;
 8005584:	697b      	ldr	r3, [r7, #20]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3724      	adds	r7, #36	; 0x24
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800559c:	e002      	b.n	80055a4 <chk_chr+0x12>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3301      	adds	r3, #1
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <chk_chr+0x26>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d1f2      	bne.n	800559e <chk_chr+0xc>
	return *str;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	781b      	ldrb	r3, [r3, #0]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e029      	b.n	8005630 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80055dc:	4a27      	ldr	r2, [pc, #156]	; (800567c <chk_lock+0xb4>)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	4413      	add	r3, r2
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01d      	beq.n	8005626 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80055ea:	4a24      	ldr	r2, [pc, #144]	; (800567c <chk_lock+0xb4>)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	4413      	add	r3, r2
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d116      	bne.n	800562a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80055fc:	4a1f      	ldr	r2, [pc, #124]	; (800567c <chk_lock+0xb4>)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	4413      	add	r3, r2
 8005604:	3304      	adds	r3, #4
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800560c:	429a      	cmp	r2, r3
 800560e:	d10c      	bne.n	800562a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005610:	4a1a      	ldr	r2, [pc, #104]	; (800567c <chk_lock+0xb4>)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	4413      	add	r3, r2
 8005618:	3308      	adds	r3, #8
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005620:	429a      	cmp	r2, r3
 8005622:	d102      	bne.n	800562a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005624:	e007      	b.n	8005636 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005626:	2301      	movs	r3, #1
 8005628:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3301      	adds	r3, #1
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d9d2      	bls.n	80055dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d109      	bne.n	8005650 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d102      	bne.n	8005648 <chk_lock+0x80>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d101      	bne.n	800564c <chk_lock+0x84>
 8005648:	2300      	movs	r3, #0
 800564a:	e010      	b.n	800566e <chk_lock+0xa6>
 800564c:	2312      	movs	r3, #18
 800564e:	e00e      	b.n	800566e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d108      	bne.n	8005668 <chk_lock+0xa0>
 8005656:	4a09      	ldr	r2, [pc, #36]	; (800567c <chk_lock+0xb4>)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	4413      	add	r3, r2
 800565e:	330c      	adds	r3, #12
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005666:	d101      	bne.n	800566c <chk_lock+0xa4>
 8005668:	2310      	movs	r3, #16
 800566a:	e000      	b.n	800566e <chk_lock+0xa6>
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20006684 	.word	0x20006684

08005680 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005686:	2300      	movs	r3, #0
 8005688:	607b      	str	r3, [r7, #4]
 800568a:	e002      	b.n	8005692 <enq_lock+0x12>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3301      	adds	r3, #1
 8005690:	607b      	str	r3, [r7, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d806      	bhi.n	80056a6 <enq_lock+0x26>
 8005698:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <enq_lock+0x40>)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	4413      	add	r3, r2
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f2      	bne.n	800568c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20006684 	.word	0x20006684

080056c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e01f      	b.n	8005714 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80056d4:	4a41      	ldr	r2, [pc, #260]	; (80057dc <inc_lock+0x118>)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	4413      	add	r3, r2
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d113      	bne.n	800570e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80056e6:	4a3d      	ldr	r2, [pc, #244]	; (80057dc <inc_lock+0x118>)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	4413      	add	r3, r2
 80056ee:	3304      	adds	r3, #4
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d109      	bne.n	800570e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80056fa:	4a38      	ldr	r2, [pc, #224]	; (80057dc <inc_lock+0x118>)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	4413      	add	r3, r2
 8005702:	3308      	adds	r3, #8
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800570a:	429a      	cmp	r2, r3
 800570c:	d006      	beq.n	800571c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d9dc      	bls.n	80056d4 <inc_lock+0x10>
 800571a:	e000      	b.n	800571e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800571c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d132      	bne.n	800578a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e002      	b.n	8005730 <inc_lock+0x6c>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3301      	adds	r3, #1
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d806      	bhi.n	8005744 <inc_lock+0x80>
 8005736:	4a29      	ldr	r2, [pc, #164]	; (80057dc <inc_lock+0x118>)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	4413      	add	r3, r2
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f2      	bne.n	800572a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d101      	bne.n	800574e <inc_lock+0x8a>
 800574a:	2300      	movs	r3, #0
 800574c:	e040      	b.n	80057d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4922      	ldr	r1, [pc, #136]	; (80057dc <inc_lock+0x118>)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	440b      	add	r3, r1
 800575a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	491e      	ldr	r1, [pc, #120]	; (80057dc <inc_lock+0x118>)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	440b      	add	r3, r1
 8005768:	3304      	adds	r3, #4
 800576a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	491a      	ldr	r1, [pc, #104]	; (80057dc <inc_lock+0x118>)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	440b      	add	r3, r1
 8005778:	3308      	adds	r3, #8
 800577a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800577c:	4a17      	ldr	r2, [pc, #92]	; (80057dc <inc_lock+0x118>)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	4413      	add	r3, r2
 8005784:	330c      	adds	r3, #12
 8005786:	2200      	movs	r2, #0
 8005788:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d009      	beq.n	80057a4 <inc_lock+0xe0>
 8005790:	4a12      	ldr	r2, [pc, #72]	; (80057dc <inc_lock+0x118>)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	4413      	add	r3, r2
 8005798:	330c      	adds	r3, #12
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <inc_lock+0xe0>
 80057a0:	2300      	movs	r3, #0
 80057a2:	e015      	b.n	80057d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d108      	bne.n	80057bc <inc_lock+0xf8>
 80057aa:	4a0c      	ldr	r2, [pc, #48]	; (80057dc <inc_lock+0x118>)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	4413      	add	r3, r2
 80057b2:	330c      	adds	r3, #12
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	3301      	adds	r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	e001      	b.n	80057c0 <inc_lock+0xfc>
 80057bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c0:	4906      	ldr	r1, [pc, #24]	; (80057dc <inc_lock+0x118>)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	440b      	add	r3, r1
 80057c8:	330c      	adds	r3, #12
 80057ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3301      	adds	r3, #1
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20006684 	.word	0x20006684

080057e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d825      	bhi.n	8005840 <dec_lock+0x60>
		n = Files[i].ctr;
 80057f4:	4a17      	ldr	r2, [pc, #92]	; (8005854 <dec_lock+0x74>)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	4413      	add	r3, r2
 80057fc:	330c      	adds	r3, #12
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005802:	89fb      	ldrh	r3, [r7, #14]
 8005804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005808:	d101      	bne.n	800580e <dec_lock+0x2e>
 800580a:	2300      	movs	r3, #0
 800580c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800580e:	89fb      	ldrh	r3, [r7, #14]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <dec_lock+0x3a>
 8005814:	89fb      	ldrh	r3, [r7, #14]
 8005816:	3b01      	subs	r3, #1
 8005818:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800581a:	4a0e      	ldr	r2, [pc, #56]	; (8005854 <dec_lock+0x74>)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	4413      	add	r3, r2
 8005822:	330c      	adds	r3, #12
 8005824:	89fa      	ldrh	r2, [r7, #14]
 8005826:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005828:	89fb      	ldrh	r3, [r7, #14]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <dec_lock+0x5a>
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <dec_lock+0x74>)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	4413      	add	r3, r2
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	737b      	strb	r3, [r7, #13]
 800583e:	e001      	b.n	8005844 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005840:	2302      	movs	r3, #2
 8005842:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005844:	7b7b      	ldrb	r3, [r7, #13]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20006684 	.word	0x20006684

08005858 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e010      	b.n	8005888 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005866:	4a0d      	ldr	r2, [pc, #52]	; (800589c <clear_lock+0x44>)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	4413      	add	r3, r2
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	429a      	cmp	r2, r3
 8005874:	d105      	bne.n	8005882 <clear_lock+0x2a>
 8005876:	4a09      	ldr	r2, [pc, #36]	; (800589c <clear_lock+0x44>)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	4413      	add	r3, r2
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3301      	adds	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d9eb      	bls.n	8005866 <clear_lock+0xe>
	}
}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20006684 	.word	0x20006684

080058a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	78db      	ldrb	r3, [r3, #3]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d034      	beq.n	800591e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	7858      	ldrb	r0, [r3, #1]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058c4:	2301      	movs	r3, #1
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	f7ff fd40 	bl	800534c <disk_write>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
 80058d6:	e022      	b.n	800591e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	1ad2      	subs	r2, r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d217      	bcs.n	800591e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	789b      	ldrb	r3, [r3, #2]
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	e010      	b.n	8005918 <sync_window+0x78>
					wsect += fs->fsize;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4413      	add	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	7858      	ldrb	r0, [r3, #1]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800590a:	2301      	movs	r3, #1
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	f7ff fd1d 	bl	800534c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	3b01      	subs	r3, #1
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d8eb      	bhi.n	80058f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d01b      	beq.n	8005978 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff ffad 	bl	80058a0 <sync_window>
 8005946:	4603      	mov	r3, r0
 8005948:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d113      	bne.n	8005978 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	7858      	ldrb	r0, [r3, #1]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800595a:	2301      	movs	r3, #1
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	f7ff fcd5 	bl	800530c <disk_read>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d004      	beq.n	8005972 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005968:	f04f 33ff 	mov.w	r3, #4294967295
 800596c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800596e:	2301      	movs	r3, #1
 8005970:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff ff87 	bl	80058a0 <sync_window>
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d159      	bne.n	8005a50 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d149      	bne.n	8005a38 <sync_fs+0xb4>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	791b      	ldrb	r3, [r3, #4]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d145      	bne.n	8005a38 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	899b      	ldrh	r3, [r3, #12]
 80059b6:	461a      	mov	r2, r3
 80059b8:	2100      	movs	r1, #0
 80059ba:	f7ff fda8 	bl	800550e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3338      	adds	r3, #56	; 0x38
 80059c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80059c6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff fd37 	bl	800543e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3338      	adds	r3, #56	; 0x38
 80059d4:	4921      	ldr	r1, [pc, #132]	; (8005a5c <sync_fs+0xd8>)
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fd4c 	bl	8005474 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3338      	adds	r3, #56	; 0x38
 80059e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80059e4:	491e      	ldr	r1, [pc, #120]	; (8005a60 <sync_fs+0xdc>)
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff fd44 	bl	8005474 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3338      	adds	r3, #56	; 0x38
 80059f0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f7ff fd3a 	bl	8005474 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3338      	adds	r3, #56	; 0x38
 8005a04:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f7ff fd30 	bl	8005474 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	7858      	ldrb	r0, [r3, #1]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f7ff fc8d 	bl	800534c <disk_write>
			fs->fsi_flag = 0;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff fca3 	bl	800538c <disk_ioctl>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <sync_fs+0xcc>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	41615252 	.word	0x41615252
 8005a60:	61417272 	.word	0x61417272

08005a64 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	3b02      	subs	r3, #2
 8005a72:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	3b02      	subs	r3, #2
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d301      	bcc.n	8005a84 <clust2sect+0x20>
 8005a80:	2300      	movs	r3, #0
 8005a82:	e008      	b.n	8005a96 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	895b      	ldrh	r3, [r3, #10]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	fb03 f202 	mul.w	r2, r3, r2
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a94:	4413      	add	r3, r2
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d904      	bls.n	8005ac2 <get_fat+0x20>
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d302      	bcc.n	8005ac8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	e0bb      	b.n	8005c40 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8005acc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	f000 8083 	beq.w	8005bde <get_fat+0x13c>
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	f300 80a7 	bgt.w	8005c2c <get_fat+0x18a>
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d002      	beq.n	8005ae8 <get_fat+0x46>
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d056      	beq.n	8005b94 <get_fat+0xf2>
 8005ae6:	e0a1      	b.n	8005c2c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	085b      	lsrs	r3, r3, #1
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	899b      	ldrh	r3, [r3, #12]
 8005afe:	4619      	mov	r1, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b06:	4413      	add	r3, r2
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6938      	ldr	r0, [r7, #16]
 8005b0c:	f7ff ff0c 	bl	8005928 <move_window>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f040 808d 	bne.w	8005c32 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	60fa      	str	r2, [r7, #12]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	8992      	ldrh	r2, [r2, #12]
 8005b22:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b26:	fb01 f202 	mul.w	r2, r1, r2
 8005b2a:	1a9b      	subs	r3, r3, r2
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b34:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	899b      	ldrh	r3, [r3, #12]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b46:	4413      	add	r3, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6938      	ldr	r0, [r7, #16]
 8005b4c:	f7ff feec 	bl	8005928 <move_window>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d16f      	bne.n	8005c36 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	899b      	ldrh	r3, [r3, #12]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b62:	fb01 f202 	mul.w	r2, r1, r2
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	461a      	mov	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <get_fat+0xe8>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	091b      	lsrs	r3, r3, #4
 8005b88:	e002      	b.n	8005b90 <get_fat+0xee>
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b90:	617b      	str	r3, [r7, #20]
			break;
 8005b92:	e055      	b.n	8005c40 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	899b      	ldrh	r3, [r3, #12]
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ba8:	4413      	add	r3, r2
 8005baa:	4619      	mov	r1, r3
 8005bac:	6938      	ldr	r0, [r7, #16]
 8005bae:	f7ff febb 	bl	8005928 <move_window>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d140      	bne.n	8005c3a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	8992      	ldrh	r2, [r2, #12]
 8005bc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bca:	fb00 f202 	mul.w	r2, r0, r2
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff fbf8 	bl	80053c8 <ld_word>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	617b      	str	r3, [r7, #20]
			break;
 8005bdc:	e030      	b.n	8005c40 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	899b      	ldrh	r3, [r3, #12]
 8005be6:	089b      	lsrs	r3, r3, #2
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	4619      	mov	r1, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bf2:	4413      	add	r3, r2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6938      	ldr	r0, [r7, #16]
 8005bf8:	f7ff fe96 	bl	8005928 <move_window>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d11d      	bne.n	8005c3e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	8992      	ldrh	r2, [r2, #12]
 8005c10:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c14:	fb00 f202 	mul.w	r2, r0, r2
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff fbeb 	bl	80053f8 <ld_dword>
 8005c22:	4603      	mov	r3, r0
 8005c24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c28:	617b      	str	r3, [r7, #20]
			break;
 8005c2a:	e009      	b.n	8005c40 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	e006      	b.n	8005c40 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c32:	bf00      	nop
 8005c34:	e004      	b.n	8005c40 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c36:	bf00      	nop
 8005c38:	e002      	b.n	8005c40 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c3a:	bf00      	nop
 8005c3c:	e000      	b.n	8005c40 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c3e:	bf00      	nop
		}
	}

	return val;
 8005c40:	697b      	ldr	r3, [r7, #20]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005c4a:	b590      	push	{r4, r7, lr}
 8005c4c:	b089      	sub	sp, #36	; 0x24
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005c56:	2302      	movs	r3, #2
 8005c58:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	f240 8102 	bls.w	8005e66 <put_fat+0x21c>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	f080 80fc 	bcs.w	8005e66 <put_fat+0x21c>
		switch (fs->fs_type) {
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	f000 80b6 	beq.w	8005de4 <put_fat+0x19a>
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	f300 80fd 	bgt.w	8005e78 <put_fat+0x22e>
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d003      	beq.n	8005c8a <put_fat+0x40>
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	f000 8083 	beq.w	8005d8e <put_fat+0x144>
 8005c88:	e0f6      	b.n	8005e78 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4413      	add	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	899b      	ldrh	r3, [r3, #12]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ca8:	4413      	add	r3, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f7ff fe3b 	bl	8005928 <move_window>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005cb6:	7ffb      	ldrb	r3, [r7, #31]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f040 80d6 	bne.w	8005e6a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	61ba      	str	r2, [r7, #24]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	8992      	ldrh	r2, [r2, #12]
 8005cce:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cd2:	fb00 f202 	mul.w	r2, r0, r2
 8005cd6:	1a9b      	subs	r3, r3, r2
 8005cd8:	440b      	add	r3, r1
 8005cda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00d      	beq.n	8005d02 <put_fat+0xb8>
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	b25b      	sxtb	r3, r3
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	b25a      	sxtb	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	b25b      	sxtb	r3, r3
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	b25b      	sxtb	r3, r3
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	e001      	b.n	8005d06 <put_fat+0xbc>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	899b      	ldrh	r3, [r3, #12]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d20:	4413      	add	r3, r2
 8005d22:	4619      	mov	r1, r3
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff fdff 	bl	8005928 <move_window>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d2e:	7ffb      	ldrb	r3, [r7, #31]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 809c 	bne.w	8005e6e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	899b      	ldrh	r3, [r3, #12]
 8005d40:	461a      	mov	r2, r3
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d48:	fb00 f202 	mul.w	r2, r0, r2
 8005d4c:	1a9b      	subs	r3, r3, r2
 8005d4e:	440b      	add	r3, r1
 8005d50:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <put_fat+0x11a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	091b      	lsrs	r3, r3, #4
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	e00e      	b.n	8005d82 <put_fat+0x138>
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	b25b      	sxtb	r3, r3
 8005d6a:	f023 030f 	bic.w	r3, r3, #15
 8005d6e:	b25a      	sxtb	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	0a1b      	lsrs	r3, r3, #8
 8005d74:	b25b      	sxtb	r3, r3
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	b25b      	sxtb	r3, r3
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	b25b      	sxtb	r3, r3
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	70da      	strb	r2, [r3, #3]
			break;
 8005d8c:	e074      	b.n	8005e78 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	899b      	ldrh	r3, [r3, #12]
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005da2:	4413      	add	r3, r2
 8005da4:	4619      	mov	r1, r3
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff fdbe 	bl	8005928 <move_window>
 8005dac:	4603      	mov	r3, r0
 8005dae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005db0:	7ffb      	ldrb	r3, [r7, #31]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d15d      	bne.n	8005e72 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	8992      	ldrh	r2, [r2, #12]
 8005dc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dc8:	fb00 f202 	mul.w	r2, r0, r2
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	440b      	add	r3, r1
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	b292      	uxth	r2, r2
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fb31 	bl	800543e <st_word>
			fs->wflag = 1;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	70da      	strb	r2, [r3, #3]
			break;
 8005de2:	e049      	b.n	8005e78 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	899b      	ldrh	r3, [r3, #12]
 8005dec:	089b      	lsrs	r3, r3, #2
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	4619      	mov	r1, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005df8:	4413      	add	r3, r2
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff fd93 	bl	8005928 <move_window>
 8005e02:	4603      	mov	r3, r0
 8005e04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e06:	7ffb      	ldrb	r3, [r7, #31]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d134      	bne.n	8005e76 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	8992      	ldrh	r2, [r2, #12]
 8005e20:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e24:	fb00 f202 	mul.w	r2, r0, r2
 8005e28:	1a9b      	subs	r3, r3, r2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff fae3 	bl	80053f8 <ld_dword>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005e38:	4323      	orrs	r3, r4
 8005e3a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	8992      	ldrh	r2, [r2, #12]
 8005e4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e4e:	fb00 f202 	mul.w	r2, r0, r2
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	440b      	add	r3, r1
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fb0b 	bl	8005474 <st_dword>
			fs->wflag = 1;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	70da      	strb	r2, [r3, #3]
			break;
 8005e64:	e008      	b.n	8005e78 <put_fat+0x22e>
		}
	}
 8005e66:	bf00      	nop
 8005e68:	e006      	b.n	8005e78 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005e6a:	bf00      	nop
 8005e6c:	e004      	b.n	8005e78 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005e6e:	bf00      	nop
 8005e70:	e002      	b.n	8005e78 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005e76:	bf00      	nop
	return res;
 8005e78:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3724      	adds	r7, #36	; 0x24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd90      	pop	{r4, r7, pc}

08005e82 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b088      	sub	sp, #32
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d904      	bls.n	8005ea8 <remove_chain+0x26>
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d301      	bcc.n	8005eac <remove_chain+0x2a>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e04b      	b.n	8005f44 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00c      	beq.n	8005ecc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	69b8      	ldr	r0, [r7, #24]
 8005eba:	f7ff fec6 	bl	8005c4a <put_fat>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005ec2:	7ffb      	ldrb	r3, [r7, #31]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <remove_chain+0x4a>
 8005ec8:	7ffb      	ldrb	r3, [r7, #31]
 8005eca:	e03b      	b.n	8005f44 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005ecc:	68b9      	ldr	r1, [r7, #8]
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7ff fde7 	bl	8005aa2 <get_fat>
 8005ed4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d031      	beq.n	8005f40 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <remove_chain+0x64>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	e02e      	b.n	8005f44 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d101      	bne.n	8005ef2 <remove_chain+0x70>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e028      	b.n	8005f44 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	69b8      	ldr	r0, [r7, #24]
 8005ef8:	f7ff fea7 	bl	8005c4a <put_fat>
 8005efc:	4603      	mov	r3, r0
 8005efe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005f00:	7ffb      	ldrb	r3, [r7, #31]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <remove_chain+0x88>
 8005f06:	7ffb      	ldrb	r3, [r7, #31]
 8005f08:	e01c      	b.n	8005f44 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	3b02      	subs	r3, #2
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d20b      	bcs.n	8005f30 <remove_chain+0xae>
			fs->free_clst++;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	791b      	ldrb	r3, [r3, #4]
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d3c6      	bcc.n	8005ecc <remove_chain+0x4a>
 8005f3e:	e000      	b.n	8005f42 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005f40:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10d      	bne.n	8005f7e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d004      	beq.n	8005f78 <create_chain+0x2c>
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d31b      	bcc.n	8005fb0 <create_chain+0x64>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	61bb      	str	r3, [r7, #24]
 8005f7c:	e018      	b.n	8005fb0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff fd8e 	bl	8005aa2 <get_fat>
 8005f86:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d801      	bhi.n	8005f92 <create_chain+0x46>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e070      	b.n	8006074 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d101      	bne.n	8005f9e <create_chain+0x52>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	e06a      	b.n	8006074 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d201      	bcs.n	8005fac <create_chain+0x60>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	e063      	b.n	8006074 <create_chain+0x128>
		scl = clst;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d307      	bcc.n	8005fd4 <create_chain+0x88>
				ncl = 2;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005fc8:	69fa      	ldr	r2, [r7, #28]
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d901      	bls.n	8005fd4 <create_chain+0x88>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e04f      	b.n	8006074 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005fd4:	69f9      	ldr	r1, [r7, #28]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fd63 	bl	8005aa2 <get_fat>
 8005fdc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00e      	beq.n	8006002 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d003      	beq.n	8005ff2 <create_chain+0xa6>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d101      	bne.n	8005ff6 <create_chain+0xaa>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	e03e      	b.n	8006074 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d1da      	bne.n	8005fb4 <create_chain+0x68>
 8005ffe:	2300      	movs	r3, #0
 8006000:	e038      	b.n	8006074 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006002:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006004:	f04f 32ff 	mov.w	r2, #4294967295
 8006008:	69f9      	ldr	r1, [r7, #28]
 800600a:	6938      	ldr	r0, [r7, #16]
 800600c:	f7ff fe1d 	bl	8005c4a <put_fat>
 8006010:	4603      	mov	r3, r0
 8006012:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <create_chain+0xe2>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d006      	beq.n	800602e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6938      	ldr	r0, [r7, #16]
 8006026:	f7ff fe10 	bl	8005c4a <put_fat>
 800602a:	4603      	mov	r3, r0
 800602c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d116      	bne.n	8006062 <create_chain+0x116>
		fs->last_clst = ncl;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	699a      	ldr	r2, [r3, #24]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	3b02      	subs	r3, #2
 8006044:	429a      	cmp	r2, r3
 8006046:	d804      	bhi.n	8006052 <create_chain+0x106>
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	1e5a      	subs	r2, r3, #1
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	791b      	ldrb	r3, [r3, #4]
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	b2da      	uxtb	r2, r3
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	711a      	strb	r2, [r3, #4]
 8006060:	e007      	b.n	8006072 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006062:	7dfb      	ldrb	r3, [r7, #23]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d102      	bne.n	800606e <create_chain+0x122>
 8006068:	f04f 33ff 	mov.w	r3, #4294967295
 800606c:	e000      	b.n	8006070 <create_chain+0x124>
 800606e:	2301      	movs	r3, #1
 8006070:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006072:	69fb      	ldr	r3, [r7, #28]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3720      	adds	r7, #32
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	3304      	adds	r3, #4
 8006092:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	899b      	ldrh	r3, [r3, #12]
 8006098:	461a      	mov	r2, r3
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	fbb3 f3f2 	udiv	r3, r3, r2
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	8952      	ldrh	r2, [r2, #10]
 80060a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1d1a      	adds	r2, r3, #4
 80060ae:	613a      	str	r2, [r7, #16]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <clmt_clust+0x42>
 80060ba:	2300      	movs	r3, #0
 80060bc:	e010      	b.n	80060e0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d307      	bcc.n	80060d6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	3304      	adds	r3, #4
 80060d2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80060d4:	e7e9      	b.n	80060aa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80060d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	4413      	add	r3, r2
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006102:	d204      	bcs.n	800610e <dir_sdi+0x22>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	f003 031f 	and.w	r3, r3, #31
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <dir_sdi+0x26>
		return FR_INT_ERR;
 800610e:	2302      	movs	r3, #2
 8006110:	e071      	b.n	80061f6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <dir_sdi+0x46>
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d902      	bls.n	8006132 <dir_sdi+0x46>
		clst = fs->dirbase;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10c      	bne.n	8006152 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	8912      	ldrh	r2, [r2, #8]
 8006140:	4293      	cmp	r3, r2
 8006142:	d301      	bcc.n	8006148 <dir_sdi+0x5c>
 8006144:	2302      	movs	r3, #2
 8006146:	e056      	b.n	80061f6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	61da      	str	r2, [r3, #28]
 8006150:	e02d      	b.n	80061ae <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	895b      	ldrh	r3, [r3, #10]
 8006156:	461a      	mov	r2, r3
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	899b      	ldrh	r3, [r3, #12]
 800615c:	fb02 f303 	mul.w	r3, r2, r3
 8006160:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006162:	e019      	b.n	8006198 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6979      	ldr	r1, [r7, #20]
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff fc9a 	bl	8005aa2 <get_fat>
 800616e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006176:	d101      	bne.n	800617c <dir_sdi+0x90>
 8006178:	2301      	movs	r3, #1
 800617a:	e03c      	b.n	80061f6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d904      	bls.n	800618c <dir_sdi+0xa0>
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	429a      	cmp	r2, r3
 800618a:	d301      	bcc.n	8006190 <dir_sdi+0xa4>
 800618c:	2302      	movs	r3, #2
 800618e:	e032      	b.n	80061f6 <dir_sdi+0x10a>
			ofs -= csz;
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	429a      	cmp	r2, r3
 800619e:	d2e1      	bcs.n	8006164 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80061a0:	6979      	ldr	r1, [r7, #20]
 80061a2:	6938      	ldr	r0, [r7, #16]
 80061a4:	f7ff fc5e 	bl	8005a64 <clust2sect>
 80061a8:	4602      	mov	r2, r0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <dir_sdi+0xd4>
 80061bc:	2302      	movs	r3, #2
 80061be:	e01a      	b.n	80061f6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	899b      	ldrh	r3, [r3, #12]
 80061c8:	4619      	mov	r1, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80061d0:	441a      	add	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	899b      	ldrh	r3, [r3, #12]
 80061e0:	461a      	mov	r2, r3
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80061e8:	fb00 f202 	mul.w	r2, r0, r2
 80061ec:	1a9b      	subs	r3, r3, r2
 80061ee:	18ca      	adds	r2, r1, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b086      	sub	sp, #24
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	3320      	adds	r3, #32
 8006214:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <dir_next+0x28>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006224:	d301      	bcc.n	800622a <dir_next+0x2c>
 8006226:	2304      	movs	r3, #4
 8006228:	e0bb      	b.n	80063a2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	899b      	ldrh	r3, [r3, #12]
 800622e:	461a      	mov	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	fbb3 f1f2 	udiv	r1, r3, r2
 8006236:	fb01 f202 	mul.w	r2, r1, r2
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	f040 809d 	bne.w	800637c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10b      	bne.n	800626c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	8912      	ldrh	r2, [r2, #8]
 800625c:	4293      	cmp	r3, r2
 800625e:	f0c0 808d 	bcc.w	800637c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	61da      	str	r2, [r3, #28]
 8006268:	2304      	movs	r3, #4
 800626a:	e09a      	b.n	80063a2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	899b      	ldrh	r3, [r3, #12]
 8006270:	461a      	mov	r2, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	fbb3 f3f2 	udiv	r3, r3, r2
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	8952      	ldrh	r2, [r2, #10]
 800627c:	3a01      	subs	r2, #1
 800627e:	4013      	ands	r3, r2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d17b      	bne.n	800637c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	4619      	mov	r1, r3
 800628c:	4610      	mov	r0, r2
 800628e:	f7ff fc08 	bl	8005aa2 <get_fat>
 8006292:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d801      	bhi.n	800629e <dir_next+0xa0>
 800629a:	2302      	movs	r3, #2
 800629c:	e081      	b.n	80063a2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a4:	d101      	bne.n	80062aa <dir_next+0xac>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e07b      	b.n	80063a2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d359      	bcc.n	8006368 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d104      	bne.n	80062c4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	61da      	str	r2, [r3, #28]
 80062c0:	2304      	movs	r3, #4
 80062c2:	e06e      	b.n	80063a2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	4619      	mov	r1, r3
 80062cc:	4610      	mov	r0, r2
 80062ce:	f7ff fe3d 	bl	8005f4c <create_chain>
 80062d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <dir_next+0xe0>
 80062da:	2307      	movs	r3, #7
 80062dc:	e061      	b.n	80063a2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <dir_next+0xea>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e05c      	b.n	80063a2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ee:	d101      	bne.n	80062f4 <dir_next+0xf6>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e056      	b.n	80063a2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff fad3 	bl	80058a0 <sync_window>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <dir_next+0x106>
 8006300:	2301      	movs	r3, #1
 8006302:	e04e      	b.n	80063a2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	899b      	ldrh	r3, [r3, #12]
 800630e:	461a      	mov	r2, r3
 8006310:	2100      	movs	r1, #0
 8006312:	f7ff f8fc 	bl	800550e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006316:	2300      	movs	r3, #0
 8006318:	613b      	str	r3, [r7, #16]
 800631a:	6979      	ldr	r1, [r7, #20]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff fba1 	bl	8005a64 <clust2sect>
 8006322:	4602      	mov	r2, r0
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	635a      	str	r2, [r3, #52]	; 0x34
 8006328:	e012      	b.n	8006350 <dir_next+0x152>
						fs->wflag = 1;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7ff fab5 	bl	80058a0 <sync_window>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <dir_next+0x142>
 800633c:	2301      	movs	r3, #1
 800633e:	e030      	b.n	80063a2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	3301      	adds	r3, #1
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	635a      	str	r2, [r3, #52]	; 0x34
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	895b      	ldrh	r3, [r3, #10]
 8006354:	461a      	mov	r2, r3
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4293      	cmp	r3, r2
 800635a:	d3e6      	bcc.n	800632a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad2      	subs	r2, r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800636e:	6979      	ldr	r1, [r7, #20]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff fb77 	bl	8005a64 <clust2sect>
 8006376:	4602      	mov	r2, r0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	899b      	ldrh	r3, [r3, #12]
 800638c:	461a      	mov	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	fbb3 f0f2 	udiv	r0, r3, r2
 8006394:	fb00 f202 	mul.w	r2, r0, r2
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	18ca      	adds	r2, r1, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b086      	sub	sp, #24
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80063ba:	2100      	movs	r1, #0
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff fe95 	bl	80060ec <dir_sdi>
 80063c2:	4603      	mov	r3, r0
 80063c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d12b      	bne.n	8006424 <dir_alloc+0x7a>
		n = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	4619      	mov	r1, r3
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f7ff faa6 	bl	8005928 <move_window>
 80063dc:	4603      	mov	r3, r0
 80063de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d11d      	bne.n	8006422 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2be5      	cmp	r3, #229	; 0xe5
 80063ee:	d004      	beq.n	80063fa <dir_alloc+0x50>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d107      	bne.n	800640a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	3301      	adds	r3, #1
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d102      	bne.n	800640e <dir_alloc+0x64>
 8006408:	e00c      	b.n	8006424 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800640a:	2300      	movs	r3, #0
 800640c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800640e:	2101      	movs	r1, #1
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff fef4 	bl	80061fe <dir_next>
 8006416:	4603      	mov	r3, r0
 8006418:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0d7      	beq.n	80063d0 <dir_alloc+0x26>
 8006420:	e000      	b.n	8006424 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006422:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	2b04      	cmp	r3, #4
 8006428:	d101      	bne.n	800642e <dir_alloc+0x84>
 800642a:	2307      	movs	r3, #7
 800642c:	75fb      	strb	r3, [r7, #23]
	return res;
 800642e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	331a      	adds	r3, #26
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe ffbe 	bl	80053c8 <ld_word>
 800644c:	4603      	mov	r3, r0
 800644e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b03      	cmp	r3, #3
 8006456:	d109      	bne.n	800646c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	3314      	adds	r3, #20
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe ffb3 	bl	80053c8 <ld_word>
 8006462:	4603      	mov	r3, r0
 8006464:	041b      	lsls	r3, r3, #16
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800646c:	68fb      	ldr	r3, [r7, #12]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	331a      	adds	r3, #26
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	b292      	uxth	r2, r2
 800648a:	4611      	mov	r1, r2
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe ffd6 	bl	800543e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b03      	cmp	r3, #3
 8006498:	d109      	bne.n	80064ae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f103 0214 	add.w	r2, r3, #20
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	0c1b      	lsrs	r3, r3, #16
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7fe ffc8 	bl	800543e <st_word>
	}
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80064b8:	b590      	push	{r4, r7, lr}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	331a      	adds	r3, #26
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe ff7e 	bl	80053c8 <ld_word>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <cmp_lfn+0x1e>
 80064d2:	2300      	movs	r3, #0
 80064d4:	e059      	b.n	800658a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064de:	1e5a      	subs	r2, r3, #1
 80064e0:	4613      	mov	r3, r2
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80064ec:	2301      	movs	r3, #1
 80064ee:	81fb      	strh	r3, [r7, #14]
 80064f0:	2300      	movs	r3, #0
 80064f2:	613b      	str	r3, [r7, #16]
 80064f4:	e033      	b.n	800655e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80064f6:	4a27      	ldr	r2, [pc, #156]	; (8006594 <cmp_lfn+0xdc>)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	4413      	add	r3, r2
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	4413      	add	r3, r2
 8006504:	4618      	mov	r0, r3
 8006506:	f7fe ff5f 	bl	80053c8 <ld_word>
 800650a:	4603      	mov	r3, r0
 800650c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800650e:	89fb      	ldrh	r3, [r7, #14]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01a      	beq.n	800654a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2bfe      	cmp	r3, #254	; 0xfe
 8006518:	d812      	bhi.n	8006540 <cmp_lfn+0x88>
 800651a:	89bb      	ldrh	r3, [r7, #12]
 800651c:	4618      	mov	r0, r3
 800651e:	f002 f861 	bl	80085e4 <ff_wtoupper>
 8006522:	4603      	mov	r3, r0
 8006524:	461c      	mov	r4, r3
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	617a      	str	r2, [r7, #20]
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4413      	add	r3, r2
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f002 f855 	bl	80085e4 <ff_wtoupper>
 800653a:	4603      	mov	r3, r0
 800653c:	429c      	cmp	r4, r3
 800653e:	d001      	beq.n	8006544 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006540:	2300      	movs	r3, #0
 8006542:	e022      	b.n	800658a <cmp_lfn+0xd2>
			}
			wc = uc;
 8006544:	89bb      	ldrh	r3, [r7, #12]
 8006546:	81fb      	strh	r3, [r7, #14]
 8006548:	e006      	b.n	8006558 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800654a:	89bb      	ldrh	r3, [r7, #12]
 800654c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006550:	4293      	cmp	r3, r2
 8006552:	d001      	beq.n	8006558 <cmp_lfn+0xa0>
 8006554:	2300      	movs	r3, #0
 8006556:	e018      	b.n	800658a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	3301      	adds	r3, #1
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b0c      	cmp	r3, #12
 8006562:	d9c8      	bls.n	80064f6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <cmp_lfn+0xd0>
 8006570:	89fb      	ldrh	r3, [r7, #14]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d008      	beq.n	8006588 <cmp_lfn+0xd0>
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <cmp_lfn+0xd0>
 8006584:	2300      	movs	r3, #0
 8006586:	e000      	b.n	800658a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006588:	2301      	movs	r3, #1
}
 800658a:	4618      	mov	r0, r3
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	bd90      	pop	{r4, r7, pc}
 8006592:	bf00      	nop
 8006594:	08009224 	.word	0x08009224

08006598 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4611      	mov	r1, r2
 80065a4:	461a      	mov	r2, r3
 80065a6:	460b      	mov	r3, r1
 80065a8:	71fb      	strb	r3, [r7, #7]
 80065aa:	4613      	mov	r3, r2
 80065ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	330d      	adds	r3, #13
 80065b2:	79ba      	ldrb	r2, [r7, #6]
 80065b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	330b      	adds	r3, #11
 80065ba:	220f      	movs	r2, #15
 80065bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	330c      	adds	r3, #12
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	331a      	adds	r3, #26
 80065ca:	2100      	movs	r1, #0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe ff36 	bl	800543e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	1e5a      	subs	r2, r3, #1
 80065d6:	4613      	mov	r3, r2
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	82fb      	strh	r3, [r7, #22]
 80065e6:	2300      	movs	r3, #0
 80065e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80065ea:	8afb      	ldrh	r3, [r7, #22]
 80065ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d007      	beq.n	8006604 <put_lfn+0x6c>
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	61fa      	str	r2, [r7, #28]
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006604:	4a17      	ldr	r2, [pc, #92]	; (8006664 <put_lfn+0xcc>)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	4413      	add	r3, r2
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	4413      	add	r3, r2
 8006612:	8afa      	ldrh	r2, [r7, #22]
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe ff11 	bl	800543e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800661c:	8afb      	ldrh	r3, [r7, #22]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d102      	bne.n	8006628 <put_lfn+0x90>
 8006622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006626:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	3301      	adds	r3, #1
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	2b0c      	cmp	r3, #12
 8006632:	d9da      	bls.n	80065ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006634:	8afb      	ldrh	r3, [r7, #22]
 8006636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800663a:	4293      	cmp	r3, r2
 800663c:	d006      	beq.n	800664c <put_lfn+0xb4>
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d103      	bne.n	8006654 <put_lfn+0xbc>
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006652:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	79fa      	ldrb	r2, [r7, #7]
 8006658:	701a      	strb	r2, [r3, #0]
}
 800665a:	bf00      	nop
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	08009224 	.word	0x08009224

08006668 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08c      	sub	sp, #48	; 0x30
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006676:	220b      	movs	r2, #11
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7fe ff26 	bl	80054cc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b05      	cmp	r3, #5
 8006684:	d92b      	bls.n	80066de <gen_numname+0x76>
		sr = seq;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800668a:	e022      	b.n	80066d2 <gen_numname+0x6a>
			wc = *lfn++;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	1c9a      	adds	r2, r3, #2
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006696:	2300      	movs	r3, #0
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
 800669a:	e017      	b.n	80066cc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	005a      	lsls	r2, r3, #1
 80066a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	4413      	add	r3, r2
 80066a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80066aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066ac:	085b      	lsrs	r3, r3, #1
 80066ae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <gen_numname+0x5e>
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80066c0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80066c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	3301      	adds	r3, #1
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	2b0f      	cmp	r3, #15
 80066d0:	d9e4      	bls.n	800669c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1d8      	bne.n	800668c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80066de:	2307      	movs	r3, #7
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	3330      	adds	r3, #48	; 0x30
 80066ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80066f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066f6:	2b39      	cmp	r3, #57	; 0x39
 80066f8:	d904      	bls.n	8006704 <gen_numname+0x9c>
 80066fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066fe:	3307      	adds	r3, #7
 8006700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	1e5a      	subs	r2, r3, #1
 8006708:	62ba      	str	r2, [r7, #40]	; 0x28
 800670a:	3330      	adds	r3, #48	; 0x30
 800670c:	443b      	add	r3, r7
 800670e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006712:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	091b      	lsrs	r3, r3, #4
 800671a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1df      	bne.n	80066e2 <gen_numname+0x7a>
	ns[i] = '~';
 8006722:	f107 0214 	add.w	r2, r7, #20
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	4413      	add	r3, r2
 800672a:	227e      	movs	r2, #126	; 0x7e
 800672c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800672e:	2300      	movs	r3, #0
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
 8006732:	e002      	b.n	800673a <gen_numname+0xd2>
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	3301      	adds	r3, #1
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
 800673a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	429a      	cmp	r2, r3
 8006740:	d205      	bcs.n	800674e <gen_numname+0xe6>
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	4413      	add	r3, r2
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b20      	cmp	r3, #32
 800674c:	d1f2      	bne.n	8006734 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	2b07      	cmp	r3, #7
 8006752:	d807      	bhi.n	8006764 <gen_numname+0xfc>
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	62ba      	str	r2, [r7, #40]	; 0x28
 800675a:	3330      	adds	r3, #48	; 0x30
 800675c:	443b      	add	r3, r7
 800675e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006762:	e000      	b.n	8006766 <gen_numname+0xfe>
 8006764:	2120      	movs	r1, #32
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	627a      	str	r2, [r7, #36]	; 0x24
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	460a      	mov	r2, r1
 8006772:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	2b07      	cmp	r3, #7
 8006778:	d9e9      	bls.n	800674e <gen_numname+0xe6>
}
 800677a:	bf00      	nop
 800677c:	bf00      	nop
 800677e:	3730      	adds	r7, #48	; 0x30
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006790:	230b      	movs	r3, #11
 8006792:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	b2da      	uxtb	r2, r3
 8006798:	0852      	lsrs	r2, r2, #1
 800679a:	01db      	lsls	r3, r3, #7
 800679c:	4313      	orrs	r3, r2
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	1c59      	adds	r1, r3, #1
 80067a4:	6079      	str	r1, [r7, #4]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	4413      	add	r3, r2
 80067aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	60bb      	str	r3, [r7, #8]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1ed      	bne.n	8006794 <sum_sfn+0x10>
	return sum;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b086      	sub	sp, #24
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80067d4:	2100      	movs	r1, #0
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff fc88 	bl	80060ec <dir_sdi>
 80067dc:	4603      	mov	r3, r0
 80067de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <dir_find+0x24>
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	e0a9      	b.n	800693e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80067ea:	23ff      	movs	r3, #255	; 0xff
 80067ec:	753b      	strb	r3, [r7, #20]
 80067ee:	7d3b      	ldrb	r3, [r7, #20]
 80067f0:	757b      	strb	r3, [r7, #21]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f04f 32ff 	mov.w	r2, #4294967295
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	4619      	mov	r1, r3
 8006800:	6938      	ldr	r0, [r7, #16]
 8006802:	f7ff f891 	bl	8005928 <move_window>
 8006806:	4603      	mov	r3, r0
 8006808:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	2b00      	cmp	r3, #0
 800680e:	f040 8090 	bne.w	8006932 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800681a:	7dbb      	ldrb	r3, [r7, #22]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d102      	bne.n	8006826 <dir_find+0x60>
 8006820:	2304      	movs	r3, #4
 8006822:	75fb      	strb	r3, [r7, #23]
 8006824:	e08a      	b.n	800693c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	330b      	adds	r3, #11
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006832:	73fb      	strb	r3, [r7, #15]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	7bfa      	ldrb	r2, [r7, #15]
 8006838:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800683a:	7dbb      	ldrb	r3, [r7, #22]
 800683c:	2be5      	cmp	r3, #229	; 0xe5
 800683e:	d007      	beq.n	8006850 <dir_find+0x8a>
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	f003 0308 	and.w	r3, r3, #8
 8006846:	2b00      	cmp	r3, #0
 8006848:	d009      	beq.n	800685e <dir_find+0x98>
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	2b0f      	cmp	r3, #15
 800684e:	d006      	beq.n	800685e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006850:	23ff      	movs	r3, #255	; 0xff
 8006852:	757b      	strb	r3, [r7, #21]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f04f 32ff 	mov.w	r2, #4294967295
 800685a:	631a      	str	r2, [r3, #48]	; 0x30
 800685c:	e05e      	b.n	800691c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	2b0f      	cmp	r3, #15
 8006862:	d136      	bne.n	80068d2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800686a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d154      	bne.n	800691c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006872:	7dbb      	ldrb	r3, [r7, #22]
 8006874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00d      	beq.n	8006898 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	7b5b      	ldrb	r3, [r3, #13]
 8006882:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006884:	7dbb      	ldrb	r3, [r7, #22]
 8006886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688a:	75bb      	strb	r3, [r7, #22]
 800688c:	7dbb      	ldrb	r3, [r7, #22]
 800688e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	695a      	ldr	r2, [r3, #20]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006898:	7dba      	ldrb	r2, [r7, #22]
 800689a:	7d7b      	ldrb	r3, [r7, #21]
 800689c:	429a      	cmp	r2, r3
 800689e:	d115      	bne.n	80068cc <dir_find+0x106>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	330d      	adds	r3, #13
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	7d3a      	ldrb	r2, [r7, #20]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d10e      	bne.n	80068cc <dir_find+0x106>
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	4619      	mov	r1, r3
 80068b8:	4610      	mov	r0, r2
 80068ba:	f7ff fdfd 	bl	80064b8 <cmp_lfn>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <dir_find+0x106>
 80068c4:	7d7b      	ldrb	r3, [r7, #21]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	e000      	b.n	80068ce <dir_find+0x108>
 80068cc:	23ff      	movs	r3, #255	; 0xff
 80068ce:	757b      	strb	r3, [r7, #21]
 80068d0:	e024      	b.n	800691c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80068d2:	7d7b      	ldrb	r3, [r7, #21]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d109      	bne.n	80068ec <dir_find+0x126>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff ff51 	bl	8006784 <sum_sfn>
 80068e2:	4603      	mov	r3, r0
 80068e4:	461a      	mov	r2, r3
 80068e6:	7d3b      	ldrb	r3, [r7, #20]
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d024      	beq.n	8006936 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <dir_find+0x14a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a18      	ldr	r0, [r3, #32]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3324      	adds	r3, #36	; 0x24
 8006902:	220b      	movs	r2, #11
 8006904:	4619      	mov	r1, r3
 8006906:	f7fe fe1d 	bl	8005544 <mem_cmp>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d014      	beq.n	800693a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006910:	23ff      	movs	r3, #255	; 0xff
 8006912:	757b      	strb	r3, [r7, #21]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f04f 32ff 	mov.w	r2, #4294967295
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800691c:	2100      	movs	r1, #0
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff fc6d 	bl	80061fe <dir_next>
 8006924:	4603      	mov	r3, r0
 8006926:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	2b00      	cmp	r3, #0
 800692c:	f43f af65 	beq.w	80067fa <dir_find+0x34>
 8006930:	e004      	b.n	800693c <dir_find+0x176>
		if (res != FR_OK) break;
 8006932:	bf00      	nop
 8006934:	e002      	b.n	800693c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800693a:	bf00      	nop

	return res;
 800693c:	7dfb      	ldrb	r3, [r7, #23]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08c      	sub	sp, #48	; 0x30
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800695c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <dir_register+0x20>
 8006964:	2306      	movs	r3, #6
 8006966:	e0e0      	b.n	8006b2a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006968:	2300      	movs	r3, #0
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
 800696c:	e002      	b.n	8006974 <dir_register+0x2c>
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	3301      	adds	r3, #1
 8006972:	627b      	str	r3, [r7, #36]	; 0x24
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	691a      	ldr	r2, [r3, #16]
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	4413      	add	r3, r2
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f4      	bne.n	800696e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800698a:	f107 030c 	add.w	r3, r7, #12
 800698e:	220c      	movs	r2, #12
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe fd9b 	bl	80054cc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d032      	beq.n	8006a06 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2240      	movs	r2, #64	; 0x40
 80069a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80069a8:	2301      	movs	r3, #1
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ac:	e016      	b.n	80069dc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	f107 010c 	add.w	r1, r7, #12
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	f7ff fe53 	bl	8006668 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff feff 	bl	80067c6 <dir_find>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80069ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d106      	bne.n	80069e4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	3301      	adds	r3, #1
 80069da:	62bb      	str	r3, [r7, #40]	; 0x28
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	2b63      	cmp	r3, #99	; 0x63
 80069e0:	d9e5      	bls.n	80069ae <dir_register+0x66>
 80069e2:	e000      	b.n	80069e6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80069e4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	2b64      	cmp	r3, #100	; 0x64
 80069ea:	d101      	bne.n	80069f0 <dir_register+0xa8>
 80069ec:	2307      	movs	r3, #7
 80069ee:	e09c      	b.n	8006b2a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80069f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d002      	beq.n	80069fe <dir_register+0xb6>
 80069f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069fc:	e095      	b.n	8006b2a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80069fe:	7dfa      	ldrb	r2, [r7, #23]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <dir_register+0xd8>
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	330c      	adds	r3, #12
 8006a14:	4a47      	ldr	r2, [pc, #284]	; (8006b34 <dir_register+0x1ec>)
 8006a16:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1a:	089b      	lsrs	r3, r3, #2
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	e000      	b.n	8006a22 <dir_register+0xda>
 8006a20:	2301      	movs	r3, #1
 8006a22:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006a24:	6a39      	ldr	r1, [r7, #32]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fcbf 	bl	80063aa <dir_alloc>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d148      	bne.n	8006acc <dir_register+0x184>
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	623b      	str	r3, [r7, #32]
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d042      	beq.n	8006acc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695a      	ldr	r2, [r3, #20]
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	015b      	lsls	r3, r3, #5
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff fb4a 	bl	80060ec <dir_sdi>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d132      	bne.n	8006acc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3324      	adds	r3, #36	; 0x24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff fe8a 	bl	8006784 <sum_sfn>
 8006a70:	4603      	mov	r3, r0
 8006a72:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	69f8      	ldr	r0, [r7, #28]
 8006a7c:	f7fe ff54 	bl	8005928 <move_window>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006a86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d11d      	bne.n	8006aca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	6918      	ldr	r0, [r3, #16]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a19      	ldr	r1, [r3, #32]
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	7efb      	ldrb	r3, [r7, #27]
 8006a9c:	f7ff fd7c 	bl	8006598 <put_lfn>
				fs->wflag = 1;
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff fba8 	bl	80061fe <dir_next>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d107      	bne.n	8006acc <dir_register+0x184>
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	623b      	str	r3, [r7, #32]
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1d5      	bne.n	8006a74 <dir_register+0x12c>
 8006ac8:	e000      	b.n	8006acc <dir_register+0x184>
				if (res != FR_OK) break;
 8006aca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006acc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d128      	bne.n	8006b26 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	69f8      	ldr	r0, [r7, #28]
 8006adc:	f7fe ff24 	bl	8005928 <move_window>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d11b      	bne.n	8006b26 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	2220      	movs	r2, #32
 8006af4:	2100      	movs	r1, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fd09 	bl	800550e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a18      	ldr	r0, [r3, #32]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3324      	adds	r3, #36	; 0x24
 8006b04:	220b      	movs	r2, #11
 8006b06:	4619      	mov	r1, r3
 8006b08:	f7fe fce0 	bl	80054cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	330c      	adds	r3, #12
 8006b18:	f002 0218 	and.w	r2, r2, #24
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	2201      	movs	r2, #1
 8006b24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3730      	adds	r7, #48	; 0x30
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	4ec4ec4f 	.word	0x4ec4ec4f

08006b38 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08a      	sub	sp, #40	; 0x28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	613b      	str	r3, [r7, #16]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	2300      	movs	r3, #0
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	61ba      	str	r2, [r7, #24]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4413      	add	r3, r2
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b68:	2b1f      	cmp	r3, #31
 8006b6a:	d940      	bls.n	8006bee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006b6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b6e:	2b2f      	cmp	r3, #47	; 0x2f
 8006b70:	d006      	beq.n	8006b80 <create_name+0x48>
 8006b72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b74:	2b5c      	cmp	r3, #92	; 0x5c
 8006b76:	d110      	bne.n	8006b9a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006b78:	e002      	b.n	8006b80 <create_name+0x48>
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	4413      	add	r3, r2
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b2f      	cmp	r3, #47	; 0x2f
 8006b8a:	d0f6      	beq.n	8006b7a <create_name+0x42>
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	4413      	add	r3, r2
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2b5c      	cmp	r3, #92	; 0x5c
 8006b96:	d0f0      	beq.n	8006b7a <create_name+0x42>
			break;
 8006b98:	e02a      	b.n	8006bf0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2bfe      	cmp	r3, #254	; 0xfe
 8006b9e:	d901      	bls.n	8006ba4 <create_name+0x6c>
 8006ba0:	2306      	movs	r3, #6
 8006ba2:	e17d      	b.n	8006ea0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bac:	2101      	movs	r1, #1
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 fcdc 	bl	800856c <ff_convert>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006bb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <create_name+0x8a>
 8006bbe:	2306      	movs	r3, #6
 8006bc0:	e16e      	b.n	8006ea0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc6:	d809      	bhi.n	8006bdc <create_name+0xa4>
 8006bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bca:	4619      	mov	r1, r3
 8006bcc:	488d      	ldr	r0, [pc, #564]	; (8006e04 <create_name+0x2cc>)
 8006bce:	f7fe fce0 	bl	8005592 <chk_chr>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <create_name+0xa4>
 8006bd8:	2306      	movs	r3, #6
 8006bda:	e161      	b.n	8006ea0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	617a      	str	r2, [r7, #20]
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006bec:	e7b4      	b.n	8006b58 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006bee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	441a      	add	r2, r3
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bfc:	2b1f      	cmp	r3, #31
 8006bfe:	d801      	bhi.n	8006c04 <create_name+0xcc>
 8006c00:	2304      	movs	r3, #4
 8006c02:	e000      	b.n	8006c06 <create_name+0xce>
 8006c04:	2300      	movs	r3, #0
 8006c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006c0a:	e011      	b.n	8006c30 <create_name+0xf8>
		w = lfn[di - 1];
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c12:	3b01      	subs	r3, #1
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d002      	beq.n	8006c2a <create_name+0xf2>
 8006c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c26:	2b2e      	cmp	r3, #46	; 0x2e
 8006c28:	d106      	bne.n	8006c38 <create_name+0x100>
		di--;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1ea      	bne.n	8006c0c <create_name+0xd4>
 8006c36:	e000      	b.n	8006c3a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006c38:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4413      	add	r3, r2
 8006c42:	2200      	movs	r2, #0
 8006c44:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <create_name+0x118>
 8006c4c:	2306      	movs	r3, #6
 8006c4e:	e127      	b.n	8006ea0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3324      	adds	r3, #36	; 0x24
 8006c54:	220b      	movs	r2, #11
 8006c56:	2120      	movs	r1, #32
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe fc58 	bl	800550e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	e002      	b.n	8006c6a <create_name+0x132>
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	3301      	adds	r3, #1
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4413      	add	r3, r2
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d0f5      	beq.n	8006c64 <create_name+0x12c>
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	2b2e      	cmp	r3, #46	; 0x2e
 8006c84:	d0ee      	beq.n	8006c64 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d009      	beq.n	8006ca0 <create_name+0x168>
 8006c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c90:	f043 0303 	orr.w	r3, r3, #3
 8006c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006c98:	e002      	b.n	8006ca0 <create_name+0x168>
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d009      	beq.n	8006cba <create_name+0x182>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006cac:	3b01      	subs	r3, #1
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8006cb8:	d1ef      	bne.n	8006c9a <create_name+0x162>

	i = b = 0; ni = 8;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	623b      	str	r3, [r7, #32]
 8006cc4:	2308      	movs	r3, #8
 8006cc6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	61ba      	str	r2, [r7, #24]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006cd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8090 	beq.w	8006e00 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006ce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d006      	beq.n	8006cf4 <create_name+0x1bc>
 8006ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8006cea:	d10a      	bne.n	8006d02 <create_name+0x1ca>
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d006      	beq.n	8006d02 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cf8:	f043 0303 	orr.w	r3, r3, #3
 8006cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d00:	e07d      	b.n	8006dfe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006d02:	6a3a      	ldr	r2, [r7, #32]
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d203      	bcs.n	8006d12 <create_name+0x1da>
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d123      	bne.n	8006d5a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	2b0b      	cmp	r3, #11
 8006d16:	d106      	bne.n	8006d26 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d1c:	f043 0303 	orr.w	r3, r3, #3
 8006d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d24:	e075      	b.n	8006e12 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d005      	beq.n	8006d3a <create_name+0x202>
 8006d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d32:	f043 0303 	orr.w	r3, r3, #3
 8006d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d866      	bhi.n	8006e10 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	61bb      	str	r3, [r7, #24]
 8006d46:	2308      	movs	r3, #8
 8006d48:	623b      	str	r3, [r7, #32]
 8006d4a:	230b      	movs	r3, #11
 8006d4c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006d4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d58:	e051      	b.n	8006dfe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d5e:	d914      	bls.n	8006d8a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d62:	2100      	movs	r1, #0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 fc01 	bl	800856c <ff_convert>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006d6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d004      	beq.n	8006d7e <create_name+0x246>
 8006d74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d76:	3b80      	subs	r3, #128	; 0x80
 8006d78:	4a23      	ldr	r2, [pc, #140]	; (8006e08 <create_name+0x2d0>)
 8006d7a:	5cd3      	ldrb	r3, [r2, r3]
 8006d7c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d82:	f043 0302 	orr.w	r3, r3, #2
 8006d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d007      	beq.n	8006da0 <create_name+0x268>
 8006d90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d92:	4619      	mov	r1, r3
 8006d94:	481d      	ldr	r0, [pc, #116]	; (8006e0c <create_name+0x2d4>)
 8006d96:	f7fe fbfc 	bl	8005592 <chk_chr>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d008      	beq.n	8006db2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006da0:	235f      	movs	r3, #95	; 0x5f
 8006da2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006da8:	f043 0303 	orr.w	r3, r3, #3
 8006dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006db0:	e01b      	b.n	8006dea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006db4:	2b40      	cmp	r3, #64	; 0x40
 8006db6:	d909      	bls.n	8006dcc <create_name+0x294>
 8006db8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dba:	2b5a      	cmp	r3, #90	; 0x5a
 8006dbc:	d806      	bhi.n	8006dcc <create_name+0x294>
					b |= 2;
 8006dbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dc2:	f043 0302 	orr.w	r3, r3, #2
 8006dc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006dca:	e00e      	b.n	8006dea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006dcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dce:	2b60      	cmp	r3, #96	; 0x60
 8006dd0:	d90b      	bls.n	8006dea <create_name+0x2b2>
 8006dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dd4:	2b7a      	cmp	r3, #122	; 0x7a
 8006dd6:	d808      	bhi.n	8006dea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006dd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ddc:	f043 0301 	orr.w	r3, r3, #1
 8006de0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006de4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006de6:	3b20      	subs	r3, #32
 8006de8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	623a      	str	r2, [r7, #32]
 8006df0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006df2:	b2d1      	uxtb	r1, r2
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	4413      	add	r3, r2
 8006df8:	460a      	mov	r2, r1
 8006dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006dfe:	e763      	b.n	8006cc8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006e00:	bf00      	nop
 8006e02:	e006      	b.n	8006e12 <create_name+0x2da>
 8006e04:	0800913c 	.word	0x0800913c
 8006e08:	080091a4 	.word	0x080091a4
 8006e0c:	08009148 	.word	0x08009148
			if (si > di) break;			/* No extension */
 8006e10:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e18:	2be5      	cmp	r3, #229	; 0xe5
 8006e1a:	d103      	bne.n	8006e24 <create_name+0x2ec>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2205      	movs	r2, #5
 8006e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d104      	bne.n	8006e34 <create_name+0x2fc>
 8006e2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006e34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e38:	f003 030c 	and.w	r3, r3, #12
 8006e3c:	2b0c      	cmp	r3, #12
 8006e3e:	d005      	beq.n	8006e4c <create_name+0x314>
 8006e40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e44:	f003 0303 	and.w	r3, r3, #3
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d105      	bne.n	8006e58 <create_name+0x320>
 8006e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e50:	f043 0302 	orr.w	r3, r3, #2
 8006e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d117      	bne.n	8006e94 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006e64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e68:	f003 0303 	and.w	r3, r3, #3
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d105      	bne.n	8006e7c <create_name+0x344>
 8006e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e74:	f043 0310 	orr.w	r3, r3, #16
 8006e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e80:	f003 030c 	and.w	r3, r3, #12
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d105      	bne.n	8006e94 <create_name+0x35c>
 8006e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e8c:	f043 0308 	orr.w	r3, r3, #8
 8006e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e9a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006e9e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3728      	adds	r7, #40	; 0x28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006ebc:	e002      	b.n	8006ec4 <follow_path+0x1c>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b2f      	cmp	r3, #47	; 0x2f
 8006eca:	d0f8      	beq.n	8006ebe <follow_path+0x16>
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b5c      	cmp	r3, #92	; 0x5c
 8006ed2:	d0f4      	beq.n	8006ebe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	2b1f      	cmp	r3, #31
 8006ee0:	d80a      	bhi.n	8006ef8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2280      	movs	r2, #128	; 0x80
 8006ee6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006eea:	2100      	movs	r1, #0
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff f8fd 	bl	80060ec <dir_sdi>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	75fb      	strb	r3, [r7, #23]
 8006ef6:	e048      	b.n	8006f8a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ef8:	463b      	mov	r3, r7
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff fe1b 	bl	8006b38 <create_name>
 8006f02:	4603      	mov	r3, r0
 8006f04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d139      	bne.n	8006f80 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff fc5a 	bl	80067c6 <dir_find>
 8006f12:	4603      	mov	r3, r0
 8006f14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006f1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00a      	beq.n	8006f3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d12c      	bne.n	8006f84 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006f2a:	7afb      	ldrb	r3, [r7, #11]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d127      	bne.n	8006f84 <follow_path+0xdc>
 8006f34:	2305      	movs	r3, #5
 8006f36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006f38:	e024      	b.n	8006f84 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d121      	bne.n	8006f88 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	799b      	ldrb	r3, [r3, #6]
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006f50:	2305      	movs	r3, #5
 8006f52:	75fb      	strb	r3, [r7, #23]
 8006f54:	e019      	b.n	8006f8a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	8992      	ldrh	r2, [r2, #12]
 8006f64:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f68:	fb00 f202 	mul.w	r2, r0, r2
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	440b      	add	r3, r1
 8006f70:	4619      	mov	r1, r3
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f7ff fa60 	bl	8006438 <ld_clust>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f7e:	e7bb      	b.n	8006ef8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006f80:	bf00      	nop
 8006f82:	e002      	b.n	8006f8a <follow_path+0xe2>
				break;
 8006f84:	bf00      	nop
 8006f86:	e000      	b.n	8006f8a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f88:	bf00      	nop
			}
		}
	}

	return res;
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d031      	beq.n	800700e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	e002      	b.n	8006fb8 <get_ldnumber+0x24>
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b1f      	cmp	r3, #31
 8006fbe:	d903      	bls.n	8006fc8 <get_ldnumber+0x34>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2b3a      	cmp	r3, #58	; 0x3a
 8006fc6:	d1f4      	bne.n	8006fb2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b3a      	cmp	r3, #58	; 0x3a
 8006fce:	d11c      	bne.n	800700a <get_ldnumber+0x76>
			tp = *path;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	60fa      	str	r2, [r7, #12]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	3b30      	subs	r3, #48	; 0x30
 8006fe0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b09      	cmp	r3, #9
 8006fe6:	d80e      	bhi.n	8007006 <get_ldnumber+0x72>
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d10a      	bne.n	8007006 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d107      	bne.n	8007006 <get_ldnumber+0x72>
					vol = (int)i;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	e002      	b.n	8007010 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800700a:	2300      	movs	r3, #0
 800700c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800700e:	693b      	ldr	r3, [r7, #16]
}
 8007010:	4618      	mov	r0, r3
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	70da      	strb	r2, [r3, #3]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f04f 32ff 	mov.w	r2, #4294967295
 8007032:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7fe fc76 	bl	8005928 <move_window>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <check_fs+0x2a>
 8007042:	2304      	movs	r3, #4
 8007044:	e038      	b.n	80070b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	3338      	adds	r3, #56	; 0x38
 800704a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe f9ba 	bl	80053c8 <ld_word>
 8007054:	4603      	mov	r3, r0
 8007056:	461a      	mov	r2, r3
 8007058:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800705c:	429a      	cmp	r2, r3
 800705e:	d001      	beq.n	8007064 <check_fs+0x48>
 8007060:	2303      	movs	r3, #3
 8007062:	e029      	b.n	80070b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800706a:	2be9      	cmp	r3, #233	; 0xe9
 800706c:	d009      	beq.n	8007082 <check_fs+0x66>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007074:	2beb      	cmp	r3, #235	; 0xeb
 8007076:	d11e      	bne.n	80070b6 <check_fs+0x9a>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800707e:	2b90      	cmp	r3, #144	; 0x90
 8007080:	d119      	bne.n	80070b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3338      	adds	r3, #56	; 0x38
 8007086:	3336      	adds	r3, #54	; 0x36
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe f9b5 	bl	80053f8 <ld_dword>
 800708e:	4603      	mov	r3, r0
 8007090:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007094:	4a0a      	ldr	r2, [pc, #40]	; (80070c0 <check_fs+0xa4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d101      	bne.n	800709e <check_fs+0x82>
 800709a:	2300      	movs	r3, #0
 800709c:	e00c      	b.n	80070b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	3338      	adds	r3, #56	; 0x38
 80070a2:	3352      	adds	r3, #82	; 0x52
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fe f9a7 	bl	80053f8 <ld_dword>
 80070aa:	4603      	mov	r3, r0
 80070ac:	4a05      	ldr	r2, [pc, #20]	; (80070c4 <check_fs+0xa8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d101      	bne.n	80070b6 <check_fs+0x9a>
 80070b2:	2300      	movs	r3, #0
 80070b4:	e000      	b.n	80070b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80070b6:	2302      	movs	r3, #2
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	00544146 	.word	0x00544146
 80070c4:	33544146 	.word	0x33544146

080070c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b096      	sub	sp, #88	; 0x58
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	4613      	mov	r3, r2
 80070d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f7ff ff59 	bl	8006f94 <get_ldnumber>
 80070e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80070e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	da01      	bge.n	80070ee <find_volume+0x26>
 80070ea:	230b      	movs	r3, #11
 80070ec:	e265      	b.n	80075ba <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80070ee:	4a9f      	ldr	r2, [pc, #636]	; (800736c <find_volume+0x2a4>)
 80070f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80070f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <find_volume+0x3a>
 80070fe:	230c      	movs	r3, #12
 8007100:	e25b      	b.n	80075ba <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007106:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	f023 0301 	bic.w	r3, r3, #1
 800710e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01a      	beq.n	800714e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe f8b5 	bl	800528c <disk_status>
 8007122:	4603      	mov	r3, r0
 8007124:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007128:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10c      	bne.n	800714e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <find_volume+0x82>
 800713a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007146:	230a      	movs	r3, #10
 8007148:	e237      	b.n	80075ba <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800714a:	2300      	movs	r3, #0
 800714c:	e235      	b.n	80075ba <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	2200      	movs	r2, #0
 8007152:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007156:	b2da      	uxtb	r2, r3
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	785b      	ldrb	r3, [r3, #1]
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe f8ad 	bl	80052c0 <disk_initialize>
 8007166:	4603      	mov	r3, r0
 8007168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800716c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007178:	2303      	movs	r3, #3
 800717a:	e21e      	b.n	80075ba <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d007      	beq.n	8007192 <find_volume+0xca>
 8007182:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800718e:	230a      	movs	r3, #10
 8007190:	e213      	b.n	80075ba <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	7858      	ldrb	r0, [r3, #1]
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	330c      	adds	r3, #12
 800719a:	461a      	mov	r2, r3
 800719c:	2102      	movs	r1, #2
 800719e:	f7fe f8f5 	bl	800538c <disk_ioctl>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <find_volume+0xe4>
 80071a8:	2301      	movs	r3, #1
 80071aa:	e206      	b.n	80075ba <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	899b      	ldrh	r3, [r3, #12]
 80071b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b4:	d80d      	bhi.n	80071d2 <find_volume+0x10a>
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	899b      	ldrh	r3, [r3, #12]
 80071ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071be:	d308      	bcc.n	80071d2 <find_volume+0x10a>
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	899b      	ldrh	r3, [r3, #12]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	899b      	ldrh	r3, [r3, #12]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	4013      	ands	r3, r2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <find_volume+0x10e>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e1f1      	b.n	80075ba <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80071da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80071dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071de:	f7ff ff1d 	bl	800701c <check_fs>
 80071e2:	4603      	mov	r3, r0
 80071e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80071e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d149      	bne.n	8007284 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80071f0:	2300      	movs	r3, #0
 80071f2:	643b      	str	r3, [r7, #64]	; 0x40
 80071f4:	e01e      	b.n	8007234 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80071f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80071fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007204:	4413      	add	r3, r2
 8007206:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	3304      	adds	r3, #4
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d006      	beq.n	8007220 <find_volume+0x158>
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	3308      	adds	r3, #8
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe f8ee 	bl	80053f8 <ld_dword>
 800721c:	4602      	mov	r2, r0
 800721e:	e000      	b.n	8007222 <find_volume+0x15a>
 8007220:	2200      	movs	r2, #0
 8007222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	3358      	adds	r3, #88	; 0x58
 8007228:	443b      	add	r3, r7
 800722a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800722e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007230:	3301      	adds	r3, #1
 8007232:	643b      	str	r3, [r7, #64]	; 0x40
 8007234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007236:	2b03      	cmp	r3, #3
 8007238:	d9dd      	bls.n	80071f6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800723a:	2300      	movs	r3, #0
 800723c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800723e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <find_volume+0x182>
 8007244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007246:	3b01      	subs	r3, #1
 8007248:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800724a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	3358      	adds	r3, #88	; 0x58
 8007250:	443b      	add	r3, r7
 8007252:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007256:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <find_volume+0x1a2>
 800725e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007260:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007262:	f7ff fedb 	bl	800701c <check_fs>
 8007266:	4603      	mov	r3, r0
 8007268:	e000      	b.n	800726c <find_volume+0x1a4>
 800726a:	2303      	movs	r3, #3
 800726c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007270:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007274:	2b01      	cmp	r3, #1
 8007276:	d905      	bls.n	8007284 <find_volume+0x1bc>
 8007278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800727a:	3301      	adds	r3, #1
 800727c:	643b      	str	r3, [r7, #64]	; 0x40
 800727e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007280:	2b03      	cmp	r3, #3
 8007282:	d9e2      	bls.n	800724a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007288:	2b04      	cmp	r3, #4
 800728a:	d101      	bne.n	8007290 <find_volume+0x1c8>
 800728c:	2301      	movs	r3, #1
 800728e:	e194      	b.n	80075ba <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007294:	2b01      	cmp	r3, #1
 8007296:	d901      	bls.n	800729c <find_volume+0x1d4>
 8007298:	230d      	movs	r3, #13
 800729a:	e18e      	b.n	80075ba <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	3338      	adds	r3, #56	; 0x38
 80072a0:	330b      	adds	r3, #11
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe f890 	bl	80053c8 <ld_word>
 80072a8:	4603      	mov	r3, r0
 80072aa:	461a      	mov	r2, r3
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	899b      	ldrh	r3, [r3, #12]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d001      	beq.n	80072b8 <find_volume+0x1f0>
 80072b4:	230d      	movs	r3, #13
 80072b6:	e180      	b.n	80075ba <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	3338      	adds	r3, #56	; 0x38
 80072bc:	3316      	adds	r3, #22
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fe f882 	bl	80053c8 <ld_word>
 80072c4:	4603      	mov	r3, r0
 80072c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80072c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <find_volume+0x214>
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	3338      	adds	r3, #56	; 0x38
 80072d2:	3324      	adds	r3, #36	; 0x24
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fe f88f 	bl	80053f8 <ld_dword>
 80072da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072e0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80072e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	789b      	ldrb	r3, [r3, #2]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d005      	beq.n	8007300 <find_volume+0x238>
 80072f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f6:	789b      	ldrb	r3, [r3, #2]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d001      	beq.n	8007300 <find_volume+0x238>
 80072fc:	230d      	movs	r3, #13
 80072fe:	e15c      	b.n	80075ba <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	789b      	ldrb	r3, [r3, #2]
 8007304:	461a      	mov	r2, r3
 8007306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007308:	fb02 f303 	mul.w	r3, r2, r3
 800730c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007314:	b29a      	uxth	r2, r3
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731c:	895b      	ldrh	r3, [r3, #10]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d008      	beq.n	8007334 <find_volume+0x26c>
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	895b      	ldrh	r3, [r3, #10]
 8007326:	461a      	mov	r2, r3
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	895b      	ldrh	r3, [r3, #10]
 800732c:	3b01      	subs	r3, #1
 800732e:	4013      	ands	r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <find_volume+0x270>
 8007334:	230d      	movs	r3, #13
 8007336:	e140      	b.n	80075ba <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	3338      	adds	r3, #56	; 0x38
 800733c:	3311      	adds	r3, #17
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe f842 	bl	80053c8 <ld_word>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	891b      	ldrh	r3, [r3, #8]
 8007350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007352:	8992      	ldrh	r2, [r2, #12]
 8007354:	0952      	lsrs	r2, r2, #5
 8007356:	b292      	uxth	r2, r2
 8007358:	fbb3 f1f2 	udiv	r1, r3, r2
 800735c:	fb01 f202 	mul.w	r2, r1, r2
 8007360:	1a9b      	subs	r3, r3, r2
 8007362:	b29b      	uxth	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <find_volume+0x2a8>
 8007368:	230d      	movs	r3, #13
 800736a:	e126      	b.n	80075ba <find_volume+0x4f2>
 800736c:	2000667c 	.word	0x2000667c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007372:	3338      	adds	r3, #56	; 0x38
 8007374:	3313      	adds	r3, #19
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe f826 	bl	80053c8 <ld_word>
 800737c:	4603      	mov	r3, r0
 800737e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007382:	2b00      	cmp	r3, #0
 8007384:	d106      	bne.n	8007394 <find_volume+0x2cc>
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	3338      	adds	r3, #56	; 0x38
 800738a:	3320      	adds	r3, #32
 800738c:	4618      	mov	r0, r3
 800738e:	f7fe f833 	bl	80053f8 <ld_dword>
 8007392:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007396:	3338      	adds	r3, #56	; 0x38
 8007398:	330e      	adds	r3, #14
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe f814 	bl	80053c8 <ld_word>
 80073a0:	4603      	mov	r3, r0
 80073a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80073a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <find_volume+0x2e6>
 80073aa:	230d      	movs	r3, #13
 80073ac:	e105      	b.n	80075ba <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80073ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80073b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b2:	4413      	add	r3, r2
 80073b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b6:	8911      	ldrh	r1, [r2, #8]
 80073b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ba:	8992      	ldrh	r2, [r2, #12]
 80073bc:	0952      	lsrs	r2, r2, #5
 80073be:	b292      	uxth	r2, r2
 80073c0:	fbb1 f2f2 	udiv	r2, r1, r2
 80073c4:	b292      	uxth	r2, r2
 80073c6:	4413      	add	r3, r2
 80073c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80073ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d201      	bcs.n	80073d6 <find_volume+0x30e>
 80073d2:	230d      	movs	r3, #13
 80073d4:	e0f1      	b.n	80075ba <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80073d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073de:	8952      	ldrh	r2, [r2, #10]
 80073e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <find_volume+0x328>
 80073ec:	230d      	movs	r3, #13
 80073ee:	e0e4      	b.n	80075ba <find_volume+0x4f2>
		fmt = FS_FAT32;
 80073f0:	2303      	movs	r3, #3
 80073f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d802      	bhi.n	8007406 <find_volume+0x33e>
 8007400:	2302      	movs	r3, #2
 8007402:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	f640 72f5 	movw	r2, #4085	; 0xff5
 800740c:	4293      	cmp	r3, r2
 800740e:	d802      	bhi.n	8007416 <find_volume+0x34e>
 8007410:	2301      	movs	r3, #1
 8007412:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	1c9a      	adds	r2, r3, #2
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007422:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007424:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007428:	441a      	add	r2, r3
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800742e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	441a      	add	r2, r3
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007438:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800743c:	2b03      	cmp	r3, #3
 800743e:	d11e      	bne.n	800747e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	3338      	adds	r3, #56	; 0x38
 8007444:	332a      	adds	r3, #42	; 0x2a
 8007446:	4618      	mov	r0, r3
 8007448:	f7fd ffbe 	bl	80053c8 <ld_word>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <find_volume+0x38e>
 8007452:	230d      	movs	r3, #13
 8007454:	e0b1      	b.n	80075ba <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	891b      	ldrh	r3, [r3, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <find_volume+0x39a>
 800745e:	230d      	movs	r3, #13
 8007460:	e0ab      	b.n	80075ba <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007464:	3338      	adds	r3, #56	; 0x38
 8007466:	332c      	adds	r3, #44	; 0x2c
 8007468:	4618      	mov	r0, r3
 800746a:	f7fd ffc5 	bl	80053f8 <ld_dword>
 800746e:	4602      	mov	r2, r0
 8007470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007472:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	647b      	str	r3, [r7, #68]	; 0x44
 800747c:	e01f      	b.n	80074be <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	891b      	ldrh	r3, [r3, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <find_volume+0x3c2>
 8007486:	230d      	movs	r3, #13
 8007488:	e097      	b.n	80075ba <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800748e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007490:	441a      	add	r2, r3
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007496:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800749a:	2b02      	cmp	r3, #2
 800749c:	d103      	bne.n	80074a6 <find_volume+0x3de>
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	e00a      	b.n	80074bc <find_volume+0x3f4>
 80074a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a8:	69da      	ldr	r2, [r3, #28]
 80074aa:	4613      	mov	r3, r2
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	4413      	add	r3, r2
 80074b0:	085a      	lsrs	r2, r3, #1
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80074bc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	6a1a      	ldr	r2, [r3, #32]
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	899b      	ldrh	r3, [r3, #12]
 80074c6:	4619      	mov	r1, r3
 80074c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ca:	440b      	add	r3, r1
 80074cc:	3b01      	subs	r3, #1
 80074ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074d0:	8989      	ldrh	r1, [r1, #12]
 80074d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d201      	bcs.n	80074de <find_volume+0x416>
 80074da:	230d      	movs	r3, #13
 80074dc:	e06d      	b.n	80075ba <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	f04f 32ff 	mov.w	r2, #4294967295
 80074e4:	619a      	str	r2, [r3, #24]
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ec:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	2280      	movs	r2, #128	; 0x80
 80074f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80074f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d149      	bne.n	8007590 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80074fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fe:	3338      	adds	r3, #56	; 0x38
 8007500:	3330      	adds	r3, #48	; 0x30
 8007502:	4618      	mov	r0, r3
 8007504:	f7fd ff60 	bl	80053c8 <ld_word>
 8007508:	4603      	mov	r3, r0
 800750a:	2b01      	cmp	r3, #1
 800750c:	d140      	bne.n	8007590 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800750e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007510:	3301      	adds	r3, #1
 8007512:	4619      	mov	r1, r3
 8007514:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007516:	f7fe fa07 	bl	8005928 <move_window>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d137      	bne.n	8007590 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	2200      	movs	r2, #0
 8007524:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	3338      	adds	r3, #56	; 0x38
 800752a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800752e:	4618      	mov	r0, r3
 8007530:	f7fd ff4a 	bl	80053c8 <ld_word>
 8007534:	4603      	mov	r3, r0
 8007536:	461a      	mov	r2, r3
 8007538:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800753c:	429a      	cmp	r2, r3
 800753e:	d127      	bne.n	8007590 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007542:	3338      	adds	r3, #56	; 0x38
 8007544:	4618      	mov	r0, r3
 8007546:	f7fd ff57 	bl	80053f8 <ld_dword>
 800754a:	4603      	mov	r3, r0
 800754c:	4a1d      	ldr	r2, [pc, #116]	; (80075c4 <find_volume+0x4fc>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d11e      	bne.n	8007590 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	3338      	adds	r3, #56	; 0x38
 8007556:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800755a:	4618      	mov	r0, r3
 800755c:	f7fd ff4c 	bl	80053f8 <ld_dword>
 8007560:	4603      	mov	r3, r0
 8007562:	4a19      	ldr	r2, [pc, #100]	; (80075c8 <find_volume+0x500>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d113      	bne.n	8007590 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	3338      	adds	r3, #56	; 0x38
 800756c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007570:	4618      	mov	r0, r3
 8007572:	f7fd ff41 	bl	80053f8 <ld_dword>
 8007576:	4602      	mov	r2, r0
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	3338      	adds	r3, #56	; 0x38
 8007580:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007584:	4618      	mov	r0, r3
 8007586:	f7fd ff37 	bl	80053f8 <ld_dword>
 800758a:	4602      	mov	r2, r0
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007596:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007598:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <find_volume+0x504>)
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	3301      	adds	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <find_volume+0x504>)
 80075a2:	801a      	strh	r2, [r3, #0]
 80075a4:	4b09      	ldr	r3, [pc, #36]	; (80075cc <find_volume+0x504>)
 80075a6:	881a      	ldrh	r2, [r3, #0]
 80075a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075aa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	4a08      	ldr	r2, [pc, #32]	; (80075d0 <find_volume+0x508>)
 80075b0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80075b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075b4:	f7fe f950 	bl	8005858 <clear_lock>
#endif
	return FR_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3758      	adds	r7, #88	; 0x58
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	41615252 	.word	0x41615252
 80075c8:	61417272 	.word	0x61417272
 80075cc:	20006680 	.word	0x20006680
 80075d0:	200066a4 	.word	0x200066a4

080075d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80075de:	2309      	movs	r3, #9
 80075e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01c      	beq.n	8007622 <validate+0x4e>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d018      	beq.n	8007622 <validate+0x4e>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d013      	beq.n	8007622 <validate+0x4e>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	889a      	ldrh	r2, [r3, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	88db      	ldrh	r3, [r3, #6]
 8007604:	429a      	cmp	r2, r3
 8007606:	d10c      	bne.n	8007622 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	785b      	ldrb	r3, [r3, #1]
 800760e:	4618      	mov	r0, r3
 8007610:	f7fd fe3c 	bl	800528c <disk_status>
 8007614:	4603      	mov	r3, r0
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <validate+0x4e>
			res = FR_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d102      	bne.n	800762e <validate+0x5a>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	e000      	b.n	8007630 <validate+0x5c>
 800762e:	2300      	movs	r3, #0
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	6013      	str	r3, [r2, #0]
	return res;
 8007634:	7bfb      	ldrb	r3, [r7, #15]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	4613      	mov	r3, r2
 800764c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007652:	f107 0310 	add.w	r3, r7, #16
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff fc9c 	bl	8006f94 <get_ldnumber>
 800765c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	2b00      	cmp	r3, #0
 8007662:	da01      	bge.n	8007668 <f_mount+0x28>
 8007664:	230b      	movs	r3, #11
 8007666:	e02b      	b.n	80076c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007668:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <f_mount+0x88>)
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007670:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007678:	69b8      	ldr	r0, [r7, #24]
 800767a:	f7fe f8ed 	bl	8005858 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	490d      	ldr	r1, [pc, #52]	; (80076c8 <f_mount+0x88>)
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <f_mount+0x66>
 80076a0:	79fb      	ldrb	r3, [r7, #7]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d001      	beq.n	80076aa <f_mount+0x6a>
 80076a6:	2300      	movs	r3, #0
 80076a8:	e00a      	b.n	80076c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80076aa:	f107 010c 	add.w	r1, r7, #12
 80076ae:	f107 0308 	add.w	r3, r7, #8
 80076b2:	2200      	movs	r2, #0
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff fd07 	bl	80070c8 <find_volume>
 80076ba:	4603      	mov	r3, r0
 80076bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80076be:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3720      	adds	r7, #32
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	2000667c 	.word	0x2000667c

080076cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b09a      	sub	sp, #104	; 0x68
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <f_open+0x18>
 80076e0:	2309      	movs	r3, #9
 80076e2:	e1bb      	b.n	8007a5c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80076ec:	79fa      	ldrb	r2, [r7, #7]
 80076ee:	f107 0114 	add.w	r1, r7, #20
 80076f2:	f107 0308 	add.w	r3, r7, #8
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7ff fce6 	bl	80070c8 <find_volume>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007702:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007706:	2b00      	cmp	r3, #0
 8007708:	f040 819f 	bne.w	8007a4a <f_open+0x37e>
		dj.obj.fs = fs;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	f107 0318 	add.w	r3, r7, #24
 8007716:	4611      	mov	r1, r2
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff fbc5 	bl	8006ea8 <follow_path>
 800771e:	4603      	mov	r3, r0
 8007720:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007724:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007728:	2b00      	cmp	r3, #0
 800772a:	d11a      	bne.n	8007762 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800772c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007730:	b25b      	sxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	da03      	bge.n	800773e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007736:	2306      	movs	r3, #6
 8007738:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800773c:	e011      	b.n	8007762 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	f023 0301 	bic.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	bf14      	ite	ne
 8007748:	2301      	movne	r3, #1
 800774a:	2300      	moveq	r3, #0
 800774c:	b2db      	uxtb	r3, r3
 800774e:	461a      	mov	r2, r3
 8007750:	f107 0318 	add.w	r3, r7, #24
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7fd ff36 	bl	80055c8 <chk_lock>
 800775c:	4603      	mov	r3, r0
 800775e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	f003 031c 	and.w	r3, r3, #28
 8007768:	2b00      	cmp	r3, #0
 800776a:	d07f      	beq.n	800786c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800776c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007770:	2b00      	cmp	r3, #0
 8007772:	d017      	beq.n	80077a4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007774:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007778:	2b04      	cmp	r3, #4
 800777a:	d10e      	bne.n	800779a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800777c:	f7fd ff80 	bl	8005680 <enq_lock>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d006      	beq.n	8007794 <f_open+0xc8>
 8007786:	f107 0318 	add.w	r3, r7, #24
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff f8dc 	bl	8006948 <dir_register>
 8007790:	4603      	mov	r3, r0
 8007792:	e000      	b.n	8007796 <f_open+0xca>
 8007794:	2312      	movs	r3, #18
 8007796:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	f043 0308 	orr.w	r3, r3, #8
 80077a0:	71fb      	strb	r3, [r7, #7]
 80077a2:	e010      	b.n	80077c6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80077a4:	7fbb      	ldrb	r3, [r7, #30]
 80077a6:	f003 0311 	and.w	r3, r3, #17
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <f_open+0xea>
					res = FR_DENIED;
 80077ae:	2307      	movs	r3, #7
 80077b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80077b4:	e007      	b.n	80077c6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80077b6:	79fb      	ldrb	r3, [r7, #7]
 80077b8:	f003 0304 	and.w	r3, r3, #4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <f_open+0xfa>
 80077c0:	2308      	movs	r3, #8
 80077c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80077c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d168      	bne.n	80078a0 <f_open+0x1d4>
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d063      	beq.n	80078a0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80077d8:	f7fd fcf6 	bl	80051c8 <get_fattime>
 80077dc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	330e      	adds	r3, #14
 80077e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fd fe45 	bl	8005474 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80077ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ec:	3316      	adds	r3, #22
 80077ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fd fe3f 	bl	8005474 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	330b      	adds	r3, #11
 80077fa:	2220      	movs	r2, #32
 80077fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007802:	4611      	mov	r1, r2
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe fe17 	bl	8006438 <ld_clust>
 800780a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007810:	2200      	movs	r2, #0
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fe2f 	bl	8006476 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781a:	331c      	adds	r3, #28
 800781c:	2100      	movs	r1, #0
 800781e:	4618      	mov	r0, r3
 8007820:	f7fd fe28 	bl	8005474 <st_dword>
					fs->wflag = 1;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2201      	movs	r2, #1
 8007828:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800782a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800782c:	2b00      	cmp	r3, #0
 800782e:	d037      	beq.n	80078a0 <f_open+0x1d4>
						dw = fs->winsect;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007834:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007836:	f107 0318 	add.w	r3, r7, #24
 800783a:	2200      	movs	r2, #0
 800783c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe fb1f 	bl	8005e82 <remove_chain>
 8007844:	4603      	mov	r3, r0
 8007846:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800784a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800784e:	2b00      	cmp	r3, #0
 8007850:	d126      	bne.n	80078a0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe f866 	bl	8005928 <move_window>
 800785c:	4603      	mov	r3, r0
 800785e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007866:	3a01      	subs	r2, #1
 8007868:	615a      	str	r2, [r3, #20]
 800786a:	e019      	b.n	80078a0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800786c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007870:	2b00      	cmp	r3, #0
 8007872:	d115      	bne.n	80078a0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007874:	7fbb      	ldrb	r3, [r7, #30]
 8007876:	f003 0310 	and.w	r3, r3, #16
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <f_open+0x1ba>
					res = FR_NO_FILE;
 800787e:	2304      	movs	r3, #4
 8007880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007884:	e00c      	b.n	80078a0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007886:	79fb      	ldrb	r3, [r7, #7]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d007      	beq.n	80078a0 <f_open+0x1d4>
 8007890:	7fbb      	ldrb	r3, [r7, #30]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <f_open+0x1d4>
						res = FR_DENIED;
 800789a:	2307      	movs	r3, #7
 800789c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80078a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d128      	bne.n	80078fa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80078c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	f023 0301 	bic.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	bf14      	ite	ne
 80078d2:	2301      	movne	r3, #1
 80078d4:	2300      	moveq	r3, #0
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	f107 0318 	add.w	r3, r7, #24
 80078de:	4611      	mov	r1, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fd feef 	bl	80056c4 <inc_lock>
 80078e6:	4602      	mov	r2, r0
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <f_open+0x22e>
 80078f4:	2302      	movs	r3, #2
 80078f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80078fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f040 80a3 	bne.w	8007a4a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007908:	4611      	mov	r1, r2
 800790a:	4618      	mov	r0, r3
 800790c:	f7fe fd94 	bl	8006438 <ld_clust>
 8007910:	4602      	mov	r2, r0
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007918:	331c      	adds	r3, #28
 800791a:	4618      	mov	r0, r3
 800791c:	f7fd fd6c 	bl	80053f8 <ld_dword>
 8007920:	4602      	mov	r2, r0
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	88da      	ldrh	r2, [r3, #6]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	79fa      	ldrb	r2, [r7, #7]
 800793e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3330      	adds	r3, #48	; 0x30
 8007956:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800795a:	2100      	movs	r1, #0
 800795c:	4618      	mov	r0, r3
 800795e:	f7fd fdd6 	bl	800550e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b00      	cmp	r3, #0
 800796a:	d06e      	beq.n	8007a4a <f_open+0x37e>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d06a      	beq.n	8007a4a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	895b      	ldrh	r3, [r3, #10]
 8007980:	461a      	mov	r2, r3
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	899b      	ldrh	r3, [r3, #12]
 8007986:	fb02 f303 	mul.w	r3, r2, r3
 800798a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007998:	e016      	b.n	80079c8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe f87f 	bl	8005aa2 <get_fat>
 80079a4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80079a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d802      	bhi.n	80079b2 <f_open+0x2e6>
 80079ac:	2302      	movs	r3, #2
 80079ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80079b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b8:	d102      	bne.n	80079c0 <f_open+0x2f4>
 80079ba:	2301      	movs	r3, #1
 80079bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80079c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <f_open+0x30c>
 80079d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d8e0      	bhi.n	800799a <f_open+0x2ce>
				}
				fp->clust = clst;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80079de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d131      	bne.n	8007a4a <f_open+0x37e>
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	899b      	ldrh	r3, [r3, #12]
 80079ea:	461a      	mov	r2, r3
 80079ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80079f2:	fb01 f202 	mul.w	r2, r1, r2
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d026      	beq.n	8007a4a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe f82f 	bl	8005a64 <clust2sect>
 8007a06:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d103      	bne.n	8007a16 <f_open+0x34a>
						res = FR_INT_ERR;
 8007a0e:	2302      	movs	r3, #2
 8007a10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007a14:	e019      	b.n	8007a4a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	899b      	ldrh	r3, [r3, #12]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a24:	441a      	add	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	7858      	ldrb	r0, [r3, #1]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a1a      	ldr	r2, [r3, #32]
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f7fd fc67 	bl	800530c <disk_read>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <f_open+0x37e>
 8007a44:	2301      	movs	r3, #1
 8007a46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007a4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <f_open+0x38c>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007a58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3768      	adds	r7, #104	; 0x68
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08e      	sub	sp, #56	; 0x38
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f107 0214 	add.w	r2, r7, #20
 8007a82:	4611      	mov	r1, r2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff fda5 	bl	80075d4 <validate>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d107      	bne.n	8007aa8 <f_read+0x44>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	7d5b      	ldrb	r3, [r3, #21]
 8007a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <f_read+0x4a>
 8007aa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aac:	e135      	b.n	8007d1a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	7d1b      	ldrb	r3, [r3, #20]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <f_read+0x5a>
 8007aba:	2307      	movs	r3, #7
 8007abc:	e12d      	b.n	8007d1a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	f240 811e 	bls.w	8007d10 <f_read+0x2ac>
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007ad8:	e11a      	b.n	8007d10 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	8992      	ldrh	r2, [r2, #12]
 8007ae2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ae6:	fb01 f202 	mul.w	r2, r1, r2
 8007aea:	1a9b      	subs	r3, r3, r2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f040 80d5 	bne.w	8007c9c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	8992      	ldrh	r2, [r2, #12]
 8007afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	8952      	ldrh	r2, [r2, #10]
 8007b02:	3a01      	subs	r2, #1
 8007b04:	4013      	ands	r3, r2
 8007b06:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d12f      	bne.n	8007b6e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d103      	bne.n	8007b1e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8007b1c:	e013      	b.n	8007b46 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d007      	beq.n	8007b36 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7fe faa5 	bl	800607c <clmt_clust>
 8007b32:	6338      	str	r0, [r7, #48]	; 0x30
 8007b34:	e007      	b.n	8007b46 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f7fd ffaf 	bl	8005aa2 <get_fat>
 8007b44:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d804      	bhi.n	8007b56 <f_read+0xf2>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	755a      	strb	r2, [r3, #21]
 8007b52:	2302      	movs	r3, #2
 8007b54:	e0e1      	b.n	8007d1a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5c:	d104      	bne.n	8007b68 <f_read+0x104>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	755a      	strb	r2, [r3, #21]
 8007b64:	2301      	movs	r3, #1
 8007b66:	e0d8      	b.n	8007d1a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b6c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	f7fd ff74 	bl	8005a64 <clust2sect>
 8007b7c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <f_read+0x12a>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2202      	movs	r2, #2
 8007b88:	755a      	strb	r2, [r3, #21]
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e0c5      	b.n	8007d1a <f_read+0x2b6>
			sect += csect;
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	4413      	add	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	899b      	ldrh	r3, [r3, #12]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ba2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d041      	beq.n	8007c2e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	4413      	add	r3, r2
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	8952      	ldrh	r2, [r2, #10]
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d905      	bls.n	8007bc4 <f_read+0x160>
					cc = fs->csize - csect;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	895b      	ldrh	r3, [r3, #10]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	7858      	ldrb	r0, [r3, #1]
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bce:	f7fd fb9d 	bl	800530c <disk_read>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d004      	beq.n	8007be2 <f_read+0x17e>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	755a      	strb	r2, [r3, #21]
 8007bde:	2301      	movs	r3, #1
 8007be0:	e09b      	b.n	8007d1a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	7d1b      	ldrb	r3, [r3, #20]
 8007be6:	b25b      	sxtb	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da18      	bge.n	8007c1e <f_read+0x1ba>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a1a      	ldr	r2, [r3, #32]
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d911      	bls.n	8007c1e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6a1a      	ldr	r2, [r3, #32]
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	8992      	ldrh	r2, [r2, #12]
 8007c06:	fb02 f303 	mul.w	r3, r2, r3
 8007c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0c:	18d0      	adds	r0, r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	899b      	ldrh	r3, [r3, #12]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f7fd fc57 	bl	80054cc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	899b      	ldrh	r3, [r3, #12]
 8007c22:	461a      	mov	r2, r3
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	fb02 f303 	mul.w	r3, r2, r3
 8007c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007c2c:	e05c      	b.n	8007ce8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d02e      	beq.n	8007c96 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	7d1b      	ldrb	r3, [r3, #20]
 8007c3c:	b25b      	sxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	da18      	bge.n	8007c74 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	7858      	ldrb	r0, [r3, #1]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a1a      	ldr	r2, [r3, #32]
 8007c50:	2301      	movs	r3, #1
 8007c52:	f7fd fb7b 	bl	800534c <disk_write>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <f_read+0x202>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	755a      	strb	r2, [r3, #21]
 8007c62:	2301      	movs	r3, #1
 8007c64:	e059      	b.n	8007d1a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	7d1b      	ldrb	r3, [r3, #20]
 8007c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	7858      	ldrb	r0, [r3, #1]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c7e:	2301      	movs	r3, #1
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	f7fd fb43 	bl	800530c <disk_read>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d004      	beq.n	8007c96 <f_read+0x232>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	755a      	strb	r2, [r3, #21]
 8007c92:	2301      	movs	r3, #1
 8007c94:	e041      	b.n	8007d1a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	899b      	ldrh	r3, [r3, #12]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	8992      	ldrh	r2, [r2, #12]
 8007caa:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cae:	fb01 f202 	mul.w	r2, r1, r2
 8007cb2:	1a9b      	subs	r3, r3, r2
 8007cb4:	1ac3      	subs	r3, r0, r3
 8007cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d901      	bls.n	8007cc4 <f_read+0x260>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	8992      	ldrh	r2, [r2, #12]
 8007cd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cd6:	fb00 f202 	mul.w	r2, r0, r2
 8007cda:	1a9b      	subs	r3, r3, r2
 8007cdc:	440b      	add	r3, r1
 8007cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ce4:	f7fd fbf2 	bl	80054cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cec:	4413      	add	r3, r2
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	699a      	ldr	r2, [r3, #24]
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	441a      	add	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	619a      	str	r2, [r3, #24]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d02:	441a      	add	r2, r3
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f47f aee1 	bne.w	8007ada <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3738      	adds	r7, #56	; 0x38
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b08c      	sub	sp, #48	; 0x30
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
 8007d2e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f107 0210 	add.w	r2, r7, #16
 8007d40:	4611      	mov	r1, r2
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff fc46 	bl	80075d4 <validate>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d107      	bne.n	8007d66 <f_write+0x44>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	7d5b      	ldrb	r3, [r3, #21]
 8007d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <f_write+0x4a>
 8007d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d6a:	e16a      	b.n	8008042 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	7d1b      	ldrb	r3, [r3, #20]
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <f_write+0x5a>
 8007d78:	2307      	movs	r3, #7
 8007d7a:	e162      	b.n	8008042 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	699a      	ldr	r2, [r3, #24]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	441a      	add	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	f080 814c 	bcs.w	8008026 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	43db      	mvns	r3, r3
 8007d94:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007d96:	e146      	b.n	8008026 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	8992      	ldrh	r2, [r2, #12]
 8007da0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007da4:	fb01 f202 	mul.w	r2, r1, r2
 8007da8:	1a9b      	subs	r3, r3, r2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f040 80f1 	bne.w	8007f92 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	8992      	ldrh	r2, [r2, #12]
 8007db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	8952      	ldrh	r2, [r2, #10]
 8007dc0:	3a01      	subs	r2, #1
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d143      	bne.n	8007e54 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10c      	bne.n	8007dee <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d11a      	bne.n	8007e16 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2100      	movs	r1, #0
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe f8b1 	bl	8005f4c <create_chain>
 8007dea:	62b8      	str	r0, [r7, #40]	; 0x28
 8007dec:	e013      	b.n	8007e16 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d007      	beq.n	8007e06 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f7fe f93d 	bl	800607c <clmt_clust>
 8007e02:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e04:	e007      	b.n	8007e16 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7fe f89c 	bl	8005f4c <create_chain>
 8007e14:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 8109 	beq.w	8008030 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d104      	bne.n	8007e2e <f_write+0x10c>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2202      	movs	r2, #2
 8007e28:	755a      	strb	r2, [r3, #21]
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e109      	b.n	8008042 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e34:	d104      	bne.n	8007e40 <f_write+0x11e>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	755a      	strb	r2, [r3, #21]
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e100      	b.n	8008042 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e44:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d102      	bne.n	8007e54 <f_write+0x132>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e52:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	7d1b      	ldrb	r3, [r3, #20]
 8007e58:	b25b      	sxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	da18      	bge.n	8007e90 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	7858      	ldrb	r0, [r3, #1]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a1a      	ldr	r2, [r3, #32]
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f7fd fa6d 	bl	800534c <disk_write>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d004      	beq.n	8007e82 <f_write+0x160>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	755a      	strb	r2, [r3, #21]
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e0df      	b.n	8008042 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	7d1b      	ldrb	r3, [r3, #20]
 8007e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	4619      	mov	r1, r3
 8007e98:	4610      	mov	r0, r2
 8007e9a:	f7fd fde3 	bl	8005a64 <clust2sect>
 8007e9e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d104      	bne.n	8007eb0 <f_write+0x18e>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	755a      	strb	r2, [r3, #21]
 8007eac:	2302      	movs	r3, #2
 8007eae:	e0c8      	b.n	8008042 <f_write+0x320>
			sect += csect;
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	899b      	ldrh	r3, [r3, #12]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ec4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d043      	beq.n	8007f54 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	8952      	ldrh	r2, [r2, #10]
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d905      	bls.n	8007ee6 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	895b      	ldrh	r3, [r3, #10]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	7858      	ldrb	r0, [r3, #1]
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	69f9      	ldr	r1, [r7, #28]
 8007ef0:	f7fd fa2c 	bl	800534c <disk_write>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <f_write+0x1e2>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2201      	movs	r2, #1
 8007efe:	755a      	strb	r2, [r3, #21]
 8007f00:	2301      	movs	r3, #1
 8007f02:	e09e      	b.n	8008042 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a1a      	ldr	r2, [r3, #32]
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	6a3a      	ldr	r2, [r7, #32]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d918      	bls.n	8007f44 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a1a      	ldr	r2, [r3, #32]
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	8992      	ldrh	r2, [r2, #12]
 8007f24:	fb02 f303 	mul.w	r3, r2, r3
 8007f28:	69fa      	ldr	r2, [r7, #28]
 8007f2a:	18d1      	adds	r1, r2, r3
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	899b      	ldrh	r3, [r3, #12]
 8007f30:	461a      	mov	r2, r3
 8007f32:	f7fd facb 	bl	80054cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	7d1b      	ldrb	r3, [r3, #20]
 8007f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	899b      	ldrh	r3, [r3, #12]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	fb02 f303 	mul.w	r3, r2, r3
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007f52:	e04b      	b.n	8007fec <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d016      	beq.n	8007f8c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d210      	bcs.n	8007f8c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	7858      	ldrb	r0, [r3, #1]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f74:	2301      	movs	r3, #1
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	f7fd f9c8 	bl	800530c <disk_read>
 8007f7c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d004      	beq.n	8007f8c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	755a      	strb	r2, [r3, #21]
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e05a      	b.n	8008042 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	899b      	ldrh	r3, [r3, #12]
 8007f96:	4618      	mov	r0, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	8992      	ldrh	r2, [r2, #12]
 8007fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fa4:	fb01 f202 	mul.w	r2, r1, r2
 8007fa8:	1a9b      	subs	r3, r3, r2
 8007faa:	1ac3      	subs	r3, r0, r3
 8007fac:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d901      	bls.n	8007fba <f_write+0x298>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	8992      	ldrh	r2, [r2, #12]
 8007fc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fcc:	fb00 f202 	mul.w	r2, r0, r2
 8007fd0:	1a9b      	subs	r3, r3, r2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd6:	69f9      	ldr	r1, [r7, #28]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fd fa77 	bl	80054cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	7d1b      	ldrb	r3, [r3, #20]
 8007fe2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	4413      	add	r3, r2
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	699a      	ldr	r2, [r3, #24]
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	441a      	add	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	619a      	str	r2, [r3, #24]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	68da      	ldr	r2, [r3, #12]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	429a      	cmp	r2, r3
 800800a:	bf38      	it	cc
 800800c:	461a      	movcc	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	60da      	str	r2, [r3, #12]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	441a      	add	r2, r3
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	f47f aeb5 	bne.w	8007d98 <f_write+0x76>
 800802e:	e000      	b.n	8008032 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008030:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	7d1b      	ldrb	r3, [r3, #20]
 8008036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803a:	b2da      	uxtb	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3730      	adds	r7, #48	; 0x30
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b086      	sub	sp, #24
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f107 0208 	add.w	r2, r7, #8
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff faba 	bl	80075d4 <validate>
 8008060:	4603      	mov	r3, r0
 8008062:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d168      	bne.n	800813c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	7d1b      	ldrb	r3, [r3, #20]
 800806e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008072:	2b00      	cmp	r3, #0
 8008074:	d062      	beq.n	800813c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	7d1b      	ldrb	r3, [r3, #20]
 800807a:	b25b      	sxtb	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	da15      	bge.n	80080ac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	7858      	ldrb	r0, [r3, #1]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1a      	ldr	r2, [r3, #32]
 800808e:	2301      	movs	r3, #1
 8008090:	f7fd f95c 	bl	800534c <disk_write>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <f_sync+0x54>
 800809a:	2301      	movs	r3, #1
 800809c:	e04f      	b.n	800813e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	7d1b      	ldrb	r3, [r3, #20]
 80080a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80080ac:	f7fd f88c 	bl	80051c8 <get_fattime>
 80080b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	4619      	mov	r1, r3
 80080ba:	4610      	mov	r0, r2
 80080bc:	f7fd fc34 	bl	8005928 <move_window>
 80080c0:	4603      	mov	r3, r0
 80080c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d138      	bne.n	800813c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	330b      	adds	r3, #11
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	330b      	adds	r3, #11
 80080da:	f042 0220 	orr.w	r2, r2, #32
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	461a      	mov	r2, r3
 80080ec:	68f9      	ldr	r1, [r7, #12]
 80080ee:	f7fe f9c2 	bl	8006476 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f103 021c 	add.w	r2, r3, #28
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	4619      	mov	r1, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	f7fd f9b8 	bl	8005474 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3316      	adds	r3, #22
 8008108:	6939      	ldr	r1, [r7, #16]
 800810a:	4618      	mov	r0, r3
 800810c:	f7fd f9b2 	bl	8005474 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3312      	adds	r3, #18
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f7fd f991 	bl	800543e <st_word>
					fs->wflag = 1;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2201      	movs	r2, #1
 8008120:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	4618      	mov	r0, r3
 8008126:	f7fd fc2d 	bl	8005984 <sync_fs>
 800812a:	4603      	mov	r3, r0
 800812c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	7d1b      	ldrb	r3, [r3, #20]
 8008132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008136:	b2da      	uxtb	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800813c:	7dfb      	ldrb	r3, [r7, #23]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff ff7b 	bl	800804a <f_sync>
 8008154:	4603      	mov	r3, r0
 8008156:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d118      	bne.n	8008190 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f107 0208 	add.w	r2, r7, #8
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff fa34 	bl	80075d4 <validate>
 800816c:	4603      	mov	r3, r0
 800816e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10c      	bne.n	8008190 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	4618      	mov	r0, r3
 800817c:	f7fd fb30 	bl	80057e0 <dec_lock>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d102      	bne.n	8008190 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b092      	sub	sp, #72	; 0x48
 800819e:	af00      	add	r7, sp, #0
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	60b9      	str	r1, [r7, #8]
 80081a4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80081a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80081aa:	f107 030c 	add.w	r3, r7, #12
 80081ae:	2200      	movs	r2, #0
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe ff89 	bl	80070c8 <find_volume>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80081bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f040 8099 	bne.w	80082f8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80081c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	3b02      	subs	r3, #2
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d804      	bhi.n	80081e4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	e089      	b.n	80082f8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80081e4:	2300      	movs	r3, #0
 80081e6:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d128      	bne.n	8008242 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80081f0:	2302      	movs	r3, #2
 80081f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80081f8:	f107 0314 	add.w	r3, r7, #20
 80081fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fd fc4f 	bl	8005aa2 <get_fat>
 8008204:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820c:	d103      	bne.n	8008216 <f_getfree+0x7c>
 800820e:	2301      	movs	r3, #1
 8008210:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008214:	e063      	b.n	80082de <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008218:	2b01      	cmp	r3, #1
 800821a:	d103      	bne.n	8008224 <f_getfree+0x8a>
 800821c:	2302      	movs	r3, #2
 800821e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008222:	e05c      	b.n	80082de <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008226:	2b00      	cmp	r3, #0
 8008228:	d102      	bne.n	8008230 <f_getfree+0x96>
 800822a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800822c:	3301      	adds	r3, #1
 800822e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008232:	3301      	adds	r3, #1
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800823c:	429a      	cmp	r2, r3
 800823e:	d3db      	bcc.n	80081f8 <f_getfree+0x5e>
 8008240:	e04d      	b.n	80082de <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
 8008252:	2300      	movs	r3, #0
 8008254:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008258:	2b00      	cmp	r3, #0
 800825a:	d113      	bne.n	8008284 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800825c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	63ba      	str	r2, [r7, #56]	; 0x38
 8008264:	4619      	mov	r1, r3
 8008266:	f7fd fb5f 	bl	8005928 <move_window>
 800826a:	4603      	mov	r3, r0
 800826c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008270:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008274:	2b00      	cmp	r3, #0
 8008276:	d131      	bne.n	80082dc <f_getfree+0x142>
							p = fs->win;
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	3338      	adds	r3, #56	; 0x38
 800827c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	899b      	ldrh	r3, [r3, #12]
 8008282:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d10f      	bne.n	80082ac <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800828c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800828e:	f7fd f89b 	bl	80053c8 <ld_word>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d102      	bne.n	800829e <f_getfree+0x104>
 8008298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800829a:	3301      	adds	r3, #1
 800829c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	3302      	adds	r3, #2
 80082a2:	633b      	str	r3, [r7, #48]	; 0x30
 80082a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a6:	3b02      	subs	r3, #2
 80082a8:	637b      	str	r3, [r7, #52]	; 0x34
 80082aa:	e010      	b.n	80082ce <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80082ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ae:	f7fd f8a3 	bl	80053f8 <ld_dword>
 80082b2:	4603      	mov	r3, r0
 80082b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d102      	bne.n	80082c2 <f_getfree+0x128>
 80082bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082be:	3301      	adds	r3, #1
 80082c0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	3304      	adds	r3, #4
 80082c6:	633b      	str	r3, [r7, #48]	; 0x30
 80082c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ca:	3b04      	subs	r3, #4
 80082cc:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80082ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d0:	3b01      	subs	r3, #1
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1bd      	bne.n	8008256 <f_getfree+0xbc>
 80082da:	e000      	b.n	80082de <f_getfree+0x144>
							if (res != FR_OK) break;
 80082dc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082e2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082e8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	791a      	ldrb	r2, [r3, #4]
 80082ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f0:	f042 0201 	orr.w	r2, r2, #1
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80082f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3748      	adds	r7, #72	; 0x48
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008318:	e01b      	b.n	8008352 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800831a:	f107 0310 	add.w	r3, r7, #16
 800831e:	f107 0114 	add.w	r1, r7, #20
 8008322:	2201      	movs	r2, #1
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff fb9d 	bl	8007a64 <f_read>
		if (rc != 1) break;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d116      	bne.n	800835e <f_gets+0x5a>
		c = s[0];
 8008330:	7d3b      	ldrb	r3, [r7, #20]
 8008332:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008334:	7dfb      	ldrb	r3, [r7, #23]
 8008336:	2b0d      	cmp	r3, #13
 8008338:	d100      	bne.n	800833c <f_gets+0x38>
 800833a:	e00a      	b.n	8008352 <f_gets+0x4e>
		*p++ = c;
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	61ba      	str	r2, [r7, #24]
 8008342:	7dfa      	ldrb	r2, [r7, #23]
 8008344:	701a      	strb	r2, [r3, #0]
		n++;
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	3301      	adds	r3, #1
 800834a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800834c:	7dfb      	ldrb	r3, [r7, #23]
 800834e:	2b0a      	cmp	r3, #10
 8008350:	d007      	beq.n	8008362 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	3b01      	subs	r3, #1
 8008356:	69fa      	ldr	r2, [r7, #28]
 8008358:	429a      	cmp	r2, r3
 800835a:	dbde      	blt.n	800831a <f_gets+0x16>
 800835c:	e002      	b.n	8008364 <f_gets+0x60>
		if (rc != 1) break;
 800835e:	bf00      	nop
 8008360:	e000      	b.n	8008364 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008362:	bf00      	nop
	}
	*p = 0;
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	2200      	movs	r2, #0
 8008368:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <f_gets+0x70>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	e000      	b.n	8008376 <f_gets+0x72>
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3720      	adds	r7, #32
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	460b      	mov	r3, r1
 8008388:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	2b0a      	cmp	r3, #10
 800838e:	d103      	bne.n	8008398 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008390:	210d      	movs	r1, #13
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff fff3 	bl	800837e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	db25      	blt.n	80083f0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	60fa      	str	r2, [r7, #12]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	4413      	add	r3, r2
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b3c      	cmp	r3, #60	; 0x3c
 80083b6:	dd12      	ble.n	80083de <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6818      	ldr	r0, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f103 010c 	add.w	r1, r3, #12
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	f107 0308 	add.w	r3, r7, #8
 80083c8:	f7ff fcab 	bl	8007d22 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d101      	bne.n	80083d8 <putc_bfd+0x5a>
 80083d4:	2300      	movs	r3, #0
 80083d6:	e001      	b.n	80083dc <putc_bfd+0x5e>
 80083d8:	f04f 33ff 	mov.w	r3, #4294967295
 80083dc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	1c5a      	adds	r2, r3, #1
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	609a      	str	r2, [r3, #8]
 80083ee:	e000      	b.n	80083f2 <putc_bfd+0x74>
	if (i < 0) return;
 80083f0:	bf00      	nop
}
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	db16      	blt.n	8008436 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f103 010c 	add.w	r1, r3, #12
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	461a      	mov	r2, r3
 8008418:	f107 030c 	add.w	r3, r7, #12
 800841c:	f7ff fc81 	bl	8007d22 <f_write>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d107      	bne.n	8008436 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	4293      	cmp	r3, r2
 800842e:	d102      	bne.n	8008436 <putc_flush+0x3e>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	e001      	b.n	800843a <putc_flush+0x42>
	return EOF;
 8008436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008442:	b480      	push	{r7}
 8008444:	b083      	sub	sp, #12
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	605a      	str	r2, [r3, #4]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	609a      	str	r2, [r3, #8]
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b096      	sub	sp, #88	; 0x58
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff ffe0 	bl	8008442 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008482:	e009      	b.n	8008498 <f_puts+0x2c>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	607a      	str	r2, [r7, #4]
 800848a:	781a      	ldrb	r2, [r3, #0]
 800848c:	f107 030c 	add.w	r3, r7, #12
 8008490:	4611      	mov	r1, r2
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff ff73 	bl	800837e <putc_bfd>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1f1      	bne.n	8008484 <f_puts+0x18>
	return putc_flush(&pb);
 80084a0:	f107 030c 	add.w	r3, r7, #12
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7ff ffa7 	bl	80083f8 <putc_flush>
 80084aa:	4603      	mov	r3, r0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3758      	adds	r7, #88	; 0x58
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	4613      	mov	r3, r2
 80084c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80084c2:	2301      	movs	r3, #1
 80084c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80084ca:	4b1f      	ldr	r3, [pc, #124]	; (8008548 <FATFS_LinkDriverEx+0x94>)
 80084cc:	7a5b      	ldrb	r3, [r3, #9]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d131      	bne.n	8008538 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80084d4:	4b1c      	ldr	r3, [pc, #112]	; (8008548 <FATFS_LinkDriverEx+0x94>)
 80084d6:	7a5b      	ldrb	r3, [r3, #9]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	461a      	mov	r2, r3
 80084dc:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <FATFS_LinkDriverEx+0x94>)
 80084de:	2100      	movs	r1, #0
 80084e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80084e2:	4b19      	ldr	r3, [pc, #100]	; (8008548 <FATFS_LinkDriverEx+0x94>)
 80084e4:	7a5b      	ldrb	r3, [r3, #9]
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	4a17      	ldr	r2, [pc, #92]	; (8008548 <FATFS_LinkDriverEx+0x94>)
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80084f2:	4b15      	ldr	r3, [pc, #84]	; (8008548 <FATFS_LinkDriverEx+0x94>)
 80084f4:	7a5b      	ldrb	r3, [r3, #9]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	4b13      	ldr	r3, [pc, #76]	; (8008548 <FATFS_LinkDriverEx+0x94>)
 80084fc:	4413      	add	r3, r2
 80084fe:	79fa      	ldrb	r2, [r7, #7]
 8008500:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008502:	4b11      	ldr	r3, [pc, #68]	; (8008548 <FATFS_LinkDriverEx+0x94>)
 8008504:	7a5b      	ldrb	r3, [r3, #9]
 8008506:	b2db      	uxtb	r3, r3
 8008508:	1c5a      	adds	r2, r3, #1
 800850a:	b2d1      	uxtb	r1, r2
 800850c:	4a0e      	ldr	r2, [pc, #56]	; (8008548 <FATFS_LinkDriverEx+0x94>)
 800850e:	7251      	strb	r1, [r2, #9]
 8008510:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008512:	7dbb      	ldrb	r3, [r7, #22]
 8008514:	3330      	adds	r3, #48	; 0x30
 8008516:	b2da      	uxtb	r2, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	3301      	adds	r3, #1
 8008520:	223a      	movs	r2, #58	; 0x3a
 8008522:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	3302      	adds	r3, #2
 8008528:	222f      	movs	r2, #47	; 0x2f
 800852a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	3303      	adds	r3, #3
 8008530:	2200      	movs	r2, #0
 8008532:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008538:	7dfb      	ldrb	r3, [r7, #23]
}
 800853a:	4618      	mov	r0, r3
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	200068a4 	.word	0x200068a4

0800854c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008556:	2200      	movs	r2, #0
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff ffaa 	bl	80084b4 <FATFS_LinkDriverEx>
 8008560:	4603      	mov	r3, r0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	6039      	str	r1, [r7, #0]
 8008576:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008578:	88fb      	ldrh	r3, [r7, #6]
 800857a:	2b7f      	cmp	r3, #127	; 0x7f
 800857c:	d802      	bhi.n	8008584 <ff_convert+0x18>
		c = chr;
 800857e:	88fb      	ldrh	r3, [r7, #6]
 8008580:	81fb      	strh	r3, [r7, #14]
 8008582:	e025      	b.n	80085d0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800858a:	88fb      	ldrh	r3, [r7, #6]
 800858c:	2bff      	cmp	r3, #255	; 0xff
 800858e:	d805      	bhi.n	800859c <ff_convert+0x30>
 8008590:	88fb      	ldrh	r3, [r7, #6]
 8008592:	3b80      	subs	r3, #128	; 0x80
 8008594:	4a12      	ldr	r2, [pc, #72]	; (80085e0 <ff_convert+0x74>)
 8008596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800859a:	e000      	b.n	800859e <ff_convert+0x32>
 800859c:	2300      	movs	r3, #0
 800859e:	81fb      	strh	r3, [r7, #14]
 80085a0:	e016      	b.n	80085d0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80085a2:	2300      	movs	r3, #0
 80085a4:	81fb      	strh	r3, [r7, #14]
 80085a6:	e009      	b.n	80085bc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80085a8:	89fb      	ldrh	r3, [r7, #14]
 80085aa:	4a0d      	ldr	r2, [pc, #52]	; (80085e0 <ff_convert+0x74>)
 80085ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085b0:	88fa      	ldrh	r2, [r7, #6]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d006      	beq.n	80085c4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80085b6:	89fb      	ldrh	r3, [r7, #14]
 80085b8:	3301      	adds	r3, #1
 80085ba:	81fb      	strh	r3, [r7, #14]
 80085bc:	89fb      	ldrh	r3, [r7, #14]
 80085be:	2b7f      	cmp	r3, #127	; 0x7f
 80085c0:	d9f2      	bls.n	80085a8 <ff_convert+0x3c>
 80085c2:	e000      	b.n	80085c6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80085c4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80085c6:	89fb      	ldrh	r3, [r7, #14]
 80085c8:	3380      	adds	r3, #128	; 0x80
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80085d0:	89fb      	ldrh	r3, [r7, #14]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	08009234 	.word	0x08009234

080085e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80085ee:	88fb      	ldrh	r3, [r7, #6]
 80085f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f4:	d201      	bcs.n	80085fa <ff_wtoupper+0x16>
 80085f6:	4b3e      	ldr	r3, [pc, #248]	; (80086f0 <ff_wtoupper+0x10c>)
 80085f8:	e000      	b.n	80085fc <ff_wtoupper+0x18>
 80085fa:	4b3e      	ldr	r3, [pc, #248]	; (80086f4 <ff_wtoupper+0x110>)
 80085fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	1c9a      	adds	r2, r3, #2
 8008602:	617a      	str	r2, [r7, #20]
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008608:	8a7b      	ldrh	r3, [r7, #18]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d068      	beq.n	80086e0 <ff_wtoupper+0xfc>
 800860e:	88fa      	ldrh	r2, [r7, #6]
 8008610:	8a7b      	ldrh	r3, [r7, #18]
 8008612:	429a      	cmp	r2, r3
 8008614:	d364      	bcc.n	80086e0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	1c9a      	adds	r2, r3, #2
 800861a:	617a      	str	r2, [r7, #20]
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	823b      	strh	r3, [r7, #16]
 8008620:	8a3b      	ldrh	r3, [r7, #16]
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	81fb      	strh	r3, [r7, #14]
 8008626:	8a3b      	ldrh	r3, [r7, #16]
 8008628:	b2db      	uxtb	r3, r3
 800862a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800862c:	88fa      	ldrh	r2, [r7, #6]
 800862e:	8a79      	ldrh	r1, [r7, #18]
 8008630:	8a3b      	ldrh	r3, [r7, #16]
 8008632:	440b      	add	r3, r1
 8008634:	429a      	cmp	r2, r3
 8008636:	da49      	bge.n	80086cc <ff_wtoupper+0xe8>
			switch (cmd) {
 8008638:	89fb      	ldrh	r3, [r7, #14]
 800863a:	2b08      	cmp	r3, #8
 800863c:	d84f      	bhi.n	80086de <ff_wtoupper+0xfa>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <ff_wtoupper+0x60>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	08008669 	.word	0x08008669
 8008648:	0800867b 	.word	0x0800867b
 800864c:	08008691 	.word	0x08008691
 8008650:	08008699 	.word	0x08008699
 8008654:	080086a1 	.word	0x080086a1
 8008658:	080086a9 	.word	0x080086a9
 800865c:	080086b1 	.word	0x080086b1
 8008660:	080086b9 	.word	0x080086b9
 8008664:	080086c1 	.word	0x080086c1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008668:	88fa      	ldrh	r2, [r7, #6]
 800866a:	8a7b      	ldrh	r3, [r7, #18]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	4413      	add	r3, r2
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	80fb      	strh	r3, [r7, #6]
 8008678:	e027      	b.n	80086ca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800867a:	88fa      	ldrh	r2, [r7, #6]
 800867c:	8a7b      	ldrh	r3, [r7, #18]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	b29b      	uxth	r3, r3
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	b29b      	uxth	r3, r3
 8008688:	88fa      	ldrh	r2, [r7, #6]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	80fb      	strh	r3, [r7, #6]
 800868e:	e01c      	b.n	80086ca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008690:	88fb      	ldrh	r3, [r7, #6]
 8008692:	3b10      	subs	r3, #16
 8008694:	80fb      	strh	r3, [r7, #6]
 8008696:	e018      	b.n	80086ca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008698:	88fb      	ldrh	r3, [r7, #6]
 800869a:	3b20      	subs	r3, #32
 800869c:	80fb      	strh	r3, [r7, #6]
 800869e:	e014      	b.n	80086ca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80086a0:	88fb      	ldrh	r3, [r7, #6]
 80086a2:	3b30      	subs	r3, #48	; 0x30
 80086a4:	80fb      	strh	r3, [r7, #6]
 80086a6:	e010      	b.n	80086ca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	3b1a      	subs	r3, #26
 80086ac:	80fb      	strh	r3, [r7, #6]
 80086ae:	e00c      	b.n	80086ca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80086b0:	88fb      	ldrh	r3, [r7, #6]
 80086b2:	3308      	adds	r3, #8
 80086b4:	80fb      	strh	r3, [r7, #6]
 80086b6:	e008      	b.n	80086ca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80086b8:	88fb      	ldrh	r3, [r7, #6]
 80086ba:	3b50      	subs	r3, #80	; 0x50
 80086bc:	80fb      	strh	r3, [r7, #6]
 80086be:	e004      	b.n	80086ca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80086c0:	88fb      	ldrh	r3, [r7, #6]
 80086c2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80086c6:	80fb      	strh	r3, [r7, #6]
 80086c8:	bf00      	nop
			}
			break;
 80086ca:	e008      	b.n	80086de <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80086cc:	89fb      	ldrh	r3, [r7, #14]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d195      	bne.n	80085fe <ff_wtoupper+0x1a>
 80086d2:	8a3b      	ldrh	r3, [r7, #16]
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	4413      	add	r3, r2
 80086da:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80086dc:	e78f      	b.n	80085fe <ff_wtoupper+0x1a>
			break;
 80086de:	bf00      	nop
	}

	return chr;
 80086e0:	88fb      	ldrh	r3, [r7, #6]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	08009334 	.word	0x08009334
 80086f4:	08009528 	.word	0x08009528

080086f8 <__errno>:
 80086f8:	4b01      	ldr	r3, [pc, #4]	; (8008700 <__errno+0x8>)
 80086fa:	6818      	ldr	r0, [r3, #0]
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	20000024 	.word	0x20000024

08008704 <__libc_init_array>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4d0d      	ldr	r5, [pc, #52]	; (800873c <__libc_init_array+0x38>)
 8008708:	4c0d      	ldr	r4, [pc, #52]	; (8008740 <__libc_init_array+0x3c>)
 800870a:	1b64      	subs	r4, r4, r5
 800870c:	10a4      	asrs	r4, r4, #2
 800870e:	2600      	movs	r6, #0
 8008710:	42a6      	cmp	r6, r4
 8008712:	d109      	bne.n	8008728 <__libc_init_array+0x24>
 8008714:	4d0b      	ldr	r5, [pc, #44]	; (8008744 <__libc_init_array+0x40>)
 8008716:	4c0c      	ldr	r4, [pc, #48]	; (8008748 <__libc_init_array+0x44>)
 8008718:	f000 fc8e 	bl	8009038 <_init>
 800871c:	1b64      	subs	r4, r4, r5
 800871e:	10a4      	asrs	r4, r4, #2
 8008720:	2600      	movs	r6, #0
 8008722:	42a6      	cmp	r6, r4
 8008724:	d105      	bne.n	8008732 <__libc_init_array+0x2e>
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	f855 3b04 	ldr.w	r3, [r5], #4
 800872c:	4798      	blx	r3
 800872e:	3601      	adds	r6, #1
 8008730:	e7ee      	b.n	8008710 <__libc_init_array+0xc>
 8008732:	f855 3b04 	ldr.w	r3, [r5], #4
 8008736:	4798      	blx	r3
 8008738:	3601      	adds	r6, #1
 800873a:	e7f2      	b.n	8008722 <__libc_init_array+0x1e>
 800873c:	08009620 	.word	0x08009620
 8008740:	08009620 	.word	0x08009620
 8008744:	08009620 	.word	0x08009620
 8008748:	08009624 	.word	0x08009624

0800874c <memset>:
 800874c:	4402      	add	r2, r0
 800874e:	4603      	mov	r3, r0
 8008750:	4293      	cmp	r3, r2
 8008752:	d100      	bne.n	8008756 <memset+0xa>
 8008754:	4770      	bx	lr
 8008756:	f803 1b01 	strb.w	r1, [r3], #1
 800875a:	e7f9      	b.n	8008750 <memset+0x4>

0800875c <siprintf>:
 800875c:	b40e      	push	{r1, r2, r3}
 800875e:	b500      	push	{lr}
 8008760:	b09c      	sub	sp, #112	; 0x70
 8008762:	ab1d      	add	r3, sp, #116	; 0x74
 8008764:	9002      	str	r0, [sp, #8]
 8008766:	9006      	str	r0, [sp, #24]
 8008768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800876c:	4809      	ldr	r0, [pc, #36]	; (8008794 <siprintf+0x38>)
 800876e:	9107      	str	r1, [sp, #28]
 8008770:	9104      	str	r1, [sp, #16]
 8008772:	4909      	ldr	r1, [pc, #36]	; (8008798 <siprintf+0x3c>)
 8008774:	f853 2b04 	ldr.w	r2, [r3], #4
 8008778:	9105      	str	r1, [sp, #20]
 800877a:	6800      	ldr	r0, [r0, #0]
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	a902      	add	r1, sp, #8
 8008780:	f000 f868 	bl	8008854 <_svfiprintf_r>
 8008784:	9b02      	ldr	r3, [sp, #8]
 8008786:	2200      	movs	r2, #0
 8008788:	701a      	strb	r2, [r3, #0]
 800878a:	b01c      	add	sp, #112	; 0x70
 800878c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008790:	b003      	add	sp, #12
 8008792:	4770      	bx	lr
 8008794:	20000024 	.word	0x20000024
 8008798:	ffff0208 	.word	0xffff0208

0800879c <__ssputs_r>:
 800879c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a0:	688e      	ldr	r6, [r1, #8]
 80087a2:	429e      	cmp	r6, r3
 80087a4:	4682      	mov	sl, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	4690      	mov	r8, r2
 80087aa:	461f      	mov	r7, r3
 80087ac:	d838      	bhi.n	8008820 <__ssputs_r+0x84>
 80087ae:	898a      	ldrh	r2, [r1, #12]
 80087b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087b4:	d032      	beq.n	800881c <__ssputs_r+0x80>
 80087b6:	6825      	ldr	r5, [r4, #0]
 80087b8:	6909      	ldr	r1, [r1, #16]
 80087ba:	eba5 0901 	sub.w	r9, r5, r1
 80087be:	6965      	ldr	r5, [r4, #20]
 80087c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087c8:	3301      	adds	r3, #1
 80087ca:	444b      	add	r3, r9
 80087cc:	106d      	asrs	r5, r5, #1
 80087ce:	429d      	cmp	r5, r3
 80087d0:	bf38      	it	cc
 80087d2:	461d      	movcc	r5, r3
 80087d4:	0553      	lsls	r3, r2, #21
 80087d6:	d531      	bpl.n	800883c <__ssputs_r+0xa0>
 80087d8:	4629      	mov	r1, r5
 80087da:	f000 fb63 	bl	8008ea4 <_malloc_r>
 80087de:	4606      	mov	r6, r0
 80087e0:	b950      	cbnz	r0, 80087f8 <__ssputs_r+0x5c>
 80087e2:	230c      	movs	r3, #12
 80087e4:	f8ca 3000 	str.w	r3, [sl]
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ee:	81a3      	strh	r3, [r4, #12]
 80087f0:	f04f 30ff 	mov.w	r0, #4294967295
 80087f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f8:	6921      	ldr	r1, [r4, #16]
 80087fa:	464a      	mov	r2, r9
 80087fc:	f000 fabe 	bl	8008d7c <memcpy>
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	6126      	str	r6, [r4, #16]
 800880e:	6165      	str	r5, [r4, #20]
 8008810:	444e      	add	r6, r9
 8008812:	eba5 0509 	sub.w	r5, r5, r9
 8008816:	6026      	str	r6, [r4, #0]
 8008818:	60a5      	str	r5, [r4, #8]
 800881a:	463e      	mov	r6, r7
 800881c:	42be      	cmp	r6, r7
 800881e:	d900      	bls.n	8008822 <__ssputs_r+0x86>
 8008820:	463e      	mov	r6, r7
 8008822:	6820      	ldr	r0, [r4, #0]
 8008824:	4632      	mov	r2, r6
 8008826:	4641      	mov	r1, r8
 8008828:	f000 fab6 	bl	8008d98 <memmove>
 800882c:	68a3      	ldr	r3, [r4, #8]
 800882e:	1b9b      	subs	r3, r3, r6
 8008830:	60a3      	str	r3, [r4, #8]
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	4433      	add	r3, r6
 8008836:	6023      	str	r3, [r4, #0]
 8008838:	2000      	movs	r0, #0
 800883a:	e7db      	b.n	80087f4 <__ssputs_r+0x58>
 800883c:	462a      	mov	r2, r5
 800883e:	f000 fba5 	bl	8008f8c <_realloc_r>
 8008842:	4606      	mov	r6, r0
 8008844:	2800      	cmp	r0, #0
 8008846:	d1e1      	bne.n	800880c <__ssputs_r+0x70>
 8008848:	6921      	ldr	r1, [r4, #16]
 800884a:	4650      	mov	r0, sl
 800884c:	f000 fabe 	bl	8008dcc <_free_r>
 8008850:	e7c7      	b.n	80087e2 <__ssputs_r+0x46>
	...

08008854 <_svfiprintf_r>:
 8008854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008858:	4698      	mov	r8, r3
 800885a:	898b      	ldrh	r3, [r1, #12]
 800885c:	061b      	lsls	r3, r3, #24
 800885e:	b09d      	sub	sp, #116	; 0x74
 8008860:	4607      	mov	r7, r0
 8008862:	460d      	mov	r5, r1
 8008864:	4614      	mov	r4, r2
 8008866:	d50e      	bpl.n	8008886 <_svfiprintf_r+0x32>
 8008868:	690b      	ldr	r3, [r1, #16]
 800886a:	b963      	cbnz	r3, 8008886 <_svfiprintf_r+0x32>
 800886c:	2140      	movs	r1, #64	; 0x40
 800886e:	f000 fb19 	bl	8008ea4 <_malloc_r>
 8008872:	6028      	str	r0, [r5, #0]
 8008874:	6128      	str	r0, [r5, #16]
 8008876:	b920      	cbnz	r0, 8008882 <_svfiprintf_r+0x2e>
 8008878:	230c      	movs	r3, #12
 800887a:	603b      	str	r3, [r7, #0]
 800887c:	f04f 30ff 	mov.w	r0, #4294967295
 8008880:	e0d1      	b.n	8008a26 <_svfiprintf_r+0x1d2>
 8008882:	2340      	movs	r3, #64	; 0x40
 8008884:	616b      	str	r3, [r5, #20]
 8008886:	2300      	movs	r3, #0
 8008888:	9309      	str	r3, [sp, #36]	; 0x24
 800888a:	2320      	movs	r3, #32
 800888c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008890:	f8cd 800c 	str.w	r8, [sp, #12]
 8008894:	2330      	movs	r3, #48	; 0x30
 8008896:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a40 <_svfiprintf_r+0x1ec>
 800889a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800889e:	f04f 0901 	mov.w	r9, #1
 80088a2:	4623      	mov	r3, r4
 80088a4:	469a      	mov	sl, r3
 80088a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088aa:	b10a      	cbz	r2, 80088b0 <_svfiprintf_r+0x5c>
 80088ac:	2a25      	cmp	r2, #37	; 0x25
 80088ae:	d1f9      	bne.n	80088a4 <_svfiprintf_r+0x50>
 80088b0:	ebba 0b04 	subs.w	fp, sl, r4
 80088b4:	d00b      	beq.n	80088ce <_svfiprintf_r+0x7a>
 80088b6:	465b      	mov	r3, fp
 80088b8:	4622      	mov	r2, r4
 80088ba:	4629      	mov	r1, r5
 80088bc:	4638      	mov	r0, r7
 80088be:	f7ff ff6d 	bl	800879c <__ssputs_r>
 80088c2:	3001      	adds	r0, #1
 80088c4:	f000 80aa 	beq.w	8008a1c <_svfiprintf_r+0x1c8>
 80088c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ca:	445a      	add	r2, fp
 80088cc:	9209      	str	r2, [sp, #36]	; 0x24
 80088ce:	f89a 3000 	ldrb.w	r3, [sl]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 80a2 	beq.w	8008a1c <_svfiprintf_r+0x1c8>
 80088d8:	2300      	movs	r3, #0
 80088da:	f04f 32ff 	mov.w	r2, #4294967295
 80088de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088e2:	f10a 0a01 	add.w	sl, sl, #1
 80088e6:	9304      	str	r3, [sp, #16]
 80088e8:	9307      	str	r3, [sp, #28]
 80088ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088ee:	931a      	str	r3, [sp, #104]	; 0x68
 80088f0:	4654      	mov	r4, sl
 80088f2:	2205      	movs	r2, #5
 80088f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f8:	4851      	ldr	r0, [pc, #324]	; (8008a40 <_svfiprintf_r+0x1ec>)
 80088fa:	f7f7 fc91 	bl	8000220 <memchr>
 80088fe:	9a04      	ldr	r2, [sp, #16]
 8008900:	b9d8      	cbnz	r0, 800893a <_svfiprintf_r+0xe6>
 8008902:	06d0      	lsls	r0, r2, #27
 8008904:	bf44      	itt	mi
 8008906:	2320      	movmi	r3, #32
 8008908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800890c:	0711      	lsls	r1, r2, #28
 800890e:	bf44      	itt	mi
 8008910:	232b      	movmi	r3, #43	; 0x2b
 8008912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008916:	f89a 3000 	ldrb.w	r3, [sl]
 800891a:	2b2a      	cmp	r3, #42	; 0x2a
 800891c:	d015      	beq.n	800894a <_svfiprintf_r+0xf6>
 800891e:	9a07      	ldr	r2, [sp, #28]
 8008920:	4654      	mov	r4, sl
 8008922:	2000      	movs	r0, #0
 8008924:	f04f 0c0a 	mov.w	ip, #10
 8008928:	4621      	mov	r1, r4
 800892a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800892e:	3b30      	subs	r3, #48	; 0x30
 8008930:	2b09      	cmp	r3, #9
 8008932:	d94e      	bls.n	80089d2 <_svfiprintf_r+0x17e>
 8008934:	b1b0      	cbz	r0, 8008964 <_svfiprintf_r+0x110>
 8008936:	9207      	str	r2, [sp, #28]
 8008938:	e014      	b.n	8008964 <_svfiprintf_r+0x110>
 800893a:	eba0 0308 	sub.w	r3, r0, r8
 800893e:	fa09 f303 	lsl.w	r3, r9, r3
 8008942:	4313      	orrs	r3, r2
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	46a2      	mov	sl, r4
 8008948:	e7d2      	b.n	80088f0 <_svfiprintf_r+0x9c>
 800894a:	9b03      	ldr	r3, [sp, #12]
 800894c:	1d19      	adds	r1, r3, #4
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	9103      	str	r1, [sp, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	bfbb      	ittet	lt
 8008956:	425b      	neglt	r3, r3
 8008958:	f042 0202 	orrlt.w	r2, r2, #2
 800895c:	9307      	strge	r3, [sp, #28]
 800895e:	9307      	strlt	r3, [sp, #28]
 8008960:	bfb8      	it	lt
 8008962:	9204      	strlt	r2, [sp, #16]
 8008964:	7823      	ldrb	r3, [r4, #0]
 8008966:	2b2e      	cmp	r3, #46	; 0x2e
 8008968:	d10c      	bne.n	8008984 <_svfiprintf_r+0x130>
 800896a:	7863      	ldrb	r3, [r4, #1]
 800896c:	2b2a      	cmp	r3, #42	; 0x2a
 800896e:	d135      	bne.n	80089dc <_svfiprintf_r+0x188>
 8008970:	9b03      	ldr	r3, [sp, #12]
 8008972:	1d1a      	adds	r2, r3, #4
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	9203      	str	r2, [sp, #12]
 8008978:	2b00      	cmp	r3, #0
 800897a:	bfb8      	it	lt
 800897c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008980:	3402      	adds	r4, #2
 8008982:	9305      	str	r3, [sp, #20]
 8008984:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a50 <_svfiprintf_r+0x1fc>
 8008988:	7821      	ldrb	r1, [r4, #0]
 800898a:	2203      	movs	r2, #3
 800898c:	4650      	mov	r0, sl
 800898e:	f7f7 fc47 	bl	8000220 <memchr>
 8008992:	b140      	cbz	r0, 80089a6 <_svfiprintf_r+0x152>
 8008994:	2340      	movs	r3, #64	; 0x40
 8008996:	eba0 000a 	sub.w	r0, r0, sl
 800899a:	fa03 f000 	lsl.w	r0, r3, r0
 800899e:	9b04      	ldr	r3, [sp, #16]
 80089a0:	4303      	orrs	r3, r0
 80089a2:	3401      	adds	r4, #1
 80089a4:	9304      	str	r3, [sp, #16]
 80089a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089aa:	4826      	ldr	r0, [pc, #152]	; (8008a44 <_svfiprintf_r+0x1f0>)
 80089ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089b0:	2206      	movs	r2, #6
 80089b2:	f7f7 fc35 	bl	8000220 <memchr>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d038      	beq.n	8008a2c <_svfiprintf_r+0x1d8>
 80089ba:	4b23      	ldr	r3, [pc, #140]	; (8008a48 <_svfiprintf_r+0x1f4>)
 80089bc:	bb1b      	cbnz	r3, 8008a06 <_svfiprintf_r+0x1b2>
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	3307      	adds	r3, #7
 80089c2:	f023 0307 	bic.w	r3, r3, #7
 80089c6:	3308      	adds	r3, #8
 80089c8:	9303      	str	r3, [sp, #12]
 80089ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089cc:	4433      	add	r3, r6
 80089ce:	9309      	str	r3, [sp, #36]	; 0x24
 80089d0:	e767      	b.n	80088a2 <_svfiprintf_r+0x4e>
 80089d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80089d6:	460c      	mov	r4, r1
 80089d8:	2001      	movs	r0, #1
 80089da:	e7a5      	b.n	8008928 <_svfiprintf_r+0xd4>
 80089dc:	2300      	movs	r3, #0
 80089de:	3401      	adds	r4, #1
 80089e0:	9305      	str	r3, [sp, #20]
 80089e2:	4619      	mov	r1, r3
 80089e4:	f04f 0c0a 	mov.w	ip, #10
 80089e8:	4620      	mov	r0, r4
 80089ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ee:	3a30      	subs	r2, #48	; 0x30
 80089f0:	2a09      	cmp	r2, #9
 80089f2:	d903      	bls.n	80089fc <_svfiprintf_r+0x1a8>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d0c5      	beq.n	8008984 <_svfiprintf_r+0x130>
 80089f8:	9105      	str	r1, [sp, #20]
 80089fa:	e7c3      	b.n	8008984 <_svfiprintf_r+0x130>
 80089fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a00:	4604      	mov	r4, r0
 8008a02:	2301      	movs	r3, #1
 8008a04:	e7f0      	b.n	80089e8 <_svfiprintf_r+0x194>
 8008a06:	ab03      	add	r3, sp, #12
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	462a      	mov	r2, r5
 8008a0c:	4b0f      	ldr	r3, [pc, #60]	; (8008a4c <_svfiprintf_r+0x1f8>)
 8008a0e:	a904      	add	r1, sp, #16
 8008a10:	4638      	mov	r0, r7
 8008a12:	f3af 8000 	nop.w
 8008a16:	1c42      	adds	r2, r0, #1
 8008a18:	4606      	mov	r6, r0
 8008a1a:	d1d6      	bne.n	80089ca <_svfiprintf_r+0x176>
 8008a1c:	89ab      	ldrh	r3, [r5, #12]
 8008a1e:	065b      	lsls	r3, r3, #25
 8008a20:	f53f af2c 	bmi.w	800887c <_svfiprintf_r+0x28>
 8008a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a26:	b01d      	add	sp, #116	; 0x74
 8008a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2c:	ab03      	add	r3, sp, #12
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	462a      	mov	r2, r5
 8008a32:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <_svfiprintf_r+0x1f8>)
 8008a34:	a904      	add	r1, sp, #16
 8008a36:	4638      	mov	r0, r7
 8008a38:	f000 f87a 	bl	8008b30 <_printf_i>
 8008a3c:	e7eb      	b.n	8008a16 <_svfiprintf_r+0x1c2>
 8008a3e:	bf00      	nop
 8008a40:	080095e4 	.word	0x080095e4
 8008a44:	080095ee 	.word	0x080095ee
 8008a48:	00000000 	.word	0x00000000
 8008a4c:	0800879d 	.word	0x0800879d
 8008a50:	080095ea 	.word	0x080095ea

08008a54 <_printf_common>:
 8008a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a58:	4616      	mov	r6, r2
 8008a5a:	4699      	mov	r9, r3
 8008a5c:	688a      	ldr	r2, [r1, #8]
 8008a5e:	690b      	ldr	r3, [r1, #16]
 8008a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a64:	4293      	cmp	r3, r2
 8008a66:	bfb8      	it	lt
 8008a68:	4613      	movlt	r3, r2
 8008a6a:	6033      	str	r3, [r6, #0]
 8008a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a70:	4607      	mov	r7, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	b10a      	cbz	r2, 8008a7a <_printf_common+0x26>
 8008a76:	3301      	adds	r3, #1
 8008a78:	6033      	str	r3, [r6, #0]
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	0699      	lsls	r1, r3, #26
 8008a7e:	bf42      	ittt	mi
 8008a80:	6833      	ldrmi	r3, [r6, #0]
 8008a82:	3302      	addmi	r3, #2
 8008a84:	6033      	strmi	r3, [r6, #0]
 8008a86:	6825      	ldr	r5, [r4, #0]
 8008a88:	f015 0506 	ands.w	r5, r5, #6
 8008a8c:	d106      	bne.n	8008a9c <_printf_common+0x48>
 8008a8e:	f104 0a19 	add.w	sl, r4, #25
 8008a92:	68e3      	ldr	r3, [r4, #12]
 8008a94:	6832      	ldr	r2, [r6, #0]
 8008a96:	1a9b      	subs	r3, r3, r2
 8008a98:	42ab      	cmp	r3, r5
 8008a9a:	dc26      	bgt.n	8008aea <_printf_common+0x96>
 8008a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008aa0:	1e13      	subs	r3, r2, #0
 8008aa2:	6822      	ldr	r2, [r4, #0]
 8008aa4:	bf18      	it	ne
 8008aa6:	2301      	movne	r3, #1
 8008aa8:	0692      	lsls	r2, r2, #26
 8008aaa:	d42b      	bmi.n	8008b04 <_printf_common+0xb0>
 8008aac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	47c0      	blx	r8
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d01e      	beq.n	8008af8 <_printf_common+0xa4>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	68e5      	ldr	r5, [r4, #12]
 8008abe:	6832      	ldr	r2, [r6, #0]
 8008ac0:	f003 0306 	and.w	r3, r3, #6
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	bf08      	it	eq
 8008ac8:	1aad      	subeq	r5, r5, r2
 8008aca:	68a3      	ldr	r3, [r4, #8]
 8008acc:	6922      	ldr	r2, [r4, #16]
 8008ace:	bf0c      	ite	eq
 8008ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ad4:	2500      	movne	r5, #0
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	bfc4      	itt	gt
 8008ada:	1a9b      	subgt	r3, r3, r2
 8008adc:	18ed      	addgt	r5, r5, r3
 8008ade:	2600      	movs	r6, #0
 8008ae0:	341a      	adds	r4, #26
 8008ae2:	42b5      	cmp	r5, r6
 8008ae4:	d11a      	bne.n	8008b1c <_printf_common+0xc8>
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	e008      	b.n	8008afc <_printf_common+0xa8>
 8008aea:	2301      	movs	r3, #1
 8008aec:	4652      	mov	r2, sl
 8008aee:	4649      	mov	r1, r9
 8008af0:	4638      	mov	r0, r7
 8008af2:	47c0      	blx	r8
 8008af4:	3001      	adds	r0, #1
 8008af6:	d103      	bne.n	8008b00 <_printf_common+0xac>
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295
 8008afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b00:	3501      	adds	r5, #1
 8008b02:	e7c6      	b.n	8008a92 <_printf_common+0x3e>
 8008b04:	18e1      	adds	r1, r4, r3
 8008b06:	1c5a      	adds	r2, r3, #1
 8008b08:	2030      	movs	r0, #48	; 0x30
 8008b0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b0e:	4422      	add	r2, r4
 8008b10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b18:	3302      	adds	r3, #2
 8008b1a:	e7c7      	b.n	8008aac <_printf_common+0x58>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	4622      	mov	r2, r4
 8008b20:	4649      	mov	r1, r9
 8008b22:	4638      	mov	r0, r7
 8008b24:	47c0      	blx	r8
 8008b26:	3001      	adds	r0, #1
 8008b28:	d0e6      	beq.n	8008af8 <_printf_common+0xa4>
 8008b2a:	3601      	adds	r6, #1
 8008b2c:	e7d9      	b.n	8008ae2 <_printf_common+0x8e>
	...

08008b30 <_printf_i>:
 8008b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b34:	7e0f      	ldrb	r7, [r1, #24]
 8008b36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b38:	2f78      	cmp	r7, #120	; 0x78
 8008b3a:	4691      	mov	r9, r2
 8008b3c:	4680      	mov	r8, r0
 8008b3e:	460c      	mov	r4, r1
 8008b40:	469a      	mov	sl, r3
 8008b42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b46:	d807      	bhi.n	8008b58 <_printf_i+0x28>
 8008b48:	2f62      	cmp	r7, #98	; 0x62
 8008b4a:	d80a      	bhi.n	8008b62 <_printf_i+0x32>
 8008b4c:	2f00      	cmp	r7, #0
 8008b4e:	f000 80d8 	beq.w	8008d02 <_printf_i+0x1d2>
 8008b52:	2f58      	cmp	r7, #88	; 0x58
 8008b54:	f000 80a3 	beq.w	8008c9e <_printf_i+0x16e>
 8008b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b60:	e03a      	b.n	8008bd8 <_printf_i+0xa8>
 8008b62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b66:	2b15      	cmp	r3, #21
 8008b68:	d8f6      	bhi.n	8008b58 <_printf_i+0x28>
 8008b6a:	a101      	add	r1, pc, #4	; (adr r1, 8008b70 <_printf_i+0x40>)
 8008b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b70:	08008bc9 	.word	0x08008bc9
 8008b74:	08008bdd 	.word	0x08008bdd
 8008b78:	08008b59 	.word	0x08008b59
 8008b7c:	08008b59 	.word	0x08008b59
 8008b80:	08008b59 	.word	0x08008b59
 8008b84:	08008b59 	.word	0x08008b59
 8008b88:	08008bdd 	.word	0x08008bdd
 8008b8c:	08008b59 	.word	0x08008b59
 8008b90:	08008b59 	.word	0x08008b59
 8008b94:	08008b59 	.word	0x08008b59
 8008b98:	08008b59 	.word	0x08008b59
 8008b9c:	08008ce9 	.word	0x08008ce9
 8008ba0:	08008c0d 	.word	0x08008c0d
 8008ba4:	08008ccb 	.word	0x08008ccb
 8008ba8:	08008b59 	.word	0x08008b59
 8008bac:	08008b59 	.word	0x08008b59
 8008bb0:	08008d0b 	.word	0x08008d0b
 8008bb4:	08008b59 	.word	0x08008b59
 8008bb8:	08008c0d 	.word	0x08008c0d
 8008bbc:	08008b59 	.word	0x08008b59
 8008bc0:	08008b59 	.word	0x08008b59
 8008bc4:	08008cd3 	.word	0x08008cd3
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	1d1a      	adds	r2, r3, #4
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	602a      	str	r2, [r5, #0]
 8008bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e0a3      	b.n	8008d24 <_printf_i+0x1f4>
 8008bdc:	6820      	ldr	r0, [r4, #0]
 8008bde:	6829      	ldr	r1, [r5, #0]
 8008be0:	0606      	lsls	r6, r0, #24
 8008be2:	f101 0304 	add.w	r3, r1, #4
 8008be6:	d50a      	bpl.n	8008bfe <_printf_i+0xce>
 8008be8:	680e      	ldr	r6, [r1, #0]
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	2e00      	cmp	r6, #0
 8008bee:	da03      	bge.n	8008bf8 <_printf_i+0xc8>
 8008bf0:	232d      	movs	r3, #45	; 0x2d
 8008bf2:	4276      	negs	r6, r6
 8008bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bf8:	485e      	ldr	r0, [pc, #376]	; (8008d74 <_printf_i+0x244>)
 8008bfa:	230a      	movs	r3, #10
 8008bfc:	e019      	b.n	8008c32 <_printf_i+0x102>
 8008bfe:	680e      	ldr	r6, [r1, #0]
 8008c00:	602b      	str	r3, [r5, #0]
 8008c02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c06:	bf18      	it	ne
 8008c08:	b236      	sxthne	r6, r6
 8008c0a:	e7ef      	b.n	8008bec <_printf_i+0xbc>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	6820      	ldr	r0, [r4, #0]
 8008c10:	1d19      	adds	r1, r3, #4
 8008c12:	6029      	str	r1, [r5, #0]
 8008c14:	0601      	lsls	r1, r0, #24
 8008c16:	d501      	bpl.n	8008c1c <_printf_i+0xec>
 8008c18:	681e      	ldr	r6, [r3, #0]
 8008c1a:	e002      	b.n	8008c22 <_printf_i+0xf2>
 8008c1c:	0646      	lsls	r6, r0, #25
 8008c1e:	d5fb      	bpl.n	8008c18 <_printf_i+0xe8>
 8008c20:	881e      	ldrh	r6, [r3, #0]
 8008c22:	4854      	ldr	r0, [pc, #336]	; (8008d74 <_printf_i+0x244>)
 8008c24:	2f6f      	cmp	r7, #111	; 0x6f
 8008c26:	bf0c      	ite	eq
 8008c28:	2308      	moveq	r3, #8
 8008c2a:	230a      	movne	r3, #10
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c32:	6865      	ldr	r5, [r4, #4]
 8008c34:	60a5      	str	r5, [r4, #8]
 8008c36:	2d00      	cmp	r5, #0
 8008c38:	bfa2      	ittt	ge
 8008c3a:	6821      	ldrge	r1, [r4, #0]
 8008c3c:	f021 0104 	bicge.w	r1, r1, #4
 8008c40:	6021      	strge	r1, [r4, #0]
 8008c42:	b90e      	cbnz	r6, 8008c48 <_printf_i+0x118>
 8008c44:	2d00      	cmp	r5, #0
 8008c46:	d04d      	beq.n	8008ce4 <_printf_i+0x1b4>
 8008c48:	4615      	mov	r5, r2
 8008c4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c4e:	fb03 6711 	mls	r7, r3, r1, r6
 8008c52:	5dc7      	ldrb	r7, [r0, r7]
 8008c54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c58:	4637      	mov	r7, r6
 8008c5a:	42bb      	cmp	r3, r7
 8008c5c:	460e      	mov	r6, r1
 8008c5e:	d9f4      	bls.n	8008c4a <_printf_i+0x11a>
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d10b      	bne.n	8008c7c <_printf_i+0x14c>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	07de      	lsls	r6, r3, #31
 8008c68:	d508      	bpl.n	8008c7c <_printf_i+0x14c>
 8008c6a:	6923      	ldr	r3, [r4, #16]
 8008c6c:	6861      	ldr	r1, [r4, #4]
 8008c6e:	4299      	cmp	r1, r3
 8008c70:	bfde      	ittt	le
 8008c72:	2330      	movle	r3, #48	; 0x30
 8008c74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c7c:	1b52      	subs	r2, r2, r5
 8008c7e:	6122      	str	r2, [r4, #16]
 8008c80:	f8cd a000 	str.w	sl, [sp]
 8008c84:	464b      	mov	r3, r9
 8008c86:	aa03      	add	r2, sp, #12
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	f7ff fee2 	bl	8008a54 <_printf_common>
 8008c90:	3001      	adds	r0, #1
 8008c92:	d14c      	bne.n	8008d2e <_printf_i+0x1fe>
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	b004      	add	sp, #16
 8008c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9e:	4835      	ldr	r0, [pc, #212]	; (8008d74 <_printf_i+0x244>)
 8008ca0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ca4:	6829      	ldr	r1, [r5, #0]
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cac:	6029      	str	r1, [r5, #0]
 8008cae:	061d      	lsls	r5, r3, #24
 8008cb0:	d514      	bpl.n	8008cdc <_printf_i+0x1ac>
 8008cb2:	07df      	lsls	r7, r3, #31
 8008cb4:	bf44      	itt	mi
 8008cb6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cba:	6023      	strmi	r3, [r4, #0]
 8008cbc:	b91e      	cbnz	r6, 8008cc6 <_printf_i+0x196>
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	f023 0320 	bic.w	r3, r3, #32
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	2310      	movs	r3, #16
 8008cc8:	e7b0      	b.n	8008c2c <_printf_i+0xfc>
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	f043 0320 	orr.w	r3, r3, #32
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	2378      	movs	r3, #120	; 0x78
 8008cd4:	4828      	ldr	r0, [pc, #160]	; (8008d78 <_printf_i+0x248>)
 8008cd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cda:	e7e3      	b.n	8008ca4 <_printf_i+0x174>
 8008cdc:	0659      	lsls	r1, r3, #25
 8008cde:	bf48      	it	mi
 8008ce0:	b2b6      	uxthmi	r6, r6
 8008ce2:	e7e6      	b.n	8008cb2 <_printf_i+0x182>
 8008ce4:	4615      	mov	r5, r2
 8008ce6:	e7bb      	b.n	8008c60 <_printf_i+0x130>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	6826      	ldr	r6, [r4, #0]
 8008cec:	6961      	ldr	r1, [r4, #20]
 8008cee:	1d18      	adds	r0, r3, #4
 8008cf0:	6028      	str	r0, [r5, #0]
 8008cf2:	0635      	lsls	r5, r6, #24
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	d501      	bpl.n	8008cfc <_printf_i+0x1cc>
 8008cf8:	6019      	str	r1, [r3, #0]
 8008cfa:	e002      	b.n	8008d02 <_printf_i+0x1d2>
 8008cfc:	0670      	lsls	r0, r6, #25
 8008cfe:	d5fb      	bpl.n	8008cf8 <_printf_i+0x1c8>
 8008d00:	8019      	strh	r1, [r3, #0]
 8008d02:	2300      	movs	r3, #0
 8008d04:	6123      	str	r3, [r4, #16]
 8008d06:	4615      	mov	r5, r2
 8008d08:	e7ba      	b.n	8008c80 <_printf_i+0x150>
 8008d0a:	682b      	ldr	r3, [r5, #0]
 8008d0c:	1d1a      	adds	r2, r3, #4
 8008d0e:	602a      	str	r2, [r5, #0]
 8008d10:	681d      	ldr	r5, [r3, #0]
 8008d12:	6862      	ldr	r2, [r4, #4]
 8008d14:	2100      	movs	r1, #0
 8008d16:	4628      	mov	r0, r5
 8008d18:	f7f7 fa82 	bl	8000220 <memchr>
 8008d1c:	b108      	cbz	r0, 8008d22 <_printf_i+0x1f2>
 8008d1e:	1b40      	subs	r0, r0, r5
 8008d20:	6060      	str	r0, [r4, #4]
 8008d22:	6863      	ldr	r3, [r4, #4]
 8008d24:	6123      	str	r3, [r4, #16]
 8008d26:	2300      	movs	r3, #0
 8008d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d2c:	e7a8      	b.n	8008c80 <_printf_i+0x150>
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	462a      	mov	r2, r5
 8008d32:	4649      	mov	r1, r9
 8008d34:	4640      	mov	r0, r8
 8008d36:	47d0      	blx	sl
 8008d38:	3001      	adds	r0, #1
 8008d3a:	d0ab      	beq.n	8008c94 <_printf_i+0x164>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	079b      	lsls	r3, r3, #30
 8008d40:	d413      	bmi.n	8008d6a <_printf_i+0x23a>
 8008d42:	68e0      	ldr	r0, [r4, #12]
 8008d44:	9b03      	ldr	r3, [sp, #12]
 8008d46:	4298      	cmp	r0, r3
 8008d48:	bfb8      	it	lt
 8008d4a:	4618      	movlt	r0, r3
 8008d4c:	e7a4      	b.n	8008c98 <_printf_i+0x168>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	4632      	mov	r2, r6
 8008d52:	4649      	mov	r1, r9
 8008d54:	4640      	mov	r0, r8
 8008d56:	47d0      	blx	sl
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d09b      	beq.n	8008c94 <_printf_i+0x164>
 8008d5c:	3501      	adds	r5, #1
 8008d5e:	68e3      	ldr	r3, [r4, #12]
 8008d60:	9903      	ldr	r1, [sp, #12]
 8008d62:	1a5b      	subs	r3, r3, r1
 8008d64:	42ab      	cmp	r3, r5
 8008d66:	dcf2      	bgt.n	8008d4e <_printf_i+0x21e>
 8008d68:	e7eb      	b.n	8008d42 <_printf_i+0x212>
 8008d6a:	2500      	movs	r5, #0
 8008d6c:	f104 0619 	add.w	r6, r4, #25
 8008d70:	e7f5      	b.n	8008d5e <_printf_i+0x22e>
 8008d72:	bf00      	nop
 8008d74:	080095f5 	.word	0x080095f5
 8008d78:	08009606 	.word	0x08009606

08008d7c <memcpy>:
 8008d7c:	440a      	add	r2, r1
 8008d7e:	4291      	cmp	r1, r2
 8008d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d84:	d100      	bne.n	8008d88 <memcpy+0xc>
 8008d86:	4770      	bx	lr
 8008d88:	b510      	push	{r4, lr}
 8008d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d92:	4291      	cmp	r1, r2
 8008d94:	d1f9      	bne.n	8008d8a <memcpy+0xe>
 8008d96:	bd10      	pop	{r4, pc}

08008d98 <memmove>:
 8008d98:	4288      	cmp	r0, r1
 8008d9a:	b510      	push	{r4, lr}
 8008d9c:	eb01 0402 	add.w	r4, r1, r2
 8008da0:	d902      	bls.n	8008da8 <memmove+0x10>
 8008da2:	4284      	cmp	r4, r0
 8008da4:	4623      	mov	r3, r4
 8008da6:	d807      	bhi.n	8008db8 <memmove+0x20>
 8008da8:	1e43      	subs	r3, r0, #1
 8008daa:	42a1      	cmp	r1, r4
 8008dac:	d008      	beq.n	8008dc0 <memmove+0x28>
 8008dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008db6:	e7f8      	b.n	8008daa <memmove+0x12>
 8008db8:	4402      	add	r2, r0
 8008dba:	4601      	mov	r1, r0
 8008dbc:	428a      	cmp	r2, r1
 8008dbe:	d100      	bne.n	8008dc2 <memmove+0x2a>
 8008dc0:	bd10      	pop	{r4, pc}
 8008dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dca:	e7f7      	b.n	8008dbc <memmove+0x24>

08008dcc <_free_r>:
 8008dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dce:	2900      	cmp	r1, #0
 8008dd0:	d044      	beq.n	8008e5c <_free_r+0x90>
 8008dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd6:	9001      	str	r0, [sp, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f1a1 0404 	sub.w	r4, r1, #4
 8008dde:	bfb8      	it	lt
 8008de0:	18e4      	addlt	r4, r4, r3
 8008de2:	f000 f913 	bl	800900c <__malloc_lock>
 8008de6:	4a1e      	ldr	r2, [pc, #120]	; (8008e60 <_free_r+0x94>)
 8008de8:	9801      	ldr	r0, [sp, #4]
 8008dea:	6813      	ldr	r3, [r2, #0]
 8008dec:	b933      	cbnz	r3, 8008dfc <_free_r+0x30>
 8008dee:	6063      	str	r3, [r4, #4]
 8008df0:	6014      	str	r4, [r2, #0]
 8008df2:	b003      	add	sp, #12
 8008df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008df8:	f000 b90e 	b.w	8009018 <__malloc_unlock>
 8008dfc:	42a3      	cmp	r3, r4
 8008dfe:	d908      	bls.n	8008e12 <_free_r+0x46>
 8008e00:	6825      	ldr	r5, [r4, #0]
 8008e02:	1961      	adds	r1, r4, r5
 8008e04:	428b      	cmp	r3, r1
 8008e06:	bf01      	itttt	eq
 8008e08:	6819      	ldreq	r1, [r3, #0]
 8008e0a:	685b      	ldreq	r3, [r3, #4]
 8008e0c:	1949      	addeq	r1, r1, r5
 8008e0e:	6021      	streq	r1, [r4, #0]
 8008e10:	e7ed      	b.n	8008dee <_free_r+0x22>
 8008e12:	461a      	mov	r2, r3
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	b10b      	cbz	r3, 8008e1c <_free_r+0x50>
 8008e18:	42a3      	cmp	r3, r4
 8008e1a:	d9fa      	bls.n	8008e12 <_free_r+0x46>
 8008e1c:	6811      	ldr	r1, [r2, #0]
 8008e1e:	1855      	adds	r5, r2, r1
 8008e20:	42a5      	cmp	r5, r4
 8008e22:	d10b      	bne.n	8008e3c <_free_r+0x70>
 8008e24:	6824      	ldr	r4, [r4, #0]
 8008e26:	4421      	add	r1, r4
 8008e28:	1854      	adds	r4, r2, r1
 8008e2a:	42a3      	cmp	r3, r4
 8008e2c:	6011      	str	r1, [r2, #0]
 8008e2e:	d1e0      	bne.n	8008df2 <_free_r+0x26>
 8008e30:	681c      	ldr	r4, [r3, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	6053      	str	r3, [r2, #4]
 8008e36:	4421      	add	r1, r4
 8008e38:	6011      	str	r1, [r2, #0]
 8008e3a:	e7da      	b.n	8008df2 <_free_r+0x26>
 8008e3c:	d902      	bls.n	8008e44 <_free_r+0x78>
 8008e3e:	230c      	movs	r3, #12
 8008e40:	6003      	str	r3, [r0, #0]
 8008e42:	e7d6      	b.n	8008df2 <_free_r+0x26>
 8008e44:	6825      	ldr	r5, [r4, #0]
 8008e46:	1961      	adds	r1, r4, r5
 8008e48:	428b      	cmp	r3, r1
 8008e4a:	bf04      	itt	eq
 8008e4c:	6819      	ldreq	r1, [r3, #0]
 8008e4e:	685b      	ldreq	r3, [r3, #4]
 8008e50:	6063      	str	r3, [r4, #4]
 8008e52:	bf04      	itt	eq
 8008e54:	1949      	addeq	r1, r1, r5
 8008e56:	6021      	streq	r1, [r4, #0]
 8008e58:	6054      	str	r4, [r2, #4]
 8008e5a:	e7ca      	b.n	8008df2 <_free_r+0x26>
 8008e5c:	b003      	add	sp, #12
 8008e5e:	bd30      	pop	{r4, r5, pc}
 8008e60:	200068b0 	.word	0x200068b0

08008e64 <sbrk_aligned>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	4e0e      	ldr	r6, [pc, #56]	; (8008ea0 <sbrk_aligned+0x3c>)
 8008e68:	460c      	mov	r4, r1
 8008e6a:	6831      	ldr	r1, [r6, #0]
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	b911      	cbnz	r1, 8008e76 <sbrk_aligned+0x12>
 8008e70:	f000 f8bc 	bl	8008fec <_sbrk_r>
 8008e74:	6030      	str	r0, [r6, #0]
 8008e76:	4621      	mov	r1, r4
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f000 f8b7 	bl	8008fec <_sbrk_r>
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	d00a      	beq.n	8008e98 <sbrk_aligned+0x34>
 8008e82:	1cc4      	adds	r4, r0, #3
 8008e84:	f024 0403 	bic.w	r4, r4, #3
 8008e88:	42a0      	cmp	r0, r4
 8008e8a:	d007      	beq.n	8008e9c <sbrk_aligned+0x38>
 8008e8c:	1a21      	subs	r1, r4, r0
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f000 f8ac 	bl	8008fec <_sbrk_r>
 8008e94:	3001      	adds	r0, #1
 8008e96:	d101      	bne.n	8008e9c <sbrk_aligned+0x38>
 8008e98:	f04f 34ff 	mov.w	r4, #4294967295
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	200068b4 	.word	0x200068b4

08008ea4 <_malloc_r>:
 8008ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea8:	1ccd      	adds	r5, r1, #3
 8008eaa:	f025 0503 	bic.w	r5, r5, #3
 8008eae:	3508      	adds	r5, #8
 8008eb0:	2d0c      	cmp	r5, #12
 8008eb2:	bf38      	it	cc
 8008eb4:	250c      	movcc	r5, #12
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	4607      	mov	r7, r0
 8008eba:	db01      	blt.n	8008ec0 <_malloc_r+0x1c>
 8008ebc:	42a9      	cmp	r1, r5
 8008ebe:	d905      	bls.n	8008ecc <_malloc_r+0x28>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	2600      	movs	r6, #0
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ecc:	4e2e      	ldr	r6, [pc, #184]	; (8008f88 <_malloc_r+0xe4>)
 8008ece:	f000 f89d 	bl	800900c <__malloc_lock>
 8008ed2:	6833      	ldr	r3, [r6, #0]
 8008ed4:	461c      	mov	r4, r3
 8008ed6:	bb34      	cbnz	r4, 8008f26 <_malloc_r+0x82>
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4638      	mov	r0, r7
 8008edc:	f7ff ffc2 	bl	8008e64 <sbrk_aligned>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	d14d      	bne.n	8008f82 <_malloc_r+0xde>
 8008ee6:	6834      	ldr	r4, [r6, #0]
 8008ee8:	4626      	mov	r6, r4
 8008eea:	2e00      	cmp	r6, #0
 8008eec:	d140      	bne.n	8008f70 <_malloc_r+0xcc>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	eb04 0803 	add.w	r8, r4, r3
 8008ef8:	f000 f878 	bl	8008fec <_sbrk_r>
 8008efc:	4580      	cmp	r8, r0
 8008efe:	d13a      	bne.n	8008f76 <_malloc_r+0xd2>
 8008f00:	6821      	ldr	r1, [r4, #0]
 8008f02:	3503      	adds	r5, #3
 8008f04:	1a6d      	subs	r5, r5, r1
 8008f06:	f025 0503 	bic.w	r5, r5, #3
 8008f0a:	3508      	adds	r5, #8
 8008f0c:	2d0c      	cmp	r5, #12
 8008f0e:	bf38      	it	cc
 8008f10:	250c      	movcc	r5, #12
 8008f12:	4629      	mov	r1, r5
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff ffa5 	bl	8008e64 <sbrk_aligned>
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	d02b      	beq.n	8008f76 <_malloc_r+0xd2>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	442b      	add	r3, r5
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	e00e      	b.n	8008f44 <_malloc_r+0xa0>
 8008f26:	6822      	ldr	r2, [r4, #0]
 8008f28:	1b52      	subs	r2, r2, r5
 8008f2a:	d41e      	bmi.n	8008f6a <_malloc_r+0xc6>
 8008f2c:	2a0b      	cmp	r2, #11
 8008f2e:	d916      	bls.n	8008f5e <_malloc_r+0xba>
 8008f30:	1961      	adds	r1, r4, r5
 8008f32:	42a3      	cmp	r3, r4
 8008f34:	6025      	str	r5, [r4, #0]
 8008f36:	bf18      	it	ne
 8008f38:	6059      	strne	r1, [r3, #4]
 8008f3a:	6863      	ldr	r3, [r4, #4]
 8008f3c:	bf08      	it	eq
 8008f3e:	6031      	streq	r1, [r6, #0]
 8008f40:	5162      	str	r2, [r4, r5]
 8008f42:	604b      	str	r3, [r1, #4]
 8008f44:	4638      	mov	r0, r7
 8008f46:	f104 060b 	add.w	r6, r4, #11
 8008f4a:	f000 f865 	bl	8009018 <__malloc_unlock>
 8008f4e:	f026 0607 	bic.w	r6, r6, #7
 8008f52:	1d23      	adds	r3, r4, #4
 8008f54:	1af2      	subs	r2, r6, r3
 8008f56:	d0b6      	beq.n	8008ec6 <_malloc_r+0x22>
 8008f58:	1b9b      	subs	r3, r3, r6
 8008f5a:	50a3      	str	r3, [r4, r2]
 8008f5c:	e7b3      	b.n	8008ec6 <_malloc_r+0x22>
 8008f5e:	6862      	ldr	r2, [r4, #4]
 8008f60:	42a3      	cmp	r3, r4
 8008f62:	bf0c      	ite	eq
 8008f64:	6032      	streq	r2, [r6, #0]
 8008f66:	605a      	strne	r2, [r3, #4]
 8008f68:	e7ec      	b.n	8008f44 <_malloc_r+0xa0>
 8008f6a:	4623      	mov	r3, r4
 8008f6c:	6864      	ldr	r4, [r4, #4]
 8008f6e:	e7b2      	b.n	8008ed6 <_malloc_r+0x32>
 8008f70:	4634      	mov	r4, r6
 8008f72:	6876      	ldr	r6, [r6, #4]
 8008f74:	e7b9      	b.n	8008eea <_malloc_r+0x46>
 8008f76:	230c      	movs	r3, #12
 8008f78:	603b      	str	r3, [r7, #0]
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	f000 f84c 	bl	8009018 <__malloc_unlock>
 8008f80:	e7a1      	b.n	8008ec6 <_malloc_r+0x22>
 8008f82:	6025      	str	r5, [r4, #0]
 8008f84:	e7de      	b.n	8008f44 <_malloc_r+0xa0>
 8008f86:	bf00      	nop
 8008f88:	200068b0 	.word	0x200068b0

08008f8c <_realloc_r>:
 8008f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f90:	4680      	mov	r8, r0
 8008f92:	4614      	mov	r4, r2
 8008f94:	460e      	mov	r6, r1
 8008f96:	b921      	cbnz	r1, 8008fa2 <_realloc_r+0x16>
 8008f98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	f7ff bf81 	b.w	8008ea4 <_malloc_r>
 8008fa2:	b92a      	cbnz	r2, 8008fb0 <_realloc_r+0x24>
 8008fa4:	f7ff ff12 	bl	8008dcc <_free_r>
 8008fa8:	4625      	mov	r5, r4
 8008faa:	4628      	mov	r0, r5
 8008fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb0:	f000 f838 	bl	8009024 <_malloc_usable_size_r>
 8008fb4:	4284      	cmp	r4, r0
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	d802      	bhi.n	8008fc0 <_realloc_r+0x34>
 8008fba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fbe:	d812      	bhi.n	8008fe6 <_realloc_r+0x5a>
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	f7ff ff6e 	bl	8008ea4 <_malloc_r>
 8008fc8:	4605      	mov	r5, r0
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d0ed      	beq.n	8008faa <_realloc_r+0x1e>
 8008fce:	42bc      	cmp	r4, r7
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	bf28      	it	cs
 8008fd6:	463a      	movcs	r2, r7
 8008fd8:	f7ff fed0 	bl	8008d7c <memcpy>
 8008fdc:	4631      	mov	r1, r6
 8008fde:	4640      	mov	r0, r8
 8008fe0:	f7ff fef4 	bl	8008dcc <_free_r>
 8008fe4:	e7e1      	b.n	8008faa <_realloc_r+0x1e>
 8008fe6:	4635      	mov	r5, r6
 8008fe8:	e7df      	b.n	8008faa <_realloc_r+0x1e>
	...

08008fec <_sbrk_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	4d06      	ldr	r5, [pc, #24]	; (8009008 <_sbrk_r+0x1c>)
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	4608      	mov	r0, r1
 8008ff6:	602b      	str	r3, [r5, #0]
 8008ff8:	f7f8 ff62 	bl	8001ec0 <_sbrk>
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	d102      	bne.n	8009006 <_sbrk_r+0x1a>
 8009000:	682b      	ldr	r3, [r5, #0]
 8009002:	b103      	cbz	r3, 8009006 <_sbrk_r+0x1a>
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	bd38      	pop	{r3, r4, r5, pc}
 8009008:	200068b8 	.word	0x200068b8

0800900c <__malloc_lock>:
 800900c:	4801      	ldr	r0, [pc, #4]	; (8009014 <__malloc_lock+0x8>)
 800900e:	f000 b811 	b.w	8009034 <__retarget_lock_acquire_recursive>
 8009012:	bf00      	nop
 8009014:	200068bc 	.word	0x200068bc

08009018 <__malloc_unlock>:
 8009018:	4801      	ldr	r0, [pc, #4]	; (8009020 <__malloc_unlock+0x8>)
 800901a:	f000 b80c 	b.w	8009036 <__retarget_lock_release_recursive>
 800901e:	bf00      	nop
 8009020:	200068bc 	.word	0x200068bc

08009024 <_malloc_usable_size_r>:
 8009024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009028:	1f18      	subs	r0, r3, #4
 800902a:	2b00      	cmp	r3, #0
 800902c:	bfbc      	itt	lt
 800902e:	580b      	ldrlt	r3, [r1, r0]
 8009030:	18c0      	addlt	r0, r0, r3
 8009032:	4770      	bx	lr

08009034 <__retarget_lock_acquire_recursive>:
 8009034:	4770      	bx	lr

08009036 <__retarget_lock_release_recursive>:
 8009036:	4770      	bx	lr

08009038 <_init>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	bf00      	nop
 800903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903e:	bc08      	pop	{r3}
 8009040:	469e      	mov	lr, r3
 8009042:	4770      	bx	lr

08009044 <_fini>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	bf00      	nop
 8009048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904a:	bc08      	pop	{r3}
 800904c:	469e      	mov	lr, r3
 800904e:	4770      	bx	lr
