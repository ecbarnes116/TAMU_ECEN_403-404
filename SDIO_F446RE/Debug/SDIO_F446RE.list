
SDIO_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d850  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  0800da20  0800da20  0001da20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e144  0800e144  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e144  0800e144  0001e144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e14c  0800e14c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e14c  0800e14c  0001e14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e150  0800e150  0001e150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f5c  200001dc  0800e330  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003138  0800e330  00023138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158be  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330e  00000000  00000000  00035aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00038dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00039f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054d2  00000000  00000000  0003af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017daf  00000000  00000000  00040432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4023  00000000  00000000  000581e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059ec  00000000  00000000  0013c254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800da08 	.word	0x0800da08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800da08 	.word	0x0800da08

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ef4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ef8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d013      	beq.n	8000f2c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f08:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f0c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00b      	beq.n	8000f2c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f14:	e000      	b.n	8000f18 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f16:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f9      	beq.n	8000f16 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f22:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_write>:
uint16_t delta_audio;
float delta_pressure;
uint16_t delta_acc;
//float delta_acc

int _write(int file, char *ptr, int length) {
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]

	for(i = 0; i < length; i++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	e009      	b.n	8000f64 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	60ba      	str	r2, [r7, #8]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ffc7 	bl	8000eec <ITM_SendChar>
	for(i = 0; i < length; i++) {
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbf1      	blt.n	8000f50 <_write+0x16>
	}

	return length;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <bufclear>:
	return i;
}


// Clear UART buffer for debugging
void bufclear(void) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	e007      	b.n	8000f94 <bufclear+0x1c>
		buffer[i] = '\0';
 8000f84:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <bufclear+0x30>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3301      	adds	r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b7f      	cmp	r3, #127	; 0x7f
 8000f98:	ddf4      	ble.n	8000f84 <bufclear+0xc>
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	200007d8 	.word	0x200007d8

08000fac <SDbufclear>:

void SDbufclear(void) {
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
	for(int i = 0; i < SD_BUFFER_SIZE; i++){
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	e007      	b.n	8000fc8 <SDbufclear+0x1c>
		SD_buffer[i] = '\0';
 8000fb8:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <SDbufclear+0x34>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SD_BUFFER_SIZE; i++){
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fce:	dbf3      	blt.n	8000fb8 <SDbufclear+0xc>
	}
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000858 	.word	0x20000858

08000fe4 <HAL_ADC_ConvHalfCpltCallback>:
// Size of buffer needs to be a multiple of number of ADC channels (minimum of 5)
// Needs to be divisible by the number of bytes in each line
// that I am writing to the SD card				<-- What did I mean by this???

// Called when ADC buffer is half filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	dmaFull = 0;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]

	fromADC_Ptr = &adc_data[0];
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000ff6:	601a      	str	r2, [r3, #0]
	dataReady = 1;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20001029 	.word	0x20001029
 8001010:	200007d4 	.word	0x200007d4
 8001014:	20000388 	.word	0x20000388
 8001018:	20001028 	.word	0x20001028

0800101c <HAL_ADC_ConvCpltCallback>:

// Called when ADC buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

	fromADC_Ptr = &adc_data[ADC_BUFFER_SIZE/2];
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_ADC_ConvCpltCallback+0x28>)
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001028:	601a      	str	r2, [r3, #0]

	dmaFull = 1;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_ADC_ConvCpltCallback+0x30>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
	dataReady = 1;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_ADC_ConvCpltCallback+0x34>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200007d4 	.word	0x200007d4
 8001048:	20000518 	.word	0x20000518
 800104c:	20001029 	.word	0x20001029
 8001050:	20001028 	.word	0x20001028

08001054 <writeSD>:





void writeSD(const void* buffer, uint16_t len) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
	// Moves the file read/write pointer to the end of the file
	fresult = f_lseek(&fil, f_size(&fil));
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <writeSD+0x3c>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4619      	mov	r1, r3
 8001066:	480a      	ldr	r0, [pc, #40]	; (8001090 <writeSD+0x3c>)
 8001068:	f008 fece 	bl	8009e08 <f_lseek>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <writeSD+0x40>)
 8001072:	701a      	strb	r2, [r3, #0]

	// Write the buffer (data worth half of DMA buffer) to the file
	fresult = f_write(&fil, buffer, len, &bw);
 8001074:	887a      	ldrh	r2, [r7, #2]
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <writeSD+0x44>)
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <writeSD+0x3c>)
 800107c:	f008 fc88 	bl	8009990 <f_write>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <writeSD+0x40>)
 8001086:	701a      	strb	r2, [r3, #0]
	// f_sync flushes the cached information of a writing file
	//
	// Performs the same process as f_close function but the file is left opened
	// and can continue read/write/seek operations to the file
//	fresult = f_sync(&fil);
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20002060 	.word	0x20002060
 8001094:	200030a8 	.word	0x200030a8
 8001098:	200030ac 	.word	0x200030ac

0800109c <processData>:





void processData() {
 800109c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a0:	b08c      	sub	sp, #48	; 0x30
 80010a2:	af08      	add	r7, sp, #32
	uint8_t channel = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
	uint16_t write_len = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	817b      	strh	r3, [r7, #10]

	// Keeps track of the "global sample" (i.e, every 4 ADC readings)
	uint8_t sample_index = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73bb      	strb	r3, [r7, #14]

	snprintf(SD_buffer, SD_BUFFER_SIZE, "%s", "\0"); // Empty char (null char)
 80010b0:	4b5a      	ldr	r3, [pc, #360]	; (800121c <processData+0x180>)
 80010b2:	4a5b      	ldr	r2, [pc, #364]	; (8001220 <processData+0x184>)
 80010b4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80010b8:	485a      	ldr	r0, [pc, #360]	; (8001224 <processData+0x188>)
 80010ba:	f00a fa17 	bl	800b4ec <sniprintf>

	for(uint8_t i = 0; i < (ADC_BUFFER_SIZE)/2; i++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	737b      	strb	r3, [r7, #13]
 80010c2:	e163      	b.n	800138c <processData+0x2f0>
		// Store the new value read into its respective array
		// audio_arr 	= [0, 30, 56, 70, 56, 30, 0]
		// pressure_arr = [0, 30, 56, 70, 56, 30, 0]
		//
		// index 0 of audio_arr corresponds with the same reading for pressure_arr
		if	   ((i % 4) == 0) {
 80010c4:	7b7b      	ldrb	r3, [r7, #13]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10f      	bne.n	80010f0 <processData+0x54>
			current_audio = fromADC_Ptr[i];
 80010d0:	4b55      	ldr	r3, [pc, #340]	; (8001228 <processData+0x18c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	7b7b      	ldrb	r3, [r7, #13]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b53      	ldr	r3, [pc, #332]	; (800122c <processData+0x190>)
 80010e0:	801a      	strh	r2, [r3, #0]
//			current_audio = current_audio * 1.0;

			audio_arr[sample_index] = current_audio;
 80010e2:	7bbb      	ldrb	r3, [r7, #14]
 80010e4:	4a51      	ldr	r2, [pc, #324]	; (800122c <processData+0x190>)
 80010e6:	8811      	ldrh	r1, [r2, #0]
 80010e8:	4a51      	ldr	r2, [pc, #324]	; (8001230 <processData+0x194>)
 80010ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010ee:	e04d      	b.n	800118c <processData+0xf0>
			// Write this value to the temp string when current_audio is written

			// current_time = some_function_to_get_time_in_micro_seconds()
			// time_arr[sample_index] = current_time
		}
		else if((i % 4) == 1) {
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d11e      	bne.n	800113a <processData+0x9e>
			current_pressure = fromADC_Ptr[i];
 80010fc:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <processData+0x18c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	7b7b      	ldrb	r3, [r7, #13]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001112:	4b48      	ldr	r3, [pc, #288]	; (8001234 <processData+0x198>)
 8001114:	edc3 7a00 	vstr	s15, [r3]
			// 14.62 mV/kPa
			//
			//
			current_pressure = current_pressure * 1.0;
 8001118:	4b46      	ldr	r3, [pc, #280]	; (8001234 <processData+0x198>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a45      	ldr	r2, [pc, #276]	; (8001234 <processData+0x198>)
 800111e:	6013      	str	r3, [r2, #0]

			pressure_arr[sample_index] = current_pressure;
 8001120:	4b44      	ldr	r3, [pc, #272]	; (8001234 <processData+0x198>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800112c:	ee17 2a90 	vmov	r2, s15
 8001130:	b291      	uxth	r1, r2
 8001132:	4a41      	ldr	r2, [pc, #260]	; (8001238 <processData+0x19c>)
 8001134:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001138:	e028      	b.n	800118c <processData+0xf0>

		}
		else if((i % 4) == 2) {
 800113a:	7b7b      	ldrb	r3, [r7, #13]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d109      	bne.n	800115a <processData+0xbe>
			current_acc_x = fromADC_Ptr[i];
 8001146:	4b38      	ldr	r3, [pc, #224]	; (8001228 <processData+0x18c>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	7b7b      	ldrb	r3, [r7, #13]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b39      	ldr	r3, [pc, #228]	; (800123c <processData+0x1a0>)
 8001156:	801a      	strh	r2, [r3, #0]
 8001158:	e018      	b.n	800118c <processData+0xf0>
		}
		else if((i % 4) == 3) {
 800115a:	7b7b      	ldrb	r3, [r7, #13]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b03      	cmp	r3, #3
 8001164:	d112      	bne.n	800118c <processData+0xf0>
			current_acc_y = fromADC_Ptr[i];
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <processData+0x18c>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	7b7b      	ldrb	r3, [r7, #13]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <processData+0x1a4>)
 8001176:	801a      	strh	r2, [r3, #0]

			// current_acc = abs(current_acc_x) + abs(current_acc_y);
			current_acc = current_acc_x;
 8001178:	4b30      	ldr	r3, [pc, #192]	; (800123c <processData+0x1a0>)
 800117a:	881a      	ldrh	r2, [r3, #0]
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <processData+0x1a8>)
 800117e:	801a      	strh	r2, [r3, #0]
			acc_arr[sample_index] = current_acc;
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	4a30      	ldr	r2, [pc, #192]	; (8001244 <processData+0x1a8>)
 8001184:	8811      	ldrh	r1, [r2, #0]
 8001186:	4a30      	ldr	r2, [pc, #192]	; (8001248 <processData+0x1ac>)
 8001188:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		// USE MAGNITUDE
		// Don't take sqroot of int, assign to float
		// current_acc = abs(current_acc_x) + abs(current_acc_y);
		current_acc = current_acc_x;
 800118c:	4b2b      	ldr	r3, [pc, #172]	; (800123c <processData+0x1a0>)
 800118e:	881a      	ldrh	r2, [r3, #0]
 8001190:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <processData+0x1a8>)
 8001192:	801a      	strh	r2, [r3, #0]

		// Treat every 4th reading like one reading
		if((i % 4) == 3) {
 8001194:	7b7b      	ldrb	r3, [r7, #13]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b03      	cmp	r3, #3
 800119e:	f040 80e6 	bne.w	800136e <processData+0x2d2>
			// Only want to get deltas every 4 readings on the 4th reading because all values
			// only update after 4 total readings from the ADC (4 values, one per reading)
			if(current_audio > previous_audio) {
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <processData+0x190>)
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <processData+0x1b0>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d908      	bls.n	80011c0 <processData+0x124>
				delta_audio = current_audio - previous_audio;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <processData+0x190>)
 80011b0:	881a      	ldrh	r2, [r3, #0]
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <processData+0x1b0>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <processData+0x1b4>)
 80011bc:	801a      	strh	r2, [r3, #0]
 80011be:	e002      	b.n	80011c6 <processData+0x12a>
			}
			else {
				delta_audio = 0;
 80011c0:	4b23      	ldr	r3, [pc, #140]	; (8001250 <processData+0x1b4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	801a      	strh	r2, [r3, #0]
			}
			if(current_pressure > previous_pressure) {
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <processData+0x198>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <processData+0x1b8>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	dd0b      	ble.n	80011f4 <processData+0x158>
				delta_pressure = current_pressure - previous_pressure;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <processData+0x198>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <processData+0x1b8>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <processData+0x1bc>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
 80011f2:	e003      	b.n	80011fc <processData+0x160>
			}
			else {
				delta_pressure = 0;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <processData+0x1bc>)
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
			}
			if(current_acc > previous_acc) {
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <processData+0x1a8>)
 80011fe:	881a      	ldrh	r2, [r3, #0]
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <processData+0x1c0>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d92d      	bls.n	8001264 <processData+0x1c8>
				delta_acc = current_acc - previous_acc;
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <processData+0x1a8>)
 800120a:	881a      	ldrh	r2, [r3, #0]
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <processData+0x1c0>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <processData+0x1c4>)
 8001216:	801a      	strh	r2, [r3, #0]
 8001218:	e027      	b.n	800126a <processData+0x1ce>
 800121a:	bf00      	nop
 800121c:	0800da20 	.word	0x0800da20
 8001220:	0800da24 	.word	0x0800da24
 8001224:	20000858 	.word	0x20000858
 8001228:	200007d4 	.word	0x200007d4
 800122c:	200030c0 	.word	0x200030c0
 8001230:	200006a8 	.word	0x200006a8
 8001234:	200030c4 	.word	0x200030c4
 8001238:	2000070c 	.word	0x2000070c
 800123c:	200030ca 	.word	0x200030ca
 8001240:	200030cc 	.word	0x200030cc
 8001244:	200030c8 	.word	0x200030c8
 8001248:	20000770 	.word	0x20000770
 800124c:	200030ce 	.word	0x200030ce
 8001250:	200030da 	.word	0x200030da
 8001254:	200030d0 	.word	0x200030d0
 8001258:	200030dc 	.word	0x200030dc
 800125c:	200030d4 	.word	0x200030d4
 8001260:	200030e0 	.word	0x200030e0
			}
			else {
				delta_acc = 0;
 8001264:	4b55      	ldr	r3, [pc, #340]	; (80013bc <processData+0x320>)
 8001266:	2200      	movs	r2, #0
 8001268:	801a      	strh	r2, [r3, #0]
			}

			// One day this needs to become a function call to a more robust algorithm
			// Do explosion detection here
			if((delta_audio >= THRESHOLD_AUDIO) || (delta_pressure >= THRESHOLD_PRESSURE) || (delta_acc >= THRESHOLD_ACCELERATION)) {
 800126a:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <processData+0x324>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	2b27      	cmp	r3, #39	; 0x27
 8001270:	d80d      	bhi.n	800128e <processData+0x1f2>
 8001272:	4b54      	ldr	r3, [pc, #336]	; (80013c4 <processData+0x328>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80013c8 <processData+0x32c>
 800127c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	da03      	bge.n	800128e <processData+0x1f2>
 8001286:	4b4d      	ldr	r3, [pc, #308]	; (80013bc <processData+0x320>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	2b27      	cmp	r3, #39	; 0x27
 800128c:	d905      	bls.n	800129a <processData+0x1fe>
				explosionDetected = 1;
 800128e:	4b4f      	ldr	r3, [pc, #316]	; (80013cc <processData+0x330>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
				SAVE_BUFFER_FILE = 1;
 8001294:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <processData+0x334>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
			}

			// FIXME: Sometimes doesn't work
			//
			// Edge case for very first ADC sample (first 4 readings) where previous information does not exist
			if((i <= 3) && (dmaFull == 0) && (cluster == 0) && (batch == 0)) {
 800129a:	7b7b      	ldrb	r3, [r7, #13]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d81c      	bhi.n	80012da <processData+0x23e>
 80012a0:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <processData+0x338>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d117      	bne.n	80012da <processData+0x23e>
 80012aa:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <processData+0x33c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d113      	bne.n	80012da <processData+0x23e>
 80012b2:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <processData+0x340>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10f      	bne.n	80012da <processData+0x23e>
				delta_audio = 0;
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <processData+0x324>)
 80012bc:	2200      	movs	r2, #0
 80012be:	801a      	strh	r2, [r3, #0]
				delta_pressure = 0;
 80012c0:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <processData+0x328>)
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
				delta_acc = 0;
 80012c8:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <processData+0x320>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	801a      	strh	r2, [r3, #0]

				explosionDetected = 0;
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <processData+0x330>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
				SAVE_BUFFER_FILE = 0;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <processData+0x334>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
			}

		    // Append new string using length of previously added string
			snprintf(SD_buffer + strlen(SD_buffer),
 80012da:	4841      	ldr	r0, [pc, #260]	; (80013e0 <processData+0x344>)
 80012dc:	f7fe ff98 	bl	8000210 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a3f      	ldr	r2, [pc, #252]	; (80013e0 <processData+0x344>)
 80012e4:	189c      	adds	r4, r3, r2
					SD_BUFFER_SIZE - strlen(SD_buffer),
 80012e6:	483e      	ldr	r0, [pc, #248]	; (80013e0 <processData+0x344>)
 80012e8:	f7fe ff92 	bl	8000210 <strlen>
 80012ec:	4603      	mov	r3, r0
			snprintf(SD_buffer + strlen(SD_buffer),
 80012ee:	f5c3 65fa 	rsb	r5, r3, #2000	; 0x7d0
 80012f2:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <processData+0x340>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	4698      	mov	r8, r3
 80012f8:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <processData+0x33c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461e      	mov	r6, r3
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <processData+0x330>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <processData+0x348>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <processData+0x34c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f93a 	bl	8000588 <__aeabi_f2d>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4934      	ldr	r1, [pc, #208]	; (80013ec <processData+0x350>)
 800131a:	8809      	ldrh	r1, [r1, #0]
 800131c:	4608      	mov	r0, r1
 800131e:	4928      	ldr	r1, [pc, #160]	; (80013c0 <processData+0x324>)
 8001320:	8809      	ldrh	r1, [r1, #0]
 8001322:	9107      	str	r1, [sp, #28]
 8001324:	9006      	str	r0, [sp, #24]
 8001326:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	9202      	str	r2, [sp, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	9600      	str	r6, [sp, #0]
 8001334:	4643      	mov	r3, r8
 8001336:	4a2e      	ldr	r2, [pc, #184]	; (80013f0 <processData+0x354>)
 8001338:	4629      	mov	r1, r5
 800133a:	4620      	mov	r0, r4
 800133c:	f00a f8d6 	bl	800b4ec <sniprintf>
					"%d,%d,%d,%d,%2.f,%d,d = %d\r\n",
					batch, cluster, explosionDetected, current_audio, current_pressure, current_acc, delta_audio);

			// The current samples will be the "previous" samples for the next samples
			// These are placed in this loop for the same reason that the deltas are placed here
			previous_audio = current_audio;
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <processData+0x348>)
 8001342:	881a      	ldrh	r2, [r3, #0]
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <processData+0x358>)
 8001346:	801a      	strh	r2, [r3, #0]
			previous_pressure = current_pressure;
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <processData+0x34c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a2a      	ldr	r2, [pc, #168]	; (80013f8 <processData+0x35c>)
 800134e:	6013      	str	r3, [r2, #0]
			previous_acc = current_acc;
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <processData+0x350>)
 8001352:	881a      	ldrh	r2, [r3, #0]
 8001354:	4b29      	ldr	r3, [pc, #164]	; (80013fc <processData+0x360>)
 8001356:	801a      	strh	r2, [r3, #0]

			previous_acc_x = current_acc_x;
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <processData+0x364>)
 800135a:	881a      	ldrh	r2, [r3, #0]
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <processData+0x368>)
 800135e:	801a      	strh	r2, [r3, #0]
			previous_acc_y = current_acc_y;
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <processData+0x36c>)
 8001362:	881a      	ldrh	r2, [r3, #0]
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <processData+0x370>)
 8001366:	801a      	strh	r2, [r3, #0]

			sample_index++;
 8001368:	7bbb      	ldrb	r3, [r7, #14]
 800136a:	3301      	adds	r3, #1
 800136c:	73bb      	strb	r3, [r7, #14]
		}

		// Use Friedlander waveform to estimate how long the explosion will last for,
		// then set flag to 0 when time reaches that value
		explosionDetected = 0;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <processData+0x330>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]

		// Increment channel counter to read from next channel
		if(channel < 3) {
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d803      	bhi.n	8001382 <processData+0x2e6>
			channel += 1;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	3301      	adds	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e001      	b.n	8001386 <processData+0x2ea>
		}
		else {
			channel = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < (ADC_BUFFER_SIZE)/2; i++) {
 8001386:	7b7b      	ldrb	r3, [r7, #13]
 8001388:	3301      	adds	r3, #1
 800138a:	737b      	strb	r3, [r7, #13]
 800138c:	7b7b      	ldrb	r3, [r7, #13]
 800138e:	2bc7      	cmp	r3, #199	; 0xc7
 8001390:	f67f ae98 	bls.w	80010c4 <processData+0x28>
		}
	}
	// Get length of huge buffer to be written to SD card
	write_len = strlen(SD_buffer);
 8001394:	4812      	ldr	r0, [pc, #72]	; (80013e0 <processData+0x344>)
 8001396:	f7fe ff3b 	bl	8000210 <strlen>
 800139a:	4603      	mov	r3, r0
 800139c:	817b      	strh	r3, [r7, #10]
	// Finally, write huge buffer to SD card
	writeSD(SD_buffer, write_len);
 800139e:	897b      	ldrh	r3, [r7, #10]
 80013a0:	4619      	mov	r1, r3
 80013a2:	480f      	ldr	r0, [pc, #60]	; (80013e0 <processData+0x344>)
 80013a4:	f7ff fe56 	bl	8001054 <writeSD>

	// Clear SD_buffer so new data can be written (next half of DMA buffer)
	SDbufclear();
 80013a8:	f7ff fe00 	bl	8000fac <SDbufclear>

	dataReady = 0;
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <processData+0x374>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013bc:	200030e0 	.word	0x200030e0
 80013c0:	200030da 	.word	0x200030da
 80013c4:	200030dc 	.word	0x200030dc
 80013c8:	42200000 	.word	0x42200000
 80013cc:	200030b4 	.word	0x200030b4
 80013d0:	200030b5 	.word	0x200030b5
 80013d4:	20001029 	.word	0x20001029
 80013d8:	200030b0 	.word	0x200030b0
 80013dc:	200030b2 	.word	0x200030b2
 80013e0:	20000858 	.word	0x20000858
 80013e4:	200030c0 	.word	0x200030c0
 80013e8:	200030c4 	.word	0x200030c4
 80013ec:	200030c8 	.word	0x200030c8
 80013f0:	0800da28 	.word	0x0800da28
 80013f4:	200030ce 	.word	0x200030ce
 80013f8:	200030d0 	.word	0x200030d0
 80013fc:	200030d4 	.word	0x200030d4
 8001400:	200030ca 	.word	0x200030ca
 8001404:	200030d6 	.word	0x200030d6
 8001408:	200030cc 	.word	0x200030cc
 800140c:	200030d8 	.word	0x200030d8
 8001410:	20001028 	.word	0x20001028

08001414 <saveBufferFile>:





void saveBufferFile() {
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
	char file_name[20];

	// Do something here
	fresult = f_close(&fil);
 800141a:	4811      	ldr	r0, [pc, #68]	; (8001460 <saveBufferFile+0x4c>)
 800141c:	f008 fcca 	bl	8009db4 <f_close>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <saveBufferFile+0x50>)
 8001426:	701a      	strb	r2, [r3, #0]

	// FIXME: This is janky, please fix lol
	// need to have variable length string for file name (depends on batch #)
	snprintf(file_name, BUFFER_SIZE, "DC_%d.csv", batch);
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <saveBufferFile+0x54>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	1d38      	adds	r0, r7, #4
 800142e:	4a0f      	ldr	r2, [pc, #60]	; (800146c <saveBufferFile+0x58>)
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	f00a f85b 	bl	800b4ec <sniprintf>
	snprintf(file_name, strlen(file_name)+1, "DC_%d.csv", batch);
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe fee9 	bl	8000210 <strlen>
 800143e:	4603      	mov	r3, r0
 8001440:	1c59      	adds	r1, r3, #1
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <saveBufferFile+0x54>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	1d38      	adds	r0, r7, #4
 8001448:	4a08      	ldr	r2, [pc, #32]	; (800146c <saveBufferFile+0x58>)
 800144a:	f00a f84f 	bl	800b4ec <sniprintf>

	f_rename("adc_data.csv", file_name);
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4807      	ldr	r0, [pc, #28]	; (8001470 <saveBufferFile+0x5c>)
 8001454:	f008 ff35 	bl	800a2c2 <f_rename>
}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20002060 	.word	0x20002060
 8001464:	200030a8 	.word	0x200030a8
 8001468:	200030b2 	.word	0x200030b2
 800146c:	0800da48 	.word	0x0800da48
 8001470:	0800da54 	.word	0x0800da54

08001474 <setupBufferFile>:





void setupBufferFile() {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	char *name = "adc_data.csv";
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <setupBufferFile+0x84>)
 800147c:	607b      	str	r3, [r7, #4]

	fresult = f_stat(name, &fno);
 800147e:	491f      	ldr	r1, [pc, #124]	; (80014fc <setupBufferFile+0x88>)
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f008 fee5 	bl	800a250 <f_stat>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <setupBufferFile+0x8c>)
 800148c:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK) {
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <setupBufferFile+0x8c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <setupBufferFile+0x30>
		printf("*%s* already exists!!!\n",name);
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	481a      	ldr	r0, [pc, #104]	; (8001504 <setupBufferFile+0x90>)
 800149a:	f009 ff99 	bl	800b3d0 <iprintf>
		bufclear();
 800149e:	f7ff fd6b 	bl	8000f78 <bufclear>
 80014a2:	e008      	b.n	80014b6 <setupBufferFile+0x42>
	}
	else {
		// FA_CREATE_ALWAYS
		// Creates a new file. If the file is existing, it will be truncated and overwritten.
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80014a4:	220b      	movs	r2, #11
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4817      	ldr	r0, [pc, #92]	; (8001508 <setupBufferFile+0x94>)
 80014aa:	f008 f8a5 	bl	80095f8 <f_open>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <setupBufferFile+0x8c>)
 80014b4:	701a      	strb	r2, [r3, #0]
	}

	if(fresult != FR_OK) {
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <setupBufferFile+0x8c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <setupBufferFile+0x5e>
		printf ("ERROR: no %d in creating file *%s*\n", fresult, name);
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <setupBufferFile+0x8c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4619      	mov	r1, r3
 80014c6:	4811      	ldr	r0, [pc, #68]	; (800150c <setupBufferFile+0x98>)
 80014c8:	f009 ff82 	bl	800b3d0 <iprintf>
		bufclear();
 80014cc:	f7ff fd54 	bl	8000f78 <bufclear>
 80014d0:	e005      	b.n	80014de <setupBufferFile+0x6a>
	}
	else {
		printf ("*%s* created successfully\n",name);
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	480e      	ldr	r0, [pc, #56]	; (8001510 <setupBufferFile+0x9c>)
 80014d6:	f009 ff7b 	bl	800b3d0 <iprintf>
		bufclear();
 80014da:	f7ff fd4d 	bl	8000f78 <bufclear>
	}

	fresult = f_printf(&fil, "time,explosion,audio,pressure,acceleration,delta_audio\r\n");
 80014de:	490d      	ldr	r1, [pc, #52]	; (8001514 <setupBufferFile+0xa0>)
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <setupBufferFile+0x94>)
 80014e2:	f009 f85f 	bl	800a5a4 <f_printf>
 80014e6:	4603      	mov	r3, r0
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <setupBufferFile+0x8c>)
 80014ec:	701a      	strb	r2, [r3, #0]
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	0800da54 	.word	0x0800da54
 80014fc:	20003090 	.word	0x20003090
 8001500:	200030a8 	.word	0x200030a8
 8001504:	0800da64 	.word	0x0800da64
 8001508:	20002060 	.word	0x20002060
 800150c:	0800da7c 	.word	0x0800da7c
 8001510:	0800daa0 	.word	0x0800daa0
 8001514:	0800dabc 	.word	0x0800dabc

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151e:	f000 fe65 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001522:	f000 f91d 	bl	8001760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001526:	f000 fad1 	bl	8001acc <MX_GPIO_Init>
  MX_DMA_Init();
 800152a:	f000 faaf 	bl	8001a8c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800152e:	f000 fa83 	bl	8001a38 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001532:	f000 f98b 	bl	800184c <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8001536:	f000 fa5f 	bl	80019f8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800153a:	f005 ffd7 	bl	80074ec <MX_FATFS_Init>
  MX_RTC_Init();
 800153e:	f000 fa01 	bl	8001944 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Start DMA buffer
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_data, ADC_BUFFER_SIZE);
 8001542:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001546:	496c      	ldr	r1, [pc, #432]	; (80016f8 <main+0x1e0>)
 8001548:	486c      	ldr	r0, [pc, #432]	; (80016fc <main+0x1e4>)
 800154a:	f000 ff29 	bl	80023a0 <HAL_ADC_Start_DMA>

  // Mount SD card
  fresult = f_mount(&fs, "", 0);
 800154e:	2200      	movs	r2, #0
 8001550:	496b      	ldr	r1, [pc, #428]	; (8001700 <main+0x1e8>)
 8001552:	486c      	ldr	r0, [pc, #432]	; (8001704 <main+0x1ec>)
 8001554:	f008 f80a 	bl	800956c <f_mount>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	4b6a      	ldr	r3, [pc, #424]	; (8001708 <main+0x1f0>)
 800155e:	701a      	strb	r2, [r3, #0]

  if(fresult != FR_OK){
 8001560:	4b69      	ldr	r3, [pc, #420]	; (8001708 <main+0x1f0>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <main+0x58>
	  printf("ERROR in mounting SD card...\n");
 8001568:	4868      	ldr	r0, [pc, #416]	; (800170c <main+0x1f4>)
 800156a:	f009 ffb7 	bl	800b4dc <puts>
 800156e:	e002      	b.n	8001576 <main+0x5e>
  }
  else {
	  printf("SD card mounted successfully...\n");
 8001570:	4867      	ldr	r0, [pc, #412]	; (8001710 <main+0x1f8>)
 8001572:	f009 ffb3 	bl	800b4dc <puts>
//  printf("SD card free space: \t%lu\n", free_space);
//  bufclear();

  // Turn this setup process into a function

  char *name = "adc_data.csv";
 8001576:	4b67      	ldr	r3, [pc, #412]	; (8001714 <main+0x1fc>)
 8001578:	60fb      	str	r3, [r7, #12]

  fresult = f_stat(name, &fno);
 800157a:	4967      	ldr	r1, [pc, #412]	; (8001718 <main+0x200>)
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f008 fe67 	bl	800a250 <f_stat>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	4b60      	ldr	r3, [pc, #384]	; (8001708 <main+0x1f0>)
 8001588:	701a      	strb	r2, [r3, #0]

  if (fresult == FR_OK) {
 800158a:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <main+0x1f0>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <main+0x88>
	  printf("*%s* already exists!!!\n",name);
 8001592:	68f9      	ldr	r1, [r7, #12]
 8001594:	4861      	ldr	r0, [pc, #388]	; (800171c <main+0x204>)
 8001596:	f009 ff1b 	bl	800b3d0 <iprintf>
	  bufclear();
 800159a:	f7ff fced 	bl	8000f78 <bufclear>
 800159e:	e008      	b.n	80015b2 <main+0x9a>
  }
  else {
	  fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80015a0:	220b      	movs	r2, #11
 80015a2:	68f9      	ldr	r1, [r7, #12]
 80015a4:	485e      	ldr	r0, [pc, #376]	; (8001720 <main+0x208>)
 80015a6:	f008 f827 	bl	80095f8 <f_open>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b56      	ldr	r3, [pc, #344]	; (8001708 <main+0x1f0>)
 80015b0:	701a      	strb	r2, [r3, #0]
  }
	  if(fresult != FR_OK) {
 80015b2:	4b55      	ldr	r3, [pc, #340]	; (8001708 <main+0x1f0>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d009      	beq.n	80015ce <main+0xb6>
		  printf ("ERROR: no %d in creating file *%s*\n", fresult, name);
 80015ba:	4b53      	ldr	r3, [pc, #332]	; (8001708 <main+0x1f0>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4858      	ldr	r0, [pc, #352]	; (8001724 <main+0x20c>)
 80015c4:	f009 ff04 	bl	800b3d0 <iprintf>
		  bufclear();
 80015c8:	f7ff fcd6 	bl	8000f78 <bufclear>
 80015cc:	e005      	b.n	80015da <main+0xc2>
	  }
	  else {
		  printf ("*%s* created successfully\n",name);
 80015ce:	68f9      	ldr	r1, [r7, #12]
 80015d0:	4855      	ldr	r0, [pc, #340]	; (8001728 <main+0x210>)
 80015d2:	f009 fefd 	bl	800b3d0 <iprintf>
		  bufclear();
 80015d6:	f7ff fccf 	bl	8000f78 <bufclear>
	  }

  fresult = f_printf(&fil, "batch,time,explosion,audio,pressure,acceleration,delta_audio\r\n");
 80015da:	4954      	ldr	r1, [pc, #336]	; (800172c <main+0x214>)
 80015dc:	4850      	ldr	r0, [pc, #320]	; (8001720 <main+0x208>)
 80015de:	f008 ffe1 	bl	800a5a4 <f_printf>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b48      	ldr	r3, [pc, #288]	; (8001708 <main+0x1f0>)
 80015e8:	701a      	strb	r2, [r3, #0]

  // Get starting tick value (start timer)
  int start = HAL_GetTick();
 80015ea:	f000 fe65 	bl	80022b8 <HAL_GetTick>
 80015ee:	4603      	mov	r3, r0
 80015f0:	60bb      	str	r3, [r7, #8]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(dataReady) {
 80015f2:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <main+0x218>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <main+0xf4>

		  // Read BUFFER_SIZE/2 data points from ADC and add to buffer
		  processData();
 80015fc:	f7ff fd4e 	bl	800109c <processData>
		  // Increment cluster count
		  cluster++;
 8001600:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <main+0x21c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b4a      	ldr	r3, [pc, #296]	; (8001734 <main+0x21c>)
 800160a:	701a      	strb	r2, [r3, #0]

	  	  }

	  // Stop when cluster is a certain value (leads to unmount SD card)
	  if((cluster >= CLUSTER_SIZE) && SAVE_BUFFER_FILE) {
 800160c:	4b49      	ldr	r3, [pc, #292]	; (8001734 <main+0x21c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2bc7      	cmp	r3, #199	; 0xc7
 8001612:	d928      	bls.n	8001666 <main+0x14e>
 8001614:	4b48      	ldr	r3, [pc, #288]	; (8001738 <main+0x220>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d024      	beq.n	8001666 <main+0x14e>
		  saveBufferStart = HAL_GetTick();
 800161c:	f000 fe4c 	bl	80022b8 <HAL_GetTick>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	4b45      	ldr	r3, [pc, #276]	; (800173c <main+0x224>)
 8001626:	601a      	str	r2, [r3, #0]
		  saveBufferFile();
 8001628:	f7ff fef4 	bl	8001414 <saveBufferFile>
		  setupBufferFile();
 800162c:	f7ff ff22 	bl	8001474 <setupBufferFile>
		  saveBufferStop = HAL_GetTick();
 8001630:	f000 fe42 	bl	80022b8 <HAL_GetTick>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	4b41      	ldr	r3, [pc, #260]	; (8001740 <main+0x228>)
 800163a:	601a      	str	r2, [r3, #0]

		  printf("Time wasted making saving buffer data and creating new buffer file: %d\r\n", saveBufferStop-saveBufferStart);
 800163c:	4b40      	ldr	r3, [pc, #256]	; (8001740 <main+0x228>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b3e      	ldr	r3, [pc, #248]	; (800173c <main+0x224>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	4619      	mov	r1, r3
 8001648:	483e      	ldr	r0, [pc, #248]	; (8001744 <main+0x22c>)
 800164a:	f009 fec1 	bl	800b3d0 <iprintf>

		  cluster = 0;
 800164e:	4b39      	ldr	r3, [pc, #228]	; (8001734 <main+0x21c>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
		  SAVE_BUFFER_FILE = 0;
 8001654:	4b38      	ldr	r3, [pc, #224]	; (8001738 <main+0x220>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]

		  batch++;
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <main+0x230>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b39      	ldr	r3, [pc, #228]	; (8001748 <main+0x230>)
 8001664:	801a      	strh	r2, [r3, #0]
		  // overwriteBufferFile();
	  }

	  // This will eventually turn into an external interrupt from the user
	  // pressing a button
	  if(batch >= 10) {
 8001666:	4b38      	ldr	r3, [pc, #224]	; (8001748 <main+0x230>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	2b09      	cmp	r3, #9
 800166c:	d800      	bhi.n	8001670 <main+0x158>
	  if(dataReady) {
 800166e:	e7c0      	b.n	80015f2 <main+0xda>
		  break;
 8001670:	bf00      	nop
	  }

  }

  int stop = HAL_GetTick();
 8001672:	f000 fe21 	bl	80022b8 <HAL_GetTick>
 8001676:	4603      	mov	r3, r0
 8001678:	607b      	str	r3, [r7, #4]

  printf("Total time to write %d samples to SD card (WITH printf): %d ms\n", (ADC_BUFFER_SIZE/8)*CLUSTER_SIZE*batch, (stop - start));
 800167a:	4b33      	ldr	r3, [pc, #204]	; (8001748 <main+0x230>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	f242 7310 	movw	r3, #10000	; 0x2710
 8001684:	fb03 f102 	mul.w	r1, r3, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	461a      	mov	r2, r3
 8001690:	482e      	ldr	r0, [pc, #184]	; (800174c <main+0x234>)
 8001692:	f009 fe9d 	bl	800b3d0 <iprintf>
//  printf("Samples per second: %f\n", 1.0*(ADC_BUFFER_SIZE/8)*CLUSTER_SIZE*batch/(stop - start));

  // Stop ADC DMA and disable ADC
  HAL_ADC_Stop_DMA(&hadc1);
 8001696:	4819      	ldr	r0, [pc, #100]	; (80016fc <main+0x1e4>)
 8001698:	f000 ff92 	bl	80025c0 <HAL_ADC_Stop_DMA>

  // Close buffer file
  f_close(&fil);
 800169c:	4820      	ldr	r0, [pc, #128]	; (8001720 <main+0x208>)
 800169e:	f008 fb89 	bl	8009db4 <f_close>
  if (fresult != FR_OK) {
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <main+0x1f0>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <main+0x1a4>
	  printf ("ERROR: no %d in closing file *%s*\n", fresult, name);
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <main+0x1f0>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4827      	ldr	r0, [pc, #156]	; (8001750 <main+0x238>)
 80016b4:	f009 fe8c 	bl	800b3d0 <iprintf>
	  bufclear();
 80016b8:	f7ff fc5e 	bl	8000f78 <bufclear>
  }

  // After while loop when break
  // Unmount SD card
  fresult = f_mount(NULL, "/", 1);
 80016bc:	2201      	movs	r2, #1
 80016be:	4925      	ldr	r1, [pc, #148]	; (8001754 <main+0x23c>)
 80016c0:	2000      	movs	r0, #0
 80016c2:	f007 ff53 	bl	800956c <f_mount>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <main+0x1f0>)
 80016cc:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) {
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <main+0x1f0>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d105      	bne.n	80016e2 <main+0x1ca>
	  printf("SD card unmounted successfully...\n");
 80016d6:	4820      	ldr	r0, [pc, #128]	; (8001758 <main+0x240>)
 80016d8:	f009 ff00 	bl	800b4dc <puts>
	  bufclear();
 80016dc:	f7ff fc4c 	bl	8000f78 <bufclear>
 80016e0:	e004      	b.n	80016ec <main+0x1d4>
  }
  else {
	  printf("ERROR: unmounting SD card\n");
 80016e2:	481e      	ldr	r0, [pc, #120]	; (800175c <main+0x244>)
 80016e4:	f009 fefa 	bl	800b4dc <puts>
	  bufclear();
 80016e8:	f7ff fc46 	bl	8000f78 <bufclear>
 80016ec:	2300      	movs	r3, #0
  }

  /* USER CODE END 3 */
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000388 	.word	0x20000388
 80016fc:	200001f8 	.word	0x200001f8
 8001700:	0800daf8 	.word	0x0800daf8
 8001704:	2000102c 	.word	0x2000102c
 8001708:	200030a8 	.word	0x200030a8
 800170c:	0800dafc 	.word	0x0800dafc
 8001710:	0800db1c 	.word	0x0800db1c
 8001714:	0800da54 	.word	0x0800da54
 8001718:	20003090 	.word	0x20003090
 800171c:	0800da64 	.word	0x0800da64
 8001720:	20002060 	.word	0x20002060
 8001724:	0800da7c 	.word	0x0800da7c
 8001728:	0800daa0 	.word	0x0800daa0
 800172c:	0800db3c 	.word	0x0800db3c
 8001730:	20001028 	.word	0x20001028
 8001734:	200030b0 	.word	0x200030b0
 8001738:	200030b5 	.word	0x200030b5
 800173c:	200030b8 	.word	0x200030b8
 8001740:	200030bc 	.word	0x200030bc
 8001744:	0800db7c 	.word	0x0800db7c
 8001748:	200030b2 	.word	0x200030b2
 800174c:	0800dbc8 	.word	0x0800dbc8
 8001750:	0800dc08 	.word	0x0800dc08
 8001754:	0800dc2c 	.word	0x0800dc2c
 8001758:	0800dc30 	.word	0x0800dc30
 800175c:	0800dc54 	.word	0x0800dc54

08001760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b094      	sub	sp, #80	; 0x50
 8001764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	2234      	movs	r2, #52	; 0x34
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f009 f9bc 	bl	800aaec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <SystemClock_Config+0xe4>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a2d      	ldr	r2, [pc, #180]	; (8001844 <SystemClock_Config+0xe4>)
 800178e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <SystemClock_Config+0xe4>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a0:	2300      	movs	r3, #0
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <SystemClock_Config+0xe8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a27      	ldr	r2, [pc, #156]	; (8001848 <SystemClock_Config+0xe8>)
 80017aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <SystemClock_Config+0xe8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80017bc:	230a      	movs	r3, #10
 80017be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017c0:	2301      	movs	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c4:	2301      	movs	r3, #1
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c8:	2310      	movs	r3, #16
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017cc:	2301      	movs	r3, #1
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d0:	2302      	movs	r3, #2
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017d8:	2308      	movs	r3, #8
 80017da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80017dc:	23b4      	movs	r3, #180	; 0xb4
 80017de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80017e4:	2309      	movs	r3, #9
 80017e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017e8:	2302      	movs	r3, #2
 80017ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 ff97 	bl	8004724 <HAL_RCC_OscConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80017fc:	f000 f9ee 	bl	8001bdc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001800:	f002 f8cc 	bl	800399c <HAL_PWREx_EnableOverDrive>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800180a:	f000 f9e7 	bl	8001bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180e:	230f      	movs	r3, #15
 8001810:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001812:	2302      	movs	r3, #2
 8001814:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800181a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800181e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001824:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001826:	f107 0308 	add.w	r3, r7, #8
 800182a:	2105      	movs	r1, #5
 800182c:	4618      	mov	r0, r3
 800182e:	f002 f905 	bl	8003a3c <HAL_RCC_ClockConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001838:	f000 f9d0 	bl	8001bdc <Error_Handler>
  }
}
 800183c:	bf00      	nop
 800183e:	3750      	adds	r7, #80	; 0x50
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40023800 	.word	0x40023800
 8001848:	40007000 	.word	0x40007000

0800184c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001852:	463b      	mov	r3, r7
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <MX_ADC1_Init+0xec>)
 8001860:	4a36      	ldr	r2, [pc, #216]	; (800193c <MX_ADC1_Init+0xf0>)
 8001862:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001864:	4b34      	ldr	r3, [pc, #208]	; (8001938 <MX_ADC1_Init+0xec>)
 8001866:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800186a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <MX_ADC1_Init+0xec>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <MX_ADC1_Init+0xec>)
 8001874:	2201      	movs	r2, #1
 8001876:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <MX_ADC1_Init+0xec>)
 800187a:	2201      	movs	r2, #1
 800187c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <MX_ADC1_Init+0xec>)
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001886:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <MX_ADC1_Init+0xec>)
 8001888:	2200      	movs	r2, #0
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <MX_ADC1_Init+0xec>)
 800188e:	4a2c      	ldr	r2, [pc, #176]	; (8001940 <MX_ADC1_Init+0xf4>)
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <MX_ADC1_Init+0xec>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <MX_ADC1_Init+0xec>)
 800189a:	2204      	movs	r2, #4
 800189c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <MX_ADC1_Init+0xec>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <MX_ADC1_Init+0xec>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ac:	4822      	ldr	r0, [pc, #136]	; (8001938 <MX_ADC1_Init+0xec>)
 80018ae:	f000 fd33 	bl	8002318 <HAL_ADC_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018b8:	f000 f990 	bl	8001bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018bc:	2300      	movs	r3, #0
 80018be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80018c4:	2307      	movs	r3, #7
 80018c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	4619      	mov	r1, r3
 80018cc:	481a      	ldr	r0, [pc, #104]	; (8001938 <MX_ADC1_Init+0xec>)
 80018ce:	f000 fedb 	bl	8002688 <HAL_ADC_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018d8:	f000 f980 	bl	8001bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018dc:	2301      	movs	r3, #1
 80018de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80018e0:	2302      	movs	r3, #2
 80018e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e4:	463b      	mov	r3, r7
 80018e6:	4619      	mov	r1, r3
 80018e8:	4813      	ldr	r0, [pc, #76]	; (8001938 <MX_ADC1_Init+0xec>)
 80018ea:	f000 fecd 	bl	8002688 <HAL_ADC_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80018f4:	f000 f972 	bl	8001bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80018f8:	230c      	movs	r3, #12
 80018fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80018fc:	2303      	movs	r3, #3
 80018fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	4619      	mov	r1, r3
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <MX_ADC1_Init+0xec>)
 8001906:	f000 febf 	bl	8002688 <HAL_ADC_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001910:	f000 f964 	bl	8001bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001914:	230d      	movs	r3, #13
 8001916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001918:	2304      	movs	r3, #4
 800191a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_ADC1_Init+0xec>)
 8001922:	f000 feb1 	bl	8002688 <HAL_ADC_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800192c:	f000 f956 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200001f8 	.word	0x200001f8
 800193c:	40012000 	.word	0x40012000
 8001940:	0f000001 	.word	0x0f000001

08001944 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001958:	2300      	movs	r3, #0
 800195a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <MX_RTC_Init+0xac>)
 800195e:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <MX_RTC_Init+0xb0>)
 8001960:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <MX_RTC_Init+0xac>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <MX_RTC_Init+0xac>)
 800196a:	227f      	movs	r2, #127	; 0x7f
 800196c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <MX_RTC_Init+0xac>)
 8001970:	22ff      	movs	r2, #255	; 0xff
 8001972:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <MX_RTC_Init+0xac>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <MX_RTC_Init+0xac>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <MX_RTC_Init+0xac>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001986:	481a      	ldr	r0, [pc, #104]	; (80019f0 <MX_RTC_Init+0xac>)
 8001988:	f003 f96a 	bl	8004c60 <HAL_RTC_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001992:	f000 f923 	bl	8001bdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001996:	2300      	movs	r3, #0
 8001998:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800199a:	2300      	movs	r3, #0
 800199c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800199e:	2300      	movs	r3, #0
 80019a0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2201      	movs	r2, #1
 80019ae:	4619      	mov	r1, r3
 80019b0:	480f      	ldr	r0, [pc, #60]	; (80019f0 <MX_RTC_Init+0xac>)
 80019b2:	f003 f9cb 	bl	8004d4c <HAL_RTC_SetTime>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80019bc:	f000 f90e 	bl	8001bdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019c0:	2301      	movs	r3, #1
 80019c2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80019c4:	2304      	movs	r3, #4
 80019c6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x17;
 80019c8:	2317      	movs	r3, #23
 80019ca:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80019cc:	2323      	movs	r3, #35	; 0x23
 80019ce:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019d0:	463b      	mov	r3, r7
 80019d2:	2201      	movs	r2, #1
 80019d4:	4619      	mov	r1, r3
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <MX_RTC_Init+0xac>)
 80019d8:	f003 fa52 	bl	8004e80 <HAL_RTC_SetDate>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80019e2:	f000 f8fb 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200002a0 	.word	0x200002a0
 80019f4:	40002800 	.word	0x40002800

080019f8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_SDIO_SD_Init+0x38>)
 80019fe:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <MX_SDIO_SD_Init+0x3c>)
 8001a00:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <MX_SDIO_SD_Init+0x38>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_SDIO_SD_Init+0x38>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MX_SDIO_SD_Init+0x38>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_SDIO_SD_Init+0x38>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <MX_SDIO_SD_Init+0x38>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 18;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <MX_SDIO_SD_Init+0x38>)
 8001a22:	2212      	movs	r2, #18
 8001a24:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	200002c0 	.word	0x200002c0
 8001a34:	40012c00 	.word	0x40012c00

08001a38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_USART2_UART_Init+0x50>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a70:	f004 fd48 	bl	8006504 <HAL_UART_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a7a:	f000 f8af 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000344 	.word	0x20000344
 8001a88:	40004400 	.word	0x40004400

08001a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_DMA_Init+0x3c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <MX_DMA_Init+0x3c>)
 8001a9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_DMA_Init+0x3c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2038      	movs	r0, #56	; 0x38
 8001ab4:	f001 f973 	bl	8002d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ab8:	2038      	movs	r0, #56	; 0x38
 8001aba:	f001 f98c 	bl	8002dd6 <HAL_NVIC_EnableIRQ>

}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a39      	ldr	r2, [pc, #228]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b37      	ldr	r3, [pc, #220]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a32      	ldr	r2, [pc, #200]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a2b      	ldr	r2, [pc, #172]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <MX_GPIO_Init+0x104>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2120      	movs	r1, #32
 8001b72:	4818      	ldr	r0, [pc, #96]	; (8001bd4 <MX_GPIO_Init+0x108>)
 8001b74:	f001 fef8 	bl	8003968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4812      	ldr	r0, [pc, #72]	; (8001bd8 <MX_GPIO_Init+0x10c>)
 8001b90:	f001 fd3e 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b94:	2302      	movs	r3, #2
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <MX_GPIO_Init+0x10c>)
 8001ba8:	f001 fd32 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bac:	2320      	movs	r3, #32
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_GPIO_Init+0x108>)
 8001bc4:	f001 fd24 	bl	8003610 <HAL_GPIO_Init>

}
 8001bc8:	bf00      	nop
 8001bca:	3728      	adds	r7, #40	; 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020800 	.word	0x40020800

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
}
 8001be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <Error_Handler+0x8>
	...

08001be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_MspInit+0x4c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_MspInit+0x4c>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	603b      	str	r3, [r7, #0]
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c26:	2007      	movs	r0, #7
 8001c28:	f001 f8ae 	bl	8002d88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800

08001c38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a3c      	ldr	r2, [pc, #240]	; (8001d48 <HAL_ADC_MspInit+0x110>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d171      	bne.n	8001d3e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a3a      	ldr	r2, [pc, #232]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a33      	ldr	r2, [pc, #204]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a2c      	ldr	r2, [pc, #176]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_ADC_MspInit+0x114>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cae:	230c      	movs	r3, #12
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4823      	ldr	r0, [pc, #140]	; (8001d50 <HAL_ADC_MspInit+0x118>)
 8001cc2:	f001 fca5 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001cc6:	2313      	movs	r3, #19
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	481e      	ldr	r0, [pc, #120]	; (8001d54 <HAL_ADC_MspInit+0x11c>)
 8001cda:	f001 fc99 	bl	8003610 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001ce0:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <HAL_ADC_MspInit+0x124>)
 8001ce2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001d08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d22:	480d      	ldr	r0, [pc, #52]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001d24:	f001 f872 	bl	8002e0c <HAL_DMA_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001d2e:	f7ff ff55 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001d36:	639a      	str	r2, [r3, #56]	; 0x38
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_ADC_MspInit+0x120>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	; 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40012000 	.word	0x40012000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	20000240 	.word	0x20000240
 8001d5c:	40026410 	.word	0x40026410

08001d60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b09a      	sub	sp, #104	; 0x68
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	225c      	movs	r2, #92	; 0x5c
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f008 febb 	bl	800aaec <memset>
  if(hrtc->Instance==RTC)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <HAL_RTC_MspInit+0x4c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d111      	bne.n	8001da4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d80:	2320      	movs	r3, #32
 8001d82:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d88:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f001 ff6e 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001d9a:	f7ff ff1f 	bl	8001bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_RTC_MspInit+0x50>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001da4:	bf00      	nop
 8001da6:	3768      	adds	r7, #104	; 0x68
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40002800 	.word	0x40002800
 8001db0:	42470e3c 	.word	0x42470e3c

08001db4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b0a2      	sub	sp, #136	; 0x88
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dcc:	f107 0318 	add.w	r3, r7, #24
 8001dd0:	225c      	movs	r2, #92	; 0x5c
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f008 fe89 	bl	800aaec <memset>
  if(hsd->Instance==SDIO)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a48      	ldr	r2, [pc, #288]	; (8001f00 <HAL_SD_MspInit+0x14c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	f040 8088 	bne.w	8001ef6 <HAL_SD_MspInit+0x142>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001de6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001dec:	2300      	movs	r3, #0
 8001dee:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001df0:	2300      	movs	r3, #0
 8001df2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df4:	f107 0318 	add.w	r3, r7, #24
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f001 ff39 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001e04:	f7ff feea 	bl	8001bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_SD_MspInit+0x150>)
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	4a3c      	ldr	r2, [pc, #240]	; (8001f04 <HAL_SD_MspInit+0x150>)
 8001e12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e16:	6453      	str	r3, [r2, #68]	; 0x44
 8001e18:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_SD_MspInit+0x150>)
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_SD_MspInit+0x150>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	4a35      	ldr	r2, [pc, #212]	; (8001f04 <HAL_SD_MspInit+0x150>)
 8001e2e:	f043 0302 	orr.w	r3, r3, #2
 8001e32:	6313      	str	r3, [r2, #48]	; 0x30
 8001e34:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_SD_MspInit+0x150>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <HAL_SD_MspInit+0x150>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4a2e      	ldr	r2, [pc, #184]	; (8001f04 <HAL_SD_MspInit+0x150>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_SD_MspInit+0x150>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <HAL_SD_MspInit+0x150>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <HAL_SD_MspInit+0x150>)
 8001e66:	f043 0308 	orr.w	r3, r3, #8
 8001e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <HAL_SD_MspInit+0x150>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e8a:	230c      	movs	r3, #12
 8001e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e94:	4619      	mov	r1, r3
 8001e96:	481c      	ldr	r0, [pc, #112]	; (8001f08 <HAL_SD_MspInit+0x154>)
 8001e98:	f001 fbba 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ea0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4813      	ldr	r0, [pc, #76]	; (8001f0c <HAL_SD_MspInit+0x158>)
 8001ebe:	f001 fba7 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ed4:	230c      	movs	r3, #12
 8001ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eda:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480b      	ldr	r0, [pc, #44]	; (8001f10 <HAL_SD_MspInit+0x15c>)
 8001ee2:	f001 fb95 	bl	8003610 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2031      	movs	r0, #49	; 0x31
 8001eec:	f000 ff57 	bl	8002d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001ef0:	2031      	movs	r0, #49	; 0x31
 8001ef2:	f000 ff70 	bl	8002dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3788      	adds	r7, #136	; 0x88
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40012c00 	.word	0x40012c00
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40020800 	.word	0x40020800
 8001f10:	40020c00 	.word	0x40020c00

08001f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_UART_MspInit+0x84>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12b      	bne.n	8001f8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f6e:	230c      	movs	r3, #12
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7e:	2307      	movs	r3, #7
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <HAL_UART_MspInit+0x8c>)
 8001f8a:	f001 fb41 	bl	8003610 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40004400 	.word	0x40004400
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <NMI_Handler+0x4>

08001faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <BusFault_Handler+0x4>

08001fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <UsageFault_Handler+0x4>

08001fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff0:	f000 f94e 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <SDIO_IRQHandler+0x10>)
 8001ffe:	f003 fc79 	bl	80058f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200002c0 	.word	0x200002c0

0800200c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <DMA2_Stream0_IRQHandler+0x10>)
 8002012:	f001 f893 	bl	800313c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000240 	.word	0x20000240

08002020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return 1;
 8002024:	2301      	movs	r3, #1
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_kill>:

int _kill(int pid, int sig)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800203a:	f008 fd2d 	bl	800aa98 <__errno>
 800203e:	4603      	mov	r3, r0
 8002040:	2216      	movs	r2, #22
 8002042:	601a      	str	r2, [r3, #0]
  return -1;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_exit>:

void _exit (int status)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ffe7 	bl	8002030 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002062:	e7fe      	b.n	8002062 <_exit+0x12>

08002064 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e00a      	b.n	800208c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002076:	f3af 8000 	nop.w
 800207a:	4601      	mov	r1, r0
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	60ba      	str	r2, [r7, #8]
 8002082:	b2ca      	uxtb	r2, r1
 8002084:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbf0      	blt.n	8002076 <_read+0x12>
  }

  return len;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_close>:
  }
  return len;
}

int _close(int file)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c6:	605a      	str	r2, [r3, #4]
  return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_isatty>:

int _isatty(int file)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f008 fcae 	bl	800aa98 <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20020000 	.word	0x20020000
 8002168:	00000400 	.word	0x00000400
 800216c:	200030e4 	.word	0x200030e4
 8002170:	20003138 	.word	0x20003138

08002174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800219e:	490e      	ldr	r1, [pc, #56]	; (80021d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021a0:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a4:	e002      	b.n	80021ac <LoopCopyDataInit>

080021a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021aa:	3304      	adds	r3, #4

080021ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b0:	d3f9      	bcc.n	80021a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b2:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021b4:	4c0b      	ldr	r4, [pc, #44]	; (80021e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b8:	e001      	b.n	80021be <LoopFillZerobss>

080021ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021bc:	3204      	adds	r2, #4

080021be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c0:	d3fb      	bcc.n	80021ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021c2:	f7ff ffd7 	bl	8002174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c6:	f008 fc6d 	bl	800aaa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ca:	f7ff f9a5 	bl	8001518 <main>
  bx  lr    
 80021ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80021dc:	0800e154 	.word	0x0800e154
  ldr r2, =_sbss
 80021e0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80021e4:	20003138 	.word	0x20003138

080021e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0d      	ldr	r2, [pc, #52]	; (800222c <HAL_Init+0x40>)
 80021f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0a      	ldr	r2, [pc, #40]	; (800222c <HAL_Init+0x40>)
 8002202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_Init+0x40>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 fdb7 	bl	8002d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221a:	2000      	movs	r0, #0
 800221c:	f000 f808 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002220:	f7ff fce2 	bl	8001be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fdcf 	bl	8002df2 <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f000 fd97 	bl	8002d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000000 	.word	0x20000000
 8002288:	20000008 	.word	0x20000008
 800228c:	20000004 	.word	0x20000004

08002290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x20>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_IncTick+0x24>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_IncTick+0x24>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000008 	.word	0x20000008
 80022b4:	200030e8 	.word	0x200030e8

080022b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_GetTick+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	200030e8 	.word	0x200030e8

080022d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff ffee 	bl	80022b8 <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d005      	beq.n	80022f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_Delay+0x44>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f6:	bf00      	nop
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8f7      	bhi.n	80022f8 <HAL_Delay+0x28>
  {
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008

08002318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e033      	b.n	8002396 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fc7e 	bl	8001c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800235e:	f023 0302 	bic.w	r3, r3, #2
 8002362:	f043 0202 	orr.w	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fabe 	bl	80028ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f023 0303 	bic.w	r3, r3, #3
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
 8002386:	e001      	b.n	800238c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_ADC_Start_DMA+0x1e>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e0e9      	b.n	8002592 <HAL_ADC_Start_DMA+0x1f2>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d018      	beq.n	8002406 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023e4:	4b6d      	ldr	r3, [pc, #436]	; (800259c <HAL_ADC_Start_DMA+0x1fc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a6d      	ldr	r2, [pc, #436]	; (80025a0 <HAL_ADC_Start_DMA+0x200>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0c9a      	lsrs	r2, r3, #18
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023f8:	e002      	b.n	8002400 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f9      	bne.n	80023fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002414:	d107      	bne.n	8002426 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002424:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	f040 80a1 	bne.w	8002578 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002460:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002474:	d106      	bne.n	8002484 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f023 0206 	bic.w	r2, r3, #6
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	645a      	str	r2, [r3, #68]	; 0x44
 8002482:	e002      	b.n	800248a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002492:	4b44      	ldr	r3, [pc, #272]	; (80025a4 <HAL_ADC_Start_DMA+0x204>)
 8002494:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	4a43      	ldr	r2, [pc, #268]	; (80025a8 <HAL_ADC_Start_DMA+0x208>)
 800249c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	4a42      	ldr	r2, [pc, #264]	; (80025ac <HAL_ADC_Start_DMA+0x20c>)
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	4a41      	ldr	r2, [pc, #260]	; (80025b0 <HAL_ADC_Start_DMA+0x210>)
 80024ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	334c      	adds	r3, #76	; 0x4c
 80024e2:	4619      	mov	r1, r3
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f000 fd3e 	bl	8002f68 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d12a      	bne.n	800254e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2d      	ldr	r2, [pc, #180]	; (80025b4 <HAL_ADC_Start_DMA+0x214>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d015      	beq.n	800252e <HAL_ADC_Start_DMA+0x18e>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2c      	ldr	r2, [pc, #176]	; (80025b8 <HAL_ADC_Start_DMA+0x218>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d105      	bne.n	8002518 <HAL_ADC_Start_DMA+0x178>
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_ADC_Start_DMA+0x204>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a27      	ldr	r2, [pc, #156]	; (80025bc <HAL_ADC_Start_DMA+0x21c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d136      	bne.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_ADC_Start_DMA+0x204>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d130      	bne.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d129      	bne.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	e020      	b.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <HAL_ADC_Start_DMA+0x214>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d11b      	bne.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d114      	bne.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	e00b      	b.n	8002590 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0210 	orr.w	r2, r3, #16
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000000 	.word	0x20000000
 80025a0:	431bde83 	.word	0x431bde83
 80025a4:	40012300 	.word	0x40012300
 80025a8:	08002ae5 	.word	0x08002ae5
 80025ac:	08002b9f 	.word	0x08002b9f
 80025b0:	08002bbb 	.word	0x08002bbb
 80025b4:	40012000 	.word	0x40012000
 80025b8:	40012100 	.word	0x40012100
 80025bc:	40012200 	.word	0x40012200

080025c0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_ADC_Stop_DMA+0x1a>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e048      	b.n	800266c <HAL_ADC_Stop_DMA+0xac>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d130      	bne.n	8002662 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800260e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d10f      	bne.n	800263e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fcf8 	bl	8003018 <HAL_DMA_Abort>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800264c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800266a:	7bfb      	ldrb	r3, [r7, #15]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1c>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e113      	b.n	80028cc <HAL_ADC_ConfigChannel+0x244>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b09      	cmp	r3, #9
 80026b2:	d925      	bls.n	8002700 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68d9      	ldr	r1, [r3, #12]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	3b1e      	subs	r3, #30
 80026ca:	2207      	movs	r2, #7
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43da      	mvns	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	400a      	ands	r2, r1
 80026d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68d9      	ldr	r1, [r3, #12]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	4603      	mov	r3, r0
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4403      	add	r3, r0
 80026f2:	3b1e      	subs	r3, #30
 80026f4:	409a      	lsls	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	e022      	b.n	8002746 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6919      	ldr	r1, [r3, #16]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	2207      	movs	r2, #7
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	400a      	ands	r2, r1
 8002722:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6919      	ldr	r1, [r3, #16]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	4603      	mov	r3, r0
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4403      	add	r3, r0
 800273c:	409a      	lsls	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b06      	cmp	r3, #6
 800274c:	d824      	bhi.n	8002798 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	3b05      	subs	r3, #5
 8002760:	221f      	movs	r2, #31
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43da      	mvns	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	400a      	ands	r2, r1
 800276e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	4618      	mov	r0, r3
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	3b05      	subs	r3, #5
 800278a:	fa00 f203 	lsl.w	r2, r0, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	635a      	str	r2, [r3, #52]	; 0x34
 8002796:	e04c      	b.n	8002832 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b0c      	cmp	r3, #12
 800279e:	d824      	bhi.n	80027ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	3b23      	subs	r3, #35	; 0x23
 80027b2:	221f      	movs	r2, #31
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43da      	mvns	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	400a      	ands	r2, r1
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	3b23      	subs	r3, #35	; 0x23
 80027dc:	fa00 f203 	lsl.w	r2, r0, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
 80027e8:	e023      	b.n	8002832 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b41      	subs	r3, #65	; 0x41
 80027fc:	221f      	movs	r2, #31
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	400a      	ands	r2, r1
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	4618      	mov	r0, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	3b41      	subs	r3, #65	; 0x41
 8002826:	fa00 f203 	lsl.w	r2, r0, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002832:	4b29      	ldr	r3, [pc, #164]	; (80028d8 <HAL_ADC_ConfigChannel+0x250>)
 8002834:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a28      	ldr	r2, [pc, #160]	; (80028dc <HAL_ADC_ConfigChannel+0x254>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10f      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x1d8>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b12      	cmp	r3, #18
 8002846:	d10b      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <HAL_ADC_ConfigChannel+0x254>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d12b      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x23a>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <HAL_ADC_ConfigChannel+0x258>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d003      	beq.n	800287c <HAL_ADC_ConfigChannel+0x1f4>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b11      	cmp	r3, #17
 800287a:	d122      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <HAL_ADC_ConfigChannel+0x258>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d111      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_ADC_ConfigChannel+0x25c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a11      	ldr	r2, [pc, #68]	; (80028e8 <HAL_ADC_ConfigChannel+0x260>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	0c9a      	lsrs	r2, r3, #18
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028b4:	e002      	b.n	80028bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f9      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40012300 	.word	0x40012300
 80028dc:	40012000 	.word	0x40012000
 80028e0:	10000012 	.word	0x10000012
 80028e4:	20000000 	.word	0x20000000
 80028e8:	431bde83 	.word	0x431bde83

080028ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028f4:	4b79      	ldr	r3, [pc, #484]	; (8002adc <ADC_Init+0x1f0>)
 80028f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	431a      	orrs	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002920:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	021a      	lsls	r2, r3, #8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	4a58      	ldr	r2, [pc, #352]	; (8002ae0 <ADC_Init+0x1f4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d022      	beq.n	80029ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002992:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6899      	ldr	r1, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6899      	ldr	r1, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	e00f      	b.n	80029ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0202 	bic.w	r2, r2, #2
 80029f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6899      	ldr	r1, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7e1b      	ldrb	r3, [r3, #24]
 8002a04:	005a      	lsls	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01b      	beq.n	8002a50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	3b01      	subs	r3, #1
 8002a44:	035a      	lsls	r2, r3, #13
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	e007      	b.n	8002a60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	051a      	lsls	r2, r3, #20
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6899      	ldr	r1, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aa2:	025a      	lsls	r2, r3, #9
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6899      	ldr	r1, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	029a      	lsls	r2, r3, #10
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	609a      	str	r2, [r3, #8]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40012300 	.word	0x40012300
 8002ae0:	0f000001 	.word	0x0f000001

08002ae4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d13c      	bne.n	8002b78 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d12b      	bne.n	8002b70 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d127      	bne.n	8002b70 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d006      	beq.n	8002b3c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d119      	bne.n	8002b70 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0220 	bic.w	r2, r2, #32
 8002b4a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f7fe fa53 	bl	800101c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b76:	e00e      	b.n	8002b96 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7ff fd75 	bl	8002674 <HAL_ADC_ErrorCallback>
}
 8002b8a:	e004      	b.n	8002b96 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4798      	blx	r3
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7fe fa19 	bl	8000fe4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2240      	movs	r2, #64	; 0x40
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	f043 0204 	orr.w	r2, r3, #4
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7ff fd4a 	bl	8002674 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <__NVIC_SetPriorityGrouping>:
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1a:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60d3      	str	r3, [r2, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_GetPriorityGrouping>:
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <__NVIC_GetPriorityGrouping+0x18>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f003 0307 	and.w	r3, r3, #7
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_EnableIRQ>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4907      	ldr	r1, [pc, #28]	; (8002c84 <__NVIC_EnableIRQ+0x38>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_SetPriority>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0a      	blt.n	8002cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	490c      	ldr	r1, [pc, #48]	; (8002cd4 <__NVIC_SetPriority+0x4c>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cb0:	e00a      	b.n	8002cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4908      	ldr	r1, [pc, #32]	; (8002cd8 <__NVIC_SetPriority+0x50>)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	761a      	strb	r2, [r3, #24]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <NVIC_EncodePriority>:
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	; 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	bf28      	it	cs
 8002cfa:	2304      	movcs	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d902      	bls.n	8002d0c <NVIC_EncodePriority+0x30>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <NVIC_EncodePriority+0x32>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	4313      	orrs	r3, r2
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	; 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <SysTick_Config>:
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d54:	d301      	bcc.n	8002d5a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00f      	b.n	8002d7a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <SysTick_Config+0x40>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d62:	210f      	movs	r1, #15
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	f7ff ff8e 	bl	8002c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <SysTick_Config+0x40>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <SysTick_Config+0x40>)
 8002d74:	2207      	movs	r2, #7
 8002d76:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	e000e010 	.word	0xe000e010

08002d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff29 	bl	8002be8 <__NVIC_SetPriorityGrouping>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db0:	f7ff ff3e 	bl	8002c30 <__NVIC_GetPriorityGrouping>
 8002db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	6978      	ldr	r0, [r7, #20]
 8002dbc:	f7ff ff8e 	bl	8002cdc <NVIC_EncodePriority>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff5d 	bl	8002c88 <__NVIC_SetPriority>
}
 8002dce:	bf00      	nop
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff31 	bl	8002c4c <__NVIC_EnableIRQ>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ffa2 	bl	8002d44 <SysTick_Config>
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff fa4e 	bl	80022b8 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e099      	b.n	8002f5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e48:	e00f      	b.n	8002e6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e4a:	f7ff fa35 	bl	80022b8 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d908      	bls.n	8002e6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2203      	movs	r2, #3
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e078      	b.n	8002f5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1e8      	bne.n	8002e4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <HAL_DMA_Init+0x158>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d107      	bne.n	8002ed4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0307 	bic.w	r3, r3, #7
 8002eea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d117      	bne.n	8002f2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00e      	beq.n	8002f2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fb01 	bl	8003518 <DMA_CheckFifoParam>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2240      	movs	r2, #64	; 0x40
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e016      	b.n	8002f5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fab8 	bl	80034ac <DMA_CalcBaseAndBitshift>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	223f      	movs	r2, #63	; 0x3f
 8002f46:	409a      	lsls	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	f010803f 	.word	0xf010803f

08002f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_DMA_Start_IT+0x26>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e040      	b.n	8003010 <HAL_DMA_Start_IT+0xa8>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d12f      	bne.n	8003002 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fa4a 	bl	8003450 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	223f      	movs	r2, #63	; 0x3f
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0216 	orr.w	r2, r2, #22
 8002fd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0208 	orr.w	r2, r2, #8
 8002fee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e005      	b.n	800300e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800300a:	2302      	movs	r3, #2
 800300c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800300e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003026:	f7ff f947 	bl	80022b8 <HAL_GetTick>
 800302a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d008      	beq.n	800304a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e052      	b.n	80030f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0216 	bic.w	r2, r2, #22
 8003058:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003068:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d103      	bne.n	800307a <HAL_DMA_Abort+0x62>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0208 	bic.w	r2, r2, #8
 8003088:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800309a:	e013      	b.n	80030c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800309c:	f7ff f90c 	bl	80022b8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d90c      	bls.n	80030c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2203      	movs	r2, #3
 80030b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e015      	b.n	80030f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e4      	bne.n	800309c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	223f      	movs	r2, #63	; 0x3f
 80030d8:	409a      	lsls	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d004      	beq.n	8003116 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2280      	movs	r2, #128	; 0x80
 8003110:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e00c      	b.n	8003130 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2205      	movs	r2, #5
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003148:	4b8e      	ldr	r3, [pc, #568]	; (8003384 <HAL_DMA_IRQHandler+0x248>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a8e      	ldr	r2, [pc, #568]	; (8003388 <HAL_DMA_IRQHandler+0x24c>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	0a9b      	lsrs	r3, r3, #10
 8003154:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	2208      	movs	r2, #8
 8003168:	409a      	lsls	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d01a      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d013      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0204 	bic.w	r2, r2, #4
 800318e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	2208      	movs	r2, #8
 8003196:	409a      	lsls	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	f043 0201 	orr.w	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	2201      	movs	r2, #1
 80031ae:	409a      	lsls	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d012      	beq.n	80031de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	2201      	movs	r2, #1
 80031cc:	409a      	lsls	r2, r3
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	f043 0202 	orr.w	r2, r3, #2
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e2:	2204      	movs	r2, #4
 80031e4:	409a      	lsls	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d012      	beq.n	8003214 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	2204      	movs	r2, #4
 8003202:	409a      	lsls	r2, r3
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	f043 0204 	orr.w	r2, r3, #4
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003218:	2210      	movs	r2, #16
 800321a:	409a      	lsls	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d043      	beq.n	80032ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d03c      	beq.n	80032ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	2210      	movs	r2, #16
 8003238:	409a      	lsls	r2, r3
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d018      	beq.n	800327e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d108      	bne.n	800326c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d024      	beq.n	80032ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4798      	blx	r3
 800326a:	e01f      	b.n	80032ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01b      	beq.n	80032ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
 800327c:	e016      	b.n	80032ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d107      	bne.n	800329c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0208 	bic.w	r2, r2, #8
 800329a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	2220      	movs	r2, #32
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 808f 	beq.w	80033dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8087 	beq.w	80033dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	2220      	movs	r2, #32
 80032d4:	409a      	lsls	r2, r3
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d136      	bne.n	8003354 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0216 	bic.w	r2, r2, #22
 80032f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003304:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <HAL_DMA_IRQHandler+0x1da>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0208 	bic.w	r2, r2, #8
 8003324:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	223f      	movs	r2, #63	; 0x3f
 800332c:	409a      	lsls	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003346:	2b00      	cmp	r3, #0
 8003348:	d07e      	beq.n	8003448 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
        }
        return;
 8003352:	e079      	b.n	8003448 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01d      	beq.n	800339e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10d      	bne.n	800338c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	2b00      	cmp	r3, #0
 8003376:	d031      	beq.n	80033dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
 8003380:	e02c      	b.n	80033dc <HAL_DMA_IRQHandler+0x2a0>
 8003382:	bf00      	nop
 8003384:	20000000 	.word	0x20000000
 8003388:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d023      	beq.n	80033dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4798      	blx	r3
 800339c:	e01e      	b.n	80033dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10f      	bne.n	80033cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0210 	bic.w	r2, r2, #16
 80033ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d032      	beq.n	800344a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d022      	beq.n	8003436 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2205      	movs	r2, #5
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0201 	bic.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	3301      	adds	r3, #1
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	429a      	cmp	r2, r3
 8003412:	d307      	bcc.n	8003424 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f2      	bne.n	8003408 <HAL_DMA_IRQHandler+0x2cc>
 8003422:	e000      	b.n	8003426 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003424:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
 8003446:	e000      	b.n	800344a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003448:	bf00      	nop
    }
  }
}
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800346c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d108      	bne.n	8003490 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800348e:	e007      	b.n	80034a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	60da      	str	r2, [r3, #12]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	3b10      	subs	r3, #16
 80034bc:	4a14      	ldr	r2, [pc, #80]	; (8003510 <DMA_CalcBaseAndBitshift+0x64>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034c6:	4a13      	ldr	r2, [pc, #76]	; (8003514 <DMA_CalcBaseAndBitshift+0x68>)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d909      	bls.n	80034ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034e2:	f023 0303 	bic.w	r3, r3, #3
 80034e6:	1d1a      	adds	r2, r3, #4
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	659a      	str	r2, [r3, #88]	; 0x58
 80034ec:	e007      	b.n	80034fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034f6:	f023 0303 	bic.w	r3, r3, #3
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	aaaaaaab 	.word	0xaaaaaaab
 8003514:	0800dccc 	.word	0x0800dccc

08003518 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11f      	bne.n	8003572 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d856      	bhi.n	80035e6 <DMA_CheckFifoParam+0xce>
 8003538:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <DMA_CheckFifoParam+0x28>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003551 	.word	0x08003551
 8003544:	08003563 	.word	0x08003563
 8003548:	08003551 	.word	0x08003551
 800354c:	080035e7 	.word	0x080035e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d046      	beq.n	80035ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003560:	e043      	b.n	80035ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800356a:	d140      	bne.n	80035ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003570:	e03d      	b.n	80035ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357a:	d121      	bne.n	80035c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b03      	cmp	r3, #3
 8003580:	d837      	bhi.n	80035f2 <DMA_CheckFifoParam+0xda>
 8003582:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <DMA_CheckFifoParam+0x70>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	08003599 	.word	0x08003599
 800358c:	0800359f 	.word	0x0800359f
 8003590:	08003599 	.word	0x08003599
 8003594:	080035b1 	.word	0x080035b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      break;
 800359c:	e030      	b.n	8003600 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d025      	beq.n	80035f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ae:	e022      	b.n	80035f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035b8:	d11f      	bne.n	80035fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035be:	e01c      	b.n	80035fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d903      	bls.n	80035ce <DMA_CheckFifoParam+0xb6>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d003      	beq.n	80035d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035cc:	e018      	b.n	8003600 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
      break;
 80035d2:	e015      	b.n	8003600 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00e      	beq.n	80035fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
      break;
 80035e4:	e00b      	b.n	80035fe <DMA_CheckFifoParam+0xe6>
      break;
 80035e6:	bf00      	nop
 80035e8:	e00a      	b.n	8003600 <DMA_CheckFifoParam+0xe8>
      break;
 80035ea:	bf00      	nop
 80035ec:	e008      	b.n	8003600 <DMA_CheckFifoParam+0xe8>
      break;
 80035ee:	bf00      	nop
 80035f0:	e006      	b.n	8003600 <DMA_CheckFifoParam+0xe8>
      break;
 80035f2:	bf00      	nop
 80035f4:	e004      	b.n	8003600 <DMA_CheckFifoParam+0xe8>
      break;
 80035f6:	bf00      	nop
 80035f8:	e002      	b.n	8003600 <DMA_CheckFifoParam+0xe8>
      break;   
 80035fa:	bf00      	nop
 80035fc:	e000      	b.n	8003600 <DMA_CheckFifoParam+0xe8>
      break;
 80035fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop

08003610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003610:	b480      	push	{r7}
 8003612:	b089      	sub	sp, #36	; 0x24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	e165      	b.n	80038f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800362c:	2201      	movs	r2, #1
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	429a      	cmp	r2, r3
 8003646:	f040 8154 	bne.w	80038f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d005      	beq.n	8003662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800365e:	2b02      	cmp	r3, #2
 8003660:	d130      	bne.n	80036c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	2203      	movs	r2, #3
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003698:	2201      	movs	r2, #1
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 0201 	and.w	r2, r3, #1
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d017      	beq.n	8003700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d123      	bne.n	8003754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	08da      	lsrs	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3208      	adds	r2, #8
 8003714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	220f      	movs	r2, #15
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	08da      	lsrs	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3208      	adds	r2, #8
 800374e:	69b9      	ldr	r1, [r7, #24]
 8003750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0203 	and.w	r2, r3, #3
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80ae 	beq.w	80038f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b5d      	ldr	r3, [pc, #372]	; (8003910 <HAL_GPIO_Init+0x300>)
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	4a5c      	ldr	r2, [pc, #368]	; (8003910 <HAL_GPIO_Init+0x300>)
 80037a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a4:	6453      	str	r3, [r2, #68]	; 0x44
 80037a6:	4b5a      	ldr	r3, [pc, #360]	; (8003910 <HAL_GPIO_Init+0x300>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037b2:	4a58      	ldr	r2, [pc, #352]	; (8003914 <HAL_GPIO_Init+0x304>)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	3302      	adds	r3, #2
 80037ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	220f      	movs	r2, #15
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a4f      	ldr	r2, [pc, #316]	; (8003918 <HAL_GPIO_Init+0x308>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d025      	beq.n	800382a <HAL_GPIO_Init+0x21a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a4e      	ldr	r2, [pc, #312]	; (800391c <HAL_GPIO_Init+0x30c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01f      	beq.n	8003826 <HAL_GPIO_Init+0x216>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a4d      	ldr	r2, [pc, #308]	; (8003920 <HAL_GPIO_Init+0x310>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d019      	beq.n	8003822 <HAL_GPIO_Init+0x212>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a4c      	ldr	r2, [pc, #304]	; (8003924 <HAL_GPIO_Init+0x314>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_GPIO_Init+0x20e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4b      	ldr	r2, [pc, #300]	; (8003928 <HAL_GPIO_Init+0x318>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00d      	beq.n	800381a <HAL_GPIO_Init+0x20a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4a      	ldr	r2, [pc, #296]	; (800392c <HAL_GPIO_Init+0x31c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <HAL_GPIO_Init+0x206>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a49      	ldr	r2, [pc, #292]	; (8003930 <HAL_GPIO_Init+0x320>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <HAL_GPIO_Init+0x202>
 800380e:	2306      	movs	r3, #6
 8003810:	e00c      	b.n	800382c <HAL_GPIO_Init+0x21c>
 8003812:	2307      	movs	r3, #7
 8003814:	e00a      	b.n	800382c <HAL_GPIO_Init+0x21c>
 8003816:	2305      	movs	r3, #5
 8003818:	e008      	b.n	800382c <HAL_GPIO_Init+0x21c>
 800381a:	2304      	movs	r3, #4
 800381c:	e006      	b.n	800382c <HAL_GPIO_Init+0x21c>
 800381e:	2303      	movs	r3, #3
 8003820:	e004      	b.n	800382c <HAL_GPIO_Init+0x21c>
 8003822:	2302      	movs	r3, #2
 8003824:	e002      	b.n	800382c <HAL_GPIO_Init+0x21c>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_GPIO_Init+0x21c>
 800382a:	2300      	movs	r3, #0
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	f002 0203 	and.w	r2, r2, #3
 8003832:	0092      	lsls	r2, r2, #2
 8003834:	4093      	lsls	r3, r2
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800383c:	4935      	ldr	r1, [pc, #212]	; (8003914 <HAL_GPIO_Init+0x304>)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	089b      	lsrs	r3, r3, #2
 8003842:	3302      	adds	r3, #2
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800384a:	4b3a      	ldr	r3, [pc, #232]	; (8003934 <HAL_GPIO_Init+0x324>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800386e:	4a31      	ldr	r2, [pc, #196]	; (8003934 <HAL_GPIO_Init+0x324>)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003874:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <HAL_GPIO_Init+0x324>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003898:	4a26      	ldr	r2, [pc, #152]	; (8003934 <HAL_GPIO_Init+0x324>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800389e:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_GPIO_Init+0x324>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038c2:	4a1c      	ldr	r2, [pc, #112]	; (8003934 <HAL_GPIO_Init+0x324>)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_GPIO_Init+0x324>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038ec:	4a11      	ldr	r2, [pc, #68]	; (8003934 <HAL_GPIO_Init+0x324>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3301      	adds	r3, #1
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b0f      	cmp	r3, #15
 80038fc:	f67f ae96 	bls.w	800362c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	3724      	adds	r7, #36	; 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800
 8003914:	40013800 	.word	0x40013800
 8003918:	40020000 	.word	0x40020000
 800391c:	40020400 	.word	0x40020400
 8003920:	40020800 	.word	0x40020800
 8003924:	40020c00 	.word	0x40020c00
 8003928:	40021000 	.word	0x40021000
 800392c:	40021400 	.word	0x40021400
 8003930:	40021800 	.word	0x40021800
 8003934:	40013c00 	.word	0x40013c00

08003938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	887b      	ldrh	r3, [r7, #2]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
 8003954:	e001      	b.n	800395a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800395a:	7bfb      	ldrb	r3, [r7, #15]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	807b      	strh	r3, [r7, #2]
 8003974:	4613      	mov	r3, r2
 8003976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003978:	787b      	ldrb	r3, [r7, #1]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003984:	e003      	b.n	800398e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003986:	887b      	ldrh	r3, [r7, #2]
 8003988:	041a      	lsls	r2, r3, #16
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	619a      	str	r2, [r3, #24]
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_PWREx_EnableOverDrive+0x90>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	4a1f      	ldr	r2, [pc, #124]	; (8003a2c <HAL_PWREx_EnableOverDrive+0x90>)
 80039b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b4:	6413      	str	r3, [r2, #64]	; 0x40
 80039b6:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_PWREx_EnableOverDrive+0x90>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039c2:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_PWREx_EnableOverDrive+0x94>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c8:	f7fe fc76 	bl	80022b8 <HAL_GetTick>
 80039cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039ce:	e009      	b.n	80039e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039d0:	f7fe fc72 	bl	80022b8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039de:	d901      	bls.n	80039e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e01f      	b.n	8003a24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039e4:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f0:	d1ee      	bne.n	80039d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039f2:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039f8:	f7fe fc5e 	bl	80022b8 <HAL_GetTick>
 80039fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039fe:	e009      	b.n	8003a14 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a00:	f7fe fc5a 	bl	80022b8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a0e:	d901      	bls.n	8003a14 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e007      	b.n	8003a24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a14:	4b07      	ldr	r3, [pc, #28]	; (8003a34 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a20:	d1ee      	bne.n	8003a00 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	420e0040 	.word	0x420e0040
 8003a34:	40007000 	.word	0x40007000
 8003a38:	420e0044 	.word	0x420e0044

08003a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0cc      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a50:	4b68      	ldr	r3, [pc, #416]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d90c      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b65      	ldr	r3, [pc, #404]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b63      	ldr	r3, [pc, #396]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0b8      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a90:	4b59      	ldr	r3, [pc, #356]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a58      	ldr	r2, [pc, #352]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa8:	4b53      	ldr	r3, [pc, #332]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a52      	ldr	r2, [pc, #328]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b50      	ldr	r3, [pc, #320]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	494d      	ldr	r1, [pc, #308]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d044      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d119      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e07f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afa:	4b3f      	ldr	r3, [pc, #252]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e06f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e067      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1a:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4934      	ldr	r1, [pc, #208]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b2c:	f7fe fbc4 	bl	80022b8 <HAL_GetTick>
 8003b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b34:	f7fe fbc0 	bl	80022b8 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e04f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 020c 	and.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d1eb      	bne.n	8003b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b25      	ldr	r3, [pc, #148]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d20c      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e032      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4916      	ldr	r1, [pc, #88]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	490e      	ldr	r1, [pc, #56]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bc2:	f000 fb7f 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	490a      	ldr	r1, [pc, #40]	; (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003bd4:	5ccb      	ldrb	r3, [r1, r3]
 8003bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bda:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x1c8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fb24 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023c00 	.word	0x40023c00
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	0800dcb4 	.word	0x0800dcb4
 8003c00:	20000000 	.word	0x20000000
 8003c04:	20000004 	.word	0x20000004

08003c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000000 	.word	0x20000000

08003c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c24:	f7ff fff0 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0a9b      	lsrs	r3, r3, #10
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4903      	ldr	r1, [pc, #12]	; (8003c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40023800 	.word	0x40023800
 8003c44:	0800dcc4 	.word	0x0800dcc4

08003c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c4c:	f7ff ffdc 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	0b5b      	lsrs	r3, r3, #13
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4903      	ldr	r1, [pc, #12]	; (8003c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	0800dcc4 	.word	0x0800dcc4

08003c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08c      	sub	sp, #48	; 0x30
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d010      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003ca8:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cae:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	496c      	ldr	r1, [pc, #432]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d010      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003cd6:	4b64      	ldr	r3, [pc, #400]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cdc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	4960      	ldr	r1, [pc, #384]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d017      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d04:	4b58      	ldr	r3, [pc, #352]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	4955      	ldr	r1, [pc, #340]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d22:	d101      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003d24:	2301      	movs	r3, #1
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003d30:	2301      	movs	r3, #1
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d017      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d40:	4b49      	ldr	r3, [pc, #292]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	4946      	ldr	r1, [pc, #280]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003d60:	2301      	movs	r3, #1
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 808a 	beq.w	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	4a38      	ldr	r2, [pc, #224]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8e:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d9a:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a33      	ldr	r2, [pc, #204]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003da6:	f7fe fa87 	bl	80022b8 <HAL_GetTick>
 8003daa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fe fa83 	bl	80022b8 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e278      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dc0:	4b2a      	ldr	r3, [pc, #168]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dcc:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d02f      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d028      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dea:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003df4:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e00:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e06:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d114      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fe fa51 	bl	80022b8 <HAL_GetTick>
 8003e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fe fa4d 	bl	80022b8 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e240      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0ee      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e48:	d114      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5e:	4902      	ldr	r1, [pc, #8]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	608b      	str	r3, [r1, #8]
 8003e64:	e00c      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	40007000 	.word	0x40007000
 8003e70:	42470e40 	.word	0x42470e40
 8003e74:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4a49      	ldr	r2, [pc, #292]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e7e:	6093      	str	r3, [r2, #8]
 8003e80:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8c:	4944      	ldr	r1, [pc, #272]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003ea4:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003ea6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003eb4:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	4937      	ldr	r1, [pc, #220]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ed6:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003edc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee4:	492e      	ldr	r1, [pc, #184]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d011      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ef8:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	4926      	ldr	r1, [pc, #152]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f16:	d101      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	491a      	ldr	r1, [pc, #104]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d011      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003f4a:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f50:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f58:	4911      	ldr	r1, [pc, #68]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f68:	d101      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d005      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7c:	f040 80ff 	bne.w	800417e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f86:	f7fe f997 	bl	80022b8 <HAL_GetTick>
 8003f8a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f8c:	e00e      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f8e:	f7fe f993 	bl	80022b8 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d907      	bls.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e188      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	424711e0 	.word	0x424711e0
 8003fa8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fac:	4b7e      	ldr	r3, [pc, #504]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ea      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d028      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d124      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003fe0:	4b71      	ldr	r3, [pc, #452]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe6:	0c1b      	lsrs	r3, r3, #16
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	3301      	adds	r3, #1
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ff2:	4b6d      	ldr	r3, [pc, #436]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff8:	0e1b      	lsrs	r3, r3, #24
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	019b      	lsls	r3, r3, #6
 800400a:	431a      	orrs	r2, r3
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	3b01      	subs	r3, #1
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	431a      	orrs	r2, r3
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	071b      	lsls	r3, r3, #28
 8004022:	4961      	ldr	r1, [pc, #388]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d004      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004048:	2b00      	cmp	r3, #0
 800404a:	d035      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004054:	d130      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004056:	4b54      	ldr	r3, [pc, #336]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	3301      	adds	r3, #1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004068:	4b4f      	ldr	r3, [pc, #316]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800406a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406e:	0f1b      	lsrs	r3, r3, #28
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	019b      	lsls	r3, r3, #6
 8004080:	431a      	orrs	r2, r3
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	3b01      	subs	r3, #1
 8004088:	041b      	lsls	r3, r3, #16
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	431a      	orrs	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	071b      	lsls	r3, r3, #28
 8004098:	4943      	ldr	r1, [pc, #268]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040a0:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a6:	f023 021f 	bic.w	r2, r3, #31
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	493d      	ldr	r1, [pc, #244]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d029      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040cc:	d124      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	3301      	adds	r3, #1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040e0:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e6:	0f1b      	lsrs	r3, r3, #28
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	019b      	lsls	r3, r3, #6
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	3b01      	subs	r3, #1
 8004102:	041b      	lsls	r3, r3, #16
 8004104:	431a      	orrs	r2, r3
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	431a      	orrs	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	071b      	lsls	r3, r3, #28
 8004110:	4925      	ldr	r1, [pc, #148]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004120:	2b00      	cmp	r3, #0
 8004122:	d016      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	019b      	lsls	r3, r3, #6
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	085b      	lsrs	r3, r3, #1
 8004136:	3b01      	subs	r3, #1
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	061b      	lsls	r3, r3, #24
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	071b      	lsls	r3, r3, #28
 800414a:	4917      	ldr	r1, [pc, #92]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004152:	4b16      	ldr	r3, [pc, #88]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004158:	f7fe f8ae 	bl	80022b8 <HAL_GetTick>
 800415c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004160:	f7fe f8aa 	bl	80022b8 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e09f      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004172:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	2b01      	cmp	r3, #1
 8004182:	f040 8095 	bne.w	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004186:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800418c:	f7fe f894 	bl	80022b8 <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004192:	e00f      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004194:	f7fe f890 	bl	80022b8 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d908      	bls.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e085      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	42470068 	.word	0x42470068
 80041b0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041b4:	4b41      	ldr	r3, [pc, #260]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c0:	d0e8      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02b      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d127      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80041ea:	4b34      	ldr	r3, [pc, #208]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	3301      	adds	r3, #1
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	431a      	orrs	r2, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	3b01      	subs	r3, #1
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	061b      	lsls	r3, r3, #24
 8004218:	4928      	ldr	r1, [pc, #160]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004220:	4b26      	ldr	r3, [pc, #152]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004226:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	3b01      	subs	r3, #1
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	4922      	ldr	r1, [pc, #136]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01d      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800424e:	d118      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	0e1b      	lsrs	r3, r3, #24
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	019b      	lsls	r3, r3, #6
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	085b      	lsrs	r3, r3, #1
 8004270:	3b01      	subs	r3, #1
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	4910      	ldr	r1, [pc, #64]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004284:	2201      	movs	r2, #1
 8004286:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004288:	f7fe f816 	bl	80022b8 <HAL_GetTick>
 800428c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004290:	f7fe f812 	bl	80022b8 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e007      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ae:	d1ef      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3730      	adds	r7, #48	; 0x30
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	42470070 	.word	0x42470070

080042c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c8:	b0ae      	sub	sp, #184	; 0xb8
 80042ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ea:	4bcb      	ldr	r3, [pc, #812]	; (8004618 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	f200 8206 	bhi.w	8004704 <HAL_RCC_GetSysClockFreq+0x440>
 80042f8:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <HAL_RCC_GetSysClockFreq+0x3c>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004335 	.word	0x08004335
 8004304:	08004705 	.word	0x08004705
 8004308:	08004705 	.word	0x08004705
 800430c:	08004705 	.word	0x08004705
 8004310:	0800433d 	.word	0x0800433d
 8004314:	08004705 	.word	0x08004705
 8004318:	08004705 	.word	0x08004705
 800431c:	08004705 	.word	0x08004705
 8004320:	08004345 	.word	0x08004345
 8004324:	08004705 	.word	0x08004705
 8004328:	08004705 	.word	0x08004705
 800432c:	08004705 	.word	0x08004705
 8004330:	08004535 	.word	0x08004535
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004334:	4bb9      	ldr	r3, [pc, #740]	; (800461c <HAL_RCC_GetSysClockFreq+0x358>)
 8004336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800433a:	e1e7      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800433c:	4bb8      	ldr	r3, [pc, #736]	; (8004620 <HAL_RCC_GetSysClockFreq+0x35c>)
 800433e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004342:	e1e3      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004344:	4bb4      	ldr	r3, [pc, #720]	; (8004618 <HAL_RCC_GetSysClockFreq+0x354>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800434c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004350:	4bb1      	ldr	r3, [pc, #708]	; (8004618 <HAL_RCC_GetSysClockFreq+0x354>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d071      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435c:	4bae      	ldr	r3, [pc, #696]	; (8004618 <HAL_RCC_GetSysClockFreq+0x354>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	099b      	lsrs	r3, r3, #6
 8004362:	2200      	movs	r2, #0
 8004364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004368:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800436c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004374:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004378:	2300      	movs	r3, #0
 800437a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800437e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004382:	4622      	mov	r2, r4
 8004384:	462b      	mov	r3, r5
 8004386:	f04f 0000 	mov.w	r0, #0
 800438a:	f04f 0100 	mov.w	r1, #0
 800438e:	0159      	lsls	r1, r3, #5
 8004390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004394:	0150      	lsls	r0, r2, #5
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4621      	mov	r1, r4
 800439c:	1a51      	subs	r1, r2, r1
 800439e:	6439      	str	r1, [r7, #64]	; 0x40
 80043a0:	4629      	mov	r1, r5
 80043a2:	eb63 0301 	sbc.w	r3, r3, r1
 80043a6:	647b      	str	r3, [r7, #68]	; 0x44
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80043b4:	4649      	mov	r1, r9
 80043b6:	018b      	lsls	r3, r1, #6
 80043b8:	4641      	mov	r1, r8
 80043ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043be:	4641      	mov	r1, r8
 80043c0:	018a      	lsls	r2, r1, #6
 80043c2:	4641      	mov	r1, r8
 80043c4:	1a51      	subs	r1, r2, r1
 80043c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80043c8:	4649      	mov	r1, r9
 80043ca:	eb63 0301 	sbc.w	r3, r3, r1
 80043ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80043dc:	4649      	mov	r1, r9
 80043de:	00cb      	lsls	r3, r1, #3
 80043e0:	4641      	mov	r1, r8
 80043e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e6:	4641      	mov	r1, r8
 80043e8:	00ca      	lsls	r2, r1, #3
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	4622      	mov	r2, r4
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	633b      	str	r3, [r7, #48]	; 0x30
 80043f6:	462b      	mov	r3, r5
 80043f8:	460a      	mov	r2, r1
 80043fa:	eb42 0303 	adc.w	r3, r2, r3
 80043fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800440c:	4629      	mov	r1, r5
 800440e:	024b      	lsls	r3, r1, #9
 8004410:	4621      	mov	r1, r4
 8004412:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004416:	4621      	mov	r1, r4
 8004418:	024a      	lsls	r2, r1, #9
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004422:	2200      	movs	r2, #0
 8004424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004428:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800442c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004430:	f7fc fbda 	bl	8000be8 <__aeabi_uldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4613      	mov	r3, r2
 800443a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800443e:	e067      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004440:	4b75      	ldr	r3, [pc, #468]	; (8004618 <HAL_RCC_GetSysClockFreq+0x354>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	2200      	movs	r2, #0
 8004448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800444c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004450:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004458:	67bb      	str	r3, [r7, #120]	; 0x78
 800445a:	2300      	movs	r3, #0
 800445c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800445e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004462:	4622      	mov	r2, r4
 8004464:	462b      	mov	r3, r5
 8004466:	f04f 0000 	mov.w	r0, #0
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	0159      	lsls	r1, r3, #5
 8004470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004474:	0150      	lsls	r0, r2, #5
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4621      	mov	r1, r4
 800447c:	1a51      	subs	r1, r2, r1
 800447e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004480:	4629      	mov	r1, r5
 8004482:	eb63 0301 	sbc.w	r3, r3, r1
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004494:	4649      	mov	r1, r9
 8004496:	018b      	lsls	r3, r1, #6
 8004498:	4641      	mov	r1, r8
 800449a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800449e:	4641      	mov	r1, r8
 80044a0:	018a      	lsls	r2, r1, #6
 80044a2:	4641      	mov	r1, r8
 80044a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80044a8:	4649      	mov	r1, r9
 80044aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044c2:	4692      	mov	sl, r2
 80044c4:	469b      	mov	fp, r3
 80044c6:	4623      	mov	r3, r4
 80044c8:	eb1a 0303 	adds.w	r3, sl, r3
 80044cc:	623b      	str	r3, [r7, #32]
 80044ce:	462b      	mov	r3, r5
 80044d0:	eb4b 0303 	adc.w	r3, fp, r3
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80044e2:	4629      	mov	r1, r5
 80044e4:	028b      	lsls	r3, r1, #10
 80044e6:	4621      	mov	r1, r4
 80044e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044ec:	4621      	mov	r1, r4
 80044ee:	028a      	lsls	r2, r1, #10
 80044f0:	4610      	mov	r0, r2
 80044f2:	4619      	mov	r1, r3
 80044f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044f8:	2200      	movs	r2, #0
 80044fa:	673b      	str	r3, [r7, #112]	; 0x70
 80044fc:	677a      	str	r2, [r7, #116]	; 0x74
 80044fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004502:	f7fc fb71 	bl	8000be8 <__aeabi_uldivmod>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4613      	mov	r3, r2
 800450c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004510:	4b41      	ldr	r3, [pc, #260]	; (8004618 <HAL_RCC_GetSysClockFreq+0x354>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	0c1b      	lsrs	r3, r3, #16
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	3301      	adds	r3, #1
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800452a:	fbb2 f3f3 	udiv	r3, r2, r3
 800452e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004532:	e0eb      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004534:	4b38      	ldr	r3, [pc, #224]	; (8004618 <HAL_RCC_GetSysClockFreq+0x354>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004540:	4b35      	ldr	r3, [pc, #212]	; (8004618 <HAL_RCC_GetSysClockFreq+0x354>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d06b      	beq.n	8004624 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454c:	4b32      	ldr	r3, [pc, #200]	; (8004618 <HAL_RCC_GetSysClockFreq+0x354>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	099b      	lsrs	r3, r3, #6
 8004552:	2200      	movs	r2, #0
 8004554:	66bb      	str	r3, [r7, #104]	; 0x68
 8004556:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800455a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455e:	663b      	str	r3, [r7, #96]	; 0x60
 8004560:	2300      	movs	r3, #0
 8004562:	667b      	str	r3, [r7, #100]	; 0x64
 8004564:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004568:	4622      	mov	r2, r4
 800456a:	462b      	mov	r3, r5
 800456c:	f04f 0000 	mov.w	r0, #0
 8004570:	f04f 0100 	mov.w	r1, #0
 8004574:	0159      	lsls	r1, r3, #5
 8004576:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800457a:	0150      	lsls	r0, r2, #5
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4621      	mov	r1, r4
 8004582:	1a51      	subs	r1, r2, r1
 8004584:	61b9      	str	r1, [r7, #24]
 8004586:	4629      	mov	r1, r5
 8004588:	eb63 0301 	sbc.w	r3, r3, r1
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800459a:	4659      	mov	r1, fp
 800459c:	018b      	lsls	r3, r1, #6
 800459e:	4651      	mov	r1, sl
 80045a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045a4:	4651      	mov	r1, sl
 80045a6:	018a      	lsls	r2, r1, #6
 80045a8:	4651      	mov	r1, sl
 80045aa:	ebb2 0801 	subs.w	r8, r2, r1
 80045ae:	4659      	mov	r1, fp
 80045b0:	eb63 0901 	sbc.w	r9, r3, r1
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045c8:	4690      	mov	r8, r2
 80045ca:	4699      	mov	r9, r3
 80045cc:	4623      	mov	r3, r4
 80045ce:	eb18 0303 	adds.w	r3, r8, r3
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	462b      	mov	r3, r5
 80045d6:	eb49 0303 	adc.w	r3, r9, r3
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80045e8:	4629      	mov	r1, r5
 80045ea:	024b      	lsls	r3, r1, #9
 80045ec:	4621      	mov	r1, r4
 80045ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045f2:	4621      	mov	r1, r4
 80045f4:	024a      	lsls	r2, r1, #9
 80045f6:	4610      	mov	r0, r2
 80045f8:	4619      	mov	r1, r3
 80045fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045fe:	2200      	movs	r2, #0
 8004600:	65bb      	str	r3, [r7, #88]	; 0x58
 8004602:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004604:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004608:	f7fc faee 	bl	8000be8 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4613      	mov	r3, r2
 8004612:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004616:	e065      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x420>
 8004618:	40023800 	.word	0x40023800
 800461c:	00f42400 	.word	0x00f42400
 8004620:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004624:	4b3d      	ldr	r3, [pc, #244]	; (800471c <HAL_RCC_GetSysClockFreq+0x458>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	099b      	lsrs	r3, r3, #6
 800462a:	2200      	movs	r2, #0
 800462c:	4618      	mov	r0, r3
 800462e:	4611      	mov	r1, r2
 8004630:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004634:	653b      	str	r3, [r7, #80]	; 0x50
 8004636:	2300      	movs	r3, #0
 8004638:	657b      	str	r3, [r7, #84]	; 0x54
 800463a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800463e:	4642      	mov	r2, r8
 8004640:	464b      	mov	r3, r9
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	0159      	lsls	r1, r3, #5
 800464c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004650:	0150      	lsls	r0, r2, #5
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4641      	mov	r1, r8
 8004658:	1a51      	subs	r1, r2, r1
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	4649      	mov	r1, r9
 800465e:	eb63 0301 	sbc.w	r3, r3, r1
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004670:	4659      	mov	r1, fp
 8004672:	018b      	lsls	r3, r1, #6
 8004674:	4651      	mov	r1, sl
 8004676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800467a:	4651      	mov	r1, sl
 800467c:	018a      	lsls	r2, r1, #6
 800467e:	4651      	mov	r1, sl
 8004680:	1a54      	subs	r4, r2, r1
 8004682:	4659      	mov	r1, fp
 8004684:	eb63 0501 	sbc.w	r5, r3, r1
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	00eb      	lsls	r3, r5, #3
 8004692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004696:	00e2      	lsls	r2, r4, #3
 8004698:	4614      	mov	r4, r2
 800469a:	461d      	mov	r5, r3
 800469c:	4643      	mov	r3, r8
 800469e:	18e3      	adds	r3, r4, r3
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	464b      	mov	r3, r9
 80046a4:	eb45 0303 	adc.w	r3, r5, r3
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046b6:	4629      	mov	r1, r5
 80046b8:	028b      	lsls	r3, r1, #10
 80046ba:	4621      	mov	r1, r4
 80046bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046c0:	4621      	mov	r1, r4
 80046c2:	028a      	lsls	r2, r1, #10
 80046c4:	4610      	mov	r0, r2
 80046c6:	4619      	mov	r1, r3
 80046c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046cc:	2200      	movs	r2, #0
 80046ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80046d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046d6:	f7fc fa87 	bl	8000be8 <__aeabi_uldivmod>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4613      	mov	r3, r2
 80046e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80046e4:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HAL_RCC_GetSysClockFreq+0x458>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	0f1b      	lsrs	r3, r3, #28
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80046f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004702:	e003      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004704:	4b06      	ldr	r3, [pc, #24]	; (8004720 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800470a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004710:	4618      	mov	r0, r3
 8004712:	37b8      	adds	r7, #184	; 0xb8
 8004714:	46bd      	mov	sp, r7
 8004716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
 8004720:	00f42400 	.word	0x00f42400

08004724 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e28d      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8083 	beq.w	800484a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004744:	4b94      	ldr	r3, [pc, #592]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	2b04      	cmp	r3, #4
 800474e:	d019      	beq.n	8004784 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004750:	4b91      	ldr	r3, [pc, #580]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004758:	2b08      	cmp	r3, #8
 800475a:	d106      	bne.n	800476a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800475c:	4b8e      	ldr	r3, [pc, #568]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004768:	d00c      	beq.n	8004784 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800476a:	4b8b      	ldr	r3, [pc, #556]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d112      	bne.n	800479c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004776:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004782:	d10b      	bne.n	800479c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004784:	4b84      	ldr	r3, [pc, #528]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d05b      	beq.n	8004848 <HAL_RCC_OscConfig+0x124>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d157      	bne.n	8004848 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e25a      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a4:	d106      	bne.n	80047b4 <HAL_RCC_OscConfig+0x90>
 80047a6:	4b7c      	ldr	r3, [pc, #496]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a7b      	ldr	r2, [pc, #492]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e01d      	b.n	80047f0 <HAL_RCC_OscConfig+0xcc>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCC_OscConfig+0xb4>
 80047be:	4b76      	ldr	r3, [pc, #472]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a75      	ldr	r2, [pc, #468]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80047c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	4b73      	ldr	r3, [pc, #460]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a72      	ldr	r2, [pc, #456]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	e00b      	b.n	80047f0 <HAL_RCC_OscConfig+0xcc>
 80047d8:	4b6f      	ldr	r3, [pc, #444]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a6e      	ldr	r2, [pc, #440]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80047de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	4b6c      	ldr	r3, [pc, #432]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a6b      	ldr	r2, [pc, #428]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80047ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d013      	beq.n	8004820 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd fd5e 	bl	80022b8 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004800:	f7fd fd5a 	bl	80022b8 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	; 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e21f      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	4b61      	ldr	r3, [pc, #388]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCC_OscConfig+0xdc>
 800481e:	e014      	b.n	800484a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fd fd4a 	bl	80022b8 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004828:	f7fd fd46 	bl	80022b8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b64      	cmp	r3, #100	; 0x64
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e20b      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483a:	4b57      	ldr	r3, [pc, #348]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0x104>
 8004846:	e000      	b.n	800484a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d06f      	beq.n	8004936 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004856:	4b50      	ldr	r3, [pc, #320]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
 800485e:	2b00      	cmp	r3, #0
 8004860:	d017      	beq.n	8004892 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004862:	4b4d      	ldr	r3, [pc, #308]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800486a:	2b08      	cmp	r3, #8
 800486c:	d105      	bne.n	800487a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800486e:	4b4a      	ldr	r3, [pc, #296]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800487a:	4b47      	ldr	r3, [pc, #284]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004882:	2b0c      	cmp	r3, #12
 8004884:	d11c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004886:	4b44      	ldr	r3, [pc, #272]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d116      	bne.n	80048c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004892:	4b41      	ldr	r3, [pc, #260]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <HAL_RCC_OscConfig+0x186>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d001      	beq.n	80048aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e1d3      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048aa:	4b3b      	ldr	r3, [pc, #236]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4937      	ldr	r1, [pc, #220]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048be:	e03a      	b.n	8004936 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d020      	beq.n	800490a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c8:	4b34      	ldr	r3, [pc, #208]	; (800499c <HAL_RCC_OscConfig+0x278>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fd fcf3 	bl	80022b8 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048d6:	f7fd fcef 	bl	80022b8 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e1b4      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e8:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f4:	4b28      	ldr	r3, [pc, #160]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4925      	ldr	r1, [pc, #148]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004904:	4313      	orrs	r3, r2
 8004906:	600b      	str	r3, [r1, #0]
 8004908:	e015      	b.n	8004936 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <HAL_RCC_OscConfig+0x278>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fd fcd2 	bl	80022b8 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004918:	f7fd fcce 	bl	80022b8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e193      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800492a:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d036      	beq.n	80049b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d016      	beq.n	8004978 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <HAL_RCC_OscConfig+0x27c>)
 800494c:	2201      	movs	r2, #1
 800494e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fd fcb2 	bl	80022b8 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004958:	f7fd fcae 	bl	80022b8 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e173      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 800496c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0x234>
 8004976:	e01b      	b.n	80049b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RCC_OscConfig+0x27c>)
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fd fc9b 	bl	80022b8 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004984:	e00e      	b.n	80049a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004986:	f7fd fc97 	bl	80022b8 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d907      	bls.n	80049a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e15c      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
 8004998:	40023800 	.word	0x40023800
 800499c:	42470000 	.word	0x42470000
 80049a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a4:	4b8a      	ldr	r3, [pc, #552]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 80049a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ea      	bne.n	8004986 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8097 	beq.w	8004aec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c2:	4b83      	ldr	r3, [pc, #524]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10f      	bne.n	80049ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	4b7f      	ldr	r3, [pc, #508]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	4a7e      	ldr	r2, [pc, #504]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 80049d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049dc:	6413      	str	r3, [r2, #64]	; 0x40
 80049de:	4b7c      	ldr	r3, [pc, #496]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ea:	2301      	movs	r3, #1
 80049ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ee:	4b79      	ldr	r3, [pc, #484]	; (8004bd4 <HAL_RCC_OscConfig+0x4b0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d118      	bne.n	8004a2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049fa:	4b76      	ldr	r3, [pc, #472]	; (8004bd4 <HAL_RCC_OscConfig+0x4b0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a75      	ldr	r2, [pc, #468]	; (8004bd4 <HAL_RCC_OscConfig+0x4b0>)
 8004a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a06:	f7fd fc57 	bl	80022b8 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0e:	f7fd fc53 	bl	80022b8 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e118      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a20:	4b6c      	ldr	r3, [pc, #432]	; (8004bd4 <HAL_RCC_OscConfig+0x4b0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x31e>
 8004a34:	4b66      	ldr	r3, [pc, #408]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	4a65      	ldr	r2, [pc, #404]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a40:	e01c      	b.n	8004a7c <HAL_RCC_OscConfig+0x358>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b05      	cmp	r3, #5
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x340>
 8004a4a:	4b61      	ldr	r3, [pc, #388]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	4a60      	ldr	r2, [pc, #384]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004a50:	f043 0304 	orr.w	r3, r3, #4
 8004a54:	6713      	str	r3, [r2, #112]	; 0x70
 8004a56:	4b5e      	ldr	r3, [pc, #376]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	4a5d      	ldr	r2, [pc, #372]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6713      	str	r3, [r2, #112]	; 0x70
 8004a62:	e00b      	b.n	8004a7c <HAL_RCC_OscConfig+0x358>
 8004a64:	4b5a      	ldr	r3, [pc, #360]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	4a59      	ldr	r2, [pc, #356]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a70:	4b57      	ldr	r3, [pc, #348]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	4a56      	ldr	r2, [pc, #344]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004a76:	f023 0304 	bic.w	r3, r3, #4
 8004a7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d015      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fd fc18 	bl	80022b8 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8c:	f7fd fc14 	bl	80022b8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e0d7      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa2:	4b4b      	ldr	r3, [pc, #300]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0ee      	beq.n	8004a8c <HAL_RCC_OscConfig+0x368>
 8004aae:	e014      	b.n	8004ada <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab0:	f7fd fc02 	bl	80022b8 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab8:	f7fd fbfe 	bl	80022b8 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e0c1      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ace:	4b40      	ldr	r3, [pc, #256]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1ee      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d105      	bne.n	8004aec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae0:	4b3b      	ldr	r3, [pc, #236]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	4a3a      	ldr	r2, [pc, #232]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80ad 	beq.w	8004c50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004af6:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d060      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d145      	bne.n	8004b96 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0a:	4b33      	ldr	r3, [pc, #204]	; (8004bd8 <HAL_RCC_OscConfig+0x4b4>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd fbd2 	bl	80022b8 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b18:	f7fd fbce 	bl	80022b8 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e093      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2a:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	019b      	lsls	r3, r3, #6
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	041b      	lsls	r3, r3, #16
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	071b      	lsls	r3, r3, #28
 8004b62:	491b      	ldr	r1, [pc, #108]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b68:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <HAL_RCC_OscConfig+0x4b4>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fd fba3 	bl	80022b8 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b76:	f7fd fb9f 	bl	80022b8 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e064      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b88:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x452>
 8004b94:	e05c      	b.n	8004c50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <HAL_RCC_OscConfig+0x4b4>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fb8c 	bl	80022b8 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fd fb88 	bl	80022b8 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e04d      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_RCC_OscConfig+0x4ac>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x480>
 8004bc2:	e045      	b.n	8004c50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d107      	bne.n	8004bdc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e040      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	40007000 	.word	0x40007000
 8004bd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bdc:	4b1f      	ldr	r3, [pc, #124]	; (8004c5c <HAL_RCC_OscConfig+0x538>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d030      	beq.n	8004c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d129      	bne.n	8004c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d122      	bne.n	8004c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d119      	bne.n	8004c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	3b01      	subs	r3, #1
 8004c26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d10f      	bne.n	8004c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d107      	bne.n	8004c4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40023800 	.word	0x40023800

08004c60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e066      	b.n	8004d44 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	7f5b      	ldrb	r3, [r3, #29]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fd f86a 	bl	8001d60 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	22ca      	movs	r2, #202	; 0xca
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2253      	movs	r2, #83	; 0x53
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f998 	bl	8004fd8 <RTC_EnterInitMode>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d12c      	bne.n	8004d0c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6812      	ldr	r2, [r2, #0]
 8004cbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6899      	ldr	r1, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	68d2      	ldr	r2, [r2, #12]
 8004cec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6919      	ldr	r1, [r3, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	041a      	lsls	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f99f 	bl	8005046 <RTC_ExitInitMode>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d113      	bne.n	8004d3a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	22ff      	movs	r2, #255	; 0xff
 8004d40:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d4c:	b590      	push	{r4, r7, lr}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	7f1b      	ldrb	r3, [r3, #28]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_RTC_SetTime+0x1c>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e087      	b.n	8004e78 <HAL_RTC_SetTime+0x12c>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2202      	movs	r2, #2
 8004d72:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d126      	bne.n	8004dc8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f97c 	bl	8005090 <RTC_ByteToBcd2>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	785b      	ldrb	r3, [r3, #1]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 f975 	bl	8005090 <RTC_ByteToBcd2>
 8004da6:	4603      	mov	r3, r0
 8004da8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004daa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	789b      	ldrb	r3, [r3, #2]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 f96d 	bl	8005090 <RTC_ByteToBcd2>
 8004db6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004db8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	78db      	ldrb	r3, [r3, #3]
 8004dc0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e018      	b.n	8004dfa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	785b      	ldrb	r3, [r3, #1]
 8004de6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004de8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004dee:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	78db      	ldrb	r3, [r3, #3]
 8004df4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	22ca      	movs	r2, #202	; 0xca
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2253      	movs	r2, #83	; 0x53
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f8e4 	bl	8004fd8 <RTC_EnterInitMode>
 8004e10:	4603      	mov	r3, r0
 8004e12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004e14:	7cfb      	ldrb	r3, [r7, #19]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d120      	bne.n	8004e5c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e28:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6899      	ldr	r1, [r3, #8]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f8f7 	bl	8005046 <RTC_ExitInitMode>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	22ff      	movs	r2, #255	; 0xff
 8004e6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	771a      	strb	r2, [r3, #28]

  return status;
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd90      	pop	{r4, r7, pc}

08004e80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	7f1b      	ldrb	r3, [r3, #28]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_RTC_SetDate+0x1c>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e071      	b.n	8004f80 <HAL_RTC_SetDate+0x100>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10e      	bne.n	8004ecc <HAL_RTC_SetDate+0x4c>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d008      	beq.n	8004ecc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	f023 0310 	bic.w	r3, r3, #16
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	330a      	adds	r3, #10
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d11c      	bne.n	8004f0c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	78db      	ldrb	r3, [r3, #3]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f8da 	bl	8005090 <RTC_ByteToBcd2>
 8004edc:	4603      	mov	r3, r0
 8004ede:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 f8d3 	bl	8005090 <RTC_ByteToBcd2>
 8004eea:	4603      	mov	r3, r0
 8004eec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004eee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	789b      	ldrb	r3, [r3, #2]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 f8cb 	bl	8005090 <RTC_ByteToBcd2>
 8004efa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004efc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e00e      	b.n	8004f2a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	78db      	ldrb	r3, [r3, #3]
 8004f10:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	785b      	ldrb	r3, [r3, #1]
 8004f16:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f18:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004f1e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	22ca      	movs	r2, #202	; 0xca
 8004f30:	625a      	str	r2, [r3, #36]	; 0x24
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2253      	movs	r2, #83	; 0x53
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 f84c 	bl	8004fd8 <RTC_EnterInitMode>
 8004f40:	4603      	mov	r3, r0
 8004f42:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10c      	bne.n	8004f64 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f54:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f58:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f873 	bl	8005046 <RTC_ExitInitMode>
 8004f60:	4603      	mov	r3, r0
 8004f62:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d102      	bne.n	8004f70 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	22ff      	movs	r2, #255	; 0xff
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	771a      	strb	r2, [r3, #28]

  return status;
 8004f7e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd90      	pop	{r4, r7, pc}

08004f88 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fa2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fa4:	f7fd f988 	bl	80022b8 <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004faa:	e009      	b.n	8004fc0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fac:	f7fd f984 	bl	80022b8 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fba:	d901      	bls.n	8004fc0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e007      	b.n	8004fd0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0ee      	beq.n	8004fac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d122      	bne.n	800503c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005004:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005006:	f7fd f957 	bl	80022b8 <HAL_GetTick>
 800500a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800500c:	e00c      	b.n	8005028 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800500e:	f7fd f953 	bl	80022b8 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800501c:	d904      	bls.n	8005028 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2204      	movs	r2, #4
 8005022:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d102      	bne.n	800503c <RTC_EnterInitMode+0x64>
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d1e8      	bne.n	800500e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800503c:	7bfb      	ldrb	r3, [r7, #15]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005060:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff ff89 	bl	8004f88 <HAL_RTC_WaitForSynchro>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2204      	movs	r2, #4
 8005080:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005086:	7bfb      	ldrb	r3, [r7, #15]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800509e:	e005      	b.n	80050ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	3301      	adds	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	3b0a      	subs	r3, #10
 80050aa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	2b09      	cmp	r3, #9
 80050b0:	d8f6      	bhi.n	80050a0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	b2db      	uxtb	r3, r3
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e022      	b.n	8005122 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fc fe60 	bl	8001db4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2203      	movs	r2, #3
 80050f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f815 	bl	800512c <HAL_SD_InitCard>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e00a      	b.n	8005122 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800512c:	b5b0      	push	{r4, r5, r7, lr}
 800512e:	b08e      	sub	sp, #56	; 0x38
 8005130:	af04      	add	r7, sp, #16
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005134:	2300      	movs	r3, #0
 8005136:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005148:	2376      	movs	r3, #118	; 0x76
 800514a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681d      	ldr	r5, [r3, #0]
 8005150:	466c      	mov	r4, sp
 8005152:	f107 0314 	add.w	r3, r7, #20
 8005156:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800515a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800515e:	f107 0308 	add.w	r3, r7, #8
 8005162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005164:	4628      	mov	r0, r5
 8005166:	f001 fc8f 	bl	8006a88 <SDIO_Init>
 800516a:	4603      	mov	r3, r0
 800516c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e04f      	b.n	800521c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800517c:	4b29      	ldr	r3, [pc, #164]	; (8005224 <HAL_SD_InitCard+0xf8>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f001 fcc7 	bl	8006b1a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800518c:	4b25      	ldr	r3, [pc, #148]	; (8005224 <HAL_SD_InitCard+0xf8>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005192:	2002      	movs	r0, #2
 8005194:	f7fd f89c 	bl	80022d0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 f857 	bl	800624c <SD_PowerON>
 800519e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e02e      	b.n	800521c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 ff76 	bl	80060b0 <SD_InitCard>
 80051c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00b      	beq.n	80051e4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e01b      	b.n	800521c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051ec:	4618      	mov	r0, r3
 80051ee:	f001 fd26 	bl	8006c3e <SDMMC_CmdBlockLength>
 80051f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00f      	beq.n	800521a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <HAL_SD_InitCard+0xfc>)
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3728      	adds	r7, #40	; 0x28
 8005220:	46bd      	mov	sp, r7
 8005222:	bdb0      	pop	{r4, r5, r7, pc}
 8005224:	422580a0 	.word	0x422580a0
 8005228:	004005ff 	.word	0x004005ff

0800522c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b092      	sub	sp, #72	; 0x48
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800523a:	f7fd f83d 	bl	80022b8 <HAL_GetTick>
 800523e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d107      	bne.n	800525e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e1bd      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	f040 81b0 	bne.w	80055cc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	441a      	add	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527c:	429a      	cmp	r2, r3
 800527e:	d907      	bls.n	8005290 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e1a4      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2203      	movs	r2, #3
 8005294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2200      	movs	r2, #0
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d002      	beq.n	80052ae <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	025b      	lsls	r3, r3, #9
 80052ac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80052ae:	f04f 33ff 	mov.w	r3, #4294967295
 80052b2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	025b      	lsls	r3, r3, #9
 80052b8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80052ba:	2390      	movs	r3, #144	; 0x90
 80052bc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80052be:	2302      	movs	r3, #2
 80052c0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80052c6:	2301      	movs	r3, #1
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f107 0214 	add.w	r2, r7, #20
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 fc86 	bl	8006be6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d90a      	bls.n	80052f6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2202      	movs	r2, #2
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 fcea 	bl	8006cc6 <SDMMC_CmdReadMultiBlock>
 80052f2:	6478      	str	r0, [r7, #68]	; 0x44
 80052f4:	e009      	b.n	800530a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005302:	4618      	mov	r0, r3
 8005304:	f001 fcbd 	bl	8006c82 <SDMMC_CmdReadSingleBlock>
 8005308:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800530a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800530c:	2b00      	cmp	r3, #0
 800530e:	d012      	beq.n	8005336 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a7a      	ldr	r2, [pc, #488]	; (8005500 <HAL_SD_ReadBlocks+0x2d4>)
 8005316:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531e:	431a      	orrs	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e151      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800533a:	e061      	b.n	8005400 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d03c      	beq.n	80053c4 <HAL_SD_ReadBlocks+0x198>
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d039      	beq.n	80053c4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005350:	2300      	movs	r3, #0
 8005352:	643b      	str	r3, [r7, #64]	; 0x40
 8005354:	e033      	b.n	80053be <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f001 fbbf 	bl	8006ade <SDIO_ReadFIFO>
 8005360:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	b2da      	uxtb	r2, r3
 8005366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005368:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	3301      	adds	r3, #1
 800536e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005372:	3b01      	subs	r3, #1
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	0a1b      	lsrs	r3, r3, #8
 800537a:	b2da      	uxtb	r2, r3
 800537c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	3301      	adds	r3, #1
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005388:	3b01      	subs	r3, #1
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	b2da      	uxtb	r2, r3
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005394:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005398:	3301      	adds	r3, #1
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800539c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539e:	3b01      	subs	r3, #1
 80053a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	0e1b      	lsrs	r3, r3, #24
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053aa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80053ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ae:	3301      	adds	r3, #1
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80053b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b4:	3b01      	subs	r3, #1
 80053b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80053b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ba:	3301      	adds	r3, #1
 80053bc:	643b      	str	r3, [r7, #64]	; 0x40
 80053be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c0:	2b07      	cmp	r3, #7
 80053c2:	d9c8      	bls.n	8005356 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80053c4:	f7fc ff78 	bl	80022b8 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d902      	bls.n	80053da <HAL_SD_ReadBlocks+0x1ae>
 80053d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d112      	bne.n	8005400 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a48      	ldr	r2, [pc, #288]	; (8005500 <HAL_SD_ReadBlocks+0x2d4>)
 80053e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e0ec      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005406:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800540a:	2b00      	cmp	r3, #0
 800540c:	d096      	beq.n	800533c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d022      	beq.n	8005462 <HAL_SD_ReadBlocks+0x236>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d91f      	bls.n	8005462 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	2b03      	cmp	r3, #3
 8005428:	d01b      	beq.n	8005462 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f001 fcb0 	bl	8006d94 <SDMMC_CmdStopTransfer>
 8005434:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005438:	2b00      	cmp	r3, #0
 800543a:	d012      	beq.n	8005462 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2f      	ldr	r2, [pc, #188]	; (8005500 <HAL_SD_ReadBlocks+0x2d4>)
 8005442:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544a:	431a      	orrs	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e0bb      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b00      	cmp	r3, #0
 800546e:	d012      	beq.n	8005496 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a22      	ldr	r2, [pc, #136]	; (8005500 <HAL_SD_ReadBlocks+0x2d4>)
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	f043 0208 	orr.w	r2, r3, #8
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e0a1      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d012      	beq.n	80054ca <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a15      	ldr	r2, [pc, #84]	; (8005500 <HAL_SD_ReadBlocks+0x2d4>)
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	f043 0202 	orr.w	r2, r3, #2
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e087      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d064      	beq.n	80055a2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a08      	ldr	r2, [pc, #32]	; (8005500 <HAL_SD_ReadBlocks+0x2d4>)
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	f043 0220 	orr.w	r2, r3, #32
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e06d      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
 80054fe:	bf00      	nop
 8005500:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f001 fae8 	bl	8006ade <SDIO_ReadFIFO>
 800550e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	b2da      	uxtb	r2, r3
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551a:	3301      	adds	r3, #1
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005520:	3b01      	subs	r3, #1
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	b2da      	uxtb	r2, r3
 800552a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	3301      	adds	r3, #1
 8005532:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005536:	3b01      	subs	r3, #1
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	b2da      	uxtb	r2, r3
 8005540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005542:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	3301      	adds	r3, #1
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800554a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554c:	3b01      	subs	r3, #1
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	0e1b      	lsrs	r3, r3, #24
 8005554:	b2da      	uxtb	r2, r3
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	3301      	adds	r3, #1
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005562:	3b01      	subs	r3, #1
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005566:	f7fc fea7 	bl	80022b8 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005572:	429a      	cmp	r2, r3
 8005574:	d902      	bls.n	800557c <HAL_SD_ReadBlocks+0x350>
 8005576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005578:	2b00      	cmp	r3, #0
 800557a:	d112      	bne.n	80055a2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <HAL_SD_ReadBlocks+0x3b8>)
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005588:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e01b      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <HAL_SD_ReadBlocks+0x38a>
 80055b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1a6      	bne.n	8005504 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80055be:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e006      	b.n	80055da <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3748      	adds	r7, #72	; 0x48
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	004005ff 	.word	0x004005ff

080055e8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b092      	sub	sp, #72	; 0x48
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80055f6:	f7fc fe5f 	bl	80022b8 <HAL_GetTick>
 80055fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d107      	bne.n	800561a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e165      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	f040 8158 	bne.w	80058d8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800562e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	441a      	add	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	429a      	cmp	r2, r3
 800563a:	d907      	bls.n	800564c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e14c      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2203      	movs	r2, #3
 8005650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2200      	movs	r2, #0
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005660:	2b01      	cmp	r3, #1
 8005662:	d002      	beq.n	800566a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	025b      	lsls	r3, r3, #9
 8005668:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800566a:	f04f 33ff 	mov.w	r3, #4294967295
 800566e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	025b      	lsls	r3, r3, #9
 8005674:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005676:	2390      	movs	r3, #144	; 0x90
 8005678:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800567a:	2300      	movs	r3, #0
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800567e:	2300      	movs	r3, #0
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005682:	2301      	movs	r3, #1
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f107 0218 	add.w	r2, r7, #24
 800568e:	4611      	mov	r1, r2
 8005690:	4618      	mov	r0, r3
 8005692:	f001 faa8 	bl	8006be6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d90a      	bls.n	80056b2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 fb50 	bl	8006d4e <SDMMC_CmdWriteMultiBlock>
 80056ae:	6478      	str	r0, [r7, #68]	; 0x44
 80056b0:	e009      	b.n	80056c6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2210      	movs	r2, #16
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 fb23 	bl	8006d0a <SDMMC_CmdWriteSingleBlock>
 80056c4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80056c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d012      	beq.n	80056f2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a87      	ldr	r2, [pc, #540]	; (80058f0 <HAL_SD_WriteBlocks+0x308>)
 80056d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056da:	431a      	orrs	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e0f9      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80056f6:	e065      	b.n	80057c4 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d040      	beq.n	8005788 <HAL_SD_WriteBlocks+0x1a0>
 8005706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d03d      	beq.n	8005788 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800570c:	2300      	movs	r3, #0
 800570e:	643b      	str	r3, [r7, #64]	; 0x40
 8005710:	e037      	b.n	8005782 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	3301      	adds	r3, #1
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800571e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005720:	3b01      	subs	r3, #1
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	021a      	lsls	r2, r3, #8
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005732:	3301      	adds	r3, #1
 8005734:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005738:	3b01      	subs	r3, #1
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	041a      	lsls	r2, r3, #16
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574a:	3301      	adds	r3, #1
 800574c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800574e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005750:	3b01      	subs	r3, #1
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	061a      	lsls	r2, r3, #24
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005762:	3301      	adds	r3, #1
 8005764:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005768:	3b01      	subs	r3, #1
 800576a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f107 0214 	add.w	r2, r7, #20
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f001 f9be 	bl	8006af8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800577c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577e:	3301      	adds	r3, #1
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
 8005782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005784:	2b07      	cmp	r3, #7
 8005786:	d9c4      	bls.n	8005712 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005788:	f7fc fd96 	bl	80022b8 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005794:	429a      	cmp	r2, r3
 8005796:	d902      	bls.n	800579e <HAL_SD_WriteBlocks+0x1b6>
 8005798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800579a:	2b00      	cmp	r3, #0
 800579c:	d112      	bne.n	80057c4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a53      	ldr	r2, [pc, #332]	; (80058f0 <HAL_SD_WriteBlocks+0x308>)
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ac:	431a      	orrs	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e090      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d092      	beq.n	80056f8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d022      	beq.n	8005826 <HAL_SD_WriteBlocks+0x23e>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d91f      	bls.n	8005826 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d01b      	beq.n	8005826 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f001 face 	bl	8006d94 <SDMMC_CmdStopTransfer>
 80057f8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80057fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d012      	beq.n	8005826 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a3a      	ldr	r2, [pc, #232]	; (80058f0 <HAL_SD_WriteBlocks+0x308>)
 8005806:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800580c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800580e:	431a      	orrs	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e05f      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2d      	ldr	r2, [pc, #180]	; (80058f0 <HAL_SD_WriteBlocks+0x308>)
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	f043 0208 	orr.w	r2, r3, #8
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e045      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d012      	beq.n	800588e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a20      	ldr	r2, [pc, #128]	; (80058f0 <HAL_SD_WriteBlocks+0x308>)
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	f043 0202 	orr.w	r2, r3, #2
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e02b      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	d012      	beq.n	80058c2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <HAL_SD_WriteBlocks+0x308>)
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	f043 0210 	orr.w	r2, r3, #16
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e011      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e006      	b.n	80058e6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3748      	adds	r7, #72	; 0x48
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	004005ff 	.word	0x004005ff

080058f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_SD_IRQHandler+0x2e>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fd4c 	bl	80063b8 <SD_Read_IT>
 8005920:	e155      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 808f 	beq.w	8005a50 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800594a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800594e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d039      	beq.n	80059de <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <HAL_SD_IRQHandler+0x8a>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d011      	beq.n	80059a2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f001 fa06 	bl	8006d94 <SDMMC_CmdStopTransfer>
 8005988:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f91f 	bl	8005be0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d104      	bne.n	80059ce <HAL_SD_IRQHandler+0xda>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f001 fe2c 	bl	800762c <HAL_SD_RxCpltCallback>
 80059d4:	e0fb      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 fe1e 	bl	8007618 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80059dc:	e0f7      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 80f2 	beq.w	8005bce <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d011      	beq.n	8005a18 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 f9cb 	bl	8006d94 <SDMMC_CmdStopTransfer>
 80059fe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8e4 	bl	8005be0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f040 80d5 	bne.w	8005bce <HAL_SD_IRQHandler+0x2da>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f040 80cf 	bne.w	8005bce <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0208 	bic.w	r2, r2, #8
 8005a3e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 fde5 	bl	8007618 <HAL_SD_TxCpltCallback>
}
 8005a4e:	e0be      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d008      	beq.n	8005a70 <HAL_SD_IRQHandler+0x17c>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fcf6 	bl	800645a <SD_Write_IT>
 8005a6e:	e0ae      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 80a7 	beq.w	8005bce <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	f043 0202 	orr.w	r2, r3, #2
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	f043 0208 	orr.w	r2, r3, #8
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d005      	beq.n	8005ace <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	f043 0220 	orr.w	r2, r3, #32
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	f043 0210 	orr.w	r2, r3, #16
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f240 523a 	movw	r2, #1338	; 0x53a
 8005af0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005b00:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 f944 	bl	8006d94 <SDMMC_CmdStopTransfer>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f855 	bl	8005be0 <HAL_SD_ErrorCallback>
}
 8005b36:	e04a      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d045      	beq.n	8005bce <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d104      	bne.n	8005b56 <HAL_SD_IRQHandler+0x262>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d011      	beq.n	8005b7a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	4a1f      	ldr	r2, [pc, #124]	; (8005bd8 <HAL_SD_IRQHandler+0x2e4>)
 8005b5c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fd fac8 	bl	80030f8 <HAL_DMA_Abort_IT>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d02f      	beq.n	8005bce <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fa2e 	bl	8005fd4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b78:	e029      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <HAL_SD_IRQHandler+0x29a>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d011      	beq.n	8005bb2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	4a12      	ldr	r2, [pc, #72]	; (8005bdc <HAL_SD_IRQHandler+0x2e8>)
 8005b94:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fd faac 	bl	80030f8 <HAL_DMA_Abort_IT>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d013      	beq.n	8005bce <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fa49 	bl	8006042 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005bb0:	e00d      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 fd1c 	bl	8007604 <HAL_SD_AbortCallback>
}
 8005bcc:	e7ff      	b.n	8005bce <HAL_SD_IRQHandler+0x2da>
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	08005fd5 	.word	0x08005fd5
 8005bdc:	08006043 	.word	0x08006043

08005be0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c02:	0f9b      	lsrs	r3, r3, #30
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c0e:	0e9b      	lsrs	r3, r3, #26
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c20:	0e1b      	lsrs	r3, r3, #24
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c32:	0c1b      	lsrs	r3, r3, #16
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c3e:	0a1b      	lsrs	r3, r3, #8
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c54:	0d1b      	lsrs	r3, r3, #20
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c60:	0c1b      	lsrs	r3, r3, #16
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c72:	0bdb      	lsrs	r3, r3, #15
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c84:	0b9b      	lsrs	r3, r3, #14
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c96:	0b5b      	lsrs	r3, r3, #13
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ca8:	0b1b      	lsrs	r3, r3, #12
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d163      	bne.n	8005d8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cc8:	009a      	lsls	r2, r3, #2
 8005cca:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005cce:	4013      	ands	r3, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005cd4:	0f92      	lsrs	r2, r2, #30
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce0:	0edb      	lsrs	r3, r3, #27
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf2:	0e1b      	lsrs	r3, r3, #24
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d04:	0d5b      	lsrs	r3, r3, #21
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d16:	0c9b      	lsrs	r3, r3, #18
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d28:	0bdb      	lsrs	r3, r3, #15
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	7e1b      	ldrb	r3, [r3, #24]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005d56:	fb03 f202 	mul.w	r2, r3, r2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	7a1b      	ldrb	r3, [r3, #8]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	2201      	movs	r2, #1
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005d78:	0a52      	lsrs	r2, r2, #9
 8005d7a:	fb03 f202 	mul.w	r2, r3, r2
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d88:	661a      	str	r2, [r3, #96]	; 0x60
 8005d8a:	e031      	b.n	8005df0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d11d      	bne.n	8005dd0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da2:	0c1b      	lsrs	r3, r3, #16
 8005da4:	431a      	orrs	r2, r3
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	3301      	adds	r3, #1
 8005db0:	029a      	lsls	r2, r3, #10
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	661a      	str	r2, [r3, #96]	; 0x60
 8005dce:	e00f      	b.n	8005df0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a58      	ldr	r2, [pc, #352]	; (8005f38 <HAL_SD_GetCardCSD+0x344>)
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e09d      	b.n	8005f2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df4:	0b9b      	lsrs	r3, r3, #14
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e06:	09db      	lsrs	r3, r3, #7
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	0fdb      	lsrs	r3, r3, #31
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e34:	0f5b      	lsrs	r3, r3, #29
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	0e9b      	lsrs	r3, r3, #26
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	0d9b      	lsrs	r3, r3, #22
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	0d5b      	lsrs	r3, r3, #21
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	0c1b      	lsrs	r3, r3, #16
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	0bdb      	lsrs	r3, r3, #15
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eae:	0b9b      	lsrs	r3, r3, #14
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	0b5b      	lsrs	r3, r3, #13
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed6:	0b1b      	lsrs	r3, r3, #12
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eea:	0a9b      	lsrs	r3, r3, #10
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	004005ff 	.word	0x004005ff

08005f3c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005fa0:	f107 030c 	add.w	r3, r7, #12
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f9de 	bl	8006368 <SD_SendStatus>
 8005fac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	0a5b      	lsrs	r3, r3, #9
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005fca:	693b      	ldr	r3, [r7, #16]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fea:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f7ff ffd1 	bl	8005f94 <HAL_SD_GetCardState>
 8005ff2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b06      	cmp	r3, #6
 8006006:	d002      	beq.n	800600e <SD_DMATxAbort+0x3a>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b05      	cmp	r3, #5
 800600c:	d10a      	bne.n	8006024 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f000 febe 	bl	8006d94 <SDMMC_CmdStopTransfer>
 8006018:	4602      	mov	r2, r0
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	431a      	orrs	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	2b00      	cmp	r3, #0
 800602a:	d103      	bne.n	8006034 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f001 fae9 	bl	8007604 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006032:	e002      	b.n	800603a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff fdd3 	bl	8005be0 <HAL_SD_ErrorCallback>
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f240 523a 	movw	r2, #1338	; 0x53a
 8006058:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f7ff ff9a 	bl	8005f94 <HAL_SD_GetCardState>
 8006060:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b06      	cmp	r3, #6
 8006074:	d002      	beq.n	800607c <SD_DMARxAbort+0x3a>
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b05      	cmp	r3, #5
 800607a:	d10a      	bne.n	8006092 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fe87 	bl	8006d94 <SDMMC_CmdStopTransfer>
 8006086:	4602      	mov	r2, r0
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	431a      	orrs	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f001 fab2 	bl	8007604 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80060a0:	e002      	b.n	80060a8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7ff fd9c 	bl	8005be0 <HAL_SD_ErrorCallback>
}
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060b0:	b5b0      	push	{r4, r5, r7, lr}
 80060b2:	b094      	sub	sp, #80	; 0x50
 80060b4:	af04      	add	r7, sp, #16
 80060b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80060b8:	2301      	movs	r3, #1
 80060ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fd38 	bl	8006b36 <SDIO_GetPowerState>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80060cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80060d0:	e0b8      	b.n	8006244 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d02f      	beq.n	800613a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 ff1f 	bl	8006f22 <SDMMC_CmdSendCID>
 80060e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80060ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ee:	e0a9      	b.n	8006244 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fd62 	bl	8006bc0 <SDIO_GetResponse>
 80060fc:	4602      	mov	r2, r0
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2104      	movs	r1, #4
 8006108:	4618      	mov	r0, r3
 800610a:	f000 fd59 	bl	8006bc0 <SDIO_GetResponse>
 800610e:	4602      	mov	r2, r0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2108      	movs	r1, #8
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fd50 	bl	8006bc0 <SDIO_GetResponse>
 8006120:	4602      	mov	r2, r0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	210c      	movs	r1, #12
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fd47 	bl	8006bc0 <SDIO_GetResponse>
 8006132:	4602      	mov	r2, r0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613e:	2b03      	cmp	r3, #3
 8006140:	d00d      	beq.n	800615e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f107 020e 	add.w	r2, r7, #14
 800614a:	4611      	mov	r1, r2
 800614c:	4618      	mov	r0, r3
 800614e:	f000 ff25 	bl	8006f9c <SDMMC_CmdSetRelAdd>
 8006152:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <SD_InitCard+0xae>
    {
      return errorstate;
 800615a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615c:	e072      	b.n	8006244 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006162:	2b03      	cmp	r3, #3
 8006164:	d036      	beq.n	80061d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006166:	89fb      	ldrh	r3, [r7, #14]
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	4619      	mov	r1, r3
 800617a:	4610      	mov	r0, r2
 800617c:	f000 feef 	bl	8006f5e <SDMMC_CmdSendCSD>
 8006180:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618a:	e05b      	b.n	8006244 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2100      	movs	r1, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fd14 	bl	8006bc0 <SDIO_GetResponse>
 8006198:	4602      	mov	r2, r0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2104      	movs	r1, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fd0b 	bl	8006bc0 <SDIO_GetResponse>
 80061aa:	4602      	mov	r2, r0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2108      	movs	r1, #8
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fd02 	bl	8006bc0 <SDIO_GetResponse>
 80061bc:	4602      	mov	r2, r0
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	210c      	movs	r1, #12
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fcf9 	bl	8006bc0 <SDIO_GetResponse>
 80061ce:	4602      	mov	r2, r0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2104      	movs	r1, #4
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fcf0 	bl	8006bc0 <SDIO_GetResponse>
 80061e0:	4603      	mov	r3, r0
 80061e2:	0d1a      	lsrs	r2, r3, #20
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80061e8:	f107 0310 	add.w	r3, r7, #16
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff fd00 	bl	8005bf4 <HAL_SD_GetCardCSD>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061fe:	e021      	b.n	8006244 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006208:	041b      	lsls	r3, r3, #16
 800620a:	2200      	movs	r2, #0
 800620c:	461c      	mov	r4, r3
 800620e:	4615      	mov	r5, r2
 8006210:	4622      	mov	r2, r4
 8006212:	462b      	mov	r3, r5
 8006214:	4608      	mov	r0, r1
 8006216:	f000 fddf 	bl	8006dd8 <SDMMC_CmdSelDesel>
 800621a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800621c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <SD_InitCard+0x176>
  {
    return errorstate;
 8006222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006224:	e00e      	b.n	8006244 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681d      	ldr	r5, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	466c      	mov	r4, sp
 800622e:	f103 0210 	add.w	r2, r3, #16
 8006232:	ca07      	ldmia	r2, {r0, r1, r2}
 8006234:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006238:	3304      	adds	r3, #4
 800623a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800623c:	4628      	mov	r0, r5
 800623e:	f000 fc23 	bl	8006a88 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3740      	adds	r7, #64	; 0x40
 8006248:	46bd      	mov	sp, r7
 800624a:	bdb0      	pop	{r4, r5, r7, pc}

0800624c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fdda 	bl	8006e1e <SDMMC_CmdGoIdleState>
 800626a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	e072      	b.n	800635c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fded 	bl	8006e5a <SDMMC_CmdOperCond>
 8006280:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00d      	beq.n	80062a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fdc3 	bl	8006e1e <SDMMC_CmdGoIdleState>
 8006298:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	e05b      	b.n	800635c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d137      	bne.n	8006322 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2100      	movs	r1, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fded 	bl	8006e98 <SDMMC_CmdAppCommand>
 80062be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d02d      	beq.n	8006322 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062ca:	e047      	b.n	800635c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2100      	movs	r1, #0
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fde0 	bl	8006e98 <SDMMC_CmdAppCommand>
 80062d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	e03b      	b.n	800635c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	491e      	ldr	r1, [pc, #120]	; (8006364 <SD_PowerON+0x118>)
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fdf6 	bl	8006edc <SDMMC_CmdAppOperCommand>
 80062f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062fc:	e02e      	b.n	800635c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2100      	movs	r1, #0
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fc5b 	bl	8006bc0 <SDIO_GetResponse>
 800630a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	0fdb      	lsrs	r3, r3, #31
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <SD_PowerON+0xcc>
 8006314:	2301      	movs	r3, #1
 8006316:	e000      	b.n	800631a <SD_PowerON+0xce>
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]

    count++;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	3301      	adds	r3, #1
 8006320:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006328:	4293      	cmp	r3, r2
 800632a:	d802      	bhi.n	8006332 <SD_PowerON+0xe6>
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0cc      	beq.n	80062cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006338:	4293      	cmp	r3, r2
 800633a:	d902      	bls.n	8006342 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800633c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006340:	e00c      	b.n	800635c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	645a      	str	r2, [r3, #68]	; 0x44
 8006352:	e002      	b.n	800635a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	c1100000 	.word	0xc1100000

08006368 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d102      	bne.n	800637e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006378:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800637c:	e018      	b.n	80063b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006386:	041b      	lsls	r3, r3, #16
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f000 fe27 	bl	8006fde <SDMMC_CmdSendStatus>
 8006390:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e009      	b.n	80063b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2100      	movs	r1, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fc0c 	bl	8006bc0 <SDIO_GetResponse>
 80063a8:	4602      	mov	r2, r0
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d03f      	beq.n	8006452 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80063d2:	2300      	movs	r3, #0
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e033      	b.n	8006440 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fb7e 	bl	8006ade <SDIO_ReadFIFO>
 80063e2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3301      	adds	r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	0a1b      	lsrs	r3, r3, #8
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3301      	adds	r3, #1
 8006406:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	3b01      	subs	r3, #1
 800640c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	0c1b      	lsrs	r3, r3, #16
 8006412:	b2da      	uxtb	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	3b01      	subs	r3, #1
 8006422:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	0e1b      	lsrs	r3, r3, #24
 8006428:	b2da      	uxtb	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	3b01      	subs	r3, #1
 8006438:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	3301      	adds	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b07      	cmp	r3, #7
 8006444:	d9c8      	bls.n	80063d8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006452:	bf00      	nop
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b086      	sub	sp, #24
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d043      	beq.n	80064fc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e037      	b.n	80064ea <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3301      	adds	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	3b01      	subs	r3, #1
 800648a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	021a      	lsls	r2, r3, #8
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4313      	orrs	r3, r2
 8006496:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	041a      	lsls	r2, r3, #16
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	061a      	lsls	r2, r3, #24
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3301      	adds	r3, #1
 80064cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f107 0208 	add.w	r2, r7, #8
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fb0a 	bl	8006af8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	3301      	adds	r3, #1
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b07      	cmp	r3, #7
 80064ee:	d9c4      	bls.n	800647a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80064fc:	bf00      	nop
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e03f      	b.n	8006596 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7fb fcf2 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2224      	movs	r2, #36	; 0x24
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f829 	bl	80065a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800655c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695a      	ldr	r2, [r3, #20]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800656c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800657c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065a4:	b0c0      	sub	sp, #256	; 0x100
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065bc:	68d9      	ldr	r1, [r3, #12]
 80065be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	ea40 0301 	orr.w	r3, r0, r1
 80065c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	431a      	orrs	r2, r3
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065f8:	f021 010c 	bic.w	r1, r1, #12
 80065fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006606:	430b      	orrs	r3, r1
 8006608:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661a:	6999      	ldr	r1, [r3, #24]
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	ea40 0301 	orr.w	r3, r0, r1
 8006626:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	4b8f      	ldr	r3, [pc, #572]	; (800686c <UART_SetConfig+0x2cc>)
 8006630:	429a      	cmp	r2, r3
 8006632:	d005      	beq.n	8006640 <UART_SetConfig+0xa0>
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	4b8d      	ldr	r3, [pc, #564]	; (8006870 <UART_SetConfig+0x2d0>)
 800663c:	429a      	cmp	r2, r3
 800663e:	d104      	bne.n	800664a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006640:	f7fd fb02 	bl	8003c48 <HAL_RCC_GetPCLK2Freq>
 8006644:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006648:	e003      	b.n	8006652 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800664a:	f7fd fae9 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 800664e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665c:	f040 810c 	bne.w	8006878 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006664:	2200      	movs	r2, #0
 8006666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800666a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800666e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006672:	4622      	mov	r2, r4
 8006674:	462b      	mov	r3, r5
 8006676:	1891      	adds	r1, r2, r2
 8006678:	65b9      	str	r1, [r7, #88]	; 0x58
 800667a:	415b      	adcs	r3, r3
 800667c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800667e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006682:	4621      	mov	r1, r4
 8006684:	eb12 0801 	adds.w	r8, r2, r1
 8006688:	4629      	mov	r1, r5
 800668a:	eb43 0901 	adc.w	r9, r3, r1
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800669a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800669e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066a2:	4690      	mov	r8, r2
 80066a4:	4699      	mov	r9, r3
 80066a6:	4623      	mov	r3, r4
 80066a8:	eb18 0303 	adds.w	r3, r8, r3
 80066ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066b0:	462b      	mov	r3, r5
 80066b2:	eb49 0303 	adc.w	r3, r9, r3
 80066b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066ce:	460b      	mov	r3, r1
 80066d0:	18db      	adds	r3, r3, r3
 80066d2:	653b      	str	r3, [r7, #80]	; 0x50
 80066d4:	4613      	mov	r3, r2
 80066d6:	eb42 0303 	adc.w	r3, r2, r3
 80066da:	657b      	str	r3, [r7, #84]	; 0x54
 80066dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066e4:	f7fa fa80 	bl	8000be8 <__aeabi_uldivmod>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4b61      	ldr	r3, [pc, #388]	; (8006874 <UART_SetConfig+0x2d4>)
 80066ee:	fba3 2302 	umull	r2, r3, r3, r2
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	011c      	lsls	r4, r3, #4
 80066f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006700:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006704:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006708:	4642      	mov	r2, r8
 800670a:	464b      	mov	r3, r9
 800670c:	1891      	adds	r1, r2, r2
 800670e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006710:	415b      	adcs	r3, r3
 8006712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006714:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006718:	4641      	mov	r1, r8
 800671a:	eb12 0a01 	adds.w	sl, r2, r1
 800671e:	4649      	mov	r1, r9
 8006720:	eb43 0b01 	adc.w	fp, r3, r1
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006730:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006738:	4692      	mov	sl, r2
 800673a:	469b      	mov	fp, r3
 800673c:	4643      	mov	r3, r8
 800673e:	eb1a 0303 	adds.w	r3, sl, r3
 8006742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006746:	464b      	mov	r3, r9
 8006748:	eb4b 0303 	adc.w	r3, fp, r3
 800674c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800675c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006760:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006764:	460b      	mov	r3, r1
 8006766:	18db      	adds	r3, r3, r3
 8006768:	643b      	str	r3, [r7, #64]	; 0x40
 800676a:	4613      	mov	r3, r2
 800676c:	eb42 0303 	adc.w	r3, r2, r3
 8006770:	647b      	str	r3, [r7, #68]	; 0x44
 8006772:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006776:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800677a:	f7fa fa35 	bl	8000be8 <__aeabi_uldivmod>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4611      	mov	r1, r2
 8006784:	4b3b      	ldr	r3, [pc, #236]	; (8006874 <UART_SetConfig+0x2d4>)
 8006786:	fba3 2301 	umull	r2, r3, r3, r1
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	2264      	movs	r2, #100	; 0x64
 800678e:	fb02 f303 	mul.w	r3, r2, r3
 8006792:	1acb      	subs	r3, r1, r3
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800679a:	4b36      	ldr	r3, [pc, #216]	; (8006874 <UART_SetConfig+0x2d4>)
 800679c:	fba3 2302 	umull	r2, r3, r3, r2
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067a8:	441c      	add	r4, r3
 80067aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067bc:	4642      	mov	r2, r8
 80067be:	464b      	mov	r3, r9
 80067c0:	1891      	adds	r1, r2, r2
 80067c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80067c4:	415b      	adcs	r3, r3
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067cc:	4641      	mov	r1, r8
 80067ce:	1851      	adds	r1, r2, r1
 80067d0:	6339      	str	r1, [r7, #48]	; 0x30
 80067d2:	4649      	mov	r1, r9
 80067d4:	414b      	adcs	r3, r1
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067e4:	4659      	mov	r1, fp
 80067e6:	00cb      	lsls	r3, r1, #3
 80067e8:	4651      	mov	r1, sl
 80067ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ee:	4651      	mov	r1, sl
 80067f0:	00ca      	lsls	r2, r1, #3
 80067f2:	4610      	mov	r0, r2
 80067f4:	4619      	mov	r1, r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	4642      	mov	r2, r8
 80067fa:	189b      	adds	r3, r3, r2
 80067fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006800:	464b      	mov	r3, r9
 8006802:	460a      	mov	r2, r1
 8006804:	eb42 0303 	adc.w	r3, r2, r3
 8006808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006818:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800681c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006820:	460b      	mov	r3, r1
 8006822:	18db      	adds	r3, r3, r3
 8006824:	62bb      	str	r3, [r7, #40]	; 0x28
 8006826:	4613      	mov	r3, r2
 8006828:	eb42 0303 	adc.w	r3, r2, r3
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800682e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006832:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006836:	f7fa f9d7 	bl	8000be8 <__aeabi_uldivmod>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <UART_SetConfig+0x2d4>)
 8006840:	fba3 1302 	umull	r1, r3, r3, r2
 8006844:	095b      	lsrs	r3, r3, #5
 8006846:	2164      	movs	r1, #100	; 0x64
 8006848:	fb01 f303 	mul.w	r3, r1, r3
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	3332      	adds	r3, #50	; 0x32
 8006852:	4a08      	ldr	r2, [pc, #32]	; (8006874 <UART_SetConfig+0x2d4>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	095b      	lsrs	r3, r3, #5
 800685a:	f003 0207 	and.w	r2, r3, #7
 800685e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4422      	add	r2, r4
 8006866:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006868:	e105      	b.n	8006a76 <UART_SetConfig+0x4d6>
 800686a:	bf00      	nop
 800686c:	40011000 	.word	0x40011000
 8006870:	40011400 	.word	0x40011400
 8006874:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800687c:	2200      	movs	r2, #0
 800687e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006882:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006886:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800688a:	4642      	mov	r2, r8
 800688c:	464b      	mov	r3, r9
 800688e:	1891      	adds	r1, r2, r2
 8006890:	6239      	str	r1, [r7, #32]
 8006892:	415b      	adcs	r3, r3
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
 8006896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800689a:	4641      	mov	r1, r8
 800689c:	1854      	adds	r4, r2, r1
 800689e:	4649      	mov	r1, r9
 80068a0:	eb43 0501 	adc.w	r5, r3, r1
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	00eb      	lsls	r3, r5, #3
 80068ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068b2:	00e2      	lsls	r2, r4, #3
 80068b4:	4614      	mov	r4, r2
 80068b6:	461d      	mov	r5, r3
 80068b8:	4643      	mov	r3, r8
 80068ba:	18e3      	adds	r3, r4, r3
 80068bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068c0:	464b      	mov	r3, r9
 80068c2:	eb45 0303 	adc.w	r3, r5, r3
 80068c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	f04f 0300 	mov.w	r3, #0
 80068e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068e6:	4629      	mov	r1, r5
 80068e8:	008b      	lsls	r3, r1, #2
 80068ea:	4621      	mov	r1, r4
 80068ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068f0:	4621      	mov	r1, r4
 80068f2:	008a      	lsls	r2, r1, #2
 80068f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068f8:	f7fa f976 	bl	8000be8 <__aeabi_uldivmod>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4b60      	ldr	r3, [pc, #384]	; (8006a84 <UART_SetConfig+0x4e4>)
 8006902:	fba3 2302 	umull	r2, r3, r3, r2
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	011c      	lsls	r4, r3, #4
 800690a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690e:	2200      	movs	r2, #0
 8006910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006914:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006918:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800691c:	4642      	mov	r2, r8
 800691e:	464b      	mov	r3, r9
 8006920:	1891      	adds	r1, r2, r2
 8006922:	61b9      	str	r1, [r7, #24]
 8006924:	415b      	adcs	r3, r3
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800692c:	4641      	mov	r1, r8
 800692e:	1851      	adds	r1, r2, r1
 8006930:	6139      	str	r1, [r7, #16]
 8006932:	4649      	mov	r1, r9
 8006934:	414b      	adcs	r3, r1
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006944:	4659      	mov	r1, fp
 8006946:	00cb      	lsls	r3, r1, #3
 8006948:	4651      	mov	r1, sl
 800694a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800694e:	4651      	mov	r1, sl
 8006950:	00ca      	lsls	r2, r1, #3
 8006952:	4610      	mov	r0, r2
 8006954:	4619      	mov	r1, r3
 8006956:	4603      	mov	r3, r0
 8006958:	4642      	mov	r2, r8
 800695a:	189b      	adds	r3, r3, r2
 800695c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006960:	464b      	mov	r3, r9
 8006962:	460a      	mov	r2, r1
 8006964:	eb42 0303 	adc.w	r3, r2, r3
 8006968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800696c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	67bb      	str	r3, [r7, #120]	; 0x78
 8006976:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006984:	4649      	mov	r1, r9
 8006986:	008b      	lsls	r3, r1, #2
 8006988:	4641      	mov	r1, r8
 800698a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800698e:	4641      	mov	r1, r8
 8006990:	008a      	lsls	r2, r1, #2
 8006992:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006996:	f7fa f927 	bl	8000be8 <__aeabi_uldivmod>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4b39      	ldr	r3, [pc, #228]	; (8006a84 <UART_SetConfig+0x4e4>)
 80069a0:	fba3 1302 	umull	r1, r3, r3, r2
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	2164      	movs	r1, #100	; 0x64
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	3332      	adds	r3, #50	; 0x32
 80069b2:	4a34      	ldr	r2, [pc, #208]	; (8006a84 <UART_SetConfig+0x4e4>)
 80069b4:	fba2 2303 	umull	r2, r3, r2, r3
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069be:	441c      	add	r4, r3
 80069c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c4:	2200      	movs	r2, #0
 80069c6:	673b      	str	r3, [r7, #112]	; 0x70
 80069c8:	677a      	str	r2, [r7, #116]	; 0x74
 80069ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069ce:	4642      	mov	r2, r8
 80069d0:	464b      	mov	r3, r9
 80069d2:	1891      	adds	r1, r2, r2
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	415b      	adcs	r3, r3
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069de:	4641      	mov	r1, r8
 80069e0:	1851      	adds	r1, r2, r1
 80069e2:	6039      	str	r1, [r7, #0]
 80069e4:	4649      	mov	r1, r9
 80069e6:	414b      	adcs	r3, r1
 80069e8:	607b      	str	r3, [r7, #4]
 80069ea:	f04f 0200 	mov.w	r2, #0
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069f6:	4659      	mov	r1, fp
 80069f8:	00cb      	lsls	r3, r1, #3
 80069fa:	4651      	mov	r1, sl
 80069fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a00:	4651      	mov	r1, sl
 8006a02:	00ca      	lsls	r2, r1, #3
 8006a04:	4610      	mov	r0, r2
 8006a06:	4619      	mov	r1, r3
 8006a08:	4603      	mov	r3, r0
 8006a0a:	4642      	mov	r2, r8
 8006a0c:	189b      	adds	r3, r3, r2
 8006a0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a10:	464b      	mov	r3, r9
 8006a12:	460a      	mov	r2, r1
 8006a14:	eb42 0303 	adc.w	r3, r2, r3
 8006a18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	663b      	str	r3, [r7, #96]	; 0x60
 8006a24:	667a      	str	r2, [r7, #100]	; 0x64
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a32:	4649      	mov	r1, r9
 8006a34:	008b      	lsls	r3, r1, #2
 8006a36:	4641      	mov	r1, r8
 8006a38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a3c:	4641      	mov	r1, r8
 8006a3e:	008a      	lsls	r2, r1, #2
 8006a40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a44:	f7fa f8d0 	bl	8000be8 <__aeabi_uldivmod>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <UART_SetConfig+0x4e4>)
 8006a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	2164      	movs	r1, #100	; 0x64
 8006a56:	fb01 f303 	mul.w	r3, r1, r3
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	3332      	adds	r3, #50	; 0x32
 8006a60:	4a08      	ldr	r2, [pc, #32]	; (8006a84 <UART_SetConfig+0x4e4>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	f003 020f 	and.w	r2, r3, #15
 8006a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4422      	add	r2, r4
 8006a74:	609a      	str	r2, [r3, #8]
}
 8006a76:	bf00      	nop
 8006a78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a82:	bf00      	nop
 8006a84:	51eb851f 	.word	0x51eb851f

08006a88 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006a88:	b084      	sub	sp, #16
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	f107 001c 	add.w	r0, r7, #28
 8006a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006a9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006aa2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006aa6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006aaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006aae:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006ab2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006ac2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	b004      	add	sp, #16
 8006adc:	4770      	bx	lr

08006ade <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2203      	movs	r2, #3
 8006b26:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0303 	and.w	r3, r3, #3
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b70:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006b76:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006b7c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006b8c:	f023 030f 	bic.w	r3, r3, #15
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	b2db      	uxtb	r3, r3
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3314      	adds	r3, #20
 8006bce:	461a      	mov	r2, r3
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
}  
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b085      	sub	sp, #20
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006c0c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006c12:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006c18:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0

}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b088      	sub	sp, #32
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c5e:	f107 0308 	add.w	r3, r7, #8
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff ff74 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6e:	2110      	movs	r1, #16
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f9d7 	bl	8007024 <SDMMC_GetCmdResp1>
 8006c76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c78:	69fb      	ldr	r3, [r7, #28]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3720      	adds	r7, #32
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b088      	sub	sp, #32
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006c90:	2311      	movs	r3, #17
 8006c92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c94:	2340      	movs	r3, #64	; 0x40
 8006c96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ca0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ca2:	f107 0308 	add.w	r3, r7, #8
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7ff ff52 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb2:	2111      	movs	r1, #17
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9b5 	bl	8007024 <SDMMC_GetCmdResp1>
 8006cba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3720      	adds	r7, #32
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b088      	sub	sp, #32
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006cd4:	2312      	movs	r3, #18
 8006cd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cd8:	2340      	movs	r3, #64	; 0x40
 8006cda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ce6:	f107 0308 	add.w	r3, r7, #8
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff ff30 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf6:	2112      	movs	r1, #18
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f993 	bl	8007024 <SDMMC_GetCmdResp1>
 8006cfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d00:	69fb      	ldr	r3, [r7, #28]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b088      	sub	sp, #32
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006d18:	2318      	movs	r3, #24
 8006d1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d1c:	2340      	movs	r3, #64	; 0x40
 8006d1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d2a:	f107 0308 	add.w	r3, r7, #8
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff ff0e 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d3a:	2118      	movs	r1, #24
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f971 	bl	8007024 <SDMMC_GetCmdResp1>
 8006d42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d44:	69fb      	ldr	r3, [r7, #28]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b088      	sub	sp, #32
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006d5c:	2319      	movs	r3, #25
 8006d5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d60:	2340      	movs	r3, #64	; 0x40
 8006d62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d6e:	f107 0308 	add.w	r3, r7, #8
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff feec 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7e:	2119      	movs	r1, #25
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f94f 	bl	8007024 <SDMMC_GetCmdResp1>
 8006d86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d88:	69fb      	ldr	r3, [r7, #28]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3720      	adds	r7, #32
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006da0:	230c      	movs	r3, #12
 8006da2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006da4:	2340      	movs	r3, #64	; 0x40
 8006da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006db0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006db2:	f107 0308 	add.w	r3, r7, #8
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff feca 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006dbe:	4a05      	ldr	r2, [pc, #20]	; (8006dd4 <SDMMC_CmdStopTransfer+0x40>)
 8006dc0:	210c      	movs	r1, #12
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f92e 	bl	8007024 <SDMMC_GetCmdResp1>
 8006dc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dca:	69fb      	ldr	r3, [r7, #28]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3720      	adds	r7, #32
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	05f5e100 	.word	0x05f5e100

08006dd8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006de8:	2307      	movs	r3, #7
 8006dea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dec:	2340      	movs	r3, #64	; 0x40
 8006dee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006df0:	2300      	movs	r3, #0
 8006df2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dfa:	f107 0310 	add.w	r3, r7, #16
 8006dfe:	4619      	mov	r1, r3
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff fea6 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e0a:	2107      	movs	r1, #7
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f909 	bl	8007024 <SDMMC_GetCmdResp1>
 8006e12:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3728      	adds	r7, #40	; 0x28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b088      	sub	sp, #32
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e3c:	f107 0308 	add.w	r3, r7, #8
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff fe85 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fb23 	bl	8007494 <SDMMC_GetCmdError>
 8006e4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e50:	69fb      	ldr	r3, [r7, #28]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b088      	sub	sp, #32
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006e62:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006e66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006e68:	2308      	movs	r3, #8
 8006e6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e6c:	2340      	movs	r3, #64	; 0x40
 8006e6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e70:	2300      	movs	r3, #0
 8006e72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e7a:	f107 0308 	add.w	r3, r7, #8
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff fe66 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fab6 	bl	80073f8 <SDMMC_GetCmdResp7>
 8006e8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e8e:	69fb      	ldr	r3, [r7, #28]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3720      	adds	r7, #32
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006ea6:	2337      	movs	r3, #55	; 0x37
 8006ea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006eaa:	2340      	movs	r3, #64	; 0x40
 8006eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006eb8:	f107 0308 	add.w	r3, r7, #8
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff fe47 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec8:	2137      	movs	r1, #55	; 0x37
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f8aa 	bl	8007024 <SDMMC_GetCmdResp1>
 8006ed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3720      	adds	r7, #32
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ef0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006ef2:	2329      	movs	r3, #41	; 0x29
 8006ef4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ef6:	2340      	movs	r3, #64	; 0x40
 8006ef8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f04:	f107 0308 	add.w	r3, r7, #8
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff fe21 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f9bd 	bl	8007290 <SDMMC_GetCmdResp3>
 8006f16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f18:	69fb      	ldr	r3, [r7, #28]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b088      	sub	sp, #32
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006f2e:	2302      	movs	r3, #2
 8006f30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006f32:	23c0      	movs	r3, #192	; 0xc0
 8006f34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f36:	2300      	movs	r3, #0
 8006f38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f40:	f107 0308 	add.w	r3, r7, #8
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff fe03 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f957 	bl	8007200 <SDMMC_GetCmdResp2>
 8006f52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f54:	69fb      	ldr	r3, [r7, #28]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3720      	adds	r7, #32
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b088      	sub	sp, #32
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006f6c:	2309      	movs	r3, #9
 8006f6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006f70:	23c0      	movs	r3, #192	; 0xc0
 8006f72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f7e:	f107 0308 	add.w	r3, r7, #8
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff fde4 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f938 	bl	8007200 <SDMMC_GetCmdResp2>
 8006f90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f92:	69fb      	ldr	r3, [r7, #28]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3720      	adds	r7, #32
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006faa:	2303      	movs	r3, #3
 8006fac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fae:	2340      	movs	r3, #64	; 0x40
 8006fb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fbc:	f107 0308 	add.w	r3, r7, #8
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff fdc5 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	2103      	movs	r1, #3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f99d 	bl	800730c <SDMMC_GetCmdResp6>
 8006fd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fd4:	69fb      	ldr	r3, [r7, #28]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3720      	adds	r7, #32
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b088      	sub	sp, #32
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006fec:	230d      	movs	r3, #13
 8006fee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ff0:	2340      	movs	r3, #64	; 0x40
 8006ff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ffc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ffe:	f107 0308 	add.w	r3, r7, #8
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff fda4 	bl	8006b52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800700a:	f241 3288 	movw	r2, #5000	; 0x1388
 800700e:	210d      	movs	r1, #13
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f807 	bl	8007024 <SDMMC_GetCmdResp1>
 8007016:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007018:	69fb      	ldr	r3, [r7, #28]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	460b      	mov	r3, r1
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007032:	4b70      	ldr	r3, [pc, #448]	; (80071f4 <SDMMC_GetCmdResp1+0x1d0>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a70      	ldr	r2, [pc, #448]	; (80071f8 <SDMMC_GetCmdResp1+0x1d4>)
 8007038:	fba2 2303 	umull	r2, r3, r2, r3
 800703c:	0a5a      	lsrs	r2, r3, #9
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	fb02 f303 	mul.w	r3, r2, r3
 8007044:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	1e5a      	subs	r2, r3, #1
 800704a:	61fa      	str	r2, [r7, #28]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d102      	bne.n	8007056 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007050:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007054:	e0c9      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0ef      	beq.n	8007046 <SDMMC_GetCmdResp1+0x22>
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1ea      	bne.n	8007046 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2204      	movs	r2, #4
 8007080:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007082:	2304      	movs	r3, #4
 8007084:	e0b1      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d004      	beq.n	800709c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2201      	movs	r2, #1
 8007096:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007098:	2301      	movs	r3, #1
 800709a:	e0a6      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	22c5      	movs	r2, #197	; 0xc5
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f7ff fd7f 	bl	8006ba6 <SDIO_GetCommandResponse>
 80070a8:	4603      	mov	r3, r0
 80070aa:	461a      	mov	r2, r3
 80070ac:	7afb      	ldrb	r3, [r7, #11]
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d001      	beq.n	80070b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e099      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80070b6:	2100      	movs	r1, #0
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f7ff fd81 	bl	8006bc0 <SDIO_GetResponse>
 80070be:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	4b4e      	ldr	r3, [pc, #312]	; (80071fc <SDMMC_GetCmdResp1+0x1d8>)
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e08d      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	da02      	bge.n	80070da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80070d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070d8:	e087      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80070e4:	2340      	movs	r3, #64	; 0x40
 80070e6:	e080      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80070f2:	2380      	movs	r3, #128	; 0x80
 80070f4:	e079      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007104:	e071      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007114:	e069      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007124:	e061      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007134:	e059      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007144:	e051      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007154:	e049      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007160:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007164:	e041      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007174:	e039      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007184:	e031      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007190:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007194:	e029      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80071a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071a4:	e021      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80071b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80071b4:	e019      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80071c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80071c4:	e011      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80071d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80071d4:	e009      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f003 0308 	and.w	r3, r3, #8
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80071e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80071e4:	e001      	b.n	80071ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80071e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3720      	adds	r7, #32
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000000 	.word	0x20000000
 80071f8:	10624dd3 	.word	0x10624dd3
 80071fc:	fdffe008 	.word	0xfdffe008

08007200 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007208:	4b1f      	ldr	r3, [pc, #124]	; (8007288 <SDMMC_GetCmdResp2+0x88>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a1f      	ldr	r2, [pc, #124]	; (800728c <SDMMC_GetCmdResp2+0x8c>)
 800720e:	fba2 2303 	umull	r2, r3, r2, r3
 8007212:	0a5b      	lsrs	r3, r3, #9
 8007214:	f241 3288 	movw	r2, #5000	; 0x1388
 8007218:	fb02 f303 	mul.w	r3, r2, r3
 800721c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	1e5a      	subs	r2, r3, #1
 8007222:	60fa      	str	r2, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007228:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800722c:	e026      	b.n	800727c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007232:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0ef      	beq.n	800721e <SDMMC_GetCmdResp2+0x1e>
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1ea      	bne.n	800721e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2204      	movs	r2, #4
 8007258:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800725a:	2304      	movs	r3, #4
 800725c:	e00e      	b.n	800727c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d004      	beq.n	8007274 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007270:	2301      	movs	r3, #1
 8007272:	e003      	b.n	800727c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	22c5      	movs	r2, #197	; 0xc5
 8007278:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	20000000 	.word	0x20000000
 800728c:	10624dd3 	.word	0x10624dd3

08007290 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007298:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <SDMMC_GetCmdResp3+0x74>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1a      	ldr	r2, [pc, #104]	; (8007308 <SDMMC_GetCmdResp3+0x78>)
 800729e:	fba2 2303 	umull	r2, r3, r2, r3
 80072a2:	0a5b      	lsrs	r3, r3, #9
 80072a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a8:	fb02 f303 	mul.w	r3, r2, r3
 80072ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	1e5a      	subs	r2, r3, #1
 80072b2:	60fa      	str	r2, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072bc:	e01b      	b.n	80072f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d0ef      	beq.n	80072ae <SDMMC_GetCmdResp3+0x1e>
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1ea      	bne.n	80072ae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d004      	beq.n	80072ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2204      	movs	r2, #4
 80072e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072ea:	2304      	movs	r3, #4
 80072ec:	e003      	b.n	80072f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	22c5      	movs	r2, #197	; 0xc5
 80072f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	20000000 	.word	0x20000000
 8007308:	10624dd3 	.word	0x10624dd3

0800730c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	460b      	mov	r3, r1
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800731a:	4b35      	ldr	r3, [pc, #212]	; (80073f0 <SDMMC_GetCmdResp6+0xe4>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a35      	ldr	r2, [pc, #212]	; (80073f4 <SDMMC_GetCmdResp6+0xe8>)
 8007320:	fba2 2303 	umull	r2, r3, r2, r3
 8007324:	0a5b      	lsrs	r3, r3, #9
 8007326:	f241 3288 	movw	r2, #5000	; 0x1388
 800732a:	fb02 f303 	mul.w	r3, r2, r3
 800732e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	1e5a      	subs	r2, r3, #1
 8007334:	61fa      	str	r2, [r7, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d102      	bne.n	8007340 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800733a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800733e:	e052      	b.n	80073e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007344:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0ef      	beq.n	8007330 <SDMMC_GetCmdResp6+0x24>
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1ea      	bne.n	8007330 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	d004      	beq.n	8007370 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2204      	movs	r2, #4
 800736a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800736c:	2304      	movs	r3, #4
 800736e:	e03a      	b.n	80073e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d004      	beq.n	8007386 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007382:	2301      	movs	r3, #1
 8007384:	e02f      	b.n	80073e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f7ff fc0d 	bl	8006ba6 <SDIO_GetCommandResponse>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	4293      	cmp	r3, r2
 8007394:	d001      	beq.n	800739a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007396:	2301      	movs	r3, #1
 8007398:	e025      	b.n	80073e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	22c5      	movs	r2, #197	; 0xc5
 800739e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80073a0:	2100      	movs	r1, #0
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f7ff fc0c 	bl	8006bc0 <SDIO_GetResponse>
 80073a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d106      	bne.n	80073c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80073be:	2300      	movs	r3, #0
 80073c0:	e011      	b.n	80073e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80073cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073d0:	e009      	b.n	80073e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80073dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073e0:	e001      	b.n	80073e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80073e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3720      	adds	r7, #32
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20000000 	.word	0x20000000
 80073f4:	10624dd3 	.word	0x10624dd3

080073f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007400:	4b22      	ldr	r3, [pc, #136]	; (800748c <SDMMC_GetCmdResp7+0x94>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a22      	ldr	r2, [pc, #136]	; (8007490 <SDMMC_GetCmdResp7+0x98>)
 8007406:	fba2 2303 	umull	r2, r3, r2, r3
 800740a:	0a5b      	lsrs	r3, r3, #9
 800740c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007410:	fb02 f303 	mul.w	r3, r2, r3
 8007414:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	1e5a      	subs	r2, r3, #1
 800741a:	60fa      	str	r2, [r7, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d102      	bne.n	8007426 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007424:	e02c      	b.n	8007480 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0ef      	beq.n	8007416 <SDMMC_GetCmdResp7+0x1e>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1ea      	bne.n	8007416 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2204      	movs	r2, #4
 8007450:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007452:	2304      	movs	r3, #4
 8007454:	e014      	b.n	8007480 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d004      	beq.n	800746c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007468:	2301      	movs	r3, #1
 800746a:	e009      	b.n	8007480 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2240      	movs	r2, #64	; 0x40
 800747c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800747e:	2300      	movs	r3, #0
  
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	20000000 	.word	0x20000000
 8007490:	10624dd3 	.word	0x10624dd3

08007494 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800749c:	4b11      	ldr	r3, [pc, #68]	; (80074e4 <SDMMC_GetCmdError+0x50>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a11      	ldr	r2, [pc, #68]	; (80074e8 <SDMMC_GetCmdError+0x54>)
 80074a2:	fba2 2303 	umull	r2, r3, r2, r3
 80074a6:	0a5b      	lsrs	r3, r3, #9
 80074a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ac:	fb02 f303 	mul.w	r3, r2, r3
 80074b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	1e5a      	subs	r2, r3, #1
 80074b6:	60fa      	str	r2, [r7, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d102      	bne.n	80074c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074c0:	e009      	b.n	80074d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0f1      	beq.n	80074b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	22c5      	movs	r2, #197	; 0xc5
 80074d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20000000 	.word	0x20000000
 80074e8:	10624dd3 	.word	0x10624dd3

080074ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80074f0:	4904      	ldr	r1, [pc, #16]	; (8007504 <MX_FATFS_Init+0x18>)
 80074f2:	4805      	ldr	r0, [pc, #20]	; (8007508 <MX_FATFS_Init+0x1c>)
 80074f4:	f003 fac0 	bl	800aa78 <FATFS_LinkDriver>
 80074f8:	4603      	mov	r3, r0
 80074fa:	461a      	mov	r2, r3
 80074fc:	4b03      	ldr	r3, [pc, #12]	; (800750c <MX_FATFS_Init+0x20>)
 80074fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007500:	bf00      	nop
 8007502:	bd80      	pop	{r7, pc}
 8007504:	200030f0 	.word	0x200030f0
 8007508:	0800dcd4 	.word	0x0800dcd4
 800750c:	200030ec 	.word	0x200030ec

08007510 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007510:	b480      	push	{r7}
 8007512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007514:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007516:	4618      	mov	r0, r3
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800752a:	f000 f89e 	bl	800766a <BSP_SD_IsDetected>
 800752e:	4603      	mov	r3, r0
 8007530:	2b01      	cmp	r3, #1
 8007532:	d001      	beq.n	8007538 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e005      	b.n	8007544 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007538:	4804      	ldr	r0, [pc, #16]	; (800754c <BSP_SD_Init+0x2c>)
 800753a:	f7fd fdc6 	bl	80050ca <HAL_SD_Init>
 800753e:	4603      	mov	r3, r0
 8007540:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007542:	79fb      	ldrb	r3, [r7, #7]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	200002c0 	.word	0x200002c0

08007550 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af02      	add	r7, sp, #8
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	68f9      	ldr	r1, [r7, #12]
 800756c:	4806      	ldr	r0, [pc, #24]	; (8007588 <BSP_SD_ReadBlocks+0x38>)
 800756e:	f7fd fe5d 	bl	800522c <HAL_SD_ReadBlocks>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	200002c0 	.word	0x200002c0

0800758c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af02      	add	r7, sp, #8
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	4806      	ldr	r0, [pc, #24]	; (80075c4 <BSP_SD_WriteBlocks+0x38>)
 80075aa:	f7fe f81d 	bl	80055e8 <HAL_SD_WriteBlocks>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80075b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	200002c0 	.word	0x200002c0

080075c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80075cc:	4805      	ldr	r0, [pc, #20]	; (80075e4 <BSP_SD_GetCardState+0x1c>)
 80075ce:	f7fe fce1 	bl	8005f94 <HAL_SD_GetCardState>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	bf14      	ite	ne
 80075d8:	2301      	movne	r3, #1
 80075da:	2300      	moveq	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
}
 80075de:	4618      	mov	r0, r3
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	200002c0 	.word	0x200002c0

080075e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	4803      	ldr	r0, [pc, #12]	; (8007600 <BSP_SD_GetCardInfo+0x18>)
 80075f4:	f7fe fca2 	bl	8005f3c <HAL_SD_GetCardInfo>
}
 80075f8:	bf00      	nop
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	200002c0 	.word	0x200002c0

08007604 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800760c:	f000 f818 	bl	8007640 <BSP_SD_AbortCallback>
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007620:	f000 f815 	bl	800764e <BSP_SD_WriteCpltCallback>
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007634:	f000 f812 	bl	800765c <BSP_SD_ReadCpltCallback>
}
 8007638:	bf00      	nop
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0

}
 8007644:	bf00      	nop
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800764e:	b480      	push	{r7}
 8007650:	af00      	add	r7, sp, #0

}
 8007652:	bf00      	nop
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0

}
 8007660:	bf00      	nop
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007670:	2301      	movs	r3, #1
 8007672:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007674:	f000 f80c 	bl	8007690 <BSP_PlatformIsDetected>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800767e:	2300      	movs	r3, #0
 8007680:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	b2db      	uxtb	r3, r3
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007696:	2301      	movs	r3, #1
 8007698:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800769a:	2102      	movs	r1, #2
 800769c:	4806      	ldr	r0, [pc, #24]	; (80076b8 <BSP_PlatformIsDetected+0x28>)
 800769e:	f7fc f94b 	bl	8003938 <HAL_GPIO_ReadPin>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80076a8:	2300      	movs	r3, #0
 80076aa:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80076ac:	79fb      	ldrb	r3, [r7, #7]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	40020800 	.word	0x40020800

080076bc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80076c6:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <SD_CheckStatus+0x38>)
 80076c8:	2201      	movs	r2, #1
 80076ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80076cc:	f7ff ff7c 	bl	80075c8 <BSP_SD_GetCardState>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d107      	bne.n	80076e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80076d6:	4b07      	ldr	r3, [pc, #28]	; (80076f4 <SD_CheckStatus+0x38>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	4b04      	ldr	r3, [pc, #16]	; (80076f4 <SD_CheckStatus+0x38>)
 80076e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80076e6:	4b03      	ldr	r3, [pc, #12]	; (80076f4 <SD_CheckStatus+0x38>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	b2db      	uxtb	r3, r3
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	20000009 	.word	0x20000009

080076f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007702:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <SD_initialize+0x38>)
 8007704:	2201      	movs	r2, #1
 8007706:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007708:	f7ff ff0a 	bl	8007520 <BSP_SD_Init>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d107      	bne.n	8007722 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	4618      	mov	r0, r3
 8007716:	f7ff ffd1 	bl	80076bc <SD_CheckStatus>
 800771a:	4603      	mov	r3, r0
 800771c:	461a      	mov	r2, r3
 800771e:	4b04      	ldr	r3, [pc, #16]	; (8007730 <SD_initialize+0x38>)
 8007720:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007722:	4b03      	ldr	r3, [pc, #12]	; (8007730 <SD_initialize+0x38>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	b2db      	uxtb	r3, r3
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000009 	.word	0x20000009

08007734 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff ffbb 	bl	80076bc <SD_CheckStatus>
 8007746:	4603      	mov	r3, r0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007764:	f04f 33ff 	mov.w	r3, #4294967295
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	68b8      	ldr	r0, [r7, #8]
 800776e:	f7ff feef 	bl	8007550 <BSP_SD_ReadBlocks>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d107      	bne.n	8007788 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007778:	bf00      	nop
 800777a:	f7ff ff25 	bl	80075c8 <BSP_SD_GetCardState>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1fa      	bne.n	800777a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b086      	sub	sp, #24
 8007796:	af00      	add	r7, sp, #0
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80077a6:	f04f 33ff 	mov.w	r3, #4294967295
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	68b8      	ldr	r0, [r7, #8]
 80077b0:	f7ff feec 	bl	800758c <BSP_SD_WriteBlocks>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d107      	bne.n	80077ca <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80077ba:	bf00      	nop
 80077bc:	f7ff ff04 	bl	80075c8 <BSP_SD_GetCardState>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1fa      	bne.n	80077bc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08c      	sub	sp, #48	; 0x30
 80077d8:	af00      	add	r7, sp, #0
 80077da:	4603      	mov	r3, r0
 80077dc:	603a      	str	r2, [r7, #0]
 80077de:	71fb      	strb	r3, [r7, #7]
 80077e0:	460b      	mov	r3, r1
 80077e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80077ea:	4b25      	ldr	r3, [pc, #148]	; (8007880 <SD_ioctl+0xac>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <SD_ioctl+0x28>
 80077f8:	2303      	movs	r3, #3
 80077fa:	e03c      	b.n	8007876 <SD_ioctl+0xa2>

  switch (cmd)
 80077fc:	79bb      	ldrb	r3, [r7, #6]
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d834      	bhi.n	800786c <SD_ioctl+0x98>
 8007802:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <SD_ioctl+0x34>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	08007819 	.word	0x08007819
 800780c:	08007821 	.word	0x08007821
 8007810:	08007839 	.word	0x08007839
 8007814:	08007853 	.word	0x08007853
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800781e:	e028      	b.n	8007872 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007820:	f107 030c 	add.w	r3, r7, #12
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff fedf 	bl	80075e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800782a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007836:	e01c      	b.n	8007872 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007838:	f107 030c 	add.w	r3, r7, #12
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff fed3 	bl	80075e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	b29a      	uxth	r2, r3
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007850:	e00f      	b.n	8007872 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007852:	f107 030c 	add.w	r3, r7, #12
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fec6 	bl	80075e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	0a5a      	lsrs	r2, r3, #9
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800786a:	e002      	b.n	8007872 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800786c:	2304      	movs	r3, #4
 800786e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007876:	4618      	mov	r0, r3
 8007878:	3730      	adds	r7, #48	; 0x30
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20000009 	.word	0x20000009

08007884 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	4a08      	ldr	r2, [pc, #32]	; (80078b4 <disk_status+0x30>)
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	79fa      	ldrb	r2, [r7, #7]
 800789c:	4905      	ldr	r1, [pc, #20]	; (80078b4 <disk_status+0x30>)
 800789e:	440a      	add	r2, r1
 80078a0:	7a12      	ldrb	r2, [r2, #8]
 80078a2:	4610      	mov	r0, r2
 80078a4:	4798      	blx	r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	2000311c 	.word	0x2000311c

080078b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	4a0d      	ldr	r2, [pc, #52]	; (8007900 <disk_initialize+0x48>)
 80078ca:	5cd3      	ldrb	r3, [r2, r3]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d111      	bne.n	80078f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	4a0b      	ldr	r2, [pc, #44]	; (8007900 <disk_initialize+0x48>)
 80078d4:	2101      	movs	r1, #1
 80078d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	4a09      	ldr	r2, [pc, #36]	; (8007900 <disk_initialize+0x48>)
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	79fa      	ldrb	r2, [r7, #7]
 80078e6:	4906      	ldr	r1, [pc, #24]	; (8007900 <disk_initialize+0x48>)
 80078e8:	440a      	add	r2, r1
 80078ea:	7a12      	ldrb	r2, [r2, #8]
 80078ec:	4610      	mov	r0, r2
 80078ee:	4798      	blx	r3
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	2000311c 	.word	0x2000311c

08007904 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007904:	b590      	push	{r4, r7, lr}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	607a      	str	r2, [r7, #4]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	4a0a      	ldr	r2, [pc, #40]	; (8007940 <disk_read+0x3c>)
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	689c      	ldr	r4, [r3, #8]
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	4a07      	ldr	r2, [pc, #28]	; (8007940 <disk_read+0x3c>)
 8007924:	4413      	add	r3, r2
 8007926:	7a18      	ldrb	r0, [r3, #8]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	47a0      	blx	r4
 8007930:	4603      	mov	r3, r0
 8007932:	75fb      	strb	r3, [r7, #23]
  return res;
 8007934:	7dfb      	ldrb	r3, [r7, #23]
}
 8007936:	4618      	mov	r0, r3
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	bd90      	pop	{r4, r7, pc}
 800793e:	bf00      	nop
 8007940:	2000311c 	.word	0x2000311c

08007944 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007944:	b590      	push	{r4, r7, lr}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	60b9      	str	r1, [r7, #8]
 800794c:	607a      	str	r2, [r7, #4]
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	4a0a      	ldr	r2, [pc, #40]	; (8007980 <disk_write+0x3c>)
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	68dc      	ldr	r4, [r3, #12]
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	4a07      	ldr	r2, [pc, #28]	; (8007980 <disk_write+0x3c>)
 8007964:	4413      	add	r3, r2
 8007966:	7a18      	ldrb	r0, [r3, #8]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	68b9      	ldr	r1, [r7, #8]
 800796e:	47a0      	blx	r4
 8007970:	4603      	mov	r3, r0
 8007972:	75fb      	strb	r3, [r7, #23]
  return res;
 8007974:	7dfb      	ldrb	r3, [r7, #23]
}
 8007976:	4618      	mov	r0, r3
 8007978:	371c      	adds	r7, #28
 800797a:	46bd      	mov	sp, r7
 800797c:	bd90      	pop	{r4, r7, pc}
 800797e:	bf00      	nop
 8007980:	2000311c 	.word	0x2000311c

08007984 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	603a      	str	r2, [r7, #0]
 800798e:	71fb      	strb	r3, [r7, #7]
 8007990:	460b      	mov	r3, r1
 8007992:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	4a09      	ldr	r2, [pc, #36]	; (80079bc <disk_ioctl+0x38>)
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	79fa      	ldrb	r2, [r7, #7]
 80079a2:	4906      	ldr	r1, [pc, #24]	; (80079bc <disk_ioctl+0x38>)
 80079a4:	440a      	add	r2, r1
 80079a6:	7a10      	ldrb	r0, [r2, #8]
 80079a8:	79b9      	ldrb	r1, [r7, #6]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	4798      	blx	r3
 80079ae:	4603      	mov	r3, r0
 80079b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	2000311c 	.word	0x2000311c

080079c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3301      	adds	r3, #1
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80079d0:	89fb      	ldrh	r3, [r7, #14]
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	b21a      	sxth	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	b21b      	sxth	r3, r3
 80079dc:	4313      	orrs	r3, r2
 80079de:	b21b      	sxth	r3, r3
 80079e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80079e2:	89fb      	ldrh	r3, [r7, #14]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3303      	adds	r3, #3
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	3202      	adds	r2, #2
 8007a08:	7812      	ldrb	r2, [r2, #0]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	3201      	adds	r2, #1
 8007a16:	7812      	ldrb	r2, [r2, #0]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	021b      	lsls	r3, r3, #8
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7812      	ldrb	r2, [r2, #0]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
	return rv;
 8007a28:	68fb      	ldr	r3, [r7, #12]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	887a      	ldrh	r2, [r7, #2]
 8007a4a:	b2d2      	uxtb	r2, r2
 8007a4c:	701a      	strb	r2, [r3, #0]
 8007a4e:	887b      	ldrh	r3, [r7, #2]
 8007a50:	0a1b      	lsrs	r3, r3, #8
 8007a52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	607a      	str	r2, [r7, #4]
 8007a5a:	887a      	ldrh	r2, [r7, #2]
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	701a      	strb	r2, [r3, #0]
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	0a1b      	lsrs	r3, r3, #8
 8007a86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	607a      	str	r2, [r7, #4]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	b2d2      	uxtb	r2, r2
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	0a1b      	lsrs	r3, r3, #8
 8007a98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	0a1b      	lsrs	r3, r3, #8
 8007aaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	607a      	str	r2, [r7, #4]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	b2d2      	uxtb	r2, r2
 8007ab6:	701a      	strb	r2, [r3, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00d      	beq.n	8007afa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	1c53      	adds	r3, r2, #1
 8007ae2:	613b      	str	r3, [r7, #16]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	1c59      	adds	r1, r3, #1
 8007ae8:	6179      	str	r1, [r7, #20]
 8007aea:	7812      	ldrb	r2, [r2, #0]
 8007aec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	607b      	str	r3, [r7, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1f1      	bne.n	8007ade <mem_cpy+0x1a>
	}
}
 8007afa:	bf00      	nop
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007b06:	b480      	push	{r7}
 8007b08:	b087      	sub	sp, #28
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	617a      	str	r2, [r7, #20]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	b2d2      	uxtb	r2, r2
 8007b20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	607b      	str	r3, [r7, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1f3      	bne.n	8007b16 <mem_set+0x10>
}
 8007b2e:	bf00      	nop
 8007b30:	bf00      	nop
 8007b32:	371c      	adds	r7, #28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007b3c:	b480      	push	{r7}
 8007b3e:	b089      	sub	sp, #36	; 0x24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	61fb      	str	r3, [r7, #28]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	61fa      	str	r2, [r7, #28]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	61ba      	str	r2, [r7, #24]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	1acb      	subs	r3, r1, r3
 8007b68:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	607b      	str	r3, [r7, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <mem_cmp+0x40>
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0eb      	beq.n	8007b54 <mem_cmp+0x18>

	return r;
 8007b7c:	697b      	ldr	r3, [r7, #20]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3724      	adds	r7, #36	; 0x24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007b94:	e002      	b.n	8007b9c <chk_chr+0x12>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	607b      	str	r3, [r7, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <chk_chr+0x26>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d1f2      	bne.n	8007b96 <chk_chr+0xc>
	return *str;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60bb      	str	r3, [r7, #8]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	e029      	b.n	8007c28 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007bd4:	4a27      	ldr	r2, [pc, #156]	; (8007c74 <chk_lock+0xb4>)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	011b      	lsls	r3, r3, #4
 8007bda:	4413      	add	r3, r2
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d01d      	beq.n	8007c1e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007be2:	4a24      	ldr	r2, [pc, #144]	; (8007c74 <chk_lock+0xb4>)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	4413      	add	r3, r2
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d116      	bne.n	8007c22 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007bf4:	4a1f      	ldr	r2, [pc, #124]	; (8007c74 <chk_lock+0xb4>)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	4413      	add	r3, r2
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d10c      	bne.n	8007c22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007c08:	4a1a      	ldr	r2, [pc, #104]	; (8007c74 <chk_lock+0xb4>)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	011b      	lsls	r3, r3, #4
 8007c0e:	4413      	add	r3, r2
 8007c10:	3308      	adds	r3, #8
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d102      	bne.n	8007c22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007c1c:	e007      	b.n	8007c2e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	3301      	adds	r3, #1
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d9d2      	bls.n	8007bd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d109      	bne.n	8007c48 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d102      	bne.n	8007c40 <chk_lock+0x80>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d101      	bne.n	8007c44 <chk_lock+0x84>
 8007c40:	2300      	movs	r3, #0
 8007c42:	e010      	b.n	8007c66 <chk_lock+0xa6>
 8007c44:	2312      	movs	r3, #18
 8007c46:	e00e      	b.n	8007c66 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d108      	bne.n	8007c60 <chk_lock+0xa0>
 8007c4e:	4a09      	ldr	r2, [pc, #36]	; (8007c74 <chk_lock+0xb4>)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	4413      	add	r3, r2
 8007c56:	330c      	adds	r3, #12
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c5e:	d101      	bne.n	8007c64 <chk_lock+0xa4>
 8007c60:	2310      	movs	r3, #16
 8007c62:	e000      	b.n	8007c66 <chk_lock+0xa6>
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	200030fc 	.word	0x200030fc

08007c78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	607b      	str	r3, [r7, #4]
 8007c82:	e002      	b.n	8007c8a <enq_lock+0x12>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3301      	adds	r3, #1
 8007c88:	607b      	str	r3, [r7, #4]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d806      	bhi.n	8007c9e <enq_lock+0x26>
 8007c90:	4a09      	ldr	r2, [pc, #36]	; (8007cb8 <enq_lock+0x40>)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	4413      	add	r3, r2
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1f2      	bne.n	8007c84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	bf14      	ite	ne
 8007ca4:	2301      	movne	r3, #1
 8007ca6:	2300      	moveq	r3, #0
 8007ca8:	b2db      	uxtb	r3, r3
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	200030fc 	.word	0x200030fc

08007cbc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	e01f      	b.n	8007d0c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007ccc:	4a41      	ldr	r2, [pc, #260]	; (8007dd4 <inc_lock+0x118>)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	4413      	add	r3, r2
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d113      	bne.n	8007d06 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007cde:	4a3d      	ldr	r2, [pc, #244]	; (8007dd4 <inc_lock+0x118>)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	4413      	add	r3, r2
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d109      	bne.n	8007d06 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007cf2:	4a38      	ldr	r2, [pc, #224]	; (8007dd4 <inc_lock+0x118>)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d006      	beq.n	8007d14 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d9dc      	bls.n	8007ccc <inc_lock+0x10>
 8007d12:	e000      	b.n	8007d16 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007d14:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d132      	bne.n	8007d82 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	e002      	b.n	8007d28 <inc_lock+0x6c>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3301      	adds	r3, #1
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d806      	bhi.n	8007d3c <inc_lock+0x80>
 8007d2e:	4a29      	ldr	r2, [pc, #164]	; (8007dd4 <inc_lock+0x118>)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	011b      	lsls	r3, r3, #4
 8007d34:	4413      	add	r3, r2
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1f2      	bne.n	8007d22 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d101      	bne.n	8007d46 <inc_lock+0x8a>
 8007d42:	2300      	movs	r3, #0
 8007d44:	e040      	b.n	8007dc8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	4922      	ldr	r1, [pc, #136]	; (8007dd4 <inc_lock+0x118>)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	440b      	add	r3, r1
 8007d52:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	491e      	ldr	r1, [pc, #120]	; (8007dd4 <inc_lock+0x118>)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	440b      	add	r3, r1
 8007d60:	3304      	adds	r3, #4
 8007d62:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	695a      	ldr	r2, [r3, #20]
 8007d68:	491a      	ldr	r1, [pc, #104]	; (8007dd4 <inc_lock+0x118>)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	011b      	lsls	r3, r3, #4
 8007d6e:	440b      	add	r3, r1
 8007d70:	3308      	adds	r3, #8
 8007d72:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007d74:	4a17      	ldr	r2, [pc, #92]	; (8007dd4 <inc_lock+0x118>)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	4413      	add	r3, r2
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	2200      	movs	r2, #0
 8007d80:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d009      	beq.n	8007d9c <inc_lock+0xe0>
 8007d88:	4a12      	ldr	r2, [pc, #72]	; (8007dd4 <inc_lock+0x118>)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	4413      	add	r3, r2
 8007d90:	330c      	adds	r3, #12
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <inc_lock+0xe0>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e015      	b.n	8007dc8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d108      	bne.n	8007db4 <inc_lock+0xf8>
 8007da2:	4a0c      	ldr	r2, [pc, #48]	; (8007dd4 <inc_lock+0x118>)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	011b      	lsls	r3, r3, #4
 8007da8:	4413      	add	r3, r2
 8007daa:	330c      	adds	r3, #12
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	3301      	adds	r3, #1
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	e001      	b.n	8007db8 <inc_lock+0xfc>
 8007db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007db8:	4906      	ldr	r1, [pc, #24]	; (8007dd4 <inc_lock+0x118>)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	440b      	add	r3, r1
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3301      	adds	r3, #1
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3714      	adds	r7, #20
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	200030fc 	.word	0x200030fc

08007dd8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	607b      	str	r3, [r7, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d825      	bhi.n	8007e38 <dec_lock+0x60>
		n = Files[i].ctr;
 8007dec:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <dec_lock+0x74>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	4413      	add	r3, r2
 8007df4:	330c      	adds	r3, #12
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007dfa:	89fb      	ldrh	r3, [r7, #14]
 8007dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e00:	d101      	bne.n	8007e06 <dec_lock+0x2e>
 8007e02:	2300      	movs	r3, #0
 8007e04:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007e06:	89fb      	ldrh	r3, [r7, #14]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <dec_lock+0x3a>
 8007e0c:	89fb      	ldrh	r3, [r7, #14]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007e12:	4a0e      	ldr	r2, [pc, #56]	; (8007e4c <dec_lock+0x74>)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	4413      	add	r3, r2
 8007e1a:	330c      	adds	r3, #12
 8007e1c:	89fa      	ldrh	r2, [r7, #14]
 8007e1e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007e20:	89fb      	ldrh	r3, [r7, #14]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d105      	bne.n	8007e32 <dec_lock+0x5a>
 8007e26:	4a09      	ldr	r2, [pc, #36]	; (8007e4c <dec_lock+0x74>)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	737b      	strb	r3, [r7, #13]
 8007e36:	e001      	b.n	8007e3c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007e38:	2302      	movs	r3, #2
 8007e3a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007e3c:	7b7b      	ldrb	r3, [r7, #13]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	200030fc 	.word	0x200030fc

08007e50 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	e010      	b.n	8007e80 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007e5e:	4a0d      	ldr	r2, [pc, #52]	; (8007e94 <clear_lock+0x44>)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	4413      	add	r3, r2
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d105      	bne.n	8007e7a <clear_lock+0x2a>
 8007e6e:	4a09      	ldr	r2, [pc, #36]	; (8007e94 <clear_lock+0x44>)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	4413      	add	r3, r2
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d9eb      	bls.n	8007e5e <clear_lock+0xe>
	}
}
 8007e86:	bf00      	nop
 8007e88:	bf00      	nop
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	200030fc 	.word	0x200030fc

08007e98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	78db      	ldrb	r3, [r3, #3]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d034      	beq.n	8007f16 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	7858      	ldrb	r0, [r3, #1]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	f7ff fd40 	bl	8007944 <disk_write>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	73fb      	strb	r3, [r7, #15]
 8007ece:	e022      	b.n	8007f16 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	1ad2      	subs	r2, r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d217      	bcs.n	8007f16 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	789b      	ldrb	r3, [r3, #2]
 8007eea:	613b      	str	r3, [r7, #16]
 8007eec:	e010      	b.n	8007f10 <sync_window+0x78>
					wsect += fs->fsize;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	7858      	ldrb	r0, [r3, #1]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f02:	2301      	movs	r3, #1
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	f7ff fd1d 	bl	8007944 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	613b      	str	r3, [r7, #16]
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d8eb      	bhi.n	8007eee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d01b      	beq.n	8007f70 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff ffad 	bl	8007e98 <sync_window>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d113      	bne.n	8007f70 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	7858      	ldrb	r0, [r3, #1]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f52:	2301      	movs	r3, #1
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	f7ff fcd5 	bl	8007904 <disk_read>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007f60:	f04f 33ff 	mov.w	r3, #4294967295
 8007f64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff ff87 	bl	8007e98 <sync_window>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d159      	bne.n	8008048 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d149      	bne.n	8008030 <sync_fs+0xb4>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	791b      	ldrb	r3, [r3, #4]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d145      	bne.n	8008030 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	899b      	ldrh	r3, [r3, #12]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	f7ff fda8 	bl	8007b06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3334      	adds	r3, #52	; 0x34
 8007fba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fbe:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff fd37 	bl	8007a36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3334      	adds	r3, #52	; 0x34
 8007fcc:	4921      	ldr	r1, [pc, #132]	; (8008054 <sync_fs+0xd8>)
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff fd4c 	bl	8007a6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3334      	adds	r3, #52	; 0x34
 8007fd8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007fdc:	491e      	ldr	r1, [pc, #120]	; (8008058 <sync_fs+0xdc>)
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff fd44 	bl	8007a6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3334      	adds	r3, #52	; 0x34
 8007fe8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	f7ff fd3a 	bl	8007a6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3334      	adds	r3, #52	; 0x34
 8007ffc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	4619      	mov	r1, r3
 8008006:	4610      	mov	r0, r2
 8008008:	f7ff fd30 	bl	8007a6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	7858      	ldrb	r0, [r3, #1]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008024:	2301      	movs	r3, #1
 8008026:	f7ff fc8d 	bl	8007944 <disk_write>
			fs->fsi_flag = 0;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	785b      	ldrb	r3, [r3, #1]
 8008034:	2200      	movs	r2, #0
 8008036:	2100      	movs	r1, #0
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff fca3 	bl	8007984 <disk_ioctl>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <sync_fs+0xcc>
 8008044:	2301      	movs	r3, #1
 8008046:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	41615252 	.word	0x41615252
 8008058:	61417272 	.word	0x61417272

0800805c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	3b02      	subs	r3, #2
 800806a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	3b02      	subs	r3, #2
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	429a      	cmp	r2, r3
 8008076:	d301      	bcc.n	800807c <clust2sect+0x20>
 8008078:	2300      	movs	r3, #0
 800807a:	e008      	b.n	800808e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	895b      	ldrh	r3, [r3, #10]
 8008080:	461a      	mov	r2, r3
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	fb03 f202 	mul.w	r2, r3, r2
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	4413      	add	r3, r2
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b086      	sub	sp, #24
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d904      	bls.n	80080ba <get_fat+0x20>
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d302      	bcc.n	80080c0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80080ba:	2301      	movs	r3, #1
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	e0bb      	b.n	8008238 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80080c0:	f04f 33ff 	mov.w	r3, #4294967295
 80080c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	f000 8083 	beq.w	80081d6 <get_fat+0x13c>
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	f300 80a7 	bgt.w	8008224 <get_fat+0x18a>
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d002      	beq.n	80080e0 <get_fat+0x46>
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d056      	beq.n	800818c <get_fat+0xf2>
 80080de:	e0a1      	b.n	8008224 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	085b      	lsrs	r3, r3, #1
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	4413      	add	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	899b      	ldrh	r3, [r3, #12]
 80080f6:	4619      	mov	r1, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80080fe:	4413      	add	r3, r2
 8008100:	4619      	mov	r1, r3
 8008102:	6938      	ldr	r0, [r7, #16]
 8008104:	f7ff ff0c 	bl	8007f20 <move_window>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	f040 808d 	bne.w	800822a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	60fa      	str	r2, [r7, #12]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	8992      	ldrh	r2, [r2, #12]
 800811a:	fbb3 f1f2 	udiv	r1, r3, r2
 800811e:	fb01 f202 	mul.w	r2, r1, r2
 8008122:	1a9b      	subs	r3, r3, r2
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4413      	add	r3, r2
 8008128:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800812c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	899b      	ldrh	r3, [r3, #12]
 8008136:	4619      	mov	r1, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	fbb3 f3f1 	udiv	r3, r3, r1
 800813e:	4413      	add	r3, r2
 8008140:	4619      	mov	r1, r3
 8008142:	6938      	ldr	r0, [r7, #16]
 8008144:	f7ff feec 	bl	8007f20 <move_window>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d16f      	bne.n	800822e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	899b      	ldrh	r3, [r3, #12]
 8008152:	461a      	mov	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	fbb3 f1f2 	udiv	r1, r3, r2
 800815a:	fb01 f202 	mul.w	r2, r1, r2
 800815e:	1a9b      	subs	r3, r3, r2
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	4413      	add	r3, r2
 8008164:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008168:	021b      	lsls	r3, r3, #8
 800816a:	461a      	mov	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4313      	orrs	r3, r2
 8008170:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <get_fat+0xe8>
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	091b      	lsrs	r3, r3, #4
 8008180:	e002      	b.n	8008188 <get_fat+0xee>
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008188:	617b      	str	r3, [r7, #20]
			break;
 800818a:	e055      	b.n	8008238 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	899b      	ldrh	r3, [r3, #12]
 8008194:	085b      	lsrs	r3, r3, #1
 8008196:	b29b      	uxth	r3, r3
 8008198:	4619      	mov	r1, r3
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	fbb3 f3f1 	udiv	r3, r3, r1
 80081a0:	4413      	add	r3, r2
 80081a2:	4619      	mov	r1, r3
 80081a4:	6938      	ldr	r0, [r7, #16]
 80081a6:	f7ff febb 	bl	8007f20 <move_window>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d140      	bne.n	8008232 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	8992      	ldrh	r2, [r2, #12]
 80081be:	fbb3 f0f2 	udiv	r0, r3, r2
 80081c2:	fb00 f202 	mul.w	r2, r0, r2
 80081c6:	1a9b      	subs	r3, r3, r2
 80081c8:	440b      	add	r3, r1
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff fbf8 	bl	80079c0 <ld_word>
 80081d0:	4603      	mov	r3, r0
 80081d2:	617b      	str	r3, [r7, #20]
			break;
 80081d4:	e030      	b.n	8008238 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	899b      	ldrh	r3, [r3, #12]
 80081de:	089b      	lsrs	r3, r3, #2
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	4619      	mov	r1, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80081ea:	4413      	add	r3, r2
 80081ec:	4619      	mov	r1, r3
 80081ee:	6938      	ldr	r0, [r7, #16]
 80081f0:	f7ff fe96 	bl	8007f20 <move_window>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d11d      	bne.n	8008236 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	8992      	ldrh	r2, [r2, #12]
 8008208:	fbb3 f0f2 	udiv	r0, r3, r2
 800820c:	fb00 f202 	mul.w	r2, r0, r2
 8008210:	1a9b      	subs	r3, r3, r2
 8008212:	440b      	add	r3, r1
 8008214:	4618      	mov	r0, r3
 8008216:	f7ff fbeb 	bl	80079f0 <ld_dword>
 800821a:	4603      	mov	r3, r0
 800821c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008220:	617b      	str	r3, [r7, #20]
			break;
 8008222:	e009      	b.n	8008238 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008224:	2301      	movs	r3, #1
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	e006      	b.n	8008238 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800822a:	bf00      	nop
 800822c:	e004      	b.n	8008238 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800822e:	bf00      	nop
 8008230:	e002      	b.n	8008238 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008232:	bf00      	nop
 8008234:	e000      	b.n	8008238 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008236:	bf00      	nop
		}
	}

	return val;
 8008238:	697b      	ldr	r3, [r7, #20]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008242:	b590      	push	{r4, r7, lr}
 8008244:	b089      	sub	sp, #36	; 0x24
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800824e:	2302      	movs	r3, #2
 8008250:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2b01      	cmp	r3, #1
 8008256:	f240 8102 	bls.w	800845e <put_fat+0x21c>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	429a      	cmp	r2, r3
 8008262:	f080 80fc 	bcs.w	800845e <put_fat+0x21c>
		switch (fs->fs_type) {
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b03      	cmp	r3, #3
 800826c:	f000 80b6 	beq.w	80083dc <put_fat+0x19a>
 8008270:	2b03      	cmp	r3, #3
 8008272:	f300 80fd 	bgt.w	8008470 <put_fat+0x22e>
 8008276:	2b01      	cmp	r3, #1
 8008278:	d003      	beq.n	8008282 <put_fat+0x40>
 800827a:	2b02      	cmp	r3, #2
 800827c:	f000 8083 	beq.w	8008386 <put_fat+0x144>
 8008280:	e0f6      	b.n	8008470 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	61bb      	str	r3, [r7, #24]
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	085b      	lsrs	r3, r3, #1
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	4413      	add	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	899b      	ldrh	r3, [r3, #12]
 8008298:	4619      	mov	r1, r3
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	fbb3 f3f1 	udiv	r3, r3, r1
 80082a0:	4413      	add	r3, r2
 80082a2:	4619      	mov	r1, r3
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff fe3b 	bl	8007f20 <move_window>
 80082aa:	4603      	mov	r3, r0
 80082ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082ae:	7ffb      	ldrb	r3, [r7, #31]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f040 80d6 	bne.w	8008462 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	61ba      	str	r2, [r7, #24]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	8992      	ldrh	r2, [r2, #12]
 80082c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80082ca:	fb00 f202 	mul.w	r2, r0, r2
 80082ce:	1a9b      	subs	r3, r3, r2
 80082d0:	440b      	add	r3, r1
 80082d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00d      	beq.n	80082fa <put_fat+0xb8>
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	b25b      	sxtb	r3, r3
 80082e4:	f003 030f 	and.w	r3, r3, #15
 80082e8:	b25a      	sxtb	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	011b      	lsls	r3, r3, #4
 80082f0:	b25b      	sxtb	r3, r3
 80082f2:	4313      	orrs	r3, r2
 80082f4:	b25b      	sxtb	r3, r3
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	e001      	b.n	80082fe <put_fat+0xbc>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	899b      	ldrh	r3, [r3, #12]
 8008310:	4619      	mov	r1, r3
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	fbb3 f3f1 	udiv	r3, r3, r1
 8008318:	4413      	add	r3, r2
 800831a:	4619      	mov	r1, r3
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7ff fdff 	bl	8007f20 <move_window>
 8008322:	4603      	mov	r3, r0
 8008324:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008326:	7ffb      	ldrb	r3, [r7, #31]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f040 809c 	bne.w	8008466 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	899b      	ldrh	r3, [r3, #12]
 8008338:	461a      	mov	r2, r3
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008340:	fb00 f202 	mul.w	r2, r0, r2
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	440b      	add	r3, r1
 8008348:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <put_fat+0x11a>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	091b      	lsrs	r3, r3, #4
 8008358:	b2db      	uxtb	r3, r3
 800835a:	e00e      	b.n	800837a <put_fat+0x138>
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	b25b      	sxtb	r3, r3
 8008362:	f023 030f 	bic.w	r3, r3, #15
 8008366:	b25a      	sxtb	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	0a1b      	lsrs	r3, r3, #8
 800836c:	b25b      	sxtb	r3, r3
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	b25b      	sxtb	r3, r3
 8008374:	4313      	orrs	r3, r2
 8008376:	b25b      	sxtb	r3, r3
 8008378:	b2db      	uxtb	r3, r3
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	70da      	strb	r2, [r3, #3]
			break;
 8008384:	e074      	b.n	8008470 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	899b      	ldrh	r3, [r3, #12]
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	b29b      	uxth	r3, r3
 8008392:	4619      	mov	r1, r3
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	fbb3 f3f1 	udiv	r3, r3, r1
 800839a:	4413      	add	r3, r2
 800839c:	4619      	mov	r1, r3
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7ff fdbe 	bl	8007f20 <move_window>
 80083a4:	4603      	mov	r3, r0
 80083a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083a8:	7ffb      	ldrb	r3, [r7, #31]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d15d      	bne.n	800846a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	8992      	ldrh	r2, [r2, #12]
 80083bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80083c0:	fb00 f202 	mul.w	r2, r0, r2
 80083c4:	1a9b      	subs	r3, r3, r2
 80083c6:	440b      	add	r3, r1
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	b292      	uxth	r2, r2
 80083cc:	4611      	mov	r1, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fb31 	bl	8007a36 <st_word>
			fs->wflag = 1;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2201      	movs	r2, #1
 80083d8:	70da      	strb	r2, [r3, #3]
			break;
 80083da:	e049      	b.n	8008470 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	899b      	ldrh	r3, [r3, #12]
 80083e4:	089b      	lsrs	r3, r3, #2
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	4619      	mov	r1, r3
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80083f0:	4413      	add	r3, r2
 80083f2:	4619      	mov	r1, r3
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f7ff fd93 	bl	8007f20 <move_window>
 80083fa:	4603      	mov	r3, r0
 80083fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083fe:	7ffb      	ldrb	r3, [r7, #31]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d134      	bne.n	800846e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	8992      	ldrh	r2, [r2, #12]
 8008418:	fbb3 f0f2 	udiv	r0, r3, r2
 800841c:	fb00 f202 	mul.w	r2, r0, r2
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	440b      	add	r3, r1
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff fae3 	bl	80079f0 <ld_dword>
 800842a:	4603      	mov	r3, r0
 800842c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008430:	4323      	orrs	r3, r4
 8008432:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	8992      	ldrh	r2, [r2, #12]
 8008442:	fbb3 f0f2 	udiv	r0, r3, r2
 8008446:	fb00 f202 	mul.w	r2, r0, r2
 800844a:	1a9b      	subs	r3, r3, r2
 800844c:	440b      	add	r3, r1
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff fb0b 	bl	8007a6c <st_dword>
			fs->wflag = 1;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	70da      	strb	r2, [r3, #3]
			break;
 800845c:	e008      	b.n	8008470 <put_fat+0x22e>
		}
	}
 800845e:	bf00      	nop
 8008460:	e006      	b.n	8008470 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008462:	bf00      	nop
 8008464:	e004      	b.n	8008470 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008466:	bf00      	nop
 8008468:	e002      	b.n	8008470 <put_fat+0x22e>
			if (res != FR_OK) break;
 800846a:	bf00      	nop
 800846c:	e000      	b.n	8008470 <put_fat+0x22e>
			if (res != FR_OK) break;
 800846e:	bf00      	nop
	return res;
 8008470:	7ffb      	ldrb	r3, [r7, #31]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3724      	adds	r7, #36	; 0x24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd90      	pop	{r4, r7, pc}

0800847a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b088      	sub	sp, #32
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d904      	bls.n	80084a0 <remove_chain+0x26>
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	429a      	cmp	r2, r3
 800849e:	d301      	bcc.n	80084a4 <remove_chain+0x2a>
 80084a0:	2302      	movs	r3, #2
 80084a2:	e04b      	b.n	800853c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00c      	beq.n	80084c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80084aa:	f04f 32ff 	mov.w	r2, #4294967295
 80084ae:	6879      	ldr	r1, [r7, #4]
 80084b0:	69b8      	ldr	r0, [r7, #24]
 80084b2:	f7ff fec6 	bl	8008242 <put_fat>
 80084b6:	4603      	mov	r3, r0
 80084b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80084ba:	7ffb      	ldrb	r3, [r7, #31]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <remove_chain+0x4a>
 80084c0:	7ffb      	ldrb	r3, [r7, #31]
 80084c2:	e03b      	b.n	800853c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80084c4:	68b9      	ldr	r1, [r7, #8]
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f7ff fde7 	bl	800809a <get_fat>
 80084cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d031      	beq.n	8008538 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <remove_chain+0x64>
 80084da:	2302      	movs	r3, #2
 80084dc:	e02e      	b.n	800853c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d101      	bne.n	80084ea <remove_chain+0x70>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e028      	b.n	800853c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80084ea:	2200      	movs	r2, #0
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	69b8      	ldr	r0, [r7, #24]
 80084f0:	f7ff fea7 	bl	8008242 <put_fat>
 80084f4:	4603      	mov	r3, r0
 80084f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80084f8:	7ffb      	ldrb	r3, [r7, #31]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <remove_chain+0x88>
 80084fe:	7ffb      	ldrb	r3, [r7, #31]
 8008500:	e01c      	b.n	800853c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	695a      	ldr	r2, [r3, #20]
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	3b02      	subs	r3, #2
 800850c:	429a      	cmp	r2, r3
 800850e:	d20b      	bcs.n	8008528 <remove_chain+0xae>
			fs->free_clst++;
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	1c5a      	adds	r2, r3, #1
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	791b      	ldrb	r3, [r3, #4]
 800851e:	f043 0301 	orr.w	r3, r3, #1
 8008522:	b2da      	uxtb	r2, r3
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	429a      	cmp	r2, r3
 8008534:	d3c6      	bcc.n	80084c4 <remove_chain+0x4a>
 8008536:	e000      	b.n	800853a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008538:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3720      	adds	r7, #32
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10d      	bne.n	8008576 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d004      	beq.n	8008570 <create_chain+0x2c>
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	429a      	cmp	r2, r3
 800856e:	d31b      	bcc.n	80085a8 <create_chain+0x64>
 8008570:	2301      	movs	r3, #1
 8008572:	61bb      	str	r3, [r7, #24]
 8008574:	e018      	b.n	80085a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff fd8e 	bl	800809a <get_fat>
 800857e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d801      	bhi.n	800858a <create_chain+0x46>
 8008586:	2301      	movs	r3, #1
 8008588:	e070      	b.n	800866c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008590:	d101      	bne.n	8008596 <create_chain+0x52>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	e06a      	b.n	800866c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	429a      	cmp	r2, r3
 800859e:	d201      	bcs.n	80085a4 <create_chain+0x60>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	e063      	b.n	800866c <create_chain+0x128>
		scl = clst;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	3301      	adds	r3, #1
 80085b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d307      	bcc.n	80085cc <create_chain+0x88>
				ncl = 2;
 80085bc:	2302      	movs	r3, #2
 80085be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80085c0:	69fa      	ldr	r2, [r7, #28]
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d901      	bls.n	80085cc <create_chain+0x88>
 80085c8:	2300      	movs	r3, #0
 80085ca:	e04f      	b.n	800866c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80085cc:	69f9      	ldr	r1, [r7, #28]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff fd63 	bl	800809a <get_fat>
 80085d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00e      	beq.n	80085fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d003      	beq.n	80085ea <create_chain+0xa6>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d101      	bne.n	80085ee <create_chain+0xaa>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	e03e      	b.n	800866c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80085ee:	69fa      	ldr	r2, [r7, #28]
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d1da      	bne.n	80085ac <create_chain+0x68>
 80085f6:	2300      	movs	r3, #0
 80085f8:	e038      	b.n	800866c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80085fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80085fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008600:	69f9      	ldr	r1, [r7, #28]
 8008602:	6938      	ldr	r0, [r7, #16]
 8008604:	f7ff fe1d 	bl	8008242 <put_fat>
 8008608:	4603      	mov	r3, r0
 800860a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d109      	bne.n	8008626 <create_chain+0xe2>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d006      	beq.n	8008626 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008618:	69fa      	ldr	r2, [r7, #28]
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6938      	ldr	r0, [r7, #16]
 800861e:	f7ff fe10 	bl	8008242 <put_fat>
 8008622:	4603      	mov	r3, r0
 8008624:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d116      	bne.n	800865a <create_chain+0x116>
		fs->last_clst = ncl;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	69fa      	ldr	r2, [r7, #28]
 8008630:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	695a      	ldr	r2, [r3, #20]
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	3b02      	subs	r3, #2
 800863c:	429a      	cmp	r2, r3
 800863e:	d804      	bhi.n	800864a <create_chain+0x106>
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	1e5a      	subs	r2, r3, #1
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	791b      	ldrb	r3, [r3, #4]
 800864e:	f043 0301 	orr.w	r3, r3, #1
 8008652:	b2da      	uxtb	r2, r3
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	711a      	strb	r2, [r3, #4]
 8008658:	e007      	b.n	800866a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d102      	bne.n	8008666 <create_chain+0x122>
 8008660:	f04f 33ff 	mov.w	r3, #4294967295
 8008664:	e000      	b.n	8008668 <create_chain+0x124>
 8008666:	2301      	movs	r3, #1
 8008668:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800866a:	69fb      	ldr	r3, [r7, #28]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3720      	adds	r7, #32
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008674:	b480      	push	{r7}
 8008676:	b087      	sub	sp, #28
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008688:	3304      	adds	r3, #4
 800868a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	899b      	ldrh	r3, [r3, #12]
 8008690:	461a      	mov	r2, r3
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	fbb3 f3f2 	udiv	r3, r3, r2
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	8952      	ldrh	r2, [r2, #10]
 800869c:	fbb3 f3f2 	udiv	r3, r3, r2
 80086a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1d1a      	adds	r2, r3, #4
 80086a6:	613a      	str	r2, [r7, #16]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <clmt_clust+0x42>
 80086b2:	2300      	movs	r3, #0
 80086b4:	e010      	b.n	80086d8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d307      	bcc.n	80086ce <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	617b      	str	r3, [r7, #20]
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	3304      	adds	r3, #4
 80086ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80086cc:	e7e9      	b.n	80086a2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80086ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	4413      	add	r3, r2
}
 80086d8:	4618      	mov	r0, r3
 80086da:	371c      	adds	r7, #28
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086fa:	d204      	bcs.n	8008706 <dir_sdi+0x22>
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	f003 031f 	and.w	r3, r3, #31
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008706:	2302      	movs	r3, #2
 8008708:	e071      	b.n	80087ee <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d106      	bne.n	800872a <dir_sdi+0x46>
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b02      	cmp	r3, #2
 8008722:	d902      	bls.n	800872a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10c      	bne.n	800874a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	095b      	lsrs	r3, r3, #5
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	8912      	ldrh	r2, [r2, #8]
 8008738:	4293      	cmp	r3, r2
 800873a:	d301      	bcc.n	8008740 <dir_sdi+0x5c>
 800873c:	2302      	movs	r3, #2
 800873e:	e056      	b.n	80087ee <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	61da      	str	r2, [r3, #28]
 8008748:	e02d      	b.n	80087a6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	895b      	ldrh	r3, [r3, #10]
 800874e:	461a      	mov	r2, r3
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	899b      	ldrh	r3, [r3, #12]
 8008754:	fb02 f303 	mul.w	r3, r2, r3
 8008758:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800875a:	e019      	b.n	8008790 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6979      	ldr	r1, [r7, #20]
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff fc9a 	bl	800809a <get_fat>
 8008766:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876e:	d101      	bne.n	8008774 <dir_sdi+0x90>
 8008770:	2301      	movs	r3, #1
 8008772:	e03c      	b.n	80087ee <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d904      	bls.n	8008784 <dir_sdi+0xa0>
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	429a      	cmp	r2, r3
 8008782:	d301      	bcc.n	8008788 <dir_sdi+0xa4>
 8008784:	2302      	movs	r3, #2
 8008786:	e032      	b.n	80087ee <dir_sdi+0x10a>
			ofs -= csz;
 8008788:	683a      	ldr	r2, [r7, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	429a      	cmp	r2, r3
 8008796:	d2e1      	bcs.n	800875c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008798:	6979      	ldr	r1, [r7, #20]
 800879a:	6938      	ldr	r0, [r7, #16]
 800879c:	f7ff fc5e 	bl	800805c <clust2sect>
 80087a0:	4602      	mov	r2, r0
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <dir_sdi+0xd4>
 80087b4:	2302      	movs	r3, #2
 80087b6:	e01a      	b.n	80087ee <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	69da      	ldr	r2, [r3, #28]
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	899b      	ldrh	r3, [r3, #12]
 80087c0:	4619      	mov	r1, r3
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80087c8:	441a      	add	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	899b      	ldrh	r3, [r3, #12]
 80087d8:	461a      	mov	r2, r3
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80087e0:	fb00 f202 	mul.w	r2, r0, r2
 80087e4:	1a9b      	subs	r3, r3, r2
 80087e6:	18ca      	adds	r2, r1, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b086      	sub	sp, #24
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	3320      	adds	r3, #32
 800880c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <dir_next+0x28>
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800881c:	d301      	bcc.n	8008822 <dir_next+0x2c>
 800881e:	2304      	movs	r3, #4
 8008820:	e0bb      	b.n	800899a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	899b      	ldrh	r3, [r3, #12]
 8008826:	461a      	mov	r2, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	fbb3 f1f2 	udiv	r1, r3, r2
 800882e:	fb01 f202 	mul.w	r2, r1, r2
 8008832:	1a9b      	subs	r3, r3, r2
 8008834:	2b00      	cmp	r3, #0
 8008836:	f040 809d 	bne.w	8008974 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10b      	bne.n	8008864 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	095b      	lsrs	r3, r3, #5
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	8912      	ldrh	r2, [r2, #8]
 8008854:	4293      	cmp	r3, r2
 8008856:	f0c0 808d 	bcc.w	8008974 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	61da      	str	r2, [r3, #28]
 8008860:	2304      	movs	r3, #4
 8008862:	e09a      	b.n	800899a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	899b      	ldrh	r3, [r3, #12]
 8008868:	461a      	mov	r2, r3
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	8952      	ldrh	r2, [r2, #10]
 8008874:	3a01      	subs	r2, #1
 8008876:	4013      	ands	r3, r2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d17b      	bne.n	8008974 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	4619      	mov	r1, r3
 8008884:	4610      	mov	r0, r2
 8008886:	f7ff fc08 	bl	800809a <get_fat>
 800888a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d801      	bhi.n	8008896 <dir_next+0xa0>
 8008892:	2302      	movs	r3, #2
 8008894:	e081      	b.n	800899a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889c:	d101      	bne.n	80088a2 <dir_next+0xac>
 800889e:	2301      	movs	r3, #1
 80088a0:	e07b      	b.n	800899a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d359      	bcc.n	8008960 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d104      	bne.n	80088bc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	61da      	str	r2, [r3, #28]
 80088b8:	2304      	movs	r3, #4
 80088ba:	e06e      	b.n	800899a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	4619      	mov	r1, r3
 80088c4:	4610      	mov	r0, r2
 80088c6:	f7ff fe3d 	bl	8008544 <create_chain>
 80088ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <dir_next+0xe0>
 80088d2:	2307      	movs	r3, #7
 80088d4:	e061      	b.n	800899a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d101      	bne.n	80088e0 <dir_next+0xea>
 80088dc:	2302      	movs	r3, #2
 80088de:	e05c      	b.n	800899a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e6:	d101      	bne.n	80088ec <dir_next+0xf6>
 80088e8:	2301      	movs	r3, #1
 80088ea:	e056      	b.n	800899a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f7ff fad3 	bl	8007e98 <sync_window>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <dir_next+0x106>
 80088f8:	2301      	movs	r3, #1
 80088fa:	e04e      	b.n	800899a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	899b      	ldrh	r3, [r3, #12]
 8008906:	461a      	mov	r2, r3
 8008908:	2100      	movs	r1, #0
 800890a:	f7ff f8fc 	bl	8007b06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800890e:	2300      	movs	r3, #0
 8008910:	613b      	str	r3, [r7, #16]
 8008912:	6979      	ldr	r1, [r7, #20]
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f7ff fba1 	bl	800805c <clust2sect>
 800891a:	4602      	mov	r2, r0
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	631a      	str	r2, [r3, #48]	; 0x30
 8008920:	e012      	b.n	8008948 <dir_next+0x152>
						fs->wflag = 1;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f7ff fab5 	bl	8007e98 <sync_window>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <dir_next+0x142>
 8008934:	2301      	movs	r3, #1
 8008936:	e030      	b.n	800899a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	3301      	adds	r3, #1
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	631a      	str	r2, [r3, #48]	; 0x30
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	895b      	ldrh	r3, [r3, #10]
 800894c:	461a      	mov	r2, r3
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	4293      	cmp	r3, r2
 8008952:	d3e6      	bcc.n	8008922 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	1ad2      	subs	r2, r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008966:	6979      	ldr	r1, [r7, #20]
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f7ff fb77 	bl	800805c <clust2sect>
 800896e:	4602      	mov	r2, r0
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	899b      	ldrh	r3, [r3, #12]
 8008984:	461a      	mov	r2, r3
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	fbb3 f0f2 	udiv	r0, r3, r2
 800898c:	fb00 f202 	mul.w	r2, r0, r2
 8008990:	1a9b      	subs	r3, r3, r2
 8008992:	18ca      	adds	r2, r1, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b086      	sub	sp, #24
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80089b2:	2100      	movs	r1, #0
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7ff fe95 	bl	80086e4 <dir_sdi>
 80089ba:	4603      	mov	r3, r0
 80089bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d12b      	bne.n	8008a1c <dir_alloc+0x7a>
		n = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	4619      	mov	r1, r3
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f7ff faa6 	bl	8007f20 <move_window>
 80089d4:	4603      	mov	r3, r0
 80089d6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80089d8:	7dfb      	ldrb	r3, [r7, #23]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d11d      	bne.n	8008a1a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2be5      	cmp	r3, #229	; 0xe5
 80089e6:	d004      	beq.n	80089f2 <dir_alloc+0x50>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d107      	bne.n	8008a02 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	3301      	adds	r3, #1
 80089f6:	613b      	str	r3, [r7, #16]
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d102      	bne.n	8008a06 <dir_alloc+0x64>
 8008a00:	e00c      	b.n	8008a1c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008a02:	2300      	movs	r3, #0
 8008a04:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008a06:	2101      	movs	r1, #1
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff fef4 	bl	80087f6 <dir_next>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0d7      	beq.n	80089c8 <dir_alloc+0x26>
 8008a18:	e000      	b.n	8008a1c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008a1a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d101      	bne.n	8008a26 <dir_alloc+0x84>
 8008a22:	2307      	movs	r3, #7
 8008a24:	75fb      	strb	r3, [r7, #23]
	return res;
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	331a      	adds	r3, #26
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fe ffbe 	bl	80079c0 <ld_word>
 8008a44:	4603      	mov	r3, r0
 8008a46:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d109      	bne.n	8008a64 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	3314      	adds	r3, #20
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe ffb3 	bl	80079c0 <ld_word>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	041b      	lsls	r3, r3, #16
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008a64:	68fb      	ldr	r3, [r7, #12]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	331a      	adds	r3, #26
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	b292      	uxth	r2, r2
 8008a82:	4611      	mov	r1, r2
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fe ffd6 	bl	8007a36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d109      	bne.n	8008aa6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f103 0214 	add.w	r2, r3, #20
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	0c1b      	lsrs	r3, r3, #16
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f7fe ffc8 	bl	8007a36 <st_word>
	}
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b086      	sub	sp, #24
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008abc:	2100      	movs	r1, #0
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff fe10 	bl	80086e4 <dir_sdi>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <dir_find+0x24>
 8008ace:	7dfb      	ldrb	r3, [r7, #23]
 8008ad0:	e03e      	b.n	8008b50 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6938      	ldr	r0, [r7, #16]
 8008ada:	f7ff fa21 	bl	8007f20 <move_window>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d12f      	bne.n	8008b48 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d102      	bne.n	8008afc <dir_find+0x4e>
 8008af6:	2304      	movs	r3, #4
 8008af8:	75fb      	strb	r3, [r7, #23]
 8008afa:	e028      	b.n	8008b4e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	330b      	adds	r3, #11
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	330b      	adds	r3, #11
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	f003 0308 	and.w	r3, r3, #8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10a      	bne.n	8008b34 <dir_find+0x86>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a18      	ldr	r0, [r3, #32]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3324      	adds	r3, #36	; 0x24
 8008b26:	220b      	movs	r2, #11
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f7ff f807 	bl	8007b3c <mem_cmp>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00b      	beq.n	8008b4c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008b34:	2100      	movs	r1, #0
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff fe5d 	bl	80087f6 <dir_next>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0c5      	beq.n	8008ad2 <dir_find+0x24>
 8008b46:	e002      	b.n	8008b4e <dir_find+0xa0>
		if (res != FR_OK) break;
 8008b48:	bf00      	nop
 8008b4a:	e000      	b.n	8008b4e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008b4c:	bf00      	nop

	return res;
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008b66:	2101      	movs	r1, #1
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff ff1a 	bl	80089a2 <dir_alloc>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d11c      	bne.n	8008bb2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	69db      	ldr	r3, [r3, #28]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	68b8      	ldr	r0, [r7, #8]
 8008b80:	f7ff f9ce 	bl	8007f20 <move_window>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d111      	bne.n	8008bb2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	2220      	movs	r2, #32
 8008b94:	2100      	movs	r1, #0
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fe ffb5 	bl	8007b06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a18      	ldr	r0, [r3, #32]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3324      	adds	r3, #36	; 0x24
 8008ba4:	220b      	movs	r2, #11
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	f7fe ff8c 	bl	8007ac4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff f9a5 	bl	8007f20 <move_window>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8008bda:	7afb      	ldrb	r3, [r7, #11]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d106      	bne.n	8008bee <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	22e5      	movs	r2, #229	; 0xe5
 8008be6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2201      	movs	r2, #1
 8008bec:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8008bee:	7afb      	ldrb	r3, [r7, #11]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2200      	movs	r2, #0
 8008c06:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d04e      	beq.n	8008cae <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	613b      	str	r3, [r7, #16]
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8008c18:	e021      	b.n	8008c5e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1a      	ldr	r2, [r3, #32]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	1c59      	adds	r1, r3, #1
 8008c22:	6179      	str	r1, [r7, #20]
 8008c24:	4413      	add	r3, r2
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	2b20      	cmp	r3, #32
 8008c2e:	d100      	bne.n	8008c32 <get_fileinfo+0x3a>
 8008c30:	e015      	b.n	8008c5e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	2b05      	cmp	r3, #5
 8008c36:	d101      	bne.n	8008c3c <get_fileinfo+0x44>
 8008c38:	23e5      	movs	r3, #229	; 0xe5
 8008c3a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2b09      	cmp	r3, #9
 8008c40:	d106      	bne.n	8008c50 <get_fileinfo+0x58>
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	1c5a      	adds	r2, r3, #1
 8008c46:	613a      	str	r2, [r7, #16]
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	222e      	movs	r2, #46	; 0x2e
 8008c4e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	613a      	str	r2, [r7, #16]
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	4413      	add	r3, r2
 8008c5a:	7bfa      	ldrb	r2, [r7, #15]
 8008c5c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b0a      	cmp	r3, #10
 8008c62:	d9da      	bls.n	8008c1a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	4413      	add	r3, r2
 8008c6a:	3309      	adds	r3, #9
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	7ada      	ldrb	r2, [r3, #11]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	331c      	adds	r3, #28
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe feb5 	bl	80079f0 <ld_dword>
 8008c86:	4602      	mov	r2, r0
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	3316      	adds	r3, #22
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe feac 	bl	80079f0 <ld_dword>
 8008c98:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	80da      	strh	r2, [r3, #6]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	0c1b      	lsrs	r3, r3, #16
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	809a      	strh	r2, [r3, #4]
 8008cac:	e000      	b.n	8008cb0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008cae:	bf00      	nop
}
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
	...

08008cb8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b088      	sub	sp, #32
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3324      	adds	r3, #36	; 0x24
 8008ccc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008cce:	220b      	movs	r2, #11
 8008cd0:	2120      	movs	r1, #32
 8008cd2:	68b8      	ldr	r0, [r7, #8]
 8008cd4:	f7fe ff17 	bl	8007b06 <mem_set>
	si = i = 0; ni = 8;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	613b      	str	r3, [r7, #16]
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	61fb      	str	r3, [r7, #28]
 8008ce0:	2308      	movs	r3, #8
 8008ce2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	1c5a      	adds	r2, r3, #1
 8008ce8:	61fa      	str	r2, [r7, #28]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	4413      	add	r3, r2
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008cf2:	7efb      	ldrb	r3, [r7, #27]
 8008cf4:	2b20      	cmp	r3, #32
 8008cf6:	d94e      	bls.n	8008d96 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008cf8:	7efb      	ldrb	r3, [r7, #27]
 8008cfa:	2b2f      	cmp	r3, #47	; 0x2f
 8008cfc:	d006      	beq.n	8008d0c <create_name+0x54>
 8008cfe:	7efb      	ldrb	r3, [r7, #27]
 8008d00:	2b5c      	cmp	r3, #92	; 0x5c
 8008d02:	d110      	bne.n	8008d26 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008d04:	e002      	b.n	8008d0c <create_name+0x54>
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	61fb      	str	r3, [r7, #28]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	4413      	add	r3, r2
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	2b2f      	cmp	r3, #47	; 0x2f
 8008d16:	d0f6      	beq.n	8008d06 <create_name+0x4e>
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	2b5c      	cmp	r3, #92	; 0x5c
 8008d22:	d0f0      	beq.n	8008d06 <create_name+0x4e>
			break;
 8008d24:	e038      	b.n	8008d98 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008d26:	7efb      	ldrb	r3, [r7, #27]
 8008d28:	2b2e      	cmp	r3, #46	; 0x2e
 8008d2a:	d003      	beq.n	8008d34 <create_name+0x7c>
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d30c      	bcc.n	8008d4e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	2b0b      	cmp	r3, #11
 8008d38:	d002      	beq.n	8008d40 <create_name+0x88>
 8008d3a:	7efb      	ldrb	r3, [r7, #27]
 8008d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d3e:	d001      	beq.n	8008d44 <create_name+0x8c>
 8008d40:	2306      	movs	r3, #6
 8008d42:	e044      	b.n	8008dce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008d44:	2308      	movs	r3, #8
 8008d46:	613b      	str	r3, [r7, #16]
 8008d48:	230b      	movs	r3, #11
 8008d4a:	617b      	str	r3, [r7, #20]
			continue;
 8008d4c:	e022      	b.n	8008d94 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008d4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	da04      	bge.n	8008d60 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008d56:	7efb      	ldrb	r3, [r7, #27]
 8008d58:	3b80      	subs	r3, #128	; 0x80
 8008d5a:	4a1f      	ldr	r2, [pc, #124]	; (8008dd8 <create_name+0x120>)
 8008d5c:	5cd3      	ldrb	r3, [r2, r3]
 8008d5e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008d60:	7efb      	ldrb	r3, [r7, #27]
 8008d62:	4619      	mov	r1, r3
 8008d64:	481d      	ldr	r0, [pc, #116]	; (8008ddc <create_name+0x124>)
 8008d66:	f7fe ff10 	bl	8007b8a <chk_chr>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <create_name+0xbc>
 8008d70:	2306      	movs	r3, #6
 8008d72:	e02c      	b.n	8008dce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008d74:	7efb      	ldrb	r3, [r7, #27]
 8008d76:	2b60      	cmp	r3, #96	; 0x60
 8008d78:	d905      	bls.n	8008d86 <create_name+0xce>
 8008d7a:	7efb      	ldrb	r3, [r7, #27]
 8008d7c:	2b7a      	cmp	r3, #122	; 0x7a
 8008d7e:	d802      	bhi.n	8008d86 <create_name+0xce>
 8008d80:	7efb      	ldrb	r3, [r7, #27]
 8008d82:	3b20      	subs	r3, #32
 8008d84:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	613a      	str	r2, [r7, #16]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	4413      	add	r3, r2
 8008d90:	7efa      	ldrb	r2, [r7, #27]
 8008d92:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008d94:	e7a6      	b.n	8008ce4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008d96:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	441a      	add	r2, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <create_name+0xf4>
 8008da8:	2306      	movs	r3, #6
 8008daa:	e010      	b.n	8008dce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2be5      	cmp	r3, #229	; 0xe5
 8008db2:	d102      	bne.n	8008dba <create_name+0x102>
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2205      	movs	r2, #5
 8008db8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008dba:	7efb      	ldrb	r3, [r7, #27]
 8008dbc:	2b20      	cmp	r3, #32
 8008dbe:	d801      	bhi.n	8008dc4 <create_name+0x10c>
 8008dc0:	2204      	movs	r2, #4
 8008dc2:	e000      	b.n	8008dc6 <create_name+0x10e>
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	330b      	adds	r3, #11
 8008dca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008dcc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3720      	adds	r7, #32
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	0800dce8 	.word	0x0800dce8
 8008ddc:	0800dc70 	.word	0x0800dc70

08008de0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008df4:	e002      	b.n	8008dfc <follow_path+0x1c>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	603b      	str	r3, [r7, #0]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b2f      	cmp	r3, #47	; 0x2f
 8008e02:	d0f8      	beq.n	8008df6 <follow_path+0x16>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	2b5c      	cmp	r3, #92	; 0x5c
 8008e0a:	d0f4      	beq.n	8008df6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	2b1f      	cmp	r3, #31
 8008e18:	d80a      	bhi.n	8008e30 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2280      	movs	r2, #128	; 0x80
 8008e1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008e22:	2100      	movs	r1, #0
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff fc5d 	bl	80086e4 <dir_sdi>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	75fb      	strb	r3, [r7, #23]
 8008e2e:	e048      	b.n	8008ec2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e30:	463b      	mov	r3, r7
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff ff3f 	bl	8008cb8 <create_name>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d139      	bne.n	8008eb8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff fe32 	bl	8008aae <dir_find>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008e54:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00a      	beq.n	8008e72 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d12c      	bne.n	8008ebc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008e62:	7afb      	ldrb	r3, [r7, #11]
 8008e64:	f003 0304 	and.w	r3, r3, #4
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d127      	bne.n	8008ebc <follow_path+0xdc>
 8008e6c:	2305      	movs	r3, #5
 8008e6e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008e70:	e024      	b.n	8008ebc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e72:	7afb      	ldrb	r3, [r7, #11]
 8008e74:	f003 0304 	and.w	r3, r3, #4
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d121      	bne.n	8008ec0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	799b      	ldrb	r3, [r3, #6]
 8008e80:	f003 0310 	and.w	r3, r3, #16
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d102      	bne.n	8008e8e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008e88:	2305      	movs	r3, #5
 8008e8a:	75fb      	strb	r3, [r7, #23]
 8008e8c:	e019      	b.n	8008ec2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	8992      	ldrh	r2, [r2, #12]
 8008e9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ea0:	fb00 f202 	mul.w	r2, r0, r2
 8008ea4:	1a9b      	subs	r3, r3, r2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f7ff fdc0 	bl	8008a30 <ld_clust>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008eb6:	e7bb      	b.n	8008e30 <follow_path+0x50>
			if (res != FR_OK) break;
 8008eb8:	bf00      	nop
 8008eba:	e002      	b.n	8008ec2 <follow_path+0xe2>
				break;
 8008ebc:	bf00      	nop
 8008ebe:	e000      	b.n	8008ec2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ec0:	bf00      	nop
			}
		}
	}

	return res;
 8008ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3718      	adds	r7, #24
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d031      	beq.n	8008f46 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	e002      	b.n	8008ef0 <get_ldnumber+0x24>
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	3301      	adds	r3, #1
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	2b20      	cmp	r3, #32
 8008ef6:	d903      	bls.n	8008f00 <get_ldnumber+0x34>
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	2b3a      	cmp	r3, #58	; 0x3a
 8008efe:	d1f4      	bne.n	8008eea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b3a      	cmp	r3, #58	; 0x3a
 8008f06:	d11c      	bne.n	8008f42 <get_ldnumber+0x76>
			tp = *path;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	60fa      	str	r2, [r7, #12]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	3b30      	subs	r3, #48	; 0x30
 8008f18:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	2b09      	cmp	r3, #9
 8008f1e:	d80e      	bhi.n	8008f3e <get_ldnumber+0x72>
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d10a      	bne.n	8008f3e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d107      	bne.n	8008f3e <get_ldnumber+0x72>
					vol = (int)i;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	3301      	adds	r3, #1
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	e002      	b.n	8008f48 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008f42:	2300      	movs	r3, #0
 8008f44:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008f46:	693b      	ldr	r3, [r7, #16]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	371c      	adds	r7, #28
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	70da      	strb	r2, [r3, #3]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7fe ffd6 	bl	8007f20 <move_window>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <check_fs+0x2a>
 8008f7a:	2304      	movs	r3, #4
 8008f7c:	e038      	b.n	8008ff0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3334      	adds	r3, #52	; 0x34
 8008f82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fd1a 	bl	80079c0 <ld_word>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	461a      	mov	r2, r3
 8008f90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d001      	beq.n	8008f9c <check_fs+0x48>
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e029      	b.n	8008ff0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fa2:	2be9      	cmp	r3, #233	; 0xe9
 8008fa4:	d009      	beq.n	8008fba <check_fs+0x66>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fac:	2beb      	cmp	r3, #235	; 0xeb
 8008fae:	d11e      	bne.n	8008fee <check_fs+0x9a>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008fb6:	2b90      	cmp	r3, #144	; 0x90
 8008fb8:	d119      	bne.n	8008fee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	3334      	adds	r3, #52	; 0x34
 8008fbe:	3336      	adds	r3, #54	; 0x36
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe fd15 	bl	80079f0 <ld_dword>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008fcc:	4a0a      	ldr	r2, [pc, #40]	; (8008ff8 <check_fs+0xa4>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d101      	bne.n	8008fd6 <check_fs+0x82>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e00c      	b.n	8008ff0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3334      	adds	r3, #52	; 0x34
 8008fda:	3352      	adds	r3, #82	; 0x52
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe fd07 	bl	80079f0 <ld_dword>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	4a05      	ldr	r2, [pc, #20]	; (8008ffc <check_fs+0xa8>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d101      	bne.n	8008fee <check_fs+0x9a>
 8008fea:	2300      	movs	r3, #0
 8008fec:	e000      	b.n	8008ff0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008fee:	2302      	movs	r3, #2
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	00544146 	.word	0x00544146
 8008ffc:	33544146 	.word	0x33544146

08009000 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b096      	sub	sp, #88	; 0x58
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f7ff ff59 	bl	8008ecc <get_ldnumber>
 800901a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800901c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901e:	2b00      	cmp	r3, #0
 8009020:	da01      	bge.n	8009026 <find_volume+0x26>
 8009022:	230b      	movs	r3, #11
 8009024:	e262      	b.n	80094ec <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009026:	4a9f      	ldr	r2, [pc, #636]	; (80092a4 <find_volume+0x2a4>)
 8009028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800902a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800902e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <find_volume+0x3a>
 8009036:	230c      	movs	r3, #12
 8009038:	e258      	b.n	80094ec <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800903e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009040:	79fb      	ldrb	r3, [r7, #7]
 8009042:	f023 0301 	bic.w	r3, r3, #1
 8009046:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d01a      	beq.n	8009086 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	785b      	ldrb	r3, [r3, #1]
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe fc15 	bl	8007884 <disk_status>
 800905a:	4603      	mov	r3, r0
 800905c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009060:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10c      	bne.n	8009086 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <find_volume+0x82>
 8009072:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009076:	f003 0304 	and.w	r3, r3, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800907e:	230a      	movs	r3, #10
 8009080:	e234      	b.n	80094ec <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8009082:	2300      	movs	r3, #0
 8009084:	e232      	b.n	80094ec <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	2200      	movs	r2, #0
 800908a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800908c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908e:	b2da      	uxtb	r2, r3
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	785b      	ldrb	r3, [r3, #1]
 8009098:	4618      	mov	r0, r3
 800909a:	f7fe fc0d 	bl	80078b8 <disk_initialize>
 800909e:	4603      	mov	r3, r0
 80090a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80090a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80090b0:	2303      	movs	r3, #3
 80090b2:	e21b      	b.n	80094ec <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80090b4:	79fb      	ldrb	r3, [r7, #7]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d007      	beq.n	80090ca <find_volume+0xca>
 80090ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090be:	f003 0304 	and.w	r3, r3, #4
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80090c6:	230a      	movs	r3, #10
 80090c8:	e210      	b.n	80094ec <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80090ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090cc:	7858      	ldrb	r0, [r3, #1]
 80090ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d0:	330c      	adds	r3, #12
 80090d2:	461a      	mov	r2, r3
 80090d4:	2102      	movs	r1, #2
 80090d6:	f7fe fc55 	bl	8007984 <disk_ioctl>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <find_volume+0xe4>
 80090e0:	2301      	movs	r3, #1
 80090e2:	e203      	b.n	80094ec <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80090e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e6:	899b      	ldrh	r3, [r3, #12]
 80090e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ec:	d80d      	bhi.n	800910a <find_volume+0x10a>
 80090ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f0:	899b      	ldrh	r3, [r3, #12]
 80090f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090f6:	d308      	bcc.n	800910a <find_volume+0x10a>
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	899b      	ldrh	r3, [r3, #12]
 80090fc:	461a      	mov	r2, r3
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	899b      	ldrh	r3, [r3, #12]
 8009102:	3b01      	subs	r3, #1
 8009104:	4013      	ands	r3, r2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <find_volume+0x10e>
 800910a:	2301      	movs	r3, #1
 800910c:	e1ee      	b.n	80094ec <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009112:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009114:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009116:	f7ff ff1d 	bl	8008f54 <check_fs>
 800911a:	4603      	mov	r3, r0
 800911c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009120:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009124:	2b02      	cmp	r3, #2
 8009126:	d149      	bne.n	80091bc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009128:	2300      	movs	r3, #0
 800912a:	643b      	str	r3, [r7, #64]	; 0x40
 800912c:	e01e      	b.n	800916c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009136:	011b      	lsls	r3, r3, #4
 8009138:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800913c:	4413      	add	r3, r2
 800913e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009142:	3304      	adds	r3, #4
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d006      	beq.n	8009158 <find_volume+0x158>
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	3308      	adds	r3, #8
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fc4e 	bl	80079f0 <ld_dword>
 8009154:	4602      	mov	r2, r0
 8009156:	e000      	b.n	800915a <find_volume+0x15a>
 8009158:	2200      	movs	r2, #0
 800915a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	3358      	adds	r3, #88	; 0x58
 8009160:	443b      	add	r3, r7
 8009162:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009168:	3301      	adds	r3, #1
 800916a:	643b      	str	r3, [r7, #64]	; 0x40
 800916c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800916e:	2b03      	cmp	r3, #3
 8009170:	d9dd      	bls.n	800912e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009172:	2300      	movs	r3, #0
 8009174:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <find_volume+0x182>
 800917c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800917e:	3b01      	subs	r3, #1
 8009180:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	3358      	adds	r3, #88	; 0x58
 8009188:	443b      	add	r3, r7
 800918a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800918e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009192:	2b00      	cmp	r3, #0
 8009194:	d005      	beq.n	80091a2 <find_volume+0x1a2>
 8009196:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800919a:	f7ff fedb 	bl	8008f54 <check_fs>
 800919e:	4603      	mov	r3, r0
 80091a0:	e000      	b.n	80091a4 <find_volume+0x1a4>
 80091a2:	2303      	movs	r3, #3
 80091a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80091a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d905      	bls.n	80091bc <find_volume+0x1bc>
 80091b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b2:	3301      	adds	r3, #1
 80091b4:	643b      	str	r3, [r7, #64]	; 0x40
 80091b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d9e2      	bls.n	8009182 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80091bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091c0:	2b04      	cmp	r3, #4
 80091c2:	d101      	bne.n	80091c8 <find_volume+0x1c8>
 80091c4:	2301      	movs	r3, #1
 80091c6:	e191      	b.n	80094ec <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80091c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d901      	bls.n	80091d4 <find_volume+0x1d4>
 80091d0:	230d      	movs	r3, #13
 80091d2:	e18b      	b.n	80094ec <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	3334      	adds	r3, #52	; 0x34
 80091d8:	330b      	adds	r3, #11
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fbf0 	bl	80079c0 <ld_word>
 80091e0:	4603      	mov	r3, r0
 80091e2:	461a      	mov	r2, r3
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	899b      	ldrh	r3, [r3, #12]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d001      	beq.n	80091f0 <find_volume+0x1f0>
 80091ec:	230d      	movs	r3, #13
 80091ee:	e17d      	b.n	80094ec <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f2:	3334      	adds	r3, #52	; 0x34
 80091f4:	3316      	adds	r3, #22
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fbe2 	bl	80079c0 <ld_word>
 80091fc:	4603      	mov	r3, r0
 80091fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d106      	bne.n	8009214 <find_volume+0x214>
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	3334      	adds	r3, #52	; 0x34
 800920a:	3324      	adds	r3, #36	; 0x24
 800920c:	4618      	mov	r0, r3
 800920e:	f7fe fbef 	bl	80079f0 <ld_dword>
 8009212:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009218:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009222:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009226:	789b      	ldrb	r3, [r3, #2]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d005      	beq.n	8009238 <find_volume+0x238>
 800922c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922e:	789b      	ldrb	r3, [r3, #2]
 8009230:	2b02      	cmp	r3, #2
 8009232:	d001      	beq.n	8009238 <find_volume+0x238>
 8009234:	230d      	movs	r3, #13
 8009236:	e159      	b.n	80094ec <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	789b      	ldrb	r3, [r3, #2]
 800923c:	461a      	mov	r2, r3
 800923e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009240:	fb02 f303 	mul.w	r3, r2, r3
 8009244:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800924c:	b29a      	uxth	r2, r3
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009254:	895b      	ldrh	r3, [r3, #10]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d008      	beq.n	800926c <find_volume+0x26c>
 800925a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925c:	895b      	ldrh	r3, [r3, #10]
 800925e:	461a      	mov	r2, r3
 8009260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009262:	895b      	ldrh	r3, [r3, #10]
 8009264:	3b01      	subs	r3, #1
 8009266:	4013      	ands	r3, r2
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <find_volume+0x270>
 800926c:	230d      	movs	r3, #13
 800926e:	e13d      	b.n	80094ec <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009272:	3334      	adds	r3, #52	; 0x34
 8009274:	3311      	adds	r3, #17
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe fba2 	bl	80079c0 <ld_word>
 800927c:	4603      	mov	r3, r0
 800927e:	461a      	mov	r2, r3
 8009280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009282:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009286:	891b      	ldrh	r3, [r3, #8]
 8009288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800928a:	8992      	ldrh	r2, [r2, #12]
 800928c:	0952      	lsrs	r2, r2, #5
 800928e:	b292      	uxth	r2, r2
 8009290:	fbb3 f1f2 	udiv	r1, r3, r2
 8009294:	fb01 f202 	mul.w	r2, r1, r2
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	b29b      	uxth	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	d003      	beq.n	80092a8 <find_volume+0x2a8>
 80092a0:	230d      	movs	r3, #13
 80092a2:	e123      	b.n	80094ec <find_volume+0x4ec>
 80092a4:	200030f4 	.word	0x200030f4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80092a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092aa:	3334      	adds	r3, #52	; 0x34
 80092ac:	3313      	adds	r3, #19
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fe fb86 	bl	80079c0 <ld_word>
 80092b4:	4603      	mov	r3, r0
 80092b6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80092b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d106      	bne.n	80092cc <find_volume+0x2cc>
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	3334      	adds	r3, #52	; 0x34
 80092c2:	3320      	adds	r3, #32
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe fb93 	bl	80079f0 <ld_dword>
 80092ca:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	3334      	adds	r3, #52	; 0x34
 80092d0:	330e      	adds	r3, #14
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe fb74 	bl	80079c0 <ld_word>
 80092d8:	4603      	mov	r3, r0
 80092da:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80092dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <find_volume+0x2e6>
 80092e2:	230d      	movs	r3, #13
 80092e4:	e102      	b.n	80094ec <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80092e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80092e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ea:	4413      	add	r3, r2
 80092ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ee:	8911      	ldrh	r1, [r2, #8]
 80092f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092f2:	8992      	ldrh	r2, [r2, #12]
 80092f4:	0952      	lsrs	r2, r2, #5
 80092f6:	b292      	uxth	r2, r2
 80092f8:	fbb1 f2f2 	udiv	r2, r1, r2
 80092fc:	b292      	uxth	r2, r2
 80092fe:	4413      	add	r3, r2
 8009300:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	429a      	cmp	r2, r3
 8009308:	d201      	bcs.n	800930e <find_volume+0x30e>
 800930a:	230d      	movs	r3, #13
 800930c:	e0ee      	b.n	80094ec <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800930e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009316:	8952      	ldrh	r2, [r2, #10]
 8009318:	fbb3 f3f2 	udiv	r3, r3, r2
 800931c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	2b00      	cmp	r3, #0
 8009322:	d101      	bne.n	8009328 <find_volume+0x328>
 8009324:	230d      	movs	r3, #13
 8009326:	e0e1      	b.n	80094ec <find_volume+0x4ec>
		fmt = FS_FAT32;
 8009328:	2303      	movs	r3, #3
 800932a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009334:	4293      	cmp	r3, r2
 8009336:	d802      	bhi.n	800933e <find_volume+0x33e>
 8009338:	2302      	movs	r3, #2
 800933a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009344:	4293      	cmp	r3, r2
 8009346:	d802      	bhi.n	800934e <find_volume+0x34e>
 8009348:	2301      	movs	r3, #1
 800934a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009350:	1c9a      	adds	r2, r3, #2
 8009352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009354:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009358:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800935a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800935c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800935e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009360:	441a      	add	r2, r3
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009366:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936a:	441a      	add	r2, r3
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009370:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009374:	2b03      	cmp	r3, #3
 8009376:	d11e      	bne.n	80093b6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	3334      	adds	r3, #52	; 0x34
 800937c:	332a      	adds	r3, #42	; 0x2a
 800937e:	4618      	mov	r0, r3
 8009380:	f7fe fb1e 	bl	80079c0 <ld_word>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <find_volume+0x38e>
 800938a:	230d      	movs	r3, #13
 800938c:	e0ae      	b.n	80094ec <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	891b      	ldrh	r3, [r3, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <find_volume+0x39a>
 8009396:	230d      	movs	r3, #13
 8009398:	e0a8      	b.n	80094ec <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	3334      	adds	r3, #52	; 0x34
 800939e:	332c      	adds	r3, #44	; 0x2c
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe fb25 	bl	80079f0 <ld_dword>
 80093a6:	4602      	mov	r2, r0
 80093a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093aa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	647b      	str	r3, [r7, #68]	; 0x44
 80093b4:	e01f      	b.n	80093f6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	891b      	ldrh	r3, [r3, #8]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <find_volume+0x3c2>
 80093be:	230d      	movs	r3, #13
 80093c0:	e094      	b.n	80094ec <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80093c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093c8:	441a      	add	r2, r3
 80093ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093cc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80093ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d103      	bne.n	80093de <find_volume+0x3de>
 80093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	e00a      	b.n	80093f4 <find_volume+0x3f4>
 80093de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e0:	699a      	ldr	r2, [r3, #24]
 80093e2:	4613      	mov	r3, r2
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	4413      	add	r3, r2
 80093e8:	085a      	lsrs	r2, r3, #1
 80093ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80093f4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80093f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f8:	69da      	ldr	r2, [r3, #28]
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	899b      	ldrh	r3, [r3, #12]
 80093fe:	4619      	mov	r1, r3
 8009400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009402:	440b      	add	r3, r1
 8009404:	3b01      	subs	r3, #1
 8009406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009408:	8989      	ldrh	r1, [r1, #12]
 800940a:	fbb3 f3f1 	udiv	r3, r3, r1
 800940e:	429a      	cmp	r2, r3
 8009410:	d201      	bcs.n	8009416 <find_volume+0x416>
 8009412:	230d      	movs	r3, #13
 8009414:	e06a      	b.n	80094ec <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	f04f 32ff 	mov.w	r2, #4294967295
 800941c:	615a      	str	r2, [r3, #20]
 800941e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009420:	695a      	ldr	r2, [r3, #20]
 8009422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009424:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009428:	2280      	movs	r2, #128	; 0x80
 800942a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800942c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009430:	2b03      	cmp	r3, #3
 8009432:	d149      	bne.n	80094c8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009436:	3334      	adds	r3, #52	; 0x34
 8009438:	3330      	adds	r3, #48	; 0x30
 800943a:	4618      	mov	r0, r3
 800943c:	f7fe fac0 	bl	80079c0 <ld_word>
 8009440:	4603      	mov	r3, r0
 8009442:	2b01      	cmp	r3, #1
 8009444:	d140      	bne.n	80094c8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009448:	3301      	adds	r3, #1
 800944a:	4619      	mov	r1, r3
 800944c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800944e:	f7fe fd67 	bl	8007f20 <move_window>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d137      	bne.n	80094c8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945a:	2200      	movs	r2, #0
 800945c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800945e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009460:	3334      	adds	r3, #52	; 0x34
 8009462:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe faaa 	bl	80079c0 <ld_word>
 800946c:	4603      	mov	r3, r0
 800946e:	461a      	mov	r2, r3
 8009470:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009474:	429a      	cmp	r2, r3
 8009476:	d127      	bne.n	80094c8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	3334      	adds	r3, #52	; 0x34
 800947c:	4618      	mov	r0, r3
 800947e:	f7fe fab7 	bl	80079f0 <ld_dword>
 8009482:	4603      	mov	r3, r0
 8009484:	4a1b      	ldr	r2, [pc, #108]	; (80094f4 <find_volume+0x4f4>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d11e      	bne.n	80094c8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	3334      	adds	r3, #52	; 0x34
 800948e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe faac 	bl	80079f0 <ld_dword>
 8009498:	4603      	mov	r3, r0
 800949a:	4a17      	ldr	r2, [pc, #92]	; (80094f8 <find_volume+0x4f8>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d113      	bne.n	80094c8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	3334      	adds	r3, #52	; 0x34
 80094a4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fe faa1 	bl	80079f0 <ld_dword>
 80094ae:	4602      	mov	r2, r0
 80094b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80094b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b6:	3334      	adds	r3, #52	; 0x34
 80094b8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe fa97 	bl	80079f0 <ld_dword>
 80094c2:	4602      	mov	r2, r0
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80094c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80094ce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80094d0:	4b0a      	ldr	r3, [pc, #40]	; (80094fc <find_volume+0x4fc>)
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	4b08      	ldr	r3, [pc, #32]	; (80094fc <find_volume+0x4fc>)
 80094da:	801a      	strh	r2, [r3, #0]
 80094dc:	4b07      	ldr	r3, [pc, #28]	; (80094fc <find_volume+0x4fc>)
 80094de:	881a      	ldrh	r2, [r3, #0]
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80094e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094e6:	f7fe fcb3 	bl	8007e50 <clear_lock>
#endif
	return FR_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3758      	adds	r7, #88	; 0x58
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	41615252 	.word	0x41615252
 80094f8:	61417272 	.word	0x61417272
 80094fc:	200030f8 	.word	0x200030f8

08009500 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800950a:	2309      	movs	r3, #9
 800950c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d01c      	beq.n	800954e <validate+0x4e>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d018      	beq.n	800954e <validate+0x4e>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d013      	beq.n	800954e <validate+0x4e>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	889a      	ldrh	r2, [r3, #4]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	88db      	ldrh	r3, [r3, #6]
 8009530:	429a      	cmp	r2, r3
 8009532:	d10c      	bne.n	800954e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	785b      	ldrb	r3, [r3, #1]
 800953a:	4618      	mov	r0, r3
 800953c:	f7fe f9a2 	bl	8007884 <disk_status>
 8009540:	4603      	mov	r3, r0
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <validate+0x4e>
			res = FR_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d102      	bne.n	800955a <validate+0x5a>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	e000      	b.n	800955c <validate+0x5c>
 800955a:	2300      	movs	r3, #0
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	6013      	str	r3, [r2, #0]
	return res;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b088      	sub	sp, #32
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	4613      	mov	r3, r2
 8009578:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800957e:	f107 0310 	add.w	r3, r7, #16
 8009582:	4618      	mov	r0, r3
 8009584:	f7ff fca2 	bl	8008ecc <get_ldnumber>
 8009588:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	2b00      	cmp	r3, #0
 800958e:	da01      	bge.n	8009594 <f_mount+0x28>
 8009590:	230b      	movs	r3, #11
 8009592:	e02b      	b.n	80095ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009594:	4a17      	ldr	r2, [pc, #92]	; (80095f4 <f_mount+0x88>)
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800959c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d005      	beq.n	80095b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80095a4:	69b8      	ldr	r0, [r7, #24]
 80095a6:	f7fe fc53 	bl	8007e50 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	2200      	movs	r2, #0
 80095ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	490d      	ldr	r1, [pc, #52]	; (80095f4 <f_mount+0x88>)
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <f_mount+0x66>
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d001      	beq.n	80095d6 <f_mount+0x6a>
 80095d2:	2300      	movs	r3, #0
 80095d4:	e00a      	b.n	80095ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80095d6:	f107 010c 	add.w	r1, r7, #12
 80095da:	f107 0308 	add.w	r3, r7, #8
 80095de:	2200      	movs	r2, #0
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7ff fd0d 	bl	8009000 <find_volume>
 80095e6:	4603      	mov	r3, r0
 80095e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3720      	adds	r7, #32
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	200030f4 	.word	0x200030f4

080095f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b098      	sub	sp, #96	; 0x60
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <f_open+0x18>
 800960c:	2309      	movs	r3, #9
 800960e:	e1bb      	b.n	8009988 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009610:	79fb      	ldrb	r3, [r7, #7]
 8009612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009616:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009618:	79fa      	ldrb	r2, [r7, #7]
 800961a:	f107 0110 	add.w	r1, r7, #16
 800961e:	f107 0308 	add.w	r3, r7, #8
 8009622:	4618      	mov	r0, r3
 8009624:	f7ff fcec 	bl	8009000 <find_volume>
 8009628:	4603      	mov	r3, r0
 800962a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800962e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009632:	2b00      	cmp	r3, #0
 8009634:	f040 819f 	bne.w	8009976 <f_open+0x37e>
		dj.obj.fs = fs;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	f107 0314 	add.w	r3, r7, #20
 8009642:	4611      	mov	r1, r2
 8009644:	4618      	mov	r0, r3
 8009646:	f7ff fbcb 	bl	8008de0 <follow_path>
 800964a:	4603      	mov	r3, r0
 800964c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009650:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009654:	2b00      	cmp	r3, #0
 8009656:	d11a      	bne.n	800968e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009658:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800965c:	b25b      	sxtb	r3, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	da03      	bge.n	800966a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009662:	2306      	movs	r3, #6
 8009664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009668:	e011      	b.n	800968e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	f023 0301 	bic.w	r3, r3, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	bf14      	ite	ne
 8009674:	2301      	movne	r3, #1
 8009676:	2300      	moveq	r3, #0
 8009678:	b2db      	uxtb	r3, r3
 800967a:	461a      	mov	r2, r3
 800967c:	f107 0314 	add.w	r3, r7, #20
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fa9c 	bl	8007bc0 <chk_lock>
 8009688:	4603      	mov	r3, r0
 800968a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	f003 031c 	and.w	r3, r3, #28
 8009694:	2b00      	cmp	r3, #0
 8009696:	d07f      	beq.n	8009798 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009698:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800969c:	2b00      	cmp	r3, #0
 800969e:	d017      	beq.n	80096d0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80096a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096a4:	2b04      	cmp	r3, #4
 80096a6:	d10e      	bne.n	80096c6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80096a8:	f7fe fae6 	bl	8007c78 <enq_lock>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d006      	beq.n	80096c0 <f_open+0xc8>
 80096b2:	f107 0314 	add.w	r3, r7, #20
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff fa4e 	bl	8008b58 <dir_register>
 80096bc:	4603      	mov	r3, r0
 80096be:	e000      	b.n	80096c2 <f_open+0xca>
 80096c0:	2312      	movs	r3, #18
 80096c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80096c6:	79fb      	ldrb	r3, [r7, #7]
 80096c8:	f043 0308 	orr.w	r3, r3, #8
 80096cc:	71fb      	strb	r3, [r7, #7]
 80096ce:	e010      	b.n	80096f2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80096d0:	7ebb      	ldrb	r3, [r7, #26]
 80096d2:	f003 0311 	and.w	r3, r3, #17
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d003      	beq.n	80096e2 <f_open+0xea>
					res = FR_DENIED;
 80096da:	2307      	movs	r3, #7
 80096dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80096e0:	e007      	b.n	80096f2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <f_open+0xfa>
 80096ec:	2308      	movs	r3, #8
 80096ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80096f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d168      	bne.n	80097cc <f_open+0x1d4>
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	f003 0308 	and.w	r3, r3, #8
 8009700:	2b00      	cmp	r3, #0
 8009702:	d063      	beq.n	80097cc <f_open+0x1d4>
				dw = GET_FATTIME();
 8009704:	f7fd ff04 	bl	8007510 <get_fattime>
 8009708:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800970a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970c:	330e      	adds	r3, #14
 800970e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009710:	4618      	mov	r0, r3
 8009712:	f7fe f9ab 	bl	8007a6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009718:	3316      	adds	r3, #22
 800971a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe f9a5 	bl	8007a6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009724:	330b      	adds	r3, #11
 8009726:	2220      	movs	r2, #32
 8009728:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800972e:	4611      	mov	r1, r2
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff f97d 	bl	8008a30 <ld_clust>
 8009736:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800973c:	2200      	movs	r2, #0
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff f995 	bl	8008a6e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009746:	331c      	adds	r3, #28
 8009748:	2100      	movs	r1, #0
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe f98e 	bl	8007a6c <st_dword>
					fs->wflag = 1;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2201      	movs	r2, #1
 8009754:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d037      	beq.n	80097cc <f_open+0x1d4>
						dw = fs->winsect;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009760:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009762:	f107 0314 	add.w	r3, r7, #20
 8009766:	2200      	movs	r2, #0
 8009768:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fe85 	bl	800847a <remove_chain>
 8009770:	4603      	mov	r3, r0
 8009772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800977a:	2b00      	cmp	r3, #0
 800977c:	d126      	bne.n	80097cc <f_open+0x1d4>
							res = move_window(fs, dw);
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe fbcc 	bl	8007f20 <move_window>
 8009788:	4603      	mov	r3, r0
 800978a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009792:	3a01      	subs	r2, #1
 8009794:	611a      	str	r2, [r3, #16]
 8009796:	e019      	b.n	80097cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800979c:	2b00      	cmp	r3, #0
 800979e:	d115      	bne.n	80097cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80097a0:	7ebb      	ldrb	r3, [r7, #26]
 80097a2:	f003 0310 	and.w	r3, r3, #16
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80097aa:	2304      	movs	r3, #4
 80097ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80097b0:	e00c      	b.n	80097cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	f003 0302 	and.w	r3, r3, #2
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d007      	beq.n	80097cc <f_open+0x1d4>
 80097bc:	7ebb      	ldrb	r3, [r7, #26]
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <f_open+0x1d4>
						res = FR_DENIED;
 80097c6:	2307      	movs	r3, #7
 80097c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80097cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d128      	bne.n	8009826 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80097d4:	79fb      	ldrb	r3, [r7, #7]
 80097d6:	f003 0308 	and.w	r3, r3, #8
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80097de:	79fb      	ldrb	r3, [r7, #7]
 80097e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80097ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	f023 0301 	bic.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	bf14      	ite	ne
 80097fe:	2301      	movne	r3, #1
 8009800:	2300      	moveq	r3, #0
 8009802:	b2db      	uxtb	r3, r3
 8009804:	461a      	mov	r2, r3
 8009806:	f107 0314 	add.w	r3, r7, #20
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe fa55 	bl	8007cbc <inc_lock>
 8009812:	4602      	mov	r2, r0
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d102      	bne.n	8009826 <f_open+0x22e>
 8009820:	2302      	movs	r3, #2
 8009822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800982a:	2b00      	cmp	r3, #0
 800982c:	f040 80a3 	bne.w	8009976 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009834:	4611      	mov	r1, r2
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff f8fa 	bl	8008a30 <ld_clust>
 800983c:	4602      	mov	r2, r0
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009844:	331c      	adds	r3, #28
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe f8d2 	bl	80079f0 <ld_dword>
 800984c:	4602      	mov	r2, r0
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	88da      	ldrh	r2, [r3, #6]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	79fa      	ldrb	r2, [r7, #7]
 800986a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3330      	adds	r3, #48	; 0x30
 8009882:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009886:	2100      	movs	r1, #0
 8009888:	4618      	mov	r0, r3
 800988a:	f7fe f93c 	bl	8007b06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800988e:	79fb      	ldrb	r3, [r7, #7]
 8009890:	f003 0320 	and.w	r3, r3, #32
 8009894:	2b00      	cmp	r3, #0
 8009896:	d06e      	beq.n	8009976 <f_open+0x37e>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d06a      	beq.n	8009976 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	68da      	ldr	r2, [r3, #12]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	895b      	ldrh	r3, [r3, #10]
 80098ac:	461a      	mov	r2, r3
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	899b      	ldrh	r3, [r3, #12]
 80098b2:	fb02 f303 	mul.w	r3, r2, r3
 80098b6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	657b      	str	r3, [r7, #84]	; 0x54
 80098c4:	e016      	b.n	80098f4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe fbe5 	bl	800809a <get_fat>
 80098d0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80098d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d802      	bhi.n	80098de <f_open+0x2e6>
 80098d8:	2302      	movs	r3, #2
 80098da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80098de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e4:	d102      	bne.n	80098ec <f_open+0x2f4>
 80098e6:	2301      	movs	r3, #1
 80098e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80098ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	657b      	str	r3, [r7, #84]	; 0x54
 80098f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d103      	bne.n	8009904 <f_open+0x30c>
 80098fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009900:	429a      	cmp	r2, r3
 8009902:	d8e0      	bhi.n	80098c6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009908:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800990a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800990e:	2b00      	cmp	r3, #0
 8009910:	d131      	bne.n	8009976 <f_open+0x37e>
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	899b      	ldrh	r3, [r3, #12]
 8009916:	461a      	mov	r2, r3
 8009918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800991a:	fbb3 f1f2 	udiv	r1, r3, r2
 800991e:	fb01 f202 	mul.w	r2, r1, r2
 8009922:	1a9b      	subs	r3, r3, r2
 8009924:	2b00      	cmp	r3, #0
 8009926:	d026      	beq.n	8009976 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe fb95 	bl	800805c <clust2sect>
 8009932:	6478      	str	r0, [r7, #68]	; 0x44
 8009934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009936:	2b00      	cmp	r3, #0
 8009938:	d103      	bne.n	8009942 <f_open+0x34a>
						res = FR_INT_ERR;
 800993a:	2302      	movs	r3, #2
 800993c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009940:	e019      	b.n	8009976 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	899b      	ldrh	r3, [r3, #12]
 8009946:	461a      	mov	r2, r3
 8009948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800994a:	fbb3 f2f2 	udiv	r2, r3, r2
 800994e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009950:	441a      	add	r2, r3
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	7858      	ldrb	r0, [r3, #1]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6a1a      	ldr	r2, [r3, #32]
 8009964:	2301      	movs	r3, #1
 8009966:	f7fd ffcd 	bl	8007904 <disk_read>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <f_open+0x37e>
 8009970:	2301      	movs	r3, #1
 8009972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <f_open+0x38c>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009988:	4618      	mov	r0, r3
 800998a:	3760      	adds	r7, #96	; 0x60
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b08c      	sub	sp, #48	; 0x30
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
 800999c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f107 0210 	add.w	r2, r7, #16
 80099ae:	4611      	mov	r1, r2
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff fda5 	bl	8009500 <validate>
 80099b6:	4603      	mov	r3, r0
 80099b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80099bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d107      	bne.n	80099d4 <f_write+0x44>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	7d5b      	ldrb	r3, [r3, #21]
 80099c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80099cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <f_write+0x4a>
 80099d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099d8:	e16a      	b.n	8009cb0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	7d1b      	ldrb	r3, [r3, #20]
 80099de:	f003 0302 	and.w	r3, r3, #2
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <f_write+0x5a>
 80099e6:	2307      	movs	r3, #7
 80099e8:	e162      	b.n	8009cb0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	699a      	ldr	r2, [r3, #24]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	441a      	add	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	f080 814c 	bcs.w	8009c94 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	43db      	mvns	r3, r3
 8009a02:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009a04:	e146      	b.n	8009c94 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	8992      	ldrh	r2, [r2, #12]
 8009a0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a12:	fb01 f202 	mul.w	r2, r1, r2
 8009a16:	1a9b      	subs	r3, r3, r2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f040 80f1 	bne.w	8009c00 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	8992      	ldrh	r2, [r2, #12]
 8009a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	8952      	ldrh	r2, [r2, #10]
 8009a2e:	3a01      	subs	r2, #1
 8009a30:	4013      	ands	r3, r2
 8009a32:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d143      	bne.n	8009ac2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10c      	bne.n	8009a5c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d11a      	bne.n	8009a84 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2100      	movs	r1, #0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fe fd76 	bl	8008544 <create_chain>
 8009a58:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a5a:	e013      	b.n	8009a84 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d007      	beq.n	8009a74 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7fe fe02 	bl	8008674 <clmt_clust>
 8009a70:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a72:	e007      	b.n	8009a84 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	f7fe fd61 	bl	8008544 <create_chain>
 8009a82:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 8109 	beq.w	8009c9e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d104      	bne.n	8009a9c <f_write+0x10c>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2202      	movs	r2, #2
 8009a96:	755a      	strb	r2, [r3, #21]
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e109      	b.n	8009cb0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa2:	d104      	bne.n	8009aae <f_write+0x11e>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	755a      	strb	r2, [r3, #21]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e100      	b.n	8009cb0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ab2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <f_write+0x132>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ac0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	7d1b      	ldrb	r3, [r3, #20]
 8009ac6:	b25b      	sxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	da18      	bge.n	8009afe <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	7858      	ldrb	r0, [r3, #1]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6a1a      	ldr	r2, [r3, #32]
 8009ada:	2301      	movs	r3, #1
 8009adc:	f7fd ff32 	bl	8007944 <disk_write>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <f_write+0x160>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	755a      	strb	r2, [r3, #21]
 8009aec:	2301      	movs	r3, #1
 8009aee:	e0df      	b.n	8009cb0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	7d1b      	ldrb	r3, [r3, #20]
 8009af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	69db      	ldr	r3, [r3, #28]
 8009b04:	4619      	mov	r1, r3
 8009b06:	4610      	mov	r0, r2
 8009b08:	f7fe faa8 	bl	800805c <clust2sect>
 8009b0c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d104      	bne.n	8009b1e <f_write+0x18e>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2202      	movs	r2, #2
 8009b18:	755a      	strb	r2, [r3, #21]
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	e0c8      	b.n	8009cb0 <f_write+0x320>
			sect += csect;
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	4413      	add	r3, r2
 8009b24:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	899b      	ldrh	r3, [r3, #12]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b32:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d043      	beq.n	8009bc2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b3a:	69ba      	ldr	r2, [r7, #24]
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	4413      	add	r3, r2
 8009b40:	693a      	ldr	r2, [r7, #16]
 8009b42:	8952      	ldrh	r2, [r2, #10]
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d905      	bls.n	8009b54 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	895b      	ldrh	r3, [r3, #10]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	7858      	ldrb	r0, [r3, #1]
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	69f9      	ldr	r1, [r7, #28]
 8009b5e:	f7fd fef1 	bl	8007944 <disk_write>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d004      	beq.n	8009b72 <f_write+0x1e2>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	755a      	strb	r2, [r3, #21]
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e09e      	b.n	8009cb0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6a1a      	ldr	r2, [r3, #32]
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	6a3a      	ldr	r2, [r7, #32]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d918      	bls.n	8009bb2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6a1a      	ldr	r2, [r3, #32]
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	8992      	ldrh	r2, [r2, #12]
 8009b92:	fb02 f303 	mul.w	r3, r2, r3
 8009b96:	69fa      	ldr	r2, [r7, #28]
 8009b98:	18d1      	adds	r1, r2, r3
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	899b      	ldrh	r3, [r3, #12]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f7fd ff90 	bl	8007ac4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	7d1b      	ldrb	r3, [r3, #20]
 8009ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	899b      	ldrh	r3, [r3, #12]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	fb02 f303 	mul.w	r3, r2, r3
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009bc0:	e04b      	b.n	8009c5a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d016      	beq.n	8009bfa <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	699a      	ldr	r2, [r3, #24]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d210      	bcs.n	8009bfa <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	7858      	ldrb	r0, [r3, #1]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009be2:	2301      	movs	r3, #1
 8009be4:	697a      	ldr	r2, [r7, #20]
 8009be6:	f7fd fe8d 	bl	8007904 <disk_read>
 8009bea:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d004      	beq.n	8009bfa <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	755a      	strb	r2, [r3, #21]
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e05a      	b.n	8009cb0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	899b      	ldrh	r3, [r3, #12]
 8009c04:	4618      	mov	r0, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	8992      	ldrh	r2, [r2, #12]
 8009c0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c12:	fb01 f202 	mul.w	r2, r1, r2
 8009c16:	1a9b      	subs	r3, r3, r2
 8009c18:	1ac3      	subs	r3, r0, r3
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d901      	bls.n	8009c28 <f_write+0x298>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	8992      	ldrh	r2, [r2, #12]
 8009c36:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c3a:	fb00 f202 	mul.w	r2, r0, r2
 8009c3e:	1a9b      	subs	r3, r3, r2
 8009c40:	440b      	add	r3, r1
 8009c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c44:	69f9      	ldr	r1, [r7, #28]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fd ff3c 	bl	8007ac4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	7d1b      	ldrb	r3, [r3, #20]
 8009c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009c5a:	69fa      	ldr	r2, [r7, #28]
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	4413      	add	r3, r2
 8009c60:	61fb      	str	r3, [r7, #28]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	699a      	ldr	r2, [r3, #24]
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	441a      	add	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	619a      	str	r2, [r3, #24]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	bf38      	it	cc
 8009c7a:	461a      	movcc	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	60da      	str	r2, [r3, #12]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	441a      	add	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f47f aeb5 	bne.w	8009a06 <f_write+0x76>
 8009c9c:	e000      	b.n	8009ca0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c9e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	7d1b      	ldrb	r3, [r3, #20]
 8009ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca8:	b2da      	uxtb	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3730      	adds	r7, #48	; 0x30
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f107 0208 	add.w	r2, r7, #8
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7ff fc19 	bl	8009500 <validate>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d168      	bne.n	8009daa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	7d1b      	ldrb	r3, [r3, #20]
 8009cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d062      	beq.n	8009daa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	7d1b      	ldrb	r3, [r3, #20]
 8009ce8:	b25b      	sxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	da15      	bge.n	8009d1a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	7858      	ldrb	r0, [r3, #1]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a1a      	ldr	r2, [r3, #32]
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	f7fd fe21 	bl	8007944 <disk_write>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d001      	beq.n	8009d0c <f_sync+0x54>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e04f      	b.n	8009dac <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	7d1b      	ldrb	r3, [r3, #20]
 8009d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009d1a:	f7fd fbf9 	bl	8007510 <get_fattime>
 8009d1e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	4619      	mov	r1, r3
 8009d28:	4610      	mov	r0, r2
 8009d2a:	f7fe f8f9 	bl	8007f20 <move_window>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d138      	bne.n	8009daa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	330b      	adds	r3, #11
 8009d42:	781a      	ldrb	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	330b      	adds	r3, #11
 8009d48:	f042 0220 	orr.w	r2, r2, #32
 8009d4c:	b2d2      	uxtb	r2, r2
 8009d4e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6818      	ldr	r0, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	461a      	mov	r2, r3
 8009d5a:	68f9      	ldr	r1, [r7, #12]
 8009d5c:	f7fe fe87 	bl	8008a6e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f103 021c 	add.w	r2, r3, #28
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	f7fd fe7d 	bl	8007a6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3316      	adds	r3, #22
 8009d76:	6939      	ldr	r1, [r7, #16]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fd fe77 	bl	8007a6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	3312      	adds	r3, #18
 8009d82:	2100      	movs	r1, #0
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fd fe56 	bl	8007a36 <st_word>
					fs->wflag = 1;
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fe f8f2 	bl	8007f7c <sync_fs>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	7d1b      	ldrb	r3, [r3, #20]
 8009da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7ff ff7b 	bl	8009cb8 <f_sync>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d118      	bne.n	8009dfe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f107 0208 	add.w	r2, r7, #8
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7ff fb93 	bl	8009500 <validate>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10c      	bne.n	8009dfe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fd fff5 	bl	8007dd8 <dec_lock>
 8009dee:	4603      	mov	r3, r0
 8009df0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d102      	bne.n	8009dfe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b090      	sub	sp, #64	; 0x40
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f107 0208 	add.w	r2, r7, #8
 8009e18:	4611      	mov	r1, r2
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7ff fb70 	bl	8009500 <validate>
 8009e20:	4603      	mov	r3, r0
 8009e22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009e26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d103      	bne.n	8009e36 <f_lseek+0x2e>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	7d5b      	ldrb	r3, [r3, #21]
 8009e32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009e36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d002      	beq.n	8009e44 <f_lseek+0x3c>
 8009e3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e42:	e201      	b.n	800a248 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 80d9 	beq.w	800a000 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e54:	d15a      	bne.n	8009f0c <f_lseek+0x104>
			tbl = fp->cltbl;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	1d1a      	adds	r2, r3, #4
 8009e60:	627a      	str	r2, [r7, #36]	; 0x24
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	617b      	str	r3, [r7, #20]
 8009e66:	2302      	movs	r3, #2
 8009e68:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d03a      	beq.n	8009eec <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	613b      	str	r3, [r7, #16]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	3302      	adds	r3, #2
 8009e82:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe f901 	bl	800809a <get_fat>
 8009e98:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d804      	bhi.n	8009eaa <f_lseek+0xa2>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	755a      	strb	r2, [r3, #21]
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	e1ce      	b.n	800a248 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb0:	d104      	bne.n	8009ebc <f_lseek+0xb4>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	755a      	strb	r2, [r3, #21]
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e1c5      	b.n	800a248 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d0de      	beq.n	8009e84 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d809      	bhi.n	8009ee2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	1d1a      	adds	r2, r3, #4
 8009ed2:	627a      	str	r2, [r7, #36]	; 0x24
 8009ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	1d1a      	adds	r2, r3, #4
 8009edc:	627a      	str	r2, [r7, #36]	; 0x24
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d3c4      	bcc.n	8009e76 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ef2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d803      	bhi.n	8009f04 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	e19f      	b.n	800a244 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009f04:	2311      	movs	r3, #17
 8009f06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009f0a:	e19b      	b.n	800a244 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d902      	bls.n	8009f1c <f_lseek+0x114>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 818d 	beq.w	800a244 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f7fe fb9f 	bl	8008674 <clmt_clust>
 8009f36:	4602      	mov	r2, r0
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	69db      	ldr	r3, [r3, #28]
 8009f42:	4619      	mov	r1, r3
 8009f44:	4610      	mov	r0, r2
 8009f46:	f7fe f889 	bl	800805c <clust2sect>
 8009f4a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d104      	bne.n	8009f5c <f_lseek+0x154>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2202      	movs	r2, #2
 8009f56:	755a      	strb	r2, [r3, #21]
 8009f58:	2302      	movs	r3, #2
 8009f5a:	e175      	b.n	800a248 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	8992      	ldrh	r2, [r2, #12]
 8009f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	8952      	ldrh	r2, [r2, #10]
 8009f6c:	3a01      	subs	r2, #1
 8009f6e:	4013      	ands	r3, r2
 8009f70:	69ba      	ldr	r2, [r7, #24]
 8009f72:	4413      	add	r3, r2
 8009f74:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	8992      	ldrh	r2, [r2, #12]
 8009f7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f82:	fb01 f202 	mul.w	r2, r1, r2
 8009f86:	1a9b      	subs	r3, r3, r2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 815b 	beq.w	800a244 <f_lseek+0x43c>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a1b      	ldr	r3, [r3, #32]
 8009f92:	69ba      	ldr	r2, [r7, #24]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	f000 8155 	beq.w	800a244 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	7d1b      	ldrb	r3, [r3, #20]
 8009f9e:	b25b      	sxtb	r3, r3
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	da18      	bge.n	8009fd6 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	7858      	ldrb	r0, [r3, #1]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1a      	ldr	r2, [r3, #32]
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	f7fd fcc6 	bl	8007944 <disk_write>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d004      	beq.n	8009fc8 <f_lseek+0x1c0>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	755a      	strb	r2, [r3, #21]
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e13f      	b.n	800a248 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	7d1b      	ldrb	r3, [r3, #20]
 8009fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	7858      	ldrb	r0, [r3, #1]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	69ba      	ldr	r2, [r7, #24]
 8009fe4:	f7fd fc8e 	bl	8007904 <disk_read>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d004      	beq.n	8009ff8 <f_lseek+0x1f0>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	755a      	strb	r2, [r3, #21]
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e127      	b.n	800a248 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	69ba      	ldr	r2, [r7, #24]
 8009ffc:	621a      	str	r2, [r3, #32]
 8009ffe:	e121      	b.n	800a244 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d908      	bls.n	800a01c <f_lseek+0x214>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	7d1b      	ldrb	r3, [r3, #20]
 800a00e:	f003 0302 	and.w	r3, r3, #2
 800a012:	2b00      	cmp	r3, #0
 800a014:	d102      	bne.n	800a01c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	637b      	str	r3, [r7, #52]	; 0x34
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a02a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 80b5 	beq.w	800a19e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	895b      	ldrh	r3, [r3, #10]
 800a038:	461a      	mov	r2, r3
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	899b      	ldrh	r3, [r3, #12]
 800a03e:	fb02 f303 	mul.w	r3, r2, r3
 800a042:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d01b      	beq.n	800a082 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	1e5a      	subs	r2, r3, #1
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	fbb2 f2f3 	udiv	r2, r2, r3
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	1e59      	subs	r1, r3, #1
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a05e:	429a      	cmp	r2, r3
 800a060:	d30f      	bcc.n	800a082 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a062:	6a3b      	ldr	r3, [r7, #32]
 800a064:	1e5a      	subs	r2, r3, #1
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	425b      	negs	r3, r3
 800a06a:	401a      	ands	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a080:	e022      	b.n	800a0c8 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d119      	bne.n	800a0c2 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2100      	movs	r1, #0
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe fa56 	bl	8008544 <create_chain>
 800a098:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d104      	bne.n	800a0aa <f_lseek+0x2a2>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	755a      	strb	r2, [r3, #21]
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	e0ce      	b.n	800a248 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b0:	d104      	bne.n	800a0bc <f_lseek+0x2b4>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	755a      	strb	r2, [r3, #21]
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e0c5      	b.n	800a248 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0c0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0c6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d067      	beq.n	800a19e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a0ce:	e03a      	b.n	800a146 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	699a      	ldr	r2, [r3, #24]
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	441a      	add	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7d1b      	ldrb	r3, [r3, #20]
 800a0e8:	f003 0302 	and.w	r3, r3, #2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00b      	beq.n	800a108 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe fa25 	bl	8008544 <create_chain>
 800a0fa:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d108      	bne.n	800a114 <f_lseek+0x30c>
							ofs = 0; break;
 800a102:	2300      	movs	r3, #0
 800a104:	603b      	str	r3, [r7, #0]
 800a106:	e022      	b.n	800a14e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fd ffc4 	bl	800809a <get_fat>
 800a112:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11a:	d104      	bne.n	800a126 <f_lseek+0x31e>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	755a      	strb	r2, [r3, #21]
 800a122:	2301      	movs	r3, #1
 800a124:	e090      	b.n	800a248 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d904      	bls.n	800a136 <f_lseek+0x32e>
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a132:	429a      	cmp	r2, r3
 800a134:	d304      	bcc.n	800a140 <f_lseek+0x338>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2202      	movs	r2, #2
 800a13a:	755a      	strb	r2, [r3, #21]
 800a13c:	2302      	movs	r3, #2
 800a13e:	e083      	b.n	800a248 <f_lseek+0x440>
					fp->clust = clst;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a144:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d8c0      	bhi.n	800a0d0 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	699a      	ldr	r2, [r3, #24]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	441a      	add	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	899b      	ldrh	r3, [r3, #12]
 800a15e:	461a      	mov	r2, r3
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	fbb3 f1f2 	udiv	r1, r3, r2
 800a166:	fb01 f202 	mul.w	r2, r1, r2
 800a16a:	1a9b      	subs	r3, r3, r2
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d016      	beq.n	800a19e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a174:	4618      	mov	r0, r3
 800a176:	f7fd ff71 	bl	800805c <clust2sect>
 800a17a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d104      	bne.n	800a18c <f_lseek+0x384>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2202      	movs	r2, #2
 800a186:	755a      	strb	r2, [r3, #21]
 800a188:	2302      	movs	r3, #2
 800a18a:	e05d      	b.n	800a248 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	899b      	ldrh	r3, [r3, #12]
 800a190:	461a      	mov	r2, r3
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	fbb3 f3f2 	udiv	r3, r3, r2
 800a198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a19a:	4413      	add	r3, r2
 800a19c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	699a      	ldr	r2, [r3, #24]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d90a      	bls.n	800a1c0 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	699a      	ldr	r2, [r3, #24]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	7d1b      	ldrb	r3, [r3, #20]
 800a1b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	8992      	ldrh	r2, [r2, #12]
 800a1c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1cc:	fb01 f202 	mul.w	r2, r1, r2
 800a1d0:	1a9b      	subs	r3, r3, r2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d036      	beq.n	800a244 <f_lseek+0x43c>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d031      	beq.n	800a244 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7d1b      	ldrb	r3, [r3, #20]
 800a1e4:	b25b      	sxtb	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	da18      	bge.n	800a21c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	7858      	ldrb	r0, [r3, #1]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a1a      	ldr	r2, [r3, #32]
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f7fd fba3 	bl	8007944 <disk_write>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d004      	beq.n	800a20e <f_lseek+0x406>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	755a      	strb	r2, [r3, #21]
 800a20a:	2301      	movs	r3, #1
 800a20c:	e01c      	b.n	800a248 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	7d1b      	ldrb	r3, [r3, #20]
 800a212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a216:	b2da      	uxtb	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	7858      	ldrb	r0, [r3, #1]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a226:	2301      	movs	r3, #1
 800a228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a22a:	f7fd fb6b 	bl	8007904 <disk_read>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d004      	beq.n	800a23e <f_lseek+0x436>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	755a      	strb	r2, [r3, #21]
 800a23a:	2301      	movs	r3, #1
 800a23c:	e004      	b.n	800a248 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a242:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a244:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3740      	adds	r7, #64	; 0x40
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b090      	sub	sp, #64	; 0x40
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800a25a:	f107 010c 	add.w	r1, r7, #12
 800a25e:	1d3b      	adds	r3, r7, #4
 800a260:	2200      	movs	r2, #0
 800a262:	4618      	mov	r0, r3
 800a264:	f7fe fecc 	bl	8009000 <find_volume>
 800a268:	4603      	mov	r3, r0
 800a26a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800a26e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a272:	2b00      	cmp	r3, #0
 800a274:	d11f      	bne.n	800a2b6 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	f107 030c 	add.w	r3, r7, #12
 800a27c:	4611      	mov	r1, r2
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fe fdae 	bl	8008de0 <follow_path>
 800a284:	4603      	mov	r3, r0
 800a286:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800a28a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d111      	bne.n	800a2b6 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800a292:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a296:	b25b      	sxtb	r3, r3
 800a298:	2b00      	cmp	r3, #0
 800a29a:	da03      	bge.n	800a2a4 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800a29c:	2306      	movs	r3, #6
 800a29e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a2a2:	e008      	b.n	800a2b6 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d005      	beq.n	800a2b6 <f_stat+0x66>
 800a2aa:	f107 030c 	add.w	r3, r7, #12
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fe fca1 	bl	8008bf8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800a2b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3740      	adds	r7, #64	; 0x40
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800a2c2:	b590      	push	{r4, r7, lr}
 800a2c4:	b0a5      	sub	sp, #148	; 0x94
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800a2cc:	463b      	mov	r3, r7
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe fdfc 	bl	8008ecc <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800a2d4:	f107 0120 	add.w	r1, r7, #32
 800a2d8:	1d3b      	adds	r3, r7, #4
 800a2da:	2202      	movs	r2, #2
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7fe fe8f 	bl	8009000 <find_volume>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 800a2e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f040 80db 	bne.w	800a4a8 <f_rename+0x1e6>
		djo.obj.fs = fs;
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	657b      	str	r3, [r7, #84]	; 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe fd6e 	bl	8008de0 <follow_path>
 800a304:	4603      	mov	r3, r0
 800a306:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800a30a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d108      	bne.n	800a324 <f_rename+0x62>
 800a312:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a316:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d002      	beq.n	800a324 <f_rename+0x62>
 800a31e:	2306      	movs	r3, #6
 800a320:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800a324:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d108      	bne.n	800a33e <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800a32c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a330:	2102      	movs	r1, #2
 800a332:	4618      	mov	r0, r3
 800a334:	f7fd fc44 	bl	8007bc0 <chk_lock>
 800a338:	4603      	mov	r3, r0
 800a33a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800a33e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a342:	2b00      	cmp	r3, #0
 800a344:	f040 80b0 	bne.w	800a4a8 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800a348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a34a:	f103 010b 	add.w	r1, r3, #11
 800a34e:	f107 0308 	add.w	r3, r7, #8
 800a352:	2215      	movs	r2, #21
 800a354:	4618      	mov	r0, r3
 800a356:	f7fd fbb5 	bl	8007ac4 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800a35a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800a35e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a362:	2230      	movs	r2, #48	; 0x30
 800a364:	4618      	mov	r0, r3
 800a366:	f7fd fbad 	bl	8007ac4 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a370:	4611      	mov	r1, r2
 800a372:	4618      	mov	r0, r3
 800a374:	f7fe fd34 	bl	8008de0 <follow_path>
 800a378:	4603      	mov	r3, r0
 800a37a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800a37e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10c      	bne.n	800a3a0 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800a386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d105      	bne.n	800a39a <f_rename+0xd8>
 800a38e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a392:	429a      	cmp	r2, r3
 800a394:	d101      	bne.n	800a39a <f_rename+0xd8>
 800a396:	2304      	movs	r3, #4
 800a398:	e000      	b.n	800a39c <f_rename+0xda>
 800a39a:	2308      	movs	r3, #8
 800a39c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800a3a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a3a4:	2b04      	cmp	r3, #4
 800a3a6:	d168      	bne.n	800a47a <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800a3a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fe fbd3 	bl	8008b58 <dir_register>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK) {
 800a3b8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d15c      	bne.n	800a47a <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800a3c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800a3c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3ca:	f103 000d 	add.w	r0, r3, #13
 800a3ce:	f107 0308 	add.w	r3, r7, #8
 800a3d2:	3302      	adds	r3, #2
 800a3d4:	2213      	movs	r2, #19
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	f7fd fb74 	bl	8007ac4 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800a3dc:	7a3a      	ldrb	r2, [r7, #8]
 800a3de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3e2:	330b      	adds	r3, #11
 800a3e4:	f042 0220 	orr.w	r2, r2, #32
 800a3e8:	b2d2      	uxtb	r2, r2
 800a3ea:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800a3f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3f6:	330b      	adds	r3, #11
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	f003 0310 	and.w	r3, r3, #16
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d03b      	beq.n	800a47a <f_rename+0x1b8>
 800a402:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a406:	429a      	cmp	r2, r3
 800a408:	d037      	beq.n	800a47a <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800a40a:	6a3c      	ldr	r4, [r7, #32]
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe fb0c 	bl	8008a30 <ld_clust>
 800a418:	4603      	mov	r3, r0
 800a41a:	4619      	mov	r1, r3
 800a41c:	4620      	mov	r0, r4
 800a41e:	f7fd fe1d 	bl	800805c <clust2sect>
 800a422:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							if (!dw) {
 800a426:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d103      	bne.n	800a436 <f_rename+0x174>
								res = FR_INT_ERR;
 800a42e:	2302      	movs	r3, #2
 800a430:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800a434:	e021      	b.n	800a47a <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fd fd6f 	bl	8007f20 <move_window>
 800a442:	4603      	mov	r3, r0
 800a444:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800a448:	6a3b      	ldr	r3, [r7, #32]
 800a44a:	3334      	adds	r3, #52	; 0x34
 800a44c:	3320      	adds	r3, #32
 800a44e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
								if (res == FR_OK && dir[1] == '.') {
 800a452:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10f      	bne.n	800a47a <f_rename+0x1b8>
 800a45a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a45e:	3301      	adds	r3, #1
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	2b2e      	cmp	r3, #46	; 0x2e
 800a464:	d109      	bne.n	800a47a <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a46a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe fafd 	bl	8008a6e <st_clust>
									fs->wflag = 1;
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	2201      	movs	r2, #1
 800a478:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800a47a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d112      	bne.n	800a4a8 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800a482:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fb98 	bl	8008bbc <dir_remove>
 800a48c:	4603      	mov	r3, r0
 800a48e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				if (res == FR_OK) {
 800a492:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <f_rename+0x1e6>
					res = sync_fs(fs);
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fd fd6d 	bl	8007f7c <sync_fs>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a4a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3794      	adds	r7, #148	; 0x94
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd90      	pop	{r4, r7, pc}

0800a4b4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	2b0a      	cmp	r3, #10
 800a4c4:	d103      	bne.n	800a4ce <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a4c6:	210d      	movs	r1, #13
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff fff3 	bl	800a4b4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	db25      	blt.n	800a526 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	1c5a      	adds	r2, r3, #1
 800a4de:	60fa      	str	r2, [r7, #12]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	78fa      	ldrb	r2, [r7, #3]
 800a4e6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b3c      	cmp	r3, #60	; 0x3c
 800a4ec:	dd12      	ble.n	800a514 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f103 010c 	add.w	r1, r3, #12
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	f107 0308 	add.w	r3, r7, #8
 800a4fe:	f7ff fa47 	bl	8009990 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	429a      	cmp	r2, r3
 800a508:	d101      	bne.n	800a50e <putc_bfd+0x5a>
 800a50a:	2300      	movs	r3, #0
 800a50c:	e001      	b.n	800a512 <putc_bfd+0x5e>
 800a50e:	f04f 33ff 	mov.w	r3, #4294967295
 800a512:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	1c5a      	adds	r2, r3, #1
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	609a      	str	r2, [r3, #8]
 800a524:	e000      	b.n	800a528 <putc_bfd+0x74>
	if (i < 0) return;
 800a526:	bf00      	nop
}
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	db16      	blt.n	800a56c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6818      	ldr	r0, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f103 010c 	add.w	r1, r3, #12
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	461a      	mov	r2, r3
 800a54e:	f107 030c 	add.w	r3, r7, #12
 800a552:	f7ff fa1d 	bl	8009990 <f_write>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d107      	bne.n	800a56c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4293      	cmp	r3, r2
 800a564:	d102      	bne.n	800a56c <putc_flush+0x3e>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	e001      	b.n	800a570 <putc_flush+0x42>
	return EOF;
 800a56c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	605a      	str	r2, [r3, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	685a      	ldr	r2, [r3, #4]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	609a      	str	r2, [r3, #8]
}
 800a596:	bf00      	nop
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
	...

0800a5a4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a5a4:	b40e      	push	{r1, r2, r3}
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b0a7      	sub	sp, #156	; 0x9c
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a5ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7ff ffdf 	bl	800a578 <putc_init>

	va_start(arp, fmt);
 800a5ba:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a5be:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800a5c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a5c4:	1c5a      	adds	r2, r3, #1
 800a5c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800a5d0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 81f2 	beq.w	800a9be <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800a5da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a5de:	2b25      	cmp	r3, #37	; 0x25
 800a5e0:	d008      	beq.n	800a5f4 <f_printf+0x50>
			putc_bfd(&pb, c);
 800a5e2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a5e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7ff ff61 	bl	800a4b4 <putc_bfd>
			continue;
 800a5f2:	e1e3      	b.n	800a9bc <f_printf+0x418>
		}
		w = f = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800a600:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800a610:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a614:	2b30      	cmp	r3, #48	; 0x30
 800a616:	d10b      	bne.n	800a630 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800a618:	2301      	movs	r3, #1
 800a61a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a61e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a622:	1c5a      	adds	r2, r3, #1
 800a624:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800a62e:	e024      	b.n	800a67a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a630:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a634:	2b2d      	cmp	r3, #45	; 0x2d
 800a636:	d120      	bne.n	800a67a <f_printf+0xd6>
				f = 2; c = *fmt++;
 800a638:	2302      	movs	r3, #2
 800a63a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a63e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a642:	1c5a      	adds	r2, r3, #1
 800a644:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800a64e:	e014      	b.n	800a67a <f_printf+0xd6>
			w = w * 10 + c - '0';
 800a650:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a654:	4613      	mov	r3, r2
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	005b      	lsls	r3, r3, #1
 800a65c:	461a      	mov	r2, r3
 800a65e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a662:	4413      	add	r3, r2
 800a664:	3b30      	subs	r3, #48	; 0x30
 800a666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800a66a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a66e:	1c5a      	adds	r2, r3, #1
 800a670:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800a67a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a67e:	2b2f      	cmp	r3, #47	; 0x2f
 800a680:	d903      	bls.n	800a68a <f_printf+0xe6>
 800a682:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a686:	2b39      	cmp	r3, #57	; 0x39
 800a688:	d9e2      	bls.n	800a650 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a68a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a68e:	2b6c      	cmp	r3, #108	; 0x6c
 800a690:	d003      	beq.n	800a69a <f_printf+0xf6>
 800a692:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a696:	2b4c      	cmp	r3, #76	; 0x4c
 800a698:	d10d      	bne.n	800a6b6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800a69a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a69e:	f043 0304 	orr.w	r3, r3, #4
 800a6a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a6a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6aa:	1c5a      	adds	r2, r3, #1
 800a6ac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800a6b6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 8181 	beq.w	800a9c2 <f_printf+0x41e>
		d = c;
 800a6c0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a6c4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800a6c8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a6cc:	2b60      	cmp	r3, #96	; 0x60
 800a6ce:	d908      	bls.n	800a6e2 <f_printf+0x13e>
 800a6d0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a6d4:	2b7a      	cmp	r3, #122	; 0x7a
 800a6d6:	d804      	bhi.n	800a6e2 <f_printf+0x13e>
 800a6d8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a6dc:	3b20      	subs	r3, #32
 800a6de:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800a6e2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a6e6:	3b42      	subs	r3, #66	; 0x42
 800a6e8:	2b16      	cmp	r3, #22
 800a6ea:	f200 8098 	bhi.w	800a81e <f_printf+0x27a>
 800a6ee:	a201      	add	r2, pc, #4	; (adr r2, 800a6f4 <f_printf+0x150>)
 800a6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f4:	0800a7ff 	.word	0x0800a7ff
 800a6f8:	0800a7e7 	.word	0x0800a7e7
 800a6fc:	0800a80f 	.word	0x0800a80f
 800a700:	0800a81f 	.word	0x0800a81f
 800a704:	0800a81f 	.word	0x0800a81f
 800a708:	0800a81f 	.word	0x0800a81f
 800a70c:	0800a81f 	.word	0x0800a81f
 800a710:	0800a81f 	.word	0x0800a81f
 800a714:	0800a81f 	.word	0x0800a81f
 800a718:	0800a81f 	.word	0x0800a81f
 800a71c:	0800a81f 	.word	0x0800a81f
 800a720:	0800a81f 	.word	0x0800a81f
 800a724:	0800a81f 	.word	0x0800a81f
 800a728:	0800a807 	.word	0x0800a807
 800a72c:	0800a81f 	.word	0x0800a81f
 800a730:	0800a81f 	.word	0x0800a81f
 800a734:	0800a81f 	.word	0x0800a81f
 800a738:	0800a751 	.word	0x0800a751
 800a73c:	0800a81f 	.word	0x0800a81f
 800a740:	0800a80f 	.word	0x0800a80f
 800a744:	0800a81f 	.word	0x0800a81f
 800a748:	0800a81f 	.word	0x0800a81f
 800a74c:	0800a817 	.word	0x0800a817
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800a750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a752:	1d1a      	adds	r2, r3, #4
 800a754:	67ba      	str	r2, [r7, #120]	; 0x78
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800a75a:	2300      	movs	r3, #0
 800a75c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a760:	e004      	b.n	800a76c <f_printf+0x1c8>
 800a762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a766:	3301      	adds	r3, #1
 800a768:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a76c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a76e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a772:	4413      	add	r3, r2
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1f3      	bne.n	800a762 <f_printf+0x1be>
			if (!(f & 2)) {
 800a77a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b00      	cmp	r3, #0
 800a784:	d11a      	bne.n	800a7bc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800a786:	e005      	b.n	800a794 <f_printf+0x1f0>
 800a788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a78c:	2120      	movs	r1, #32
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff fe90 	bl	800a4b4 <putc_bfd>
 800a794:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a798:	1c5a      	adds	r2, r3, #1
 800a79a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a79e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d8f0      	bhi.n	800a788 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800a7a6:	e009      	b.n	800a7bc <f_printf+0x218>
 800a7a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a7aa:	1c5a      	adds	r2, r3, #1
 800a7ac:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a7ae:	781a      	ldrb	r2, [r3, #0]
 800a7b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff fe7c 	bl	800a4b4 <putc_bfd>
 800a7bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1f1      	bne.n	800a7a8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800a7c4:	e005      	b.n	800a7d2 <f_printf+0x22e>
 800a7c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a7ca:	2120      	movs	r1, #32
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7ff fe71 	bl	800a4b4 <putc_bfd>
 800a7d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a7dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d8f0      	bhi.n	800a7c6 <f_printf+0x222>
			continue;
 800a7e4:	e0ea      	b.n	800a9bc <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800a7e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7e8:	1d1a      	adds	r2, r3, #4
 800a7ea:	67ba      	str	r2, [r7, #120]	; 0x78
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7ff fe5c 	bl	800a4b4 <putc_bfd>
 800a7fc:	e0de      	b.n	800a9bc <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800a7fe:	2302      	movs	r3, #2
 800a800:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a804:	e014      	b.n	800a830 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800a806:	2308      	movs	r3, #8
 800a808:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a80c:	e010      	b.n	800a830 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800a80e:	230a      	movs	r3, #10
 800a810:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a814:	e00c      	b.n	800a830 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800a816:	2310      	movs	r3, #16
 800a818:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a81c:	e008      	b.n	800a830 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800a81e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a826:	4611      	mov	r1, r2
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fe43 	bl	800a4b4 <putc_bfd>
 800a82e:	e0c5      	b.n	800a9bc <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a830:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a834:	f003 0304 	and.w	r3, r3, #4
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d004      	beq.n	800a846 <f_printf+0x2a2>
 800a83c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a83e:	1d1a      	adds	r2, r3, #4
 800a840:	67ba      	str	r2, [r7, #120]	; 0x78
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	e00c      	b.n	800a860 <f_printf+0x2bc>
 800a846:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a84a:	2b44      	cmp	r3, #68	; 0x44
 800a84c:	d104      	bne.n	800a858 <f_printf+0x2b4>
 800a84e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a850:	1d1a      	adds	r2, r3, #4
 800a852:	67ba      	str	r2, [r7, #120]	; 0x78
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	e003      	b.n	800a860 <f_printf+0x2bc>
 800a858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a85a:	1d1a      	adds	r2, r3, #4
 800a85c:	67ba      	str	r2, [r7, #120]	; 0x78
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800a864:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a868:	2b44      	cmp	r3, #68	; 0x44
 800a86a:	d10e      	bne.n	800a88a <f_printf+0x2e6>
 800a86c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a870:	2b00      	cmp	r3, #0
 800a872:	da0a      	bge.n	800a88a <f_printf+0x2e6>
			v = 0 - v;
 800a874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a878:	425b      	negs	r3, r3
 800a87a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800a87e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a882:	f043 0308 	orr.w	r3, r3, #8
 800a886:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800a890:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800a894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a898:	fbb3 f1f2 	udiv	r1, r3, r2
 800a89c:	fb01 f202 	mul.w	r2, r1, r2
 800a8a0:	1a9b      	subs	r3, r3, r2
 800a8a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800a8a6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800a8aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a8ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a8b6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a8ba:	2b09      	cmp	r3, #9
 800a8bc:	d90b      	bls.n	800a8d6 <f_printf+0x332>
 800a8be:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a8c2:	2b78      	cmp	r3, #120	; 0x78
 800a8c4:	d101      	bne.n	800a8ca <f_printf+0x326>
 800a8c6:	2227      	movs	r2, #39	; 0x27
 800a8c8:	e000      	b.n	800a8cc <f_printf+0x328>
 800a8ca:	2207      	movs	r2, #7
 800a8cc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a8d0:	4413      	add	r3, r2
 800a8d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800a8d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a8e0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a8e4:	3230      	adds	r2, #48	; 0x30
 800a8e6:	b2d2      	uxtb	r2, r2
 800a8e8:	3398      	adds	r3, #152	; 0x98
 800a8ea:	443b      	add	r3, r7
 800a8ec:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800a8f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d003      	beq.n	800a900 <f_printf+0x35c>
 800a8f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a8fc:	2b1f      	cmp	r3, #31
 800a8fe:	d9c7      	bls.n	800a890 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800a900:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a904:	f003 0308 	and.w	r3, r3, #8
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d009      	beq.n	800a920 <f_printf+0x37c>
 800a90c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a910:	1c5a      	adds	r2, r3, #1
 800a912:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a916:	3398      	adds	r3, #152	; 0x98
 800a918:	443b      	add	r3, r7
 800a91a:	222d      	movs	r2, #45	; 0x2d
 800a91c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800a920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a924:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a928:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <f_printf+0x394>
 800a934:	2330      	movs	r3, #48	; 0x30
 800a936:	e000      	b.n	800a93a <f_printf+0x396>
 800a938:	2320      	movs	r3, #32
 800a93a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a93e:	e007      	b.n	800a950 <f_printf+0x3ac>
 800a940:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a948:	4611      	mov	r1, r2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7ff fdb2 	bl	800a4b4 <putc_bfd>
 800a950:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a954:	f003 0302 	and.w	r3, r3, #2
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d108      	bne.n	800a96e <f_printf+0x3ca>
 800a95c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a966:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d8e8      	bhi.n	800a940 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800a96e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a972:	3b01      	subs	r3, #1
 800a974:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a978:	f107 020c 	add.w	r2, r7, #12
 800a97c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a980:	4413      	add	r3, r2
 800a982:	781a      	ldrb	r2, [r3, #0]
 800a984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a988:	4611      	mov	r1, r2
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7ff fd92 	bl	800a4b4 <putc_bfd>
		} while (i);
 800a990:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1ea      	bne.n	800a96e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800a998:	e007      	b.n	800a9aa <f_printf+0x406>
 800a99a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a99e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7ff fd85 	bl	800a4b4 <putc_bfd>
 800a9aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a9b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d8ee      	bhi.n	800a99a <f_printf+0x3f6>
		c = *fmt++;
 800a9bc:	e600      	b.n	800a5c0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800a9be:	bf00      	nop
 800a9c0:	e000      	b.n	800a9c4 <f_printf+0x420>
		if (!c) break;
 800a9c2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800a9c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7ff fdb0 	bl	800a52e <putc_flush>
 800a9ce:	4603      	mov	r3, r0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	379c      	adds	r7, #156	; 0x9c
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9da:	b003      	add	sp, #12
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop

0800a9e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a9f6:	4b1f      	ldr	r3, [pc, #124]	; (800aa74 <FATFS_LinkDriverEx+0x94>)
 800a9f8:	7a5b      	ldrb	r3, [r3, #9]
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d131      	bne.n	800aa64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aa00:	4b1c      	ldr	r3, [pc, #112]	; (800aa74 <FATFS_LinkDriverEx+0x94>)
 800aa02:	7a5b      	ldrb	r3, [r3, #9]
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	461a      	mov	r2, r3
 800aa08:	4b1a      	ldr	r3, [pc, #104]	; (800aa74 <FATFS_LinkDriverEx+0x94>)
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aa0e:	4b19      	ldr	r3, [pc, #100]	; (800aa74 <FATFS_LinkDriverEx+0x94>)
 800aa10:	7a5b      	ldrb	r3, [r3, #9]
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	4a17      	ldr	r2, [pc, #92]	; (800aa74 <FATFS_LinkDriverEx+0x94>)
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aa1e:	4b15      	ldr	r3, [pc, #84]	; (800aa74 <FATFS_LinkDriverEx+0x94>)
 800aa20:	7a5b      	ldrb	r3, [r3, #9]
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	461a      	mov	r2, r3
 800aa26:	4b13      	ldr	r3, [pc, #76]	; (800aa74 <FATFS_LinkDriverEx+0x94>)
 800aa28:	4413      	add	r3, r2
 800aa2a:	79fa      	ldrb	r2, [r7, #7]
 800aa2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aa2e:	4b11      	ldr	r3, [pc, #68]	; (800aa74 <FATFS_LinkDriverEx+0x94>)
 800aa30:	7a5b      	ldrb	r3, [r3, #9]
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	b2d1      	uxtb	r1, r2
 800aa38:	4a0e      	ldr	r2, [pc, #56]	; (800aa74 <FATFS_LinkDriverEx+0x94>)
 800aa3a:	7251      	strb	r1, [r2, #9]
 800aa3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aa3e:	7dbb      	ldrb	r3, [r7, #22]
 800aa40:	3330      	adds	r3, #48	; 0x30
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	223a      	movs	r2, #58	; 0x3a
 800aa4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	3302      	adds	r3, #2
 800aa54:	222f      	movs	r2, #47	; 0x2f
 800aa56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	3303      	adds	r3, #3
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aa60:	2300      	movs	r3, #0
 800aa62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	371c      	adds	r7, #28
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	2000311c 	.word	0x2000311c

0800aa78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aa82:	2200      	movs	r2, #0
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff ffaa 	bl	800a9e0 <FATFS_LinkDriverEx>
 800aa8c:	4603      	mov	r3, r0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <__errno>:
 800aa98:	4b01      	ldr	r3, [pc, #4]	; (800aaa0 <__errno+0x8>)
 800aa9a:	6818      	ldr	r0, [r3, #0]
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	2000000c 	.word	0x2000000c

0800aaa4 <__libc_init_array>:
 800aaa4:	b570      	push	{r4, r5, r6, lr}
 800aaa6:	4d0d      	ldr	r5, [pc, #52]	; (800aadc <__libc_init_array+0x38>)
 800aaa8:	4c0d      	ldr	r4, [pc, #52]	; (800aae0 <__libc_init_array+0x3c>)
 800aaaa:	1b64      	subs	r4, r4, r5
 800aaac:	10a4      	asrs	r4, r4, #2
 800aaae:	2600      	movs	r6, #0
 800aab0:	42a6      	cmp	r6, r4
 800aab2:	d109      	bne.n	800aac8 <__libc_init_array+0x24>
 800aab4:	4d0b      	ldr	r5, [pc, #44]	; (800aae4 <__libc_init_array+0x40>)
 800aab6:	4c0c      	ldr	r4, [pc, #48]	; (800aae8 <__libc_init_array+0x44>)
 800aab8:	f002 ffa6 	bl	800da08 <_init>
 800aabc:	1b64      	subs	r4, r4, r5
 800aabe:	10a4      	asrs	r4, r4, #2
 800aac0:	2600      	movs	r6, #0
 800aac2:	42a6      	cmp	r6, r4
 800aac4:	d105      	bne.n	800aad2 <__libc_init_array+0x2e>
 800aac6:	bd70      	pop	{r4, r5, r6, pc}
 800aac8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aacc:	4798      	blx	r3
 800aace:	3601      	adds	r6, #1
 800aad0:	e7ee      	b.n	800aab0 <__libc_init_array+0xc>
 800aad2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad6:	4798      	blx	r3
 800aad8:	3601      	adds	r6, #1
 800aada:	e7f2      	b.n	800aac2 <__libc_init_array+0x1e>
 800aadc:	0800e14c 	.word	0x0800e14c
 800aae0:	0800e14c 	.word	0x0800e14c
 800aae4:	0800e14c 	.word	0x0800e14c
 800aae8:	0800e150 	.word	0x0800e150

0800aaec <memset>:
 800aaec:	4402      	add	r2, r0
 800aaee:	4603      	mov	r3, r0
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d100      	bne.n	800aaf6 <memset+0xa>
 800aaf4:	4770      	bx	lr
 800aaf6:	f803 1b01 	strb.w	r1, [r3], #1
 800aafa:	e7f9      	b.n	800aaf0 <memset+0x4>

0800aafc <__cvt>:
 800aafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab00:	ec55 4b10 	vmov	r4, r5, d0
 800ab04:	2d00      	cmp	r5, #0
 800ab06:	460e      	mov	r6, r1
 800ab08:	4619      	mov	r1, r3
 800ab0a:	462b      	mov	r3, r5
 800ab0c:	bfbb      	ittet	lt
 800ab0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab12:	461d      	movlt	r5, r3
 800ab14:	2300      	movge	r3, #0
 800ab16:	232d      	movlt	r3, #45	; 0x2d
 800ab18:	700b      	strb	r3, [r1, #0]
 800ab1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab20:	4691      	mov	r9, r2
 800ab22:	f023 0820 	bic.w	r8, r3, #32
 800ab26:	bfbc      	itt	lt
 800ab28:	4622      	movlt	r2, r4
 800ab2a:	4614      	movlt	r4, r2
 800ab2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab30:	d005      	beq.n	800ab3e <__cvt+0x42>
 800ab32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab36:	d100      	bne.n	800ab3a <__cvt+0x3e>
 800ab38:	3601      	adds	r6, #1
 800ab3a:	2102      	movs	r1, #2
 800ab3c:	e000      	b.n	800ab40 <__cvt+0x44>
 800ab3e:	2103      	movs	r1, #3
 800ab40:	ab03      	add	r3, sp, #12
 800ab42:	9301      	str	r3, [sp, #4]
 800ab44:	ab02      	add	r3, sp, #8
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	ec45 4b10 	vmov	d0, r4, r5
 800ab4c:	4653      	mov	r3, sl
 800ab4e:	4632      	mov	r2, r6
 800ab50:	f000 fe4e 	bl	800b7f0 <_dtoa_r>
 800ab54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab58:	4607      	mov	r7, r0
 800ab5a:	d102      	bne.n	800ab62 <__cvt+0x66>
 800ab5c:	f019 0f01 	tst.w	r9, #1
 800ab60:	d022      	beq.n	800aba8 <__cvt+0xac>
 800ab62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab66:	eb07 0906 	add.w	r9, r7, r6
 800ab6a:	d110      	bne.n	800ab8e <__cvt+0x92>
 800ab6c:	783b      	ldrb	r3, [r7, #0]
 800ab6e:	2b30      	cmp	r3, #48	; 0x30
 800ab70:	d10a      	bne.n	800ab88 <__cvt+0x8c>
 800ab72:	2200      	movs	r2, #0
 800ab74:	2300      	movs	r3, #0
 800ab76:	4620      	mov	r0, r4
 800ab78:	4629      	mov	r1, r5
 800ab7a:	f7f5 ffc5 	bl	8000b08 <__aeabi_dcmpeq>
 800ab7e:	b918      	cbnz	r0, 800ab88 <__cvt+0x8c>
 800ab80:	f1c6 0601 	rsb	r6, r6, #1
 800ab84:	f8ca 6000 	str.w	r6, [sl]
 800ab88:	f8da 3000 	ldr.w	r3, [sl]
 800ab8c:	4499      	add	r9, r3
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2300      	movs	r3, #0
 800ab92:	4620      	mov	r0, r4
 800ab94:	4629      	mov	r1, r5
 800ab96:	f7f5 ffb7 	bl	8000b08 <__aeabi_dcmpeq>
 800ab9a:	b108      	cbz	r0, 800aba0 <__cvt+0xa4>
 800ab9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800aba0:	2230      	movs	r2, #48	; 0x30
 800aba2:	9b03      	ldr	r3, [sp, #12]
 800aba4:	454b      	cmp	r3, r9
 800aba6:	d307      	bcc.n	800abb8 <__cvt+0xbc>
 800aba8:	9b03      	ldr	r3, [sp, #12]
 800abaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abac:	1bdb      	subs	r3, r3, r7
 800abae:	4638      	mov	r0, r7
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	b004      	add	sp, #16
 800abb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb8:	1c59      	adds	r1, r3, #1
 800abba:	9103      	str	r1, [sp, #12]
 800abbc:	701a      	strb	r2, [r3, #0]
 800abbe:	e7f0      	b.n	800aba2 <__cvt+0xa6>

0800abc0 <__exponent>:
 800abc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abc2:	4603      	mov	r3, r0
 800abc4:	2900      	cmp	r1, #0
 800abc6:	bfb8      	it	lt
 800abc8:	4249      	neglt	r1, r1
 800abca:	f803 2b02 	strb.w	r2, [r3], #2
 800abce:	bfb4      	ite	lt
 800abd0:	222d      	movlt	r2, #45	; 0x2d
 800abd2:	222b      	movge	r2, #43	; 0x2b
 800abd4:	2909      	cmp	r1, #9
 800abd6:	7042      	strb	r2, [r0, #1]
 800abd8:	dd2a      	ble.n	800ac30 <__exponent+0x70>
 800abda:	f10d 0407 	add.w	r4, sp, #7
 800abde:	46a4      	mov	ip, r4
 800abe0:	270a      	movs	r7, #10
 800abe2:	46a6      	mov	lr, r4
 800abe4:	460a      	mov	r2, r1
 800abe6:	fb91 f6f7 	sdiv	r6, r1, r7
 800abea:	fb07 1516 	mls	r5, r7, r6, r1
 800abee:	3530      	adds	r5, #48	; 0x30
 800abf0:	2a63      	cmp	r2, #99	; 0x63
 800abf2:	f104 34ff 	add.w	r4, r4, #4294967295
 800abf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800abfa:	4631      	mov	r1, r6
 800abfc:	dcf1      	bgt.n	800abe2 <__exponent+0x22>
 800abfe:	3130      	adds	r1, #48	; 0x30
 800ac00:	f1ae 0502 	sub.w	r5, lr, #2
 800ac04:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ac08:	1c44      	adds	r4, r0, #1
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	4561      	cmp	r1, ip
 800ac0e:	d30a      	bcc.n	800ac26 <__exponent+0x66>
 800ac10:	f10d 0209 	add.w	r2, sp, #9
 800ac14:	eba2 020e 	sub.w	r2, r2, lr
 800ac18:	4565      	cmp	r5, ip
 800ac1a:	bf88      	it	hi
 800ac1c:	2200      	movhi	r2, #0
 800ac1e:	4413      	add	r3, r2
 800ac20:	1a18      	subs	r0, r3, r0
 800ac22:	b003      	add	sp, #12
 800ac24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac2e:	e7ed      	b.n	800ac0c <__exponent+0x4c>
 800ac30:	2330      	movs	r3, #48	; 0x30
 800ac32:	3130      	adds	r1, #48	; 0x30
 800ac34:	7083      	strb	r3, [r0, #2]
 800ac36:	70c1      	strb	r1, [r0, #3]
 800ac38:	1d03      	adds	r3, r0, #4
 800ac3a:	e7f1      	b.n	800ac20 <__exponent+0x60>

0800ac3c <_printf_float>:
 800ac3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac40:	ed2d 8b02 	vpush	{d8}
 800ac44:	b08d      	sub	sp, #52	; 0x34
 800ac46:	460c      	mov	r4, r1
 800ac48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac4c:	4616      	mov	r6, r2
 800ac4e:	461f      	mov	r7, r3
 800ac50:	4605      	mov	r5, r0
 800ac52:	f001 fd73 	bl	800c73c <_localeconv_r>
 800ac56:	f8d0 a000 	ldr.w	sl, [r0]
 800ac5a:	4650      	mov	r0, sl
 800ac5c:	f7f5 fad8 	bl	8000210 <strlen>
 800ac60:	2300      	movs	r3, #0
 800ac62:	930a      	str	r3, [sp, #40]	; 0x28
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	9305      	str	r3, [sp, #20]
 800ac68:	f8d8 3000 	ldr.w	r3, [r8]
 800ac6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac70:	3307      	adds	r3, #7
 800ac72:	f023 0307 	bic.w	r3, r3, #7
 800ac76:	f103 0208 	add.w	r2, r3, #8
 800ac7a:	f8c8 2000 	str.w	r2, [r8]
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac8e:	9307      	str	r3, [sp, #28]
 800ac90:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac94:	ee08 0a10 	vmov	s16, r0
 800ac98:	4b9f      	ldr	r3, [pc, #636]	; (800af18 <_printf_float+0x2dc>)
 800ac9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aca2:	f7f5 ff63 	bl	8000b6c <__aeabi_dcmpun>
 800aca6:	bb88      	cbnz	r0, 800ad0c <_printf_float+0xd0>
 800aca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acac:	4b9a      	ldr	r3, [pc, #616]	; (800af18 <_printf_float+0x2dc>)
 800acae:	f04f 32ff 	mov.w	r2, #4294967295
 800acb2:	f7f5 ff3d 	bl	8000b30 <__aeabi_dcmple>
 800acb6:	bb48      	cbnz	r0, 800ad0c <_printf_float+0xd0>
 800acb8:	2200      	movs	r2, #0
 800acba:	2300      	movs	r3, #0
 800acbc:	4640      	mov	r0, r8
 800acbe:	4649      	mov	r1, r9
 800acc0:	f7f5 ff2c 	bl	8000b1c <__aeabi_dcmplt>
 800acc4:	b110      	cbz	r0, 800accc <_printf_float+0x90>
 800acc6:	232d      	movs	r3, #45	; 0x2d
 800acc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800accc:	4b93      	ldr	r3, [pc, #588]	; (800af1c <_printf_float+0x2e0>)
 800acce:	4894      	ldr	r0, [pc, #592]	; (800af20 <_printf_float+0x2e4>)
 800acd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800acd4:	bf94      	ite	ls
 800acd6:	4698      	movls	r8, r3
 800acd8:	4680      	movhi	r8, r0
 800acda:	2303      	movs	r3, #3
 800acdc:	6123      	str	r3, [r4, #16]
 800acde:	9b05      	ldr	r3, [sp, #20]
 800ace0:	f023 0204 	bic.w	r2, r3, #4
 800ace4:	6022      	str	r2, [r4, #0]
 800ace6:	f04f 0900 	mov.w	r9, #0
 800acea:	9700      	str	r7, [sp, #0]
 800acec:	4633      	mov	r3, r6
 800acee:	aa0b      	add	r2, sp, #44	; 0x2c
 800acf0:	4621      	mov	r1, r4
 800acf2:	4628      	mov	r0, r5
 800acf4:	f000 f9d8 	bl	800b0a8 <_printf_common>
 800acf8:	3001      	adds	r0, #1
 800acfa:	f040 8090 	bne.w	800ae1e <_printf_float+0x1e2>
 800acfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ad02:	b00d      	add	sp, #52	; 0x34
 800ad04:	ecbd 8b02 	vpop	{d8}
 800ad08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0c:	4642      	mov	r2, r8
 800ad0e:	464b      	mov	r3, r9
 800ad10:	4640      	mov	r0, r8
 800ad12:	4649      	mov	r1, r9
 800ad14:	f7f5 ff2a 	bl	8000b6c <__aeabi_dcmpun>
 800ad18:	b140      	cbz	r0, 800ad2c <_printf_float+0xf0>
 800ad1a:	464b      	mov	r3, r9
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	bfbc      	itt	lt
 800ad20:	232d      	movlt	r3, #45	; 0x2d
 800ad22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad26:	487f      	ldr	r0, [pc, #508]	; (800af24 <_printf_float+0x2e8>)
 800ad28:	4b7f      	ldr	r3, [pc, #508]	; (800af28 <_printf_float+0x2ec>)
 800ad2a:	e7d1      	b.n	800acd0 <_printf_float+0x94>
 800ad2c:	6863      	ldr	r3, [r4, #4]
 800ad2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad32:	9206      	str	r2, [sp, #24]
 800ad34:	1c5a      	adds	r2, r3, #1
 800ad36:	d13f      	bne.n	800adb8 <_printf_float+0x17c>
 800ad38:	2306      	movs	r3, #6
 800ad3a:	6063      	str	r3, [r4, #4]
 800ad3c:	9b05      	ldr	r3, [sp, #20]
 800ad3e:	6861      	ldr	r1, [r4, #4]
 800ad40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad44:	2300      	movs	r3, #0
 800ad46:	9303      	str	r3, [sp, #12]
 800ad48:	ab0a      	add	r3, sp, #40	; 0x28
 800ad4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad4e:	ab09      	add	r3, sp, #36	; 0x24
 800ad50:	ec49 8b10 	vmov	d0, r8, r9
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	6022      	str	r2, [r4, #0]
 800ad58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	f7ff fecd 	bl	800aafc <__cvt>
 800ad62:	9b06      	ldr	r3, [sp, #24]
 800ad64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad66:	2b47      	cmp	r3, #71	; 0x47
 800ad68:	4680      	mov	r8, r0
 800ad6a:	d108      	bne.n	800ad7e <_printf_float+0x142>
 800ad6c:	1cc8      	adds	r0, r1, #3
 800ad6e:	db02      	blt.n	800ad76 <_printf_float+0x13a>
 800ad70:	6863      	ldr	r3, [r4, #4]
 800ad72:	4299      	cmp	r1, r3
 800ad74:	dd41      	ble.n	800adfa <_printf_float+0x1be>
 800ad76:	f1ab 0b02 	sub.w	fp, fp, #2
 800ad7a:	fa5f fb8b 	uxtb.w	fp, fp
 800ad7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad82:	d820      	bhi.n	800adc6 <_printf_float+0x18a>
 800ad84:	3901      	subs	r1, #1
 800ad86:	465a      	mov	r2, fp
 800ad88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad8c:	9109      	str	r1, [sp, #36]	; 0x24
 800ad8e:	f7ff ff17 	bl	800abc0 <__exponent>
 800ad92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad94:	1813      	adds	r3, r2, r0
 800ad96:	2a01      	cmp	r2, #1
 800ad98:	4681      	mov	r9, r0
 800ad9a:	6123      	str	r3, [r4, #16]
 800ad9c:	dc02      	bgt.n	800ada4 <_printf_float+0x168>
 800ad9e:	6822      	ldr	r2, [r4, #0]
 800ada0:	07d2      	lsls	r2, r2, #31
 800ada2:	d501      	bpl.n	800ada8 <_printf_float+0x16c>
 800ada4:	3301      	adds	r3, #1
 800ada6:	6123      	str	r3, [r4, #16]
 800ada8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800adac:	2b00      	cmp	r3, #0
 800adae:	d09c      	beq.n	800acea <_printf_float+0xae>
 800adb0:	232d      	movs	r3, #45	; 0x2d
 800adb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb6:	e798      	b.n	800acea <_printf_float+0xae>
 800adb8:	9a06      	ldr	r2, [sp, #24]
 800adba:	2a47      	cmp	r2, #71	; 0x47
 800adbc:	d1be      	bne.n	800ad3c <_printf_float+0x100>
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1bc      	bne.n	800ad3c <_printf_float+0x100>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e7b9      	b.n	800ad3a <_printf_float+0xfe>
 800adc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800adca:	d118      	bne.n	800adfe <_printf_float+0x1c2>
 800adcc:	2900      	cmp	r1, #0
 800adce:	6863      	ldr	r3, [r4, #4]
 800add0:	dd0b      	ble.n	800adea <_printf_float+0x1ae>
 800add2:	6121      	str	r1, [r4, #16]
 800add4:	b913      	cbnz	r3, 800addc <_printf_float+0x1a0>
 800add6:	6822      	ldr	r2, [r4, #0]
 800add8:	07d0      	lsls	r0, r2, #31
 800adda:	d502      	bpl.n	800ade2 <_printf_float+0x1a6>
 800addc:	3301      	adds	r3, #1
 800adde:	440b      	add	r3, r1
 800ade0:	6123      	str	r3, [r4, #16]
 800ade2:	65a1      	str	r1, [r4, #88]	; 0x58
 800ade4:	f04f 0900 	mov.w	r9, #0
 800ade8:	e7de      	b.n	800ada8 <_printf_float+0x16c>
 800adea:	b913      	cbnz	r3, 800adf2 <_printf_float+0x1b6>
 800adec:	6822      	ldr	r2, [r4, #0]
 800adee:	07d2      	lsls	r2, r2, #31
 800adf0:	d501      	bpl.n	800adf6 <_printf_float+0x1ba>
 800adf2:	3302      	adds	r3, #2
 800adf4:	e7f4      	b.n	800ade0 <_printf_float+0x1a4>
 800adf6:	2301      	movs	r3, #1
 800adf8:	e7f2      	b.n	800ade0 <_printf_float+0x1a4>
 800adfa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800adfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae00:	4299      	cmp	r1, r3
 800ae02:	db05      	blt.n	800ae10 <_printf_float+0x1d4>
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	6121      	str	r1, [r4, #16]
 800ae08:	07d8      	lsls	r0, r3, #31
 800ae0a:	d5ea      	bpl.n	800ade2 <_printf_float+0x1a6>
 800ae0c:	1c4b      	adds	r3, r1, #1
 800ae0e:	e7e7      	b.n	800ade0 <_printf_float+0x1a4>
 800ae10:	2900      	cmp	r1, #0
 800ae12:	bfd4      	ite	le
 800ae14:	f1c1 0202 	rsble	r2, r1, #2
 800ae18:	2201      	movgt	r2, #1
 800ae1a:	4413      	add	r3, r2
 800ae1c:	e7e0      	b.n	800ade0 <_printf_float+0x1a4>
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	055a      	lsls	r2, r3, #21
 800ae22:	d407      	bmi.n	800ae34 <_printf_float+0x1f8>
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	4642      	mov	r2, r8
 800ae28:	4631      	mov	r1, r6
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	47b8      	blx	r7
 800ae2e:	3001      	adds	r0, #1
 800ae30:	d12c      	bne.n	800ae8c <_printf_float+0x250>
 800ae32:	e764      	b.n	800acfe <_printf_float+0xc2>
 800ae34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae38:	f240 80e0 	bls.w	800affc <_printf_float+0x3c0>
 800ae3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae40:	2200      	movs	r2, #0
 800ae42:	2300      	movs	r3, #0
 800ae44:	f7f5 fe60 	bl	8000b08 <__aeabi_dcmpeq>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d034      	beq.n	800aeb6 <_printf_float+0x27a>
 800ae4c:	4a37      	ldr	r2, [pc, #220]	; (800af2c <_printf_float+0x2f0>)
 800ae4e:	2301      	movs	r3, #1
 800ae50:	4631      	mov	r1, r6
 800ae52:	4628      	mov	r0, r5
 800ae54:	47b8      	blx	r7
 800ae56:	3001      	adds	r0, #1
 800ae58:	f43f af51 	beq.w	800acfe <_printf_float+0xc2>
 800ae5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae60:	429a      	cmp	r2, r3
 800ae62:	db02      	blt.n	800ae6a <_printf_float+0x22e>
 800ae64:	6823      	ldr	r3, [r4, #0]
 800ae66:	07d8      	lsls	r0, r3, #31
 800ae68:	d510      	bpl.n	800ae8c <_printf_float+0x250>
 800ae6a:	ee18 3a10 	vmov	r3, s16
 800ae6e:	4652      	mov	r2, sl
 800ae70:	4631      	mov	r1, r6
 800ae72:	4628      	mov	r0, r5
 800ae74:	47b8      	blx	r7
 800ae76:	3001      	adds	r0, #1
 800ae78:	f43f af41 	beq.w	800acfe <_printf_float+0xc2>
 800ae7c:	f04f 0800 	mov.w	r8, #0
 800ae80:	f104 091a 	add.w	r9, r4, #26
 800ae84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae86:	3b01      	subs	r3, #1
 800ae88:	4543      	cmp	r3, r8
 800ae8a:	dc09      	bgt.n	800aea0 <_printf_float+0x264>
 800ae8c:	6823      	ldr	r3, [r4, #0]
 800ae8e:	079b      	lsls	r3, r3, #30
 800ae90:	f100 8105 	bmi.w	800b09e <_printf_float+0x462>
 800ae94:	68e0      	ldr	r0, [r4, #12]
 800ae96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae98:	4298      	cmp	r0, r3
 800ae9a:	bfb8      	it	lt
 800ae9c:	4618      	movlt	r0, r3
 800ae9e:	e730      	b.n	800ad02 <_printf_float+0xc6>
 800aea0:	2301      	movs	r3, #1
 800aea2:	464a      	mov	r2, r9
 800aea4:	4631      	mov	r1, r6
 800aea6:	4628      	mov	r0, r5
 800aea8:	47b8      	blx	r7
 800aeaa:	3001      	adds	r0, #1
 800aeac:	f43f af27 	beq.w	800acfe <_printf_float+0xc2>
 800aeb0:	f108 0801 	add.w	r8, r8, #1
 800aeb4:	e7e6      	b.n	800ae84 <_printf_float+0x248>
 800aeb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dc39      	bgt.n	800af30 <_printf_float+0x2f4>
 800aebc:	4a1b      	ldr	r2, [pc, #108]	; (800af2c <_printf_float+0x2f0>)
 800aebe:	2301      	movs	r3, #1
 800aec0:	4631      	mov	r1, r6
 800aec2:	4628      	mov	r0, r5
 800aec4:	47b8      	blx	r7
 800aec6:	3001      	adds	r0, #1
 800aec8:	f43f af19 	beq.w	800acfe <_printf_float+0xc2>
 800aecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aed0:	4313      	orrs	r3, r2
 800aed2:	d102      	bne.n	800aeda <_printf_float+0x29e>
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	07d9      	lsls	r1, r3, #31
 800aed8:	d5d8      	bpl.n	800ae8c <_printf_float+0x250>
 800aeda:	ee18 3a10 	vmov	r3, s16
 800aede:	4652      	mov	r2, sl
 800aee0:	4631      	mov	r1, r6
 800aee2:	4628      	mov	r0, r5
 800aee4:	47b8      	blx	r7
 800aee6:	3001      	adds	r0, #1
 800aee8:	f43f af09 	beq.w	800acfe <_printf_float+0xc2>
 800aeec:	f04f 0900 	mov.w	r9, #0
 800aef0:	f104 0a1a 	add.w	sl, r4, #26
 800aef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef6:	425b      	negs	r3, r3
 800aef8:	454b      	cmp	r3, r9
 800aefa:	dc01      	bgt.n	800af00 <_printf_float+0x2c4>
 800aefc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aefe:	e792      	b.n	800ae26 <_printf_float+0x1ea>
 800af00:	2301      	movs	r3, #1
 800af02:	4652      	mov	r2, sl
 800af04:	4631      	mov	r1, r6
 800af06:	4628      	mov	r0, r5
 800af08:	47b8      	blx	r7
 800af0a:	3001      	adds	r0, #1
 800af0c:	f43f aef7 	beq.w	800acfe <_printf_float+0xc2>
 800af10:	f109 0901 	add.w	r9, r9, #1
 800af14:	e7ee      	b.n	800aef4 <_printf_float+0x2b8>
 800af16:	bf00      	nop
 800af18:	7fefffff 	.word	0x7fefffff
 800af1c:	0800dd6c 	.word	0x0800dd6c
 800af20:	0800dd70 	.word	0x0800dd70
 800af24:	0800dd78 	.word	0x0800dd78
 800af28:	0800dd74 	.word	0x0800dd74
 800af2c:	0800dd7c 	.word	0x0800dd7c
 800af30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af34:	429a      	cmp	r2, r3
 800af36:	bfa8      	it	ge
 800af38:	461a      	movge	r2, r3
 800af3a:	2a00      	cmp	r2, #0
 800af3c:	4691      	mov	r9, r2
 800af3e:	dc37      	bgt.n	800afb0 <_printf_float+0x374>
 800af40:	f04f 0b00 	mov.w	fp, #0
 800af44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af48:	f104 021a 	add.w	r2, r4, #26
 800af4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af4e:	9305      	str	r3, [sp, #20]
 800af50:	eba3 0309 	sub.w	r3, r3, r9
 800af54:	455b      	cmp	r3, fp
 800af56:	dc33      	bgt.n	800afc0 <_printf_float+0x384>
 800af58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af5c:	429a      	cmp	r2, r3
 800af5e:	db3b      	blt.n	800afd8 <_printf_float+0x39c>
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	07da      	lsls	r2, r3, #31
 800af64:	d438      	bmi.n	800afd8 <_printf_float+0x39c>
 800af66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af68:	9a05      	ldr	r2, [sp, #20]
 800af6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af6c:	1a9a      	subs	r2, r3, r2
 800af6e:	eba3 0901 	sub.w	r9, r3, r1
 800af72:	4591      	cmp	r9, r2
 800af74:	bfa8      	it	ge
 800af76:	4691      	movge	r9, r2
 800af78:	f1b9 0f00 	cmp.w	r9, #0
 800af7c:	dc35      	bgt.n	800afea <_printf_float+0x3ae>
 800af7e:	f04f 0800 	mov.w	r8, #0
 800af82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af86:	f104 0a1a 	add.w	sl, r4, #26
 800af8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af8e:	1a9b      	subs	r3, r3, r2
 800af90:	eba3 0309 	sub.w	r3, r3, r9
 800af94:	4543      	cmp	r3, r8
 800af96:	f77f af79 	ble.w	800ae8c <_printf_float+0x250>
 800af9a:	2301      	movs	r3, #1
 800af9c:	4652      	mov	r2, sl
 800af9e:	4631      	mov	r1, r6
 800afa0:	4628      	mov	r0, r5
 800afa2:	47b8      	blx	r7
 800afa4:	3001      	adds	r0, #1
 800afa6:	f43f aeaa 	beq.w	800acfe <_printf_float+0xc2>
 800afaa:	f108 0801 	add.w	r8, r8, #1
 800afae:	e7ec      	b.n	800af8a <_printf_float+0x34e>
 800afb0:	4613      	mov	r3, r2
 800afb2:	4631      	mov	r1, r6
 800afb4:	4642      	mov	r2, r8
 800afb6:	4628      	mov	r0, r5
 800afb8:	47b8      	blx	r7
 800afba:	3001      	adds	r0, #1
 800afbc:	d1c0      	bne.n	800af40 <_printf_float+0x304>
 800afbe:	e69e      	b.n	800acfe <_printf_float+0xc2>
 800afc0:	2301      	movs	r3, #1
 800afc2:	4631      	mov	r1, r6
 800afc4:	4628      	mov	r0, r5
 800afc6:	9205      	str	r2, [sp, #20]
 800afc8:	47b8      	blx	r7
 800afca:	3001      	adds	r0, #1
 800afcc:	f43f ae97 	beq.w	800acfe <_printf_float+0xc2>
 800afd0:	9a05      	ldr	r2, [sp, #20]
 800afd2:	f10b 0b01 	add.w	fp, fp, #1
 800afd6:	e7b9      	b.n	800af4c <_printf_float+0x310>
 800afd8:	ee18 3a10 	vmov	r3, s16
 800afdc:	4652      	mov	r2, sl
 800afde:	4631      	mov	r1, r6
 800afe0:	4628      	mov	r0, r5
 800afe2:	47b8      	blx	r7
 800afe4:	3001      	adds	r0, #1
 800afe6:	d1be      	bne.n	800af66 <_printf_float+0x32a>
 800afe8:	e689      	b.n	800acfe <_printf_float+0xc2>
 800afea:	9a05      	ldr	r2, [sp, #20]
 800afec:	464b      	mov	r3, r9
 800afee:	4442      	add	r2, r8
 800aff0:	4631      	mov	r1, r6
 800aff2:	4628      	mov	r0, r5
 800aff4:	47b8      	blx	r7
 800aff6:	3001      	adds	r0, #1
 800aff8:	d1c1      	bne.n	800af7e <_printf_float+0x342>
 800affa:	e680      	b.n	800acfe <_printf_float+0xc2>
 800affc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800affe:	2a01      	cmp	r2, #1
 800b000:	dc01      	bgt.n	800b006 <_printf_float+0x3ca>
 800b002:	07db      	lsls	r3, r3, #31
 800b004:	d538      	bpl.n	800b078 <_printf_float+0x43c>
 800b006:	2301      	movs	r3, #1
 800b008:	4642      	mov	r2, r8
 800b00a:	4631      	mov	r1, r6
 800b00c:	4628      	mov	r0, r5
 800b00e:	47b8      	blx	r7
 800b010:	3001      	adds	r0, #1
 800b012:	f43f ae74 	beq.w	800acfe <_printf_float+0xc2>
 800b016:	ee18 3a10 	vmov	r3, s16
 800b01a:	4652      	mov	r2, sl
 800b01c:	4631      	mov	r1, r6
 800b01e:	4628      	mov	r0, r5
 800b020:	47b8      	blx	r7
 800b022:	3001      	adds	r0, #1
 800b024:	f43f ae6b 	beq.w	800acfe <_printf_float+0xc2>
 800b028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b02c:	2200      	movs	r2, #0
 800b02e:	2300      	movs	r3, #0
 800b030:	f7f5 fd6a 	bl	8000b08 <__aeabi_dcmpeq>
 800b034:	b9d8      	cbnz	r0, 800b06e <_printf_float+0x432>
 800b036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b038:	f108 0201 	add.w	r2, r8, #1
 800b03c:	3b01      	subs	r3, #1
 800b03e:	4631      	mov	r1, r6
 800b040:	4628      	mov	r0, r5
 800b042:	47b8      	blx	r7
 800b044:	3001      	adds	r0, #1
 800b046:	d10e      	bne.n	800b066 <_printf_float+0x42a>
 800b048:	e659      	b.n	800acfe <_printf_float+0xc2>
 800b04a:	2301      	movs	r3, #1
 800b04c:	4652      	mov	r2, sl
 800b04e:	4631      	mov	r1, r6
 800b050:	4628      	mov	r0, r5
 800b052:	47b8      	blx	r7
 800b054:	3001      	adds	r0, #1
 800b056:	f43f ae52 	beq.w	800acfe <_printf_float+0xc2>
 800b05a:	f108 0801 	add.w	r8, r8, #1
 800b05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b060:	3b01      	subs	r3, #1
 800b062:	4543      	cmp	r3, r8
 800b064:	dcf1      	bgt.n	800b04a <_printf_float+0x40e>
 800b066:	464b      	mov	r3, r9
 800b068:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b06c:	e6dc      	b.n	800ae28 <_printf_float+0x1ec>
 800b06e:	f04f 0800 	mov.w	r8, #0
 800b072:	f104 0a1a 	add.w	sl, r4, #26
 800b076:	e7f2      	b.n	800b05e <_printf_float+0x422>
 800b078:	2301      	movs	r3, #1
 800b07a:	4642      	mov	r2, r8
 800b07c:	e7df      	b.n	800b03e <_printf_float+0x402>
 800b07e:	2301      	movs	r3, #1
 800b080:	464a      	mov	r2, r9
 800b082:	4631      	mov	r1, r6
 800b084:	4628      	mov	r0, r5
 800b086:	47b8      	blx	r7
 800b088:	3001      	adds	r0, #1
 800b08a:	f43f ae38 	beq.w	800acfe <_printf_float+0xc2>
 800b08e:	f108 0801 	add.w	r8, r8, #1
 800b092:	68e3      	ldr	r3, [r4, #12]
 800b094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b096:	1a5b      	subs	r3, r3, r1
 800b098:	4543      	cmp	r3, r8
 800b09a:	dcf0      	bgt.n	800b07e <_printf_float+0x442>
 800b09c:	e6fa      	b.n	800ae94 <_printf_float+0x258>
 800b09e:	f04f 0800 	mov.w	r8, #0
 800b0a2:	f104 0919 	add.w	r9, r4, #25
 800b0a6:	e7f4      	b.n	800b092 <_printf_float+0x456>

0800b0a8 <_printf_common>:
 800b0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ac:	4616      	mov	r6, r2
 800b0ae:	4699      	mov	r9, r3
 800b0b0:	688a      	ldr	r2, [r1, #8]
 800b0b2:	690b      	ldr	r3, [r1, #16]
 800b0b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	bfb8      	it	lt
 800b0bc:	4613      	movlt	r3, r2
 800b0be:	6033      	str	r3, [r6, #0]
 800b0c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	b10a      	cbz	r2, 800b0ce <_printf_common+0x26>
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	6033      	str	r3, [r6, #0]
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	0699      	lsls	r1, r3, #26
 800b0d2:	bf42      	ittt	mi
 800b0d4:	6833      	ldrmi	r3, [r6, #0]
 800b0d6:	3302      	addmi	r3, #2
 800b0d8:	6033      	strmi	r3, [r6, #0]
 800b0da:	6825      	ldr	r5, [r4, #0]
 800b0dc:	f015 0506 	ands.w	r5, r5, #6
 800b0e0:	d106      	bne.n	800b0f0 <_printf_common+0x48>
 800b0e2:	f104 0a19 	add.w	sl, r4, #25
 800b0e6:	68e3      	ldr	r3, [r4, #12]
 800b0e8:	6832      	ldr	r2, [r6, #0]
 800b0ea:	1a9b      	subs	r3, r3, r2
 800b0ec:	42ab      	cmp	r3, r5
 800b0ee:	dc26      	bgt.n	800b13e <_printf_common+0x96>
 800b0f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0f4:	1e13      	subs	r3, r2, #0
 800b0f6:	6822      	ldr	r2, [r4, #0]
 800b0f8:	bf18      	it	ne
 800b0fa:	2301      	movne	r3, #1
 800b0fc:	0692      	lsls	r2, r2, #26
 800b0fe:	d42b      	bmi.n	800b158 <_printf_common+0xb0>
 800b100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b104:	4649      	mov	r1, r9
 800b106:	4638      	mov	r0, r7
 800b108:	47c0      	blx	r8
 800b10a:	3001      	adds	r0, #1
 800b10c:	d01e      	beq.n	800b14c <_printf_common+0xa4>
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	68e5      	ldr	r5, [r4, #12]
 800b112:	6832      	ldr	r2, [r6, #0]
 800b114:	f003 0306 	and.w	r3, r3, #6
 800b118:	2b04      	cmp	r3, #4
 800b11a:	bf08      	it	eq
 800b11c:	1aad      	subeq	r5, r5, r2
 800b11e:	68a3      	ldr	r3, [r4, #8]
 800b120:	6922      	ldr	r2, [r4, #16]
 800b122:	bf0c      	ite	eq
 800b124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b128:	2500      	movne	r5, #0
 800b12a:	4293      	cmp	r3, r2
 800b12c:	bfc4      	itt	gt
 800b12e:	1a9b      	subgt	r3, r3, r2
 800b130:	18ed      	addgt	r5, r5, r3
 800b132:	2600      	movs	r6, #0
 800b134:	341a      	adds	r4, #26
 800b136:	42b5      	cmp	r5, r6
 800b138:	d11a      	bne.n	800b170 <_printf_common+0xc8>
 800b13a:	2000      	movs	r0, #0
 800b13c:	e008      	b.n	800b150 <_printf_common+0xa8>
 800b13e:	2301      	movs	r3, #1
 800b140:	4652      	mov	r2, sl
 800b142:	4649      	mov	r1, r9
 800b144:	4638      	mov	r0, r7
 800b146:	47c0      	blx	r8
 800b148:	3001      	adds	r0, #1
 800b14a:	d103      	bne.n	800b154 <_printf_common+0xac>
 800b14c:	f04f 30ff 	mov.w	r0, #4294967295
 800b150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b154:	3501      	adds	r5, #1
 800b156:	e7c6      	b.n	800b0e6 <_printf_common+0x3e>
 800b158:	18e1      	adds	r1, r4, r3
 800b15a:	1c5a      	adds	r2, r3, #1
 800b15c:	2030      	movs	r0, #48	; 0x30
 800b15e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b162:	4422      	add	r2, r4
 800b164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b16c:	3302      	adds	r3, #2
 800b16e:	e7c7      	b.n	800b100 <_printf_common+0x58>
 800b170:	2301      	movs	r3, #1
 800b172:	4622      	mov	r2, r4
 800b174:	4649      	mov	r1, r9
 800b176:	4638      	mov	r0, r7
 800b178:	47c0      	blx	r8
 800b17a:	3001      	adds	r0, #1
 800b17c:	d0e6      	beq.n	800b14c <_printf_common+0xa4>
 800b17e:	3601      	adds	r6, #1
 800b180:	e7d9      	b.n	800b136 <_printf_common+0x8e>
	...

0800b184 <_printf_i>:
 800b184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b188:	7e0f      	ldrb	r7, [r1, #24]
 800b18a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b18c:	2f78      	cmp	r7, #120	; 0x78
 800b18e:	4691      	mov	r9, r2
 800b190:	4680      	mov	r8, r0
 800b192:	460c      	mov	r4, r1
 800b194:	469a      	mov	sl, r3
 800b196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b19a:	d807      	bhi.n	800b1ac <_printf_i+0x28>
 800b19c:	2f62      	cmp	r7, #98	; 0x62
 800b19e:	d80a      	bhi.n	800b1b6 <_printf_i+0x32>
 800b1a0:	2f00      	cmp	r7, #0
 800b1a2:	f000 80d8 	beq.w	800b356 <_printf_i+0x1d2>
 800b1a6:	2f58      	cmp	r7, #88	; 0x58
 800b1a8:	f000 80a3 	beq.w	800b2f2 <_printf_i+0x16e>
 800b1ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1b4:	e03a      	b.n	800b22c <_printf_i+0xa8>
 800b1b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1ba:	2b15      	cmp	r3, #21
 800b1bc:	d8f6      	bhi.n	800b1ac <_printf_i+0x28>
 800b1be:	a101      	add	r1, pc, #4	; (adr r1, 800b1c4 <_printf_i+0x40>)
 800b1c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1c4:	0800b21d 	.word	0x0800b21d
 800b1c8:	0800b231 	.word	0x0800b231
 800b1cc:	0800b1ad 	.word	0x0800b1ad
 800b1d0:	0800b1ad 	.word	0x0800b1ad
 800b1d4:	0800b1ad 	.word	0x0800b1ad
 800b1d8:	0800b1ad 	.word	0x0800b1ad
 800b1dc:	0800b231 	.word	0x0800b231
 800b1e0:	0800b1ad 	.word	0x0800b1ad
 800b1e4:	0800b1ad 	.word	0x0800b1ad
 800b1e8:	0800b1ad 	.word	0x0800b1ad
 800b1ec:	0800b1ad 	.word	0x0800b1ad
 800b1f0:	0800b33d 	.word	0x0800b33d
 800b1f4:	0800b261 	.word	0x0800b261
 800b1f8:	0800b31f 	.word	0x0800b31f
 800b1fc:	0800b1ad 	.word	0x0800b1ad
 800b200:	0800b1ad 	.word	0x0800b1ad
 800b204:	0800b35f 	.word	0x0800b35f
 800b208:	0800b1ad 	.word	0x0800b1ad
 800b20c:	0800b261 	.word	0x0800b261
 800b210:	0800b1ad 	.word	0x0800b1ad
 800b214:	0800b1ad 	.word	0x0800b1ad
 800b218:	0800b327 	.word	0x0800b327
 800b21c:	682b      	ldr	r3, [r5, #0]
 800b21e:	1d1a      	adds	r2, r3, #4
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	602a      	str	r2, [r5, #0]
 800b224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b22c:	2301      	movs	r3, #1
 800b22e:	e0a3      	b.n	800b378 <_printf_i+0x1f4>
 800b230:	6820      	ldr	r0, [r4, #0]
 800b232:	6829      	ldr	r1, [r5, #0]
 800b234:	0606      	lsls	r6, r0, #24
 800b236:	f101 0304 	add.w	r3, r1, #4
 800b23a:	d50a      	bpl.n	800b252 <_printf_i+0xce>
 800b23c:	680e      	ldr	r6, [r1, #0]
 800b23e:	602b      	str	r3, [r5, #0]
 800b240:	2e00      	cmp	r6, #0
 800b242:	da03      	bge.n	800b24c <_printf_i+0xc8>
 800b244:	232d      	movs	r3, #45	; 0x2d
 800b246:	4276      	negs	r6, r6
 800b248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b24c:	485e      	ldr	r0, [pc, #376]	; (800b3c8 <_printf_i+0x244>)
 800b24e:	230a      	movs	r3, #10
 800b250:	e019      	b.n	800b286 <_printf_i+0x102>
 800b252:	680e      	ldr	r6, [r1, #0]
 800b254:	602b      	str	r3, [r5, #0]
 800b256:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b25a:	bf18      	it	ne
 800b25c:	b236      	sxthne	r6, r6
 800b25e:	e7ef      	b.n	800b240 <_printf_i+0xbc>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	6820      	ldr	r0, [r4, #0]
 800b264:	1d19      	adds	r1, r3, #4
 800b266:	6029      	str	r1, [r5, #0]
 800b268:	0601      	lsls	r1, r0, #24
 800b26a:	d501      	bpl.n	800b270 <_printf_i+0xec>
 800b26c:	681e      	ldr	r6, [r3, #0]
 800b26e:	e002      	b.n	800b276 <_printf_i+0xf2>
 800b270:	0646      	lsls	r6, r0, #25
 800b272:	d5fb      	bpl.n	800b26c <_printf_i+0xe8>
 800b274:	881e      	ldrh	r6, [r3, #0]
 800b276:	4854      	ldr	r0, [pc, #336]	; (800b3c8 <_printf_i+0x244>)
 800b278:	2f6f      	cmp	r7, #111	; 0x6f
 800b27a:	bf0c      	ite	eq
 800b27c:	2308      	moveq	r3, #8
 800b27e:	230a      	movne	r3, #10
 800b280:	2100      	movs	r1, #0
 800b282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b286:	6865      	ldr	r5, [r4, #4]
 800b288:	60a5      	str	r5, [r4, #8]
 800b28a:	2d00      	cmp	r5, #0
 800b28c:	bfa2      	ittt	ge
 800b28e:	6821      	ldrge	r1, [r4, #0]
 800b290:	f021 0104 	bicge.w	r1, r1, #4
 800b294:	6021      	strge	r1, [r4, #0]
 800b296:	b90e      	cbnz	r6, 800b29c <_printf_i+0x118>
 800b298:	2d00      	cmp	r5, #0
 800b29a:	d04d      	beq.n	800b338 <_printf_i+0x1b4>
 800b29c:	4615      	mov	r5, r2
 800b29e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2a2:	fb03 6711 	mls	r7, r3, r1, r6
 800b2a6:	5dc7      	ldrb	r7, [r0, r7]
 800b2a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2ac:	4637      	mov	r7, r6
 800b2ae:	42bb      	cmp	r3, r7
 800b2b0:	460e      	mov	r6, r1
 800b2b2:	d9f4      	bls.n	800b29e <_printf_i+0x11a>
 800b2b4:	2b08      	cmp	r3, #8
 800b2b6:	d10b      	bne.n	800b2d0 <_printf_i+0x14c>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	07de      	lsls	r6, r3, #31
 800b2bc:	d508      	bpl.n	800b2d0 <_printf_i+0x14c>
 800b2be:	6923      	ldr	r3, [r4, #16]
 800b2c0:	6861      	ldr	r1, [r4, #4]
 800b2c2:	4299      	cmp	r1, r3
 800b2c4:	bfde      	ittt	le
 800b2c6:	2330      	movle	r3, #48	; 0x30
 800b2c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2d0:	1b52      	subs	r2, r2, r5
 800b2d2:	6122      	str	r2, [r4, #16]
 800b2d4:	f8cd a000 	str.w	sl, [sp]
 800b2d8:	464b      	mov	r3, r9
 800b2da:	aa03      	add	r2, sp, #12
 800b2dc:	4621      	mov	r1, r4
 800b2de:	4640      	mov	r0, r8
 800b2e0:	f7ff fee2 	bl	800b0a8 <_printf_common>
 800b2e4:	3001      	adds	r0, #1
 800b2e6:	d14c      	bne.n	800b382 <_printf_i+0x1fe>
 800b2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ec:	b004      	add	sp, #16
 800b2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f2:	4835      	ldr	r0, [pc, #212]	; (800b3c8 <_printf_i+0x244>)
 800b2f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b2f8:	6829      	ldr	r1, [r5, #0]
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b300:	6029      	str	r1, [r5, #0]
 800b302:	061d      	lsls	r5, r3, #24
 800b304:	d514      	bpl.n	800b330 <_printf_i+0x1ac>
 800b306:	07df      	lsls	r7, r3, #31
 800b308:	bf44      	itt	mi
 800b30a:	f043 0320 	orrmi.w	r3, r3, #32
 800b30e:	6023      	strmi	r3, [r4, #0]
 800b310:	b91e      	cbnz	r6, 800b31a <_printf_i+0x196>
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	f023 0320 	bic.w	r3, r3, #32
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	2310      	movs	r3, #16
 800b31c:	e7b0      	b.n	800b280 <_printf_i+0xfc>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	f043 0320 	orr.w	r3, r3, #32
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	2378      	movs	r3, #120	; 0x78
 800b328:	4828      	ldr	r0, [pc, #160]	; (800b3cc <_printf_i+0x248>)
 800b32a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b32e:	e7e3      	b.n	800b2f8 <_printf_i+0x174>
 800b330:	0659      	lsls	r1, r3, #25
 800b332:	bf48      	it	mi
 800b334:	b2b6      	uxthmi	r6, r6
 800b336:	e7e6      	b.n	800b306 <_printf_i+0x182>
 800b338:	4615      	mov	r5, r2
 800b33a:	e7bb      	b.n	800b2b4 <_printf_i+0x130>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	6826      	ldr	r6, [r4, #0]
 800b340:	6961      	ldr	r1, [r4, #20]
 800b342:	1d18      	adds	r0, r3, #4
 800b344:	6028      	str	r0, [r5, #0]
 800b346:	0635      	lsls	r5, r6, #24
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	d501      	bpl.n	800b350 <_printf_i+0x1cc>
 800b34c:	6019      	str	r1, [r3, #0]
 800b34e:	e002      	b.n	800b356 <_printf_i+0x1d2>
 800b350:	0670      	lsls	r0, r6, #25
 800b352:	d5fb      	bpl.n	800b34c <_printf_i+0x1c8>
 800b354:	8019      	strh	r1, [r3, #0]
 800b356:	2300      	movs	r3, #0
 800b358:	6123      	str	r3, [r4, #16]
 800b35a:	4615      	mov	r5, r2
 800b35c:	e7ba      	b.n	800b2d4 <_printf_i+0x150>
 800b35e:	682b      	ldr	r3, [r5, #0]
 800b360:	1d1a      	adds	r2, r3, #4
 800b362:	602a      	str	r2, [r5, #0]
 800b364:	681d      	ldr	r5, [r3, #0]
 800b366:	6862      	ldr	r2, [r4, #4]
 800b368:	2100      	movs	r1, #0
 800b36a:	4628      	mov	r0, r5
 800b36c:	f7f4 ff58 	bl	8000220 <memchr>
 800b370:	b108      	cbz	r0, 800b376 <_printf_i+0x1f2>
 800b372:	1b40      	subs	r0, r0, r5
 800b374:	6060      	str	r0, [r4, #4]
 800b376:	6863      	ldr	r3, [r4, #4]
 800b378:	6123      	str	r3, [r4, #16]
 800b37a:	2300      	movs	r3, #0
 800b37c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b380:	e7a8      	b.n	800b2d4 <_printf_i+0x150>
 800b382:	6923      	ldr	r3, [r4, #16]
 800b384:	462a      	mov	r2, r5
 800b386:	4649      	mov	r1, r9
 800b388:	4640      	mov	r0, r8
 800b38a:	47d0      	blx	sl
 800b38c:	3001      	adds	r0, #1
 800b38e:	d0ab      	beq.n	800b2e8 <_printf_i+0x164>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	079b      	lsls	r3, r3, #30
 800b394:	d413      	bmi.n	800b3be <_printf_i+0x23a>
 800b396:	68e0      	ldr	r0, [r4, #12]
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	4298      	cmp	r0, r3
 800b39c:	bfb8      	it	lt
 800b39e:	4618      	movlt	r0, r3
 800b3a0:	e7a4      	b.n	800b2ec <_printf_i+0x168>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	4632      	mov	r2, r6
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	4640      	mov	r0, r8
 800b3aa:	47d0      	blx	sl
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	d09b      	beq.n	800b2e8 <_printf_i+0x164>
 800b3b0:	3501      	adds	r5, #1
 800b3b2:	68e3      	ldr	r3, [r4, #12]
 800b3b4:	9903      	ldr	r1, [sp, #12]
 800b3b6:	1a5b      	subs	r3, r3, r1
 800b3b8:	42ab      	cmp	r3, r5
 800b3ba:	dcf2      	bgt.n	800b3a2 <_printf_i+0x21e>
 800b3bc:	e7eb      	b.n	800b396 <_printf_i+0x212>
 800b3be:	2500      	movs	r5, #0
 800b3c0:	f104 0619 	add.w	r6, r4, #25
 800b3c4:	e7f5      	b.n	800b3b2 <_printf_i+0x22e>
 800b3c6:	bf00      	nop
 800b3c8:	0800dd7e 	.word	0x0800dd7e
 800b3cc:	0800dd8f 	.word	0x0800dd8f

0800b3d0 <iprintf>:
 800b3d0:	b40f      	push	{r0, r1, r2, r3}
 800b3d2:	4b0a      	ldr	r3, [pc, #40]	; (800b3fc <iprintf+0x2c>)
 800b3d4:	b513      	push	{r0, r1, r4, lr}
 800b3d6:	681c      	ldr	r4, [r3, #0]
 800b3d8:	b124      	cbz	r4, 800b3e4 <iprintf+0x14>
 800b3da:	69a3      	ldr	r3, [r4, #24]
 800b3dc:	b913      	cbnz	r3, 800b3e4 <iprintf+0x14>
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f001 f90e 	bl	800c600 <__sinit>
 800b3e4:	ab05      	add	r3, sp, #20
 800b3e6:	9a04      	ldr	r2, [sp, #16]
 800b3e8:	68a1      	ldr	r1, [r4, #8]
 800b3ea:	9301      	str	r3, [sp, #4]
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f002 f827 	bl	800d440 <_vfiprintf_r>
 800b3f2:	b002      	add	sp, #8
 800b3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f8:	b004      	add	sp, #16
 800b3fa:	4770      	bx	lr
 800b3fc:	2000000c 	.word	0x2000000c

0800b400 <_puts_r>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	460e      	mov	r6, r1
 800b404:	4605      	mov	r5, r0
 800b406:	b118      	cbz	r0, 800b410 <_puts_r+0x10>
 800b408:	6983      	ldr	r3, [r0, #24]
 800b40a:	b90b      	cbnz	r3, 800b410 <_puts_r+0x10>
 800b40c:	f001 f8f8 	bl	800c600 <__sinit>
 800b410:	69ab      	ldr	r3, [r5, #24]
 800b412:	68ac      	ldr	r4, [r5, #8]
 800b414:	b913      	cbnz	r3, 800b41c <_puts_r+0x1c>
 800b416:	4628      	mov	r0, r5
 800b418:	f001 f8f2 	bl	800c600 <__sinit>
 800b41c:	4b2c      	ldr	r3, [pc, #176]	; (800b4d0 <_puts_r+0xd0>)
 800b41e:	429c      	cmp	r4, r3
 800b420:	d120      	bne.n	800b464 <_puts_r+0x64>
 800b422:	686c      	ldr	r4, [r5, #4]
 800b424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b426:	07db      	lsls	r3, r3, #31
 800b428:	d405      	bmi.n	800b436 <_puts_r+0x36>
 800b42a:	89a3      	ldrh	r3, [r4, #12]
 800b42c:	0598      	lsls	r0, r3, #22
 800b42e:	d402      	bmi.n	800b436 <_puts_r+0x36>
 800b430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b432:	f001 f988 	bl	800c746 <__retarget_lock_acquire_recursive>
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	0719      	lsls	r1, r3, #28
 800b43a:	d51d      	bpl.n	800b478 <_puts_r+0x78>
 800b43c:	6923      	ldr	r3, [r4, #16]
 800b43e:	b1db      	cbz	r3, 800b478 <_puts_r+0x78>
 800b440:	3e01      	subs	r6, #1
 800b442:	68a3      	ldr	r3, [r4, #8]
 800b444:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b448:	3b01      	subs	r3, #1
 800b44a:	60a3      	str	r3, [r4, #8]
 800b44c:	bb39      	cbnz	r1, 800b49e <_puts_r+0x9e>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	da38      	bge.n	800b4c4 <_puts_r+0xc4>
 800b452:	4622      	mov	r2, r4
 800b454:	210a      	movs	r1, #10
 800b456:	4628      	mov	r0, r5
 800b458:	f000 f87c 	bl	800b554 <__swbuf_r>
 800b45c:	3001      	adds	r0, #1
 800b45e:	d011      	beq.n	800b484 <_puts_r+0x84>
 800b460:	250a      	movs	r5, #10
 800b462:	e011      	b.n	800b488 <_puts_r+0x88>
 800b464:	4b1b      	ldr	r3, [pc, #108]	; (800b4d4 <_puts_r+0xd4>)
 800b466:	429c      	cmp	r4, r3
 800b468:	d101      	bne.n	800b46e <_puts_r+0x6e>
 800b46a:	68ac      	ldr	r4, [r5, #8]
 800b46c:	e7da      	b.n	800b424 <_puts_r+0x24>
 800b46e:	4b1a      	ldr	r3, [pc, #104]	; (800b4d8 <_puts_r+0xd8>)
 800b470:	429c      	cmp	r4, r3
 800b472:	bf08      	it	eq
 800b474:	68ec      	ldreq	r4, [r5, #12]
 800b476:	e7d5      	b.n	800b424 <_puts_r+0x24>
 800b478:	4621      	mov	r1, r4
 800b47a:	4628      	mov	r0, r5
 800b47c:	f000 f8bc 	bl	800b5f8 <__swsetup_r>
 800b480:	2800      	cmp	r0, #0
 800b482:	d0dd      	beq.n	800b440 <_puts_r+0x40>
 800b484:	f04f 35ff 	mov.w	r5, #4294967295
 800b488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b48a:	07da      	lsls	r2, r3, #31
 800b48c:	d405      	bmi.n	800b49a <_puts_r+0x9a>
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	059b      	lsls	r3, r3, #22
 800b492:	d402      	bmi.n	800b49a <_puts_r+0x9a>
 800b494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b496:	f001 f957 	bl	800c748 <__retarget_lock_release_recursive>
 800b49a:	4628      	mov	r0, r5
 800b49c:	bd70      	pop	{r4, r5, r6, pc}
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	da04      	bge.n	800b4ac <_puts_r+0xac>
 800b4a2:	69a2      	ldr	r2, [r4, #24]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	dc06      	bgt.n	800b4b6 <_puts_r+0xb6>
 800b4a8:	290a      	cmp	r1, #10
 800b4aa:	d004      	beq.n	800b4b6 <_puts_r+0xb6>
 800b4ac:	6823      	ldr	r3, [r4, #0]
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	6022      	str	r2, [r4, #0]
 800b4b2:	7019      	strb	r1, [r3, #0]
 800b4b4:	e7c5      	b.n	800b442 <_puts_r+0x42>
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	f000 f84b 	bl	800b554 <__swbuf_r>
 800b4be:	3001      	adds	r0, #1
 800b4c0:	d1bf      	bne.n	800b442 <_puts_r+0x42>
 800b4c2:	e7df      	b.n	800b484 <_puts_r+0x84>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	250a      	movs	r5, #10
 800b4c8:	1c5a      	adds	r2, r3, #1
 800b4ca:	6022      	str	r2, [r4, #0]
 800b4cc:	701d      	strb	r5, [r3, #0]
 800b4ce:	e7db      	b.n	800b488 <_puts_r+0x88>
 800b4d0:	0800de50 	.word	0x0800de50
 800b4d4:	0800de70 	.word	0x0800de70
 800b4d8:	0800de30 	.word	0x0800de30

0800b4dc <puts>:
 800b4dc:	4b02      	ldr	r3, [pc, #8]	; (800b4e8 <puts+0xc>)
 800b4de:	4601      	mov	r1, r0
 800b4e0:	6818      	ldr	r0, [r3, #0]
 800b4e2:	f7ff bf8d 	b.w	800b400 <_puts_r>
 800b4e6:	bf00      	nop
 800b4e8:	2000000c 	.word	0x2000000c

0800b4ec <sniprintf>:
 800b4ec:	b40c      	push	{r2, r3}
 800b4ee:	b530      	push	{r4, r5, lr}
 800b4f0:	4b17      	ldr	r3, [pc, #92]	; (800b550 <sniprintf+0x64>)
 800b4f2:	1e0c      	subs	r4, r1, #0
 800b4f4:	681d      	ldr	r5, [r3, #0]
 800b4f6:	b09d      	sub	sp, #116	; 0x74
 800b4f8:	da08      	bge.n	800b50c <sniprintf+0x20>
 800b4fa:	238b      	movs	r3, #139	; 0x8b
 800b4fc:	602b      	str	r3, [r5, #0]
 800b4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b502:	b01d      	add	sp, #116	; 0x74
 800b504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b508:	b002      	add	sp, #8
 800b50a:	4770      	bx	lr
 800b50c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b510:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b514:	bf14      	ite	ne
 800b516:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b51a:	4623      	moveq	r3, r4
 800b51c:	9304      	str	r3, [sp, #16]
 800b51e:	9307      	str	r3, [sp, #28]
 800b520:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b524:	9002      	str	r0, [sp, #8]
 800b526:	9006      	str	r0, [sp, #24]
 800b528:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b52c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b52e:	ab21      	add	r3, sp, #132	; 0x84
 800b530:	a902      	add	r1, sp, #8
 800b532:	4628      	mov	r0, r5
 800b534:	9301      	str	r3, [sp, #4]
 800b536:	f001 fe59 	bl	800d1ec <_svfiprintf_r>
 800b53a:	1c43      	adds	r3, r0, #1
 800b53c:	bfbc      	itt	lt
 800b53e:	238b      	movlt	r3, #139	; 0x8b
 800b540:	602b      	strlt	r3, [r5, #0]
 800b542:	2c00      	cmp	r4, #0
 800b544:	d0dd      	beq.n	800b502 <sniprintf+0x16>
 800b546:	9b02      	ldr	r3, [sp, #8]
 800b548:	2200      	movs	r2, #0
 800b54a:	701a      	strb	r2, [r3, #0]
 800b54c:	e7d9      	b.n	800b502 <sniprintf+0x16>
 800b54e:	bf00      	nop
 800b550:	2000000c 	.word	0x2000000c

0800b554 <__swbuf_r>:
 800b554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b556:	460e      	mov	r6, r1
 800b558:	4614      	mov	r4, r2
 800b55a:	4605      	mov	r5, r0
 800b55c:	b118      	cbz	r0, 800b566 <__swbuf_r+0x12>
 800b55e:	6983      	ldr	r3, [r0, #24]
 800b560:	b90b      	cbnz	r3, 800b566 <__swbuf_r+0x12>
 800b562:	f001 f84d 	bl	800c600 <__sinit>
 800b566:	4b21      	ldr	r3, [pc, #132]	; (800b5ec <__swbuf_r+0x98>)
 800b568:	429c      	cmp	r4, r3
 800b56a:	d12b      	bne.n	800b5c4 <__swbuf_r+0x70>
 800b56c:	686c      	ldr	r4, [r5, #4]
 800b56e:	69a3      	ldr	r3, [r4, #24]
 800b570:	60a3      	str	r3, [r4, #8]
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	071a      	lsls	r2, r3, #28
 800b576:	d52f      	bpl.n	800b5d8 <__swbuf_r+0x84>
 800b578:	6923      	ldr	r3, [r4, #16]
 800b57a:	b36b      	cbz	r3, 800b5d8 <__swbuf_r+0x84>
 800b57c:	6923      	ldr	r3, [r4, #16]
 800b57e:	6820      	ldr	r0, [r4, #0]
 800b580:	1ac0      	subs	r0, r0, r3
 800b582:	6963      	ldr	r3, [r4, #20]
 800b584:	b2f6      	uxtb	r6, r6
 800b586:	4283      	cmp	r3, r0
 800b588:	4637      	mov	r7, r6
 800b58a:	dc04      	bgt.n	800b596 <__swbuf_r+0x42>
 800b58c:	4621      	mov	r1, r4
 800b58e:	4628      	mov	r0, r5
 800b590:	f000 ffa2 	bl	800c4d8 <_fflush_r>
 800b594:	bb30      	cbnz	r0, 800b5e4 <__swbuf_r+0x90>
 800b596:	68a3      	ldr	r3, [r4, #8]
 800b598:	3b01      	subs	r3, #1
 800b59a:	60a3      	str	r3, [r4, #8]
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	6022      	str	r2, [r4, #0]
 800b5a2:	701e      	strb	r6, [r3, #0]
 800b5a4:	6963      	ldr	r3, [r4, #20]
 800b5a6:	3001      	adds	r0, #1
 800b5a8:	4283      	cmp	r3, r0
 800b5aa:	d004      	beq.n	800b5b6 <__swbuf_r+0x62>
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	07db      	lsls	r3, r3, #31
 800b5b0:	d506      	bpl.n	800b5c0 <__swbuf_r+0x6c>
 800b5b2:	2e0a      	cmp	r6, #10
 800b5b4:	d104      	bne.n	800b5c0 <__swbuf_r+0x6c>
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	f000 ff8d 	bl	800c4d8 <_fflush_r>
 800b5be:	b988      	cbnz	r0, 800b5e4 <__swbuf_r+0x90>
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5c4:	4b0a      	ldr	r3, [pc, #40]	; (800b5f0 <__swbuf_r+0x9c>)
 800b5c6:	429c      	cmp	r4, r3
 800b5c8:	d101      	bne.n	800b5ce <__swbuf_r+0x7a>
 800b5ca:	68ac      	ldr	r4, [r5, #8]
 800b5cc:	e7cf      	b.n	800b56e <__swbuf_r+0x1a>
 800b5ce:	4b09      	ldr	r3, [pc, #36]	; (800b5f4 <__swbuf_r+0xa0>)
 800b5d0:	429c      	cmp	r4, r3
 800b5d2:	bf08      	it	eq
 800b5d4:	68ec      	ldreq	r4, [r5, #12]
 800b5d6:	e7ca      	b.n	800b56e <__swbuf_r+0x1a>
 800b5d8:	4621      	mov	r1, r4
 800b5da:	4628      	mov	r0, r5
 800b5dc:	f000 f80c 	bl	800b5f8 <__swsetup_r>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d0cb      	beq.n	800b57c <__swbuf_r+0x28>
 800b5e4:	f04f 37ff 	mov.w	r7, #4294967295
 800b5e8:	e7ea      	b.n	800b5c0 <__swbuf_r+0x6c>
 800b5ea:	bf00      	nop
 800b5ec:	0800de50 	.word	0x0800de50
 800b5f0:	0800de70 	.word	0x0800de70
 800b5f4:	0800de30 	.word	0x0800de30

0800b5f8 <__swsetup_r>:
 800b5f8:	4b32      	ldr	r3, [pc, #200]	; (800b6c4 <__swsetup_r+0xcc>)
 800b5fa:	b570      	push	{r4, r5, r6, lr}
 800b5fc:	681d      	ldr	r5, [r3, #0]
 800b5fe:	4606      	mov	r6, r0
 800b600:	460c      	mov	r4, r1
 800b602:	b125      	cbz	r5, 800b60e <__swsetup_r+0x16>
 800b604:	69ab      	ldr	r3, [r5, #24]
 800b606:	b913      	cbnz	r3, 800b60e <__swsetup_r+0x16>
 800b608:	4628      	mov	r0, r5
 800b60a:	f000 fff9 	bl	800c600 <__sinit>
 800b60e:	4b2e      	ldr	r3, [pc, #184]	; (800b6c8 <__swsetup_r+0xd0>)
 800b610:	429c      	cmp	r4, r3
 800b612:	d10f      	bne.n	800b634 <__swsetup_r+0x3c>
 800b614:	686c      	ldr	r4, [r5, #4]
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b61c:	0719      	lsls	r1, r3, #28
 800b61e:	d42c      	bmi.n	800b67a <__swsetup_r+0x82>
 800b620:	06dd      	lsls	r5, r3, #27
 800b622:	d411      	bmi.n	800b648 <__swsetup_r+0x50>
 800b624:	2309      	movs	r3, #9
 800b626:	6033      	str	r3, [r6, #0]
 800b628:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b62c:	81a3      	strh	r3, [r4, #12]
 800b62e:	f04f 30ff 	mov.w	r0, #4294967295
 800b632:	e03e      	b.n	800b6b2 <__swsetup_r+0xba>
 800b634:	4b25      	ldr	r3, [pc, #148]	; (800b6cc <__swsetup_r+0xd4>)
 800b636:	429c      	cmp	r4, r3
 800b638:	d101      	bne.n	800b63e <__swsetup_r+0x46>
 800b63a:	68ac      	ldr	r4, [r5, #8]
 800b63c:	e7eb      	b.n	800b616 <__swsetup_r+0x1e>
 800b63e:	4b24      	ldr	r3, [pc, #144]	; (800b6d0 <__swsetup_r+0xd8>)
 800b640:	429c      	cmp	r4, r3
 800b642:	bf08      	it	eq
 800b644:	68ec      	ldreq	r4, [r5, #12]
 800b646:	e7e6      	b.n	800b616 <__swsetup_r+0x1e>
 800b648:	0758      	lsls	r0, r3, #29
 800b64a:	d512      	bpl.n	800b672 <__swsetup_r+0x7a>
 800b64c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b64e:	b141      	cbz	r1, 800b662 <__swsetup_r+0x6a>
 800b650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b654:	4299      	cmp	r1, r3
 800b656:	d002      	beq.n	800b65e <__swsetup_r+0x66>
 800b658:	4630      	mov	r0, r6
 800b65a:	f001 fc8b 	bl	800cf74 <_free_r>
 800b65e:	2300      	movs	r3, #0
 800b660:	6363      	str	r3, [r4, #52]	; 0x34
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b668:	81a3      	strh	r3, [r4, #12]
 800b66a:	2300      	movs	r3, #0
 800b66c:	6063      	str	r3, [r4, #4]
 800b66e:	6923      	ldr	r3, [r4, #16]
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	f043 0308 	orr.w	r3, r3, #8
 800b678:	81a3      	strh	r3, [r4, #12]
 800b67a:	6923      	ldr	r3, [r4, #16]
 800b67c:	b94b      	cbnz	r3, 800b692 <__swsetup_r+0x9a>
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b688:	d003      	beq.n	800b692 <__swsetup_r+0x9a>
 800b68a:	4621      	mov	r1, r4
 800b68c:	4630      	mov	r0, r6
 800b68e:	f001 f881 	bl	800c794 <__smakebuf_r>
 800b692:	89a0      	ldrh	r0, [r4, #12]
 800b694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b698:	f010 0301 	ands.w	r3, r0, #1
 800b69c:	d00a      	beq.n	800b6b4 <__swsetup_r+0xbc>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	60a3      	str	r3, [r4, #8]
 800b6a2:	6963      	ldr	r3, [r4, #20]
 800b6a4:	425b      	negs	r3, r3
 800b6a6:	61a3      	str	r3, [r4, #24]
 800b6a8:	6923      	ldr	r3, [r4, #16]
 800b6aa:	b943      	cbnz	r3, 800b6be <__swsetup_r+0xc6>
 800b6ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6b0:	d1ba      	bne.n	800b628 <__swsetup_r+0x30>
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	0781      	lsls	r1, r0, #30
 800b6b6:	bf58      	it	pl
 800b6b8:	6963      	ldrpl	r3, [r4, #20]
 800b6ba:	60a3      	str	r3, [r4, #8]
 800b6bc:	e7f4      	b.n	800b6a8 <__swsetup_r+0xb0>
 800b6be:	2000      	movs	r0, #0
 800b6c0:	e7f7      	b.n	800b6b2 <__swsetup_r+0xba>
 800b6c2:	bf00      	nop
 800b6c4:	2000000c 	.word	0x2000000c
 800b6c8:	0800de50 	.word	0x0800de50
 800b6cc:	0800de70 	.word	0x0800de70
 800b6d0:	0800de30 	.word	0x0800de30

0800b6d4 <quorem>:
 800b6d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d8:	6903      	ldr	r3, [r0, #16]
 800b6da:	690c      	ldr	r4, [r1, #16]
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	4607      	mov	r7, r0
 800b6e0:	f2c0 8081 	blt.w	800b7e6 <quorem+0x112>
 800b6e4:	3c01      	subs	r4, #1
 800b6e6:	f101 0814 	add.w	r8, r1, #20
 800b6ea:	f100 0514 	add.w	r5, r0, #20
 800b6ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6f2:	9301      	str	r3, [sp, #4]
 800b6f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	429a      	cmp	r2, r3
 800b700:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b704:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b708:	fbb2 f6f3 	udiv	r6, r2, r3
 800b70c:	d331      	bcc.n	800b772 <quorem+0x9e>
 800b70e:	f04f 0e00 	mov.w	lr, #0
 800b712:	4640      	mov	r0, r8
 800b714:	46ac      	mov	ip, r5
 800b716:	46f2      	mov	sl, lr
 800b718:	f850 2b04 	ldr.w	r2, [r0], #4
 800b71c:	b293      	uxth	r3, r2
 800b71e:	fb06 e303 	mla	r3, r6, r3, lr
 800b722:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b726:	b29b      	uxth	r3, r3
 800b728:	ebaa 0303 	sub.w	r3, sl, r3
 800b72c:	f8dc a000 	ldr.w	sl, [ip]
 800b730:	0c12      	lsrs	r2, r2, #16
 800b732:	fa13 f38a 	uxtah	r3, r3, sl
 800b736:	fb06 e202 	mla	r2, r6, r2, lr
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	9b00      	ldr	r3, [sp, #0]
 800b73e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b742:	b292      	uxth	r2, r2
 800b744:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b748:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b74c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b750:	4581      	cmp	r9, r0
 800b752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b756:	f84c 3b04 	str.w	r3, [ip], #4
 800b75a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b75e:	d2db      	bcs.n	800b718 <quorem+0x44>
 800b760:	f855 300b 	ldr.w	r3, [r5, fp]
 800b764:	b92b      	cbnz	r3, 800b772 <quorem+0x9e>
 800b766:	9b01      	ldr	r3, [sp, #4]
 800b768:	3b04      	subs	r3, #4
 800b76a:	429d      	cmp	r5, r3
 800b76c:	461a      	mov	r2, r3
 800b76e:	d32e      	bcc.n	800b7ce <quorem+0xfa>
 800b770:	613c      	str	r4, [r7, #16]
 800b772:	4638      	mov	r0, r7
 800b774:	f001 fae6 	bl	800cd44 <__mcmp>
 800b778:	2800      	cmp	r0, #0
 800b77a:	db24      	blt.n	800b7c6 <quorem+0xf2>
 800b77c:	3601      	adds	r6, #1
 800b77e:	4628      	mov	r0, r5
 800b780:	f04f 0c00 	mov.w	ip, #0
 800b784:	f858 2b04 	ldr.w	r2, [r8], #4
 800b788:	f8d0 e000 	ldr.w	lr, [r0]
 800b78c:	b293      	uxth	r3, r2
 800b78e:	ebac 0303 	sub.w	r3, ip, r3
 800b792:	0c12      	lsrs	r2, r2, #16
 800b794:	fa13 f38e 	uxtah	r3, r3, lr
 800b798:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b79c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7a6:	45c1      	cmp	r9, r8
 800b7a8:	f840 3b04 	str.w	r3, [r0], #4
 800b7ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7b0:	d2e8      	bcs.n	800b784 <quorem+0xb0>
 800b7b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7ba:	b922      	cbnz	r2, 800b7c6 <quorem+0xf2>
 800b7bc:	3b04      	subs	r3, #4
 800b7be:	429d      	cmp	r5, r3
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	d30a      	bcc.n	800b7da <quorem+0x106>
 800b7c4:	613c      	str	r4, [r7, #16]
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	b003      	add	sp, #12
 800b7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ce:	6812      	ldr	r2, [r2, #0]
 800b7d0:	3b04      	subs	r3, #4
 800b7d2:	2a00      	cmp	r2, #0
 800b7d4:	d1cc      	bne.n	800b770 <quorem+0x9c>
 800b7d6:	3c01      	subs	r4, #1
 800b7d8:	e7c7      	b.n	800b76a <quorem+0x96>
 800b7da:	6812      	ldr	r2, [r2, #0]
 800b7dc:	3b04      	subs	r3, #4
 800b7de:	2a00      	cmp	r2, #0
 800b7e0:	d1f0      	bne.n	800b7c4 <quorem+0xf0>
 800b7e2:	3c01      	subs	r4, #1
 800b7e4:	e7eb      	b.n	800b7be <quorem+0xea>
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	e7ee      	b.n	800b7c8 <quorem+0xf4>
 800b7ea:	0000      	movs	r0, r0
 800b7ec:	0000      	movs	r0, r0
	...

0800b7f0 <_dtoa_r>:
 800b7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f4:	ed2d 8b04 	vpush	{d8-d9}
 800b7f8:	ec57 6b10 	vmov	r6, r7, d0
 800b7fc:	b093      	sub	sp, #76	; 0x4c
 800b7fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b800:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b804:	9106      	str	r1, [sp, #24]
 800b806:	ee10 aa10 	vmov	sl, s0
 800b80a:	4604      	mov	r4, r0
 800b80c:	9209      	str	r2, [sp, #36]	; 0x24
 800b80e:	930c      	str	r3, [sp, #48]	; 0x30
 800b810:	46bb      	mov	fp, r7
 800b812:	b975      	cbnz	r5, 800b832 <_dtoa_r+0x42>
 800b814:	2010      	movs	r0, #16
 800b816:	f000 fffd 	bl	800c814 <malloc>
 800b81a:	4602      	mov	r2, r0
 800b81c:	6260      	str	r0, [r4, #36]	; 0x24
 800b81e:	b920      	cbnz	r0, 800b82a <_dtoa_r+0x3a>
 800b820:	4ba7      	ldr	r3, [pc, #668]	; (800bac0 <_dtoa_r+0x2d0>)
 800b822:	21ea      	movs	r1, #234	; 0xea
 800b824:	48a7      	ldr	r0, [pc, #668]	; (800bac4 <_dtoa_r+0x2d4>)
 800b826:	f001 ffa1 	bl	800d76c <__assert_func>
 800b82a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b82e:	6005      	str	r5, [r0, #0]
 800b830:	60c5      	str	r5, [r0, #12]
 800b832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b834:	6819      	ldr	r1, [r3, #0]
 800b836:	b151      	cbz	r1, 800b84e <_dtoa_r+0x5e>
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	604a      	str	r2, [r1, #4]
 800b83c:	2301      	movs	r3, #1
 800b83e:	4093      	lsls	r3, r2
 800b840:	608b      	str	r3, [r1, #8]
 800b842:	4620      	mov	r0, r4
 800b844:	f001 f83c 	bl	800c8c0 <_Bfree>
 800b848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b84a:	2200      	movs	r2, #0
 800b84c:	601a      	str	r2, [r3, #0]
 800b84e:	1e3b      	subs	r3, r7, #0
 800b850:	bfaa      	itet	ge
 800b852:	2300      	movge	r3, #0
 800b854:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b858:	f8c8 3000 	strge.w	r3, [r8]
 800b85c:	4b9a      	ldr	r3, [pc, #616]	; (800bac8 <_dtoa_r+0x2d8>)
 800b85e:	bfbc      	itt	lt
 800b860:	2201      	movlt	r2, #1
 800b862:	f8c8 2000 	strlt.w	r2, [r8]
 800b866:	ea33 030b 	bics.w	r3, r3, fp
 800b86a:	d11b      	bne.n	800b8a4 <_dtoa_r+0xb4>
 800b86c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b86e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b878:	4333      	orrs	r3, r6
 800b87a:	f000 8592 	beq.w	800c3a2 <_dtoa_r+0xbb2>
 800b87e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b880:	b963      	cbnz	r3, 800b89c <_dtoa_r+0xac>
 800b882:	4b92      	ldr	r3, [pc, #584]	; (800bacc <_dtoa_r+0x2dc>)
 800b884:	e022      	b.n	800b8cc <_dtoa_r+0xdc>
 800b886:	4b92      	ldr	r3, [pc, #584]	; (800bad0 <_dtoa_r+0x2e0>)
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	3308      	adds	r3, #8
 800b88c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b88e:	6013      	str	r3, [r2, #0]
 800b890:	9801      	ldr	r0, [sp, #4]
 800b892:	b013      	add	sp, #76	; 0x4c
 800b894:	ecbd 8b04 	vpop	{d8-d9}
 800b898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89c:	4b8b      	ldr	r3, [pc, #556]	; (800bacc <_dtoa_r+0x2dc>)
 800b89e:	9301      	str	r3, [sp, #4]
 800b8a0:	3303      	adds	r3, #3
 800b8a2:	e7f3      	b.n	800b88c <_dtoa_r+0x9c>
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	4650      	mov	r0, sl
 800b8aa:	4659      	mov	r1, fp
 800b8ac:	f7f5 f92c 	bl	8000b08 <__aeabi_dcmpeq>
 800b8b0:	ec4b ab19 	vmov	d9, sl, fp
 800b8b4:	4680      	mov	r8, r0
 800b8b6:	b158      	cbz	r0, 800b8d0 <_dtoa_r+0xe0>
 800b8b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	6013      	str	r3, [r2, #0]
 800b8be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 856b 	beq.w	800c39c <_dtoa_r+0xbac>
 800b8c6:	4883      	ldr	r0, [pc, #524]	; (800bad4 <_dtoa_r+0x2e4>)
 800b8c8:	6018      	str	r0, [r3, #0]
 800b8ca:	1e43      	subs	r3, r0, #1
 800b8cc:	9301      	str	r3, [sp, #4]
 800b8ce:	e7df      	b.n	800b890 <_dtoa_r+0xa0>
 800b8d0:	ec4b ab10 	vmov	d0, sl, fp
 800b8d4:	aa10      	add	r2, sp, #64	; 0x40
 800b8d6:	a911      	add	r1, sp, #68	; 0x44
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f001 fad9 	bl	800ce90 <__d2b>
 800b8de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b8e2:	ee08 0a10 	vmov	s16, r0
 800b8e6:	2d00      	cmp	r5, #0
 800b8e8:	f000 8084 	beq.w	800b9f4 <_dtoa_r+0x204>
 800b8ec:	ee19 3a90 	vmov	r3, s19
 800b8f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b8f8:	4656      	mov	r6, sl
 800b8fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b8fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b902:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b906:	4b74      	ldr	r3, [pc, #464]	; (800bad8 <_dtoa_r+0x2e8>)
 800b908:	2200      	movs	r2, #0
 800b90a:	4630      	mov	r0, r6
 800b90c:	4639      	mov	r1, r7
 800b90e:	f7f4 fcdb 	bl	80002c8 <__aeabi_dsub>
 800b912:	a365      	add	r3, pc, #404	; (adr r3, 800baa8 <_dtoa_r+0x2b8>)
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	f7f4 fe8e 	bl	8000638 <__aeabi_dmul>
 800b91c:	a364      	add	r3, pc, #400	; (adr r3, 800bab0 <_dtoa_r+0x2c0>)
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	f7f4 fcd3 	bl	80002cc <__adddf3>
 800b926:	4606      	mov	r6, r0
 800b928:	4628      	mov	r0, r5
 800b92a:	460f      	mov	r7, r1
 800b92c:	f7f4 fe1a 	bl	8000564 <__aeabi_i2d>
 800b930:	a361      	add	r3, pc, #388	; (adr r3, 800bab8 <_dtoa_r+0x2c8>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	f7f4 fe7f 	bl	8000638 <__aeabi_dmul>
 800b93a:	4602      	mov	r2, r0
 800b93c:	460b      	mov	r3, r1
 800b93e:	4630      	mov	r0, r6
 800b940:	4639      	mov	r1, r7
 800b942:	f7f4 fcc3 	bl	80002cc <__adddf3>
 800b946:	4606      	mov	r6, r0
 800b948:	460f      	mov	r7, r1
 800b94a:	f7f5 f925 	bl	8000b98 <__aeabi_d2iz>
 800b94e:	2200      	movs	r2, #0
 800b950:	9000      	str	r0, [sp, #0]
 800b952:	2300      	movs	r3, #0
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f7f5 f8e0 	bl	8000b1c <__aeabi_dcmplt>
 800b95c:	b150      	cbz	r0, 800b974 <_dtoa_r+0x184>
 800b95e:	9800      	ldr	r0, [sp, #0]
 800b960:	f7f4 fe00 	bl	8000564 <__aeabi_i2d>
 800b964:	4632      	mov	r2, r6
 800b966:	463b      	mov	r3, r7
 800b968:	f7f5 f8ce 	bl	8000b08 <__aeabi_dcmpeq>
 800b96c:	b910      	cbnz	r0, 800b974 <_dtoa_r+0x184>
 800b96e:	9b00      	ldr	r3, [sp, #0]
 800b970:	3b01      	subs	r3, #1
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	9b00      	ldr	r3, [sp, #0]
 800b976:	2b16      	cmp	r3, #22
 800b978:	d85a      	bhi.n	800ba30 <_dtoa_r+0x240>
 800b97a:	9a00      	ldr	r2, [sp, #0]
 800b97c:	4b57      	ldr	r3, [pc, #348]	; (800badc <_dtoa_r+0x2ec>)
 800b97e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	ec51 0b19 	vmov	r0, r1, d9
 800b98a:	f7f5 f8c7 	bl	8000b1c <__aeabi_dcmplt>
 800b98e:	2800      	cmp	r0, #0
 800b990:	d050      	beq.n	800ba34 <_dtoa_r+0x244>
 800b992:	9b00      	ldr	r3, [sp, #0]
 800b994:	3b01      	subs	r3, #1
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	2300      	movs	r3, #0
 800b99a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b99c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b99e:	1b5d      	subs	r5, r3, r5
 800b9a0:	1e6b      	subs	r3, r5, #1
 800b9a2:	9305      	str	r3, [sp, #20]
 800b9a4:	bf45      	ittet	mi
 800b9a6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9aa:	9304      	strmi	r3, [sp, #16]
 800b9ac:	2300      	movpl	r3, #0
 800b9ae:	2300      	movmi	r3, #0
 800b9b0:	bf4c      	ite	mi
 800b9b2:	9305      	strmi	r3, [sp, #20]
 800b9b4:	9304      	strpl	r3, [sp, #16]
 800b9b6:	9b00      	ldr	r3, [sp, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	db3d      	blt.n	800ba38 <_dtoa_r+0x248>
 800b9bc:	9b05      	ldr	r3, [sp, #20]
 800b9be:	9a00      	ldr	r2, [sp, #0]
 800b9c0:	920a      	str	r2, [sp, #40]	; 0x28
 800b9c2:	4413      	add	r3, r2
 800b9c4:	9305      	str	r3, [sp, #20]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9307      	str	r3, [sp, #28]
 800b9ca:	9b06      	ldr	r3, [sp, #24]
 800b9cc:	2b09      	cmp	r3, #9
 800b9ce:	f200 8089 	bhi.w	800bae4 <_dtoa_r+0x2f4>
 800b9d2:	2b05      	cmp	r3, #5
 800b9d4:	bfc4      	itt	gt
 800b9d6:	3b04      	subgt	r3, #4
 800b9d8:	9306      	strgt	r3, [sp, #24]
 800b9da:	9b06      	ldr	r3, [sp, #24]
 800b9dc:	f1a3 0302 	sub.w	r3, r3, #2
 800b9e0:	bfcc      	ite	gt
 800b9e2:	2500      	movgt	r5, #0
 800b9e4:	2501      	movle	r5, #1
 800b9e6:	2b03      	cmp	r3, #3
 800b9e8:	f200 8087 	bhi.w	800bafa <_dtoa_r+0x30a>
 800b9ec:	e8df f003 	tbb	[pc, r3]
 800b9f0:	59383a2d 	.word	0x59383a2d
 800b9f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b9f8:	441d      	add	r5, r3
 800b9fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9fe:	2b20      	cmp	r3, #32
 800ba00:	bfc1      	itttt	gt
 800ba02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba0a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba12:	bfda      	itte	le
 800ba14:	f1c3 0320 	rsble	r3, r3, #32
 800ba18:	fa06 f003 	lslle.w	r0, r6, r3
 800ba1c:	4318      	orrgt	r0, r3
 800ba1e:	f7f4 fd91 	bl	8000544 <__aeabi_ui2d>
 800ba22:	2301      	movs	r3, #1
 800ba24:	4606      	mov	r6, r0
 800ba26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba2a:	3d01      	subs	r5, #1
 800ba2c:	930e      	str	r3, [sp, #56]	; 0x38
 800ba2e:	e76a      	b.n	800b906 <_dtoa_r+0x116>
 800ba30:	2301      	movs	r3, #1
 800ba32:	e7b2      	b.n	800b99a <_dtoa_r+0x1aa>
 800ba34:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba36:	e7b1      	b.n	800b99c <_dtoa_r+0x1ac>
 800ba38:	9b04      	ldr	r3, [sp, #16]
 800ba3a:	9a00      	ldr	r2, [sp, #0]
 800ba3c:	1a9b      	subs	r3, r3, r2
 800ba3e:	9304      	str	r3, [sp, #16]
 800ba40:	4253      	negs	r3, r2
 800ba42:	9307      	str	r3, [sp, #28]
 800ba44:	2300      	movs	r3, #0
 800ba46:	930a      	str	r3, [sp, #40]	; 0x28
 800ba48:	e7bf      	b.n	800b9ca <_dtoa_r+0x1da>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	9308      	str	r3, [sp, #32]
 800ba4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	dc55      	bgt.n	800bb00 <_dtoa_r+0x310>
 800ba54:	2301      	movs	r3, #1
 800ba56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba5e:	e00c      	b.n	800ba7a <_dtoa_r+0x28a>
 800ba60:	2301      	movs	r3, #1
 800ba62:	e7f3      	b.n	800ba4c <_dtoa_r+0x25c>
 800ba64:	2300      	movs	r3, #0
 800ba66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba68:	9308      	str	r3, [sp, #32]
 800ba6a:	9b00      	ldr	r3, [sp, #0]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	9302      	str	r3, [sp, #8]
 800ba70:	3301      	adds	r3, #1
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	9303      	str	r3, [sp, #12]
 800ba76:	bfb8      	it	lt
 800ba78:	2301      	movlt	r3, #1
 800ba7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	6042      	str	r2, [r0, #4]
 800ba80:	2204      	movs	r2, #4
 800ba82:	f102 0614 	add.w	r6, r2, #20
 800ba86:	429e      	cmp	r6, r3
 800ba88:	6841      	ldr	r1, [r0, #4]
 800ba8a:	d93d      	bls.n	800bb08 <_dtoa_r+0x318>
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f000 fed7 	bl	800c840 <_Balloc>
 800ba92:	9001      	str	r0, [sp, #4]
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d13b      	bne.n	800bb10 <_dtoa_r+0x320>
 800ba98:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <_dtoa_r+0x2f0>)
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800baa0:	e6c0      	b.n	800b824 <_dtoa_r+0x34>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e7df      	b.n	800ba66 <_dtoa_r+0x276>
 800baa6:	bf00      	nop
 800baa8:	636f4361 	.word	0x636f4361
 800baac:	3fd287a7 	.word	0x3fd287a7
 800bab0:	8b60c8b3 	.word	0x8b60c8b3
 800bab4:	3fc68a28 	.word	0x3fc68a28
 800bab8:	509f79fb 	.word	0x509f79fb
 800babc:	3fd34413 	.word	0x3fd34413
 800bac0:	0800ddad 	.word	0x0800ddad
 800bac4:	0800ddc4 	.word	0x0800ddc4
 800bac8:	7ff00000 	.word	0x7ff00000
 800bacc:	0800dda9 	.word	0x0800dda9
 800bad0:	0800dda0 	.word	0x0800dda0
 800bad4:	0800dd7d 	.word	0x0800dd7d
 800bad8:	3ff80000 	.word	0x3ff80000
 800badc:	0800df18 	.word	0x0800df18
 800bae0:	0800de1f 	.word	0x0800de1f
 800bae4:	2501      	movs	r5, #1
 800bae6:	2300      	movs	r3, #0
 800bae8:	9306      	str	r3, [sp, #24]
 800baea:	9508      	str	r5, [sp, #32]
 800baec:	f04f 33ff 	mov.w	r3, #4294967295
 800baf0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800baf4:	2200      	movs	r2, #0
 800baf6:	2312      	movs	r3, #18
 800baf8:	e7b0      	b.n	800ba5c <_dtoa_r+0x26c>
 800bafa:	2301      	movs	r3, #1
 800bafc:	9308      	str	r3, [sp, #32]
 800bafe:	e7f5      	b.n	800baec <_dtoa_r+0x2fc>
 800bb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb06:	e7b8      	b.n	800ba7a <_dtoa_r+0x28a>
 800bb08:	3101      	adds	r1, #1
 800bb0a:	6041      	str	r1, [r0, #4]
 800bb0c:	0052      	lsls	r2, r2, #1
 800bb0e:	e7b8      	b.n	800ba82 <_dtoa_r+0x292>
 800bb10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb12:	9a01      	ldr	r2, [sp, #4]
 800bb14:	601a      	str	r2, [r3, #0]
 800bb16:	9b03      	ldr	r3, [sp, #12]
 800bb18:	2b0e      	cmp	r3, #14
 800bb1a:	f200 809d 	bhi.w	800bc58 <_dtoa_r+0x468>
 800bb1e:	2d00      	cmp	r5, #0
 800bb20:	f000 809a 	beq.w	800bc58 <_dtoa_r+0x468>
 800bb24:	9b00      	ldr	r3, [sp, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	dd32      	ble.n	800bb90 <_dtoa_r+0x3a0>
 800bb2a:	4ab7      	ldr	r2, [pc, #732]	; (800be08 <_dtoa_r+0x618>)
 800bb2c:	f003 030f 	and.w	r3, r3, #15
 800bb30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb38:	9b00      	ldr	r3, [sp, #0]
 800bb3a:	05d8      	lsls	r0, r3, #23
 800bb3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb40:	d516      	bpl.n	800bb70 <_dtoa_r+0x380>
 800bb42:	4bb2      	ldr	r3, [pc, #712]	; (800be0c <_dtoa_r+0x61c>)
 800bb44:	ec51 0b19 	vmov	r0, r1, d9
 800bb48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb4c:	f7f4 fe9e 	bl	800088c <__aeabi_ddiv>
 800bb50:	f007 070f 	and.w	r7, r7, #15
 800bb54:	4682      	mov	sl, r0
 800bb56:	468b      	mov	fp, r1
 800bb58:	2503      	movs	r5, #3
 800bb5a:	4eac      	ldr	r6, [pc, #688]	; (800be0c <_dtoa_r+0x61c>)
 800bb5c:	b957      	cbnz	r7, 800bb74 <_dtoa_r+0x384>
 800bb5e:	4642      	mov	r2, r8
 800bb60:	464b      	mov	r3, r9
 800bb62:	4650      	mov	r0, sl
 800bb64:	4659      	mov	r1, fp
 800bb66:	f7f4 fe91 	bl	800088c <__aeabi_ddiv>
 800bb6a:	4682      	mov	sl, r0
 800bb6c:	468b      	mov	fp, r1
 800bb6e:	e028      	b.n	800bbc2 <_dtoa_r+0x3d2>
 800bb70:	2502      	movs	r5, #2
 800bb72:	e7f2      	b.n	800bb5a <_dtoa_r+0x36a>
 800bb74:	07f9      	lsls	r1, r7, #31
 800bb76:	d508      	bpl.n	800bb8a <_dtoa_r+0x39a>
 800bb78:	4640      	mov	r0, r8
 800bb7a:	4649      	mov	r1, r9
 800bb7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb80:	f7f4 fd5a 	bl	8000638 <__aeabi_dmul>
 800bb84:	3501      	adds	r5, #1
 800bb86:	4680      	mov	r8, r0
 800bb88:	4689      	mov	r9, r1
 800bb8a:	107f      	asrs	r7, r7, #1
 800bb8c:	3608      	adds	r6, #8
 800bb8e:	e7e5      	b.n	800bb5c <_dtoa_r+0x36c>
 800bb90:	f000 809b 	beq.w	800bcca <_dtoa_r+0x4da>
 800bb94:	9b00      	ldr	r3, [sp, #0]
 800bb96:	4f9d      	ldr	r7, [pc, #628]	; (800be0c <_dtoa_r+0x61c>)
 800bb98:	425e      	negs	r6, r3
 800bb9a:	4b9b      	ldr	r3, [pc, #620]	; (800be08 <_dtoa_r+0x618>)
 800bb9c:	f006 020f 	and.w	r2, r6, #15
 800bba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	ec51 0b19 	vmov	r0, r1, d9
 800bbac:	f7f4 fd44 	bl	8000638 <__aeabi_dmul>
 800bbb0:	1136      	asrs	r6, r6, #4
 800bbb2:	4682      	mov	sl, r0
 800bbb4:	468b      	mov	fp, r1
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	2502      	movs	r5, #2
 800bbba:	2e00      	cmp	r6, #0
 800bbbc:	d17a      	bne.n	800bcb4 <_dtoa_r+0x4c4>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1d3      	bne.n	800bb6a <_dtoa_r+0x37a>
 800bbc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 8082 	beq.w	800bcce <_dtoa_r+0x4de>
 800bbca:	4b91      	ldr	r3, [pc, #580]	; (800be10 <_dtoa_r+0x620>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	4650      	mov	r0, sl
 800bbd0:	4659      	mov	r1, fp
 800bbd2:	f7f4 ffa3 	bl	8000b1c <__aeabi_dcmplt>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d079      	beq.n	800bcce <_dtoa_r+0x4de>
 800bbda:	9b03      	ldr	r3, [sp, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d076      	beq.n	800bcce <_dtoa_r+0x4de>
 800bbe0:	9b02      	ldr	r3, [sp, #8]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	dd36      	ble.n	800bc54 <_dtoa_r+0x464>
 800bbe6:	9b00      	ldr	r3, [sp, #0]
 800bbe8:	4650      	mov	r0, sl
 800bbea:	4659      	mov	r1, fp
 800bbec:	1e5f      	subs	r7, r3, #1
 800bbee:	2200      	movs	r2, #0
 800bbf0:	4b88      	ldr	r3, [pc, #544]	; (800be14 <_dtoa_r+0x624>)
 800bbf2:	f7f4 fd21 	bl	8000638 <__aeabi_dmul>
 800bbf6:	9e02      	ldr	r6, [sp, #8]
 800bbf8:	4682      	mov	sl, r0
 800bbfa:	468b      	mov	fp, r1
 800bbfc:	3501      	adds	r5, #1
 800bbfe:	4628      	mov	r0, r5
 800bc00:	f7f4 fcb0 	bl	8000564 <__aeabi_i2d>
 800bc04:	4652      	mov	r2, sl
 800bc06:	465b      	mov	r3, fp
 800bc08:	f7f4 fd16 	bl	8000638 <__aeabi_dmul>
 800bc0c:	4b82      	ldr	r3, [pc, #520]	; (800be18 <_dtoa_r+0x628>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f7f4 fb5c 	bl	80002cc <__adddf3>
 800bc14:	46d0      	mov	r8, sl
 800bc16:	46d9      	mov	r9, fp
 800bc18:	4682      	mov	sl, r0
 800bc1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc1e:	2e00      	cmp	r6, #0
 800bc20:	d158      	bne.n	800bcd4 <_dtoa_r+0x4e4>
 800bc22:	4b7e      	ldr	r3, [pc, #504]	; (800be1c <_dtoa_r+0x62c>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	4640      	mov	r0, r8
 800bc28:	4649      	mov	r1, r9
 800bc2a:	f7f4 fb4d 	bl	80002c8 <__aeabi_dsub>
 800bc2e:	4652      	mov	r2, sl
 800bc30:	465b      	mov	r3, fp
 800bc32:	4680      	mov	r8, r0
 800bc34:	4689      	mov	r9, r1
 800bc36:	f7f4 ff8f 	bl	8000b58 <__aeabi_dcmpgt>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	f040 8295 	bne.w	800c16a <_dtoa_r+0x97a>
 800bc40:	4652      	mov	r2, sl
 800bc42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc46:	4640      	mov	r0, r8
 800bc48:	4649      	mov	r1, r9
 800bc4a:	f7f4 ff67 	bl	8000b1c <__aeabi_dcmplt>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	f040 8289 	bne.w	800c166 <_dtoa_r+0x976>
 800bc54:	ec5b ab19 	vmov	sl, fp, d9
 800bc58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f2c0 8148 	blt.w	800bef0 <_dtoa_r+0x700>
 800bc60:	9a00      	ldr	r2, [sp, #0]
 800bc62:	2a0e      	cmp	r2, #14
 800bc64:	f300 8144 	bgt.w	800bef0 <_dtoa_r+0x700>
 800bc68:	4b67      	ldr	r3, [pc, #412]	; (800be08 <_dtoa_r+0x618>)
 800bc6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f280 80d5 	bge.w	800be24 <_dtoa_r+0x634>
 800bc7a:	9b03      	ldr	r3, [sp, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f300 80d1 	bgt.w	800be24 <_dtoa_r+0x634>
 800bc82:	f040 826f 	bne.w	800c164 <_dtoa_r+0x974>
 800bc86:	4b65      	ldr	r3, [pc, #404]	; (800be1c <_dtoa_r+0x62c>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	4649      	mov	r1, r9
 800bc8e:	f7f4 fcd3 	bl	8000638 <__aeabi_dmul>
 800bc92:	4652      	mov	r2, sl
 800bc94:	465b      	mov	r3, fp
 800bc96:	f7f4 ff55 	bl	8000b44 <__aeabi_dcmpge>
 800bc9a:	9e03      	ldr	r6, [sp, #12]
 800bc9c:	4637      	mov	r7, r6
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f040 8245 	bne.w	800c12e <_dtoa_r+0x93e>
 800bca4:	9d01      	ldr	r5, [sp, #4]
 800bca6:	2331      	movs	r3, #49	; 0x31
 800bca8:	f805 3b01 	strb.w	r3, [r5], #1
 800bcac:	9b00      	ldr	r3, [sp, #0]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	e240      	b.n	800c136 <_dtoa_r+0x946>
 800bcb4:	07f2      	lsls	r2, r6, #31
 800bcb6:	d505      	bpl.n	800bcc4 <_dtoa_r+0x4d4>
 800bcb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcbc:	f7f4 fcbc 	bl	8000638 <__aeabi_dmul>
 800bcc0:	3501      	adds	r5, #1
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	1076      	asrs	r6, r6, #1
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	e777      	b.n	800bbba <_dtoa_r+0x3ca>
 800bcca:	2502      	movs	r5, #2
 800bccc:	e779      	b.n	800bbc2 <_dtoa_r+0x3d2>
 800bcce:	9f00      	ldr	r7, [sp, #0]
 800bcd0:	9e03      	ldr	r6, [sp, #12]
 800bcd2:	e794      	b.n	800bbfe <_dtoa_r+0x40e>
 800bcd4:	9901      	ldr	r1, [sp, #4]
 800bcd6:	4b4c      	ldr	r3, [pc, #304]	; (800be08 <_dtoa_r+0x618>)
 800bcd8:	4431      	add	r1, r6
 800bcda:	910d      	str	r1, [sp, #52]	; 0x34
 800bcdc:	9908      	ldr	r1, [sp, #32]
 800bcde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bce2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bce6:	2900      	cmp	r1, #0
 800bce8:	d043      	beq.n	800bd72 <_dtoa_r+0x582>
 800bcea:	494d      	ldr	r1, [pc, #308]	; (800be20 <_dtoa_r+0x630>)
 800bcec:	2000      	movs	r0, #0
 800bcee:	f7f4 fdcd 	bl	800088c <__aeabi_ddiv>
 800bcf2:	4652      	mov	r2, sl
 800bcf4:	465b      	mov	r3, fp
 800bcf6:	f7f4 fae7 	bl	80002c8 <__aeabi_dsub>
 800bcfa:	9d01      	ldr	r5, [sp, #4]
 800bcfc:	4682      	mov	sl, r0
 800bcfe:	468b      	mov	fp, r1
 800bd00:	4649      	mov	r1, r9
 800bd02:	4640      	mov	r0, r8
 800bd04:	f7f4 ff48 	bl	8000b98 <__aeabi_d2iz>
 800bd08:	4606      	mov	r6, r0
 800bd0a:	f7f4 fc2b 	bl	8000564 <__aeabi_i2d>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4640      	mov	r0, r8
 800bd14:	4649      	mov	r1, r9
 800bd16:	f7f4 fad7 	bl	80002c8 <__aeabi_dsub>
 800bd1a:	3630      	adds	r6, #48	; 0x30
 800bd1c:	f805 6b01 	strb.w	r6, [r5], #1
 800bd20:	4652      	mov	r2, sl
 800bd22:	465b      	mov	r3, fp
 800bd24:	4680      	mov	r8, r0
 800bd26:	4689      	mov	r9, r1
 800bd28:	f7f4 fef8 	bl	8000b1c <__aeabi_dcmplt>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d163      	bne.n	800bdf8 <_dtoa_r+0x608>
 800bd30:	4642      	mov	r2, r8
 800bd32:	464b      	mov	r3, r9
 800bd34:	4936      	ldr	r1, [pc, #216]	; (800be10 <_dtoa_r+0x620>)
 800bd36:	2000      	movs	r0, #0
 800bd38:	f7f4 fac6 	bl	80002c8 <__aeabi_dsub>
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	465b      	mov	r3, fp
 800bd40:	f7f4 feec 	bl	8000b1c <__aeabi_dcmplt>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	f040 80b5 	bne.w	800beb4 <_dtoa_r+0x6c4>
 800bd4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd4c:	429d      	cmp	r5, r3
 800bd4e:	d081      	beq.n	800bc54 <_dtoa_r+0x464>
 800bd50:	4b30      	ldr	r3, [pc, #192]	; (800be14 <_dtoa_r+0x624>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	4650      	mov	r0, sl
 800bd56:	4659      	mov	r1, fp
 800bd58:	f7f4 fc6e 	bl	8000638 <__aeabi_dmul>
 800bd5c:	4b2d      	ldr	r3, [pc, #180]	; (800be14 <_dtoa_r+0x624>)
 800bd5e:	4682      	mov	sl, r0
 800bd60:	468b      	mov	fp, r1
 800bd62:	4640      	mov	r0, r8
 800bd64:	4649      	mov	r1, r9
 800bd66:	2200      	movs	r2, #0
 800bd68:	f7f4 fc66 	bl	8000638 <__aeabi_dmul>
 800bd6c:	4680      	mov	r8, r0
 800bd6e:	4689      	mov	r9, r1
 800bd70:	e7c6      	b.n	800bd00 <_dtoa_r+0x510>
 800bd72:	4650      	mov	r0, sl
 800bd74:	4659      	mov	r1, fp
 800bd76:	f7f4 fc5f 	bl	8000638 <__aeabi_dmul>
 800bd7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd7c:	9d01      	ldr	r5, [sp, #4]
 800bd7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd80:	4682      	mov	sl, r0
 800bd82:	468b      	mov	fp, r1
 800bd84:	4649      	mov	r1, r9
 800bd86:	4640      	mov	r0, r8
 800bd88:	f7f4 ff06 	bl	8000b98 <__aeabi_d2iz>
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	f7f4 fbe9 	bl	8000564 <__aeabi_i2d>
 800bd92:	3630      	adds	r6, #48	; 0x30
 800bd94:	4602      	mov	r2, r0
 800bd96:	460b      	mov	r3, r1
 800bd98:	4640      	mov	r0, r8
 800bd9a:	4649      	mov	r1, r9
 800bd9c:	f7f4 fa94 	bl	80002c8 <__aeabi_dsub>
 800bda0:	f805 6b01 	strb.w	r6, [r5], #1
 800bda4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bda6:	429d      	cmp	r5, r3
 800bda8:	4680      	mov	r8, r0
 800bdaa:	4689      	mov	r9, r1
 800bdac:	f04f 0200 	mov.w	r2, #0
 800bdb0:	d124      	bne.n	800bdfc <_dtoa_r+0x60c>
 800bdb2:	4b1b      	ldr	r3, [pc, #108]	; (800be20 <_dtoa_r+0x630>)
 800bdb4:	4650      	mov	r0, sl
 800bdb6:	4659      	mov	r1, fp
 800bdb8:	f7f4 fa88 	bl	80002cc <__adddf3>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	4640      	mov	r0, r8
 800bdc2:	4649      	mov	r1, r9
 800bdc4:	f7f4 fec8 	bl	8000b58 <__aeabi_dcmpgt>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d173      	bne.n	800beb4 <_dtoa_r+0x6c4>
 800bdcc:	4652      	mov	r2, sl
 800bdce:	465b      	mov	r3, fp
 800bdd0:	4913      	ldr	r1, [pc, #76]	; (800be20 <_dtoa_r+0x630>)
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	f7f4 fa78 	bl	80002c8 <__aeabi_dsub>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4640      	mov	r0, r8
 800bdde:	4649      	mov	r1, r9
 800bde0:	f7f4 fe9c 	bl	8000b1c <__aeabi_dcmplt>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f43f af35 	beq.w	800bc54 <_dtoa_r+0x464>
 800bdea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bdec:	1e6b      	subs	r3, r5, #1
 800bdee:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdf0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdf4:	2b30      	cmp	r3, #48	; 0x30
 800bdf6:	d0f8      	beq.n	800bdea <_dtoa_r+0x5fa>
 800bdf8:	9700      	str	r7, [sp, #0]
 800bdfa:	e049      	b.n	800be90 <_dtoa_r+0x6a0>
 800bdfc:	4b05      	ldr	r3, [pc, #20]	; (800be14 <_dtoa_r+0x624>)
 800bdfe:	f7f4 fc1b 	bl	8000638 <__aeabi_dmul>
 800be02:	4680      	mov	r8, r0
 800be04:	4689      	mov	r9, r1
 800be06:	e7bd      	b.n	800bd84 <_dtoa_r+0x594>
 800be08:	0800df18 	.word	0x0800df18
 800be0c:	0800def0 	.word	0x0800def0
 800be10:	3ff00000 	.word	0x3ff00000
 800be14:	40240000 	.word	0x40240000
 800be18:	401c0000 	.word	0x401c0000
 800be1c:	40140000 	.word	0x40140000
 800be20:	3fe00000 	.word	0x3fe00000
 800be24:	9d01      	ldr	r5, [sp, #4]
 800be26:	4656      	mov	r6, sl
 800be28:	465f      	mov	r7, fp
 800be2a:	4642      	mov	r2, r8
 800be2c:	464b      	mov	r3, r9
 800be2e:	4630      	mov	r0, r6
 800be30:	4639      	mov	r1, r7
 800be32:	f7f4 fd2b 	bl	800088c <__aeabi_ddiv>
 800be36:	f7f4 feaf 	bl	8000b98 <__aeabi_d2iz>
 800be3a:	4682      	mov	sl, r0
 800be3c:	f7f4 fb92 	bl	8000564 <__aeabi_i2d>
 800be40:	4642      	mov	r2, r8
 800be42:	464b      	mov	r3, r9
 800be44:	f7f4 fbf8 	bl	8000638 <__aeabi_dmul>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4630      	mov	r0, r6
 800be4e:	4639      	mov	r1, r7
 800be50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800be54:	f7f4 fa38 	bl	80002c8 <__aeabi_dsub>
 800be58:	f805 6b01 	strb.w	r6, [r5], #1
 800be5c:	9e01      	ldr	r6, [sp, #4]
 800be5e:	9f03      	ldr	r7, [sp, #12]
 800be60:	1bae      	subs	r6, r5, r6
 800be62:	42b7      	cmp	r7, r6
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	d135      	bne.n	800bed6 <_dtoa_r+0x6e6>
 800be6a:	f7f4 fa2f 	bl	80002cc <__adddf3>
 800be6e:	4642      	mov	r2, r8
 800be70:	464b      	mov	r3, r9
 800be72:	4606      	mov	r6, r0
 800be74:	460f      	mov	r7, r1
 800be76:	f7f4 fe6f 	bl	8000b58 <__aeabi_dcmpgt>
 800be7a:	b9d0      	cbnz	r0, 800beb2 <_dtoa_r+0x6c2>
 800be7c:	4642      	mov	r2, r8
 800be7e:	464b      	mov	r3, r9
 800be80:	4630      	mov	r0, r6
 800be82:	4639      	mov	r1, r7
 800be84:	f7f4 fe40 	bl	8000b08 <__aeabi_dcmpeq>
 800be88:	b110      	cbz	r0, 800be90 <_dtoa_r+0x6a0>
 800be8a:	f01a 0f01 	tst.w	sl, #1
 800be8e:	d110      	bne.n	800beb2 <_dtoa_r+0x6c2>
 800be90:	4620      	mov	r0, r4
 800be92:	ee18 1a10 	vmov	r1, s16
 800be96:	f000 fd13 	bl	800c8c0 <_Bfree>
 800be9a:	2300      	movs	r3, #0
 800be9c:	9800      	ldr	r0, [sp, #0]
 800be9e:	702b      	strb	r3, [r5, #0]
 800bea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bea2:	3001      	adds	r0, #1
 800bea4:	6018      	str	r0, [r3, #0]
 800bea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f43f acf1 	beq.w	800b890 <_dtoa_r+0xa0>
 800beae:	601d      	str	r5, [r3, #0]
 800beb0:	e4ee      	b.n	800b890 <_dtoa_r+0xa0>
 800beb2:	9f00      	ldr	r7, [sp, #0]
 800beb4:	462b      	mov	r3, r5
 800beb6:	461d      	mov	r5, r3
 800beb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bebc:	2a39      	cmp	r2, #57	; 0x39
 800bebe:	d106      	bne.n	800bece <_dtoa_r+0x6de>
 800bec0:	9a01      	ldr	r2, [sp, #4]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d1f7      	bne.n	800beb6 <_dtoa_r+0x6c6>
 800bec6:	9901      	ldr	r1, [sp, #4]
 800bec8:	2230      	movs	r2, #48	; 0x30
 800beca:	3701      	adds	r7, #1
 800becc:	700a      	strb	r2, [r1, #0]
 800bece:	781a      	ldrb	r2, [r3, #0]
 800bed0:	3201      	adds	r2, #1
 800bed2:	701a      	strb	r2, [r3, #0]
 800bed4:	e790      	b.n	800bdf8 <_dtoa_r+0x608>
 800bed6:	4ba6      	ldr	r3, [pc, #664]	; (800c170 <_dtoa_r+0x980>)
 800bed8:	2200      	movs	r2, #0
 800beda:	f7f4 fbad 	bl	8000638 <__aeabi_dmul>
 800bede:	2200      	movs	r2, #0
 800bee0:	2300      	movs	r3, #0
 800bee2:	4606      	mov	r6, r0
 800bee4:	460f      	mov	r7, r1
 800bee6:	f7f4 fe0f 	bl	8000b08 <__aeabi_dcmpeq>
 800beea:	2800      	cmp	r0, #0
 800beec:	d09d      	beq.n	800be2a <_dtoa_r+0x63a>
 800beee:	e7cf      	b.n	800be90 <_dtoa_r+0x6a0>
 800bef0:	9a08      	ldr	r2, [sp, #32]
 800bef2:	2a00      	cmp	r2, #0
 800bef4:	f000 80d7 	beq.w	800c0a6 <_dtoa_r+0x8b6>
 800bef8:	9a06      	ldr	r2, [sp, #24]
 800befa:	2a01      	cmp	r2, #1
 800befc:	f300 80ba 	bgt.w	800c074 <_dtoa_r+0x884>
 800bf00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	f000 80b2 	beq.w	800c06c <_dtoa_r+0x87c>
 800bf08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf0c:	9e07      	ldr	r6, [sp, #28]
 800bf0e:	9d04      	ldr	r5, [sp, #16]
 800bf10:	9a04      	ldr	r2, [sp, #16]
 800bf12:	441a      	add	r2, r3
 800bf14:	9204      	str	r2, [sp, #16]
 800bf16:	9a05      	ldr	r2, [sp, #20]
 800bf18:	2101      	movs	r1, #1
 800bf1a:	441a      	add	r2, r3
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	9205      	str	r2, [sp, #20]
 800bf20:	f000 fd86 	bl	800ca30 <__i2b>
 800bf24:	4607      	mov	r7, r0
 800bf26:	2d00      	cmp	r5, #0
 800bf28:	dd0c      	ble.n	800bf44 <_dtoa_r+0x754>
 800bf2a:	9b05      	ldr	r3, [sp, #20]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	dd09      	ble.n	800bf44 <_dtoa_r+0x754>
 800bf30:	42ab      	cmp	r3, r5
 800bf32:	9a04      	ldr	r2, [sp, #16]
 800bf34:	bfa8      	it	ge
 800bf36:	462b      	movge	r3, r5
 800bf38:	1ad2      	subs	r2, r2, r3
 800bf3a:	9204      	str	r2, [sp, #16]
 800bf3c:	9a05      	ldr	r2, [sp, #20]
 800bf3e:	1aed      	subs	r5, r5, r3
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	9305      	str	r3, [sp, #20]
 800bf44:	9b07      	ldr	r3, [sp, #28]
 800bf46:	b31b      	cbz	r3, 800bf90 <_dtoa_r+0x7a0>
 800bf48:	9b08      	ldr	r3, [sp, #32]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 80af 	beq.w	800c0ae <_dtoa_r+0x8be>
 800bf50:	2e00      	cmp	r6, #0
 800bf52:	dd13      	ble.n	800bf7c <_dtoa_r+0x78c>
 800bf54:	4639      	mov	r1, r7
 800bf56:	4632      	mov	r2, r6
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f000 fe29 	bl	800cbb0 <__pow5mult>
 800bf5e:	ee18 2a10 	vmov	r2, s16
 800bf62:	4601      	mov	r1, r0
 800bf64:	4607      	mov	r7, r0
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 fd78 	bl	800ca5c <__multiply>
 800bf6c:	ee18 1a10 	vmov	r1, s16
 800bf70:	4680      	mov	r8, r0
 800bf72:	4620      	mov	r0, r4
 800bf74:	f000 fca4 	bl	800c8c0 <_Bfree>
 800bf78:	ee08 8a10 	vmov	s16, r8
 800bf7c:	9b07      	ldr	r3, [sp, #28]
 800bf7e:	1b9a      	subs	r2, r3, r6
 800bf80:	d006      	beq.n	800bf90 <_dtoa_r+0x7a0>
 800bf82:	ee18 1a10 	vmov	r1, s16
 800bf86:	4620      	mov	r0, r4
 800bf88:	f000 fe12 	bl	800cbb0 <__pow5mult>
 800bf8c:	ee08 0a10 	vmov	s16, r0
 800bf90:	2101      	movs	r1, #1
 800bf92:	4620      	mov	r0, r4
 800bf94:	f000 fd4c 	bl	800ca30 <__i2b>
 800bf98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	4606      	mov	r6, r0
 800bf9e:	f340 8088 	ble.w	800c0b2 <_dtoa_r+0x8c2>
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	4601      	mov	r1, r0
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f000 fe02 	bl	800cbb0 <__pow5mult>
 800bfac:	9b06      	ldr	r3, [sp, #24]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	f340 8081 	ble.w	800c0b8 <_dtoa_r+0x8c8>
 800bfb6:	f04f 0800 	mov.w	r8, #0
 800bfba:	6933      	ldr	r3, [r6, #16]
 800bfbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfc0:	6918      	ldr	r0, [r3, #16]
 800bfc2:	f000 fce5 	bl	800c990 <__hi0bits>
 800bfc6:	f1c0 0020 	rsb	r0, r0, #32
 800bfca:	9b05      	ldr	r3, [sp, #20]
 800bfcc:	4418      	add	r0, r3
 800bfce:	f010 001f 	ands.w	r0, r0, #31
 800bfd2:	f000 8092 	beq.w	800c0fa <_dtoa_r+0x90a>
 800bfd6:	f1c0 0320 	rsb	r3, r0, #32
 800bfda:	2b04      	cmp	r3, #4
 800bfdc:	f340 808a 	ble.w	800c0f4 <_dtoa_r+0x904>
 800bfe0:	f1c0 001c 	rsb	r0, r0, #28
 800bfe4:	9b04      	ldr	r3, [sp, #16]
 800bfe6:	4403      	add	r3, r0
 800bfe8:	9304      	str	r3, [sp, #16]
 800bfea:	9b05      	ldr	r3, [sp, #20]
 800bfec:	4403      	add	r3, r0
 800bfee:	4405      	add	r5, r0
 800bff0:	9305      	str	r3, [sp, #20]
 800bff2:	9b04      	ldr	r3, [sp, #16]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dd07      	ble.n	800c008 <_dtoa_r+0x818>
 800bff8:	ee18 1a10 	vmov	r1, s16
 800bffc:	461a      	mov	r2, r3
 800bffe:	4620      	mov	r0, r4
 800c000:	f000 fe30 	bl	800cc64 <__lshift>
 800c004:	ee08 0a10 	vmov	s16, r0
 800c008:	9b05      	ldr	r3, [sp, #20]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	dd05      	ble.n	800c01a <_dtoa_r+0x82a>
 800c00e:	4631      	mov	r1, r6
 800c010:	461a      	mov	r2, r3
 800c012:	4620      	mov	r0, r4
 800c014:	f000 fe26 	bl	800cc64 <__lshift>
 800c018:	4606      	mov	r6, r0
 800c01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d06e      	beq.n	800c0fe <_dtoa_r+0x90e>
 800c020:	ee18 0a10 	vmov	r0, s16
 800c024:	4631      	mov	r1, r6
 800c026:	f000 fe8d 	bl	800cd44 <__mcmp>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	da67      	bge.n	800c0fe <_dtoa_r+0x90e>
 800c02e:	9b00      	ldr	r3, [sp, #0]
 800c030:	3b01      	subs	r3, #1
 800c032:	ee18 1a10 	vmov	r1, s16
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	220a      	movs	r2, #10
 800c03a:	2300      	movs	r3, #0
 800c03c:	4620      	mov	r0, r4
 800c03e:	f000 fc61 	bl	800c904 <__multadd>
 800c042:	9b08      	ldr	r3, [sp, #32]
 800c044:	ee08 0a10 	vmov	s16, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f000 81b1 	beq.w	800c3b0 <_dtoa_r+0xbc0>
 800c04e:	2300      	movs	r3, #0
 800c050:	4639      	mov	r1, r7
 800c052:	220a      	movs	r2, #10
 800c054:	4620      	mov	r0, r4
 800c056:	f000 fc55 	bl	800c904 <__multadd>
 800c05a:	9b02      	ldr	r3, [sp, #8]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	4607      	mov	r7, r0
 800c060:	f300 808e 	bgt.w	800c180 <_dtoa_r+0x990>
 800c064:	9b06      	ldr	r3, [sp, #24]
 800c066:	2b02      	cmp	r3, #2
 800c068:	dc51      	bgt.n	800c10e <_dtoa_r+0x91e>
 800c06a:	e089      	b.n	800c180 <_dtoa_r+0x990>
 800c06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c06e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c072:	e74b      	b.n	800bf0c <_dtoa_r+0x71c>
 800c074:	9b03      	ldr	r3, [sp, #12]
 800c076:	1e5e      	subs	r6, r3, #1
 800c078:	9b07      	ldr	r3, [sp, #28]
 800c07a:	42b3      	cmp	r3, r6
 800c07c:	bfbf      	itttt	lt
 800c07e:	9b07      	ldrlt	r3, [sp, #28]
 800c080:	9607      	strlt	r6, [sp, #28]
 800c082:	1af2      	sublt	r2, r6, r3
 800c084:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c086:	bfb6      	itet	lt
 800c088:	189b      	addlt	r3, r3, r2
 800c08a:	1b9e      	subge	r6, r3, r6
 800c08c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c08e:	9b03      	ldr	r3, [sp, #12]
 800c090:	bfb8      	it	lt
 800c092:	2600      	movlt	r6, #0
 800c094:	2b00      	cmp	r3, #0
 800c096:	bfb7      	itett	lt
 800c098:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c09c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c0a0:	1a9d      	sublt	r5, r3, r2
 800c0a2:	2300      	movlt	r3, #0
 800c0a4:	e734      	b.n	800bf10 <_dtoa_r+0x720>
 800c0a6:	9e07      	ldr	r6, [sp, #28]
 800c0a8:	9d04      	ldr	r5, [sp, #16]
 800c0aa:	9f08      	ldr	r7, [sp, #32]
 800c0ac:	e73b      	b.n	800bf26 <_dtoa_r+0x736>
 800c0ae:	9a07      	ldr	r2, [sp, #28]
 800c0b0:	e767      	b.n	800bf82 <_dtoa_r+0x792>
 800c0b2:	9b06      	ldr	r3, [sp, #24]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	dc18      	bgt.n	800c0ea <_dtoa_r+0x8fa>
 800c0b8:	f1ba 0f00 	cmp.w	sl, #0
 800c0bc:	d115      	bne.n	800c0ea <_dtoa_r+0x8fa>
 800c0be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0c2:	b993      	cbnz	r3, 800c0ea <_dtoa_r+0x8fa>
 800c0c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0c8:	0d1b      	lsrs	r3, r3, #20
 800c0ca:	051b      	lsls	r3, r3, #20
 800c0cc:	b183      	cbz	r3, 800c0f0 <_dtoa_r+0x900>
 800c0ce:	9b04      	ldr	r3, [sp, #16]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	9b05      	ldr	r3, [sp, #20]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	9305      	str	r3, [sp, #20]
 800c0da:	f04f 0801 	mov.w	r8, #1
 800c0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f47f af6a 	bne.w	800bfba <_dtoa_r+0x7ca>
 800c0e6:	2001      	movs	r0, #1
 800c0e8:	e76f      	b.n	800bfca <_dtoa_r+0x7da>
 800c0ea:	f04f 0800 	mov.w	r8, #0
 800c0ee:	e7f6      	b.n	800c0de <_dtoa_r+0x8ee>
 800c0f0:	4698      	mov	r8, r3
 800c0f2:	e7f4      	b.n	800c0de <_dtoa_r+0x8ee>
 800c0f4:	f43f af7d 	beq.w	800bff2 <_dtoa_r+0x802>
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	301c      	adds	r0, #28
 800c0fc:	e772      	b.n	800bfe4 <_dtoa_r+0x7f4>
 800c0fe:	9b03      	ldr	r3, [sp, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	dc37      	bgt.n	800c174 <_dtoa_r+0x984>
 800c104:	9b06      	ldr	r3, [sp, #24]
 800c106:	2b02      	cmp	r3, #2
 800c108:	dd34      	ble.n	800c174 <_dtoa_r+0x984>
 800c10a:	9b03      	ldr	r3, [sp, #12]
 800c10c:	9302      	str	r3, [sp, #8]
 800c10e:	9b02      	ldr	r3, [sp, #8]
 800c110:	b96b      	cbnz	r3, 800c12e <_dtoa_r+0x93e>
 800c112:	4631      	mov	r1, r6
 800c114:	2205      	movs	r2, #5
 800c116:	4620      	mov	r0, r4
 800c118:	f000 fbf4 	bl	800c904 <__multadd>
 800c11c:	4601      	mov	r1, r0
 800c11e:	4606      	mov	r6, r0
 800c120:	ee18 0a10 	vmov	r0, s16
 800c124:	f000 fe0e 	bl	800cd44 <__mcmp>
 800c128:	2800      	cmp	r0, #0
 800c12a:	f73f adbb 	bgt.w	800bca4 <_dtoa_r+0x4b4>
 800c12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c130:	9d01      	ldr	r5, [sp, #4]
 800c132:	43db      	mvns	r3, r3
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	f04f 0800 	mov.w	r8, #0
 800c13a:	4631      	mov	r1, r6
 800c13c:	4620      	mov	r0, r4
 800c13e:	f000 fbbf 	bl	800c8c0 <_Bfree>
 800c142:	2f00      	cmp	r7, #0
 800c144:	f43f aea4 	beq.w	800be90 <_dtoa_r+0x6a0>
 800c148:	f1b8 0f00 	cmp.w	r8, #0
 800c14c:	d005      	beq.n	800c15a <_dtoa_r+0x96a>
 800c14e:	45b8      	cmp	r8, r7
 800c150:	d003      	beq.n	800c15a <_dtoa_r+0x96a>
 800c152:	4641      	mov	r1, r8
 800c154:	4620      	mov	r0, r4
 800c156:	f000 fbb3 	bl	800c8c0 <_Bfree>
 800c15a:	4639      	mov	r1, r7
 800c15c:	4620      	mov	r0, r4
 800c15e:	f000 fbaf 	bl	800c8c0 <_Bfree>
 800c162:	e695      	b.n	800be90 <_dtoa_r+0x6a0>
 800c164:	2600      	movs	r6, #0
 800c166:	4637      	mov	r7, r6
 800c168:	e7e1      	b.n	800c12e <_dtoa_r+0x93e>
 800c16a:	9700      	str	r7, [sp, #0]
 800c16c:	4637      	mov	r7, r6
 800c16e:	e599      	b.n	800bca4 <_dtoa_r+0x4b4>
 800c170:	40240000 	.word	0x40240000
 800c174:	9b08      	ldr	r3, [sp, #32]
 800c176:	2b00      	cmp	r3, #0
 800c178:	f000 80ca 	beq.w	800c310 <_dtoa_r+0xb20>
 800c17c:	9b03      	ldr	r3, [sp, #12]
 800c17e:	9302      	str	r3, [sp, #8]
 800c180:	2d00      	cmp	r5, #0
 800c182:	dd05      	ble.n	800c190 <_dtoa_r+0x9a0>
 800c184:	4639      	mov	r1, r7
 800c186:	462a      	mov	r2, r5
 800c188:	4620      	mov	r0, r4
 800c18a:	f000 fd6b 	bl	800cc64 <__lshift>
 800c18e:	4607      	mov	r7, r0
 800c190:	f1b8 0f00 	cmp.w	r8, #0
 800c194:	d05b      	beq.n	800c24e <_dtoa_r+0xa5e>
 800c196:	6879      	ldr	r1, [r7, #4]
 800c198:	4620      	mov	r0, r4
 800c19a:	f000 fb51 	bl	800c840 <_Balloc>
 800c19e:	4605      	mov	r5, r0
 800c1a0:	b928      	cbnz	r0, 800c1ae <_dtoa_r+0x9be>
 800c1a2:	4b87      	ldr	r3, [pc, #540]	; (800c3c0 <_dtoa_r+0xbd0>)
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1aa:	f7ff bb3b 	b.w	800b824 <_dtoa_r+0x34>
 800c1ae:	693a      	ldr	r2, [r7, #16]
 800c1b0:	3202      	adds	r2, #2
 800c1b2:	0092      	lsls	r2, r2, #2
 800c1b4:	f107 010c 	add.w	r1, r7, #12
 800c1b8:	300c      	adds	r0, #12
 800c1ba:	f000 fb33 	bl	800c824 <memcpy>
 800c1be:	2201      	movs	r2, #1
 800c1c0:	4629      	mov	r1, r5
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f000 fd4e 	bl	800cc64 <__lshift>
 800c1c8:	9b01      	ldr	r3, [sp, #4]
 800c1ca:	f103 0901 	add.w	r9, r3, #1
 800c1ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	9305      	str	r3, [sp, #20]
 800c1d6:	f00a 0301 	and.w	r3, sl, #1
 800c1da:	46b8      	mov	r8, r7
 800c1dc:	9304      	str	r3, [sp, #16]
 800c1de:	4607      	mov	r7, r0
 800c1e0:	4631      	mov	r1, r6
 800c1e2:	ee18 0a10 	vmov	r0, s16
 800c1e6:	f7ff fa75 	bl	800b6d4 <quorem>
 800c1ea:	4641      	mov	r1, r8
 800c1ec:	9002      	str	r0, [sp, #8]
 800c1ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c1f2:	ee18 0a10 	vmov	r0, s16
 800c1f6:	f000 fda5 	bl	800cd44 <__mcmp>
 800c1fa:	463a      	mov	r2, r7
 800c1fc:	9003      	str	r0, [sp, #12]
 800c1fe:	4631      	mov	r1, r6
 800c200:	4620      	mov	r0, r4
 800c202:	f000 fdbb 	bl	800cd7c <__mdiff>
 800c206:	68c2      	ldr	r2, [r0, #12]
 800c208:	f109 3bff 	add.w	fp, r9, #4294967295
 800c20c:	4605      	mov	r5, r0
 800c20e:	bb02      	cbnz	r2, 800c252 <_dtoa_r+0xa62>
 800c210:	4601      	mov	r1, r0
 800c212:	ee18 0a10 	vmov	r0, s16
 800c216:	f000 fd95 	bl	800cd44 <__mcmp>
 800c21a:	4602      	mov	r2, r0
 800c21c:	4629      	mov	r1, r5
 800c21e:	4620      	mov	r0, r4
 800c220:	9207      	str	r2, [sp, #28]
 800c222:	f000 fb4d 	bl	800c8c0 <_Bfree>
 800c226:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c22a:	ea43 0102 	orr.w	r1, r3, r2
 800c22e:	9b04      	ldr	r3, [sp, #16]
 800c230:	430b      	orrs	r3, r1
 800c232:	464d      	mov	r5, r9
 800c234:	d10f      	bne.n	800c256 <_dtoa_r+0xa66>
 800c236:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c23a:	d02a      	beq.n	800c292 <_dtoa_r+0xaa2>
 800c23c:	9b03      	ldr	r3, [sp, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	dd02      	ble.n	800c248 <_dtoa_r+0xa58>
 800c242:	9b02      	ldr	r3, [sp, #8]
 800c244:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c248:	f88b a000 	strb.w	sl, [fp]
 800c24c:	e775      	b.n	800c13a <_dtoa_r+0x94a>
 800c24e:	4638      	mov	r0, r7
 800c250:	e7ba      	b.n	800c1c8 <_dtoa_r+0x9d8>
 800c252:	2201      	movs	r2, #1
 800c254:	e7e2      	b.n	800c21c <_dtoa_r+0xa2c>
 800c256:	9b03      	ldr	r3, [sp, #12]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	db04      	blt.n	800c266 <_dtoa_r+0xa76>
 800c25c:	9906      	ldr	r1, [sp, #24]
 800c25e:	430b      	orrs	r3, r1
 800c260:	9904      	ldr	r1, [sp, #16]
 800c262:	430b      	orrs	r3, r1
 800c264:	d122      	bne.n	800c2ac <_dtoa_r+0xabc>
 800c266:	2a00      	cmp	r2, #0
 800c268:	ddee      	ble.n	800c248 <_dtoa_r+0xa58>
 800c26a:	ee18 1a10 	vmov	r1, s16
 800c26e:	2201      	movs	r2, #1
 800c270:	4620      	mov	r0, r4
 800c272:	f000 fcf7 	bl	800cc64 <__lshift>
 800c276:	4631      	mov	r1, r6
 800c278:	ee08 0a10 	vmov	s16, r0
 800c27c:	f000 fd62 	bl	800cd44 <__mcmp>
 800c280:	2800      	cmp	r0, #0
 800c282:	dc03      	bgt.n	800c28c <_dtoa_r+0xa9c>
 800c284:	d1e0      	bne.n	800c248 <_dtoa_r+0xa58>
 800c286:	f01a 0f01 	tst.w	sl, #1
 800c28a:	d0dd      	beq.n	800c248 <_dtoa_r+0xa58>
 800c28c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c290:	d1d7      	bne.n	800c242 <_dtoa_r+0xa52>
 800c292:	2339      	movs	r3, #57	; 0x39
 800c294:	f88b 3000 	strb.w	r3, [fp]
 800c298:	462b      	mov	r3, r5
 800c29a:	461d      	mov	r5, r3
 800c29c:	3b01      	subs	r3, #1
 800c29e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2a2:	2a39      	cmp	r2, #57	; 0x39
 800c2a4:	d071      	beq.n	800c38a <_dtoa_r+0xb9a>
 800c2a6:	3201      	adds	r2, #1
 800c2a8:	701a      	strb	r2, [r3, #0]
 800c2aa:	e746      	b.n	800c13a <_dtoa_r+0x94a>
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	dd07      	ble.n	800c2c0 <_dtoa_r+0xad0>
 800c2b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2b4:	d0ed      	beq.n	800c292 <_dtoa_r+0xaa2>
 800c2b6:	f10a 0301 	add.w	r3, sl, #1
 800c2ba:	f88b 3000 	strb.w	r3, [fp]
 800c2be:	e73c      	b.n	800c13a <_dtoa_r+0x94a>
 800c2c0:	9b05      	ldr	r3, [sp, #20]
 800c2c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c2c6:	4599      	cmp	r9, r3
 800c2c8:	d047      	beq.n	800c35a <_dtoa_r+0xb6a>
 800c2ca:	ee18 1a10 	vmov	r1, s16
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	220a      	movs	r2, #10
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 fb16 	bl	800c904 <__multadd>
 800c2d8:	45b8      	cmp	r8, r7
 800c2da:	ee08 0a10 	vmov	s16, r0
 800c2de:	f04f 0300 	mov.w	r3, #0
 800c2e2:	f04f 020a 	mov.w	r2, #10
 800c2e6:	4641      	mov	r1, r8
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	d106      	bne.n	800c2fa <_dtoa_r+0xb0a>
 800c2ec:	f000 fb0a 	bl	800c904 <__multadd>
 800c2f0:	4680      	mov	r8, r0
 800c2f2:	4607      	mov	r7, r0
 800c2f4:	f109 0901 	add.w	r9, r9, #1
 800c2f8:	e772      	b.n	800c1e0 <_dtoa_r+0x9f0>
 800c2fa:	f000 fb03 	bl	800c904 <__multadd>
 800c2fe:	4639      	mov	r1, r7
 800c300:	4680      	mov	r8, r0
 800c302:	2300      	movs	r3, #0
 800c304:	220a      	movs	r2, #10
 800c306:	4620      	mov	r0, r4
 800c308:	f000 fafc 	bl	800c904 <__multadd>
 800c30c:	4607      	mov	r7, r0
 800c30e:	e7f1      	b.n	800c2f4 <_dtoa_r+0xb04>
 800c310:	9b03      	ldr	r3, [sp, #12]
 800c312:	9302      	str	r3, [sp, #8]
 800c314:	9d01      	ldr	r5, [sp, #4]
 800c316:	ee18 0a10 	vmov	r0, s16
 800c31a:	4631      	mov	r1, r6
 800c31c:	f7ff f9da 	bl	800b6d4 <quorem>
 800c320:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c324:	9b01      	ldr	r3, [sp, #4]
 800c326:	f805 ab01 	strb.w	sl, [r5], #1
 800c32a:	1aea      	subs	r2, r5, r3
 800c32c:	9b02      	ldr	r3, [sp, #8]
 800c32e:	4293      	cmp	r3, r2
 800c330:	dd09      	ble.n	800c346 <_dtoa_r+0xb56>
 800c332:	ee18 1a10 	vmov	r1, s16
 800c336:	2300      	movs	r3, #0
 800c338:	220a      	movs	r2, #10
 800c33a:	4620      	mov	r0, r4
 800c33c:	f000 fae2 	bl	800c904 <__multadd>
 800c340:	ee08 0a10 	vmov	s16, r0
 800c344:	e7e7      	b.n	800c316 <_dtoa_r+0xb26>
 800c346:	9b02      	ldr	r3, [sp, #8]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	bfc8      	it	gt
 800c34c:	461d      	movgt	r5, r3
 800c34e:	9b01      	ldr	r3, [sp, #4]
 800c350:	bfd8      	it	le
 800c352:	2501      	movle	r5, #1
 800c354:	441d      	add	r5, r3
 800c356:	f04f 0800 	mov.w	r8, #0
 800c35a:	ee18 1a10 	vmov	r1, s16
 800c35e:	2201      	movs	r2, #1
 800c360:	4620      	mov	r0, r4
 800c362:	f000 fc7f 	bl	800cc64 <__lshift>
 800c366:	4631      	mov	r1, r6
 800c368:	ee08 0a10 	vmov	s16, r0
 800c36c:	f000 fcea 	bl	800cd44 <__mcmp>
 800c370:	2800      	cmp	r0, #0
 800c372:	dc91      	bgt.n	800c298 <_dtoa_r+0xaa8>
 800c374:	d102      	bne.n	800c37c <_dtoa_r+0xb8c>
 800c376:	f01a 0f01 	tst.w	sl, #1
 800c37a:	d18d      	bne.n	800c298 <_dtoa_r+0xaa8>
 800c37c:	462b      	mov	r3, r5
 800c37e:	461d      	mov	r5, r3
 800c380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c384:	2a30      	cmp	r2, #48	; 0x30
 800c386:	d0fa      	beq.n	800c37e <_dtoa_r+0xb8e>
 800c388:	e6d7      	b.n	800c13a <_dtoa_r+0x94a>
 800c38a:	9a01      	ldr	r2, [sp, #4]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d184      	bne.n	800c29a <_dtoa_r+0xaaa>
 800c390:	9b00      	ldr	r3, [sp, #0]
 800c392:	3301      	adds	r3, #1
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	2331      	movs	r3, #49	; 0x31
 800c398:	7013      	strb	r3, [r2, #0]
 800c39a:	e6ce      	b.n	800c13a <_dtoa_r+0x94a>
 800c39c:	4b09      	ldr	r3, [pc, #36]	; (800c3c4 <_dtoa_r+0xbd4>)
 800c39e:	f7ff ba95 	b.w	800b8cc <_dtoa_r+0xdc>
 800c3a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f47f aa6e 	bne.w	800b886 <_dtoa_r+0x96>
 800c3aa:	4b07      	ldr	r3, [pc, #28]	; (800c3c8 <_dtoa_r+0xbd8>)
 800c3ac:	f7ff ba8e 	b.w	800b8cc <_dtoa_r+0xdc>
 800c3b0:	9b02      	ldr	r3, [sp, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	dcae      	bgt.n	800c314 <_dtoa_r+0xb24>
 800c3b6:	9b06      	ldr	r3, [sp, #24]
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	f73f aea8 	bgt.w	800c10e <_dtoa_r+0x91e>
 800c3be:	e7a9      	b.n	800c314 <_dtoa_r+0xb24>
 800c3c0:	0800de1f 	.word	0x0800de1f
 800c3c4:	0800dd7c 	.word	0x0800dd7c
 800c3c8:	0800dda0 	.word	0x0800dda0

0800c3cc <__sflush_r>:
 800c3cc:	898a      	ldrh	r2, [r1, #12]
 800c3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	0710      	lsls	r0, r2, #28
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	d458      	bmi.n	800c48c <__sflush_r+0xc0>
 800c3da:	684b      	ldr	r3, [r1, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dc05      	bgt.n	800c3ec <__sflush_r+0x20>
 800c3e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	dc02      	bgt.n	800c3ec <__sflush_r+0x20>
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3ee:	2e00      	cmp	r6, #0
 800c3f0:	d0f9      	beq.n	800c3e6 <__sflush_r+0x1a>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3f8:	682f      	ldr	r7, [r5, #0]
 800c3fa:	602b      	str	r3, [r5, #0]
 800c3fc:	d032      	beq.n	800c464 <__sflush_r+0x98>
 800c3fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	075a      	lsls	r2, r3, #29
 800c404:	d505      	bpl.n	800c412 <__sflush_r+0x46>
 800c406:	6863      	ldr	r3, [r4, #4]
 800c408:	1ac0      	subs	r0, r0, r3
 800c40a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c40c:	b10b      	cbz	r3, 800c412 <__sflush_r+0x46>
 800c40e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c410:	1ac0      	subs	r0, r0, r3
 800c412:	2300      	movs	r3, #0
 800c414:	4602      	mov	r2, r0
 800c416:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c418:	6a21      	ldr	r1, [r4, #32]
 800c41a:	4628      	mov	r0, r5
 800c41c:	47b0      	blx	r6
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	89a3      	ldrh	r3, [r4, #12]
 800c422:	d106      	bne.n	800c432 <__sflush_r+0x66>
 800c424:	6829      	ldr	r1, [r5, #0]
 800c426:	291d      	cmp	r1, #29
 800c428:	d82c      	bhi.n	800c484 <__sflush_r+0xb8>
 800c42a:	4a2a      	ldr	r2, [pc, #168]	; (800c4d4 <__sflush_r+0x108>)
 800c42c:	40ca      	lsrs	r2, r1
 800c42e:	07d6      	lsls	r6, r2, #31
 800c430:	d528      	bpl.n	800c484 <__sflush_r+0xb8>
 800c432:	2200      	movs	r2, #0
 800c434:	6062      	str	r2, [r4, #4]
 800c436:	04d9      	lsls	r1, r3, #19
 800c438:	6922      	ldr	r2, [r4, #16]
 800c43a:	6022      	str	r2, [r4, #0]
 800c43c:	d504      	bpl.n	800c448 <__sflush_r+0x7c>
 800c43e:	1c42      	adds	r2, r0, #1
 800c440:	d101      	bne.n	800c446 <__sflush_r+0x7a>
 800c442:	682b      	ldr	r3, [r5, #0]
 800c444:	b903      	cbnz	r3, 800c448 <__sflush_r+0x7c>
 800c446:	6560      	str	r0, [r4, #84]	; 0x54
 800c448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c44a:	602f      	str	r7, [r5, #0]
 800c44c:	2900      	cmp	r1, #0
 800c44e:	d0ca      	beq.n	800c3e6 <__sflush_r+0x1a>
 800c450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c454:	4299      	cmp	r1, r3
 800c456:	d002      	beq.n	800c45e <__sflush_r+0x92>
 800c458:	4628      	mov	r0, r5
 800c45a:	f000 fd8b 	bl	800cf74 <_free_r>
 800c45e:	2000      	movs	r0, #0
 800c460:	6360      	str	r0, [r4, #52]	; 0x34
 800c462:	e7c1      	b.n	800c3e8 <__sflush_r+0x1c>
 800c464:	6a21      	ldr	r1, [r4, #32]
 800c466:	2301      	movs	r3, #1
 800c468:	4628      	mov	r0, r5
 800c46a:	47b0      	blx	r6
 800c46c:	1c41      	adds	r1, r0, #1
 800c46e:	d1c7      	bne.n	800c400 <__sflush_r+0x34>
 800c470:	682b      	ldr	r3, [r5, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d0c4      	beq.n	800c400 <__sflush_r+0x34>
 800c476:	2b1d      	cmp	r3, #29
 800c478:	d001      	beq.n	800c47e <__sflush_r+0xb2>
 800c47a:	2b16      	cmp	r3, #22
 800c47c:	d101      	bne.n	800c482 <__sflush_r+0xb6>
 800c47e:	602f      	str	r7, [r5, #0]
 800c480:	e7b1      	b.n	800c3e6 <__sflush_r+0x1a>
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c488:	81a3      	strh	r3, [r4, #12]
 800c48a:	e7ad      	b.n	800c3e8 <__sflush_r+0x1c>
 800c48c:	690f      	ldr	r7, [r1, #16]
 800c48e:	2f00      	cmp	r7, #0
 800c490:	d0a9      	beq.n	800c3e6 <__sflush_r+0x1a>
 800c492:	0793      	lsls	r3, r2, #30
 800c494:	680e      	ldr	r6, [r1, #0]
 800c496:	bf08      	it	eq
 800c498:	694b      	ldreq	r3, [r1, #20]
 800c49a:	600f      	str	r7, [r1, #0]
 800c49c:	bf18      	it	ne
 800c49e:	2300      	movne	r3, #0
 800c4a0:	eba6 0807 	sub.w	r8, r6, r7
 800c4a4:	608b      	str	r3, [r1, #8]
 800c4a6:	f1b8 0f00 	cmp.w	r8, #0
 800c4aa:	dd9c      	ble.n	800c3e6 <__sflush_r+0x1a>
 800c4ac:	6a21      	ldr	r1, [r4, #32]
 800c4ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4b0:	4643      	mov	r3, r8
 800c4b2:	463a      	mov	r2, r7
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	47b0      	blx	r6
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	dc06      	bgt.n	800c4ca <__sflush_r+0xfe>
 800c4bc:	89a3      	ldrh	r3, [r4, #12]
 800c4be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4c2:	81a3      	strh	r3, [r4, #12]
 800c4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c8:	e78e      	b.n	800c3e8 <__sflush_r+0x1c>
 800c4ca:	4407      	add	r7, r0
 800c4cc:	eba8 0800 	sub.w	r8, r8, r0
 800c4d0:	e7e9      	b.n	800c4a6 <__sflush_r+0xda>
 800c4d2:	bf00      	nop
 800c4d4:	20400001 	.word	0x20400001

0800c4d8 <_fflush_r>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	690b      	ldr	r3, [r1, #16]
 800c4dc:	4605      	mov	r5, r0
 800c4de:	460c      	mov	r4, r1
 800c4e0:	b913      	cbnz	r3, 800c4e8 <_fflush_r+0x10>
 800c4e2:	2500      	movs	r5, #0
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	bd38      	pop	{r3, r4, r5, pc}
 800c4e8:	b118      	cbz	r0, 800c4f2 <_fflush_r+0x1a>
 800c4ea:	6983      	ldr	r3, [r0, #24]
 800c4ec:	b90b      	cbnz	r3, 800c4f2 <_fflush_r+0x1a>
 800c4ee:	f000 f887 	bl	800c600 <__sinit>
 800c4f2:	4b14      	ldr	r3, [pc, #80]	; (800c544 <_fflush_r+0x6c>)
 800c4f4:	429c      	cmp	r4, r3
 800c4f6:	d11b      	bne.n	800c530 <_fflush_r+0x58>
 800c4f8:	686c      	ldr	r4, [r5, #4]
 800c4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d0ef      	beq.n	800c4e2 <_fflush_r+0xa>
 800c502:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c504:	07d0      	lsls	r0, r2, #31
 800c506:	d404      	bmi.n	800c512 <_fflush_r+0x3a>
 800c508:	0599      	lsls	r1, r3, #22
 800c50a:	d402      	bmi.n	800c512 <_fflush_r+0x3a>
 800c50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c50e:	f000 f91a 	bl	800c746 <__retarget_lock_acquire_recursive>
 800c512:	4628      	mov	r0, r5
 800c514:	4621      	mov	r1, r4
 800c516:	f7ff ff59 	bl	800c3cc <__sflush_r>
 800c51a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c51c:	07da      	lsls	r2, r3, #31
 800c51e:	4605      	mov	r5, r0
 800c520:	d4e0      	bmi.n	800c4e4 <_fflush_r+0xc>
 800c522:	89a3      	ldrh	r3, [r4, #12]
 800c524:	059b      	lsls	r3, r3, #22
 800c526:	d4dd      	bmi.n	800c4e4 <_fflush_r+0xc>
 800c528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c52a:	f000 f90d 	bl	800c748 <__retarget_lock_release_recursive>
 800c52e:	e7d9      	b.n	800c4e4 <_fflush_r+0xc>
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <_fflush_r+0x70>)
 800c532:	429c      	cmp	r4, r3
 800c534:	d101      	bne.n	800c53a <_fflush_r+0x62>
 800c536:	68ac      	ldr	r4, [r5, #8]
 800c538:	e7df      	b.n	800c4fa <_fflush_r+0x22>
 800c53a:	4b04      	ldr	r3, [pc, #16]	; (800c54c <_fflush_r+0x74>)
 800c53c:	429c      	cmp	r4, r3
 800c53e:	bf08      	it	eq
 800c540:	68ec      	ldreq	r4, [r5, #12]
 800c542:	e7da      	b.n	800c4fa <_fflush_r+0x22>
 800c544:	0800de50 	.word	0x0800de50
 800c548:	0800de70 	.word	0x0800de70
 800c54c:	0800de30 	.word	0x0800de30

0800c550 <std>:
 800c550:	2300      	movs	r3, #0
 800c552:	b510      	push	{r4, lr}
 800c554:	4604      	mov	r4, r0
 800c556:	e9c0 3300 	strd	r3, r3, [r0]
 800c55a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c55e:	6083      	str	r3, [r0, #8]
 800c560:	8181      	strh	r1, [r0, #12]
 800c562:	6643      	str	r3, [r0, #100]	; 0x64
 800c564:	81c2      	strh	r2, [r0, #14]
 800c566:	6183      	str	r3, [r0, #24]
 800c568:	4619      	mov	r1, r3
 800c56a:	2208      	movs	r2, #8
 800c56c:	305c      	adds	r0, #92	; 0x5c
 800c56e:	f7fe fabd 	bl	800aaec <memset>
 800c572:	4b05      	ldr	r3, [pc, #20]	; (800c588 <std+0x38>)
 800c574:	6263      	str	r3, [r4, #36]	; 0x24
 800c576:	4b05      	ldr	r3, [pc, #20]	; (800c58c <std+0x3c>)
 800c578:	62a3      	str	r3, [r4, #40]	; 0x28
 800c57a:	4b05      	ldr	r3, [pc, #20]	; (800c590 <std+0x40>)
 800c57c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c57e:	4b05      	ldr	r3, [pc, #20]	; (800c594 <std+0x44>)
 800c580:	6224      	str	r4, [r4, #32]
 800c582:	6323      	str	r3, [r4, #48]	; 0x30
 800c584:	bd10      	pop	{r4, pc}
 800c586:	bf00      	nop
 800c588:	0800d6c1 	.word	0x0800d6c1
 800c58c:	0800d6e3 	.word	0x0800d6e3
 800c590:	0800d71b 	.word	0x0800d71b
 800c594:	0800d73f 	.word	0x0800d73f

0800c598 <_cleanup_r>:
 800c598:	4901      	ldr	r1, [pc, #4]	; (800c5a0 <_cleanup_r+0x8>)
 800c59a:	f000 b8af 	b.w	800c6fc <_fwalk_reent>
 800c59e:	bf00      	nop
 800c5a0:	0800c4d9 	.word	0x0800c4d9

0800c5a4 <__sfmoreglue>:
 800c5a4:	b570      	push	{r4, r5, r6, lr}
 800c5a6:	2268      	movs	r2, #104	; 0x68
 800c5a8:	1e4d      	subs	r5, r1, #1
 800c5aa:	4355      	muls	r5, r2
 800c5ac:	460e      	mov	r6, r1
 800c5ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c5b2:	f000 fd4b 	bl	800d04c <_malloc_r>
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	b140      	cbz	r0, 800c5cc <__sfmoreglue+0x28>
 800c5ba:	2100      	movs	r1, #0
 800c5bc:	e9c0 1600 	strd	r1, r6, [r0]
 800c5c0:	300c      	adds	r0, #12
 800c5c2:	60a0      	str	r0, [r4, #8]
 800c5c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c5c8:	f7fe fa90 	bl	800aaec <memset>
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	bd70      	pop	{r4, r5, r6, pc}

0800c5d0 <__sfp_lock_acquire>:
 800c5d0:	4801      	ldr	r0, [pc, #4]	; (800c5d8 <__sfp_lock_acquire+0x8>)
 800c5d2:	f000 b8b8 	b.w	800c746 <__retarget_lock_acquire_recursive>
 800c5d6:	bf00      	nop
 800c5d8:	20003129 	.word	0x20003129

0800c5dc <__sfp_lock_release>:
 800c5dc:	4801      	ldr	r0, [pc, #4]	; (800c5e4 <__sfp_lock_release+0x8>)
 800c5de:	f000 b8b3 	b.w	800c748 <__retarget_lock_release_recursive>
 800c5e2:	bf00      	nop
 800c5e4:	20003129 	.word	0x20003129

0800c5e8 <__sinit_lock_acquire>:
 800c5e8:	4801      	ldr	r0, [pc, #4]	; (800c5f0 <__sinit_lock_acquire+0x8>)
 800c5ea:	f000 b8ac 	b.w	800c746 <__retarget_lock_acquire_recursive>
 800c5ee:	bf00      	nop
 800c5f0:	2000312a 	.word	0x2000312a

0800c5f4 <__sinit_lock_release>:
 800c5f4:	4801      	ldr	r0, [pc, #4]	; (800c5fc <__sinit_lock_release+0x8>)
 800c5f6:	f000 b8a7 	b.w	800c748 <__retarget_lock_release_recursive>
 800c5fa:	bf00      	nop
 800c5fc:	2000312a 	.word	0x2000312a

0800c600 <__sinit>:
 800c600:	b510      	push	{r4, lr}
 800c602:	4604      	mov	r4, r0
 800c604:	f7ff fff0 	bl	800c5e8 <__sinit_lock_acquire>
 800c608:	69a3      	ldr	r3, [r4, #24]
 800c60a:	b11b      	cbz	r3, 800c614 <__sinit+0x14>
 800c60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c610:	f7ff bff0 	b.w	800c5f4 <__sinit_lock_release>
 800c614:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c618:	6523      	str	r3, [r4, #80]	; 0x50
 800c61a:	4b13      	ldr	r3, [pc, #76]	; (800c668 <__sinit+0x68>)
 800c61c:	4a13      	ldr	r2, [pc, #76]	; (800c66c <__sinit+0x6c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	62a2      	str	r2, [r4, #40]	; 0x28
 800c622:	42a3      	cmp	r3, r4
 800c624:	bf04      	itt	eq
 800c626:	2301      	moveq	r3, #1
 800c628:	61a3      	streq	r3, [r4, #24]
 800c62a:	4620      	mov	r0, r4
 800c62c:	f000 f820 	bl	800c670 <__sfp>
 800c630:	6060      	str	r0, [r4, #4]
 800c632:	4620      	mov	r0, r4
 800c634:	f000 f81c 	bl	800c670 <__sfp>
 800c638:	60a0      	str	r0, [r4, #8]
 800c63a:	4620      	mov	r0, r4
 800c63c:	f000 f818 	bl	800c670 <__sfp>
 800c640:	2200      	movs	r2, #0
 800c642:	60e0      	str	r0, [r4, #12]
 800c644:	2104      	movs	r1, #4
 800c646:	6860      	ldr	r0, [r4, #4]
 800c648:	f7ff ff82 	bl	800c550 <std>
 800c64c:	68a0      	ldr	r0, [r4, #8]
 800c64e:	2201      	movs	r2, #1
 800c650:	2109      	movs	r1, #9
 800c652:	f7ff ff7d 	bl	800c550 <std>
 800c656:	68e0      	ldr	r0, [r4, #12]
 800c658:	2202      	movs	r2, #2
 800c65a:	2112      	movs	r1, #18
 800c65c:	f7ff ff78 	bl	800c550 <std>
 800c660:	2301      	movs	r3, #1
 800c662:	61a3      	str	r3, [r4, #24]
 800c664:	e7d2      	b.n	800c60c <__sinit+0xc>
 800c666:	bf00      	nop
 800c668:	0800dd68 	.word	0x0800dd68
 800c66c:	0800c599 	.word	0x0800c599

0800c670 <__sfp>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	4607      	mov	r7, r0
 800c674:	f7ff ffac 	bl	800c5d0 <__sfp_lock_acquire>
 800c678:	4b1e      	ldr	r3, [pc, #120]	; (800c6f4 <__sfp+0x84>)
 800c67a:	681e      	ldr	r6, [r3, #0]
 800c67c:	69b3      	ldr	r3, [r6, #24]
 800c67e:	b913      	cbnz	r3, 800c686 <__sfp+0x16>
 800c680:	4630      	mov	r0, r6
 800c682:	f7ff ffbd 	bl	800c600 <__sinit>
 800c686:	3648      	adds	r6, #72	; 0x48
 800c688:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c68c:	3b01      	subs	r3, #1
 800c68e:	d503      	bpl.n	800c698 <__sfp+0x28>
 800c690:	6833      	ldr	r3, [r6, #0]
 800c692:	b30b      	cbz	r3, 800c6d8 <__sfp+0x68>
 800c694:	6836      	ldr	r6, [r6, #0]
 800c696:	e7f7      	b.n	800c688 <__sfp+0x18>
 800c698:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c69c:	b9d5      	cbnz	r5, 800c6d4 <__sfp+0x64>
 800c69e:	4b16      	ldr	r3, [pc, #88]	; (800c6f8 <__sfp+0x88>)
 800c6a0:	60e3      	str	r3, [r4, #12]
 800c6a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c6a6:	6665      	str	r5, [r4, #100]	; 0x64
 800c6a8:	f000 f84c 	bl	800c744 <__retarget_lock_init_recursive>
 800c6ac:	f7ff ff96 	bl	800c5dc <__sfp_lock_release>
 800c6b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c6b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c6b8:	6025      	str	r5, [r4, #0]
 800c6ba:	61a5      	str	r5, [r4, #24]
 800c6bc:	2208      	movs	r2, #8
 800c6be:	4629      	mov	r1, r5
 800c6c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6c4:	f7fe fa12 	bl	800aaec <memset>
 800c6c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c6cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6d4:	3468      	adds	r4, #104	; 0x68
 800c6d6:	e7d9      	b.n	800c68c <__sfp+0x1c>
 800c6d8:	2104      	movs	r1, #4
 800c6da:	4638      	mov	r0, r7
 800c6dc:	f7ff ff62 	bl	800c5a4 <__sfmoreglue>
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	6030      	str	r0, [r6, #0]
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d1d5      	bne.n	800c694 <__sfp+0x24>
 800c6e8:	f7ff ff78 	bl	800c5dc <__sfp_lock_release>
 800c6ec:	230c      	movs	r3, #12
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	e7ee      	b.n	800c6d0 <__sfp+0x60>
 800c6f2:	bf00      	nop
 800c6f4:	0800dd68 	.word	0x0800dd68
 800c6f8:	ffff0001 	.word	0xffff0001

0800c6fc <_fwalk_reent>:
 800c6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c700:	4606      	mov	r6, r0
 800c702:	4688      	mov	r8, r1
 800c704:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c708:	2700      	movs	r7, #0
 800c70a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c70e:	f1b9 0901 	subs.w	r9, r9, #1
 800c712:	d505      	bpl.n	800c720 <_fwalk_reent+0x24>
 800c714:	6824      	ldr	r4, [r4, #0]
 800c716:	2c00      	cmp	r4, #0
 800c718:	d1f7      	bne.n	800c70a <_fwalk_reent+0xe>
 800c71a:	4638      	mov	r0, r7
 800c71c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c720:	89ab      	ldrh	r3, [r5, #12]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d907      	bls.n	800c736 <_fwalk_reent+0x3a>
 800c726:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c72a:	3301      	adds	r3, #1
 800c72c:	d003      	beq.n	800c736 <_fwalk_reent+0x3a>
 800c72e:	4629      	mov	r1, r5
 800c730:	4630      	mov	r0, r6
 800c732:	47c0      	blx	r8
 800c734:	4307      	orrs	r7, r0
 800c736:	3568      	adds	r5, #104	; 0x68
 800c738:	e7e9      	b.n	800c70e <_fwalk_reent+0x12>
	...

0800c73c <_localeconv_r>:
 800c73c:	4800      	ldr	r0, [pc, #0]	; (800c740 <_localeconv_r+0x4>)
 800c73e:	4770      	bx	lr
 800c740:	20000160 	.word	0x20000160

0800c744 <__retarget_lock_init_recursive>:
 800c744:	4770      	bx	lr

0800c746 <__retarget_lock_acquire_recursive>:
 800c746:	4770      	bx	lr

0800c748 <__retarget_lock_release_recursive>:
 800c748:	4770      	bx	lr

0800c74a <__swhatbuf_r>:
 800c74a:	b570      	push	{r4, r5, r6, lr}
 800c74c:	460e      	mov	r6, r1
 800c74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c752:	2900      	cmp	r1, #0
 800c754:	b096      	sub	sp, #88	; 0x58
 800c756:	4614      	mov	r4, r2
 800c758:	461d      	mov	r5, r3
 800c75a:	da08      	bge.n	800c76e <__swhatbuf_r+0x24>
 800c75c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c760:	2200      	movs	r2, #0
 800c762:	602a      	str	r2, [r5, #0]
 800c764:	061a      	lsls	r2, r3, #24
 800c766:	d410      	bmi.n	800c78a <__swhatbuf_r+0x40>
 800c768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c76c:	e00e      	b.n	800c78c <__swhatbuf_r+0x42>
 800c76e:	466a      	mov	r2, sp
 800c770:	f001 f83c 	bl	800d7ec <_fstat_r>
 800c774:	2800      	cmp	r0, #0
 800c776:	dbf1      	blt.n	800c75c <__swhatbuf_r+0x12>
 800c778:	9a01      	ldr	r2, [sp, #4]
 800c77a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c77e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c782:	425a      	negs	r2, r3
 800c784:	415a      	adcs	r2, r3
 800c786:	602a      	str	r2, [r5, #0]
 800c788:	e7ee      	b.n	800c768 <__swhatbuf_r+0x1e>
 800c78a:	2340      	movs	r3, #64	; 0x40
 800c78c:	2000      	movs	r0, #0
 800c78e:	6023      	str	r3, [r4, #0]
 800c790:	b016      	add	sp, #88	; 0x58
 800c792:	bd70      	pop	{r4, r5, r6, pc}

0800c794 <__smakebuf_r>:
 800c794:	898b      	ldrh	r3, [r1, #12]
 800c796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c798:	079d      	lsls	r5, r3, #30
 800c79a:	4606      	mov	r6, r0
 800c79c:	460c      	mov	r4, r1
 800c79e:	d507      	bpl.n	800c7b0 <__smakebuf_r+0x1c>
 800c7a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7a4:	6023      	str	r3, [r4, #0]
 800c7a6:	6123      	str	r3, [r4, #16]
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	6163      	str	r3, [r4, #20]
 800c7ac:	b002      	add	sp, #8
 800c7ae:	bd70      	pop	{r4, r5, r6, pc}
 800c7b0:	ab01      	add	r3, sp, #4
 800c7b2:	466a      	mov	r2, sp
 800c7b4:	f7ff ffc9 	bl	800c74a <__swhatbuf_r>
 800c7b8:	9900      	ldr	r1, [sp, #0]
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f000 fc45 	bl	800d04c <_malloc_r>
 800c7c2:	b948      	cbnz	r0, 800c7d8 <__smakebuf_r+0x44>
 800c7c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7c8:	059a      	lsls	r2, r3, #22
 800c7ca:	d4ef      	bmi.n	800c7ac <__smakebuf_r+0x18>
 800c7cc:	f023 0303 	bic.w	r3, r3, #3
 800c7d0:	f043 0302 	orr.w	r3, r3, #2
 800c7d4:	81a3      	strh	r3, [r4, #12]
 800c7d6:	e7e3      	b.n	800c7a0 <__smakebuf_r+0xc>
 800c7d8:	4b0d      	ldr	r3, [pc, #52]	; (800c810 <__smakebuf_r+0x7c>)
 800c7da:	62b3      	str	r3, [r6, #40]	; 0x28
 800c7dc:	89a3      	ldrh	r3, [r4, #12]
 800c7de:	6020      	str	r0, [r4, #0]
 800c7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7e4:	81a3      	strh	r3, [r4, #12]
 800c7e6:	9b00      	ldr	r3, [sp, #0]
 800c7e8:	6163      	str	r3, [r4, #20]
 800c7ea:	9b01      	ldr	r3, [sp, #4]
 800c7ec:	6120      	str	r0, [r4, #16]
 800c7ee:	b15b      	cbz	r3, 800c808 <__smakebuf_r+0x74>
 800c7f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f001 f80b 	bl	800d810 <_isatty_r>
 800c7fa:	b128      	cbz	r0, 800c808 <__smakebuf_r+0x74>
 800c7fc:	89a3      	ldrh	r3, [r4, #12]
 800c7fe:	f023 0303 	bic.w	r3, r3, #3
 800c802:	f043 0301 	orr.w	r3, r3, #1
 800c806:	81a3      	strh	r3, [r4, #12]
 800c808:	89a0      	ldrh	r0, [r4, #12]
 800c80a:	4305      	orrs	r5, r0
 800c80c:	81a5      	strh	r5, [r4, #12]
 800c80e:	e7cd      	b.n	800c7ac <__smakebuf_r+0x18>
 800c810:	0800c599 	.word	0x0800c599

0800c814 <malloc>:
 800c814:	4b02      	ldr	r3, [pc, #8]	; (800c820 <malloc+0xc>)
 800c816:	4601      	mov	r1, r0
 800c818:	6818      	ldr	r0, [r3, #0]
 800c81a:	f000 bc17 	b.w	800d04c <_malloc_r>
 800c81e:	bf00      	nop
 800c820:	2000000c 	.word	0x2000000c

0800c824 <memcpy>:
 800c824:	440a      	add	r2, r1
 800c826:	4291      	cmp	r1, r2
 800c828:	f100 33ff 	add.w	r3, r0, #4294967295
 800c82c:	d100      	bne.n	800c830 <memcpy+0xc>
 800c82e:	4770      	bx	lr
 800c830:	b510      	push	{r4, lr}
 800c832:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c83a:	4291      	cmp	r1, r2
 800c83c:	d1f9      	bne.n	800c832 <memcpy+0xe>
 800c83e:	bd10      	pop	{r4, pc}

0800c840 <_Balloc>:
 800c840:	b570      	push	{r4, r5, r6, lr}
 800c842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c844:	4604      	mov	r4, r0
 800c846:	460d      	mov	r5, r1
 800c848:	b976      	cbnz	r6, 800c868 <_Balloc+0x28>
 800c84a:	2010      	movs	r0, #16
 800c84c:	f7ff ffe2 	bl	800c814 <malloc>
 800c850:	4602      	mov	r2, r0
 800c852:	6260      	str	r0, [r4, #36]	; 0x24
 800c854:	b920      	cbnz	r0, 800c860 <_Balloc+0x20>
 800c856:	4b18      	ldr	r3, [pc, #96]	; (800c8b8 <_Balloc+0x78>)
 800c858:	4818      	ldr	r0, [pc, #96]	; (800c8bc <_Balloc+0x7c>)
 800c85a:	2166      	movs	r1, #102	; 0x66
 800c85c:	f000 ff86 	bl	800d76c <__assert_func>
 800c860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c864:	6006      	str	r6, [r0, #0]
 800c866:	60c6      	str	r6, [r0, #12]
 800c868:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c86a:	68f3      	ldr	r3, [r6, #12]
 800c86c:	b183      	cbz	r3, 800c890 <_Balloc+0x50>
 800c86e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c876:	b9b8      	cbnz	r0, 800c8a8 <_Balloc+0x68>
 800c878:	2101      	movs	r1, #1
 800c87a:	fa01 f605 	lsl.w	r6, r1, r5
 800c87e:	1d72      	adds	r2, r6, #5
 800c880:	0092      	lsls	r2, r2, #2
 800c882:	4620      	mov	r0, r4
 800c884:	f000 fb60 	bl	800cf48 <_calloc_r>
 800c888:	b160      	cbz	r0, 800c8a4 <_Balloc+0x64>
 800c88a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c88e:	e00e      	b.n	800c8ae <_Balloc+0x6e>
 800c890:	2221      	movs	r2, #33	; 0x21
 800c892:	2104      	movs	r1, #4
 800c894:	4620      	mov	r0, r4
 800c896:	f000 fb57 	bl	800cf48 <_calloc_r>
 800c89a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c89c:	60f0      	str	r0, [r6, #12]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1e4      	bne.n	800c86e <_Balloc+0x2e>
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}
 800c8a8:	6802      	ldr	r2, [r0, #0]
 800c8aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8b4:	e7f7      	b.n	800c8a6 <_Balloc+0x66>
 800c8b6:	bf00      	nop
 800c8b8:	0800ddad 	.word	0x0800ddad
 800c8bc:	0800de90 	.word	0x0800de90

0800c8c0 <_Bfree>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c8c4:	4605      	mov	r5, r0
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	b976      	cbnz	r6, 800c8e8 <_Bfree+0x28>
 800c8ca:	2010      	movs	r0, #16
 800c8cc:	f7ff ffa2 	bl	800c814 <malloc>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	6268      	str	r0, [r5, #36]	; 0x24
 800c8d4:	b920      	cbnz	r0, 800c8e0 <_Bfree+0x20>
 800c8d6:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <_Bfree+0x3c>)
 800c8d8:	4809      	ldr	r0, [pc, #36]	; (800c900 <_Bfree+0x40>)
 800c8da:	218a      	movs	r1, #138	; 0x8a
 800c8dc:	f000 ff46 	bl	800d76c <__assert_func>
 800c8e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8e4:	6006      	str	r6, [r0, #0]
 800c8e6:	60c6      	str	r6, [r0, #12]
 800c8e8:	b13c      	cbz	r4, 800c8fa <_Bfree+0x3a>
 800c8ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c8ec:	6862      	ldr	r2, [r4, #4]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8f4:	6021      	str	r1, [r4, #0]
 800c8f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}
 800c8fc:	0800ddad 	.word	0x0800ddad
 800c900:	0800de90 	.word	0x0800de90

0800c904 <__multadd>:
 800c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c908:	690d      	ldr	r5, [r1, #16]
 800c90a:	4607      	mov	r7, r0
 800c90c:	460c      	mov	r4, r1
 800c90e:	461e      	mov	r6, r3
 800c910:	f101 0c14 	add.w	ip, r1, #20
 800c914:	2000      	movs	r0, #0
 800c916:	f8dc 3000 	ldr.w	r3, [ip]
 800c91a:	b299      	uxth	r1, r3
 800c91c:	fb02 6101 	mla	r1, r2, r1, r6
 800c920:	0c1e      	lsrs	r6, r3, #16
 800c922:	0c0b      	lsrs	r3, r1, #16
 800c924:	fb02 3306 	mla	r3, r2, r6, r3
 800c928:	b289      	uxth	r1, r1
 800c92a:	3001      	adds	r0, #1
 800c92c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c930:	4285      	cmp	r5, r0
 800c932:	f84c 1b04 	str.w	r1, [ip], #4
 800c936:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c93a:	dcec      	bgt.n	800c916 <__multadd+0x12>
 800c93c:	b30e      	cbz	r6, 800c982 <__multadd+0x7e>
 800c93e:	68a3      	ldr	r3, [r4, #8]
 800c940:	42ab      	cmp	r3, r5
 800c942:	dc19      	bgt.n	800c978 <__multadd+0x74>
 800c944:	6861      	ldr	r1, [r4, #4]
 800c946:	4638      	mov	r0, r7
 800c948:	3101      	adds	r1, #1
 800c94a:	f7ff ff79 	bl	800c840 <_Balloc>
 800c94e:	4680      	mov	r8, r0
 800c950:	b928      	cbnz	r0, 800c95e <__multadd+0x5a>
 800c952:	4602      	mov	r2, r0
 800c954:	4b0c      	ldr	r3, [pc, #48]	; (800c988 <__multadd+0x84>)
 800c956:	480d      	ldr	r0, [pc, #52]	; (800c98c <__multadd+0x88>)
 800c958:	21b5      	movs	r1, #181	; 0xb5
 800c95a:	f000 ff07 	bl	800d76c <__assert_func>
 800c95e:	6922      	ldr	r2, [r4, #16]
 800c960:	3202      	adds	r2, #2
 800c962:	f104 010c 	add.w	r1, r4, #12
 800c966:	0092      	lsls	r2, r2, #2
 800c968:	300c      	adds	r0, #12
 800c96a:	f7ff ff5b 	bl	800c824 <memcpy>
 800c96e:	4621      	mov	r1, r4
 800c970:	4638      	mov	r0, r7
 800c972:	f7ff ffa5 	bl	800c8c0 <_Bfree>
 800c976:	4644      	mov	r4, r8
 800c978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c97c:	3501      	adds	r5, #1
 800c97e:	615e      	str	r6, [r3, #20]
 800c980:	6125      	str	r5, [r4, #16]
 800c982:	4620      	mov	r0, r4
 800c984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c988:	0800de1f 	.word	0x0800de1f
 800c98c:	0800de90 	.word	0x0800de90

0800c990 <__hi0bits>:
 800c990:	0c03      	lsrs	r3, r0, #16
 800c992:	041b      	lsls	r3, r3, #16
 800c994:	b9d3      	cbnz	r3, 800c9cc <__hi0bits+0x3c>
 800c996:	0400      	lsls	r0, r0, #16
 800c998:	2310      	movs	r3, #16
 800c99a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c99e:	bf04      	itt	eq
 800c9a0:	0200      	lsleq	r0, r0, #8
 800c9a2:	3308      	addeq	r3, #8
 800c9a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c9a8:	bf04      	itt	eq
 800c9aa:	0100      	lsleq	r0, r0, #4
 800c9ac:	3304      	addeq	r3, #4
 800c9ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c9b2:	bf04      	itt	eq
 800c9b4:	0080      	lsleq	r0, r0, #2
 800c9b6:	3302      	addeq	r3, #2
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	db05      	blt.n	800c9c8 <__hi0bits+0x38>
 800c9bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c9c0:	f103 0301 	add.w	r3, r3, #1
 800c9c4:	bf08      	it	eq
 800c9c6:	2320      	moveq	r3, #32
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	4770      	bx	lr
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	e7e4      	b.n	800c99a <__hi0bits+0xa>

0800c9d0 <__lo0bits>:
 800c9d0:	6803      	ldr	r3, [r0, #0]
 800c9d2:	f013 0207 	ands.w	r2, r3, #7
 800c9d6:	4601      	mov	r1, r0
 800c9d8:	d00b      	beq.n	800c9f2 <__lo0bits+0x22>
 800c9da:	07da      	lsls	r2, r3, #31
 800c9dc:	d423      	bmi.n	800ca26 <__lo0bits+0x56>
 800c9de:	0798      	lsls	r0, r3, #30
 800c9e0:	bf49      	itett	mi
 800c9e2:	085b      	lsrmi	r3, r3, #1
 800c9e4:	089b      	lsrpl	r3, r3, #2
 800c9e6:	2001      	movmi	r0, #1
 800c9e8:	600b      	strmi	r3, [r1, #0]
 800c9ea:	bf5c      	itt	pl
 800c9ec:	600b      	strpl	r3, [r1, #0]
 800c9ee:	2002      	movpl	r0, #2
 800c9f0:	4770      	bx	lr
 800c9f2:	b298      	uxth	r0, r3
 800c9f4:	b9a8      	cbnz	r0, 800ca22 <__lo0bits+0x52>
 800c9f6:	0c1b      	lsrs	r3, r3, #16
 800c9f8:	2010      	movs	r0, #16
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	b90a      	cbnz	r2, 800ca02 <__lo0bits+0x32>
 800c9fe:	3008      	adds	r0, #8
 800ca00:	0a1b      	lsrs	r3, r3, #8
 800ca02:	071a      	lsls	r2, r3, #28
 800ca04:	bf04      	itt	eq
 800ca06:	091b      	lsreq	r3, r3, #4
 800ca08:	3004      	addeq	r0, #4
 800ca0a:	079a      	lsls	r2, r3, #30
 800ca0c:	bf04      	itt	eq
 800ca0e:	089b      	lsreq	r3, r3, #2
 800ca10:	3002      	addeq	r0, #2
 800ca12:	07da      	lsls	r2, r3, #31
 800ca14:	d403      	bmi.n	800ca1e <__lo0bits+0x4e>
 800ca16:	085b      	lsrs	r3, r3, #1
 800ca18:	f100 0001 	add.w	r0, r0, #1
 800ca1c:	d005      	beq.n	800ca2a <__lo0bits+0x5a>
 800ca1e:	600b      	str	r3, [r1, #0]
 800ca20:	4770      	bx	lr
 800ca22:	4610      	mov	r0, r2
 800ca24:	e7e9      	b.n	800c9fa <__lo0bits+0x2a>
 800ca26:	2000      	movs	r0, #0
 800ca28:	4770      	bx	lr
 800ca2a:	2020      	movs	r0, #32
 800ca2c:	4770      	bx	lr
	...

0800ca30 <__i2b>:
 800ca30:	b510      	push	{r4, lr}
 800ca32:	460c      	mov	r4, r1
 800ca34:	2101      	movs	r1, #1
 800ca36:	f7ff ff03 	bl	800c840 <_Balloc>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	b928      	cbnz	r0, 800ca4a <__i2b+0x1a>
 800ca3e:	4b05      	ldr	r3, [pc, #20]	; (800ca54 <__i2b+0x24>)
 800ca40:	4805      	ldr	r0, [pc, #20]	; (800ca58 <__i2b+0x28>)
 800ca42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ca46:	f000 fe91 	bl	800d76c <__assert_func>
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	6144      	str	r4, [r0, #20]
 800ca4e:	6103      	str	r3, [r0, #16]
 800ca50:	bd10      	pop	{r4, pc}
 800ca52:	bf00      	nop
 800ca54:	0800de1f 	.word	0x0800de1f
 800ca58:	0800de90 	.word	0x0800de90

0800ca5c <__multiply>:
 800ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca60:	4691      	mov	r9, r2
 800ca62:	690a      	ldr	r2, [r1, #16]
 800ca64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	bfb8      	it	lt
 800ca6c:	460b      	movlt	r3, r1
 800ca6e:	460c      	mov	r4, r1
 800ca70:	bfbc      	itt	lt
 800ca72:	464c      	movlt	r4, r9
 800ca74:	4699      	movlt	r9, r3
 800ca76:	6927      	ldr	r7, [r4, #16]
 800ca78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca7c:	68a3      	ldr	r3, [r4, #8]
 800ca7e:	6861      	ldr	r1, [r4, #4]
 800ca80:	eb07 060a 	add.w	r6, r7, sl
 800ca84:	42b3      	cmp	r3, r6
 800ca86:	b085      	sub	sp, #20
 800ca88:	bfb8      	it	lt
 800ca8a:	3101      	addlt	r1, #1
 800ca8c:	f7ff fed8 	bl	800c840 <_Balloc>
 800ca90:	b930      	cbnz	r0, 800caa0 <__multiply+0x44>
 800ca92:	4602      	mov	r2, r0
 800ca94:	4b44      	ldr	r3, [pc, #272]	; (800cba8 <__multiply+0x14c>)
 800ca96:	4845      	ldr	r0, [pc, #276]	; (800cbac <__multiply+0x150>)
 800ca98:	f240 115d 	movw	r1, #349	; 0x15d
 800ca9c:	f000 fe66 	bl	800d76c <__assert_func>
 800caa0:	f100 0514 	add.w	r5, r0, #20
 800caa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800caa8:	462b      	mov	r3, r5
 800caaa:	2200      	movs	r2, #0
 800caac:	4543      	cmp	r3, r8
 800caae:	d321      	bcc.n	800caf4 <__multiply+0x98>
 800cab0:	f104 0314 	add.w	r3, r4, #20
 800cab4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cab8:	f109 0314 	add.w	r3, r9, #20
 800cabc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cac0:	9202      	str	r2, [sp, #8]
 800cac2:	1b3a      	subs	r2, r7, r4
 800cac4:	3a15      	subs	r2, #21
 800cac6:	f022 0203 	bic.w	r2, r2, #3
 800caca:	3204      	adds	r2, #4
 800cacc:	f104 0115 	add.w	r1, r4, #21
 800cad0:	428f      	cmp	r7, r1
 800cad2:	bf38      	it	cc
 800cad4:	2204      	movcc	r2, #4
 800cad6:	9201      	str	r2, [sp, #4]
 800cad8:	9a02      	ldr	r2, [sp, #8]
 800cada:	9303      	str	r3, [sp, #12]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d80c      	bhi.n	800cafa <__multiply+0x9e>
 800cae0:	2e00      	cmp	r6, #0
 800cae2:	dd03      	ble.n	800caec <__multiply+0x90>
 800cae4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d05a      	beq.n	800cba2 <__multiply+0x146>
 800caec:	6106      	str	r6, [r0, #16]
 800caee:	b005      	add	sp, #20
 800caf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf4:	f843 2b04 	str.w	r2, [r3], #4
 800caf8:	e7d8      	b.n	800caac <__multiply+0x50>
 800cafa:	f8b3 a000 	ldrh.w	sl, [r3]
 800cafe:	f1ba 0f00 	cmp.w	sl, #0
 800cb02:	d024      	beq.n	800cb4e <__multiply+0xf2>
 800cb04:	f104 0e14 	add.w	lr, r4, #20
 800cb08:	46a9      	mov	r9, r5
 800cb0a:	f04f 0c00 	mov.w	ip, #0
 800cb0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cb12:	f8d9 1000 	ldr.w	r1, [r9]
 800cb16:	fa1f fb82 	uxth.w	fp, r2
 800cb1a:	b289      	uxth	r1, r1
 800cb1c:	fb0a 110b 	mla	r1, sl, fp, r1
 800cb20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cb24:	f8d9 2000 	ldr.w	r2, [r9]
 800cb28:	4461      	add	r1, ip
 800cb2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb2e:	fb0a c20b 	mla	r2, sl, fp, ip
 800cb32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cb36:	b289      	uxth	r1, r1
 800cb38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb3c:	4577      	cmp	r7, lr
 800cb3e:	f849 1b04 	str.w	r1, [r9], #4
 800cb42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb46:	d8e2      	bhi.n	800cb0e <__multiply+0xb2>
 800cb48:	9a01      	ldr	r2, [sp, #4]
 800cb4a:	f845 c002 	str.w	ip, [r5, r2]
 800cb4e:	9a03      	ldr	r2, [sp, #12]
 800cb50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cb54:	3304      	adds	r3, #4
 800cb56:	f1b9 0f00 	cmp.w	r9, #0
 800cb5a:	d020      	beq.n	800cb9e <__multiply+0x142>
 800cb5c:	6829      	ldr	r1, [r5, #0]
 800cb5e:	f104 0c14 	add.w	ip, r4, #20
 800cb62:	46ae      	mov	lr, r5
 800cb64:	f04f 0a00 	mov.w	sl, #0
 800cb68:	f8bc b000 	ldrh.w	fp, [ip]
 800cb6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cb70:	fb09 220b 	mla	r2, r9, fp, r2
 800cb74:	4492      	add	sl, r2
 800cb76:	b289      	uxth	r1, r1
 800cb78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cb7c:	f84e 1b04 	str.w	r1, [lr], #4
 800cb80:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cb84:	f8be 1000 	ldrh.w	r1, [lr]
 800cb88:	0c12      	lsrs	r2, r2, #16
 800cb8a:	fb09 1102 	mla	r1, r9, r2, r1
 800cb8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cb92:	4567      	cmp	r7, ip
 800cb94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb98:	d8e6      	bhi.n	800cb68 <__multiply+0x10c>
 800cb9a:	9a01      	ldr	r2, [sp, #4]
 800cb9c:	50a9      	str	r1, [r5, r2]
 800cb9e:	3504      	adds	r5, #4
 800cba0:	e79a      	b.n	800cad8 <__multiply+0x7c>
 800cba2:	3e01      	subs	r6, #1
 800cba4:	e79c      	b.n	800cae0 <__multiply+0x84>
 800cba6:	bf00      	nop
 800cba8:	0800de1f 	.word	0x0800de1f
 800cbac:	0800de90 	.word	0x0800de90

0800cbb0 <__pow5mult>:
 800cbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb4:	4615      	mov	r5, r2
 800cbb6:	f012 0203 	ands.w	r2, r2, #3
 800cbba:	4606      	mov	r6, r0
 800cbbc:	460f      	mov	r7, r1
 800cbbe:	d007      	beq.n	800cbd0 <__pow5mult+0x20>
 800cbc0:	4c25      	ldr	r4, [pc, #148]	; (800cc58 <__pow5mult+0xa8>)
 800cbc2:	3a01      	subs	r2, #1
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbca:	f7ff fe9b 	bl	800c904 <__multadd>
 800cbce:	4607      	mov	r7, r0
 800cbd0:	10ad      	asrs	r5, r5, #2
 800cbd2:	d03d      	beq.n	800cc50 <__pow5mult+0xa0>
 800cbd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cbd6:	b97c      	cbnz	r4, 800cbf8 <__pow5mult+0x48>
 800cbd8:	2010      	movs	r0, #16
 800cbda:	f7ff fe1b 	bl	800c814 <malloc>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	6270      	str	r0, [r6, #36]	; 0x24
 800cbe2:	b928      	cbnz	r0, 800cbf0 <__pow5mult+0x40>
 800cbe4:	4b1d      	ldr	r3, [pc, #116]	; (800cc5c <__pow5mult+0xac>)
 800cbe6:	481e      	ldr	r0, [pc, #120]	; (800cc60 <__pow5mult+0xb0>)
 800cbe8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cbec:	f000 fdbe 	bl	800d76c <__assert_func>
 800cbf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbf4:	6004      	str	r4, [r0, #0]
 800cbf6:	60c4      	str	r4, [r0, #12]
 800cbf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cbfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc00:	b94c      	cbnz	r4, 800cc16 <__pow5mult+0x66>
 800cc02:	f240 2171 	movw	r1, #625	; 0x271
 800cc06:	4630      	mov	r0, r6
 800cc08:	f7ff ff12 	bl	800ca30 <__i2b>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc12:	4604      	mov	r4, r0
 800cc14:	6003      	str	r3, [r0, #0]
 800cc16:	f04f 0900 	mov.w	r9, #0
 800cc1a:	07eb      	lsls	r3, r5, #31
 800cc1c:	d50a      	bpl.n	800cc34 <__pow5mult+0x84>
 800cc1e:	4639      	mov	r1, r7
 800cc20:	4622      	mov	r2, r4
 800cc22:	4630      	mov	r0, r6
 800cc24:	f7ff ff1a 	bl	800ca5c <__multiply>
 800cc28:	4639      	mov	r1, r7
 800cc2a:	4680      	mov	r8, r0
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	f7ff fe47 	bl	800c8c0 <_Bfree>
 800cc32:	4647      	mov	r7, r8
 800cc34:	106d      	asrs	r5, r5, #1
 800cc36:	d00b      	beq.n	800cc50 <__pow5mult+0xa0>
 800cc38:	6820      	ldr	r0, [r4, #0]
 800cc3a:	b938      	cbnz	r0, 800cc4c <__pow5mult+0x9c>
 800cc3c:	4622      	mov	r2, r4
 800cc3e:	4621      	mov	r1, r4
 800cc40:	4630      	mov	r0, r6
 800cc42:	f7ff ff0b 	bl	800ca5c <__multiply>
 800cc46:	6020      	str	r0, [r4, #0]
 800cc48:	f8c0 9000 	str.w	r9, [r0]
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	e7e4      	b.n	800cc1a <__pow5mult+0x6a>
 800cc50:	4638      	mov	r0, r7
 800cc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc56:	bf00      	nop
 800cc58:	0800dfe0 	.word	0x0800dfe0
 800cc5c:	0800ddad 	.word	0x0800ddad
 800cc60:	0800de90 	.word	0x0800de90

0800cc64 <__lshift>:
 800cc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc68:	460c      	mov	r4, r1
 800cc6a:	6849      	ldr	r1, [r1, #4]
 800cc6c:	6923      	ldr	r3, [r4, #16]
 800cc6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc72:	68a3      	ldr	r3, [r4, #8]
 800cc74:	4607      	mov	r7, r0
 800cc76:	4691      	mov	r9, r2
 800cc78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc7c:	f108 0601 	add.w	r6, r8, #1
 800cc80:	42b3      	cmp	r3, r6
 800cc82:	db0b      	blt.n	800cc9c <__lshift+0x38>
 800cc84:	4638      	mov	r0, r7
 800cc86:	f7ff fddb 	bl	800c840 <_Balloc>
 800cc8a:	4605      	mov	r5, r0
 800cc8c:	b948      	cbnz	r0, 800cca2 <__lshift+0x3e>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	4b2a      	ldr	r3, [pc, #168]	; (800cd3c <__lshift+0xd8>)
 800cc92:	482b      	ldr	r0, [pc, #172]	; (800cd40 <__lshift+0xdc>)
 800cc94:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cc98:	f000 fd68 	bl	800d76c <__assert_func>
 800cc9c:	3101      	adds	r1, #1
 800cc9e:	005b      	lsls	r3, r3, #1
 800cca0:	e7ee      	b.n	800cc80 <__lshift+0x1c>
 800cca2:	2300      	movs	r3, #0
 800cca4:	f100 0114 	add.w	r1, r0, #20
 800cca8:	f100 0210 	add.w	r2, r0, #16
 800ccac:	4618      	mov	r0, r3
 800ccae:	4553      	cmp	r3, sl
 800ccb0:	db37      	blt.n	800cd22 <__lshift+0xbe>
 800ccb2:	6920      	ldr	r0, [r4, #16]
 800ccb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccb8:	f104 0314 	add.w	r3, r4, #20
 800ccbc:	f019 091f 	ands.w	r9, r9, #31
 800ccc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ccc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ccc8:	d02f      	beq.n	800cd2a <__lshift+0xc6>
 800ccca:	f1c9 0e20 	rsb	lr, r9, #32
 800ccce:	468a      	mov	sl, r1
 800ccd0:	f04f 0c00 	mov.w	ip, #0
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	fa02 f209 	lsl.w	r2, r2, r9
 800ccda:	ea42 020c 	orr.w	r2, r2, ip
 800ccde:	f84a 2b04 	str.w	r2, [sl], #4
 800cce2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cce6:	4298      	cmp	r0, r3
 800cce8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ccec:	d8f2      	bhi.n	800ccd4 <__lshift+0x70>
 800ccee:	1b03      	subs	r3, r0, r4
 800ccf0:	3b15      	subs	r3, #21
 800ccf2:	f023 0303 	bic.w	r3, r3, #3
 800ccf6:	3304      	adds	r3, #4
 800ccf8:	f104 0215 	add.w	r2, r4, #21
 800ccfc:	4290      	cmp	r0, r2
 800ccfe:	bf38      	it	cc
 800cd00:	2304      	movcc	r3, #4
 800cd02:	f841 c003 	str.w	ip, [r1, r3]
 800cd06:	f1bc 0f00 	cmp.w	ip, #0
 800cd0a:	d001      	beq.n	800cd10 <__lshift+0xac>
 800cd0c:	f108 0602 	add.w	r6, r8, #2
 800cd10:	3e01      	subs	r6, #1
 800cd12:	4638      	mov	r0, r7
 800cd14:	612e      	str	r6, [r5, #16]
 800cd16:	4621      	mov	r1, r4
 800cd18:	f7ff fdd2 	bl	800c8c0 <_Bfree>
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd22:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd26:	3301      	adds	r3, #1
 800cd28:	e7c1      	b.n	800ccae <__lshift+0x4a>
 800cd2a:	3904      	subs	r1, #4
 800cd2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd30:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd34:	4298      	cmp	r0, r3
 800cd36:	d8f9      	bhi.n	800cd2c <__lshift+0xc8>
 800cd38:	e7ea      	b.n	800cd10 <__lshift+0xac>
 800cd3a:	bf00      	nop
 800cd3c:	0800de1f 	.word	0x0800de1f
 800cd40:	0800de90 	.word	0x0800de90

0800cd44 <__mcmp>:
 800cd44:	b530      	push	{r4, r5, lr}
 800cd46:	6902      	ldr	r2, [r0, #16]
 800cd48:	690c      	ldr	r4, [r1, #16]
 800cd4a:	1b12      	subs	r2, r2, r4
 800cd4c:	d10e      	bne.n	800cd6c <__mcmp+0x28>
 800cd4e:	f100 0314 	add.w	r3, r0, #20
 800cd52:	3114      	adds	r1, #20
 800cd54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cd58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cd60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cd64:	42a5      	cmp	r5, r4
 800cd66:	d003      	beq.n	800cd70 <__mcmp+0x2c>
 800cd68:	d305      	bcc.n	800cd76 <__mcmp+0x32>
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	bd30      	pop	{r4, r5, pc}
 800cd70:	4283      	cmp	r3, r0
 800cd72:	d3f3      	bcc.n	800cd5c <__mcmp+0x18>
 800cd74:	e7fa      	b.n	800cd6c <__mcmp+0x28>
 800cd76:	f04f 32ff 	mov.w	r2, #4294967295
 800cd7a:	e7f7      	b.n	800cd6c <__mcmp+0x28>

0800cd7c <__mdiff>:
 800cd7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd80:	460c      	mov	r4, r1
 800cd82:	4606      	mov	r6, r0
 800cd84:	4611      	mov	r1, r2
 800cd86:	4620      	mov	r0, r4
 800cd88:	4690      	mov	r8, r2
 800cd8a:	f7ff ffdb 	bl	800cd44 <__mcmp>
 800cd8e:	1e05      	subs	r5, r0, #0
 800cd90:	d110      	bne.n	800cdb4 <__mdiff+0x38>
 800cd92:	4629      	mov	r1, r5
 800cd94:	4630      	mov	r0, r6
 800cd96:	f7ff fd53 	bl	800c840 <_Balloc>
 800cd9a:	b930      	cbnz	r0, 800cdaa <__mdiff+0x2e>
 800cd9c:	4b3a      	ldr	r3, [pc, #232]	; (800ce88 <__mdiff+0x10c>)
 800cd9e:	4602      	mov	r2, r0
 800cda0:	f240 2132 	movw	r1, #562	; 0x232
 800cda4:	4839      	ldr	r0, [pc, #228]	; (800ce8c <__mdiff+0x110>)
 800cda6:	f000 fce1 	bl	800d76c <__assert_func>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cdb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb4:	bfa4      	itt	ge
 800cdb6:	4643      	movge	r3, r8
 800cdb8:	46a0      	movge	r8, r4
 800cdba:	4630      	mov	r0, r6
 800cdbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cdc0:	bfa6      	itte	ge
 800cdc2:	461c      	movge	r4, r3
 800cdc4:	2500      	movge	r5, #0
 800cdc6:	2501      	movlt	r5, #1
 800cdc8:	f7ff fd3a 	bl	800c840 <_Balloc>
 800cdcc:	b920      	cbnz	r0, 800cdd8 <__mdiff+0x5c>
 800cdce:	4b2e      	ldr	r3, [pc, #184]	; (800ce88 <__mdiff+0x10c>)
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cdd6:	e7e5      	b.n	800cda4 <__mdiff+0x28>
 800cdd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cddc:	6926      	ldr	r6, [r4, #16]
 800cdde:	60c5      	str	r5, [r0, #12]
 800cde0:	f104 0914 	add.w	r9, r4, #20
 800cde4:	f108 0514 	add.w	r5, r8, #20
 800cde8:	f100 0e14 	add.w	lr, r0, #20
 800cdec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cdf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cdf4:	f108 0210 	add.w	r2, r8, #16
 800cdf8:	46f2      	mov	sl, lr
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	f859 3b04 	ldr.w	r3, [r9], #4
 800ce00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ce04:	fa1f f883 	uxth.w	r8, r3
 800ce08:	fa11 f18b 	uxtah	r1, r1, fp
 800ce0c:	0c1b      	lsrs	r3, r3, #16
 800ce0e:	eba1 0808 	sub.w	r8, r1, r8
 800ce12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ce16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ce1a:	fa1f f888 	uxth.w	r8, r8
 800ce1e:	1419      	asrs	r1, r3, #16
 800ce20:	454e      	cmp	r6, r9
 800ce22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ce26:	f84a 3b04 	str.w	r3, [sl], #4
 800ce2a:	d8e7      	bhi.n	800cdfc <__mdiff+0x80>
 800ce2c:	1b33      	subs	r3, r6, r4
 800ce2e:	3b15      	subs	r3, #21
 800ce30:	f023 0303 	bic.w	r3, r3, #3
 800ce34:	3304      	adds	r3, #4
 800ce36:	3415      	adds	r4, #21
 800ce38:	42a6      	cmp	r6, r4
 800ce3a:	bf38      	it	cc
 800ce3c:	2304      	movcc	r3, #4
 800ce3e:	441d      	add	r5, r3
 800ce40:	4473      	add	r3, lr
 800ce42:	469e      	mov	lr, r3
 800ce44:	462e      	mov	r6, r5
 800ce46:	4566      	cmp	r6, ip
 800ce48:	d30e      	bcc.n	800ce68 <__mdiff+0xec>
 800ce4a:	f10c 0203 	add.w	r2, ip, #3
 800ce4e:	1b52      	subs	r2, r2, r5
 800ce50:	f022 0203 	bic.w	r2, r2, #3
 800ce54:	3d03      	subs	r5, #3
 800ce56:	45ac      	cmp	ip, r5
 800ce58:	bf38      	it	cc
 800ce5a:	2200      	movcc	r2, #0
 800ce5c:	441a      	add	r2, r3
 800ce5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ce62:	b17b      	cbz	r3, 800ce84 <__mdiff+0x108>
 800ce64:	6107      	str	r7, [r0, #16]
 800ce66:	e7a3      	b.n	800cdb0 <__mdiff+0x34>
 800ce68:	f856 8b04 	ldr.w	r8, [r6], #4
 800ce6c:	fa11 f288 	uxtah	r2, r1, r8
 800ce70:	1414      	asrs	r4, r2, #16
 800ce72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ce76:	b292      	uxth	r2, r2
 800ce78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ce7c:	f84e 2b04 	str.w	r2, [lr], #4
 800ce80:	1421      	asrs	r1, r4, #16
 800ce82:	e7e0      	b.n	800ce46 <__mdiff+0xca>
 800ce84:	3f01      	subs	r7, #1
 800ce86:	e7ea      	b.n	800ce5e <__mdiff+0xe2>
 800ce88:	0800de1f 	.word	0x0800de1f
 800ce8c:	0800de90 	.word	0x0800de90

0800ce90 <__d2b>:
 800ce90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce94:	4689      	mov	r9, r1
 800ce96:	2101      	movs	r1, #1
 800ce98:	ec57 6b10 	vmov	r6, r7, d0
 800ce9c:	4690      	mov	r8, r2
 800ce9e:	f7ff fccf 	bl	800c840 <_Balloc>
 800cea2:	4604      	mov	r4, r0
 800cea4:	b930      	cbnz	r0, 800ceb4 <__d2b+0x24>
 800cea6:	4602      	mov	r2, r0
 800cea8:	4b25      	ldr	r3, [pc, #148]	; (800cf40 <__d2b+0xb0>)
 800ceaa:	4826      	ldr	r0, [pc, #152]	; (800cf44 <__d2b+0xb4>)
 800ceac:	f240 310a 	movw	r1, #778	; 0x30a
 800ceb0:	f000 fc5c 	bl	800d76c <__assert_func>
 800ceb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ceb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cebc:	bb35      	cbnz	r5, 800cf0c <__d2b+0x7c>
 800cebe:	2e00      	cmp	r6, #0
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	d028      	beq.n	800cf16 <__d2b+0x86>
 800cec4:	4668      	mov	r0, sp
 800cec6:	9600      	str	r6, [sp, #0]
 800cec8:	f7ff fd82 	bl	800c9d0 <__lo0bits>
 800cecc:	9900      	ldr	r1, [sp, #0]
 800cece:	b300      	cbz	r0, 800cf12 <__d2b+0x82>
 800ced0:	9a01      	ldr	r2, [sp, #4]
 800ced2:	f1c0 0320 	rsb	r3, r0, #32
 800ced6:	fa02 f303 	lsl.w	r3, r2, r3
 800ceda:	430b      	orrs	r3, r1
 800cedc:	40c2      	lsrs	r2, r0
 800cede:	6163      	str	r3, [r4, #20]
 800cee0:	9201      	str	r2, [sp, #4]
 800cee2:	9b01      	ldr	r3, [sp, #4]
 800cee4:	61a3      	str	r3, [r4, #24]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	bf14      	ite	ne
 800ceea:	2202      	movne	r2, #2
 800ceec:	2201      	moveq	r2, #1
 800ceee:	6122      	str	r2, [r4, #16]
 800cef0:	b1d5      	cbz	r5, 800cf28 <__d2b+0x98>
 800cef2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cef6:	4405      	add	r5, r0
 800cef8:	f8c9 5000 	str.w	r5, [r9]
 800cefc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cf00:	f8c8 0000 	str.w	r0, [r8]
 800cf04:	4620      	mov	r0, r4
 800cf06:	b003      	add	sp, #12
 800cf08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf10:	e7d5      	b.n	800cebe <__d2b+0x2e>
 800cf12:	6161      	str	r1, [r4, #20]
 800cf14:	e7e5      	b.n	800cee2 <__d2b+0x52>
 800cf16:	a801      	add	r0, sp, #4
 800cf18:	f7ff fd5a 	bl	800c9d0 <__lo0bits>
 800cf1c:	9b01      	ldr	r3, [sp, #4]
 800cf1e:	6163      	str	r3, [r4, #20]
 800cf20:	2201      	movs	r2, #1
 800cf22:	6122      	str	r2, [r4, #16]
 800cf24:	3020      	adds	r0, #32
 800cf26:	e7e3      	b.n	800cef0 <__d2b+0x60>
 800cf28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf30:	f8c9 0000 	str.w	r0, [r9]
 800cf34:	6918      	ldr	r0, [r3, #16]
 800cf36:	f7ff fd2b 	bl	800c990 <__hi0bits>
 800cf3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf3e:	e7df      	b.n	800cf00 <__d2b+0x70>
 800cf40:	0800de1f 	.word	0x0800de1f
 800cf44:	0800de90 	.word	0x0800de90

0800cf48 <_calloc_r>:
 800cf48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf4a:	fba1 2402 	umull	r2, r4, r1, r2
 800cf4e:	b94c      	cbnz	r4, 800cf64 <_calloc_r+0x1c>
 800cf50:	4611      	mov	r1, r2
 800cf52:	9201      	str	r2, [sp, #4]
 800cf54:	f000 f87a 	bl	800d04c <_malloc_r>
 800cf58:	9a01      	ldr	r2, [sp, #4]
 800cf5a:	4605      	mov	r5, r0
 800cf5c:	b930      	cbnz	r0, 800cf6c <_calloc_r+0x24>
 800cf5e:	4628      	mov	r0, r5
 800cf60:	b003      	add	sp, #12
 800cf62:	bd30      	pop	{r4, r5, pc}
 800cf64:	220c      	movs	r2, #12
 800cf66:	6002      	str	r2, [r0, #0]
 800cf68:	2500      	movs	r5, #0
 800cf6a:	e7f8      	b.n	800cf5e <_calloc_r+0x16>
 800cf6c:	4621      	mov	r1, r4
 800cf6e:	f7fd fdbd 	bl	800aaec <memset>
 800cf72:	e7f4      	b.n	800cf5e <_calloc_r+0x16>

0800cf74 <_free_r>:
 800cf74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf76:	2900      	cmp	r1, #0
 800cf78:	d044      	beq.n	800d004 <_free_r+0x90>
 800cf7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf7e:	9001      	str	r0, [sp, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f1a1 0404 	sub.w	r4, r1, #4
 800cf86:	bfb8      	it	lt
 800cf88:	18e4      	addlt	r4, r4, r3
 800cf8a:	f000 fc8f 	bl	800d8ac <__malloc_lock>
 800cf8e:	4a1e      	ldr	r2, [pc, #120]	; (800d008 <_free_r+0x94>)
 800cf90:	9801      	ldr	r0, [sp, #4]
 800cf92:	6813      	ldr	r3, [r2, #0]
 800cf94:	b933      	cbnz	r3, 800cfa4 <_free_r+0x30>
 800cf96:	6063      	str	r3, [r4, #4]
 800cf98:	6014      	str	r4, [r2, #0]
 800cf9a:	b003      	add	sp, #12
 800cf9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfa0:	f000 bc8a 	b.w	800d8b8 <__malloc_unlock>
 800cfa4:	42a3      	cmp	r3, r4
 800cfa6:	d908      	bls.n	800cfba <_free_r+0x46>
 800cfa8:	6825      	ldr	r5, [r4, #0]
 800cfaa:	1961      	adds	r1, r4, r5
 800cfac:	428b      	cmp	r3, r1
 800cfae:	bf01      	itttt	eq
 800cfb0:	6819      	ldreq	r1, [r3, #0]
 800cfb2:	685b      	ldreq	r3, [r3, #4]
 800cfb4:	1949      	addeq	r1, r1, r5
 800cfb6:	6021      	streq	r1, [r4, #0]
 800cfb8:	e7ed      	b.n	800cf96 <_free_r+0x22>
 800cfba:	461a      	mov	r2, r3
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	b10b      	cbz	r3, 800cfc4 <_free_r+0x50>
 800cfc0:	42a3      	cmp	r3, r4
 800cfc2:	d9fa      	bls.n	800cfba <_free_r+0x46>
 800cfc4:	6811      	ldr	r1, [r2, #0]
 800cfc6:	1855      	adds	r5, r2, r1
 800cfc8:	42a5      	cmp	r5, r4
 800cfca:	d10b      	bne.n	800cfe4 <_free_r+0x70>
 800cfcc:	6824      	ldr	r4, [r4, #0]
 800cfce:	4421      	add	r1, r4
 800cfd0:	1854      	adds	r4, r2, r1
 800cfd2:	42a3      	cmp	r3, r4
 800cfd4:	6011      	str	r1, [r2, #0]
 800cfd6:	d1e0      	bne.n	800cf9a <_free_r+0x26>
 800cfd8:	681c      	ldr	r4, [r3, #0]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	6053      	str	r3, [r2, #4]
 800cfde:	4421      	add	r1, r4
 800cfe0:	6011      	str	r1, [r2, #0]
 800cfe2:	e7da      	b.n	800cf9a <_free_r+0x26>
 800cfe4:	d902      	bls.n	800cfec <_free_r+0x78>
 800cfe6:	230c      	movs	r3, #12
 800cfe8:	6003      	str	r3, [r0, #0]
 800cfea:	e7d6      	b.n	800cf9a <_free_r+0x26>
 800cfec:	6825      	ldr	r5, [r4, #0]
 800cfee:	1961      	adds	r1, r4, r5
 800cff0:	428b      	cmp	r3, r1
 800cff2:	bf04      	itt	eq
 800cff4:	6819      	ldreq	r1, [r3, #0]
 800cff6:	685b      	ldreq	r3, [r3, #4]
 800cff8:	6063      	str	r3, [r4, #4]
 800cffa:	bf04      	itt	eq
 800cffc:	1949      	addeq	r1, r1, r5
 800cffe:	6021      	streq	r1, [r4, #0]
 800d000:	6054      	str	r4, [r2, #4]
 800d002:	e7ca      	b.n	800cf9a <_free_r+0x26>
 800d004:	b003      	add	sp, #12
 800d006:	bd30      	pop	{r4, r5, pc}
 800d008:	2000312c 	.word	0x2000312c

0800d00c <sbrk_aligned>:
 800d00c:	b570      	push	{r4, r5, r6, lr}
 800d00e:	4e0e      	ldr	r6, [pc, #56]	; (800d048 <sbrk_aligned+0x3c>)
 800d010:	460c      	mov	r4, r1
 800d012:	6831      	ldr	r1, [r6, #0]
 800d014:	4605      	mov	r5, r0
 800d016:	b911      	cbnz	r1, 800d01e <sbrk_aligned+0x12>
 800d018:	f000 fb42 	bl	800d6a0 <_sbrk_r>
 800d01c:	6030      	str	r0, [r6, #0]
 800d01e:	4621      	mov	r1, r4
 800d020:	4628      	mov	r0, r5
 800d022:	f000 fb3d 	bl	800d6a0 <_sbrk_r>
 800d026:	1c43      	adds	r3, r0, #1
 800d028:	d00a      	beq.n	800d040 <sbrk_aligned+0x34>
 800d02a:	1cc4      	adds	r4, r0, #3
 800d02c:	f024 0403 	bic.w	r4, r4, #3
 800d030:	42a0      	cmp	r0, r4
 800d032:	d007      	beq.n	800d044 <sbrk_aligned+0x38>
 800d034:	1a21      	subs	r1, r4, r0
 800d036:	4628      	mov	r0, r5
 800d038:	f000 fb32 	bl	800d6a0 <_sbrk_r>
 800d03c:	3001      	adds	r0, #1
 800d03e:	d101      	bne.n	800d044 <sbrk_aligned+0x38>
 800d040:	f04f 34ff 	mov.w	r4, #4294967295
 800d044:	4620      	mov	r0, r4
 800d046:	bd70      	pop	{r4, r5, r6, pc}
 800d048:	20003130 	.word	0x20003130

0800d04c <_malloc_r>:
 800d04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d050:	1ccd      	adds	r5, r1, #3
 800d052:	f025 0503 	bic.w	r5, r5, #3
 800d056:	3508      	adds	r5, #8
 800d058:	2d0c      	cmp	r5, #12
 800d05a:	bf38      	it	cc
 800d05c:	250c      	movcc	r5, #12
 800d05e:	2d00      	cmp	r5, #0
 800d060:	4607      	mov	r7, r0
 800d062:	db01      	blt.n	800d068 <_malloc_r+0x1c>
 800d064:	42a9      	cmp	r1, r5
 800d066:	d905      	bls.n	800d074 <_malloc_r+0x28>
 800d068:	230c      	movs	r3, #12
 800d06a:	603b      	str	r3, [r7, #0]
 800d06c:	2600      	movs	r6, #0
 800d06e:	4630      	mov	r0, r6
 800d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d074:	4e2e      	ldr	r6, [pc, #184]	; (800d130 <_malloc_r+0xe4>)
 800d076:	f000 fc19 	bl	800d8ac <__malloc_lock>
 800d07a:	6833      	ldr	r3, [r6, #0]
 800d07c:	461c      	mov	r4, r3
 800d07e:	bb34      	cbnz	r4, 800d0ce <_malloc_r+0x82>
 800d080:	4629      	mov	r1, r5
 800d082:	4638      	mov	r0, r7
 800d084:	f7ff ffc2 	bl	800d00c <sbrk_aligned>
 800d088:	1c43      	adds	r3, r0, #1
 800d08a:	4604      	mov	r4, r0
 800d08c:	d14d      	bne.n	800d12a <_malloc_r+0xde>
 800d08e:	6834      	ldr	r4, [r6, #0]
 800d090:	4626      	mov	r6, r4
 800d092:	2e00      	cmp	r6, #0
 800d094:	d140      	bne.n	800d118 <_malloc_r+0xcc>
 800d096:	6823      	ldr	r3, [r4, #0]
 800d098:	4631      	mov	r1, r6
 800d09a:	4638      	mov	r0, r7
 800d09c:	eb04 0803 	add.w	r8, r4, r3
 800d0a0:	f000 fafe 	bl	800d6a0 <_sbrk_r>
 800d0a4:	4580      	cmp	r8, r0
 800d0a6:	d13a      	bne.n	800d11e <_malloc_r+0xd2>
 800d0a8:	6821      	ldr	r1, [r4, #0]
 800d0aa:	3503      	adds	r5, #3
 800d0ac:	1a6d      	subs	r5, r5, r1
 800d0ae:	f025 0503 	bic.w	r5, r5, #3
 800d0b2:	3508      	adds	r5, #8
 800d0b4:	2d0c      	cmp	r5, #12
 800d0b6:	bf38      	it	cc
 800d0b8:	250c      	movcc	r5, #12
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	4638      	mov	r0, r7
 800d0be:	f7ff ffa5 	bl	800d00c <sbrk_aligned>
 800d0c2:	3001      	adds	r0, #1
 800d0c4:	d02b      	beq.n	800d11e <_malloc_r+0xd2>
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	442b      	add	r3, r5
 800d0ca:	6023      	str	r3, [r4, #0]
 800d0cc:	e00e      	b.n	800d0ec <_malloc_r+0xa0>
 800d0ce:	6822      	ldr	r2, [r4, #0]
 800d0d0:	1b52      	subs	r2, r2, r5
 800d0d2:	d41e      	bmi.n	800d112 <_malloc_r+0xc6>
 800d0d4:	2a0b      	cmp	r2, #11
 800d0d6:	d916      	bls.n	800d106 <_malloc_r+0xba>
 800d0d8:	1961      	adds	r1, r4, r5
 800d0da:	42a3      	cmp	r3, r4
 800d0dc:	6025      	str	r5, [r4, #0]
 800d0de:	bf18      	it	ne
 800d0e0:	6059      	strne	r1, [r3, #4]
 800d0e2:	6863      	ldr	r3, [r4, #4]
 800d0e4:	bf08      	it	eq
 800d0e6:	6031      	streq	r1, [r6, #0]
 800d0e8:	5162      	str	r2, [r4, r5]
 800d0ea:	604b      	str	r3, [r1, #4]
 800d0ec:	4638      	mov	r0, r7
 800d0ee:	f104 060b 	add.w	r6, r4, #11
 800d0f2:	f000 fbe1 	bl	800d8b8 <__malloc_unlock>
 800d0f6:	f026 0607 	bic.w	r6, r6, #7
 800d0fa:	1d23      	adds	r3, r4, #4
 800d0fc:	1af2      	subs	r2, r6, r3
 800d0fe:	d0b6      	beq.n	800d06e <_malloc_r+0x22>
 800d100:	1b9b      	subs	r3, r3, r6
 800d102:	50a3      	str	r3, [r4, r2]
 800d104:	e7b3      	b.n	800d06e <_malloc_r+0x22>
 800d106:	6862      	ldr	r2, [r4, #4]
 800d108:	42a3      	cmp	r3, r4
 800d10a:	bf0c      	ite	eq
 800d10c:	6032      	streq	r2, [r6, #0]
 800d10e:	605a      	strne	r2, [r3, #4]
 800d110:	e7ec      	b.n	800d0ec <_malloc_r+0xa0>
 800d112:	4623      	mov	r3, r4
 800d114:	6864      	ldr	r4, [r4, #4]
 800d116:	e7b2      	b.n	800d07e <_malloc_r+0x32>
 800d118:	4634      	mov	r4, r6
 800d11a:	6876      	ldr	r6, [r6, #4]
 800d11c:	e7b9      	b.n	800d092 <_malloc_r+0x46>
 800d11e:	230c      	movs	r3, #12
 800d120:	603b      	str	r3, [r7, #0]
 800d122:	4638      	mov	r0, r7
 800d124:	f000 fbc8 	bl	800d8b8 <__malloc_unlock>
 800d128:	e7a1      	b.n	800d06e <_malloc_r+0x22>
 800d12a:	6025      	str	r5, [r4, #0]
 800d12c:	e7de      	b.n	800d0ec <_malloc_r+0xa0>
 800d12e:	bf00      	nop
 800d130:	2000312c 	.word	0x2000312c

0800d134 <__ssputs_r>:
 800d134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d138:	688e      	ldr	r6, [r1, #8]
 800d13a:	429e      	cmp	r6, r3
 800d13c:	4682      	mov	sl, r0
 800d13e:	460c      	mov	r4, r1
 800d140:	4690      	mov	r8, r2
 800d142:	461f      	mov	r7, r3
 800d144:	d838      	bhi.n	800d1b8 <__ssputs_r+0x84>
 800d146:	898a      	ldrh	r2, [r1, #12]
 800d148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d14c:	d032      	beq.n	800d1b4 <__ssputs_r+0x80>
 800d14e:	6825      	ldr	r5, [r4, #0]
 800d150:	6909      	ldr	r1, [r1, #16]
 800d152:	eba5 0901 	sub.w	r9, r5, r1
 800d156:	6965      	ldr	r5, [r4, #20]
 800d158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d15c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d160:	3301      	adds	r3, #1
 800d162:	444b      	add	r3, r9
 800d164:	106d      	asrs	r5, r5, #1
 800d166:	429d      	cmp	r5, r3
 800d168:	bf38      	it	cc
 800d16a:	461d      	movcc	r5, r3
 800d16c:	0553      	lsls	r3, r2, #21
 800d16e:	d531      	bpl.n	800d1d4 <__ssputs_r+0xa0>
 800d170:	4629      	mov	r1, r5
 800d172:	f7ff ff6b 	bl	800d04c <_malloc_r>
 800d176:	4606      	mov	r6, r0
 800d178:	b950      	cbnz	r0, 800d190 <__ssputs_r+0x5c>
 800d17a:	230c      	movs	r3, #12
 800d17c:	f8ca 3000 	str.w	r3, [sl]
 800d180:	89a3      	ldrh	r3, [r4, #12]
 800d182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d186:	81a3      	strh	r3, [r4, #12]
 800d188:	f04f 30ff 	mov.w	r0, #4294967295
 800d18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d190:	6921      	ldr	r1, [r4, #16]
 800d192:	464a      	mov	r2, r9
 800d194:	f7ff fb46 	bl	800c824 <memcpy>
 800d198:	89a3      	ldrh	r3, [r4, #12]
 800d19a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1a2:	81a3      	strh	r3, [r4, #12]
 800d1a4:	6126      	str	r6, [r4, #16]
 800d1a6:	6165      	str	r5, [r4, #20]
 800d1a8:	444e      	add	r6, r9
 800d1aa:	eba5 0509 	sub.w	r5, r5, r9
 800d1ae:	6026      	str	r6, [r4, #0]
 800d1b0:	60a5      	str	r5, [r4, #8]
 800d1b2:	463e      	mov	r6, r7
 800d1b4:	42be      	cmp	r6, r7
 800d1b6:	d900      	bls.n	800d1ba <__ssputs_r+0x86>
 800d1b8:	463e      	mov	r6, r7
 800d1ba:	6820      	ldr	r0, [r4, #0]
 800d1bc:	4632      	mov	r2, r6
 800d1be:	4641      	mov	r1, r8
 800d1c0:	f000 fb5a 	bl	800d878 <memmove>
 800d1c4:	68a3      	ldr	r3, [r4, #8]
 800d1c6:	1b9b      	subs	r3, r3, r6
 800d1c8:	60a3      	str	r3, [r4, #8]
 800d1ca:	6823      	ldr	r3, [r4, #0]
 800d1cc:	4433      	add	r3, r6
 800d1ce:	6023      	str	r3, [r4, #0]
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	e7db      	b.n	800d18c <__ssputs_r+0x58>
 800d1d4:	462a      	mov	r2, r5
 800d1d6:	f000 fb75 	bl	800d8c4 <_realloc_r>
 800d1da:	4606      	mov	r6, r0
 800d1dc:	2800      	cmp	r0, #0
 800d1de:	d1e1      	bne.n	800d1a4 <__ssputs_r+0x70>
 800d1e0:	6921      	ldr	r1, [r4, #16]
 800d1e2:	4650      	mov	r0, sl
 800d1e4:	f7ff fec6 	bl	800cf74 <_free_r>
 800d1e8:	e7c7      	b.n	800d17a <__ssputs_r+0x46>
	...

0800d1ec <_svfiprintf_r>:
 800d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	4698      	mov	r8, r3
 800d1f2:	898b      	ldrh	r3, [r1, #12]
 800d1f4:	061b      	lsls	r3, r3, #24
 800d1f6:	b09d      	sub	sp, #116	; 0x74
 800d1f8:	4607      	mov	r7, r0
 800d1fa:	460d      	mov	r5, r1
 800d1fc:	4614      	mov	r4, r2
 800d1fe:	d50e      	bpl.n	800d21e <_svfiprintf_r+0x32>
 800d200:	690b      	ldr	r3, [r1, #16]
 800d202:	b963      	cbnz	r3, 800d21e <_svfiprintf_r+0x32>
 800d204:	2140      	movs	r1, #64	; 0x40
 800d206:	f7ff ff21 	bl	800d04c <_malloc_r>
 800d20a:	6028      	str	r0, [r5, #0]
 800d20c:	6128      	str	r0, [r5, #16]
 800d20e:	b920      	cbnz	r0, 800d21a <_svfiprintf_r+0x2e>
 800d210:	230c      	movs	r3, #12
 800d212:	603b      	str	r3, [r7, #0]
 800d214:	f04f 30ff 	mov.w	r0, #4294967295
 800d218:	e0d1      	b.n	800d3be <_svfiprintf_r+0x1d2>
 800d21a:	2340      	movs	r3, #64	; 0x40
 800d21c:	616b      	str	r3, [r5, #20]
 800d21e:	2300      	movs	r3, #0
 800d220:	9309      	str	r3, [sp, #36]	; 0x24
 800d222:	2320      	movs	r3, #32
 800d224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d228:	f8cd 800c 	str.w	r8, [sp, #12]
 800d22c:	2330      	movs	r3, #48	; 0x30
 800d22e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d3d8 <_svfiprintf_r+0x1ec>
 800d232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d236:	f04f 0901 	mov.w	r9, #1
 800d23a:	4623      	mov	r3, r4
 800d23c:	469a      	mov	sl, r3
 800d23e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d242:	b10a      	cbz	r2, 800d248 <_svfiprintf_r+0x5c>
 800d244:	2a25      	cmp	r2, #37	; 0x25
 800d246:	d1f9      	bne.n	800d23c <_svfiprintf_r+0x50>
 800d248:	ebba 0b04 	subs.w	fp, sl, r4
 800d24c:	d00b      	beq.n	800d266 <_svfiprintf_r+0x7a>
 800d24e:	465b      	mov	r3, fp
 800d250:	4622      	mov	r2, r4
 800d252:	4629      	mov	r1, r5
 800d254:	4638      	mov	r0, r7
 800d256:	f7ff ff6d 	bl	800d134 <__ssputs_r>
 800d25a:	3001      	adds	r0, #1
 800d25c:	f000 80aa 	beq.w	800d3b4 <_svfiprintf_r+0x1c8>
 800d260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d262:	445a      	add	r2, fp
 800d264:	9209      	str	r2, [sp, #36]	; 0x24
 800d266:	f89a 3000 	ldrb.w	r3, [sl]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	f000 80a2 	beq.w	800d3b4 <_svfiprintf_r+0x1c8>
 800d270:	2300      	movs	r3, #0
 800d272:	f04f 32ff 	mov.w	r2, #4294967295
 800d276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d27a:	f10a 0a01 	add.w	sl, sl, #1
 800d27e:	9304      	str	r3, [sp, #16]
 800d280:	9307      	str	r3, [sp, #28]
 800d282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d286:	931a      	str	r3, [sp, #104]	; 0x68
 800d288:	4654      	mov	r4, sl
 800d28a:	2205      	movs	r2, #5
 800d28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d290:	4851      	ldr	r0, [pc, #324]	; (800d3d8 <_svfiprintf_r+0x1ec>)
 800d292:	f7f2 ffc5 	bl	8000220 <memchr>
 800d296:	9a04      	ldr	r2, [sp, #16]
 800d298:	b9d8      	cbnz	r0, 800d2d2 <_svfiprintf_r+0xe6>
 800d29a:	06d0      	lsls	r0, r2, #27
 800d29c:	bf44      	itt	mi
 800d29e:	2320      	movmi	r3, #32
 800d2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2a4:	0711      	lsls	r1, r2, #28
 800d2a6:	bf44      	itt	mi
 800d2a8:	232b      	movmi	r3, #43	; 0x2b
 800d2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d2b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d2b4:	d015      	beq.n	800d2e2 <_svfiprintf_r+0xf6>
 800d2b6:	9a07      	ldr	r2, [sp, #28]
 800d2b8:	4654      	mov	r4, sl
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	f04f 0c0a 	mov.w	ip, #10
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2c6:	3b30      	subs	r3, #48	; 0x30
 800d2c8:	2b09      	cmp	r3, #9
 800d2ca:	d94e      	bls.n	800d36a <_svfiprintf_r+0x17e>
 800d2cc:	b1b0      	cbz	r0, 800d2fc <_svfiprintf_r+0x110>
 800d2ce:	9207      	str	r2, [sp, #28]
 800d2d0:	e014      	b.n	800d2fc <_svfiprintf_r+0x110>
 800d2d2:	eba0 0308 	sub.w	r3, r0, r8
 800d2d6:	fa09 f303 	lsl.w	r3, r9, r3
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	9304      	str	r3, [sp, #16]
 800d2de:	46a2      	mov	sl, r4
 800d2e0:	e7d2      	b.n	800d288 <_svfiprintf_r+0x9c>
 800d2e2:	9b03      	ldr	r3, [sp, #12]
 800d2e4:	1d19      	adds	r1, r3, #4
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	9103      	str	r1, [sp, #12]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	bfbb      	ittet	lt
 800d2ee:	425b      	neglt	r3, r3
 800d2f0:	f042 0202 	orrlt.w	r2, r2, #2
 800d2f4:	9307      	strge	r3, [sp, #28]
 800d2f6:	9307      	strlt	r3, [sp, #28]
 800d2f8:	bfb8      	it	lt
 800d2fa:	9204      	strlt	r2, [sp, #16]
 800d2fc:	7823      	ldrb	r3, [r4, #0]
 800d2fe:	2b2e      	cmp	r3, #46	; 0x2e
 800d300:	d10c      	bne.n	800d31c <_svfiprintf_r+0x130>
 800d302:	7863      	ldrb	r3, [r4, #1]
 800d304:	2b2a      	cmp	r3, #42	; 0x2a
 800d306:	d135      	bne.n	800d374 <_svfiprintf_r+0x188>
 800d308:	9b03      	ldr	r3, [sp, #12]
 800d30a:	1d1a      	adds	r2, r3, #4
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	9203      	str	r2, [sp, #12]
 800d310:	2b00      	cmp	r3, #0
 800d312:	bfb8      	it	lt
 800d314:	f04f 33ff 	movlt.w	r3, #4294967295
 800d318:	3402      	adds	r4, #2
 800d31a:	9305      	str	r3, [sp, #20]
 800d31c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d3e8 <_svfiprintf_r+0x1fc>
 800d320:	7821      	ldrb	r1, [r4, #0]
 800d322:	2203      	movs	r2, #3
 800d324:	4650      	mov	r0, sl
 800d326:	f7f2 ff7b 	bl	8000220 <memchr>
 800d32a:	b140      	cbz	r0, 800d33e <_svfiprintf_r+0x152>
 800d32c:	2340      	movs	r3, #64	; 0x40
 800d32e:	eba0 000a 	sub.w	r0, r0, sl
 800d332:	fa03 f000 	lsl.w	r0, r3, r0
 800d336:	9b04      	ldr	r3, [sp, #16]
 800d338:	4303      	orrs	r3, r0
 800d33a:	3401      	adds	r4, #1
 800d33c:	9304      	str	r3, [sp, #16]
 800d33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d342:	4826      	ldr	r0, [pc, #152]	; (800d3dc <_svfiprintf_r+0x1f0>)
 800d344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d348:	2206      	movs	r2, #6
 800d34a:	f7f2 ff69 	bl	8000220 <memchr>
 800d34e:	2800      	cmp	r0, #0
 800d350:	d038      	beq.n	800d3c4 <_svfiprintf_r+0x1d8>
 800d352:	4b23      	ldr	r3, [pc, #140]	; (800d3e0 <_svfiprintf_r+0x1f4>)
 800d354:	bb1b      	cbnz	r3, 800d39e <_svfiprintf_r+0x1b2>
 800d356:	9b03      	ldr	r3, [sp, #12]
 800d358:	3307      	adds	r3, #7
 800d35a:	f023 0307 	bic.w	r3, r3, #7
 800d35e:	3308      	adds	r3, #8
 800d360:	9303      	str	r3, [sp, #12]
 800d362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d364:	4433      	add	r3, r6
 800d366:	9309      	str	r3, [sp, #36]	; 0x24
 800d368:	e767      	b.n	800d23a <_svfiprintf_r+0x4e>
 800d36a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d36e:	460c      	mov	r4, r1
 800d370:	2001      	movs	r0, #1
 800d372:	e7a5      	b.n	800d2c0 <_svfiprintf_r+0xd4>
 800d374:	2300      	movs	r3, #0
 800d376:	3401      	adds	r4, #1
 800d378:	9305      	str	r3, [sp, #20]
 800d37a:	4619      	mov	r1, r3
 800d37c:	f04f 0c0a 	mov.w	ip, #10
 800d380:	4620      	mov	r0, r4
 800d382:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d386:	3a30      	subs	r2, #48	; 0x30
 800d388:	2a09      	cmp	r2, #9
 800d38a:	d903      	bls.n	800d394 <_svfiprintf_r+0x1a8>
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d0c5      	beq.n	800d31c <_svfiprintf_r+0x130>
 800d390:	9105      	str	r1, [sp, #20]
 800d392:	e7c3      	b.n	800d31c <_svfiprintf_r+0x130>
 800d394:	fb0c 2101 	mla	r1, ip, r1, r2
 800d398:	4604      	mov	r4, r0
 800d39a:	2301      	movs	r3, #1
 800d39c:	e7f0      	b.n	800d380 <_svfiprintf_r+0x194>
 800d39e:	ab03      	add	r3, sp, #12
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	462a      	mov	r2, r5
 800d3a4:	4b0f      	ldr	r3, [pc, #60]	; (800d3e4 <_svfiprintf_r+0x1f8>)
 800d3a6:	a904      	add	r1, sp, #16
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	f7fd fc47 	bl	800ac3c <_printf_float>
 800d3ae:	1c42      	adds	r2, r0, #1
 800d3b0:	4606      	mov	r6, r0
 800d3b2:	d1d6      	bne.n	800d362 <_svfiprintf_r+0x176>
 800d3b4:	89ab      	ldrh	r3, [r5, #12]
 800d3b6:	065b      	lsls	r3, r3, #25
 800d3b8:	f53f af2c 	bmi.w	800d214 <_svfiprintf_r+0x28>
 800d3bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3be:	b01d      	add	sp, #116	; 0x74
 800d3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c4:	ab03      	add	r3, sp, #12
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	462a      	mov	r2, r5
 800d3ca:	4b06      	ldr	r3, [pc, #24]	; (800d3e4 <_svfiprintf_r+0x1f8>)
 800d3cc:	a904      	add	r1, sp, #16
 800d3ce:	4638      	mov	r0, r7
 800d3d0:	f7fd fed8 	bl	800b184 <_printf_i>
 800d3d4:	e7eb      	b.n	800d3ae <_svfiprintf_r+0x1c2>
 800d3d6:	bf00      	nop
 800d3d8:	0800dfec 	.word	0x0800dfec
 800d3dc:	0800dff6 	.word	0x0800dff6
 800d3e0:	0800ac3d 	.word	0x0800ac3d
 800d3e4:	0800d135 	.word	0x0800d135
 800d3e8:	0800dff2 	.word	0x0800dff2

0800d3ec <__sfputc_r>:
 800d3ec:	6893      	ldr	r3, [r2, #8]
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	b410      	push	{r4}
 800d3f4:	6093      	str	r3, [r2, #8]
 800d3f6:	da08      	bge.n	800d40a <__sfputc_r+0x1e>
 800d3f8:	6994      	ldr	r4, [r2, #24]
 800d3fa:	42a3      	cmp	r3, r4
 800d3fc:	db01      	blt.n	800d402 <__sfputc_r+0x16>
 800d3fe:	290a      	cmp	r1, #10
 800d400:	d103      	bne.n	800d40a <__sfputc_r+0x1e>
 800d402:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d406:	f7fe b8a5 	b.w	800b554 <__swbuf_r>
 800d40a:	6813      	ldr	r3, [r2, #0]
 800d40c:	1c58      	adds	r0, r3, #1
 800d40e:	6010      	str	r0, [r2, #0]
 800d410:	7019      	strb	r1, [r3, #0]
 800d412:	4608      	mov	r0, r1
 800d414:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d418:	4770      	bx	lr

0800d41a <__sfputs_r>:
 800d41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41c:	4606      	mov	r6, r0
 800d41e:	460f      	mov	r7, r1
 800d420:	4614      	mov	r4, r2
 800d422:	18d5      	adds	r5, r2, r3
 800d424:	42ac      	cmp	r4, r5
 800d426:	d101      	bne.n	800d42c <__sfputs_r+0x12>
 800d428:	2000      	movs	r0, #0
 800d42a:	e007      	b.n	800d43c <__sfputs_r+0x22>
 800d42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d430:	463a      	mov	r2, r7
 800d432:	4630      	mov	r0, r6
 800d434:	f7ff ffda 	bl	800d3ec <__sfputc_r>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d1f3      	bne.n	800d424 <__sfputs_r+0xa>
 800d43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d440 <_vfiprintf_r>:
 800d440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d444:	460d      	mov	r5, r1
 800d446:	b09d      	sub	sp, #116	; 0x74
 800d448:	4614      	mov	r4, r2
 800d44a:	4698      	mov	r8, r3
 800d44c:	4606      	mov	r6, r0
 800d44e:	b118      	cbz	r0, 800d458 <_vfiprintf_r+0x18>
 800d450:	6983      	ldr	r3, [r0, #24]
 800d452:	b90b      	cbnz	r3, 800d458 <_vfiprintf_r+0x18>
 800d454:	f7ff f8d4 	bl	800c600 <__sinit>
 800d458:	4b89      	ldr	r3, [pc, #548]	; (800d680 <_vfiprintf_r+0x240>)
 800d45a:	429d      	cmp	r5, r3
 800d45c:	d11b      	bne.n	800d496 <_vfiprintf_r+0x56>
 800d45e:	6875      	ldr	r5, [r6, #4]
 800d460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d462:	07d9      	lsls	r1, r3, #31
 800d464:	d405      	bmi.n	800d472 <_vfiprintf_r+0x32>
 800d466:	89ab      	ldrh	r3, [r5, #12]
 800d468:	059a      	lsls	r2, r3, #22
 800d46a:	d402      	bmi.n	800d472 <_vfiprintf_r+0x32>
 800d46c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d46e:	f7ff f96a 	bl	800c746 <__retarget_lock_acquire_recursive>
 800d472:	89ab      	ldrh	r3, [r5, #12]
 800d474:	071b      	lsls	r3, r3, #28
 800d476:	d501      	bpl.n	800d47c <_vfiprintf_r+0x3c>
 800d478:	692b      	ldr	r3, [r5, #16]
 800d47a:	b9eb      	cbnz	r3, 800d4b8 <_vfiprintf_r+0x78>
 800d47c:	4629      	mov	r1, r5
 800d47e:	4630      	mov	r0, r6
 800d480:	f7fe f8ba 	bl	800b5f8 <__swsetup_r>
 800d484:	b1c0      	cbz	r0, 800d4b8 <_vfiprintf_r+0x78>
 800d486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d488:	07dc      	lsls	r4, r3, #31
 800d48a:	d50e      	bpl.n	800d4aa <_vfiprintf_r+0x6a>
 800d48c:	f04f 30ff 	mov.w	r0, #4294967295
 800d490:	b01d      	add	sp, #116	; 0x74
 800d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d496:	4b7b      	ldr	r3, [pc, #492]	; (800d684 <_vfiprintf_r+0x244>)
 800d498:	429d      	cmp	r5, r3
 800d49a:	d101      	bne.n	800d4a0 <_vfiprintf_r+0x60>
 800d49c:	68b5      	ldr	r5, [r6, #8]
 800d49e:	e7df      	b.n	800d460 <_vfiprintf_r+0x20>
 800d4a0:	4b79      	ldr	r3, [pc, #484]	; (800d688 <_vfiprintf_r+0x248>)
 800d4a2:	429d      	cmp	r5, r3
 800d4a4:	bf08      	it	eq
 800d4a6:	68f5      	ldreq	r5, [r6, #12]
 800d4a8:	e7da      	b.n	800d460 <_vfiprintf_r+0x20>
 800d4aa:	89ab      	ldrh	r3, [r5, #12]
 800d4ac:	0598      	lsls	r0, r3, #22
 800d4ae:	d4ed      	bmi.n	800d48c <_vfiprintf_r+0x4c>
 800d4b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4b2:	f7ff f949 	bl	800c748 <__retarget_lock_release_recursive>
 800d4b6:	e7e9      	b.n	800d48c <_vfiprintf_r+0x4c>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d4bc:	2320      	movs	r3, #32
 800d4be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4c6:	2330      	movs	r3, #48	; 0x30
 800d4c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d68c <_vfiprintf_r+0x24c>
 800d4cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4d0:	f04f 0901 	mov.w	r9, #1
 800d4d4:	4623      	mov	r3, r4
 800d4d6:	469a      	mov	sl, r3
 800d4d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4dc:	b10a      	cbz	r2, 800d4e2 <_vfiprintf_r+0xa2>
 800d4de:	2a25      	cmp	r2, #37	; 0x25
 800d4e0:	d1f9      	bne.n	800d4d6 <_vfiprintf_r+0x96>
 800d4e2:	ebba 0b04 	subs.w	fp, sl, r4
 800d4e6:	d00b      	beq.n	800d500 <_vfiprintf_r+0xc0>
 800d4e8:	465b      	mov	r3, fp
 800d4ea:	4622      	mov	r2, r4
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	4630      	mov	r0, r6
 800d4f0:	f7ff ff93 	bl	800d41a <__sfputs_r>
 800d4f4:	3001      	adds	r0, #1
 800d4f6:	f000 80aa 	beq.w	800d64e <_vfiprintf_r+0x20e>
 800d4fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4fc:	445a      	add	r2, fp
 800d4fe:	9209      	str	r2, [sp, #36]	; 0x24
 800d500:	f89a 3000 	ldrb.w	r3, [sl]
 800d504:	2b00      	cmp	r3, #0
 800d506:	f000 80a2 	beq.w	800d64e <_vfiprintf_r+0x20e>
 800d50a:	2300      	movs	r3, #0
 800d50c:	f04f 32ff 	mov.w	r2, #4294967295
 800d510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d514:	f10a 0a01 	add.w	sl, sl, #1
 800d518:	9304      	str	r3, [sp, #16]
 800d51a:	9307      	str	r3, [sp, #28]
 800d51c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d520:	931a      	str	r3, [sp, #104]	; 0x68
 800d522:	4654      	mov	r4, sl
 800d524:	2205      	movs	r2, #5
 800d526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d52a:	4858      	ldr	r0, [pc, #352]	; (800d68c <_vfiprintf_r+0x24c>)
 800d52c:	f7f2 fe78 	bl	8000220 <memchr>
 800d530:	9a04      	ldr	r2, [sp, #16]
 800d532:	b9d8      	cbnz	r0, 800d56c <_vfiprintf_r+0x12c>
 800d534:	06d1      	lsls	r1, r2, #27
 800d536:	bf44      	itt	mi
 800d538:	2320      	movmi	r3, #32
 800d53a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d53e:	0713      	lsls	r3, r2, #28
 800d540:	bf44      	itt	mi
 800d542:	232b      	movmi	r3, #43	; 0x2b
 800d544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d548:	f89a 3000 	ldrb.w	r3, [sl]
 800d54c:	2b2a      	cmp	r3, #42	; 0x2a
 800d54e:	d015      	beq.n	800d57c <_vfiprintf_r+0x13c>
 800d550:	9a07      	ldr	r2, [sp, #28]
 800d552:	4654      	mov	r4, sl
 800d554:	2000      	movs	r0, #0
 800d556:	f04f 0c0a 	mov.w	ip, #10
 800d55a:	4621      	mov	r1, r4
 800d55c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d560:	3b30      	subs	r3, #48	; 0x30
 800d562:	2b09      	cmp	r3, #9
 800d564:	d94e      	bls.n	800d604 <_vfiprintf_r+0x1c4>
 800d566:	b1b0      	cbz	r0, 800d596 <_vfiprintf_r+0x156>
 800d568:	9207      	str	r2, [sp, #28]
 800d56a:	e014      	b.n	800d596 <_vfiprintf_r+0x156>
 800d56c:	eba0 0308 	sub.w	r3, r0, r8
 800d570:	fa09 f303 	lsl.w	r3, r9, r3
 800d574:	4313      	orrs	r3, r2
 800d576:	9304      	str	r3, [sp, #16]
 800d578:	46a2      	mov	sl, r4
 800d57a:	e7d2      	b.n	800d522 <_vfiprintf_r+0xe2>
 800d57c:	9b03      	ldr	r3, [sp, #12]
 800d57e:	1d19      	adds	r1, r3, #4
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	9103      	str	r1, [sp, #12]
 800d584:	2b00      	cmp	r3, #0
 800d586:	bfbb      	ittet	lt
 800d588:	425b      	neglt	r3, r3
 800d58a:	f042 0202 	orrlt.w	r2, r2, #2
 800d58e:	9307      	strge	r3, [sp, #28]
 800d590:	9307      	strlt	r3, [sp, #28]
 800d592:	bfb8      	it	lt
 800d594:	9204      	strlt	r2, [sp, #16]
 800d596:	7823      	ldrb	r3, [r4, #0]
 800d598:	2b2e      	cmp	r3, #46	; 0x2e
 800d59a:	d10c      	bne.n	800d5b6 <_vfiprintf_r+0x176>
 800d59c:	7863      	ldrb	r3, [r4, #1]
 800d59e:	2b2a      	cmp	r3, #42	; 0x2a
 800d5a0:	d135      	bne.n	800d60e <_vfiprintf_r+0x1ce>
 800d5a2:	9b03      	ldr	r3, [sp, #12]
 800d5a4:	1d1a      	adds	r2, r3, #4
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	9203      	str	r2, [sp, #12]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bfb8      	it	lt
 800d5ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5b2:	3402      	adds	r4, #2
 800d5b4:	9305      	str	r3, [sp, #20]
 800d5b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d69c <_vfiprintf_r+0x25c>
 800d5ba:	7821      	ldrb	r1, [r4, #0]
 800d5bc:	2203      	movs	r2, #3
 800d5be:	4650      	mov	r0, sl
 800d5c0:	f7f2 fe2e 	bl	8000220 <memchr>
 800d5c4:	b140      	cbz	r0, 800d5d8 <_vfiprintf_r+0x198>
 800d5c6:	2340      	movs	r3, #64	; 0x40
 800d5c8:	eba0 000a 	sub.w	r0, r0, sl
 800d5cc:	fa03 f000 	lsl.w	r0, r3, r0
 800d5d0:	9b04      	ldr	r3, [sp, #16]
 800d5d2:	4303      	orrs	r3, r0
 800d5d4:	3401      	adds	r4, #1
 800d5d6:	9304      	str	r3, [sp, #16]
 800d5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5dc:	482c      	ldr	r0, [pc, #176]	; (800d690 <_vfiprintf_r+0x250>)
 800d5de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5e2:	2206      	movs	r2, #6
 800d5e4:	f7f2 fe1c 	bl	8000220 <memchr>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d03f      	beq.n	800d66c <_vfiprintf_r+0x22c>
 800d5ec:	4b29      	ldr	r3, [pc, #164]	; (800d694 <_vfiprintf_r+0x254>)
 800d5ee:	bb1b      	cbnz	r3, 800d638 <_vfiprintf_r+0x1f8>
 800d5f0:	9b03      	ldr	r3, [sp, #12]
 800d5f2:	3307      	adds	r3, #7
 800d5f4:	f023 0307 	bic.w	r3, r3, #7
 800d5f8:	3308      	adds	r3, #8
 800d5fa:	9303      	str	r3, [sp, #12]
 800d5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5fe:	443b      	add	r3, r7
 800d600:	9309      	str	r3, [sp, #36]	; 0x24
 800d602:	e767      	b.n	800d4d4 <_vfiprintf_r+0x94>
 800d604:	fb0c 3202 	mla	r2, ip, r2, r3
 800d608:	460c      	mov	r4, r1
 800d60a:	2001      	movs	r0, #1
 800d60c:	e7a5      	b.n	800d55a <_vfiprintf_r+0x11a>
 800d60e:	2300      	movs	r3, #0
 800d610:	3401      	adds	r4, #1
 800d612:	9305      	str	r3, [sp, #20]
 800d614:	4619      	mov	r1, r3
 800d616:	f04f 0c0a 	mov.w	ip, #10
 800d61a:	4620      	mov	r0, r4
 800d61c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d620:	3a30      	subs	r2, #48	; 0x30
 800d622:	2a09      	cmp	r2, #9
 800d624:	d903      	bls.n	800d62e <_vfiprintf_r+0x1ee>
 800d626:	2b00      	cmp	r3, #0
 800d628:	d0c5      	beq.n	800d5b6 <_vfiprintf_r+0x176>
 800d62a:	9105      	str	r1, [sp, #20]
 800d62c:	e7c3      	b.n	800d5b6 <_vfiprintf_r+0x176>
 800d62e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d632:	4604      	mov	r4, r0
 800d634:	2301      	movs	r3, #1
 800d636:	e7f0      	b.n	800d61a <_vfiprintf_r+0x1da>
 800d638:	ab03      	add	r3, sp, #12
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	462a      	mov	r2, r5
 800d63e:	4b16      	ldr	r3, [pc, #88]	; (800d698 <_vfiprintf_r+0x258>)
 800d640:	a904      	add	r1, sp, #16
 800d642:	4630      	mov	r0, r6
 800d644:	f7fd fafa 	bl	800ac3c <_printf_float>
 800d648:	4607      	mov	r7, r0
 800d64a:	1c78      	adds	r0, r7, #1
 800d64c:	d1d6      	bne.n	800d5fc <_vfiprintf_r+0x1bc>
 800d64e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d650:	07d9      	lsls	r1, r3, #31
 800d652:	d405      	bmi.n	800d660 <_vfiprintf_r+0x220>
 800d654:	89ab      	ldrh	r3, [r5, #12]
 800d656:	059a      	lsls	r2, r3, #22
 800d658:	d402      	bmi.n	800d660 <_vfiprintf_r+0x220>
 800d65a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d65c:	f7ff f874 	bl	800c748 <__retarget_lock_release_recursive>
 800d660:	89ab      	ldrh	r3, [r5, #12]
 800d662:	065b      	lsls	r3, r3, #25
 800d664:	f53f af12 	bmi.w	800d48c <_vfiprintf_r+0x4c>
 800d668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d66a:	e711      	b.n	800d490 <_vfiprintf_r+0x50>
 800d66c:	ab03      	add	r3, sp, #12
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	462a      	mov	r2, r5
 800d672:	4b09      	ldr	r3, [pc, #36]	; (800d698 <_vfiprintf_r+0x258>)
 800d674:	a904      	add	r1, sp, #16
 800d676:	4630      	mov	r0, r6
 800d678:	f7fd fd84 	bl	800b184 <_printf_i>
 800d67c:	e7e4      	b.n	800d648 <_vfiprintf_r+0x208>
 800d67e:	bf00      	nop
 800d680:	0800de50 	.word	0x0800de50
 800d684:	0800de70 	.word	0x0800de70
 800d688:	0800de30 	.word	0x0800de30
 800d68c:	0800dfec 	.word	0x0800dfec
 800d690:	0800dff6 	.word	0x0800dff6
 800d694:	0800ac3d 	.word	0x0800ac3d
 800d698:	0800d41b 	.word	0x0800d41b
 800d69c:	0800dff2 	.word	0x0800dff2

0800d6a0 <_sbrk_r>:
 800d6a0:	b538      	push	{r3, r4, r5, lr}
 800d6a2:	4d06      	ldr	r5, [pc, #24]	; (800d6bc <_sbrk_r+0x1c>)
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	4608      	mov	r0, r1
 800d6aa:	602b      	str	r3, [r5, #0]
 800d6ac:	f7f4 fd2c 	bl	8002108 <_sbrk>
 800d6b0:	1c43      	adds	r3, r0, #1
 800d6b2:	d102      	bne.n	800d6ba <_sbrk_r+0x1a>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	b103      	cbz	r3, 800d6ba <_sbrk_r+0x1a>
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	bd38      	pop	{r3, r4, r5, pc}
 800d6bc:	20003134 	.word	0x20003134

0800d6c0 <__sread>:
 800d6c0:	b510      	push	{r4, lr}
 800d6c2:	460c      	mov	r4, r1
 800d6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6c8:	f000 f92c 	bl	800d924 <_read_r>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	bfab      	itete	ge
 800d6d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d6d2:	89a3      	ldrhlt	r3, [r4, #12]
 800d6d4:	181b      	addge	r3, r3, r0
 800d6d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d6da:	bfac      	ite	ge
 800d6dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d6de:	81a3      	strhlt	r3, [r4, #12]
 800d6e0:	bd10      	pop	{r4, pc}

0800d6e2 <__swrite>:
 800d6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e6:	461f      	mov	r7, r3
 800d6e8:	898b      	ldrh	r3, [r1, #12]
 800d6ea:	05db      	lsls	r3, r3, #23
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	4616      	mov	r6, r2
 800d6f2:	d505      	bpl.n	800d700 <__swrite+0x1e>
 800d6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6f8:	2302      	movs	r3, #2
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f000 f898 	bl	800d830 <_lseek_r>
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d70a:	81a3      	strh	r3, [r4, #12]
 800d70c:	4632      	mov	r2, r6
 800d70e:	463b      	mov	r3, r7
 800d710:	4628      	mov	r0, r5
 800d712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d716:	f000 b817 	b.w	800d748 <_write_r>

0800d71a <__sseek>:
 800d71a:	b510      	push	{r4, lr}
 800d71c:	460c      	mov	r4, r1
 800d71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d722:	f000 f885 	bl	800d830 <_lseek_r>
 800d726:	1c43      	adds	r3, r0, #1
 800d728:	89a3      	ldrh	r3, [r4, #12]
 800d72a:	bf15      	itete	ne
 800d72c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d72e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d736:	81a3      	strheq	r3, [r4, #12]
 800d738:	bf18      	it	ne
 800d73a:	81a3      	strhne	r3, [r4, #12]
 800d73c:	bd10      	pop	{r4, pc}

0800d73e <__sclose>:
 800d73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d742:	f000 b831 	b.w	800d7a8 <_close_r>
	...

0800d748 <_write_r>:
 800d748:	b538      	push	{r3, r4, r5, lr}
 800d74a:	4d07      	ldr	r5, [pc, #28]	; (800d768 <_write_r+0x20>)
 800d74c:	4604      	mov	r4, r0
 800d74e:	4608      	mov	r0, r1
 800d750:	4611      	mov	r1, r2
 800d752:	2200      	movs	r2, #0
 800d754:	602a      	str	r2, [r5, #0]
 800d756:	461a      	mov	r2, r3
 800d758:	f7f3 fbef 	bl	8000f3a <_write>
 800d75c:	1c43      	adds	r3, r0, #1
 800d75e:	d102      	bne.n	800d766 <_write_r+0x1e>
 800d760:	682b      	ldr	r3, [r5, #0]
 800d762:	b103      	cbz	r3, 800d766 <_write_r+0x1e>
 800d764:	6023      	str	r3, [r4, #0]
 800d766:	bd38      	pop	{r3, r4, r5, pc}
 800d768:	20003134 	.word	0x20003134

0800d76c <__assert_func>:
 800d76c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d76e:	4614      	mov	r4, r2
 800d770:	461a      	mov	r2, r3
 800d772:	4b09      	ldr	r3, [pc, #36]	; (800d798 <__assert_func+0x2c>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4605      	mov	r5, r0
 800d778:	68d8      	ldr	r0, [r3, #12]
 800d77a:	b14c      	cbz	r4, 800d790 <__assert_func+0x24>
 800d77c:	4b07      	ldr	r3, [pc, #28]	; (800d79c <__assert_func+0x30>)
 800d77e:	9100      	str	r1, [sp, #0]
 800d780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d784:	4906      	ldr	r1, [pc, #24]	; (800d7a0 <__assert_func+0x34>)
 800d786:	462b      	mov	r3, r5
 800d788:	f000 f81e 	bl	800d7c8 <fiprintf>
 800d78c:	f000 f8e9 	bl	800d962 <abort>
 800d790:	4b04      	ldr	r3, [pc, #16]	; (800d7a4 <__assert_func+0x38>)
 800d792:	461c      	mov	r4, r3
 800d794:	e7f3      	b.n	800d77e <__assert_func+0x12>
 800d796:	bf00      	nop
 800d798:	2000000c 	.word	0x2000000c
 800d79c:	0800dffd 	.word	0x0800dffd
 800d7a0:	0800e00a 	.word	0x0800e00a
 800d7a4:	0800e038 	.word	0x0800e038

0800d7a8 <_close_r>:
 800d7a8:	b538      	push	{r3, r4, r5, lr}
 800d7aa:	4d06      	ldr	r5, [pc, #24]	; (800d7c4 <_close_r+0x1c>)
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	4608      	mov	r0, r1
 800d7b2:	602b      	str	r3, [r5, #0]
 800d7b4:	f7f4 fc73 	bl	800209e <_close>
 800d7b8:	1c43      	adds	r3, r0, #1
 800d7ba:	d102      	bne.n	800d7c2 <_close_r+0x1a>
 800d7bc:	682b      	ldr	r3, [r5, #0]
 800d7be:	b103      	cbz	r3, 800d7c2 <_close_r+0x1a>
 800d7c0:	6023      	str	r3, [r4, #0]
 800d7c2:	bd38      	pop	{r3, r4, r5, pc}
 800d7c4:	20003134 	.word	0x20003134

0800d7c8 <fiprintf>:
 800d7c8:	b40e      	push	{r1, r2, r3}
 800d7ca:	b503      	push	{r0, r1, lr}
 800d7cc:	4601      	mov	r1, r0
 800d7ce:	ab03      	add	r3, sp, #12
 800d7d0:	4805      	ldr	r0, [pc, #20]	; (800d7e8 <fiprintf+0x20>)
 800d7d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7d6:	6800      	ldr	r0, [r0, #0]
 800d7d8:	9301      	str	r3, [sp, #4]
 800d7da:	f7ff fe31 	bl	800d440 <_vfiprintf_r>
 800d7de:	b002      	add	sp, #8
 800d7e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7e4:	b003      	add	sp, #12
 800d7e6:	4770      	bx	lr
 800d7e8:	2000000c 	.word	0x2000000c

0800d7ec <_fstat_r>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	4d07      	ldr	r5, [pc, #28]	; (800d80c <_fstat_r+0x20>)
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	4608      	mov	r0, r1
 800d7f6:	4611      	mov	r1, r2
 800d7f8:	602b      	str	r3, [r5, #0]
 800d7fa:	f7f4 fc5c 	bl	80020b6 <_fstat>
 800d7fe:	1c43      	adds	r3, r0, #1
 800d800:	d102      	bne.n	800d808 <_fstat_r+0x1c>
 800d802:	682b      	ldr	r3, [r5, #0]
 800d804:	b103      	cbz	r3, 800d808 <_fstat_r+0x1c>
 800d806:	6023      	str	r3, [r4, #0]
 800d808:	bd38      	pop	{r3, r4, r5, pc}
 800d80a:	bf00      	nop
 800d80c:	20003134 	.word	0x20003134

0800d810 <_isatty_r>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	4d06      	ldr	r5, [pc, #24]	; (800d82c <_isatty_r+0x1c>)
 800d814:	2300      	movs	r3, #0
 800d816:	4604      	mov	r4, r0
 800d818:	4608      	mov	r0, r1
 800d81a:	602b      	str	r3, [r5, #0]
 800d81c:	f7f4 fc5b 	bl	80020d6 <_isatty>
 800d820:	1c43      	adds	r3, r0, #1
 800d822:	d102      	bne.n	800d82a <_isatty_r+0x1a>
 800d824:	682b      	ldr	r3, [r5, #0]
 800d826:	b103      	cbz	r3, 800d82a <_isatty_r+0x1a>
 800d828:	6023      	str	r3, [r4, #0]
 800d82a:	bd38      	pop	{r3, r4, r5, pc}
 800d82c:	20003134 	.word	0x20003134

0800d830 <_lseek_r>:
 800d830:	b538      	push	{r3, r4, r5, lr}
 800d832:	4d07      	ldr	r5, [pc, #28]	; (800d850 <_lseek_r+0x20>)
 800d834:	4604      	mov	r4, r0
 800d836:	4608      	mov	r0, r1
 800d838:	4611      	mov	r1, r2
 800d83a:	2200      	movs	r2, #0
 800d83c:	602a      	str	r2, [r5, #0]
 800d83e:	461a      	mov	r2, r3
 800d840:	f7f4 fc54 	bl	80020ec <_lseek>
 800d844:	1c43      	adds	r3, r0, #1
 800d846:	d102      	bne.n	800d84e <_lseek_r+0x1e>
 800d848:	682b      	ldr	r3, [r5, #0]
 800d84a:	b103      	cbz	r3, 800d84e <_lseek_r+0x1e>
 800d84c:	6023      	str	r3, [r4, #0]
 800d84e:	bd38      	pop	{r3, r4, r5, pc}
 800d850:	20003134 	.word	0x20003134

0800d854 <__ascii_mbtowc>:
 800d854:	b082      	sub	sp, #8
 800d856:	b901      	cbnz	r1, 800d85a <__ascii_mbtowc+0x6>
 800d858:	a901      	add	r1, sp, #4
 800d85a:	b142      	cbz	r2, 800d86e <__ascii_mbtowc+0x1a>
 800d85c:	b14b      	cbz	r3, 800d872 <__ascii_mbtowc+0x1e>
 800d85e:	7813      	ldrb	r3, [r2, #0]
 800d860:	600b      	str	r3, [r1, #0]
 800d862:	7812      	ldrb	r2, [r2, #0]
 800d864:	1e10      	subs	r0, r2, #0
 800d866:	bf18      	it	ne
 800d868:	2001      	movne	r0, #1
 800d86a:	b002      	add	sp, #8
 800d86c:	4770      	bx	lr
 800d86e:	4610      	mov	r0, r2
 800d870:	e7fb      	b.n	800d86a <__ascii_mbtowc+0x16>
 800d872:	f06f 0001 	mvn.w	r0, #1
 800d876:	e7f8      	b.n	800d86a <__ascii_mbtowc+0x16>

0800d878 <memmove>:
 800d878:	4288      	cmp	r0, r1
 800d87a:	b510      	push	{r4, lr}
 800d87c:	eb01 0402 	add.w	r4, r1, r2
 800d880:	d902      	bls.n	800d888 <memmove+0x10>
 800d882:	4284      	cmp	r4, r0
 800d884:	4623      	mov	r3, r4
 800d886:	d807      	bhi.n	800d898 <memmove+0x20>
 800d888:	1e43      	subs	r3, r0, #1
 800d88a:	42a1      	cmp	r1, r4
 800d88c:	d008      	beq.n	800d8a0 <memmove+0x28>
 800d88e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d892:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d896:	e7f8      	b.n	800d88a <memmove+0x12>
 800d898:	4402      	add	r2, r0
 800d89a:	4601      	mov	r1, r0
 800d89c:	428a      	cmp	r2, r1
 800d89e:	d100      	bne.n	800d8a2 <memmove+0x2a>
 800d8a0:	bd10      	pop	{r4, pc}
 800d8a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8aa:	e7f7      	b.n	800d89c <memmove+0x24>

0800d8ac <__malloc_lock>:
 800d8ac:	4801      	ldr	r0, [pc, #4]	; (800d8b4 <__malloc_lock+0x8>)
 800d8ae:	f7fe bf4a 	b.w	800c746 <__retarget_lock_acquire_recursive>
 800d8b2:	bf00      	nop
 800d8b4:	20003128 	.word	0x20003128

0800d8b8 <__malloc_unlock>:
 800d8b8:	4801      	ldr	r0, [pc, #4]	; (800d8c0 <__malloc_unlock+0x8>)
 800d8ba:	f7fe bf45 	b.w	800c748 <__retarget_lock_release_recursive>
 800d8be:	bf00      	nop
 800d8c0:	20003128 	.word	0x20003128

0800d8c4 <_realloc_r>:
 800d8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8c8:	4680      	mov	r8, r0
 800d8ca:	4614      	mov	r4, r2
 800d8cc:	460e      	mov	r6, r1
 800d8ce:	b921      	cbnz	r1, 800d8da <_realloc_r+0x16>
 800d8d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d4:	4611      	mov	r1, r2
 800d8d6:	f7ff bbb9 	b.w	800d04c <_malloc_r>
 800d8da:	b92a      	cbnz	r2, 800d8e8 <_realloc_r+0x24>
 800d8dc:	f7ff fb4a 	bl	800cf74 <_free_r>
 800d8e0:	4625      	mov	r5, r4
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e8:	f000 f842 	bl	800d970 <_malloc_usable_size_r>
 800d8ec:	4284      	cmp	r4, r0
 800d8ee:	4607      	mov	r7, r0
 800d8f0:	d802      	bhi.n	800d8f8 <_realloc_r+0x34>
 800d8f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d8f6:	d812      	bhi.n	800d91e <_realloc_r+0x5a>
 800d8f8:	4621      	mov	r1, r4
 800d8fa:	4640      	mov	r0, r8
 800d8fc:	f7ff fba6 	bl	800d04c <_malloc_r>
 800d900:	4605      	mov	r5, r0
 800d902:	2800      	cmp	r0, #0
 800d904:	d0ed      	beq.n	800d8e2 <_realloc_r+0x1e>
 800d906:	42bc      	cmp	r4, r7
 800d908:	4622      	mov	r2, r4
 800d90a:	4631      	mov	r1, r6
 800d90c:	bf28      	it	cs
 800d90e:	463a      	movcs	r2, r7
 800d910:	f7fe ff88 	bl	800c824 <memcpy>
 800d914:	4631      	mov	r1, r6
 800d916:	4640      	mov	r0, r8
 800d918:	f7ff fb2c 	bl	800cf74 <_free_r>
 800d91c:	e7e1      	b.n	800d8e2 <_realloc_r+0x1e>
 800d91e:	4635      	mov	r5, r6
 800d920:	e7df      	b.n	800d8e2 <_realloc_r+0x1e>
	...

0800d924 <_read_r>:
 800d924:	b538      	push	{r3, r4, r5, lr}
 800d926:	4d07      	ldr	r5, [pc, #28]	; (800d944 <_read_r+0x20>)
 800d928:	4604      	mov	r4, r0
 800d92a:	4608      	mov	r0, r1
 800d92c:	4611      	mov	r1, r2
 800d92e:	2200      	movs	r2, #0
 800d930:	602a      	str	r2, [r5, #0]
 800d932:	461a      	mov	r2, r3
 800d934:	f7f4 fb96 	bl	8002064 <_read>
 800d938:	1c43      	adds	r3, r0, #1
 800d93a:	d102      	bne.n	800d942 <_read_r+0x1e>
 800d93c:	682b      	ldr	r3, [r5, #0]
 800d93e:	b103      	cbz	r3, 800d942 <_read_r+0x1e>
 800d940:	6023      	str	r3, [r4, #0]
 800d942:	bd38      	pop	{r3, r4, r5, pc}
 800d944:	20003134 	.word	0x20003134

0800d948 <__ascii_wctomb>:
 800d948:	b149      	cbz	r1, 800d95e <__ascii_wctomb+0x16>
 800d94a:	2aff      	cmp	r2, #255	; 0xff
 800d94c:	bf85      	ittet	hi
 800d94e:	238a      	movhi	r3, #138	; 0x8a
 800d950:	6003      	strhi	r3, [r0, #0]
 800d952:	700a      	strbls	r2, [r1, #0]
 800d954:	f04f 30ff 	movhi.w	r0, #4294967295
 800d958:	bf98      	it	ls
 800d95a:	2001      	movls	r0, #1
 800d95c:	4770      	bx	lr
 800d95e:	4608      	mov	r0, r1
 800d960:	4770      	bx	lr

0800d962 <abort>:
 800d962:	b508      	push	{r3, lr}
 800d964:	2006      	movs	r0, #6
 800d966:	f000 f833 	bl	800d9d0 <raise>
 800d96a:	2001      	movs	r0, #1
 800d96c:	f7f4 fb70 	bl	8002050 <_exit>

0800d970 <_malloc_usable_size_r>:
 800d970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d974:	1f18      	subs	r0, r3, #4
 800d976:	2b00      	cmp	r3, #0
 800d978:	bfbc      	itt	lt
 800d97a:	580b      	ldrlt	r3, [r1, r0]
 800d97c:	18c0      	addlt	r0, r0, r3
 800d97e:	4770      	bx	lr

0800d980 <_raise_r>:
 800d980:	291f      	cmp	r1, #31
 800d982:	b538      	push	{r3, r4, r5, lr}
 800d984:	4604      	mov	r4, r0
 800d986:	460d      	mov	r5, r1
 800d988:	d904      	bls.n	800d994 <_raise_r+0x14>
 800d98a:	2316      	movs	r3, #22
 800d98c:	6003      	str	r3, [r0, #0]
 800d98e:	f04f 30ff 	mov.w	r0, #4294967295
 800d992:	bd38      	pop	{r3, r4, r5, pc}
 800d994:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d996:	b112      	cbz	r2, 800d99e <_raise_r+0x1e>
 800d998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d99c:	b94b      	cbnz	r3, 800d9b2 <_raise_r+0x32>
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 f830 	bl	800da04 <_getpid_r>
 800d9a4:	462a      	mov	r2, r5
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9ae:	f000 b817 	b.w	800d9e0 <_kill_r>
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d00a      	beq.n	800d9cc <_raise_r+0x4c>
 800d9b6:	1c59      	adds	r1, r3, #1
 800d9b8:	d103      	bne.n	800d9c2 <_raise_r+0x42>
 800d9ba:	2316      	movs	r3, #22
 800d9bc:	6003      	str	r3, [r0, #0]
 800d9be:	2001      	movs	r0, #1
 800d9c0:	e7e7      	b.n	800d992 <_raise_r+0x12>
 800d9c2:	2400      	movs	r4, #0
 800d9c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	4798      	blx	r3
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	e7e0      	b.n	800d992 <_raise_r+0x12>

0800d9d0 <raise>:
 800d9d0:	4b02      	ldr	r3, [pc, #8]	; (800d9dc <raise+0xc>)
 800d9d2:	4601      	mov	r1, r0
 800d9d4:	6818      	ldr	r0, [r3, #0]
 800d9d6:	f7ff bfd3 	b.w	800d980 <_raise_r>
 800d9da:	bf00      	nop
 800d9dc:	2000000c 	.word	0x2000000c

0800d9e0 <_kill_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	4d07      	ldr	r5, [pc, #28]	; (800da00 <_kill_r+0x20>)
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	4608      	mov	r0, r1
 800d9ea:	4611      	mov	r1, r2
 800d9ec:	602b      	str	r3, [r5, #0]
 800d9ee:	f7f4 fb1f 	bl	8002030 <_kill>
 800d9f2:	1c43      	adds	r3, r0, #1
 800d9f4:	d102      	bne.n	800d9fc <_kill_r+0x1c>
 800d9f6:	682b      	ldr	r3, [r5, #0]
 800d9f8:	b103      	cbz	r3, 800d9fc <_kill_r+0x1c>
 800d9fa:	6023      	str	r3, [r4, #0]
 800d9fc:	bd38      	pop	{r3, r4, r5, pc}
 800d9fe:	bf00      	nop
 800da00:	20003134 	.word	0x20003134

0800da04 <_getpid_r>:
 800da04:	f7f4 bb0c 	b.w	8002020 <_getpid>

0800da08 <_init>:
 800da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0a:	bf00      	nop
 800da0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da0e:	bc08      	pop	{r3}
 800da10:	469e      	mov	lr, r3
 800da12:	4770      	bx	lr

0800da14 <_fini>:
 800da14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da16:	bf00      	nop
 800da18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da1a:	bc08      	pop	{r3}
 800da1c:	469e      	mov	lr, r3
 800da1e:	4770      	bx	lr
