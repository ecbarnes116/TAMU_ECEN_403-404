
SDIO_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a914  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800aae4  0800aae4  0001aae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae1c  0800ae1c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae1c  0800ae1c  0001ae1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae24  0800ae24  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae24  0800ae24  0001ae24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae28  0800ae28  0001ae28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ae2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002630  20000074  0800aea0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026a4  0800aea0  000226a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001576b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003307  00000000  00000000  0003580f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00038b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00039c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054c6  00000000  00000000  0003ac70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cbd  00000000  00000000  00040136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f4e  00000000  00000000  00057df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bd41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004efc  00000000  00000000  0013bd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aacc 	.word	0x0800aacc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800aacc 	.word	0x0800aacc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d013      	beq.n	80005f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00b      	beq.n	80005f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	e000      	b.n	80005e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0f9      	beq.n	80005de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f4:	687b      	ldr	r3, [r7, #4]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <_write>:
uint16_t delta_audio;
uint16_t delta_pressure;
uint16_t delta_acc;
//float delta_acc

int _write(int file, char *ptr, int length) {
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
	int i = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

	for(i = 0; i < length; i++) {
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	e009      	b.n	800062c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	60ba      	str	r2, [r7, #8]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffc7 	bl	80005b4 <ITM_SendChar>
	for(i = 0; i < length; i++) {
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3301      	adds	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	dbf1      	blt.n	8000618 <_write+0x16>
	}

	return length;
 8000634:	687b      	ldr	r3, [r7, #4]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <bufclear>:
	return i;
}


// Clear UART buffer for debugging
void bufclear(void) {
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e007      	b.n	800065c <bufclear+0x1c>
		buffer[i] = '\0';
 800064c:	4a08      	ldr	r2, [pc, #32]	; (8000670 <bufclear+0x30>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3301      	adds	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b7f      	cmp	r3, #127	; 0x7f
 8000660:	ddf4      	ble.n	800064c <bufclear+0xc>
	}
}
 8000662:	bf00      	nop
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	20000544 	.word	0x20000544

08000674 <HAL_ADC_ConvHalfCpltCallback>:
// Size of buffer needs to be a multiple of number of ADC channels (minimum of 5)
// Needs to be divisible by the number of bytes in each line
// that I am writing to the SD card				<-- What did I mean by this???

// Called when ADC buffer is half filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	fromADC_Ptr = &adc_data[0];
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000680:	601a      	str	r2, [r3, #0]
	toSD_Ptr 	= &SD_data[0];
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000684:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000686:	601a      	str	r2, [r3, #0]

	dataReady = 1;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000540 	.word	0x20000540
 80006a0:	20000220 	.word	0x20000220
 80006a4:	20000000 	.word	0x20000000
 80006a8:	200003b0 	.word	0x200003b0
 80006ac:	200005c4 	.word	0x200005c4

080006b0 <HAL_ADC_ConvCpltCallback>:



// Called when ADC buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	fromADC_Ptr = &adc_data[ADC_BUFFER_SIZE/2];
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <HAL_ADC_ConvCpltCallback+0x28>)
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <HAL_ADC_ConvCpltCallback+0x2c>)
 80006bc:	601a      	str	r2, [r3, #0]
	toSD_Ptr 	= &SD_data[ADC_BUFFER_SIZE/2];
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <HAL_ADC_ConvCpltCallback+0x30>)
 80006c0:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_ADC_ConvCpltCallback+0x34>)
 80006c2:	601a      	str	r2, [r3, #0]

	dataReady = 1;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_ADC_ConvCpltCallback+0x38>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000540 	.word	0x20000540
 80006dc:	200002e8 	.word	0x200002e8
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000478 	.word	0x20000478
 80006e8:	200005c4 	.word	0x200005c4

080006ec <processData>:
	fresult = f_sync(&fil);
}



void processData() {
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b087      	sub	sp, #28
 80006f0:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < (ADC_BUFFER_SIZE)/2; i++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	e043      	b.n	8000780 <processData+0x94>

		// IF I DIVISIBLE BY CHANNEL NUMBER, THEN THAT VALUE CORRELATES WITH THE NTH SENSOR

		// THE CODE HERE IS MESSED UP. I AM NOT READING EVERY 5 INPUTS LIKE I WANTED TO.
		current_audio = fromADC_Ptr[i];
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <processData+0xb8>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	4413      	add	r3, r2
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	b29a      	uxth	r2, r3
 8000706:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <processData+0xbc>)
 8000708:	801a      	strh	r2, [r3, #0]
//
//		current_acc_x = fromADC_Ptr[i+2];
//		current_acc_y = fromADC_Ptr[i+3];
//		current_acc_z = fromADC_Ptr[i+4];

		delta_audio = current_audio - previous_audio;
 800070a:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <processData+0xbc>)
 800070c:	881a      	ldrh	r2, [r3, #0]
 800070e:	4b27      	ldr	r3, [pc, #156]	; (80007ac <processData+0xc0>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	b29a      	uxth	r2, r3
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <processData+0xc4>)
 8000718:	801a      	strh	r2, [r3, #0]
//		delta_pressure = current_pressure - previous_pressure;
//		delta_acc = current_acc - previous_acc;

		// Do explosion detection here
		if(delta_audio >= THRESHOLD_AUDIO) {
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <processData+0xc4>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	2b27      	cmp	r3, #39	; 0x27
 8000720:	d902      	bls.n	8000728 <processData+0x3c>
			explosionDetected = 1;
 8000722:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <processData+0xc8>)
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]

//		fresult = f_lseek(&fil, f_size(&fil));
//		fresult = f_printf(&fil, "%d, %d, %d, %d, %d, d_audio = %d, d_pressure = %d, d_acc = %d\r\n", 0, explosionDetected, current_audio, current_pressure, current_acc, delta_audio, delta_pressure, delta_acc);
//		fresult = f_sync(&fil);

		fresult = f_lseek(&fil, f_size(&fil));
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <processData+0xcc>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	4619      	mov	r1, r3
 800072e:	4822      	ldr	r0, [pc, #136]	; (80007b8 <processData+0xcc>)
 8000730:	f008 fc48 	bl	8008fc4 <f_lseek>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <processData+0xd0>)
 800073a:	701a      	strb	r2, [r3, #0]
		fresult = f_printf(&fil, "%d, %d, %d, %d, d_audio = %d\r\n", count, i, explosionDetected, current_audio, delta_audio);
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <processData+0xd4>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461c      	mov	r4, r3
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <processData+0xc8>)
 8000746:	7812      	ldrb	r2, [r2, #0]
 8000748:	4611      	mov	r1, r2
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <processData+0xbc>)
 800074c:	8812      	ldrh	r2, [r2, #0]
 800074e:	4610      	mov	r0, r2
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <processData+0xc4>)
 8000752:	8812      	ldrh	r2, [r2, #0]
 8000754:	9202      	str	r2, [sp, #8]
 8000756:	9001      	str	r0, [sp, #4]
 8000758:	9100      	str	r1, [sp, #0]
 800075a:	4622      	mov	r2, r4
 800075c:	4919      	ldr	r1, [pc, #100]	; (80007c4 <processData+0xd8>)
 800075e:	4816      	ldr	r0, [pc, #88]	; (80007b8 <processData+0xcc>)
 8000760:	f008 ff04 	bl	800956c <f_printf>
 8000764:	4603      	mov	r3, r0
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <processData+0xd0>)
 800076a:	701a      	strb	r2, [r3, #0]


		// Logic for determining when to set explosionDetected back to 0
		// Use Friedlander waveform to estimate how long the explosion will last for
		explosionDetected = 0;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <processData+0xc8>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]

		// The current samples will be the "previous" samples for the next samples
		previous_audio = current_audio;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <processData+0xbc>)
 8000774:	881a      	ldrh	r2, [r3, #0]
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <processData+0xc0>)
 8000778:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < (ADC_BUFFER_SIZE)/2; i++) {
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3301      	adds	r3, #1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b63      	cmp	r3, #99	; 0x63
 8000784:	d9b8      	bls.n	80006f8 <processData+0xc>
//		previous_acc_y = current_acc_y;

	}
	// Add up a bunch of buffers to shove into a huge buffer than is finally
	// written to the SD card after the first half of the DMA buffer is filled
	dataReady = 0;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <processData+0xdc>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
	// Sync the written data to the SD card
	// THIS STILL NEEDS TO HAPPEN A LOT LESS OFTEN
	fresult = f_sync(&fil);
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <processData+0xcc>)
 800078e:	f008 fb71 	bl	8008e74 <f_sync>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <processData+0xd0>)
 8000798:	701a      	strb	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd90      	pop	{r4, r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000540 	.word	0x20000540
 80007a8:	20002648 	.word	0x20002648
 80007ac:	2000264a 	.word	0x2000264a
 80007b0:	2000264c 	.word	0x2000264c
 80007b4:	20002646 	.word	0x20002646
 80007b8:	200015fc 	.word	0x200015fc
 80007bc:	20002644 	.word	0x20002644
 80007c0:	20002645 	.word	0x20002645
 80007c4:	0800aae4 	.word	0x0800aae4
 80007c8:	200005c4 	.word	0x200005c4

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f000 fe07 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 f8e1 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007da:	f000 fa95 	bl	8000d08 <MX_GPIO_Init>
  MX_DMA_Init();
 80007de:	f000 fa73 	bl	8000cc8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007e2:	f000 fa47 	bl	8000c74 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80007e6:	f000 f94f 	bl	8000a88 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 80007ea:	f000 fa23 	bl	8000c34 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80007ee:	f005 ff79 	bl	80066e4 <MX_FATFS_Init>
  MX_RTC_Init();
 80007f2:	f000 f9c5 	bl	8000b80 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Start DMA buffer
  // Might need to stop DMA at some point
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_data, ADC_BUFFER_SIZE);
 80007f6:	22c8      	movs	r2, #200	; 0xc8
 80007f8:	4953      	ldr	r1, [pc, #332]	; (8000948 <main+0x17c>)
 80007fa:	4854      	ldr	r0, [pc, #336]	; (800094c <main+0x180>)
 80007fc:	f000 fecc 	bl	8001598 <HAL_ADC_Start_DMA>

  // Mount SD card
  fresult = f_mount(&fs, "", 0);
 8000800:	2200      	movs	r2, #0
 8000802:	4953      	ldr	r1, [pc, #332]	; (8000950 <main+0x184>)
 8000804:	4853      	ldr	r0, [pc, #332]	; (8000954 <main+0x188>)
 8000806:	f007 ff8f 	bl	8008728 <f_mount>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b52      	ldr	r3, [pc, #328]	; (8000958 <main+0x18c>)
 8000810:	701a      	strb	r2, [r3, #0]

  if(fresult != FR_OK){
 8000812:	4b51      	ldr	r3, [pc, #324]	; (8000958 <main+0x18c>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d003      	beq.n	8000822 <main+0x56>
	  printf("ERROR in mounting SD card...\n");
 800081a:	4850      	ldr	r0, [pc, #320]	; (800095c <main+0x190>)
 800081c:	f009 f9d8 	bl	8009bd0 <puts>
 8000820:	e002      	b.n	8000828 <main+0x5c>
  }
  else {
	  printf("SD card mounted successfully...\n");
 8000822:	484f      	ldr	r0, [pc, #316]	; (8000960 <main+0x194>)
 8000824:	f009 f9d4 	bl	8009bd0 <puts>
//  bufclear();
//  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
//  printf("SD card free space: \t%lu\n", free_space);
//  bufclear();

  char *name = "adc_data.csv";
 8000828:	4b4e      	ldr	r3, [pc, #312]	; (8000964 <main+0x198>)
 800082a:	60fb      	str	r3, [r7, #12]

  fresult = f_stat(name, &fno);
 800082c:	494e      	ldr	r1, [pc, #312]	; (8000968 <main+0x19c>)
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	f008 fdec 	bl	800940c <f_stat>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4b47      	ldr	r3, [pc, #284]	; (8000958 <main+0x18c>)
 800083a:	701a      	strb	r2, [r3, #0]

  if (fresult == FR_OK) {
 800083c:	4b46      	ldr	r3, [pc, #280]	; (8000958 <main+0x18c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d106      	bne.n	8000852 <main+0x86>
	  printf("*%s* already exists!!!\n",name);
 8000844:	68f9      	ldr	r1, [r7, #12]
 8000846:	4849      	ldr	r0, [pc, #292]	; (800096c <main+0x1a0>)
 8000848:	f009 f93c 	bl	8009ac4 <iprintf>
	  bufclear();
 800084c:	f7ff fef8 	bl	8000640 <bufclear>
 8000850:	e008      	b.n	8000864 <main+0x98>
  }
  else {
	  fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000852:	220b      	movs	r2, #11
 8000854:	68f9      	ldr	r1, [r7, #12]
 8000856:	4846      	ldr	r0, [pc, #280]	; (8000970 <main+0x1a4>)
 8000858:	f007 ffac 	bl	80087b4 <f_open>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <main+0x18c>)
 8000862:	701a      	strb	r2, [r3, #0]
  }
	  if(fresult != FR_OK) {
 8000864:	4b3c      	ldr	r3, [pc, #240]	; (8000958 <main+0x18c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d009      	beq.n	8000880 <main+0xb4>
		  printf ("ERROR: no %d in creating file *%s*\n", fresult, name);
 800086c:	4b3a      	ldr	r3, [pc, #232]	; (8000958 <main+0x18c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	4619      	mov	r1, r3
 8000874:	483f      	ldr	r0, [pc, #252]	; (8000974 <main+0x1a8>)
 8000876:	f009 f925 	bl	8009ac4 <iprintf>
		  bufclear();
 800087a:	f7ff fee1 	bl	8000640 <bufclear>
 800087e:	e005      	b.n	800088c <main+0xc0>
	  }
	  else {
		  printf ("*%s* created successfully\n",name);
 8000880:	68f9      	ldr	r1, [r7, #12]
 8000882:	483d      	ldr	r0, [pc, #244]	; (8000978 <main+0x1ac>)
 8000884:	f009 f91e 	bl	8009ac4 <iprintf>
		  bufclear();
 8000888:	f7ff feda 	bl	8000640 <bufclear>
	  }

  fresult = f_printf(&fil, "time, explosion, audio, pressure, acceleration\r\n");
 800088c:	493b      	ldr	r1, [pc, #236]	; (800097c <main+0x1b0>)
 800088e:	4838      	ldr	r0, [pc, #224]	; (8000970 <main+0x1a4>)
 8000890:	f008 fe6c 	bl	800956c <f_printf>
 8000894:	4603      	mov	r3, r0
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <main+0x18c>)
 800089a:	701a      	strb	r2, [r3, #0]

  // Get starting tick value (start timer)
  int start = HAL_GetTick();
 800089c:	f000 fe08 	bl	80014b0 <HAL_GetTick>
 80008a0:	4603      	mov	r3, r0
 80008a2:	60bb      	str	r3, [r7, #8]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(dataReady) {
 80008a4:	4b36      	ldr	r3, [pc, #216]	; (8000980 <main+0x1b4>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d007      	beq.n	80008be <main+0xf2>

		  processData();
 80008ae:	f7ff ff1d 	bl	80006ec <processData>

		  // Increment count
		  count++;
 80008b2:	4b34      	ldr	r3, [pc, #208]	; (8000984 <main+0x1b8>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <main+0x1b8>)
 80008bc:	701a      	strb	r2, [r3, #0]

	  	  }

	  // Stop when count is a certain value (leads to unmount SD card)
	  if(count >= 100) {
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <main+0x1b8>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b63      	cmp	r3, #99	; 0x63
 80008c4:	d800      	bhi.n	80008c8 <main+0xfc>
	  if(dataReady) {
 80008c6:	e7ed      	b.n	80008a4 <main+0xd8>
		  break;
 80008c8:	bf00      	nop
	  }

  }

  int stop = HAL_GetTick();
 80008ca:	f000 fdf1 	bl	80014b0 <HAL_GetTick>
 80008ce:	4603      	mov	r3, r0
 80008d0:	607b      	str	r3, [r7, #4]

  printf("Total time to write %d values to SD card (WITH printf): %d ms\n", count, (stop - start));
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <main+0x1b8>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	461a      	mov	r2, r3
 80008e0:	4829      	ldr	r0, [pc, #164]	; (8000988 <main+0x1bc>)
 80008e2:	f009 f8ef 	bl	8009ac4 <iprintf>

  // Stop ADC DMA and disable ADC
  HAL_ADC_Stop_DMA(&hadc1);
 80008e6:	4819      	ldr	r0, [pc, #100]	; (800094c <main+0x180>)
 80008e8:	f000 ff66 	bl	80017b8 <HAL_ADC_Stop_DMA>

  // Close buffer file
  f_close(&fil);
 80008ec:	4820      	ldr	r0, [pc, #128]	; (8000970 <main+0x1a4>)
 80008ee:	f008 fb3f 	bl	8008f70 <f_close>
  if (fresult != FR_OK) {
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <main+0x18c>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d008      	beq.n	800090c <main+0x140>
	  printf ("ERROR: no %d in closing file *%s*\n", fresult, name);
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <main+0x18c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	4619      	mov	r1, r3
 8000902:	4822      	ldr	r0, [pc, #136]	; (800098c <main+0x1c0>)
 8000904:	f009 f8de 	bl	8009ac4 <iprintf>
	  bufclear();
 8000908:	f7ff fe9a 	bl	8000640 <bufclear>
  }

  // After while loop when break
  // Unmount SD card
  fresult = f_mount(NULL, "/", 1);
 800090c:	2201      	movs	r2, #1
 800090e:	4920      	ldr	r1, [pc, #128]	; (8000990 <main+0x1c4>)
 8000910:	2000      	movs	r0, #0
 8000912:	f007 ff09 	bl	8008728 <f_mount>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <main+0x18c>)
 800091c:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) {
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <main+0x18c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d105      	bne.n	8000932 <main+0x166>
	  printf("SD card unmounted successfully...\n");
 8000926:	481b      	ldr	r0, [pc, #108]	; (8000994 <main+0x1c8>)
 8000928:	f009 f952 	bl	8009bd0 <puts>
	  bufclear();
 800092c:	f7ff fe88 	bl	8000640 <bufclear>
 8000930:	e004      	b.n	800093c <main+0x170>
  }
  else {
	  printf("ERROR: unmounting SD card\n");
 8000932:	4819      	ldr	r0, [pc, #100]	; (8000998 <main+0x1cc>)
 8000934:	f009 f94c 	bl	8009bd0 <puts>
	  bufclear();
 8000938:	f7ff fe82 	bl	8000640 <bufclear>
 800093c:	2300      	movs	r3, #0
  }

  /* USER CODE END 3 */
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000220 	.word	0x20000220
 800094c:	20000090 	.word	0x20000090
 8000950:	0800ab04 	.word	0x0800ab04
 8000954:	200005c8 	.word	0x200005c8
 8000958:	20002644 	.word	0x20002644
 800095c:	0800ab08 	.word	0x0800ab08
 8000960:	0800ab28 	.word	0x0800ab28
 8000964:	0800ab48 	.word	0x0800ab48
 8000968:	2000262c 	.word	0x2000262c
 800096c:	0800ab58 	.word	0x0800ab58
 8000970:	200015fc 	.word	0x200015fc
 8000974:	0800ab70 	.word	0x0800ab70
 8000978:	0800ab94 	.word	0x0800ab94
 800097c:	0800abb0 	.word	0x0800abb0
 8000980:	200005c4 	.word	0x200005c4
 8000984:	20002645 	.word	0x20002645
 8000988:	0800abe4 	.word	0x0800abe4
 800098c:	0800ac24 	.word	0x0800ac24
 8000990:	0800ac48 	.word	0x0800ac48
 8000994:	0800ac4c 	.word	0x0800ac4c
 8000998:	0800ac70 	.word	0x0800ac70

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	; 0x50
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2234      	movs	r2, #52	; 0x34
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f009 f882 	bl	8009ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <SystemClock_Config+0xe4>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	4a2d      	ldr	r2, [pc, #180]	; (8000a80 <SystemClock_Config+0xe4>)
 80009ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ce:	6413      	str	r3, [r2, #64]	; 0x40
 80009d0:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <SystemClock_Config+0xe4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009dc:	2300      	movs	r3, #0
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <SystemClock_Config+0xe8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a27      	ldr	r2, [pc, #156]	; (8000a84 <SystemClock_Config+0xe8>)
 80009e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <SystemClock_Config+0xe8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009f8:	230a      	movs	r3, #10
 80009fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009fc:	2301      	movs	r3, #1
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a04:	2310      	movs	r3, #16
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a10:	2300      	movs	r3, #0
 8000a12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a14:	2308      	movs	r3, #8
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a18:	23b4      	movs	r3, #180	; 0xb4
 8000a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a20:	2309      	movs	r3, #9
 8000a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 ff75 	bl	800391c <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000a38:	f000 f9ee 	bl	8000e18 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a3c:	f002 f8aa 	bl	8002b94 <HAL_PWREx_EnableOverDrive>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a46:	f000 f9e7 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	2105      	movs	r1, #5
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 f8e3 	bl	8002c34 <HAL_RCC_ClockConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000a74:	f000 f9d0 	bl	8000e18 <Error_Handler>
  }
}
 8000a78:	bf00      	nop
 8000a7a:	3750      	adds	r7, #80	; 0x50
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40007000 	.word	0x40007000

08000a88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a9a:	4b36      	ldr	r3, [pc, #216]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000a9c:	4a36      	ldr	r2, [pc, #216]	; (8000b78 <MX_ADC1_Init+0xf0>)
 8000a9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000aa0:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000aa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aa6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa8:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aba:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000aca:	4a2c      	ldr	r2, [pc, #176]	; (8000b7c <MX_ADC1_Init+0xf4>)
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae8:	4822      	ldr	r0, [pc, #136]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000aea:	f000 fd11 	bl	8001510 <HAL_ADC_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000af4:	f000 f990 	bl	8000e18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000b00:	2307      	movs	r3, #7
 8000b02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b04:	463b      	mov	r3, r7
 8000b06:	4619      	mov	r1, r3
 8000b08:	481a      	ldr	r0, [pc, #104]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000b0a:	f000 feb9 	bl	8001880 <HAL_ADC_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b14:	f000 f980 	bl	8000e18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4813      	ldr	r0, [pc, #76]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000b26:	f000 feab 	bl	8001880 <HAL_ADC_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b30:	f000 f972 	bl	8000e18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b34:	230c      	movs	r3, #12
 8000b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000b42:	f000 fe9d 	bl	8001880 <HAL_ADC_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000b4c:	f000 f964 	bl	8000e18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000b50:	230d      	movs	r3, #13
 8000b52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000b54:	2304      	movs	r3, #4
 8000b56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_ADC1_Init+0xec>)
 8000b5e:	f000 fe8f 	bl	8001880 <HAL_ADC_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b68:	f000 f956 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000090 	.word	0x20000090
 8000b78:	40012000 	.word	0x40012000
 8000b7c:	0f000001 	.word	0x0f000001

08000b80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <MX_RTC_Init+0xac>)
 8000b9a:	4a25      	ldr	r2, [pc, #148]	; (8000c30 <MX_RTC_Init+0xb0>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <MX_RTC_Init+0xac>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_RTC_Init+0xac>)
 8000ba6:	227f      	movs	r2, #127	; 0x7f
 8000ba8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <MX_RTC_Init+0xac>)
 8000bac:	22ff      	movs	r2, #255	; 0xff
 8000bae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_RTC_Init+0xac>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <MX_RTC_Init+0xac>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <MX_RTC_Init+0xac>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bc2:	481a      	ldr	r0, [pc, #104]	; (8000c2c <MX_RTC_Init+0xac>)
 8000bc4:	f003 f948 	bl	8003e58 <HAL_RTC_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000bce:	f000 f923 	bl	8000e18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2201      	movs	r2, #1
 8000bea:	4619      	mov	r1, r3
 8000bec:	480f      	ldr	r0, [pc, #60]	; (8000c2c <MX_RTC_Init+0xac>)
 8000bee:	f003 f9a9 	bl	8003f44 <HAL_RTC_SetTime>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000bf8:	f000 f90e 	bl	8000e18 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8000c00:	2304      	movs	r3, #4
 8000c02:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x17;
 8000c04:	2317      	movs	r3, #23
 8000c06:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000c08:	2323      	movs	r3, #35	; 0x23
 8000c0a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_RTC_Init+0xac>)
 8000c14:	f003 fa30 	bl	8004078 <HAL_RTC_SetDate>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000c1e:	f000 f8fb 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000138 	.word	0x20000138
 8000c30:	40002800 	.word	0x40002800

08000c34 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_SDIO_SD_Init+0x38>)
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <MX_SDIO_SD_Init+0x3c>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_SDIO_SD_Init+0x38>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_SDIO_SD_Init+0x38>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_SDIO_SD_Init+0x38>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_SDIO_SD_Init+0x38>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <MX_SDIO_SD_Init+0x38>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 18;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <MX_SDIO_SD_Init+0x38>)
 8000c5e:	2212      	movs	r2, #18
 8000c60:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	20000158 	.word	0x20000158
 8000c70:	40012c00 	.word	0x40012c00

08000c74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_USART2_UART_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000cac:	f004 fd26 	bl	80056fc <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f000 f8af 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200001dc 	.word	0x200001dc
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_DMA_Init+0x3c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <MX_DMA_Init+0x3c>)
 8000cd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_DMA_Init+0x3c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2038      	movs	r0, #56	; 0x38
 8000cf0:	f001 f951 	bl	8001f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cf4:	2038      	movs	r0, #56	; 0x38
 8000cf6:	f001 f96a 	bl	8001fce <HAL_NVIC_EnableIRQ>

}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b3a      	ldr	r3, [pc, #232]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a39      	ldr	r2, [pc, #228]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b37      	ldr	r3, [pc, #220]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a32      	ldr	r2, [pc, #200]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a2b      	ldr	r2, [pc, #172]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a24      	ldr	r2, [pc, #144]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_GPIO_Init+0x104>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2120      	movs	r1, #32
 8000dae:	4818      	ldr	r0, [pc, #96]	; (8000e10 <MX_GPIO_Init+0x108>)
 8000db0:	f001 fed6 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4812      	ldr	r0, [pc, #72]	; (8000e14 <MX_GPIO_Init+0x10c>)
 8000dcc:	f001 fd1c 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	480c      	ldr	r0, [pc, #48]	; (8000e14 <MX_GPIO_Init+0x10c>)
 8000de4:	f001 fd10 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000de8:	2320      	movs	r3, #32
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4804      	ldr	r0, [pc, #16]	; (8000e10 <MX_GPIO_Init+0x108>)
 8000e00:	f001 fd02 	bl	8002808 <HAL_GPIO_Init>

}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	; 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020800 	.word	0x40020800

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>
	...

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e62:	2007      	movs	r0, #7
 8000e64:	f001 f88c 	bl	8001f80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800

08000e74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a3c      	ldr	r2, [pc, #240]	; (8000f84 <HAL_ADC_MspInit+0x110>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d171      	bne.n	8000f7a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <HAL_ADC_MspInit+0x114>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a3a      	ldr	r2, [pc, #232]	; (8000f88 <HAL_ADC_MspInit+0x114>)
 8000ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b38      	ldr	r3, [pc, #224]	; (8000f88 <HAL_ADC_MspInit+0x114>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <HAL_ADC_MspInit+0x114>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a33      	ldr	r2, [pc, #204]	; (8000f88 <HAL_ADC_MspInit+0x114>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <HAL_ADC_MspInit+0x114>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <HAL_ADC_MspInit+0x114>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a2c      	ldr	r2, [pc, #176]	; (8000f88 <HAL_ADC_MspInit+0x114>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <HAL_ADC_MspInit+0x114>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eea:	230c      	movs	r3, #12
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4823      	ldr	r0, [pc, #140]	; (8000f8c <HAL_ADC_MspInit+0x118>)
 8000efe:	f001 fc83 	bl	8002808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000f02:	2313      	movs	r3, #19
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	481e      	ldr	r0, [pc, #120]	; (8000f90 <HAL_ADC_MspInit+0x11c>)
 8000f16:	f001 fc77 	bl	8002808 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f1c:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <HAL_ADC_MspInit+0x124>)
 8000f1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f50:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f60:	f001 f850 	bl	8002004 <HAL_DMA_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000f6a:	f7ff ff55 	bl	8000e18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f72:	639a      	str	r2, [r3, #56]	; 0x38
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_ADC_MspInit+0x120>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40012000 	.word	0x40012000
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	200000d8 	.word	0x200000d8
 8000f98:	40026410 	.word	0x40026410

08000f9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b09a      	sub	sp, #104	; 0x68
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	225c      	movs	r2, #92	; 0x5c
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f008 fd81 	bl	8009ab4 <memset>
  if(hrtc->Instance==RTC)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <HAL_RTC_MspInit+0x4c>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d111      	bne.n	8000fe0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fbc:	2320      	movs	r3, #32
 8000fbe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 ff4c 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000fd6:	f7ff ff1f 	bl	8000e18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <HAL_RTC_MspInit+0x50>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3768      	adds	r7, #104	; 0x68
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40002800 	.word	0x40002800
 8000fec:	42470e3c 	.word	0x42470e3c

08000ff0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0a2      	sub	sp, #136	; 0x88
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	225c      	movs	r2, #92	; 0x5c
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f008 fd4f 	bl	8009ab4 <memset>
  if(hsd->Instance==SDIO)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a48      	ldr	r2, [pc, #288]	; (800113c <HAL_SD_MspInit+0x14c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	f040 8088 	bne.w	8001132 <HAL_SD_MspInit+0x142>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001022:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001026:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001028:	2300      	movs	r3, #0
 800102a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800102c:	2300      	movs	r3, #0
 800102e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	4618      	mov	r0, r3
 8001036:	f001 ff17 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001040:	f7ff feea 	bl	8000e18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <HAL_SD_MspInit+0x150>)
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	4a3c      	ldr	r2, [pc, #240]	; (8001140 <HAL_SD_MspInit+0x150>)
 800104e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001052:	6453      	str	r3, [r2, #68]	; 0x44
 8001054:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_SD_MspInit+0x150>)
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	4b36      	ldr	r3, [pc, #216]	; (8001140 <HAL_SD_MspInit+0x150>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	4a35      	ldr	r2, [pc, #212]	; (8001140 <HAL_SD_MspInit+0x150>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	6313      	str	r3, [r2, #48]	; 0x30
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <HAL_SD_MspInit+0x150>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <HAL_SD_MspInit+0x150>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4a2e      	ldr	r2, [pc, #184]	; (8001140 <HAL_SD_MspInit+0x150>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6313      	str	r3, [r2, #48]	; 0x30
 800108c:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <HAL_SD_MspInit+0x150>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <HAL_SD_MspInit+0x150>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a27      	ldr	r2, [pc, #156]	; (8001140 <HAL_SD_MspInit+0x150>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <HAL_SD_MspInit+0x150>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010b4:	2304      	movs	r3, #4
 80010b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80010c6:	230c      	movs	r3, #12
 80010c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010d0:	4619      	mov	r1, r3
 80010d2:	481c      	ldr	r0, [pc, #112]	; (8001144 <HAL_SD_MspInit+0x154>)
 80010d4:	f001 fb98 	bl	8002808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80010ec:	230c      	movs	r3, #12
 80010ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010f6:	4619      	mov	r1, r3
 80010f8:	4813      	ldr	r0, [pc, #76]	; (8001148 <HAL_SD_MspInit+0x158>)
 80010fa:	f001 fb85 	bl	8002808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010fe:	2304      	movs	r3, #4
 8001100:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001110:	230c      	movs	r3, #12
 8001112:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001116:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800111a:	4619      	mov	r1, r3
 800111c:	480b      	ldr	r0, [pc, #44]	; (800114c <HAL_SD_MspInit+0x15c>)
 800111e:	f001 fb73 	bl	8002808 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2031      	movs	r0, #49	; 0x31
 8001128:	f000 ff35 	bl	8001f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800112c:	2031      	movs	r0, #49	; 0x31
 800112e:	f000 ff4e 	bl	8001fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3788      	adds	r7, #136	; 0x88
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40012c00 	.word	0x40012c00
 8001140:	40023800 	.word	0x40023800
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_UART_MspInit+0x84>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d12b      	bne.n	80011ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <HAL_UART_MspInit+0x88>)
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011aa:	230c      	movs	r3, #12
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ba:	2307      	movs	r3, #7
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_UART_MspInit+0x8c>)
 80011c6:	f001 fb1f 	bl	8002808 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40004400 	.word	0x40004400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f92c 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <SDIO_IRQHandler+0x10>)
 800123a:	f003 fc57 	bl	8004aec <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000158 	.word	0x20000158

08001248 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <DMA2_Stream0_IRQHandler+0x10>)
 800124e:	f001 f871 	bl	8002334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200000d8 	.word	0x200000d8

0800125c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e00a      	b.n	8001284 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800126e:	f3af 8000 	nop.w
 8001272:	4601      	mov	r1, r0
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	60ba      	str	r2, [r7, #8]
 800127a:	b2ca      	uxtb	r2, r1
 800127c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	dbf0      	blt.n	800126e <_read+0x12>
  }

  return len;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012be:	605a      	str	r2, [r3, #4]
  return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <_isatty>:

int _isatty(int file)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f008 fb96 	bl	8009a60 <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20020000 	.word	0x20020000
 8001360:	00000400 	.word	0x00000400
 8001364:	20002650 	.word	0x20002650
 8001368:	200026a8 	.word	0x200026a8

0800136c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <SystemInit+0x20>)
 8001372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <SystemInit+0x20>)
 8001378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800137c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001396:	490e      	ldr	r1, [pc, #56]	; (80013d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013ac:	4c0b      	ldr	r4, [pc, #44]	; (80013dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ba:	f7ff ffd7 	bl	800136c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013be:	f008 fb55 	bl	8009a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013c2:	f7ff fa03 	bl	80007cc <main>
  bx  lr    
 80013c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013d4:	0800ae2c 	.word	0x0800ae2c
  ldr r2, =_sbss
 80013d8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013dc:	200026a4 	.word	0x200026a4

080013e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <HAL_Init+0x40>)
 80013ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_Init+0x40>)
 80013fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_Init+0x40>)
 8001406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 fdb7 	bl	8001f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f808 	bl	8001428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001418:	f7ff fd04 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023c00 	.word	0x40023c00

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_InitTick+0x54>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x58>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fdcf 	bl	8001fea <HAL_SYSTICK_Config>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e00e      	b.n	8001474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d80a      	bhi.n	8001472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f000 fd97 	bl	8001f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <HAL_InitTick+0x5c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000004 	.word	0x20000004
 8001480:	2000000c 	.word	0x2000000c
 8001484:	20000008 	.word	0x20000008

08001488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_IncTick+0x20>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_IncTick+0x24>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_IncTick+0x24>)
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	2000000c 	.word	0x2000000c
 80014ac:	20002654 	.word	0x20002654

080014b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <HAL_GetTick+0x14>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20002654 	.word	0x20002654

080014c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d0:	f7ff ffee 	bl	80014b0 <HAL_GetTick>
 80014d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e0:	d005      	beq.n	80014ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_Delay+0x44>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ee:	bf00      	nop
 80014f0:	f7ff ffde 	bl	80014b0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d8f7      	bhi.n	80014f0 <HAL_Delay+0x28>
  {
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000000c 	.word	0x2000000c

08001510 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e033      	b.n	800158e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	2b00      	cmp	r3, #0
 800152c:	d109      	bne.n	8001542 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fca0 	bl	8000e74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001556:	f023 0302 	bic.w	r3, r3, #2
 800155a:	f043 0202 	orr.w	r2, r3, #2
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fabe 	bl	8001ae4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f023 0303 	bic.w	r3, r3, #3
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	641a      	str	r2, [r3, #64]	; 0x40
 800157e:	e001      	b.n	8001584 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_ADC_Start_DMA+0x1e>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e0e9      	b.n	800178a <HAL_ADC_Start_DMA+0x1f2>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d018      	beq.n	80015fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015dc:	4b6d      	ldr	r3, [pc, #436]	; (8001794 <HAL_ADC_Start_DMA+0x1fc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a6d      	ldr	r2, [pc, #436]	; (8001798 <HAL_ADC_Start_DMA+0x200>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0c9a      	lsrs	r2, r3, #18
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015f0:	e002      	b.n	80015f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f9      	bne.n	80015f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800160c:	d107      	bne.n	800161e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800161c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b01      	cmp	r3, #1
 800162a:	f040 80a1 	bne.w	8001770 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001658:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166c:	d106      	bne.n	800167c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f023 0206 	bic.w	r2, r3, #6
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	645a      	str	r2, [r3, #68]	; 0x44
 800167a:	e002      	b.n	8001682 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800168a:	4b44      	ldr	r3, [pc, #272]	; (800179c <HAL_ADC_Start_DMA+0x204>)
 800168c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001692:	4a43      	ldr	r2, [pc, #268]	; (80017a0 <HAL_ADC_Start_DMA+0x208>)
 8001694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169a:	4a42      	ldr	r2, [pc, #264]	; (80017a4 <HAL_ADC_Start_DMA+0x20c>)
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a2:	4a41      	ldr	r2, [pc, #260]	; (80017a8 <HAL_ADC_Start_DMA+0x210>)
 80016a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	334c      	adds	r3, #76	; 0x4c
 80016da:	4619      	mov	r1, r3
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f000 fd3e 	bl	8002160 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d12a      	bne.n	8001746 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2d      	ldr	r2, [pc, #180]	; (80017ac <HAL_ADC_Start_DMA+0x214>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d015      	beq.n	8001726 <HAL_ADC_Start_DMA+0x18e>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a2c      	ldr	r2, [pc, #176]	; (80017b0 <HAL_ADC_Start_DMA+0x218>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d105      	bne.n	8001710 <HAL_ADC_Start_DMA+0x178>
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <HAL_ADC_Start_DMA+0x204>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00a      	beq.n	8001726 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <HAL_ADC_Start_DMA+0x21c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d136      	bne.n	8001788 <HAL_ADC_Start_DMA+0x1f0>
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_ADC_Start_DMA+0x204>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b00      	cmp	r3, #0
 8001724:	d130      	bne.n	8001788 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d129      	bne.n	8001788 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	e020      	b.n	8001788 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <HAL_ADC_Start_DMA+0x214>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d11b      	bne.n	8001788 <HAL_ADC_Start_DMA+0x1f0>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d114      	bne.n	8001788 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	e00b      	b.n	8001788 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f043 0210 	orr.w	r2, r3, #16
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000004 	.word	0x20000004
 8001798:	431bde83 	.word	0x431bde83
 800179c:	40012300 	.word	0x40012300
 80017a0:	08001cdd 	.word	0x08001cdd
 80017a4:	08001d97 	.word	0x08001d97
 80017a8:	08001db3 	.word	0x08001db3
 80017ac:	40012000 	.word	0x40012000
 80017b0:	40012100 	.word	0x40012100
 80017b4:	40012200 	.word	0x40012200

080017b8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_Stop_DMA+0x1a>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e048      	b.n	8001864 <HAL_ADC_Stop_DMA+0xac>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d130      	bne.n	800185a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001806:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d10f      	bne.n	8001836 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fcf8 	bl	8002210 <HAL_DMA_Abort>
 8001820:	4603      	mov	r3, r0
 8001822:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001844:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1c>
 8001898:	2302      	movs	r3, #2
 800189a:	e113      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x244>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b09      	cmp	r3, #9
 80018aa:	d925      	bls.n	80018f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68d9      	ldr	r1, [r3, #12]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	3b1e      	subs	r3, #30
 80018c2:	2207      	movs	r2, #7
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43da      	mvns	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	400a      	ands	r2, r1
 80018d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68d9      	ldr	r1, [r3, #12]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	4603      	mov	r3, r0
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4403      	add	r3, r0
 80018ea:	3b1e      	subs	r3, #30
 80018ec:	409a      	lsls	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	e022      	b.n	800193e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6919      	ldr	r1, [r3, #16]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	2207      	movs	r2, #7
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	400a      	ands	r2, r1
 800191a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6919      	ldr	r1, [r3, #16]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	4603      	mov	r3, r0
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4403      	add	r3, r0
 8001934:	409a      	lsls	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b06      	cmp	r3, #6
 8001944:	d824      	bhi.n	8001990 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	3b05      	subs	r3, #5
 8001958:	221f      	movs	r2, #31
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	400a      	ands	r2, r1
 8001966:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	3b05      	subs	r3, #5
 8001982:	fa00 f203 	lsl.w	r2, r0, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	635a      	str	r2, [r3, #52]	; 0x34
 800198e:	e04c      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b0c      	cmp	r3, #12
 8001996:	d824      	bhi.n	80019e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	3b23      	subs	r3, #35	; 0x23
 80019aa:	221f      	movs	r2, #31
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43da      	mvns	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	400a      	ands	r2, r1
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	3b23      	subs	r3, #35	; 0x23
 80019d4:	fa00 f203 	lsl.w	r2, r0, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
 80019e0:	e023      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	3b41      	subs	r3, #65	; 0x41
 80019f4:	221f      	movs	r2, #31
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	400a      	ands	r2, r1
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4618      	mov	r0, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b41      	subs	r3, #65	; 0x41
 8001a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <HAL_ADC_ConfigChannel+0x250>)
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a28      	ldr	r2, [pc, #160]	; (8001ad4 <HAL_ADC_ConfigChannel+0x254>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d10f      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1d8>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b12      	cmp	r3, #18
 8001a3e:	d10b      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <HAL_ADC_ConfigChannel+0x254>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d12b      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x23a>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_ADC_ConfigChannel+0x258>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d003      	beq.n	8001a74 <HAL_ADC_ConfigChannel+0x1f4>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b11      	cmp	r3, #17
 8001a72:	d122      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_ADC_ConfigChannel+0x258>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d111      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_ADC_ConfigChannel+0x25c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_ADC_ConfigChannel+0x260>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	0c9a      	lsrs	r2, r3, #18
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aac:	e002      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f9      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40012300 	.word	0x40012300
 8001ad4:	40012000 	.word	0x40012000
 8001ad8:	10000012 	.word	0x10000012
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	431bde83 	.word	0x431bde83

08001ae4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aec:	4b79      	ldr	r3, [pc, #484]	; (8001cd4 <ADC_Init+0x1f0>)
 8001aee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	021a      	lsls	r2, r3, #8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6899      	ldr	r1, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	4a58      	ldr	r2, [pc, #352]	; (8001cd8 <ADC_Init+0x1f4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d022      	beq.n	8001bc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6899      	ldr	r1, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6899      	ldr	r1, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	e00f      	b.n	8001be2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001be0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0202 	bic.w	r2, r2, #2
 8001bf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6899      	ldr	r1, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7e1b      	ldrb	r3, [r3, #24]
 8001bfc:	005a      	lsls	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01b      	beq.n	8001c48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	035a      	lsls	r2, r3, #13
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	e007      	b.n	8001c58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	051a      	lsls	r2, r3, #20
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6899      	ldr	r1, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c9a:	025a      	lsls	r2, r3, #9
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6899      	ldr	r1, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	029a      	lsls	r2, r3, #10
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	609a      	str	r2, [r3, #8]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40012300 	.word	0x40012300
 8001cd8:	0f000001 	.word	0x0f000001

08001cdc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d13c      	bne.n	8001d70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d12b      	bne.n	8001d68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d127      	bne.n	8001d68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d119      	bne.n	8001d68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0220 	bic.w	r2, r2, #32
 8001d42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f7fe fca1 	bl	80006b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d6e:	e00e      	b.n	8001d8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7ff fd75 	bl	800186c <HAL_ADC_ErrorCallback>
}
 8001d82:	e004      	b.n	8001d8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7fe fc65 	bl	8000674 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2240      	movs	r2, #64	; 0x40
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f043 0204 	orr.w	r2, r3, #4
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff fd4a 	bl	800186c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <__NVIC_SetPriorityGrouping>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e12:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	60d3      	str	r3, [r2, #12]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_GetPriorityGrouping>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <__NVIC_GetPriorityGrouping+0x18>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 0307 	and.w	r3, r3, #7
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_EnableIRQ>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db0b      	blt.n	8001e6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	4907      	ldr	r1, [pc, #28]	; (8001e7c <__NVIC_EnableIRQ+0x38>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2001      	movs	r0, #1
 8001e66:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000e100 	.word	0xe000e100

08001e80 <__NVIC_SetPriority>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	; (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <SysTick_Config>:
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f4c:	d301      	bcc.n	8001f52 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00f      	b.n	8001f72 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <SysTick_Config+0x40>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f7ff ff8e 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <SysTick_Config+0x40>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6a:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <SysTick_Config+0x40>)
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	e000e010 	.word	0xe000e010

08001f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff29 	bl	8001de0 <__NVIC_SetPriorityGrouping>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa8:	f7ff ff3e 	bl	8001e28 <__NVIC_GetPriorityGrouping>
 8001fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff ff8e 	bl	8001ed4 <NVIC_EncodePriority>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff5d 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff31 	bl	8001e44 <__NVIC_EnableIRQ>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff ffa2 	bl	8001f3c <SysTick_Config>
 8001ff8:	4603      	mov	r3, r0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff fa4e 	bl	80014b0 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e099      	b.n	8002154 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002040:	e00f      	b.n	8002062 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002042:	f7ff fa35 	bl	80014b0 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b05      	cmp	r3, #5
 800204e:	d908      	bls.n	8002062 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2220      	movs	r2, #32
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2203      	movs	r2, #3
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e078      	b.n	8002154 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e8      	bne.n	8002042 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_DMA_Init+0x158>)
 800207c:	4013      	ands	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800208e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d107      	bne.n	80020cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	4313      	orrs	r3, r2
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f023 0307 	bic.w	r3, r3, #7
 80020e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d117      	bne.n	8002126 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00e      	beq.n	8002126 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fb01 	bl	8002710 <DMA_CheckFifoParam>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2240      	movs	r2, #64	; 0x40
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002122:	2301      	movs	r3, #1
 8002124:	e016      	b.n	8002154 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fab8 	bl	80026a4 <DMA_CalcBaseAndBitshift>
 8002134:	4603      	mov	r3, r0
 8002136:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	223f      	movs	r2, #63	; 0x3f
 800213e:	409a      	lsls	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	f010803f 	.word	0xf010803f

08002160 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_DMA_Start_IT+0x26>
 8002182:	2302      	movs	r3, #2
 8002184:	e040      	b.n	8002208 <HAL_DMA_Start_IT+0xa8>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d12f      	bne.n	80021fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2202      	movs	r2, #2
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fa4a 	bl	8002648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	223f      	movs	r2, #63	; 0x3f
 80021ba:	409a      	lsls	r2, r3
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0216 	orr.w	r2, r2, #22
 80021ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0208 	orr.w	r2, r2, #8
 80021e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e005      	b.n	8002206 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002202:	2302      	movs	r3, #2
 8002204:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002206:	7dfb      	ldrb	r3, [r7, #23]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800221e:	f7ff f947 	bl	80014b0 <HAL_GetTick>
 8002222:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d008      	beq.n	8002242 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e052      	b.n	80022e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0216 	bic.w	r2, r2, #22
 8002250:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002260:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d103      	bne.n	8002272 <HAL_DMA_Abort+0x62>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0208 	bic.w	r2, r2, #8
 8002280:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0201 	bic.w	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002292:	e013      	b.n	80022bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002294:	f7ff f90c 	bl	80014b0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d90c      	bls.n	80022bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2220      	movs	r2, #32
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2203      	movs	r2, #3
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e015      	b.n	80022e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1e4      	bne.n	8002294 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ce:	223f      	movs	r2, #63	; 0x3f
 80022d0:	409a      	lsls	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d004      	beq.n	800230e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00c      	b.n	8002328 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2205      	movs	r2, #5
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002340:	4b8e      	ldr	r3, [pc, #568]	; (800257c <HAL_DMA_IRQHandler+0x248>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a8e      	ldr	r2, [pc, #568]	; (8002580 <HAL_DMA_IRQHandler+0x24c>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0a9b      	lsrs	r3, r3, #10
 800234c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	2208      	movs	r2, #8
 8002360:	409a      	lsls	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01a      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0204 	bic.w	r2, r2, #4
 8002386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	2208      	movs	r2, #8
 800238e:	409a      	lsls	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	2201      	movs	r2, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d012      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	2201      	movs	r2, #1
 80023c4:	409a      	lsls	r2, r3
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	f043 0202 	orr.w	r2, r3, #2
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2204      	movs	r2, #4
 80023dc:	409a      	lsls	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d012      	beq.n	800240c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00b      	beq.n	800240c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	2204      	movs	r2, #4
 80023fa:	409a      	lsls	r2, r3
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002404:	f043 0204 	orr.w	r2, r3, #4
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	2210      	movs	r2, #16
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d043      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d03c      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242e:	2210      	movs	r2, #16
 8002430:	409a      	lsls	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d018      	beq.n	8002476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d108      	bne.n	8002464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d024      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
 8002462:	e01f      	b.n	80024a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01b      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
 8002474:	e016      	b.n	80024a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0208 	bic.w	r2, r2, #8
 8002492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	2220      	movs	r2, #32
 80024aa:	409a      	lsls	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 808f 	beq.w	80025d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8087 	beq.w	80025d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	2220      	movs	r2, #32
 80024cc:	409a      	lsls	r2, r3
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d136      	bne.n	800254c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0216 	bic.w	r2, r2, #22
 80024ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <HAL_DMA_IRQHandler+0x1da>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0208 	bic.w	r2, r2, #8
 800251c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	223f      	movs	r2, #63	; 0x3f
 8002524:	409a      	lsls	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253e:	2b00      	cmp	r3, #0
 8002540:	d07e      	beq.n	8002640 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4798      	blx	r3
        }
        return;
 800254a:	e079      	b.n	8002640 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01d      	beq.n	8002596 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10d      	bne.n	8002584 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	2b00      	cmp	r3, #0
 800256e:	d031      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
 8002578:	e02c      	b.n	80025d4 <HAL_DMA_IRQHandler+0x2a0>
 800257a:	bf00      	nop
 800257c:	20000004 	.word	0x20000004
 8002580:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d023      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
 8002594:	e01e      	b.n	80025d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10f      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0210 	bic.w	r2, r2, #16
 80025b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d032      	beq.n	8002642 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d022      	beq.n	800262e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2205      	movs	r2, #5
 80025ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	3301      	adds	r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	429a      	cmp	r2, r3
 800260a:	d307      	bcc.n	800261c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f2      	bne.n	8002600 <HAL_DMA_IRQHandler+0x2cc>
 800261a:	e000      	b.n	800261e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800261c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
 800263e:	e000      	b.n	8002642 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002640:	bf00      	nop
    }
  }
}
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b40      	cmp	r3, #64	; 0x40
 8002674:	d108      	bne.n	8002688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002686:	e007      	b.n	8002698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	60da      	str	r2, [r3, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3b10      	subs	r3, #16
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <DMA_CalcBaseAndBitshift+0x64>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026be:	4a13      	ldr	r2, [pc, #76]	; (800270c <DMA_CalcBaseAndBitshift+0x68>)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d909      	bls.n	80026e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	1d1a      	adds	r2, r3, #4
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	659a      	str	r2, [r3, #88]	; 0x58
 80026e4:	e007      	b.n	80026f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ee:	f023 0303 	bic.w	r3, r3, #3
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	aaaaaaab 	.word	0xaaaaaaab
 800270c:	0800ace8 	.word	0x0800ace8

08002710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d11f      	bne.n	800276a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d856      	bhi.n	80027de <DMA_CheckFifoParam+0xce>
 8002730:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <DMA_CheckFifoParam+0x28>)
 8002732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002736:	bf00      	nop
 8002738:	08002749 	.word	0x08002749
 800273c:	0800275b 	.word	0x0800275b
 8002740:	08002749 	.word	0x08002749
 8002744:	080027df 	.word	0x080027df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d046      	beq.n	80027e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002758:	e043      	b.n	80027e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002762:	d140      	bne.n	80027e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002768:	e03d      	b.n	80027e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002772:	d121      	bne.n	80027b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d837      	bhi.n	80027ea <DMA_CheckFifoParam+0xda>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <DMA_CheckFifoParam+0x70>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	08002791 	.word	0x08002791
 8002784:	08002797 	.word	0x08002797
 8002788:	08002791 	.word	0x08002791
 800278c:	080027a9 	.word	0x080027a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	e030      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d025      	beq.n	80027ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a6:	e022      	b.n	80027ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027b0:	d11f      	bne.n	80027f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027b6:	e01c      	b.n	80027f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d903      	bls.n	80027c6 <DMA_CheckFifoParam+0xb6>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d003      	beq.n	80027cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027c4:	e018      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      break;
 80027ca:	e015      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00e      	beq.n	80027f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
      break;
 80027dc:	e00b      	b.n	80027f6 <DMA_CheckFifoParam+0xe6>
      break;
 80027de:	bf00      	nop
 80027e0:	e00a      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      break;
 80027e2:	bf00      	nop
 80027e4:	e008      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      break;
 80027e6:	bf00      	nop
 80027e8:	e006      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      break;
 80027ea:	bf00      	nop
 80027ec:	e004      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      break;
 80027ee:	bf00      	nop
 80027f0:	e002      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
    }
  } 
  
  return status; 
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop

08002808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	e165      	b.n	8002af0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002824:	2201      	movs	r2, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	429a      	cmp	r2, r3
 800283e:	f040 8154 	bne.w	8002aea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b01      	cmp	r3, #1
 800284c:	d005      	beq.n	800285a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002856:	2b02      	cmp	r3, #2
 8002858:	d130      	bne.n	80028bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	2203      	movs	r2, #3
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 0201 	and.w	r2, r3, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d017      	beq.n	80028f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d123      	bne.n	800294c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	08da      	lsrs	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3208      	adds	r2, #8
 800290c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	220f      	movs	r2, #15
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	08da      	lsrs	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3208      	adds	r2, #8
 8002946:	69b9      	ldr	r1, [r7, #24]
 8002948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2203      	movs	r2, #3
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0203 	and.w	r2, r3, #3
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80ae 	beq.w	8002aea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b5d      	ldr	r3, [pc, #372]	; (8002b08 <HAL_GPIO_Init+0x300>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	4a5c      	ldr	r2, [pc, #368]	; (8002b08 <HAL_GPIO_Init+0x300>)
 8002998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299c:	6453      	str	r3, [r2, #68]	; 0x44
 800299e:	4b5a      	ldr	r3, [pc, #360]	; (8002b08 <HAL_GPIO_Init+0x300>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029aa:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <HAL_GPIO_Init+0x304>)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	220f      	movs	r2, #15
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	; (8002b10 <HAL_GPIO_Init+0x308>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d025      	beq.n	8002a22 <HAL_GPIO_Init+0x21a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4e      	ldr	r2, [pc, #312]	; (8002b14 <HAL_GPIO_Init+0x30c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01f      	beq.n	8002a1e <HAL_GPIO_Init+0x216>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4d      	ldr	r2, [pc, #308]	; (8002b18 <HAL_GPIO_Init+0x310>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d019      	beq.n	8002a1a <HAL_GPIO_Init+0x212>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4c      	ldr	r2, [pc, #304]	; (8002b1c <HAL_GPIO_Init+0x314>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <HAL_GPIO_Init+0x20e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	; (8002b20 <HAL_GPIO_Init+0x318>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00d      	beq.n	8002a12 <HAL_GPIO_Init+0x20a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4a      	ldr	r2, [pc, #296]	; (8002b24 <HAL_GPIO_Init+0x31c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d007      	beq.n	8002a0e <HAL_GPIO_Init+0x206>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a49      	ldr	r2, [pc, #292]	; (8002b28 <HAL_GPIO_Init+0x320>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <HAL_GPIO_Init+0x202>
 8002a06:	2306      	movs	r3, #6
 8002a08:	e00c      	b.n	8002a24 <HAL_GPIO_Init+0x21c>
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	e00a      	b.n	8002a24 <HAL_GPIO_Init+0x21c>
 8002a0e:	2305      	movs	r3, #5
 8002a10:	e008      	b.n	8002a24 <HAL_GPIO_Init+0x21c>
 8002a12:	2304      	movs	r3, #4
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x21c>
 8002a16:	2303      	movs	r3, #3
 8002a18:	e004      	b.n	8002a24 <HAL_GPIO_Init+0x21c>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e002      	b.n	8002a24 <HAL_GPIO_Init+0x21c>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_GPIO_Init+0x21c>
 8002a22:	2300      	movs	r3, #0
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	f002 0203 	and.w	r2, r2, #3
 8002a2a:	0092      	lsls	r2, r2, #2
 8002a2c:	4093      	lsls	r3, r2
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a34:	4935      	ldr	r1, [pc, #212]	; (8002b0c <HAL_GPIO_Init+0x304>)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a42:	4b3a      	ldr	r3, [pc, #232]	; (8002b2c <HAL_GPIO_Init+0x324>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a66:	4a31      	ldr	r2, [pc, #196]	; (8002b2c <HAL_GPIO_Init+0x324>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a6c:	4b2f      	ldr	r3, [pc, #188]	; (8002b2c <HAL_GPIO_Init+0x324>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a90:	4a26      	ldr	r2, [pc, #152]	; (8002b2c <HAL_GPIO_Init+0x324>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a96:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <HAL_GPIO_Init+0x324>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aba:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <HAL_GPIO_Init+0x324>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <HAL_GPIO_Init+0x324>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae4:	4a11      	ldr	r2, [pc, #68]	; (8002b2c <HAL_GPIO_Init+0x324>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3301      	adds	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b0f      	cmp	r3, #15
 8002af4:	f67f ae96 	bls.w	8002824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40020400 	.word	0x40020400
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40020c00 	.word	0x40020c00
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40021400 	.word	0x40021400
 8002b28:	40021800 	.word	0x40021800
 8002b2c:	40013c00 	.word	0x40013c00

08002b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e001      	b.n	8002b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b70:	787b      	ldrb	r3, [r7, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b7c:	e003      	b.n	8002b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	041a      	lsls	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	603b      	str	r3, [r7, #0]
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_PWREx_EnableOverDrive+0x90>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_PWREx_EnableOverDrive+0x94>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc0:	f7fe fc76 	bl	80014b0 <HAL_GetTick>
 8002bc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bc6:	e009      	b.n	8002bdc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bc8:	f7fe fc72 	bl	80014b0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bd6:	d901      	bls.n	8002bdc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e01f      	b.n	8002c1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_PWREx_EnableOverDrive+0x98>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d1ee      	bne.n	8002bc8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bf0:	f7fe fc5e 	bl	80014b0 <HAL_GetTick>
 8002bf4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bf6:	e009      	b.n	8002c0c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bf8:	f7fe fc5a 	bl	80014b0 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c06:	d901      	bls.n	8002c0c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e007      	b.n	8002c1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c18:	d1ee      	bne.n	8002bf8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40023800 	.word	0x40023800
 8002c28:	420e0040 	.word	0x420e0040
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	420e0044 	.word	0x420e0044

08002c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0cc      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c48:	4b68      	ldr	r3, [pc, #416]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d90c      	bls.n	8002c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b65      	ldr	r3, [pc, #404]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5e:	4b63      	ldr	r3, [pc, #396]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d001      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0b8      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c88:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a58      	ldr	r2, [pc, #352]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca0:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a52      	ldr	r2, [pc, #328]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cac:	4b50      	ldr	r3, [pc, #320]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	494d      	ldr	r1, [pc, #308]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d044      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d119      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e07f      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e06f      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d02:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e067      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	4b37      	ldr	r3, [pc, #220]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4934      	ldr	r1, [pc, #208]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d24:	f7fe fbc4 	bl	80014b0 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7fe fbc0 	bl	80014b0 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e04f      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 020c 	and.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1eb      	bne.n	8002d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d54:	4b25      	ldr	r3, [pc, #148]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d20c      	bcs.n	8002d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e032      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4916      	ldr	r1, [pc, #88]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	490e      	ldr	r1, [pc, #56]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dba:	f000 fb7f 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	490a      	ldr	r1, [pc, #40]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	5ccb      	ldrb	r3, [r1, r3]
 8002dce:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fb24 	bl	8001428 <HAL_InitTick>

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40023c00 	.word	0x40023c00
 8002df0:	40023800 	.word	0x40023800
 8002df4:	0800acd0 	.word	0x0800acd0
 8002df8:	20000004 	.word	0x20000004
 8002dfc:	20000008 	.word	0x20000008

08002e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e1c:	f7ff fff0 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	0a9b      	lsrs	r3, r3, #10
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4903      	ldr	r1, [pc, #12]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	0800ace0 	.word	0x0800ace0

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e44:	f7ff ffdc 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	0b5b      	lsrs	r3, r3, #13
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4903      	ldr	r1, [pc, #12]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40023800 	.word	0x40023800
 8002e64:	0800ace0 	.word	0x0800ace0

08002e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08c      	sub	sp, #48	; 0x30
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ea6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	496c      	ldr	r1, [pc, #432]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002ece:	4b64      	ldr	r3, [pc, #400]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	4960      	ldr	r1, [pc, #384]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002eec:	2301      	movs	r3, #1
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d017      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002efc:	4b58      	ldr	r3, [pc, #352]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4955      	ldr	r1, [pc, #340]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d017      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f38:	4b49      	ldr	r3, [pc, #292]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f46:	4946      	ldr	r1, [pc, #280]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f56:	d101      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002f64:	2301      	movs	r3, #1
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 808a 	beq.w	800308a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b39      	ldr	r3, [pc, #228]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	4a38      	ldr	r2, [pc, #224]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f84:	6413      	str	r3, [r2, #64]	; 0x40
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f92:	4b34      	ldr	r3, [pc, #208]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a33      	ldr	r2, [pc, #204]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f9e:	f7fe fa87 	bl	80014b0 <HAL_GetTick>
 8002fa2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fe fa83 	bl	80014b0 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e278      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fb8:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fcc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d02f      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fdc:	6a3a      	ldr	r2, [r7, #32]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d028      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe2:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fea:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fec:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ff8:	4a19      	ldr	r2, [pc, #100]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ffe:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b01      	cmp	r3, #1
 8003008:	d114      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800300a:	f7fe fa51 	bl	80014b0 <HAL_GetTick>
 800300e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003010:	e00a      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003012:	f7fe fa4d 	bl	80014b0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e240      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003028:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0ee      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003040:	d114      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003056:	4902      	ldr	r1, [pc, #8]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]
 800305c:	e00c      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40007000 	.word	0x40007000
 8003068:	42470e40 	.word	0x42470e40
 800306c:	4b4a      	ldr	r3, [pc, #296]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a49      	ldr	r2, [pc, #292]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003072:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003076:	6093      	str	r3, [r2, #8]
 8003078:	4b47      	ldr	r3, [pc, #284]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800307a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	4944      	ldr	r1, [pc, #272]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003086:	4313      	orrs	r3, r2
 8003088:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800309c:	4b3f      	ldr	r3, [pc, #252]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800309e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80030ac:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ba:	4937      	ldr	r1, [pc, #220]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00a      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030ce:	4b32      	ldr	r3, [pc, #200]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030dc:	492e      	ldr	r1, [pc, #184]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d011      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030f0:	4b29      	ldr	r3, [pc, #164]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	4926      	ldr	r1, [pc, #152]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800310e:	d101      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003110:	2301      	movs	r3, #1
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003126:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	491a      	ldr	r1, [pc, #104]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313e:	2b00      	cmp	r3, #0
 8003140:	d011      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003148:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003150:	4911      	ldr	r1, [pc, #68]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003160:	d101      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003162:	2301      	movs	r3, #1
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d005      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003174:	f040 80ff 	bne.w	8003376 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800317e:	f7fe f997 	bl	80014b0 <HAL_GetTick>
 8003182:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003184:	e00e      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003186:	f7fe f993 	bl	80014b0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d907      	bls.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e188      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003198:	40023800 	.word	0x40023800
 800319c:	424711e0 	.word	0x424711e0
 80031a0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031a4:	4b7e      	ldr	r3, [pc, #504]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ea      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d028      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d124      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80031d8:	4b71      	ldr	r3, [pc, #452]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031de:	0c1b      	lsrs	r3, r3, #16
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	3301      	adds	r3, #1
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031ea:	4b6d      	ldr	r3, [pc, #436]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f0:	0e1b      	lsrs	r3, r3, #24
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	019b      	lsls	r3, r3, #6
 8003202:	431a      	orrs	r2, r3
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	3b01      	subs	r3, #1
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	431a      	orrs	r2, r3
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	071b      	lsls	r3, r3, #28
 800321a:	4961      	ldr	r1, [pc, #388]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003240:	2b00      	cmp	r3, #0
 8003242:	d035      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324c:	d130      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800324e:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	3301      	adds	r3, #1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003260:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003266:	0f1b      	lsrs	r3, r3, #28
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	019b      	lsls	r3, r3, #6
 8003278:	431a      	orrs	r2, r3
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	3b01      	subs	r3, #1
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	431a      	orrs	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	071b      	lsls	r3, r3, #28
 8003290:	4943      	ldr	r1, [pc, #268]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003298:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800329a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800329e:	f023 021f 	bic.w	r2, r3, #31
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	3b01      	subs	r3, #1
 80032a8:	493d      	ldr	r1, [pc, #244]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d029      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c4:	d124      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032c6:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	3301      	adds	r3, #1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032d8:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032de:	0f1b      	lsrs	r3, r3, #28
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	019b      	lsls	r3, r3, #6
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	3b01      	subs	r3, #1
 80032fa:	041b      	lsls	r3, r3, #16
 80032fc:	431a      	orrs	r2, r3
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	431a      	orrs	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	071b      	lsls	r3, r3, #28
 8003308:	4925      	ldr	r1, [pc, #148]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003318:	2b00      	cmp	r3, #0
 800331a:	d016      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	3b01      	subs	r3, #1
 8003330:	041b      	lsls	r3, r3, #16
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	071b      	lsls	r3, r3, #28
 8003342:	4917      	ldr	r1, [pc, #92]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800334a:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003350:	f7fe f8ae 	bl	80014b0 <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003358:	f7fe f8aa 	bl	80014b0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e09f      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	2b01      	cmp	r3, #1
 800337a:	f040 8095 	bne.w	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003384:	f7fe f894 	bl	80014b0 <HAL_GetTick>
 8003388:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800338a:	e00f      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800338c:	f7fe f890 	bl	80014b0 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d908      	bls.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e085      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x642>
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	42470068 	.word	0x42470068
 80033a8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033ac:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b8:	d0e8      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x566>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d02b      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d127      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80033e2:	4b34      	ldr	r3, [pc, #208]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	3301      	adds	r3, #1
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	019b      	lsls	r3, r3, #6
 80033fe:	431a      	orrs	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	085b      	lsrs	r3, r3, #1
 8003404:	3b01      	subs	r3, #1
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	061b      	lsls	r3, r3, #24
 8003410:	4928      	ldr	r1, [pc, #160]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003418:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800341a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800341e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	3b01      	subs	r3, #1
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	4922      	ldr	r1, [pc, #136]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d01d      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003446:	d118      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003448:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	0e1b      	lsrs	r3, r3, #24
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	019b      	lsls	r3, r3, #6
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	3b01      	subs	r3, #1
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	431a      	orrs	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	4910      	ldr	r1, [pc, #64]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800347a:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003480:	f7fe f816 	bl	80014b0 <HAL_GetTick>
 8003484:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003488:	f7fe f812 	bl	80014b0 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e007      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a6:	d1ef      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3730      	adds	r7, #48	; 0x30
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	42470070 	.word	0x42470070

080034bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c0:	b0ae      	sub	sp, #184	; 0xb8
 80034c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e2:	4bcb      	ldr	r3, [pc, #812]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	f200 8206 	bhi.w	80038fc <HAL_RCC_GetSysClockFreq+0x440>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	0800352d 	.word	0x0800352d
 80034fc:	080038fd 	.word	0x080038fd
 8003500:	080038fd 	.word	0x080038fd
 8003504:	080038fd 	.word	0x080038fd
 8003508:	08003535 	.word	0x08003535
 800350c:	080038fd 	.word	0x080038fd
 8003510:	080038fd 	.word	0x080038fd
 8003514:	080038fd 	.word	0x080038fd
 8003518:	0800353d 	.word	0x0800353d
 800351c:	080038fd 	.word	0x080038fd
 8003520:	080038fd 	.word	0x080038fd
 8003524:	080038fd 	.word	0x080038fd
 8003528:	0800372d 	.word	0x0800372d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4bb9      	ldr	r3, [pc, #740]	; (8003814 <HAL_RCC_GetSysClockFreq+0x358>)
 800352e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003532:	e1e7      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003534:	4bb8      	ldr	r3, [pc, #736]	; (8003818 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800353a:	e1e3      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800353c:	4bb4      	ldr	r3, [pc, #720]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003548:	4bb1      	ldr	r3, [pc, #708]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d071      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003554:	4bae      	ldr	r3, [pc, #696]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003560:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003570:	2300      	movs	r3, #0
 8003572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800357a:	4622      	mov	r2, r4
 800357c:	462b      	mov	r3, r5
 800357e:	f04f 0000 	mov.w	r0, #0
 8003582:	f04f 0100 	mov.w	r1, #0
 8003586:	0159      	lsls	r1, r3, #5
 8003588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800358c:	0150      	lsls	r0, r2, #5
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4621      	mov	r1, r4
 8003594:	1a51      	subs	r1, r2, r1
 8003596:	6439      	str	r1, [r7, #64]	; 0x40
 8003598:	4629      	mov	r1, r5
 800359a:	eb63 0301 	sbc.w	r3, r3, r1
 800359e:	647b      	str	r3, [r7, #68]	; 0x44
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80035ac:	4649      	mov	r1, r9
 80035ae:	018b      	lsls	r3, r1, #6
 80035b0:	4641      	mov	r1, r8
 80035b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035b6:	4641      	mov	r1, r8
 80035b8:	018a      	lsls	r2, r1, #6
 80035ba:	4641      	mov	r1, r8
 80035bc:	1a51      	subs	r1, r2, r1
 80035be:	63b9      	str	r1, [r7, #56]	; 0x38
 80035c0:	4649      	mov	r1, r9
 80035c2:	eb63 0301 	sbc.w	r3, r3, r1
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80035d4:	4649      	mov	r1, r9
 80035d6:	00cb      	lsls	r3, r1, #3
 80035d8:	4641      	mov	r1, r8
 80035da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035de:	4641      	mov	r1, r8
 80035e0:	00ca      	lsls	r2, r1, #3
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	4603      	mov	r3, r0
 80035e8:	4622      	mov	r2, r4
 80035ea:	189b      	adds	r3, r3, r2
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
 80035ee:	462b      	mov	r3, r5
 80035f0:	460a      	mov	r2, r1
 80035f2:	eb42 0303 	adc.w	r3, r2, r3
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003604:	4629      	mov	r1, r5
 8003606:	024b      	lsls	r3, r1, #9
 8003608:	4621      	mov	r1, r4
 800360a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800360e:	4621      	mov	r1, r4
 8003610:	024a      	lsls	r2, r1, #9
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800361a:	2200      	movs	r2, #0
 800361c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003620:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003624:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003628:	f7fc fe42 	bl	80002b0 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003636:	e067      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003638:	4b75      	ldr	r3, [pc, #468]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	2200      	movs	r2, #0
 8003640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003644:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800364c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003650:	67bb      	str	r3, [r7, #120]	; 0x78
 8003652:	2300      	movs	r3, #0
 8003654:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003656:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800365a:	4622      	mov	r2, r4
 800365c:	462b      	mov	r3, r5
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	0159      	lsls	r1, r3, #5
 8003668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366c:	0150      	lsls	r0, r2, #5
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4621      	mov	r1, r4
 8003674:	1a51      	subs	r1, r2, r1
 8003676:	62b9      	str	r1, [r7, #40]	; 0x28
 8003678:	4629      	mov	r1, r5
 800367a:	eb63 0301 	sbc.w	r3, r3, r1
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800368c:	4649      	mov	r1, r9
 800368e:	018b      	lsls	r3, r1, #6
 8003690:	4641      	mov	r1, r8
 8003692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003696:	4641      	mov	r1, r8
 8003698:	018a      	lsls	r2, r1, #6
 800369a:	4641      	mov	r1, r8
 800369c:	ebb2 0a01 	subs.w	sl, r2, r1
 80036a0:	4649      	mov	r1, r9
 80036a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ba:	4692      	mov	sl, r2
 80036bc:	469b      	mov	fp, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	eb1a 0303 	adds.w	r3, sl, r3
 80036c4:	623b      	str	r3, [r7, #32]
 80036c6:	462b      	mov	r3, r5
 80036c8:	eb4b 0303 	adc.w	r3, fp, r3
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036da:	4629      	mov	r1, r5
 80036dc:	028b      	lsls	r3, r1, #10
 80036de:	4621      	mov	r1, r4
 80036e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036e4:	4621      	mov	r1, r4
 80036e6:	028a      	lsls	r2, r1, #10
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036f0:	2200      	movs	r2, #0
 80036f2:	673b      	str	r3, [r7, #112]	; 0x70
 80036f4:	677a      	str	r2, [r7, #116]	; 0x74
 80036f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80036fa:	f7fc fdd9 	bl	80002b0 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4613      	mov	r3, r2
 8003704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003708:	4b41      	ldr	r3, [pc, #260]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	3301      	adds	r3, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800371a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800371e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800372a:	e0eb      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800372c:	4b38      	ldr	r3, [pc, #224]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003738:	4b35      	ldr	r3, [pc, #212]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d06b      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003744:	4b32      	ldr	r3, [pc, #200]	; (8003810 <HAL_RCC_GetSysClockFreq+0x354>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	099b      	lsrs	r3, r3, #6
 800374a:	2200      	movs	r2, #0
 800374c:	66bb      	str	r3, [r7, #104]	; 0x68
 800374e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003756:	663b      	str	r3, [r7, #96]	; 0x60
 8003758:	2300      	movs	r3, #0
 800375a:	667b      	str	r3, [r7, #100]	; 0x64
 800375c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003760:	4622      	mov	r2, r4
 8003762:	462b      	mov	r3, r5
 8003764:	f04f 0000 	mov.w	r0, #0
 8003768:	f04f 0100 	mov.w	r1, #0
 800376c:	0159      	lsls	r1, r3, #5
 800376e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003772:	0150      	lsls	r0, r2, #5
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4621      	mov	r1, r4
 800377a:	1a51      	subs	r1, r2, r1
 800377c:	61b9      	str	r1, [r7, #24]
 800377e:	4629      	mov	r1, r5
 8003780:	eb63 0301 	sbc.w	r3, r3, r1
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003792:	4659      	mov	r1, fp
 8003794:	018b      	lsls	r3, r1, #6
 8003796:	4651      	mov	r1, sl
 8003798:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800379c:	4651      	mov	r1, sl
 800379e:	018a      	lsls	r2, r1, #6
 80037a0:	4651      	mov	r1, sl
 80037a2:	ebb2 0801 	subs.w	r8, r2, r1
 80037a6:	4659      	mov	r1, fp
 80037a8:	eb63 0901 	sbc.w	r9, r3, r1
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037c0:	4690      	mov	r8, r2
 80037c2:	4699      	mov	r9, r3
 80037c4:	4623      	mov	r3, r4
 80037c6:	eb18 0303 	adds.w	r3, r8, r3
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	462b      	mov	r3, r5
 80037ce:	eb49 0303 	adc.w	r3, r9, r3
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80037e0:	4629      	mov	r1, r5
 80037e2:	024b      	lsls	r3, r1, #9
 80037e4:	4621      	mov	r1, r4
 80037e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037ea:	4621      	mov	r1, r4
 80037ec:	024a      	lsls	r2, r1, #9
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037f6:	2200      	movs	r2, #0
 80037f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80037fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80037fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003800:	f7fc fd56 	bl	80002b0 <__aeabi_uldivmod>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4613      	mov	r3, r2
 800380a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800380e:	e065      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x420>
 8003810:	40023800 	.word	0x40023800
 8003814:	00f42400 	.word	0x00f42400
 8003818:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381c:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <HAL_RCC_GetSysClockFreq+0x458>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	2200      	movs	r2, #0
 8003824:	4618      	mov	r0, r3
 8003826:	4611      	mov	r1, r2
 8003828:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800382c:	653b      	str	r3, [r7, #80]	; 0x50
 800382e:	2300      	movs	r3, #0
 8003830:	657b      	str	r3, [r7, #84]	; 0x54
 8003832:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003836:	4642      	mov	r2, r8
 8003838:	464b      	mov	r3, r9
 800383a:	f04f 0000 	mov.w	r0, #0
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	0159      	lsls	r1, r3, #5
 8003844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003848:	0150      	lsls	r0, r2, #5
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4641      	mov	r1, r8
 8003850:	1a51      	subs	r1, r2, r1
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	4649      	mov	r1, r9
 8003856:	eb63 0301 	sbc.w	r3, r3, r1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003868:	4659      	mov	r1, fp
 800386a:	018b      	lsls	r3, r1, #6
 800386c:	4651      	mov	r1, sl
 800386e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003872:	4651      	mov	r1, sl
 8003874:	018a      	lsls	r2, r1, #6
 8003876:	4651      	mov	r1, sl
 8003878:	1a54      	subs	r4, r2, r1
 800387a:	4659      	mov	r1, fp
 800387c:	eb63 0501 	sbc.w	r5, r3, r1
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	00eb      	lsls	r3, r5, #3
 800388a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800388e:	00e2      	lsls	r2, r4, #3
 8003890:	4614      	mov	r4, r2
 8003892:	461d      	mov	r5, r3
 8003894:	4643      	mov	r3, r8
 8003896:	18e3      	adds	r3, r4, r3
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	464b      	mov	r3, r9
 800389c:	eb45 0303 	adc.w	r3, r5, r3
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ae:	4629      	mov	r1, r5
 80038b0:	028b      	lsls	r3, r1, #10
 80038b2:	4621      	mov	r1, r4
 80038b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038b8:	4621      	mov	r1, r4
 80038ba:	028a      	lsls	r2, r1, #10
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038c4:	2200      	movs	r2, #0
 80038c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80038ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038ce:	f7fc fcef 	bl	80002b0 <__aeabi_uldivmod>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4613      	mov	r3, r2
 80038d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <HAL_RCC_GetSysClockFreq+0x458>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	0f1b      	lsrs	r3, r3, #28
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80038ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038fa:	e003      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003902:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003904:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003908:	4618      	mov	r0, r3
 800390a:	37b8      	adds	r7, #184	; 0xb8
 800390c:	46bd      	mov	sp, r7
 800390e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800
 8003918:	00f42400 	.word	0x00f42400

0800391c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e28d      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8083 	beq.w	8003a42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800393c:	4b94      	ldr	r3, [pc, #592]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b04      	cmp	r3, #4
 8003946:	d019      	beq.n	800397c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003948:	4b91      	ldr	r3, [pc, #580]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003950:	2b08      	cmp	r3, #8
 8003952:	d106      	bne.n	8003962 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003954:	4b8e      	ldr	r3, [pc, #568]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003960:	d00c      	beq.n	800397c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003962:	4b8b      	ldr	r3, [pc, #556]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d112      	bne.n	8003994 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800396e:	4b88      	ldr	r3, [pc, #544]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397a:	d10b      	bne.n	8003994 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	4b84      	ldr	r3, [pc, #528]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d05b      	beq.n	8003a40 <HAL_RCC_OscConfig+0x124>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d157      	bne.n	8003a40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e25a      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399c:	d106      	bne.n	80039ac <HAL_RCC_OscConfig+0x90>
 800399e:	4b7c      	ldr	r3, [pc, #496]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a7b      	ldr	r2, [pc, #492]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e01d      	b.n	80039e8 <HAL_RCC_OscConfig+0xcc>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0xb4>
 80039b6:	4b76      	ldr	r3, [pc, #472]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a75      	ldr	r2, [pc, #468]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	4b73      	ldr	r3, [pc, #460]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a72      	ldr	r2, [pc, #456]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e00b      	b.n	80039e8 <HAL_RCC_OscConfig+0xcc>
 80039d0:	4b6f      	ldr	r3, [pc, #444]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a6e      	ldr	r2, [pc, #440]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b6c      	ldr	r3, [pc, #432]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6b      	ldr	r2, [pc, #428]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 80039e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d013      	beq.n	8003a18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fd fd5e 	bl	80014b0 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f8:	f7fd fd5a 	bl	80014b0 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e21f      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	4b61      	ldr	r3, [pc, #388]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0xdc>
 8003a16:	e014      	b.n	8003a42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fd fd4a 	bl	80014b0 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fd fd46 	bl	80014b0 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	; 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e20b      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a32:	4b57      	ldr	r3, [pc, #348]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x104>
 8003a3e:	e000      	b.n	8003a42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d06f      	beq.n	8003b2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a4e:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d017      	beq.n	8003a8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a5a:	4b4d      	ldr	r3, [pc, #308]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d105      	bne.n	8003a72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a66:	4b4a      	ldr	r3, [pc, #296]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d11c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a7e:	4b44      	ldr	r3, [pc, #272]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d116      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8a:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x186>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e1d3      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4937      	ldr	r1, [pc, #220]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab6:	e03a      	b.n	8003b2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d020      	beq.n	8003b02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac0:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <HAL_RCC_OscConfig+0x278>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fd fcf3 	bl	80014b0 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ace:	f7fd fcef 	bl	80014b0 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e1b4      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae0:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aec:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4925      	ldr	r1, [pc, #148]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]
 8003b00:	e015      	b.n	8003b2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b02:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <HAL_RCC_OscConfig+0x278>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fd fcd2 	bl	80014b0 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fd fcce 	bl	80014b0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e193      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d036      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d016      	beq.n	8003b70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fd fcb2 	bl	80014b0 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b50:	f7fd fcae 	bl	80014b0 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e173      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b62:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x234>
 8003b6e:	e01b      	b.n	8003ba8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7fd fc9b 	bl	80014b0 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b7c:	e00e      	b.n	8003b9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b7e:	f7fd fc97 	bl	80014b0 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d907      	bls.n	8003b9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e15c      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
 8003b90:	40023800 	.word	0x40023800
 8003b94:	42470000 	.word	0x42470000
 8003b98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9c:	4b8a      	ldr	r3, [pc, #552]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ea      	bne.n	8003b7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8097 	beq.w	8003ce4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bba:	4b83      	ldr	r3, [pc, #524]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	4b7f      	ldr	r3, [pc, #508]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	4a7e      	ldr	r2, [pc, #504]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd6:	4b7c      	ldr	r3, [pc, #496]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b79      	ldr	r3, [pc, #484]	; (8003dcc <HAL_RCC_OscConfig+0x4b0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d118      	bne.n	8003c24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf2:	4b76      	ldr	r3, [pc, #472]	; (8003dcc <HAL_RCC_OscConfig+0x4b0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a75      	ldr	r2, [pc, #468]	; (8003dcc <HAL_RCC_OscConfig+0x4b0>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfe:	f7fd fc57 	bl	80014b0 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c06:	f7fd fc53 	bl	80014b0 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e118      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	4b6c      	ldr	r3, [pc, #432]	; (8003dcc <HAL_RCC_OscConfig+0x4b0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d106      	bne.n	8003c3a <HAL_RCC_OscConfig+0x31e>
 8003c2c:	4b66      	ldr	r3, [pc, #408]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	4a65      	ldr	r2, [pc, #404]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	6713      	str	r3, [r2, #112]	; 0x70
 8003c38:	e01c      	b.n	8003c74 <HAL_RCC_OscConfig+0x358>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b05      	cmp	r3, #5
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x340>
 8003c42:	4b61      	ldr	r3, [pc, #388]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	4a60      	ldr	r2, [pc, #384]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4e:	4b5e      	ldr	r3, [pc, #376]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	4a5d      	ldr	r2, [pc, #372]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0x358>
 8003c5c:	4b5a      	ldr	r3, [pc, #360]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	4a59      	ldr	r2, [pc, #356]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	6713      	str	r3, [r2, #112]	; 0x70
 8003c68:	4b57      	ldr	r3, [pc, #348]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4a56      	ldr	r2, [pc, #344]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c6e:	f023 0304 	bic.w	r3, r3, #4
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d015      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fd fc18 	bl	80014b0 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c84:	f7fd fc14 	bl	80014b0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e0d7      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9a:	4b4b      	ldr	r3, [pc, #300]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ee      	beq.n	8003c84 <HAL_RCC_OscConfig+0x368>
 8003ca6:	e014      	b.n	8003cd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fd fc02 	bl	80014b0 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fd fbfe 	bl	80014b0 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0c1      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc6:	4b40      	ldr	r3, [pc, #256]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1ee      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d105      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd8:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	4a3a      	ldr	r2, [pc, #232]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80ad 	beq.w	8003e48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cee:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d060      	beq.n	8003dbc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d145      	bne.n	8003d8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <HAL_RCC_OscConfig+0x4b4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fd fbd2 	bl	80014b0 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fd fbce 	bl	80014b0 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e093      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	019b      	lsls	r3, r3, #6
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	3b01      	subs	r3, #1
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	071b      	lsls	r3, r3, #28
 8003d5a:	491b      	ldr	r1, [pc, #108]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d60:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCC_OscConfig+0x4b4>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d66:	f7fd fba3 	bl	80014b0 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fd fb9f 	bl	80014b0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e064      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d80:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x452>
 8003d8c:	e05c      	b.n	8003e48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <HAL_RCC_OscConfig+0x4b4>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd fb8c 	bl	80014b0 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fd fb88 	bl	80014b0 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e04d      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_RCC_OscConfig+0x4ac>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x480>
 8003dba:	e045      	b.n	8003e48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e040      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <HAL_RCC_OscConfig+0x538>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d030      	beq.n	8003e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d129      	bne.n	8003e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d122      	bne.n	8003e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e04:	4013      	ands	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d119      	bne.n	8003e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d10f      	bne.n	8003e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d107      	bne.n	8003e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800

08003e58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e066      	b.n	8003f3c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7f5b      	ldrb	r3, [r3, #29]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fd f88c 	bl	8000f9c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	22ca      	movs	r2, #202	; 0xca
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2253      	movs	r2, #83	; 0x53
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f998 	bl	80041d0 <RTC_EnterInitMode>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d12c      	bne.n	8003f04 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ebc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6899      	ldr	r1, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	68d2      	ldr	r2, [r2, #12]
 8003ee4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6919      	ldr	r1, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	041a      	lsls	r2, r3, #16
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f99f 	bl	800423e <RTC_ExitInitMode>
 8003f00:	4603      	mov	r3, r0
 8003f02:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d113      	bne.n	8003f32 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	22ff      	movs	r2, #255	; 0xff
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	7f1b      	ldrb	r3, [r3, #28]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_RTC_SetTime+0x1c>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e087      	b.n	8004070 <HAL_RTC_SetTime+0x12c>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d126      	bne.n	8003fc0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2200      	movs	r2, #0
 8003f84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f97c 	bl	8004288 <RTC_ByteToBcd2>
 8003f90:	4603      	mov	r3, r0
 8003f92:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 f975 	bl	8004288 <RTC_ByteToBcd2>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fa2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	789b      	ldrb	r3, [r3, #2]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f96d 	bl	8004288 <RTC_ByteToBcd2>
 8003fae:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fb0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	78db      	ldrb	r3, [r3, #3]
 8003fb8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	e018      	b.n	8003ff2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	785b      	ldrb	r3, [r3, #1]
 8003fde:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fe0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003fe6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	78db      	ldrb	r3, [r3, #3]
 8003fec:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	22ca      	movs	r2, #202	; 0xca
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2253      	movs	r2, #83	; 0x53
 8004000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f8e4 	bl	80041d0 <RTC_EnterInitMode>
 8004008:	4603      	mov	r3, r0
 800400a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d120      	bne.n	8004054 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800401c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004020:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004030:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6899      	ldr	r1, [r3, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f8f7 	bl	800423e <RTC_ExitInitMode>
 8004050:	4603      	mov	r3, r0
 8004052:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004054:	7cfb      	ldrb	r3, [r7, #19]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d102      	bne.n	8004060 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	22ff      	movs	r2, #255	; 0xff
 8004066:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	771a      	strb	r2, [r3, #28]

  return status;
 800406e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004070:	4618      	mov	r0, r3
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	bd90      	pop	{r4, r7, pc}

08004078 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	7f1b      	ldrb	r3, [r3, #28]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_RTC_SetDate+0x1c>
 8004090:	2302      	movs	r3, #2
 8004092:	e071      	b.n	8004178 <HAL_RTC_SetDate+0x100>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2202      	movs	r2, #2
 800409e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10e      	bne.n	80040c4 <HAL_RTC_SetDate+0x4c>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	785b      	ldrb	r3, [r3, #1]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	f023 0310 	bic.w	r3, r3, #16
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	330a      	adds	r3, #10
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d11c      	bne.n	8004104 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	78db      	ldrb	r3, [r3, #3]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f8da 	bl	8004288 <RTC_ByteToBcd2>
 80040d4:	4603      	mov	r3, r0
 80040d6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f8d3 	bl	8004288 <RTC_ByteToBcd2>
 80040e2:	4603      	mov	r3, r0
 80040e4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040e6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	789b      	ldrb	r3, [r3, #2]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 f8cb 	bl	8004288 <RTC_ByteToBcd2>
 80040f2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80040f4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e00e      	b.n	8004122 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	78db      	ldrb	r3, [r3, #3]
 8004108:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004110:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004116:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	22ca      	movs	r2, #202	; 0xca
 8004128:	625a      	str	r2, [r3, #36]	; 0x24
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2253      	movs	r2, #83	; 0x53
 8004130:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f84c 	bl	80041d0 <RTC_EnterInitMode>
 8004138:	4603      	mov	r3, r0
 800413a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10c      	bne.n	800415c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800414c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004150:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f873 	bl	800423e <RTC_ExitInitMode>
 8004158:	4603      	mov	r3, r0
 800415a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	771a      	strb	r2, [r3, #28]

  return status;
 8004176:	7cfb      	ldrb	r3, [r7, #19]
}
 8004178:	4618      	mov	r0, r3
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	bd90      	pop	{r4, r7, pc}

08004180 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800419a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800419c:	f7fd f988 	bl	80014b0 <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041a2:	e009      	b.n	80041b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041a4:	f7fd f984 	bl	80014b0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041b2:	d901      	bls.n	80041b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e007      	b.n	80041c8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0ee      	beq.n	80041a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d122      	bne.n	8004234 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041fe:	f7fd f957 	bl	80014b0 <HAL_GetTick>
 8004202:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004204:	e00c      	b.n	8004220 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004206:	f7fd f953 	bl	80014b0 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004214:	d904      	bls.n	8004220 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2204      	movs	r2, #4
 800421a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <RTC_EnterInitMode+0x64>
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d1e8      	bne.n	8004206 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004258:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff ff89 	bl	8004180 <HAL_RTC_WaitForSynchro>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2204      	movs	r2, #4
 8004278:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004296:	e005      	b.n	80042a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	3301      	adds	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	3b0a      	subs	r3, #10
 80042a2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	2b09      	cmp	r3, #9
 80042a8:	d8f6      	bhi.n	8004298 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	b2db      	uxtb	r3, r3
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e022      	b.n	800431a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc fe82 	bl	8000ff0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2203      	movs	r2, #3
 80042f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f815 	bl	8004324 <HAL_SD_InitCard>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e00a      	b.n	800431a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004324:	b5b0      	push	{r4, r5, r7, lr}
 8004326:	b08e      	sub	sp, #56	; 0x38
 8004328:	af04      	add	r7, sp, #16
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800432c:	2300      	movs	r3, #0
 800432e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004340:	2376      	movs	r3, #118	; 0x76
 8004342:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681d      	ldr	r5, [r3, #0]
 8004348:	466c      	mov	r4, sp
 800434a:	f107 0314 	add.w	r3, r7, #20
 800434e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004356:	f107 0308 	add.w	r3, r7, #8
 800435a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800435c:	4628      	mov	r0, r5
 800435e:	f001 fc8f 	bl	8005c80 <SDIO_Init>
 8004362:	4603      	mov	r3, r0
 8004364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e04f      	b.n	8004414 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004374:	4b29      	ldr	r3, [pc, #164]	; (800441c <HAL_SD_InitCard+0xf8>)
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f001 fcc7 	bl	8005d12 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004384:	4b25      	ldr	r3, [pc, #148]	; (800441c <HAL_SD_InitCard+0xf8>)
 8004386:	2201      	movs	r2, #1
 8004388:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800438a:	2002      	movs	r0, #2
 800438c:	f7fd f89c 	bl	80014c8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f001 f857 	bl	8005444 <SD_PowerON>
 8004396:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e02e      	b.n	8004414 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 ff76 	bl	80052a8 <SD_InitCard>
 80043bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00b      	beq.n	80043dc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e01b      	b.n	8004414 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 fd26 	bl	8005e36 <SDMMC_CmdBlockLength>
 80043ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00f      	beq.n	8004412 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <HAL_SD_InitCard+0xfc>)
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3728      	adds	r7, #40	; 0x28
 8004418:	46bd      	mov	sp, r7
 800441a:	bdb0      	pop	{r4, r5, r7, pc}
 800441c:	422580a0 	.word	0x422580a0
 8004420:	004005ff 	.word	0x004005ff

08004424 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b092      	sub	sp, #72	; 0x48
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004432:	f7fd f83d 	bl	80014b0 <HAL_GetTick>
 8004436:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e1bd      	b.n	80047d2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b01      	cmp	r3, #1
 8004460:	f040 81b0 	bne.w	80047c4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800446a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	441a      	add	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	429a      	cmp	r2, r3
 8004476:	d907      	bls.n	8004488 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e1a4      	b.n	80047d2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2203      	movs	r2, #3
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2200      	movs	r2, #0
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	2b01      	cmp	r3, #1
 800449e:	d002      	beq.n	80044a6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	025b      	lsls	r3, r3, #9
 80044a4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	025b      	lsls	r3, r3, #9
 80044b0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80044b2:	2390      	movs	r3, #144	; 0x90
 80044b4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80044b6:	2302      	movs	r3, #2
 80044b8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80044be:	2301      	movs	r3, #1
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f107 0214 	add.w	r2, r7, #20
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f001 fc86 	bl	8005dde <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d90a      	bls.n	80044ee <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2202      	movs	r2, #2
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 fcea 	bl	8005ebe <SDMMC_CmdReadMultiBlock>
 80044ea:	6478      	str	r0, [r7, #68]	; 0x44
 80044ec:	e009      	b.n	8004502 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 fcbd 	bl	8005e7a <SDMMC_CmdReadSingleBlock>
 8004500:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004504:	2b00      	cmp	r3, #0
 8004506:	d012      	beq.n	800452e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a7a      	ldr	r2, [pc, #488]	; (80046f8 <HAL_SD_ReadBlocks+0x2d4>)
 800450e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004516:	431a      	orrs	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e151      	b.n	80047d2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004532:	e061      	b.n	80045f8 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d03c      	beq.n	80045bc <HAL_SD_ReadBlocks+0x198>
 8004542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d039      	beq.n	80045bc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004548:	2300      	movs	r3, #0
 800454a:	643b      	str	r3, [r7, #64]	; 0x40
 800454c:	e033      	b.n	80045b6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f001 fbbf 	bl	8005cd6 <SDIO_ReadFIFO>
 8004558:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	b2da      	uxtb	r2, r3
 800455e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004560:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004564:	3301      	adds	r3, #1
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456a:	3b01      	subs	r3, #1
 800456c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	0a1b      	lsrs	r3, r3, #8
 8004572:	b2da      	uxtb	r2, r3
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	3301      	adds	r3, #1
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800457e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004580:	3b01      	subs	r3, #1
 8004582:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	b2da      	uxtb	r2, r3
 800458a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800458e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004590:	3301      	adds	r3, #1
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004596:	3b01      	subs	r3, #1
 8004598:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	0e1b      	lsrs	r3, r3, #24
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80045a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a6:	3301      	adds	r3, #1
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80045aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ac:	3b01      	subs	r3, #1
 80045ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80045b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b2:	3301      	adds	r3, #1
 80045b4:	643b      	str	r3, [r7, #64]	; 0x40
 80045b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b8:	2b07      	cmp	r3, #7
 80045ba:	d9c8      	bls.n	800454e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80045bc:	f7fc ff78 	bl	80014b0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d902      	bls.n	80045d2 <HAL_SD_ReadBlocks+0x1ae>
 80045cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d112      	bne.n	80045f8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a48      	ldr	r2, [pc, #288]	; (80046f8 <HAL_SD_ReadBlocks+0x2d4>)
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e0ec      	b.n	80047d2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004602:	2b00      	cmp	r3, #0
 8004604:	d096      	beq.n	8004534 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d022      	beq.n	800465a <HAL_SD_ReadBlocks+0x236>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d91f      	bls.n	800465a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	2b03      	cmp	r3, #3
 8004620:	d01b      	beq.n	800465a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f001 fcb0 	bl	8005f8c <SDMMC_CmdStopTransfer>
 800462c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800462e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004630:	2b00      	cmp	r3, #0
 8004632:	d012      	beq.n	800465a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a2f      	ldr	r2, [pc, #188]	; (80046f8 <HAL_SD_ReadBlocks+0x2d4>)
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004642:	431a      	orrs	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e0bb      	b.n	80047d2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d012      	beq.n	800468e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a22      	ldr	r2, [pc, #136]	; (80046f8 <HAL_SD_ReadBlocks+0x2d4>)
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	f043 0208 	orr.w	r2, r3, #8
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0a1      	b.n	80047d2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d012      	beq.n	80046c2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <HAL_SD_ReadBlocks+0x2d4>)
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	f043 0202 	orr.w	r2, r3, #2
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e087      	b.n	80047d2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d064      	beq.n	800479a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <HAL_SD_ReadBlocks+0x2d4>)
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	f043 0220 	orr.w	r2, r3, #32
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e06d      	b.n	80047d2 <HAL_SD_ReadBlocks+0x3ae>
 80046f6:	bf00      	nop
 80046f8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f001 fae8 	bl	8005cd6 <SDIO_ReadFIFO>
 8004706:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	b2da      	uxtb	r2, r3
 800470c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004712:	3301      	adds	r3, #1
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004718:	3b01      	subs	r3, #1
 800471a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	0a1b      	lsrs	r3, r3, #8
 8004720:	b2da      	uxtb	r2, r3
 8004722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004724:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004728:	3301      	adds	r3, #1
 800472a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800472c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472e:	3b01      	subs	r3, #1
 8004730:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	b2da      	uxtb	r2, r3
 8004738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473e:	3301      	adds	r3, #1
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004744:	3b01      	subs	r3, #1
 8004746:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	0e1b      	lsrs	r3, r3, #24
 800474c:	b2da      	uxtb	r2, r3
 800474e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004750:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004754:	3301      	adds	r3, #1
 8004756:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475a:	3b01      	subs	r3, #1
 800475c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800475e:	f7fc fea7 	bl	80014b0 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800476a:	429a      	cmp	r2, r3
 800476c:	d902      	bls.n	8004774 <HAL_SD_ReadBlocks+0x350>
 800476e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004770:	2b00      	cmp	r3, #0
 8004772:	d112      	bne.n	800479a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a18      	ldr	r2, [pc, #96]	; (80047dc <HAL_SD_ReadBlocks+0x3b8>)
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e01b      	b.n	80047d2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_SD_ReadBlocks+0x38a>
 80047a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1a6      	bne.n	80046fc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e006      	b.n	80047d2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3748      	adds	r7, #72	; 0x48
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	004005ff 	.word	0x004005ff

080047e0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b092      	sub	sp, #72	; 0x48
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80047ee:	f7fc fe5f 	bl	80014b0 <HAL_GetTick>
 80047f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d107      	bne.n	8004812 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e165      	b.n	8004ade <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b01      	cmp	r3, #1
 800481c:	f040 8158 	bne.w	8004ad0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	441a      	add	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004830:	429a      	cmp	r2, r3
 8004832:	d907      	bls.n	8004844 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e14c      	b.n	8004ade <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2203      	movs	r2, #3
 8004848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2200      	movs	r2, #0
 8004852:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004858:	2b01      	cmp	r3, #1
 800485a:	d002      	beq.n	8004862 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	025b      	lsls	r3, r3, #9
 8004860:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004862:	f04f 33ff 	mov.w	r3, #4294967295
 8004866:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	025b      	lsls	r3, r3, #9
 800486c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800486e:	2390      	movs	r3, #144	; 0x90
 8004870:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004872:	2300      	movs	r3, #0
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004876:	2300      	movs	r3, #0
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800487a:	2301      	movs	r3, #1
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f107 0218 	add.w	r2, r7, #24
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f001 faa8 	bl	8005dde <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d90a      	bls.n	80048aa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 fb50 	bl	8005f46 <SDMMC_CmdWriteMultiBlock>
 80048a6:	6478      	str	r0, [r7, #68]	; 0x44
 80048a8:	e009      	b.n	80048be <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2210      	movs	r2, #16
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048b6:	4618      	mov	r0, r3
 80048b8:	f001 fb23 	bl	8005f02 <SDMMC_CmdWriteSingleBlock>
 80048bc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80048be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d012      	beq.n	80048ea <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a87      	ldr	r2, [pc, #540]	; (8004ae8 <HAL_SD_WriteBlocks+0x308>)
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d2:	431a      	orrs	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0f9      	b.n	8004ade <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80048ee:	e065      	b.n	80049bc <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d040      	beq.n	8004980 <HAL_SD_WriteBlocks+0x1a0>
 80048fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d03d      	beq.n	8004980 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004904:	2300      	movs	r3, #0
 8004906:	643b      	str	r3, [r7, #64]	; 0x40
 8004908:	e037      	b.n	800497a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004912:	3301      	adds	r3, #1
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004918:	3b01      	subs	r3, #1
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800491c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	021a      	lsls	r2, r3, #8
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492a:	3301      	adds	r3, #1
 800492c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800492e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004930:	3b01      	subs	r3, #1
 8004932:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	041a      	lsls	r2, r3, #16
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004942:	3301      	adds	r3, #1
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004948:	3b01      	subs	r3, #1
 800494a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800494c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	061a      	lsls	r2, r3, #24
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	3301      	adds	r3, #1
 800495c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800495e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004960:	3b01      	subs	r3, #1
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f107 0214 	add.w	r2, r7, #20
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f001 f9be 	bl	8005cf0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004976:	3301      	adds	r3, #1
 8004978:	643b      	str	r3, [r7, #64]	; 0x40
 800497a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800497c:	2b07      	cmp	r3, #7
 800497e:	d9c4      	bls.n	800490a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004980:	f7fc fd96 	bl	80014b0 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800498c:	429a      	cmp	r2, r3
 800498e:	d902      	bls.n	8004996 <HAL_SD_WriteBlocks+0x1b6>
 8004990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004992:	2b00      	cmp	r3, #0
 8004994:	d112      	bne.n	80049bc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a53      	ldr	r2, [pc, #332]	; (8004ae8 <HAL_SD_WriteBlocks+0x308>)
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a4:	431a      	orrs	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e090      	b.n	8004ade <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d092      	beq.n	80048f0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d022      	beq.n	8004a1e <HAL_SD_WriteBlocks+0x23e>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d91f      	bls.n	8004a1e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d01b      	beq.n	8004a1e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 face 	bl	8005f8c <SDMMC_CmdStopTransfer>
 80049f0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80049f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d012      	beq.n	8004a1e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a3a      	ldr	r2, [pc, #232]	; (8004ae8 <HAL_SD_WriteBlocks+0x308>)
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a06:	431a      	orrs	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e05f      	b.n	8004ade <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d012      	beq.n	8004a52 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2d      	ldr	r2, [pc, #180]	; (8004ae8 <HAL_SD_WriteBlocks+0x308>)
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	f043 0208 	orr.w	r2, r3, #8
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e045      	b.n	8004ade <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d012      	beq.n	8004a86 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a20      	ldr	r2, [pc, #128]	; (8004ae8 <HAL_SD_WriteBlocks+0x308>)
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	f043 0202 	orr.w	r2, r3, #2
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e02b      	b.n	8004ade <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d012      	beq.n	8004aba <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <HAL_SD_WriteBlocks+0x308>)
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	f043 0210 	orr.w	r2, r3, #16
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e011      	b.n	8004ade <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e006      	b.n	8004ade <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
  }
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3748      	adds	r7, #72	; 0x48
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	004005ff 	.word	0x004005ff

08004aec <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_SD_IRQHandler+0x2e>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fd4c 	bl	80055b0 <SD_Read_IT>
 8004b18:	e155      	b.n	8004dc6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 808f 	beq.w	8004c48 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8004b42:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004b46:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0201 	bic.w	r2, r2, #1
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d039      	beq.n	8004bd6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d104      	bne.n	8004b76 <HAL_SD_IRQHandler+0x8a>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d011      	beq.n	8004b9a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 fa06 	bl	8005f8c <SDMMC_CmdStopTransfer>
 8004b80:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f91f 	bl	8004dd8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <HAL_SD_IRQHandler+0xda>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f001 fe2c 	bl	8006824 <HAL_SD_RxCpltCallback>
 8004bcc:	e0fb      	b.n	8004dc6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f001 fe1e 	bl	8006810 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bd4:	e0f7      	b.n	8004dc6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80f2 	beq.w	8004dc6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d011      	beq.n	8004c10 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 f9cb 	bl	8005f8c <SDMMC_CmdStopTransfer>
 8004bf6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8e4 	bl	8004dd8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 80d5 	bne.w	8004dc6 <HAL_SD_IRQHandler+0x2da>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 80cf 	bne.w	8004dc6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0208 	bic.w	r2, r2, #8
 8004c36:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 fde5 	bl	8006810 <HAL_SD_TxCpltCallback>
}
 8004c46:	e0be      	b.n	8004dc6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d008      	beq.n	8004c68 <HAL_SD_IRQHandler+0x17c>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fcf6 	bl	8005652 <SD_Write_IT>
 8004c66:	e0ae      	b.n	8004dc6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80a7 	beq.w	8004dc6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	f043 0202 	orr.w	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	f043 0208 	orr.w	r2, r3, #8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	f043 0210 	orr.w	r2, r3, #16
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004cf8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f001 f944 	bl	8005f8c <SDMMC_CmdStopTransfer>
 8004d04:	4602      	mov	r2, r0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f855 	bl	8004dd8 <HAL_SD_ErrorCallback>
}
 8004d2e:	e04a      	b.n	8004dc6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d045      	beq.n	8004dc6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <HAL_SD_IRQHandler+0x262>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d011      	beq.n	8004d72 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <HAL_SD_IRQHandler+0x2e4>)
 8004d54:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fd fac8 	bl	80022f0 <HAL_DMA_Abort_IT>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d02f      	beq.n	8004dc6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fa2e 	bl	80051cc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004d70:	e029      	b.n	8004dc6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <HAL_SD_IRQHandler+0x29a>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d011      	beq.n	8004daa <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	4a12      	ldr	r2, [pc, #72]	; (8004dd4 <HAL_SD_IRQHandler+0x2e8>)
 8004d8c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fd faac 	bl	80022f0 <HAL_DMA_Abort_IT>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d013      	beq.n	8004dc6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fa49 	bl	800523a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004da8:	e00d      	b.n	8004dc6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 fd1c 	bl	80067fc <HAL_SD_AbortCallback>
}
 8004dc4:	e7ff      	b.n	8004dc6 <HAL_SD_IRQHandler+0x2da>
 8004dc6:	bf00      	nop
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	080051cd 	.word	0x080051cd
 8004dd4:	0800523b 	.word	0x0800523b

08004dd8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfa:	0f9b      	lsrs	r3, r3, #30
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e06:	0e9b      	lsrs	r3, r3, #26
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e18:	0e1b      	lsrs	r3, r3, #24
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e2a:	0c1b      	lsrs	r3, r3, #16
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e4c:	0d1b      	lsrs	r3, r3, #20
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e58:	0c1b      	lsrs	r3, r3, #16
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e6a:	0bdb      	lsrs	r3, r3, #15
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e7c:	0b9b      	lsrs	r3, r3, #14
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e8e:	0b5b      	lsrs	r3, r3, #13
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea0:	0b1b      	lsrs	r3, r3, #12
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d163      	bne.n	8004f84 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec0:	009a      	lsls	r2, r3, #2
 8004ec2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004ecc:	0f92      	lsrs	r2, r2, #30
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed8:	0edb      	lsrs	r3, r3, #27
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eea:	0e1b      	lsrs	r3, r3, #24
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004efc:	0d5b      	lsrs	r3, r3, #21
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0e:	0c9b      	lsrs	r3, r3, #18
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f20:	0bdb      	lsrs	r3, r3, #15
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	7e1b      	ldrb	r3, [r3, #24]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	3302      	adds	r3, #2
 8004f44:	2201      	movs	r2, #1
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004f4e:	fb03 f202 	mul.w	r2, r3, r2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	7a1b      	ldrb	r3, [r3, #8]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	2201      	movs	r2, #1
 8004f62:	409a      	lsls	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004f70:	0a52      	lsrs	r2, r2, #9
 8004f72:	fb03 f202 	mul.w	r2, r3, r2
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f80:	661a      	str	r2, [r3, #96]	; 0x60
 8004f82:	e031      	b.n	8004fe8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d11d      	bne.n	8004fc8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9a:	0c1b      	lsrs	r3, r3, #16
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	029a      	lsls	r2, r3, #10
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fbc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	661a      	str	r2, [r3, #96]	; 0x60
 8004fc6:	e00f      	b.n	8004fe8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a58      	ldr	r2, [pc, #352]	; (8005130 <HAL_SD_GetCardCSD+0x344>)
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e09d      	b.n	8005124 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fec:	0b9b      	lsrs	r3, r3, #14
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ffe:	09db      	lsrs	r3, r3, #7
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005006:	b2da      	uxtb	r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005016:	b2da      	uxtb	r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	0fdb      	lsrs	r3, r3, #31
 8005022:	b2da      	uxtb	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	0f5b      	lsrs	r3, r3, #29
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	b2da      	uxtb	r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	0e9b      	lsrs	r3, r3, #26
 8005040:	b2db      	uxtb	r3, r3
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	b2da      	uxtb	r2, r3
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005050:	0d9b      	lsrs	r3, r3, #22
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	b2da      	uxtb	r2, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	0d5b      	lsrs	r3, r3, #21
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	b2da      	uxtb	r2, r3
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507e:	0c1b      	lsrs	r3, r3, #16
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	b2da      	uxtb	r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005092:	0bdb      	lsrs	r3, r3, #15
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	b2da      	uxtb	r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a6:	0b9b      	lsrs	r3, r3, #14
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	0b5b      	lsrs	r3, r3, #13
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ce:	0b1b      	lsrs	r3, r3, #12
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e2:	0a9b      	lsrs	r3, r3, #10
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	0a1b      	lsrs	r3, r3, #8
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	085b      	lsrs	r3, r3, #1
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005112:	b2da      	uxtb	r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	004005ff 	.word	0x004005ff

08005134 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005198:	f107 030c 	add.w	r3, r7, #12
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f9de 	bl	8005560 <SD_SendStatus>
 80051a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	0a5b      	lsrs	r3, r3, #9
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80051c2:	693b      	ldr	r3, [r7, #16]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f240 523a 	movw	r2, #1338	; 0x53a
 80051e2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff ffd1 	bl	800518c <HAL_SD_GetCardState>
 80051ea:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b06      	cmp	r3, #6
 80051fe:	d002      	beq.n	8005206 <SD_DMATxAbort+0x3a>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b05      	cmp	r3, #5
 8005204:	d10a      	bne.n	800521c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f000 febe 	bl	8005f8c <SDMMC_CmdStopTransfer>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	431a      	orrs	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d103      	bne.n	800522c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f001 fae9 	bl	80067fc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800522a:	e002      	b.n	8005232 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff fdd3 	bl	8004dd8 <HAL_SD_ErrorCallback>
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005250:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f7ff ff9a 	bl	800518c <HAL_SD_GetCardState>
 8005258:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b06      	cmp	r3, #6
 800526c:	d002      	beq.n	8005274 <SD_DMARxAbort+0x3a>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b05      	cmp	r3, #5
 8005272:	d10a      	bne.n	800528a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fe87 	bl	8005f8c <SDMMC_CmdStopTransfer>
 800527e:	4602      	mov	r2, r0
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	431a      	orrs	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	2b00      	cmp	r3, #0
 8005290:	d103      	bne.n	800529a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f001 fab2 	bl	80067fc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005298:	e002      	b.n	80052a0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f7ff fd9c 	bl	8004dd8 <HAL_SD_ErrorCallback>
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80052a8:	b5b0      	push	{r4, r5, r7, lr}
 80052aa:	b094      	sub	sp, #80	; 0x50
 80052ac:	af04      	add	r7, sp, #16
 80052ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80052b0:	2301      	movs	r3, #1
 80052b2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fd38 	bl	8005d2e <SDIO_GetPowerState>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80052c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80052c8:	e0b8      	b.n	800543c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d02f      	beq.n	8005332 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 ff1f 	bl	800611a <SDMMC_CmdSendCID>
 80052dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80052de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <SD_InitCard+0x40>
    {
      return errorstate;
 80052e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e6:	e0a9      	b.n	800543c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fd62 	bl	8005db8 <SDIO_GetResponse>
 80052f4:	4602      	mov	r2, r0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2104      	movs	r1, #4
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fd59 	bl	8005db8 <SDIO_GetResponse>
 8005306:	4602      	mov	r2, r0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2108      	movs	r1, #8
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fd50 	bl	8005db8 <SDIO_GetResponse>
 8005318:	4602      	mov	r2, r0
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	210c      	movs	r1, #12
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fd47 	bl	8005db8 <SDIO_GetResponse>
 800532a:	4602      	mov	r2, r0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	2b03      	cmp	r3, #3
 8005338:	d00d      	beq.n	8005356 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f107 020e 	add.w	r2, r7, #14
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f000 ff25 	bl	8006194 <SDMMC_CmdSetRelAdd>
 800534a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800534c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <SD_InitCard+0xae>
    {
      return errorstate;
 8005352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005354:	e072      	b.n	800543c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	2b03      	cmp	r3, #3
 800535c:	d036      	beq.n	80053cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800535e:	89fb      	ldrh	r3, [r7, #14]
 8005360:	461a      	mov	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536e:	041b      	lsls	r3, r3, #16
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f000 feef 	bl	8006156 <SDMMC_CmdSendCSD>
 8005378:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800537a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005382:	e05b      	b.n	800543c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fd14 	bl	8005db8 <SDIO_GetResponse>
 8005390:	4602      	mov	r2, r0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2104      	movs	r1, #4
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fd0b 	bl	8005db8 <SDIO_GetResponse>
 80053a2:	4602      	mov	r2, r0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2108      	movs	r1, #8
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fd02 	bl	8005db8 <SDIO_GetResponse>
 80053b4:	4602      	mov	r2, r0
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	210c      	movs	r1, #12
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fcf9 	bl	8005db8 <SDIO_GetResponse>
 80053c6:	4602      	mov	r2, r0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2104      	movs	r1, #4
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fcf0 	bl	8005db8 <SDIO_GetResponse>
 80053d8:	4603      	mov	r3, r0
 80053da:	0d1a      	lsrs	r2, r3, #20
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80053e0:	f107 0310 	add.w	r3, r7, #16
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff fd00 	bl	8004dec <HAL_SD_GetCardCSD>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80053f6:	e021      	b.n	800543c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6819      	ldr	r1, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	041b      	lsls	r3, r3, #16
 8005402:	2200      	movs	r2, #0
 8005404:	461c      	mov	r4, r3
 8005406:	4615      	mov	r5, r2
 8005408:	4622      	mov	r2, r4
 800540a:	462b      	mov	r3, r5
 800540c:	4608      	mov	r0, r1
 800540e:	f000 fddf 	bl	8005fd0 <SDMMC_CmdSelDesel>
 8005412:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <SD_InitCard+0x176>
  {
    return errorstate;
 800541a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541c:	e00e      	b.n	800543c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681d      	ldr	r5, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	466c      	mov	r4, sp
 8005426:	f103 0210 	add.w	r2, r3, #16
 800542a:	ca07      	ldmia	r2, {r0, r1, r2}
 800542c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005430:	3304      	adds	r3, #4
 8005432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005434:	4628      	mov	r0, r5
 8005436:	f000 fc23 	bl	8005c80 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3740      	adds	r7, #64	; 0x40
 8005440:	46bd      	mov	sp, r7
 8005442:	bdb0      	pop	{r4, r5, r7, pc}

08005444 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fdda 	bl	8006016 <SDMMC_CmdGoIdleState>
 8005462:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <SD_PowerON+0x2a>
  {
    return errorstate;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	e072      	b.n	8005554 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fded 	bl	8006052 <SDMMC_CmdOperCond>
 8005478:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00d      	beq.n	800549c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fdc3 	bl	8006016 <SDMMC_CmdGoIdleState>
 8005490:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d004      	beq.n	80054a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	e05b      	b.n	8005554 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d137      	bne.n	800551a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fded 	bl	8006090 <SDMMC_CmdAppCommand>
 80054b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d02d      	beq.n	800551a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054c2:	e047      	b.n	8005554 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fde0 	bl	8006090 <SDMMC_CmdAppCommand>
 80054d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <SD_PowerON+0x98>
    {
      return errorstate;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	e03b      	b.n	8005554 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	491e      	ldr	r1, [pc, #120]	; (800555c <SD_PowerON+0x118>)
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fdf6 	bl	80060d4 <SDMMC_CmdAppOperCommand>
 80054e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054f4:	e02e      	b.n	8005554 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fc5b 	bl	8005db8 <SDIO_GetResponse>
 8005502:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	0fdb      	lsrs	r3, r3, #31
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <SD_PowerON+0xcc>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <SD_PowerON+0xce>
 8005510:	2300      	movs	r3, #0
 8005512:	613b      	str	r3, [r7, #16]

    count++;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	3301      	adds	r3, #1
 8005518:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005520:	4293      	cmp	r3, r2
 8005522:	d802      	bhi.n	800552a <SD_PowerON+0xe6>
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0cc      	beq.n	80054c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005530:	4293      	cmp	r3, r2
 8005532:	d902      	bls.n	800553a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005538:	e00c      	b.n	8005554 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
 800554a:	e002      	b.n	8005552 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	c1100000 	.word	0xc1100000

08005560 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d102      	bne.n	8005576 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005570:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005574:	e018      	b.n	80055a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f000 fe27 	bl	80061d6 <SDMMC_CmdSendStatus>
 8005588:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	e009      	b.n	80055a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2100      	movs	r1, #0
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fc0c 	bl	8005db8 <SDIO_GetResponse>
 80055a0:	4602      	mov	r2, r0
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d03f      	beq.n	800564a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e033      	b.n	8005638 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fb7e 	bl	8005cd6 <SDIO_ReadFIFO>
 80055da:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3301      	adds	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	0a1b      	lsrs	r3, r3, #8
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3301      	adds	r3, #1
 80055fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3b01      	subs	r3, #1
 8005604:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	b2da      	uxtb	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3b01      	subs	r3, #1
 800561a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	0e1b      	lsrs	r3, r3, #24
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3301      	adds	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	3b01      	subs	r3, #1
 8005630:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	3301      	adds	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b07      	cmp	r3, #7
 800563c:	d9c8      	bls.n	80055d0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800564a:	bf00      	nop
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b086      	sub	sp, #24
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d043      	beq.n	80056f4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	e037      	b.n	80056e2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	3b01      	subs	r3, #1
 8005682:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	021a      	lsls	r2, r3, #8
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	4313      	orrs	r3, r2
 800568e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3301      	adds	r3, #1
 8005694:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	3b01      	subs	r3, #1
 800569a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	041a      	lsls	r2, r3, #16
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3301      	adds	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	061a      	lsls	r2, r3, #24
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3301      	adds	r3, #1
 80056c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f107 0208 	add.w	r2, r7, #8
 80056d4:	4611      	mov	r1, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fb0a 	bl	8005cf0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	3301      	adds	r3, #1
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b07      	cmp	r3, #7
 80056e6:	d9c4      	bls.n	8005672 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80056f4:	bf00      	nop
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e03f      	b.n	800578e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fb fd14 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2224      	movs	r2, #36	; 0x24
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800573e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f829 	bl	8005798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800579c:	b0c0      	sub	sp, #256	; 0x100
 800579e:	af00      	add	r7, sp, #0
 80057a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b4:	68d9      	ldr	r1, [r3, #12]
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	ea40 0301 	orr.w	r3, r0, r1
 80057c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	431a      	orrs	r2, r3
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057f0:	f021 010c 	bic.w	r1, r1, #12
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057fe:	430b      	orrs	r3, r1
 8005800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005812:	6999      	ldr	r1, [r3, #24]
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	ea40 0301 	orr.w	r3, r0, r1
 800581e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b8f      	ldr	r3, [pc, #572]	; (8005a64 <UART_SetConfig+0x2cc>)
 8005828:	429a      	cmp	r2, r3
 800582a:	d005      	beq.n	8005838 <UART_SetConfig+0xa0>
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b8d      	ldr	r3, [pc, #564]	; (8005a68 <UART_SetConfig+0x2d0>)
 8005834:	429a      	cmp	r2, r3
 8005836:	d104      	bne.n	8005842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005838:	f7fd fb02 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 800583c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005840:	e003      	b.n	800584a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005842:	f7fd fae9 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8005846:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005854:	f040 810c 	bne.w	8005a70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800585c:	2200      	movs	r2, #0
 800585e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005862:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800586a:	4622      	mov	r2, r4
 800586c:	462b      	mov	r3, r5
 800586e:	1891      	adds	r1, r2, r2
 8005870:	65b9      	str	r1, [r7, #88]	; 0x58
 8005872:	415b      	adcs	r3, r3
 8005874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800587a:	4621      	mov	r1, r4
 800587c:	eb12 0801 	adds.w	r8, r2, r1
 8005880:	4629      	mov	r1, r5
 8005882:	eb43 0901 	adc.w	r9, r3, r1
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800589a:	4690      	mov	r8, r2
 800589c:	4699      	mov	r9, r3
 800589e:	4623      	mov	r3, r4
 80058a0:	eb18 0303 	adds.w	r3, r8, r3
 80058a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058a8:	462b      	mov	r3, r5
 80058aa:	eb49 0303 	adc.w	r3, r9, r3
 80058ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058c6:	460b      	mov	r3, r1
 80058c8:	18db      	adds	r3, r3, r3
 80058ca:	653b      	str	r3, [r7, #80]	; 0x50
 80058cc:	4613      	mov	r3, r2
 80058ce:	eb42 0303 	adc.w	r3, r2, r3
 80058d2:	657b      	str	r3, [r7, #84]	; 0x54
 80058d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058dc:	f7fa fce8 	bl	80002b0 <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4b61      	ldr	r3, [pc, #388]	; (8005a6c <UART_SetConfig+0x2d4>)
 80058e6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	011c      	lsls	r4, r3, #4
 80058ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80058fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005900:	4642      	mov	r2, r8
 8005902:	464b      	mov	r3, r9
 8005904:	1891      	adds	r1, r2, r2
 8005906:	64b9      	str	r1, [r7, #72]	; 0x48
 8005908:	415b      	adcs	r3, r3
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005910:	4641      	mov	r1, r8
 8005912:	eb12 0a01 	adds.w	sl, r2, r1
 8005916:	4649      	mov	r1, r9
 8005918:	eb43 0b01 	adc.w	fp, r3, r1
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800592c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005930:	4692      	mov	sl, r2
 8005932:	469b      	mov	fp, r3
 8005934:	4643      	mov	r3, r8
 8005936:	eb1a 0303 	adds.w	r3, sl, r3
 800593a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800593e:	464b      	mov	r3, r9
 8005940:	eb4b 0303 	adc.w	r3, fp, r3
 8005944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005954:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800595c:	460b      	mov	r3, r1
 800595e:	18db      	adds	r3, r3, r3
 8005960:	643b      	str	r3, [r7, #64]	; 0x40
 8005962:	4613      	mov	r3, r2
 8005964:	eb42 0303 	adc.w	r3, r2, r3
 8005968:	647b      	str	r3, [r7, #68]	; 0x44
 800596a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800596e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005972:	f7fa fc9d 	bl	80002b0 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4611      	mov	r1, r2
 800597c:	4b3b      	ldr	r3, [pc, #236]	; (8005a6c <UART_SetConfig+0x2d4>)
 800597e:	fba3 2301 	umull	r2, r3, r3, r1
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2264      	movs	r2, #100	; 0x64
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	1acb      	subs	r3, r1, r3
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005992:	4b36      	ldr	r3, [pc, #216]	; (8005a6c <UART_SetConfig+0x2d4>)
 8005994:	fba3 2302 	umull	r2, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059a0:	441c      	add	r4, r3
 80059a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	1891      	adds	r1, r2, r2
 80059ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80059bc:	415b      	adcs	r3, r3
 80059be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059c4:	4641      	mov	r1, r8
 80059c6:	1851      	adds	r1, r2, r1
 80059c8:	6339      	str	r1, [r7, #48]	; 0x30
 80059ca:	4649      	mov	r1, r9
 80059cc:	414b      	adcs	r3, r1
 80059ce:	637b      	str	r3, [r7, #52]	; 0x34
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059dc:	4659      	mov	r1, fp
 80059de:	00cb      	lsls	r3, r1, #3
 80059e0:	4651      	mov	r1, sl
 80059e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e6:	4651      	mov	r1, sl
 80059e8:	00ca      	lsls	r2, r1, #3
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	4642      	mov	r2, r8
 80059f2:	189b      	adds	r3, r3, r2
 80059f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059f8:	464b      	mov	r3, r9
 80059fa:	460a      	mov	r2, r1
 80059fc:	eb42 0303 	adc.w	r3, r2, r3
 8005a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a18:	460b      	mov	r3, r1
 8005a1a:	18db      	adds	r3, r3, r3
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1e:	4613      	mov	r3, r2
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a2e:	f7fa fc3f 	bl	80002b0 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <UART_SetConfig+0x2d4>)
 8005a38:	fba3 1302 	umull	r1, r3, r3, r2
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	2164      	movs	r1, #100	; 0x64
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	3332      	adds	r3, #50	; 0x32
 8005a4a:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <UART_SetConfig+0x2d4>)
 8005a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	f003 0207 	and.w	r2, r3, #7
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4422      	add	r2, r4
 8005a5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a60:	e105      	b.n	8005c6e <UART_SetConfig+0x4d6>
 8005a62:	bf00      	nop
 8005a64:	40011000 	.word	0x40011000
 8005a68:	40011400 	.word	0x40011400
 8005a6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a82:	4642      	mov	r2, r8
 8005a84:	464b      	mov	r3, r9
 8005a86:	1891      	adds	r1, r2, r2
 8005a88:	6239      	str	r1, [r7, #32]
 8005a8a:	415b      	adcs	r3, r3
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a92:	4641      	mov	r1, r8
 8005a94:	1854      	adds	r4, r2, r1
 8005a96:	4649      	mov	r1, r9
 8005a98:	eb43 0501 	adc.w	r5, r3, r1
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	00eb      	lsls	r3, r5, #3
 8005aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aaa:	00e2      	lsls	r2, r4, #3
 8005aac:	4614      	mov	r4, r2
 8005aae:	461d      	mov	r5, r3
 8005ab0:	4643      	mov	r3, r8
 8005ab2:	18e3      	adds	r3, r4, r3
 8005ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ab8:	464b      	mov	r3, r9
 8005aba:	eb45 0303 	adc.w	r3, r5, r3
 8005abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ade:	4629      	mov	r1, r5
 8005ae0:	008b      	lsls	r3, r1, #2
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae8:	4621      	mov	r1, r4
 8005aea:	008a      	lsls	r2, r1, #2
 8005aec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005af0:	f7fa fbde 	bl	80002b0 <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4b60      	ldr	r3, [pc, #384]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005afa:	fba3 2302 	umull	r2, r3, r3, r2
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	011c      	lsls	r4, r3, #4
 8005b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	1891      	adds	r1, r2, r2
 8005b1a:	61b9      	str	r1, [r7, #24]
 8005b1c:	415b      	adcs	r3, r3
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b24:	4641      	mov	r1, r8
 8005b26:	1851      	adds	r1, r2, r1
 8005b28:	6139      	str	r1, [r7, #16]
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	414b      	adcs	r3, r1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	00cb      	lsls	r3, r1, #3
 8005b40:	4651      	mov	r1, sl
 8005b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b46:	4651      	mov	r1, sl
 8005b48:	00ca      	lsls	r2, r1, #3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4642      	mov	r2, r8
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b58:	464b      	mov	r3, r9
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	eb42 0303 	adc.w	r3, r2, r3
 8005b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	008b      	lsls	r3, r1, #2
 8005b80:	4641      	mov	r1, r8
 8005b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b86:	4641      	mov	r1, r8
 8005b88:	008a      	lsls	r2, r1, #2
 8005b8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b8e:	f7fa fb8f 	bl	80002b0 <__aeabi_uldivmod>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4b39      	ldr	r3, [pc, #228]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005b98:	fba3 1302 	umull	r1, r3, r3, r2
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	2164      	movs	r1, #100	; 0x64
 8005ba0:	fb01 f303 	mul.w	r3, r1, r3
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	3332      	adds	r3, #50	; 0x32
 8005baa:	4a34      	ldr	r2, [pc, #208]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb6:	441c      	add	r4, r3
 8005bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	673b      	str	r3, [r7, #112]	; 0x70
 8005bc0:	677a      	str	r2, [r7, #116]	; 0x74
 8005bc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	464b      	mov	r3, r9
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	415b      	adcs	r3, r3
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	1851      	adds	r1, r2, r1
 8005bda:	6039      	str	r1, [r7, #0]
 8005bdc:	4649      	mov	r1, r9
 8005bde:	414b      	adcs	r3, r1
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bee:	4659      	mov	r1, fp
 8005bf0:	00cb      	lsls	r3, r1, #3
 8005bf2:	4651      	mov	r1, sl
 8005bf4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bf8:	4651      	mov	r1, sl
 8005bfa:	00ca      	lsls	r2, r1, #3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4603      	mov	r3, r0
 8005c02:	4642      	mov	r2, r8
 8005c04:	189b      	adds	r3, r3, r2
 8005c06:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c08:	464b      	mov	r3, r9
 8005c0a:	460a      	mov	r2, r1
 8005c0c:	eb42 0303 	adc.w	r3, r2, r3
 8005c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c1c:	667a      	str	r2, [r7, #100]	; 0x64
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	008b      	lsls	r3, r1, #2
 8005c2e:	4641      	mov	r1, r8
 8005c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c34:	4641      	mov	r1, r8
 8005c36:	008a      	lsls	r2, r1, #2
 8005c38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c3c:	f7fa fb38 	bl	80002b0 <__aeabi_uldivmod>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005c46:	fba3 1302 	umull	r1, r3, r3, r2
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	2164      	movs	r1, #100	; 0x64
 8005c4e:	fb01 f303 	mul.w	r3, r1, r3
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	3332      	adds	r3, #50	; 0x32
 8005c58:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4422      	add	r2, r4
 8005c6c:	609a      	str	r2, [r3, #8]
}
 8005c6e:	bf00      	nop
 8005c70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c74:	46bd      	mov	sp, r7
 8005c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7a:	bf00      	nop
 8005c7c:	51eb851f 	.word	0x51eb851f

08005c80 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005c80:	b084      	sub	sp, #16
 8005c82:	b480      	push	{r7}
 8005c84:	b085      	sub	sp, #20
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	f107 001c 	add.w	r0, r7, #28
 8005c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005c96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005c98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005c9a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005c9e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005ca2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005ca6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005caa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	b004      	add	sp, #16
 8005cd4:	4770      	bx	lr

08005cd6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2203      	movs	r2, #3
 8005d1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b085      	sub	sp, #20
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005d68:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005d6e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005d74:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005d84:	f023 030f 	bic.w	r3, r3, #15
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	b2db      	uxtb	r3, r3
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3314      	adds	r3, #20
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	4413      	add	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
}  
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e04:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005e0a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005e10:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0

}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b088      	sub	sp, #32
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005e44:	2310      	movs	r3, #16
 8005e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e48:	2340      	movs	r3, #64	; 0x40
 8005e4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e56:	f107 0308 	add.w	r3, r7, #8
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff ff74 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e66:	2110      	movs	r1, #16
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f9d7 	bl	800621c <SDMMC_GetCmdResp1>
 8005e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e70:	69fb      	ldr	r3, [r7, #28]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b088      	sub	sp, #32
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005e88:	2311      	movs	r3, #17
 8005e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e8c:	2340      	movs	r3, #64	; 0x40
 8005e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e9a:	f107 0308 	add.w	r3, r7, #8
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff52 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eaa:	2111      	movs	r1, #17
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f9b5 	bl	800621c <SDMMC_GetCmdResp1>
 8005eb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b088      	sub	sp, #32
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005ecc:	2312      	movs	r3, #18
 8005ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ed0:	2340      	movs	r3, #64	; 0x40
 8005ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005edc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ede:	f107 0308 	add.w	r3, r7, #8
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff30 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eee:	2112      	movs	r1, #18
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f993 	bl	800621c <SDMMC_GetCmdResp1>
 8005ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3720      	adds	r7, #32
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b088      	sub	sp, #32
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005f10:	2318      	movs	r3, #24
 8005f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f14:	2340      	movs	r3, #64	; 0x40
 8005f16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f22:	f107 0308 	add.w	r3, r7, #8
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff0e 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f32:	2118      	movs	r1, #24
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f971 	bl	800621c <SDMMC_GetCmdResp1>
 8005f3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b088      	sub	sp, #32
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005f54:	2319      	movs	r3, #25
 8005f56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f58:	2340      	movs	r3, #64	; 0x40
 8005f5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f66:	f107 0308 	add.w	r3, r7, #8
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff feec 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f76:	2119      	movs	r1, #25
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f94f 	bl	800621c <SDMMC_GetCmdResp1>
 8005f7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f80:	69fb      	ldr	r3, [r7, #28]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3720      	adds	r7, #32
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005f98:	230c      	movs	r3, #12
 8005f9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f9c:	2340      	movs	r3, #64	; 0x40
 8005f9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005faa:	f107 0308 	add.w	r3, r7, #8
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff feca 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005fb6:	4a05      	ldr	r2, [pc, #20]	; (8005fcc <SDMMC_CmdStopTransfer+0x40>)
 8005fb8:	210c      	movs	r1, #12
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f92e 	bl	800621c <SDMMC_GetCmdResp1>
 8005fc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	05f5e100 	.word	0x05f5e100

08005fd0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08a      	sub	sp, #40	; 0x28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005fe0:	2307      	movs	r3, #7
 8005fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fe4:	2340      	movs	r3, #64	; 0x40
 8005fe6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ff2:	f107 0310 	add.w	r3, r7, #16
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f7ff fea6 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006002:	2107      	movs	r1, #7
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f909 	bl	800621c <SDMMC_GetCmdResp1>
 800600a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800600e:	4618      	mov	r0, r3
 8006010:	3728      	adds	r7, #40	; 0x28
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b088      	sub	sp, #32
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006026:	2300      	movs	r3, #0
 8006028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800602e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006032:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006034:	f107 0308 	add.w	r3, r7, #8
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff fe85 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fb23 	bl	800668c <SDMMC_GetCmdError>
 8006046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006048:	69fb      	ldr	r3, [r7, #28]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b088      	sub	sp, #32
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800605a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800605e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006060:	2308      	movs	r3, #8
 8006062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006064:	2340      	movs	r3, #64	; 0x40
 8006066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800606c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006070:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006072:	f107 0308 	add.w	r3, r7, #8
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff fe66 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fab6 	bl	80065f0 <SDMMC_GetCmdResp7>
 8006084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006086:	69fb      	ldr	r3, [r7, #28]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800609e:	2337      	movs	r3, #55	; 0x37
 80060a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060a2:	2340      	movs	r3, #64	; 0x40
 80060a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060b0:	f107 0308 	add.w	r3, r7, #8
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fe47 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80060bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c0:	2137      	movs	r1, #55	; 0x37
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f8aa 	bl	800621c <SDMMC_GetCmdResp1>
 80060c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ca:	69fb      	ldr	r3, [r7, #28]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80060ea:	2329      	movs	r3, #41	; 0x29
 80060ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060ee:	2340      	movs	r3, #64	; 0x40
 80060f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060fc:	f107 0308 	add.w	r3, r7, #8
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fe21 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f9bd 	bl	8006488 <SDMMC_GetCmdResp3>
 800610e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006110:	69fb      	ldr	r3, [r7, #28]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3720      	adds	r7, #32
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b088      	sub	sp, #32
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006126:	2302      	movs	r3, #2
 8006128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800612a:	23c0      	movs	r3, #192	; 0xc0
 800612c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006136:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006138:	f107 0308 	add.w	r3, r7, #8
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff fe03 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f957 	bl	80063f8 <SDMMC_GetCmdResp2>
 800614a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800614c:	69fb      	ldr	r3, [r7, #28]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3720      	adds	r7, #32
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b088      	sub	sp, #32
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006164:	2309      	movs	r3, #9
 8006166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006168:	23c0      	movs	r3, #192	; 0xc0
 800616a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006176:	f107 0308 	add.w	r3, r7, #8
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7ff fde4 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f938 	bl	80063f8 <SDMMC_GetCmdResp2>
 8006188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800618a:	69fb      	ldr	r3, [r7, #28]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3720      	adds	r7, #32
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80061a2:	2303      	movs	r3, #3
 80061a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061a6:	2340      	movs	r3, #64	; 0x40
 80061a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061b4:	f107 0308 	add.w	r3, r7, #8
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff fdc5 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	2103      	movs	r1, #3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f99d 	bl	8006504 <SDMMC_GetCmdResp6>
 80061ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061cc:	69fb      	ldr	r3, [r7, #28]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3720      	adds	r7, #32
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b088      	sub	sp, #32
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80061e4:	230d      	movs	r3, #13
 80061e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061e8:	2340      	movs	r3, #64	; 0x40
 80061ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061f6:	f107 0308 	add.w	r3, r7, #8
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff fda4 	bl	8005d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006202:	f241 3288 	movw	r2, #5000	; 0x1388
 8006206:	210d      	movs	r1, #13
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f807 	bl	800621c <SDMMC_GetCmdResp1>
 800620e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006210:	69fb      	ldr	r3, [r7, #28]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3720      	adds	r7, #32
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	460b      	mov	r3, r1
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800622a:	4b70      	ldr	r3, [pc, #448]	; (80063ec <SDMMC_GetCmdResp1+0x1d0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a70      	ldr	r2, [pc, #448]	; (80063f0 <SDMMC_GetCmdResp1+0x1d4>)
 8006230:	fba2 2303 	umull	r2, r3, r2, r3
 8006234:	0a5a      	lsrs	r2, r3, #9
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	fb02 f303 	mul.w	r3, r2, r3
 800623c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	1e5a      	subs	r2, r3, #1
 8006242:	61fa      	str	r2, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d102      	bne.n	800624e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800624c:	e0c9      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006252:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0ef      	beq.n	800623e <SDMMC_GetCmdResp1+0x22>
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1ea      	bne.n	800623e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2204      	movs	r2, #4
 8006278:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800627a:	2304      	movs	r3, #4
 800627c:	e0b1      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d004      	beq.n	8006294 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006290:	2301      	movs	r3, #1
 8006292:	e0a6      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	22c5      	movs	r2, #197	; 0xc5
 8006298:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f7ff fd7f 	bl	8005d9e <SDIO_GetCommandResponse>
 80062a0:	4603      	mov	r3, r0
 80062a2:	461a      	mov	r2, r3
 80062a4:	7afb      	ldrb	r3, [r7, #11]
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d001      	beq.n	80062ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e099      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80062ae:	2100      	movs	r1, #0
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f7ff fd81 	bl	8005db8 <SDIO_GetResponse>
 80062b6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4b4e      	ldr	r3, [pc, #312]	; (80063f4 <SDMMC_GetCmdResp1+0x1d8>)
 80062bc:	4013      	ands	r3, r2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e08d      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	da02      	bge.n	80062d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80062cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062d0:	e087      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80062dc:	2340      	movs	r3, #64	; 0x40
 80062de:	e080      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80062ea:	2380      	movs	r3, #128	; 0x80
 80062ec:	e079      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80062f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062fc:	e071      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800630c:	e069      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800631c:	e061      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006328:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800632c:	e059      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800633c:	e051      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800634c:	e049      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800635c:	e041      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636c:	e039      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800637c:	e031      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006388:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800638c:	e029      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006398:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800639c:	e021      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80063a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80063ac:	e019      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80063b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063bc:	e011      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80063c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80063cc:	e009      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80063d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80063dc:	e001      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80063de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3720      	adds	r7, #32
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000004 	.word	0x20000004
 80063f0:	10624dd3 	.word	0x10624dd3
 80063f4:	fdffe008 	.word	0xfdffe008

080063f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006400:	4b1f      	ldr	r3, [pc, #124]	; (8006480 <SDMMC_GetCmdResp2+0x88>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1f      	ldr	r2, [pc, #124]	; (8006484 <SDMMC_GetCmdResp2+0x8c>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	0a5b      	lsrs	r3, r3, #9
 800640c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006410:	fb02 f303 	mul.w	r3, r2, r3
 8006414:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1e5a      	subs	r2, r3, #1
 800641a:	60fa      	str	r2, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d102      	bne.n	8006426 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006424:	e026      	b.n	8006474 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0ef      	beq.n	8006416 <SDMMC_GetCmdResp2+0x1e>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1ea      	bne.n	8006416 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2204      	movs	r2, #4
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006452:	2304      	movs	r3, #4
 8006454:	e00e      	b.n	8006474 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d004      	beq.n	800646c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006468:	2301      	movs	r3, #1
 800646a:	e003      	b.n	8006474 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	22c5      	movs	r2, #197	; 0xc5
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	20000004 	.word	0x20000004
 8006484:	10624dd3 	.word	0x10624dd3

08006488 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006490:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <SDMMC_GetCmdResp3+0x74>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1a      	ldr	r2, [pc, #104]	; (8006500 <SDMMC_GetCmdResp3+0x78>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	0a5b      	lsrs	r3, r3, #9
 800649c:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a0:	fb02 f303 	mul.w	r3, r2, r3
 80064a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1e5a      	subs	r2, r3, #1
 80064aa:	60fa      	str	r2, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d102      	bne.n	80064b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064b4:	e01b      	b.n	80064ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0ef      	beq.n	80064a6 <SDMMC_GetCmdResp3+0x1e>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1ea      	bne.n	80064a6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d004      	beq.n	80064e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2204      	movs	r2, #4
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064e2:	2304      	movs	r3, #4
 80064e4:	e003      	b.n	80064ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	22c5      	movs	r2, #197	; 0xc5
 80064ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000004 	.word	0x20000004
 8006500:	10624dd3 	.word	0x10624dd3

08006504 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	460b      	mov	r3, r1
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006512:	4b35      	ldr	r3, [pc, #212]	; (80065e8 <SDMMC_GetCmdResp6+0xe4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a35      	ldr	r2, [pc, #212]	; (80065ec <SDMMC_GetCmdResp6+0xe8>)
 8006518:	fba2 2303 	umull	r2, r3, r2, r3
 800651c:	0a5b      	lsrs	r3, r3, #9
 800651e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006522:	fb02 f303 	mul.w	r3, r2, r3
 8006526:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	1e5a      	subs	r2, r3, #1
 800652c:	61fa      	str	r2, [r7, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006532:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006536:	e052      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0ef      	beq.n	8006528 <SDMMC_GetCmdResp6+0x24>
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1ea      	bne.n	8006528 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d004      	beq.n	8006568 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2204      	movs	r2, #4
 8006562:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006564:	2304      	movs	r3, #4
 8006566:	e03a      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d004      	beq.n	800657e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800657a:	2301      	movs	r3, #1
 800657c:	e02f      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff fc0d 	bl	8005d9e <SDIO_GetCommandResponse>
 8006584:	4603      	mov	r3, r0
 8006586:	461a      	mov	r2, r3
 8006588:	7afb      	ldrb	r3, [r7, #11]
 800658a:	4293      	cmp	r3, r2
 800658c:	d001      	beq.n	8006592 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800658e:	2301      	movs	r3, #1
 8006590:	e025      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	22c5      	movs	r2, #197	; 0xc5
 8006596:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006598:	2100      	movs	r1, #0
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff fc0c 	bl	8005db8 <SDIO_GetResponse>
 80065a0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	0c1b      	lsrs	r3, r3, #16
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	e011      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80065c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065c8:	e009      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80065d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065d8:	e001      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000004 	.word	0x20000004
 80065ec:	10624dd3 	.word	0x10624dd3

080065f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065f8:	4b22      	ldr	r3, [pc, #136]	; (8006684 <SDMMC_GetCmdResp7+0x94>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a22      	ldr	r2, [pc, #136]	; (8006688 <SDMMC_GetCmdResp7+0x98>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	0a5b      	lsrs	r3, r3, #9
 8006604:	f241 3288 	movw	r2, #5000	; 0x1388
 8006608:	fb02 f303 	mul.w	r3, r2, r3
 800660c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1e5a      	subs	r2, r3, #1
 8006612:	60fa      	str	r2, [r7, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800661c:	e02c      	b.n	8006678 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0ef      	beq.n	800660e <SDMMC_GetCmdResp7+0x1e>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1ea      	bne.n	800660e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2204      	movs	r2, #4
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800664a:	2304      	movs	r3, #4
 800664c:	e014      	b.n	8006678 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006660:	2301      	movs	r3, #1
 8006662:	e009      	b.n	8006678 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2240      	movs	r2, #64	; 0x40
 8006674:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006676:	2300      	movs	r3, #0
  
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	20000004 	.word	0x20000004
 8006688:	10624dd3 	.word	0x10624dd3

0800668c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006694:	4b11      	ldr	r3, [pc, #68]	; (80066dc <SDMMC_GetCmdError+0x50>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a11      	ldr	r2, [pc, #68]	; (80066e0 <SDMMC_GetCmdError+0x54>)
 800669a:	fba2 2303 	umull	r2, r3, r2, r3
 800669e:	0a5b      	lsrs	r3, r3, #9
 80066a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a4:	fb02 f303 	mul.w	r3, r2, r3
 80066a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1e5a      	subs	r2, r3, #1
 80066ae:	60fa      	str	r2, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d102      	bne.n	80066ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066b8:	e009      	b.n	80066ce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0f1      	beq.n	80066aa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	22c5      	movs	r2, #197	; 0xc5
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000004 	.word	0x20000004
 80066e0:	10624dd3 	.word	0x10624dd3

080066e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80066e8:	4904      	ldr	r1, [pc, #16]	; (80066fc <MX_FATFS_Init+0x18>)
 80066ea:	4805      	ldr	r0, [pc, #20]	; (8006700 <MX_FATFS_Init+0x1c>)
 80066ec:	f003 f9a8 	bl	8009a40 <FATFS_LinkDriver>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	4b03      	ldr	r3, [pc, #12]	; (8006704 <MX_FATFS_Init+0x20>)
 80066f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80066f8:	bf00      	nop
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	2000265c 	.word	0x2000265c
 8006700:	0800acf0 	.word	0x0800acf0
 8006704:	20002658 	.word	0x20002658

08006708 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800670c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800670e:	4618      	mov	r0, r3
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006722:	f000 f89e 	bl	8006862 <BSP_SD_IsDetected>
 8006726:	4603      	mov	r3, r0
 8006728:	2b01      	cmp	r3, #1
 800672a:	d001      	beq.n	8006730 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e005      	b.n	800673c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006730:	4804      	ldr	r0, [pc, #16]	; (8006744 <BSP_SD_Init+0x2c>)
 8006732:	f7fd fdc6 	bl	80042c2 <HAL_SD_Init>
 8006736:	4603      	mov	r3, r0
 8006738:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800673a:	79fb      	ldrb	r3, [r7, #7]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20000158 	.word	0x20000158

08006748 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af02      	add	r7, sp, #8
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	68f9      	ldr	r1, [r7, #12]
 8006764:	4806      	ldr	r0, [pc, #24]	; (8006780 <BSP_SD_ReadBlocks+0x38>)
 8006766:	f7fd fe5d 	bl	8004424 <HAL_SD_ReadBlocks>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006774:	7dfb      	ldrb	r3, [r7, #23]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000158 	.word	0x20000158

08006784 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	68f9      	ldr	r1, [r7, #12]
 80067a0:	4806      	ldr	r0, [pc, #24]	; (80067bc <BSP_SD_WriteBlocks+0x38>)
 80067a2:	f7fe f81d 	bl	80047e0 <HAL_SD_WriteBlocks>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000158 	.word	0x20000158

080067c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80067c4:	4805      	ldr	r0, [pc, #20]	; (80067dc <BSP_SD_GetCardState+0x1c>)
 80067c6:	f7fe fce1 	bl	800518c <HAL_SD_GetCardState>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	bf14      	ite	ne
 80067d0:	2301      	movne	r3, #1
 80067d2:	2300      	moveq	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000158 	.word	0x20000158

080067e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	4803      	ldr	r0, [pc, #12]	; (80067f8 <BSP_SD_GetCardInfo+0x18>)
 80067ec:	f7fe fca2 	bl	8005134 <HAL_SD_GetCardInfo>
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20000158 	.word	0x20000158

080067fc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006804:	f000 f818 	bl	8006838 <BSP_SD_AbortCallback>
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006818:	f000 f815 	bl	8006846 <BSP_SD_WriteCpltCallback>
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800682c:	f000 f812 	bl	8006854 <BSP_SD_ReadCpltCallback>
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0

}
 800683c:	bf00      	nop
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8006846:	b480      	push	{r7}
 8006848:	af00      	add	r7, sp, #0

}
 800684a:	bf00      	nop
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0

}
 8006858:	bf00      	nop
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006868:	2301      	movs	r3, #1
 800686a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800686c:	f000 f80c 	bl	8006888 <BSP_PlatformIsDetected>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006876:	2300      	movs	r3, #0
 8006878:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	b2db      	uxtb	r3, r3
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800688e:	2301      	movs	r3, #1
 8006890:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006892:	2102      	movs	r1, #2
 8006894:	4806      	ldr	r0, [pc, #24]	; (80068b0 <BSP_PlatformIsDetected+0x28>)
 8006896:	f7fc f94b 	bl	8002b30 <HAL_GPIO_ReadPin>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80068a0:	2300      	movs	r3, #0
 80068a2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80068a4:	79fb      	ldrb	r3, [r7, #7]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	40020800 	.word	0x40020800

080068b4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80068be:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <SD_CheckStatus+0x38>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80068c4:	f7ff ff7c 	bl	80067c0 <BSP_SD_GetCardState>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d107      	bne.n	80068de <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80068ce:	4b07      	ldr	r3, [pc, #28]	; (80068ec <SD_CheckStatus+0x38>)
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	4b04      	ldr	r3, [pc, #16]	; (80068ec <SD_CheckStatus+0x38>)
 80068dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80068de:	4b03      	ldr	r3, [pc, #12]	; (80068ec <SD_CheckStatus+0x38>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b2db      	uxtb	r3, r3
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	2000000d 	.word	0x2000000d

080068f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80068fa:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <SD_initialize+0x38>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006900:	f7ff ff0a 	bl	8006718 <BSP_SD_Init>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d107      	bne.n	800691a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff ffd1 	bl	80068b4 <SD_CheckStatus>
 8006912:	4603      	mov	r3, r0
 8006914:	461a      	mov	r2, r3
 8006916:	4b04      	ldr	r3, [pc, #16]	; (8006928 <SD_initialize+0x38>)
 8006918:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800691a:	4b03      	ldr	r3, [pc, #12]	; (8006928 <SD_initialize+0x38>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	b2db      	uxtb	r3, r3
}
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	2000000d 	.word	0x2000000d

0800692c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff ffbb 	bl	80068b4 <SD_CheckStatus>
 800693e:	4603      	mov	r3, r0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	4603      	mov	r3, r0
 8006956:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800695c:	f04f 33ff 	mov.w	r3, #4294967295
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	68b8      	ldr	r0, [r7, #8]
 8006966:	f7ff feef 	bl	8006748 <BSP_SD_ReadBlocks>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d107      	bne.n	8006980 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006970:	bf00      	nop
 8006972:	f7ff ff25 	bl	80067c0 <BSP_SD_GetCardState>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1fa      	bne.n	8006972 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006980:	7dfb      	ldrb	r3, [r7, #23]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b086      	sub	sp, #24
 800698e:	af00      	add	r7, sp, #0
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
 8006996:	4603      	mov	r3, r0
 8006998:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800699e:	f04f 33ff 	mov.w	r3, #4294967295
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	68b8      	ldr	r0, [r7, #8]
 80069a8:	f7ff feec 	bl	8006784 <BSP_SD_WriteBlocks>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d107      	bne.n	80069c2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80069b2:	bf00      	nop
 80069b4:	f7ff ff04 	bl	80067c0 <BSP_SD_GetCardState>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1fa      	bne.n	80069b4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08c      	sub	sp, #48	; 0x30
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	603a      	str	r2, [r7, #0]
 80069d6:	71fb      	strb	r3, [r7, #7]
 80069d8:	460b      	mov	r3, r1
 80069da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80069e2:	4b25      	ldr	r3, [pc, #148]	; (8006a78 <SD_ioctl+0xac>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <SD_ioctl+0x28>
 80069f0:	2303      	movs	r3, #3
 80069f2:	e03c      	b.n	8006a6e <SD_ioctl+0xa2>

  switch (cmd)
 80069f4:	79bb      	ldrb	r3, [r7, #6]
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d834      	bhi.n	8006a64 <SD_ioctl+0x98>
 80069fa:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <SD_ioctl+0x34>)
 80069fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a00:	08006a11 	.word	0x08006a11
 8006a04:	08006a19 	.word	0x08006a19
 8006a08:	08006a31 	.word	0x08006a31
 8006a0c:	08006a4b 	.word	0x08006a4b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a16:	e028      	b.n	8006a6a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006a18:	f107 030c 	add.w	r3, r7, #12
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff fedf 	bl	80067e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a2e:	e01c      	b.n	8006a6a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006a30:	f107 030c 	add.w	r3, r7, #12
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7ff fed3 	bl	80067e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a48:	e00f      	b.n	8006a6a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006a4a:	f107 030c 	add.w	r3, r7, #12
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff fec6 	bl	80067e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	0a5a      	lsrs	r2, r3, #9
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a62:	e002      	b.n	8006a6a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006a64:	2304      	movs	r3, #4
 8006a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3730      	adds	r7, #48	; 0x30
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	2000000d 	.word	0x2000000d

08006a7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	4a08      	ldr	r2, [pc, #32]	; (8006aac <disk_status+0x30>)
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	79fa      	ldrb	r2, [r7, #7]
 8006a94:	4905      	ldr	r1, [pc, #20]	; (8006aac <disk_status+0x30>)
 8006a96:	440a      	add	r2, r1
 8006a98:	7a12      	ldrb	r2, [r2, #8]
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	4798      	blx	r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20002688 	.word	0x20002688

08006ab0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	4a0d      	ldr	r2, [pc, #52]	; (8006af8 <disk_initialize+0x48>)
 8006ac2:	5cd3      	ldrb	r3, [r2, r3]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d111      	bne.n	8006aec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	4a0b      	ldr	r2, [pc, #44]	; (8006af8 <disk_initialize+0x48>)
 8006acc:	2101      	movs	r1, #1
 8006ace:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	4a09      	ldr	r2, [pc, #36]	; (8006af8 <disk_initialize+0x48>)
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	79fa      	ldrb	r2, [r7, #7]
 8006ade:	4906      	ldr	r1, [pc, #24]	; (8006af8 <disk_initialize+0x48>)
 8006ae0:	440a      	add	r2, r1
 8006ae2:	7a12      	ldrb	r2, [r2, #8]
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
 8006ae8:	4603      	mov	r3, r0
 8006aea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20002688 	.word	0x20002688

08006afc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006afc:	b590      	push	{r4, r7, lr}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	4a0a      	ldr	r2, [pc, #40]	; (8006b38 <disk_read+0x3c>)
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	689c      	ldr	r4, [r3, #8]
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	4a07      	ldr	r2, [pc, #28]	; (8006b38 <disk_read+0x3c>)
 8006b1c:	4413      	add	r3, r2
 8006b1e:	7a18      	ldrb	r0, [r3, #8]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	47a0      	blx	r4
 8006b28:	4603      	mov	r3, r0
 8006b2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd90      	pop	{r4, r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20002688 	.word	0x20002688

08006b3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006b3c:	b590      	push	{r4, r7, lr}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	4a0a      	ldr	r2, [pc, #40]	; (8006b78 <disk_write+0x3c>)
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	68dc      	ldr	r4, [r3, #12]
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	4a07      	ldr	r2, [pc, #28]	; (8006b78 <disk_write+0x3c>)
 8006b5c:	4413      	add	r3, r2
 8006b5e:	7a18      	ldrb	r0, [r3, #8]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	47a0      	blx	r4
 8006b68:	4603      	mov	r3, r0
 8006b6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd90      	pop	{r4, r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20002688 	.word	0x20002688

08006b7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4603      	mov	r3, r0
 8006b84:	603a      	str	r2, [r7, #0]
 8006b86:	71fb      	strb	r3, [r7, #7]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <disk_ioctl+0x38>)
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	79fa      	ldrb	r2, [r7, #7]
 8006b9a:	4906      	ldr	r1, [pc, #24]	; (8006bb4 <disk_ioctl+0x38>)
 8006b9c:	440a      	add	r2, r1
 8006b9e:	7a10      	ldrb	r0, [r2, #8]
 8006ba0:	79b9      	ldrb	r1, [r7, #6]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	4798      	blx	r3
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73fb      	strb	r3, [r7, #15]
  return res;
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20002688 	.word	0x20002688

08006bb8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006bc8:	89fb      	ldrh	r3, [r7, #14]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	b21a      	sxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	b21b      	sxth	r3, r3
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b21b      	sxth	r3, r3
 8006bd8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006bda:	89fb      	ldrh	r3, [r7, #14]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3303      	adds	r3, #3
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	021b      	lsls	r3, r3, #8
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	3202      	adds	r2, #2
 8006c00:	7812      	ldrb	r2, [r2, #0]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	3201      	adds	r2, #1
 8006c0e:	7812      	ldrb	r2, [r2, #0]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	7812      	ldrb	r2, [r2, #0]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006c20:	68fb      	ldr	r3, [r7, #12]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	887a      	ldrh	r2, [r7, #2]
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	887b      	ldrh	r3, [r7, #2]
 8006c48:	0a1b      	lsrs	r3, r3, #8
 8006c4a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	607a      	str	r2, [r7, #4]
 8006c52:	887a      	ldrh	r2, [r7, #2]
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	701a      	strb	r2, [r3, #0]
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	0a1b      	lsrs	r3, r3, #8
 8006c7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	607a      	str	r2, [r7, #4]
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	0a1b      	lsrs	r3, r3, #8
 8006ca2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	607a      	str	r2, [r7, #4]
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	701a      	strb	r2, [r3, #0]
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	1c53      	adds	r3, r2, #1
 8006cda:	613b      	str	r3, [r7, #16]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	6179      	str	r1, [r7, #20]
 8006ce2:	7812      	ldrb	r2, [r2, #0]
 8006ce4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	607b      	str	r3, [r7, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f1      	bne.n	8006cd6 <mem_cpy+0x1a>
	}
}
 8006cf2:	bf00      	nop
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006cfe:	b480      	push	{r7}
 8006d00:	b087      	sub	sp, #28
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	617a      	str	r2, [r7, #20]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	607b      	str	r3, [r7, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1f3      	bne.n	8006d0e <mem_set+0x10>
}
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006d34:	b480      	push	{r7}
 8006d36:	b089      	sub	sp, #36	; 0x24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	61fa      	str	r2, [r7, #28]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	4619      	mov	r1, r3
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	61ba      	str	r2, [r7, #24]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	1acb      	subs	r3, r1, r3
 8006d60:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <mem_cmp+0x40>
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0eb      	beq.n	8006d4c <mem_cmp+0x18>

	return r;
 8006d74:	697b      	ldr	r3, [r7, #20]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3724      	adds	r7, #36	; 0x24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006d8c:	e002      	b.n	8006d94 <chk_chr+0x12>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3301      	adds	r3, #1
 8006d92:	607b      	str	r3, [r7, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <chk_chr+0x26>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d1f2      	bne.n	8006d8e <chk_chr+0xc>
	return *str;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	781b      	ldrb	r3, [r3, #0]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	e029      	b.n	8006e20 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006dcc:	4a27      	ldr	r2, [pc, #156]	; (8006e6c <chk_lock+0xb4>)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	4413      	add	r3, r2
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d01d      	beq.n	8006e16 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006dda:	4a24      	ldr	r2, [pc, #144]	; (8006e6c <chk_lock+0xb4>)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	4413      	add	r3, r2
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d116      	bne.n	8006e1a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006dec:	4a1f      	ldr	r2, [pc, #124]	; (8006e6c <chk_lock+0xb4>)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	4413      	add	r3, r2
 8006df4:	3304      	adds	r3, #4
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d10c      	bne.n	8006e1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e00:	4a1a      	ldr	r2, [pc, #104]	; (8006e6c <chk_lock+0xb4>)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	4413      	add	r3, r2
 8006e08:	3308      	adds	r3, #8
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d102      	bne.n	8006e1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e14:	e007      	b.n	8006e26 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006e16:	2301      	movs	r3, #1
 8006e18:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d9d2      	bls.n	8006dcc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d109      	bne.n	8006e40 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d102      	bne.n	8006e38 <chk_lock+0x80>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d101      	bne.n	8006e3c <chk_lock+0x84>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e010      	b.n	8006e5e <chk_lock+0xa6>
 8006e3c:	2312      	movs	r3, #18
 8006e3e:	e00e      	b.n	8006e5e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d108      	bne.n	8006e58 <chk_lock+0xa0>
 8006e46:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <chk_lock+0xb4>)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	4413      	add	r3, r2
 8006e4e:	330c      	adds	r3, #12
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e56:	d101      	bne.n	8006e5c <chk_lock+0xa4>
 8006e58:	2310      	movs	r3, #16
 8006e5a:	e000      	b.n	8006e5e <chk_lock+0xa6>
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20002668 	.word	0x20002668

08006e70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e76:	2300      	movs	r3, #0
 8006e78:	607b      	str	r3, [r7, #4]
 8006e7a:	e002      	b.n	8006e82 <enq_lock+0x12>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	607b      	str	r3, [r7, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d806      	bhi.n	8006e96 <enq_lock+0x26>
 8006e88:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <enq_lock+0x40>)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	4413      	add	r3, r2
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f2      	bne.n	8006e7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	bf14      	ite	ne
 8006e9c:	2301      	movne	r3, #1
 8006e9e:	2300      	moveq	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20002668 	.word	0x20002668

08006eb4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	e01f      	b.n	8006f04 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006ec4:	4a41      	ldr	r2, [pc, #260]	; (8006fcc <inc_lock+0x118>)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	4413      	add	r3, r2
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d113      	bne.n	8006efe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006ed6:	4a3d      	ldr	r2, [pc, #244]	; (8006fcc <inc_lock+0x118>)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	4413      	add	r3, r2
 8006ede:	3304      	adds	r3, #4
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d109      	bne.n	8006efe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006eea:	4a38      	ldr	r2, [pc, #224]	; (8006fcc <inc_lock+0x118>)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	4413      	add	r3, r2
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d006      	beq.n	8006f0c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d9dc      	bls.n	8006ec4 <inc_lock+0x10>
 8006f0a:	e000      	b.n	8006f0e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006f0c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d132      	bne.n	8006f7a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	e002      	b.n	8006f20 <inc_lock+0x6c>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d806      	bhi.n	8006f34 <inc_lock+0x80>
 8006f26:	4a29      	ldr	r2, [pc, #164]	; (8006fcc <inc_lock+0x118>)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	4413      	add	r3, r2
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1f2      	bne.n	8006f1a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d101      	bne.n	8006f3e <inc_lock+0x8a>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e040      	b.n	8006fc0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4922      	ldr	r1, [pc, #136]	; (8006fcc <inc_lock+0x118>)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	440b      	add	r3, r1
 8006f4a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	491e      	ldr	r1, [pc, #120]	; (8006fcc <inc_lock+0x118>)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	440b      	add	r3, r1
 8006f58:	3304      	adds	r3, #4
 8006f5a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	695a      	ldr	r2, [r3, #20]
 8006f60:	491a      	ldr	r1, [pc, #104]	; (8006fcc <inc_lock+0x118>)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	011b      	lsls	r3, r3, #4
 8006f66:	440b      	add	r3, r1
 8006f68:	3308      	adds	r3, #8
 8006f6a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006f6c:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <inc_lock+0x118>)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	011b      	lsls	r3, r3, #4
 8006f72:	4413      	add	r3, r2
 8006f74:	330c      	adds	r3, #12
 8006f76:	2200      	movs	r2, #0
 8006f78:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d009      	beq.n	8006f94 <inc_lock+0xe0>
 8006f80:	4a12      	ldr	r2, [pc, #72]	; (8006fcc <inc_lock+0x118>)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	011b      	lsls	r3, r3, #4
 8006f86:	4413      	add	r3, r2
 8006f88:	330c      	adds	r3, #12
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <inc_lock+0xe0>
 8006f90:	2300      	movs	r3, #0
 8006f92:	e015      	b.n	8006fc0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d108      	bne.n	8006fac <inc_lock+0xf8>
 8006f9a:	4a0c      	ldr	r2, [pc, #48]	; (8006fcc <inc_lock+0x118>)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	4413      	add	r3, r2
 8006fa2:	330c      	adds	r3, #12
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	e001      	b.n	8006fb0 <inc_lock+0xfc>
 8006fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fb0:	4906      	ldr	r1, [pc, #24]	; (8006fcc <inc_lock+0x118>)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	440b      	add	r3, r1
 8006fb8:	330c      	adds	r3, #12
 8006fba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	20002668 	.word	0x20002668

08006fd0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	607b      	str	r3, [r7, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d825      	bhi.n	8007030 <dec_lock+0x60>
		n = Files[i].ctr;
 8006fe4:	4a17      	ldr	r2, [pc, #92]	; (8007044 <dec_lock+0x74>)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	4413      	add	r3, r2
 8006fec:	330c      	adds	r3, #12
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006ff2:	89fb      	ldrh	r3, [r7, #14]
 8006ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff8:	d101      	bne.n	8006ffe <dec_lock+0x2e>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006ffe:	89fb      	ldrh	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <dec_lock+0x3a>
 8007004:	89fb      	ldrh	r3, [r7, #14]
 8007006:	3b01      	subs	r3, #1
 8007008:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800700a:	4a0e      	ldr	r2, [pc, #56]	; (8007044 <dec_lock+0x74>)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	4413      	add	r3, r2
 8007012:	330c      	adds	r3, #12
 8007014:	89fa      	ldrh	r2, [r7, #14]
 8007016:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007018:	89fb      	ldrh	r3, [r7, #14]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d105      	bne.n	800702a <dec_lock+0x5a>
 800701e:	4a09      	ldr	r2, [pc, #36]	; (8007044 <dec_lock+0x74>)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	4413      	add	r3, r2
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	737b      	strb	r3, [r7, #13]
 800702e:	e001      	b.n	8007034 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007030:	2302      	movs	r3, #2
 8007032:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007034:	7b7b      	ldrb	r3, [r7, #13]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20002668 	.word	0x20002668

08007048 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	e010      	b.n	8007078 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007056:	4a0d      	ldr	r2, [pc, #52]	; (800708c <clear_lock+0x44>)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	4413      	add	r3, r2
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	429a      	cmp	r2, r3
 8007064:	d105      	bne.n	8007072 <clear_lock+0x2a>
 8007066:	4a09      	ldr	r2, [pc, #36]	; (800708c <clear_lock+0x44>)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	4413      	add	r3, r2
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3301      	adds	r3, #1
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d9eb      	bls.n	8007056 <clear_lock+0xe>
	}
}
 800707e:	bf00      	nop
 8007080:	bf00      	nop
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	20002668 	.word	0x20002668

08007090 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	78db      	ldrb	r3, [r3, #3]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d034      	beq.n	800710e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	7858      	ldrb	r0, [r3, #1]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80070b4:	2301      	movs	r3, #1
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	f7ff fd40 	bl	8006b3c <disk_write>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	73fb      	strb	r3, [r7, #15]
 80070c6:	e022      	b.n	800710e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	1ad2      	subs	r2, r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d217      	bcs.n	800710e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	789b      	ldrb	r3, [r3, #2]
 80070e2:	613b      	str	r3, [r7, #16]
 80070e4:	e010      	b.n	8007108 <sync_window+0x78>
					wsect += fs->fsize;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4413      	add	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	7858      	ldrb	r0, [r3, #1]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80070fa:	2301      	movs	r3, #1
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	f7ff fd1d 	bl	8006b3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	3b01      	subs	r3, #1
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d8eb      	bhi.n	80070e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d01b      	beq.n	8007168 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff ffad 	bl	8007090 <sync_window>
 8007136:	4603      	mov	r3, r0
 8007138:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d113      	bne.n	8007168 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	7858      	ldrb	r0, [r3, #1]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800714a:	2301      	movs	r3, #1
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	f7ff fcd5 	bl	8006afc <disk_read>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007158:	f04f 33ff 	mov.w	r3, #4294967295
 800715c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800715e:	2301      	movs	r3, #1
 8007160:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007168:	7bfb      	ldrb	r3, [r7, #15]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7ff ff87 	bl	8007090 <sync_window>
 8007182:	4603      	mov	r3, r0
 8007184:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d159      	bne.n	8007240 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b03      	cmp	r3, #3
 8007192:	d149      	bne.n	8007228 <sync_fs+0xb4>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	791b      	ldrb	r3, [r3, #4]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d145      	bne.n	8007228 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	899b      	ldrh	r3, [r3, #12]
 80071a6:	461a      	mov	r2, r3
 80071a8:	2100      	movs	r1, #0
 80071aa:	f7ff fda8 	bl	8006cfe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3334      	adds	r3, #52	; 0x34
 80071b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071b6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff fd37 	bl	8006c2e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3334      	adds	r3, #52	; 0x34
 80071c4:	4921      	ldr	r1, [pc, #132]	; (800724c <sync_fs+0xd8>)
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff fd4c 	bl	8006c64 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3334      	adds	r3, #52	; 0x34
 80071d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80071d4:	491e      	ldr	r1, [pc, #120]	; (8007250 <sync_fs+0xdc>)
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff fd44 	bl	8006c64 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3334      	adds	r3, #52	; 0x34
 80071e0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	4619      	mov	r1, r3
 80071ea:	4610      	mov	r0, r2
 80071ec:	f7ff fd3a 	bl	8006c64 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3334      	adds	r3, #52	; 0x34
 80071f4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f7ff fd30 	bl	8006c64 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	7858      	ldrb	r0, [r3, #1]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800721c:	2301      	movs	r3, #1
 800721e:	f7ff fc8d 	bl	8006b3c <disk_write>
			fs->fsi_flag = 0;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	2200      	movs	r2, #0
 800722e:	2100      	movs	r1, #0
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff fca3 	bl	8006b7c <disk_ioctl>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <sync_fs+0xcc>
 800723c:	2301      	movs	r3, #1
 800723e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	41615252 	.word	0x41615252
 8007250:	61417272 	.word	0x61417272

08007254 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	3b02      	subs	r3, #2
 8007262:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	3b02      	subs	r3, #2
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d301      	bcc.n	8007274 <clust2sect+0x20>
 8007270:	2300      	movs	r3, #0
 8007272:	e008      	b.n	8007286 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	895b      	ldrh	r3, [r3, #10]
 8007278:	461a      	mov	r2, r3
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	fb03 f202 	mul.w	r2, r3, r2
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	4413      	add	r3, r2
}
 8007286:	4618      	mov	r0, r3
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d904      	bls.n	80072b2 <get_fat+0x20>
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d302      	bcc.n	80072b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80072b2:	2301      	movs	r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
 80072b6:	e0bb      	b.n	8007430 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80072b8:	f04f 33ff 	mov.w	r3, #4294967295
 80072bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	f000 8083 	beq.w	80073ce <get_fat+0x13c>
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	f300 80a7 	bgt.w	800741c <get_fat+0x18a>
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d002      	beq.n	80072d8 <get_fat+0x46>
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d056      	beq.n	8007384 <get_fat+0xf2>
 80072d6:	e0a1      	b.n	800741c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	899b      	ldrh	r3, [r3, #12]
 80072ee:	4619      	mov	r1, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80072f6:	4413      	add	r3, r2
 80072f8:	4619      	mov	r1, r3
 80072fa:	6938      	ldr	r0, [r7, #16]
 80072fc:	f7ff ff0c 	bl	8007118 <move_window>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	f040 808d 	bne.w	8007422 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	60fa      	str	r2, [r7, #12]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	8992      	ldrh	r2, [r2, #12]
 8007312:	fbb3 f1f2 	udiv	r1, r3, r2
 8007316:	fb01 f202 	mul.w	r2, r1, r2
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4413      	add	r3, r2
 8007320:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007324:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	899b      	ldrh	r3, [r3, #12]
 800732e:	4619      	mov	r1, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	fbb3 f3f1 	udiv	r3, r3, r1
 8007336:	4413      	add	r3, r2
 8007338:	4619      	mov	r1, r3
 800733a:	6938      	ldr	r0, [r7, #16]
 800733c:	f7ff feec 	bl	8007118 <move_window>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d16f      	bne.n	8007426 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	899b      	ldrh	r3, [r3, #12]
 800734a:	461a      	mov	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007352:	fb01 f202 	mul.w	r2, r1, r2
 8007356:	1a9b      	subs	r3, r3, r2
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4413      	add	r3, r2
 800735c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	461a      	mov	r2, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4313      	orrs	r3, r2
 8007368:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <get_fat+0xe8>
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	091b      	lsrs	r3, r3, #4
 8007378:	e002      	b.n	8007380 <get_fat+0xee>
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007380:	617b      	str	r3, [r7, #20]
			break;
 8007382:	e055      	b.n	8007430 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	899b      	ldrh	r3, [r3, #12]
 800738c:	085b      	lsrs	r3, r3, #1
 800738e:	b29b      	uxth	r3, r3
 8007390:	4619      	mov	r1, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	fbb3 f3f1 	udiv	r3, r3, r1
 8007398:	4413      	add	r3, r2
 800739a:	4619      	mov	r1, r3
 800739c:	6938      	ldr	r0, [r7, #16]
 800739e:	f7ff febb 	bl	8007118 <move_window>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d140      	bne.n	800742a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	8992      	ldrh	r2, [r2, #12]
 80073b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80073ba:	fb00 f202 	mul.w	r2, r0, r2
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	440b      	add	r3, r1
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fbf8 	bl	8006bb8 <ld_word>
 80073c8:	4603      	mov	r3, r0
 80073ca:	617b      	str	r3, [r7, #20]
			break;
 80073cc:	e030      	b.n	8007430 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	899b      	ldrh	r3, [r3, #12]
 80073d6:	089b      	lsrs	r3, r3, #2
 80073d8:	b29b      	uxth	r3, r3
 80073da:	4619      	mov	r1, r3
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	fbb3 f3f1 	udiv	r3, r3, r1
 80073e2:	4413      	add	r3, r2
 80073e4:	4619      	mov	r1, r3
 80073e6:	6938      	ldr	r0, [r7, #16]
 80073e8:	f7ff fe96 	bl	8007118 <move_window>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d11d      	bne.n	800742e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	8992      	ldrh	r2, [r2, #12]
 8007400:	fbb3 f0f2 	udiv	r0, r3, r2
 8007404:	fb00 f202 	mul.w	r2, r0, r2
 8007408:	1a9b      	subs	r3, r3, r2
 800740a:	440b      	add	r3, r1
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff fbeb 	bl	8006be8 <ld_dword>
 8007412:	4603      	mov	r3, r0
 8007414:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007418:	617b      	str	r3, [r7, #20]
			break;
 800741a:	e009      	b.n	8007430 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800741c:	2301      	movs	r3, #1
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	e006      	b.n	8007430 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007422:	bf00      	nop
 8007424:	e004      	b.n	8007430 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007426:	bf00      	nop
 8007428:	e002      	b.n	8007430 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800742e:	bf00      	nop
		}
	}

	return val;
 8007430:	697b      	ldr	r3, [r7, #20]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800743a:	b590      	push	{r4, r7, lr}
 800743c:	b089      	sub	sp, #36	; 0x24
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007446:	2302      	movs	r3, #2
 8007448:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b01      	cmp	r3, #1
 800744e:	f240 8102 	bls.w	8007656 <put_fat+0x21c>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	429a      	cmp	r2, r3
 800745a:	f080 80fc 	bcs.w	8007656 <put_fat+0x21c>
		switch (fs->fs_type) {
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b03      	cmp	r3, #3
 8007464:	f000 80b6 	beq.w	80075d4 <put_fat+0x19a>
 8007468:	2b03      	cmp	r3, #3
 800746a:	f300 80fd 	bgt.w	8007668 <put_fat+0x22e>
 800746e:	2b01      	cmp	r3, #1
 8007470:	d003      	beq.n	800747a <put_fat+0x40>
 8007472:	2b02      	cmp	r3, #2
 8007474:	f000 8083 	beq.w	800757e <put_fat+0x144>
 8007478:	e0f6      	b.n	8007668 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	61bb      	str	r3, [r7, #24]
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	085b      	lsrs	r3, r3, #1
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	4413      	add	r3, r2
 8007486:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	899b      	ldrh	r3, [r3, #12]
 8007490:	4619      	mov	r1, r3
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	fbb3 f3f1 	udiv	r3, r3, r1
 8007498:	4413      	add	r3, r2
 800749a:	4619      	mov	r1, r3
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7ff fe3b 	bl	8007118 <move_window>
 80074a2:	4603      	mov	r3, r0
 80074a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074a6:	7ffb      	ldrb	r3, [r7, #31]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f040 80d6 	bne.w	800765a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	61ba      	str	r2, [r7, #24]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	8992      	ldrh	r2, [r2, #12]
 80074be:	fbb3 f0f2 	udiv	r0, r3, r2
 80074c2:	fb00 f202 	mul.w	r2, r0, r2
 80074c6:	1a9b      	subs	r3, r3, r2
 80074c8:	440b      	add	r3, r1
 80074ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00d      	beq.n	80074f2 <put_fat+0xb8>
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	b25b      	sxtb	r3, r3
 80074dc:	f003 030f 	and.w	r3, r3, #15
 80074e0:	b25a      	sxtb	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	b25b      	sxtb	r3, r3
 80074ea:	4313      	orrs	r3, r2
 80074ec:	b25b      	sxtb	r3, r3
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	e001      	b.n	80074f6 <put_fat+0xbc>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	899b      	ldrh	r3, [r3, #12]
 8007508:	4619      	mov	r1, r3
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007510:	4413      	add	r3, r2
 8007512:	4619      	mov	r1, r3
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f7ff fdff 	bl	8007118 <move_window>
 800751a:	4603      	mov	r3, r0
 800751c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800751e:	7ffb      	ldrb	r3, [r7, #31]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f040 809c 	bne.w	800765e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	899b      	ldrh	r3, [r3, #12]
 8007530:	461a      	mov	r2, r3
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	fbb3 f0f2 	udiv	r0, r3, r2
 8007538:	fb00 f202 	mul.w	r2, r0, r2
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	440b      	add	r3, r1
 8007540:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <put_fat+0x11a>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	091b      	lsrs	r3, r3, #4
 8007550:	b2db      	uxtb	r3, r3
 8007552:	e00e      	b.n	8007572 <put_fat+0x138>
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	b25b      	sxtb	r3, r3
 800755a:	f023 030f 	bic.w	r3, r3, #15
 800755e:	b25a      	sxtb	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	0a1b      	lsrs	r3, r3, #8
 8007564:	b25b      	sxtb	r3, r3
 8007566:	f003 030f 	and.w	r3, r3, #15
 800756a:	b25b      	sxtb	r3, r3
 800756c:	4313      	orrs	r3, r2
 800756e:	b25b      	sxtb	r3, r3
 8007570:	b2db      	uxtb	r3, r3
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	70da      	strb	r2, [r3, #3]
			break;
 800757c:	e074      	b.n	8007668 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	899b      	ldrh	r3, [r3, #12]
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	b29b      	uxth	r3, r3
 800758a:	4619      	mov	r1, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007592:	4413      	add	r3, r2
 8007594:	4619      	mov	r1, r3
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff fdbe 	bl	8007118 <move_window>
 800759c:	4603      	mov	r3, r0
 800759e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075a0:	7ffb      	ldrb	r3, [r7, #31]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d15d      	bne.n	8007662 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	8992      	ldrh	r2, [r2, #12]
 80075b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80075b8:	fb00 f202 	mul.w	r2, r0, r2
 80075bc:	1a9b      	subs	r3, r3, r2
 80075be:	440b      	add	r3, r1
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	b292      	uxth	r2, r2
 80075c4:	4611      	mov	r1, r2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff fb31 	bl	8006c2e <st_word>
			fs->wflag = 1;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	70da      	strb	r2, [r3, #3]
			break;
 80075d2:	e049      	b.n	8007668 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	899b      	ldrh	r3, [r3, #12]
 80075dc:	089b      	lsrs	r3, r3, #2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	4619      	mov	r1, r3
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80075e8:	4413      	add	r3, r2
 80075ea:	4619      	mov	r1, r3
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f7ff fd93 	bl	8007118 <move_window>
 80075f2:	4603      	mov	r3, r0
 80075f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075f6:	7ffb      	ldrb	r3, [r7, #31]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d134      	bne.n	8007666 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	8992      	ldrh	r2, [r2, #12]
 8007610:	fbb3 f0f2 	udiv	r0, r3, r2
 8007614:	fb00 f202 	mul.w	r2, r0, r2
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	440b      	add	r3, r1
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff fae3 	bl	8006be8 <ld_dword>
 8007622:	4603      	mov	r3, r0
 8007624:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007628:	4323      	orrs	r3, r4
 800762a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	8992      	ldrh	r2, [r2, #12]
 800763a:	fbb3 f0f2 	udiv	r0, r3, r2
 800763e:	fb00 f202 	mul.w	r2, r0, r2
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	440b      	add	r3, r1
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	4618      	mov	r0, r3
 800764a:	f7ff fb0b 	bl	8006c64 <st_dword>
			fs->wflag = 1;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	70da      	strb	r2, [r3, #3]
			break;
 8007654:	e008      	b.n	8007668 <put_fat+0x22e>
		}
	}
 8007656:	bf00      	nop
 8007658:	e006      	b.n	8007668 <put_fat+0x22e>
			if (res != FR_OK) break;
 800765a:	bf00      	nop
 800765c:	e004      	b.n	8007668 <put_fat+0x22e>
			if (res != FR_OK) break;
 800765e:	bf00      	nop
 8007660:	e002      	b.n	8007668 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007662:	bf00      	nop
 8007664:	e000      	b.n	8007668 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007666:	bf00      	nop
	return res;
 8007668:	7ffb      	ldrb	r3, [r7, #31]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3724      	adds	r7, #36	; 0x24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd90      	pop	{r4, r7, pc}

08007672 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b088      	sub	sp, #32
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d904      	bls.n	8007698 <remove_chain+0x26>
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	429a      	cmp	r2, r3
 8007696:	d301      	bcc.n	800769c <remove_chain+0x2a>
 8007698:	2302      	movs	r3, #2
 800769a:	e04b      	b.n	8007734 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00c      	beq.n	80076bc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80076a2:	f04f 32ff 	mov.w	r2, #4294967295
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	69b8      	ldr	r0, [r7, #24]
 80076aa:	f7ff fec6 	bl	800743a <put_fat>
 80076ae:	4603      	mov	r3, r0
 80076b0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80076b2:	7ffb      	ldrb	r3, [r7, #31]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <remove_chain+0x4a>
 80076b8:	7ffb      	ldrb	r3, [r7, #31]
 80076ba:	e03b      	b.n	8007734 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7ff fde7 	bl	8007292 <get_fat>
 80076c4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d031      	beq.n	8007730 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <remove_chain+0x64>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e02e      	b.n	8007734 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d101      	bne.n	80076e2 <remove_chain+0x70>
 80076de:	2301      	movs	r3, #1
 80076e0:	e028      	b.n	8007734 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80076e2:	2200      	movs	r2, #0
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	69b8      	ldr	r0, [r7, #24]
 80076e8:	f7ff fea7 	bl	800743a <put_fat>
 80076ec:	4603      	mov	r3, r0
 80076ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80076f0:	7ffb      	ldrb	r3, [r7, #31]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <remove_chain+0x88>
 80076f6:	7ffb      	ldrb	r3, [r7, #31]
 80076f8:	e01c      	b.n	8007734 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	695a      	ldr	r2, [r3, #20]
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	3b02      	subs	r3, #2
 8007704:	429a      	cmp	r2, r3
 8007706:	d20b      	bcs.n	8007720 <remove_chain+0xae>
			fs->free_clst++;
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	791b      	ldrb	r3, [r3, #4]
 8007716:	f043 0301 	orr.w	r3, r3, #1
 800771a:	b2da      	uxtb	r2, r3
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	429a      	cmp	r2, r3
 800772c:	d3c6      	bcc.n	80076bc <remove_chain+0x4a>
 800772e:	e000      	b.n	8007732 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007730:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3720      	adds	r7, #32
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10d      	bne.n	800776e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d004      	beq.n	8007768 <create_chain+0x2c>
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	429a      	cmp	r2, r3
 8007766:	d31b      	bcc.n	80077a0 <create_chain+0x64>
 8007768:	2301      	movs	r3, #1
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	e018      	b.n	80077a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff fd8e 	bl	8007292 <get_fat>
 8007776:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d801      	bhi.n	8007782 <create_chain+0x46>
 800777e:	2301      	movs	r3, #1
 8007780:	e070      	b.n	8007864 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007788:	d101      	bne.n	800778e <create_chain+0x52>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	e06a      	b.n	8007864 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	429a      	cmp	r2, r3
 8007796:	d201      	bcs.n	800779c <create_chain+0x60>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	e063      	b.n	8007864 <create_chain+0x128>
		scl = clst;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	3301      	adds	r3, #1
 80077a8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d307      	bcc.n	80077c4 <create_chain+0x88>
				ncl = 2;
 80077b4:	2302      	movs	r3, #2
 80077b6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d901      	bls.n	80077c4 <create_chain+0x88>
 80077c0:	2300      	movs	r3, #0
 80077c2:	e04f      	b.n	8007864 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80077c4:	69f9      	ldr	r1, [r7, #28]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fd63 	bl	8007292 <get_fat>
 80077cc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00e      	beq.n	80077f2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d003      	beq.n	80077e2 <create_chain+0xa6>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e0:	d101      	bne.n	80077e6 <create_chain+0xaa>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	e03e      	b.n	8007864 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d1da      	bne.n	80077a4 <create_chain+0x68>
 80077ee:	2300      	movs	r3, #0
 80077f0:	e038      	b.n	8007864 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80077f2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80077f4:	f04f 32ff 	mov.w	r2, #4294967295
 80077f8:	69f9      	ldr	r1, [r7, #28]
 80077fa:	6938      	ldr	r0, [r7, #16]
 80077fc:	f7ff fe1d 	bl	800743a <put_fat>
 8007800:	4603      	mov	r3, r0
 8007802:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d109      	bne.n	800781e <create_chain+0xe2>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6938      	ldr	r0, [r7, #16]
 8007816:	f7ff fe10 	bl	800743a <put_fat>
 800781a:	4603      	mov	r3, r0
 800781c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d116      	bne.n	8007852 <create_chain+0x116>
		fs->last_clst = ncl;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	695a      	ldr	r2, [r3, #20]
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	3b02      	subs	r3, #2
 8007834:	429a      	cmp	r2, r3
 8007836:	d804      	bhi.n	8007842 <create_chain+0x106>
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	1e5a      	subs	r2, r3, #1
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	791b      	ldrb	r3, [r3, #4]
 8007846:	f043 0301 	orr.w	r3, r3, #1
 800784a:	b2da      	uxtb	r2, r3
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	711a      	strb	r2, [r3, #4]
 8007850:	e007      	b.n	8007862 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d102      	bne.n	800785e <create_chain+0x122>
 8007858:	f04f 33ff 	mov.w	r3, #4294967295
 800785c:	e000      	b.n	8007860 <create_chain+0x124>
 800785e:	2301      	movs	r3, #1
 8007860:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007862:	69fb      	ldr	r3, [r7, #28]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3720      	adds	r7, #32
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	3304      	adds	r3, #4
 8007882:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	899b      	ldrh	r3, [r3, #12]
 8007888:	461a      	mov	r2, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	8952      	ldrh	r2, [r2, #10]
 8007894:	fbb3 f3f2 	udiv	r3, r3, r2
 8007898:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1d1a      	adds	r2, r3, #4
 800789e:	613a      	str	r2, [r7, #16]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <clmt_clust+0x42>
 80078aa:	2300      	movs	r3, #0
 80078ac:	e010      	b.n	80078d0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d307      	bcc.n	80078c6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	3304      	adds	r3, #4
 80078c2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078c4:	e7e9      	b.n	800789a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80078c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	4413      	add	r3, r2
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078f2:	d204      	bcs.n	80078fe <dir_sdi+0x22>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	f003 031f 	and.w	r3, r3, #31
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <dir_sdi+0x26>
		return FR_INT_ERR;
 80078fe:	2302      	movs	r3, #2
 8007900:	e071      	b.n	80079e6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d106      	bne.n	8007922 <dir_sdi+0x46>
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b02      	cmp	r3, #2
 800791a:	d902      	bls.n	8007922 <dir_sdi+0x46>
		clst = fs->dirbase;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007920:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10c      	bne.n	8007942 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	095b      	lsrs	r3, r3, #5
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	8912      	ldrh	r2, [r2, #8]
 8007930:	4293      	cmp	r3, r2
 8007932:	d301      	bcc.n	8007938 <dir_sdi+0x5c>
 8007934:	2302      	movs	r3, #2
 8007936:	e056      	b.n	80079e6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	61da      	str	r2, [r3, #28]
 8007940:	e02d      	b.n	800799e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	895b      	ldrh	r3, [r3, #10]
 8007946:	461a      	mov	r2, r3
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	899b      	ldrh	r3, [r3, #12]
 800794c:	fb02 f303 	mul.w	r3, r2, r3
 8007950:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007952:	e019      	b.n	8007988 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6979      	ldr	r1, [r7, #20]
 8007958:	4618      	mov	r0, r3
 800795a:	f7ff fc9a 	bl	8007292 <get_fat>
 800795e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007966:	d101      	bne.n	800796c <dir_sdi+0x90>
 8007968:	2301      	movs	r3, #1
 800796a:	e03c      	b.n	80079e6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d904      	bls.n	800797c <dir_sdi+0xa0>
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	429a      	cmp	r2, r3
 800797a:	d301      	bcc.n	8007980 <dir_sdi+0xa4>
 800797c:	2302      	movs	r3, #2
 800797e:	e032      	b.n	80079e6 <dir_sdi+0x10a>
			ofs -= csz;
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	429a      	cmp	r2, r3
 800798e:	d2e1      	bcs.n	8007954 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007990:	6979      	ldr	r1, [r7, #20]
 8007992:	6938      	ldr	r0, [r7, #16]
 8007994:	f7ff fc5e 	bl	8007254 <clust2sect>
 8007998:	4602      	mov	r2, r0
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <dir_sdi+0xd4>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e01a      	b.n	80079e6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	69da      	ldr	r2, [r3, #28]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	899b      	ldrh	r3, [r3, #12]
 80079b8:	4619      	mov	r1, r3
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80079c0:	441a      	add	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	899b      	ldrh	r3, [r3, #12]
 80079d0:	461a      	mov	r2, r3
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80079d8:	fb00 f202 	mul.w	r2, r0, r2
 80079dc:	1a9b      	subs	r3, r3, r2
 80079de:	18ca      	adds	r2, r1, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b086      	sub	sp, #24
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	3320      	adds	r3, #32
 8007a04:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <dir_next+0x28>
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a14:	d301      	bcc.n	8007a1a <dir_next+0x2c>
 8007a16:	2304      	movs	r3, #4
 8007a18:	e0bb      	b.n	8007b92 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	899b      	ldrh	r3, [r3, #12]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a26:	fb01 f202 	mul.w	r2, r1, r2
 8007a2a:	1a9b      	subs	r3, r3, r2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f040 809d 	bne.w	8007b6c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10b      	bne.n	8007a5c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	8912      	ldrh	r2, [r2, #8]
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	f0c0 808d 	bcc.w	8007b6c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	61da      	str	r2, [r3, #28]
 8007a58:	2304      	movs	r3, #4
 8007a5a:	e09a      	b.n	8007b92 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	899b      	ldrh	r3, [r3, #12]
 8007a60:	461a      	mov	r2, r3
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	8952      	ldrh	r2, [r2, #10]
 8007a6c:	3a01      	subs	r2, #1
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d17b      	bne.n	8007b6c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	f7ff fc08 	bl	8007292 <get_fat>
 8007a82:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d801      	bhi.n	8007a8e <dir_next+0xa0>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e081      	b.n	8007b92 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a94:	d101      	bne.n	8007a9a <dir_next+0xac>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e07b      	b.n	8007b92 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d359      	bcc.n	8007b58 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d104      	bne.n	8007ab4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	61da      	str	r2, [r3, #28]
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	e06e      	b.n	8007b92 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f7ff fe3d 	bl	800773c <create_chain>
 8007ac2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <dir_next+0xe0>
 8007aca:	2307      	movs	r3, #7
 8007acc:	e061      	b.n	8007b92 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <dir_next+0xea>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e05c      	b.n	8007b92 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ade:	d101      	bne.n	8007ae4 <dir_next+0xf6>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e056      	b.n	8007b92 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff fad3 	bl	8007090 <sync_window>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <dir_next+0x106>
 8007af0:	2301      	movs	r3, #1
 8007af2:	e04e      	b.n	8007b92 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	899b      	ldrh	r3, [r3, #12]
 8007afe:	461a      	mov	r2, r3
 8007b00:	2100      	movs	r1, #0
 8007b02:	f7ff f8fc 	bl	8006cfe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b06:	2300      	movs	r3, #0
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	6979      	ldr	r1, [r7, #20]
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f7ff fba1 	bl	8007254 <clust2sect>
 8007b12:	4602      	mov	r2, r0
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	631a      	str	r2, [r3, #48]	; 0x30
 8007b18:	e012      	b.n	8007b40 <dir_next+0x152>
						fs->wflag = 1;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7ff fab5 	bl	8007090 <sync_window>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <dir_next+0x142>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e030      	b.n	8007b92 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	3301      	adds	r3, #1
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	895b      	ldrh	r3, [r3, #10]
 8007b44:	461a      	mov	r2, r3
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d3e6      	bcc.n	8007b1a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	1ad2      	subs	r2, r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007b5e:	6979      	ldr	r1, [r7, #20]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f7ff fb77 	bl	8007254 <clust2sect>
 8007b66:	4602      	mov	r2, r0
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	899b      	ldrh	r3, [r3, #12]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b84:	fb00 f202 	mul.w	r2, r0, r2
 8007b88:	1a9b      	subs	r3, r3, r2
 8007b8a:	18ca      	adds	r2, r1, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b086      	sub	sp, #24
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007baa:	2100      	movs	r1, #0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff fe95 	bl	80078dc <dir_sdi>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d12b      	bne.n	8007c14 <dir_alloc+0x7a>
		n = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f7ff faa6 	bl	8007118 <move_window>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d11d      	bne.n	8007c12 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2be5      	cmp	r3, #229	; 0xe5
 8007bde:	d004      	beq.n	8007bea <dir_alloc+0x50>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d107      	bne.n	8007bfa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	3301      	adds	r3, #1
 8007bee:	613b      	str	r3, [r7, #16]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d102      	bne.n	8007bfe <dir_alloc+0x64>
 8007bf8:	e00c      	b.n	8007c14 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007bfe:	2101      	movs	r1, #1
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff fef4 	bl	80079ee <dir_next>
 8007c06:	4603      	mov	r3, r0
 8007c08:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0d7      	beq.n	8007bc0 <dir_alloc+0x26>
 8007c10:	e000      	b.n	8007c14 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007c12:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d101      	bne.n	8007c1e <dir_alloc+0x84>
 8007c1a:	2307      	movs	r3, #7
 8007c1c:	75fb      	strb	r3, [r7, #23]
	return res;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	331a      	adds	r3, #26
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe ffbe 	bl	8006bb8 <ld_word>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d109      	bne.n	8007c5c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	3314      	adds	r3, #20
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fe ffb3 	bl	8006bb8 <ld_word>
 8007c52:	4603      	mov	r3, r0
 8007c54:	041b      	lsls	r3, r3, #16
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	331a      	adds	r3, #26
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	b292      	uxth	r2, r2
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fe ffd6 	bl	8006c2e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d109      	bne.n	8007c9e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f103 0214 	add.w	r2, r3, #20
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	0c1b      	lsrs	r3, r3, #16
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f7fe ffc8 	bl	8006c2e <st_word>
	}
}
 8007c9e:	bf00      	nop
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b086      	sub	sp, #24
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff fe10 	bl	80078dc <dir_sdi>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <dir_find+0x24>
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	e03e      	b.n	8007d48 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6938      	ldr	r0, [r7, #16]
 8007cd2:	f7ff fa21 	bl	8007118 <move_window>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d12f      	bne.n	8007d40 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d102      	bne.n	8007cf4 <dir_find+0x4e>
 8007cee:	2304      	movs	r3, #4
 8007cf0:	75fb      	strb	r3, [r7, #23]
 8007cf2:	e028      	b.n	8007d46 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	330b      	adds	r3, #11
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	330b      	adds	r3, #11
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10a      	bne.n	8007d2c <dir_find+0x86>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a18      	ldr	r0, [r3, #32]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3324      	adds	r3, #36	; 0x24
 8007d1e:	220b      	movs	r2, #11
 8007d20:	4619      	mov	r1, r3
 8007d22:	f7ff f807 	bl	8006d34 <mem_cmp>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00b      	beq.n	8007d44 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7ff fe5d 	bl	80079ee <dir_next>
 8007d34:	4603      	mov	r3, r0
 8007d36:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0c5      	beq.n	8007cca <dir_find+0x24>
 8007d3e:	e002      	b.n	8007d46 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007d40:	bf00      	nop
 8007d42:	e000      	b.n	8007d46 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d44:	bf00      	nop

	return res;
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007d5e:	2101      	movs	r1, #1
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff ff1a 	bl	8007b9a <dir_alloc>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d11c      	bne.n	8007daa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	4619      	mov	r1, r3
 8007d76:	68b8      	ldr	r0, [r7, #8]
 8007d78:	f7ff f9ce 	bl	8007118 <move_window>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d111      	bne.n	8007daa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe ffb5 	bl	8006cfe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a18      	ldr	r0, [r3, #32]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3324      	adds	r3, #36	; 0x24
 8007d9c:	220b      	movs	r2, #11
 8007d9e:	4619      	mov	r1, r3
 8007da0:	f7fe ff8c 	bl	8006cbc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2201      	movs	r2, #1
 8007da8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d04e      	beq.n	8007e6a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	613b      	str	r3, [r7, #16]
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007dd4:	e021      	b.n	8007e1a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1a      	ldr	r2, [r3, #32]
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	1c59      	adds	r1, r3, #1
 8007dde:	6179      	str	r1, [r7, #20]
 8007de0:	4413      	add	r3, r2
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	2b20      	cmp	r3, #32
 8007dea:	d100      	bne.n	8007dee <get_fileinfo+0x3a>
 8007dec:	e015      	b.n	8007e1a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	2b05      	cmp	r3, #5
 8007df2:	d101      	bne.n	8007df8 <get_fileinfo+0x44>
 8007df4:	23e5      	movs	r3, #229	; 0xe5
 8007df6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2b09      	cmp	r3, #9
 8007dfc:	d106      	bne.n	8007e0c <get_fileinfo+0x58>
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	613a      	str	r2, [r7, #16]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	4413      	add	r3, r2
 8007e08:	222e      	movs	r2, #46	; 0x2e
 8007e0a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	613a      	str	r2, [r7, #16]
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	4413      	add	r3, r2
 8007e16:	7bfa      	ldrb	r2, [r7, #15]
 8007e18:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b0a      	cmp	r3, #10
 8007e1e:	d9da      	bls.n	8007dd6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	4413      	add	r3, r2
 8007e26:	3309      	adds	r3, #9
 8007e28:	2200      	movs	r2, #0
 8007e2a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	7ada      	ldrb	r2, [r3, #11]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	331c      	adds	r3, #28
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fe fed3 	bl	8006be8 <ld_dword>
 8007e42:	4602      	mov	r2, r0
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	3316      	adds	r3, #22
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fe feca 	bl	8006be8 <ld_dword>
 8007e54:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	80da      	strh	r2, [r3, #6]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	0c1b      	lsrs	r3, r3, #16
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	809a      	strh	r2, [r3, #4]
 8007e68:	e000      	b.n	8007e6c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007e6a:	bf00      	nop
}
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3324      	adds	r3, #36	; 0x24
 8007e88:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007e8a:	220b      	movs	r2, #11
 8007e8c:	2120      	movs	r1, #32
 8007e8e:	68b8      	ldr	r0, [r7, #8]
 8007e90:	f7fe ff35 	bl	8006cfe <mem_set>
	si = i = 0; ni = 8;
 8007e94:	2300      	movs	r3, #0
 8007e96:	613b      	str	r3, [r7, #16]
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	61fb      	str	r3, [r7, #28]
 8007e9c:	2308      	movs	r3, #8
 8007e9e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	61fa      	str	r2, [r7, #28]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007eae:	7efb      	ldrb	r3, [r7, #27]
 8007eb0:	2b20      	cmp	r3, #32
 8007eb2:	d94e      	bls.n	8007f52 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007eb4:	7efb      	ldrb	r3, [r7, #27]
 8007eb6:	2b2f      	cmp	r3, #47	; 0x2f
 8007eb8:	d006      	beq.n	8007ec8 <create_name+0x54>
 8007eba:	7efb      	ldrb	r3, [r7, #27]
 8007ebc:	2b5c      	cmp	r3, #92	; 0x5c
 8007ebe:	d110      	bne.n	8007ee2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007ec0:	e002      	b.n	8007ec8 <create_name+0x54>
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	61fb      	str	r3, [r7, #28]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	4413      	add	r3, r2
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b2f      	cmp	r3, #47	; 0x2f
 8007ed2:	d0f6      	beq.n	8007ec2 <create_name+0x4e>
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	4413      	add	r3, r2
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b5c      	cmp	r3, #92	; 0x5c
 8007ede:	d0f0      	beq.n	8007ec2 <create_name+0x4e>
			break;
 8007ee0:	e038      	b.n	8007f54 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007ee2:	7efb      	ldrb	r3, [r7, #27]
 8007ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ee6:	d003      	beq.n	8007ef0 <create_name+0x7c>
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d30c      	bcc.n	8007f0a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	2b0b      	cmp	r3, #11
 8007ef4:	d002      	beq.n	8007efc <create_name+0x88>
 8007ef6:	7efb      	ldrb	r3, [r7, #27]
 8007ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8007efa:	d001      	beq.n	8007f00 <create_name+0x8c>
 8007efc:	2306      	movs	r3, #6
 8007efe:	e044      	b.n	8007f8a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007f00:	2308      	movs	r3, #8
 8007f02:	613b      	str	r3, [r7, #16]
 8007f04:	230b      	movs	r3, #11
 8007f06:	617b      	str	r3, [r7, #20]
			continue;
 8007f08:	e022      	b.n	8007f50 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007f0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	da04      	bge.n	8007f1c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007f12:	7efb      	ldrb	r3, [r7, #27]
 8007f14:	3b80      	subs	r3, #128	; 0x80
 8007f16:	4a1f      	ldr	r2, [pc, #124]	; (8007f94 <create_name+0x120>)
 8007f18:	5cd3      	ldrb	r3, [r2, r3]
 8007f1a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007f1c:	7efb      	ldrb	r3, [r7, #27]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	481d      	ldr	r0, [pc, #116]	; (8007f98 <create_name+0x124>)
 8007f22:	f7fe ff2e 	bl	8006d82 <chk_chr>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <create_name+0xbc>
 8007f2c:	2306      	movs	r3, #6
 8007f2e:	e02c      	b.n	8007f8a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007f30:	7efb      	ldrb	r3, [r7, #27]
 8007f32:	2b60      	cmp	r3, #96	; 0x60
 8007f34:	d905      	bls.n	8007f42 <create_name+0xce>
 8007f36:	7efb      	ldrb	r3, [r7, #27]
 8007f38:	2b7a      	cmp	r3, #122	; 0x7a
 8007f3a:	d802      	bhi.n	8007f42 <create_name+0xce>
 8007f3c:	7efb      	ldrb	r3, [r7, #27]
 8007f3e:	3b20      	subs	r3, #32
 8007f40:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	1c5a      	adds	r2, r3, #1
 8007f46:	613a      	str	r2, [r7, #16]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	7efa      	ldrb	r2, [r7, #27]
 8007f4e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007f50:	e7a6      	b.n	8007ea0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007f52:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	441a      	add	r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <create_name+0xf4>
 8007f64:	2306      	movs	r3, #6
 8007f66:	e010      	b.n	8007f8a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2be5      	cmp	r3, #229	; 0xe5
 8007f6e:	d102      	bne.n	8007f76 <create_name+0x102>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2205      	movs	r2, #5
 8007f74:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007f76:	7efb      	ldrb	r3, [r7, #27]
 8007f78:	2b20      	cmp	r3, #32
 8007f7a:	d801      	bhi.n	8007f80 <create_name+0x10c>
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	e000      	b.n	8007f82 <create_name+0x10e>
 8007f80:	2200      	movs	r2, #0
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	330b      	adds	r3, #11
 8007f86:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007f88:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3720      	adds	r7, #32
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	0800ad04 	.word	0x0800ad04
 8007f98:	0800ac8c 	.word	0x0800ac8c

08007f9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007fb0:	e002      	b.n	8007fb8 <follow_path+0x1c>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	2b2f      	cmp	r3, #47	; 0x2f
 8007fbe:	d0f8      	beq.n	8007fb2 <follow_path+0x16>
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b5c      	cmp	r3, #92	; 0x5c
 8007fc6:	d0f4      	beq.n	8007fb2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b1f      	cmp	r3, #31
 8007fd4:	d80a      	bhi.n	8007fec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2280      	movs	r2, #128	; 0x80
 8007fda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007fde:	2100      	movs	r1, #0
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7ff fc7b 	bl	80078dc <dir_sdi>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	75fb      	strb	r3, [r7, #23]
 8007fea:	e048      	b.n	800807e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007fec:	463b      	mov	r3, r7
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff ff3f 	bl	8007e74 <create_name>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d139      	bne.n	8008074 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff fe50 	bl	8007ca6 <dir_find>
 8008006:	4603      	mov	r3, r0
 8008008:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008010:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00a      	beq.n	800802e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	2b04      	cmp	r3, #4
 800801c:	d12c      	bne.n	8008078 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800801e:	7afb      	ldrb	r3, [r7, #11]
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b00      	cmp	r3, #0
 8008026:	d127      	bne.n	8008078 <follow_path+0xdc>
 8008028:	2305      	movs	r3, #5
 800802a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800802c:	e024      	b.n	8008078 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800802e:	7afb      	ldrb	r3, [r7, #11]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d121      	bne.n	800807c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	799b      	ldrb	r3, [r3, #6]
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b00      	cmp	r3, #0
 8008042:	d102      	bne.n	800804a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008044:	2305      	movs	r3, #5
 8008046:	75fb      	strb	r3, [r7, #23]
 8008048:	e019      	b.n	800807e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	8992      	ldrh	r2, [r2, #12]
 8008058:	fbb3 f0f2 	udiv	r0, r3, r2
 800805c:	fb00 f202 	mul.w	r2, r0, r2
 8008060:	1a9b      	subs	r3, r3, r2
 8008062:	440b      	add	r3, r1
 8008064:	4619      	mov	r1, r3
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7ff fdde 	bl	8007c28 <ld_clust>
 800806c:	4602      	mov	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008072:	e7bb      	b.n	8007fec <follow_path+0x50>
			if (res != FR_OK) break;
 8008074:	bf00      	nop
 8008076:	e002      	b.n	800807e <follow_path+0xe2>
				break;
 8008078:	bf00      	nop
 800807a:	e000      	b.n	800807e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800807c:	bf00      	nop
			}
		}
	}

	return res;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008090:	f04f 33ff 	mov.w	r3, #4294967295
 8008094:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d031      	beq.n	8008102 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	e002      	b.n	80080ac <get_ldnumber+0x24>
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	3301      	adds	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d903      	bls.n	80080bc <get_ldnumber+0x34>
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b3a      	cmp	r3, #58	; 0x3a
 80080ba:	d1f4      	bne.n	80080a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b3a      	cmp	r3, #58	; 0x3a
 80080c2:	d11c      	bne.n	80080fe <get_ldnumber+0x76>
			tp = *path;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	60fa      	str	r2, [r7, #12]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	3b30      	subs	r3, #48	; 0x30
 80080d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2b09      	cmp	r3, #9
 80080da:	d80e      	bhi.n	80080fa <get_ldnumber+0x72>
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d10a      	bne.n	80080fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d107      	bne.n	80080fa <get_ldnumber+0x72>
					vol = (int)i;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	3301      	adds	r3, #1
 80080f2:	617b      	str	r3, [r7, #20]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	e002      	b.n	8008104 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008102:	693b      	ldr	r3, [r7, #16]
}
 8008104:	4618      	mov	r0, r3
 8008106:	371c      	adds	r7, #28
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	70da      	strb	r2, [r3, #3]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f04f 32ff 	mov.w	r2, #4294967295
 8008126:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7fe fff4 	bl	8007118 <move_window>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <check_fs+0x2a>
 8008136:	2304      	movs	r3, #4
 8008138:	e038      	b.n	80081ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3334      	adds	r3, #52	; 0x34
 800813e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fd38 	bl	8006bb8 <ld_word>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008150:	429a      	cmp	r2, r3
 8008152:	d001      	beq.n	8008158 <check_fs+0x48>
 8008154:	2303      	movs	r3, #3
 8008156:	e029      	b.n	80081ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800815e:	2be9      	cmp	r3, #233	; 0xe9
 8008160:	d009      	beq.n	8008176 <check_fs+0x66>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008168:	2beb      	cmp	r3, #235	; 0xeb
 800816a:	d11e      	bne.n	80081aa <check_fs+0x9a>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008172:	2b90      	cmp	r3, #144	; 0x90
 8008174:	d119      	bne.n	80081aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3334      	adds	r3, #52	; 0x34
 800817a:	3336      	adds	r3, #54	; 0x36
 800817c:	4618      	mov	r0, r3
 800817e:	f7fe fd33 	bl	8006be8 <ld_dword>
 8008182:	4603      	mov	r3, r0
 8008184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008188:	4a0a      	ldr	r2, [pc, #40]	; (80081b4 <check_fs+0xa4>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d101      	bne.n	8008192 <check_fs+0x82>
 800818e:	2300      	movs	r3, #0
 8008190:	e00c      	b.n	80081ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3334      	adds	r3, #52	; 0x34
 8008196:	3352      	adds	r3, #82	; 0x52
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe fd25 	bl	8006be8 <ld_dword>
 800819e:	4603      	mov	r3, r0
 80081a0:	4a05      	ldr	r2, [pc, #20]	; (80081b8 <check_fs+0xa8>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d101      	bne.n	80081aa <check_fs+0x9a>
 80081a6:	2300      	movs	r3, #0
 80081a8:	e000      	b.n	80081ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80081aa:	2302      	movs	r3, #2
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	00544146 	.word	0x00544146
 80081b8:	33544146 	.word	0x33544146

080081bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b096      	sub	sp, #88	; 0x58
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	4613      	mov	r3, r2
 80081c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2200      	movs	r2, #0
 80081ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f7ff ff59 	bl	8008088 <get_ldnumber>
 80081d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80081d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	da01      	bge.n	80081e2 <find_volume+0x26>
 80081de:	230b      	movs	r3, #11
 80081e0:	e262      	b.n	80086a8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80081e2:	4a9f      	ldr	r2, [pc, #636]	; (8008460 <find_volume+0x2a4>)
 80081e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <find_volume+0x3a>
 80081f2:	230c      	movs	r3, #12
 80081f4:	e258      	b.n	80086a8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	f023 0301 	bic.w	r3, r3, #1
 8008202:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01a      	beq.n	8008242 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	785b      	ldrb	r3, [r3, #1]
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe fc33 	bl	8006a7c <disk_status>
 8008216:	4603      	mov	r3, r0
 8008218:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800821c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10c      	bne.n	8008242 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <find_volume+0x82>
 800822e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008232:	f003 0304 	and.w	r3, r3, #4
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800823a:	230a      	movs	r3, #10
 800823c:	e234      	b.n	80086a8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800823e:	2300      	movs	r3, #0
 8008240:	e232      	b.n	80086a8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824a:	b2da      	uxtb	r2, r3
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008252:	785b      	ldrb	r3, [r3, #1]
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe fc2b 	bl	8006ab0 <disk_initialize>
 800825a:	4603      	mov	r3, r0
 800825c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800826c:	2303      	movs	r3, #3
 800826e:	e21b      	b.n	80086a8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <find_volume+0xca>
 8008276:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800827a:	f003 0304 	and.w	r3, r3, #4
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008282:	230a      	movs	r3, #10
 8008284:	e210      	b.n	80086a8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008288:	7858      	ldrb	r0, [r3, #1]
 800828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828c:	330c      	adds	r3, #12
 800828e:	461a      	mov	r2, r3
 8008290:	2102      	movs	r1, #2
 8008292:	f7fe fc73 	bl	8006b7c <disk_ioctl>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <find_volume+0xe4>
 800829c:	2301      	movs	r3, #1
 800829e:	e203      	b.n	80086a8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	899b      	ldrh	r3, [r3, #12]
 80082a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a8:	d80d      	bhi.n	80082c6 <find_volume+0x10a>
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	899b      	ldrh	r3, [r3, #12]
 80082ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082b2:	d308      	bcc.n	80082c6 <find_volume+0x10a>
 80082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b6:	899b      	ldrh	r3, [r3, #12]
 80082b8:	461a      	mov	r2, r3
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	899b      	ldrh	r3, [r3, #12]
 80082be:	3b01      	subs	r3, #1
 80082c0:	4013      	ands	r3, r2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <find_volume+0x10e>
 80082c6:	2301      	movs	r3, #1
 80082c8:	e1ee      	b.n	80086a8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80082ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082d2:	f7ff ff1d 	bl	8008110 <check_fs>
 80082d6:	4603      	mov	r3, r0
 80082d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80082dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d149      	bne.n	8008378 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80082e4:	2300      	movs	r3, #0
 80082e6:	643b      	str	r3, [r7, #64]	; 0x40
 80082e8:	e01e      	b.n	8008328 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80082ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80082f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f2:	011b      	lsls	r3, r3, #4
 80082f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80082f8:	4413      	add	r3, r2
 80082fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80082fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fe:	3304      	adds	r3, #4
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d006      	beq.n	8008314 <find_volume+0x158>
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	3308      	adds	r3, #8
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fc6c 	bl	8006be8 <ld_dword>
 8008310:	4602      	mov	r2, r0
 8008312:	e000      	b.n	8008316 <find_volume+0x15a>
 8008314:	2200      	movs	r2, #0
 8008316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	3358      	adds	r3, #88	; 0x58
 800831c:	443b      	add	r3, r7
 800831e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008324:	3301      	adds	r3, #1
 8008326:	643b      	str	r3, [r7, #64]	; 0x40
 8008328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800832a:	2b03      	cmp	r3, #3
 800832c:	d9dd      	bls.n	80082ea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800832e:	2300      	movs	r3, #0
 8008330:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <find_volume+0x182>
 8008338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800833a:	3b01      	subs	r3, #1
 800833c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800833e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	3358      	adds	r3, #88	; 0x58
 8008344:	443b      	add	r3, r7
 8008346:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800834a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800834c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800834e:	2b00      	cmp	r3, #0
 8008350:	d005      	beq.n	800835e <find_volume+0x1a2>
 8008352:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008354:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008356:	f7ff fedb 	bl	8008110 <check_fs>
 800835a:	4603      	mov	r3, r0
 800835c:	e000      	b.n	8008360 <find_volume+0x1a4>
 800835e:	2303      	movs	r3, #3
 8008360:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008368:	2b01      	cmp	r3, #1
 800836a:	d905      	bls.n	8008378 <find_volume+0x1bc>
 800836c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800836e:	3301      	adds	r3, #1
 8008370:	643b      	str	r3, [r7, #64]	; 0x40
 8008372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008374:	2b03      	cmp	r3, #3
 8008376:	d9e2      	bls.n	800833e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008378:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800837c:	2b04      	cmp	r3, #4
 800837e:	d101      	bne.n	8008384 <find_volume+0x1c8>
 8008380:	2301      	movs	r3, #1
 8008382:	e191      	b.n	80086a8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008384:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008388:	2b01      	cmp	r3, #1
 800838a:	d901      	bls.n	8008390 <find_volume+0x1d4>
 800838c:	230d      	movs	r3, #13
 800838e:	e18b      	b.n	80086a8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	3334      	adds	r3, #52	; 0x34
 8008394:	330b      	adds	r3, #11
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe fc0e 	bl	8006bb8 <ld_word>
 800839c:	4603      	mov	r3, r0
 800839e:	461a      	mov	r2, r3
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	899b      	ldrh	r3, [r3, #12]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d001      	beq.n	80083ac <find_volume+0x1f0>
 80083a8:	230d      	movs	r3, #13
 80083aa:	e17d      	b.n	80086a8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	3334      	adds	r3, #52	; 0x34
 80083b0:	3316      	adds	r3, #22
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe fc00 	bl	8006bb8 <ld_word>
 80083b8:	4603      	mov	r3, r0
 80083ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80083bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d106      	bne.n	80083d0 <find_volume+0x214>
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	3334      	adds	r3, #52	; 0x34
 80083c6:	3324      	adds	r3, #36	; 0x24
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe fc0d 	bl	8006be8 <ld_dword>
 80083ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083d4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	789b      	ldrb	r3, [r3, #2]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d005      	beq.n	80083f4 <find_volume+0x238>
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	789b      	ldrb	r3, [r3, #2]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d001      	beq.n	80083f4 <find_volume+0x238>
 80083f0:	230d      	movs	r3, #13
 80083f2:	e159      	b.n	80086a8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	789b      	ldrb	r3, [r3, #2]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083fc:	fb02 f303 	mul.w	r3, r2, r3
 8008400:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008408:	b29a      	uxth	r2, r3
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008410:	895b      	ldrh	r3, [r3, #10]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d008      	beq.n	8008428 <find_volume+0x26c>
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008418:	895b      	ldrh	r3, [r3, #10]
 800841a:	461a      	mov	r2, r3
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	895b      	ldrh	r3, [r3, #10]
 8008420:	3b01      	subs	r3, #1
 8008422:	4013      	ands	r3, r2
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <find_volume+0x270>
 8008428:	230d      	movs	r3, #13
 800842a:	e13d      	b.n	80086a8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	3334      	adds	r3, #52	; 0x34
 8008430:	3311      	adds	r3, #17
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fbc0 	bl	8006bb8 <ld_word>
 8008438:	4603      	mov	r3, r0
 800843a:	461a      	mov	r2, r3
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	891b      	ldrh	r3, [r3, #8]
 8008444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008446:	8992      	ldrh	r2, [r2, #12]
 8008448:	0952      	lsrs	r2, r2, #5
 800844a:	b292      	uxth	r2, r2
 800844c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008450:	fb01 f202 	mul.w	r2, r1, r2
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	b29b      	uxth	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <find_volume+0x2a8>
 800845c:	230d      	movs	r3, #13
 800845e:	e123      	b.n	80086a8 <find_volume+0x4ec>
 8008460:	20002660 	.word	0x20002660

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	3334      	adds	r3, #52	; 0x34
 8008468:	3313      	adds	r3, #19
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe fba4 	bl	8006bb8 <ld_word>
 8008470:	4603      	mov	r3, r0
 8008472:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <find_volume+0x2cc>
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	3334      	adds	r3, #52	; 0x34
 800847e:	3320      	adds	r3, #32
 8008480:	4618      	mov	r0, r3
 8008482:	f7fe fbb1 	bl	8006be8 <ld_dword>
 8008486:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	3334      	adds	r3, #52	; 0x34
 800848c:	330e      	adds	r3, #14
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe fb92 	bl	8006bb8 <ld_word>
 8008494:	4603      	mov	r3, r0
 8008496:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008498:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <find_volume+0x2e6>
 800849e:	230d      	movs	r3, #13
 80084a0:	e102      	b.n	80086a8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80084a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80084a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a6:	4413      	add	r3, r2
 80084a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084aa:	8911      	ldrh	r1, [r2, #8]
 80084ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ae:	8992      	ldrh	r2, [r2, #12]
 80084b0:	0952      	lsrs	r2, r2, #5
 80084b2:	b292      	uxth	r2, r2
 80084b4:	fbb1 f2f2 	udiv	r2, r1, r2
 80084b8:	b292      	uxth	r2, r2
 80084ba:	4413      	add	r3, r2
 80084bc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80084be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d201      	bcs.n	80084ca <find_volume+0x30e>
 80084c6:	230d      	movs	r3, #13
 80084c8:	e0ee      	b.n	80086a8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80084ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084d2:	8952      	ldrh	r2, [r2, #10]
 80084d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <find_volume+0x328>
 80084e0:	230d      	movs	r3, #13
 80084e2:	e0e1      	b.n	80086a8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80084e4:	2303      	movs	r3, #3
 80084e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d802      	bhi.n	80084fa <find_volume+0x33e>
 80084f4:	2302      	movs	r3, #2
 80084f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008500:	4293      	cmp	r3, r2
 8008502:	d802      	bhi.n	800850a <find_volume+0x34e>
 8008504:	2301      	movs	r3, #1
 8008506:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	1c9a      	adds	r2, r3, #2
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008516:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008518:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800851a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800851c:	441a      	add	r2, r3
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008522:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	441a      	add	r2, r3
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800852c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008530:	2b03      	cmp	r3, #3
 8008532:	d11e      	bne.n	8008572 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	3334      	adds	r3, #52	; 0x34
 8008538:	332a      	adds	r3, #42	; 0x2a
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fb3c 	bl	8006bb8 <ld_word>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <find_volume+0x38e>
 8008546:	230d      	movs	r3, #13
 8008548:	e0ae      	b.n	80086a8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	891b      	ldrh	r3, [r3, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <find_volume+0x39a>
 8008552:	230d      	movs	r3, #13
 8008554:	e0a8      	b.n	80086a8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	3334      	adds	r3, #52	; 0x34
 800855a:	332c      	adds	r3, #44	; 0x2c
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe fb43 	bl	8006be8 <ld_dword>
 8008562:	4602      	mov	r2, r0
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	647b      	str	r3, [r7, #68]	; 0x44
 8008570:	e01f      	b.n	80085b2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008574:	891b      	ldrh	r3, [r3, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <find_volume+0x3c2>
 800857a:	230d      	movs	r3, #13
 800857c:	e094      	b.n	80086a8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008584:	441a      	add	r2, r3
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800858a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800858e:	2b02      	cmp	r3, #2
 8008590:	d103      	bne.n	800859a <find_volume+0x3de>
 8008592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	e00a      	b.n	80085b0 <find_volume+0x3f4>
 800859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859c:	699a      	ldr	r2, [r3, #24]
 800859e:	4613      	mov	r3, r2
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	4413      	add	r3, r2
 80085a4:	085a      	lsrs	r2, r3, #1
 80085a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80085b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80085b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b4:	69da      	ldr	r2, [r3, #28]
 80085b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b8:	899b      	ldrh	r3, [r3, #12]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085be:	440b      	add	r3, r1
 80085c0:	3b01      	subs	r3, #1
 80085c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085c4:	8989      	ldrh	r1, [r1, #12]
 80085c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d201      	bcs.n	80085d2 <find_volume+0x416>
 80085ce:	230d      	movs	r3, #13
 80085d0:	e06a      	b.n	80086a8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	f04f 32ff 	mov.w	r2, #4294967295
 80085d8:	615a      	str	r2, [r3, #20]
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	695a      	ldr	r2, [r3, #20]
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	2280      	movs	r2, #128	; 0x80
 80085e6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80085e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d149      	bne.n	8008684 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	3334      	adds	r3, #52	; 0x34
 80085f4:	3330      	adds	r3, #48	; 0x30
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe fade 	bl	8006bb8 <ld_word>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d140      	bne.n	8008684 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008604:	3301      	adds	r3, #1
 8008606:	4619      	mov	r1, r3
 8008608:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800860a:	f7fe fd85 	bl	8007118 <move_window>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d137      	bne.n	8008684 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	2200      	movs	r2, #0
 8008618:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	3334      	adds	r3, #52	; 0x34
 800861e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe fac8 	bl	8006bb8 <ld_word>
 8008628:	4603      	mov	r3, r0
 800862a:	461a      	mov	r2, r3
 800862c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008630:	429a      	cmp	r2, r3
 8008632:	d127      	bne.n	8008684 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008636:	3334      	adds	r3, #52	; 0x34
 8008638:	4618      	mov	r0, r3
 800863a:	f7fe fad5 	bl	8006be8 <ld_dword>
 800863e:	4603      	mov	r3, r0
 8008640:	4a1b      	ldr	r2, [pc, #108]	; (80086b0 <find_volume+0x4f4>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d11e      	bne.n	8008684 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	3334      	adds	r3, #52	; 0x34
 800864a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe faca 	bl	8006be8 <ld_dword>
 8008654:	4603      	mov	r3, r0
 8008656:	4a17      	ldr	r2, [pc, #92]	; (80086b4 <find_volume+0x4f8>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d113      	bne.n	8008684 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	3334      	adds	r3, #52	; 0x34
 8008660:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008664:	4618      	mov	r0, r3
 8008666:	f7fe fabf 	bl	8006be8 <ld_dword>
 800866a:	4602      	mov	r2, r0
 800866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008672:	3334      	adds	r3, #52	; 0x34
 8008674:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008678:	4618      	mov	r0, r3
 800867a:	f7fe fab5 	bl	8006be8 <ld_dword>
 800867e:	4602      	mov	r2, r0
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008686:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800868a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800868c:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <find_volume+0x4fc>)
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	3301      	adds	r3, #1
 8008692:	b29a      	uxth	r2, r3
 8008694:	4b08      	ldr	r3, [pc, #32]	; (80086b8 <find_volume+0x4fc>)
 8008696:	801a      	strh	r2, [r3, #0]
 8008698:	4b07      	ldr	r3, [pc, #28]	; (80086b8 <find_volume+0x4fc>)
 800869a:	881a      	ldrh	r2, [r3, #0]
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80086a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086a2:	f7fe fcd1 	bl	8007048 <clear_lock>
#endif
	return FR_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3758      	adds	r7, #88	; 0x58
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	41615252 	.word	0x41615252
 80086b4:	61417272 	.word	0x61417272
 80086b8:	20002664 	.word	0x20002664

080086bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80086c6:	2309      	movs	r3, #9
 80086c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d01c      	beq.n	800870a <validate+0x4e>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d018      	beq.n	800870a <validate+0x4e>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d013      	beq.n	800870a <validate+0x4e>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	889a      	ldrh	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	88db      	ldrh	r3, [r3, #6]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d10c      	bne.n	800870a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	785b      	ldrb	r3, [r3, #1]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe f9c0 	bl	8006a7c <disk_status>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <validate+0x4e>
			res = FR_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <validate+0x5a>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	e000      	b.n	8008718 <validate+0x5c>
 8008716:	2300      	movs	r3, #0
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	6013      	str	r3, [r2, #0]
	return res;
 800871c:	7bfb      	ldrb	r3, [r7, #15]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	4613      	mov	r3, r2
 8008734:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800873a:	f107 0310 	add.w	r3, r7, #16
 800873e:	4618      	mov	r0, r3
 8008740:	f7ff fca2 	bl	8008088 <get_ldnumber>
 8008744:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	2b00      	cmp	r3, #0
 800874a:	da01      	bge.n	8008750 <f_mount+0x28>
 800874c:	230b      	movs	r3, #11
 800874e:	e02b      	b.n	80087a8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008750:	4a17      	ldr	r2, [pc, #92]	; (80087b0 <f_mount+0x88>)
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008758:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d005      	beq.n	800876c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008760:	69b8      	ldr	r0, [r7, #24]
 8008762:	f7fe fc71 	bl	8007048 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	2200      	movs	r2, #0
 800876a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	490d      	ldr	r1, [pc, #52]	; (80087b0 <f_mount+0x88>)
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <f_mount+0x66>
 8008788:	79fb      	ldrb	r3, [r7, #7]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d001      	beq.n	8008792 <f_mount+0x6a>
 800878e:	2300      	movs	r3, #0
 8008790:	e00a      	b.n	80087a8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008792:	f107 010c 	add.w	r1, r7, #12
 8008796:	f107 0308 	add.w	r3, r7, #8
 800879a:	2200      	movs	r2, #0
 800879c:	4618      	mov	r0, r3
 800879e:	f7ff fd0d 	bl	80081bc <find_volume>
 80087a2:	4603      	mov	r3, r0
 80087a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	20002660 	.word	0x20002660

080087b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b098      	sub	sp, #96	; 0x60
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	4613      	mov	r3, r2
 80087c0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <f_open+0x18>
 80087c8:	2309      	movs	r3, #9
 80087ca:	e1bb      	b.n	8008b44 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087d2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80087d4:	79fa      	ldrb	r2, [r7, #7]
 80087d6:	f107 0110 	add.w	r1, r7, #16
 80087da:	f107 0308 	add.w	r3, r7, #8
 80087de:	4618      	mov	r0, r3
 80087e0:	f7ff fcec 	bl	80081bc <find_volume>
 80087e4:	4603      	mov	r3, r0
 80087e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80087ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f040 819f 	bne.w	8008b32 <f_open+0x37e>
		dj.obj.fs = fs;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	f107 0314 	add.w	r3, r7, #20
 80087fe:	4611      	mov	r1, r2
 8008800:	4618      	mov	r0, r3
 8008802:	f7ff fbcb 	bl	8007f9c <follow_path>
 8008806:	4603      	mov	r3, r0
 8008808:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800880c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008810:	2b00      	cmp	r3, #0
 8008812:	d11a      	bne.n	800884a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008814:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008818:	b25b      	sxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	da03      	bge.n	8008826 <f_open+0x72>
				res = FR_INVALID_NAME;
 800881e:	2306      	movs	r3, #6
 8008820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008824:	e011      	b.n	800884a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	f023 0301 	bic.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	bf14      	ite	ne
 8008830:	2301      	movne	r3, #1
 8008832:	2300      	moveq	r3, #0
 8008834:	b2db      	uxtb	r3, r3
 8008836:	461a      	mov	r2, r3
 8008838:	f107 0314 	add.w	r3, r7, #20
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe faba 	bl	8006db8 <chk_lock>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	f003 031c 	and.w	r3, r3, #28
 8008850:	2b00      	cmp	r3, #0
 8008852:	d07f      	beq.n	8008954 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008854:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008858:	2b00      	cmp	r3, #0
 800885a:	d017      	beq.n	800888c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800885c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008860:	2b04      	cmp	r3, #4
 8008862:	d10e      	bne.n	8008882 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008864:	f7fe fb04 	bl	8006e70 <enq_lock>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d006      	beq.n	800887c <f_open+0xc8>
 800886e:	f107 0314 	add.w	r3, r7, #20
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff fa6c 	bl	8007d50 <dir_register>
 8008878:	4603      	mov	r3, r0
 800887a:	e000      	b.n	800887e <f_open+0xca>
 800887c:	2312      	movs	r3, #18
 800887e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	f043 0308 	orr.w	r3, r3, #8
 8008888:	71fb      	strb	r3, [r7, #7]
 800888a:	e010      	b.n	80088ae <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800888c:	7ebb      	ldrb	r3, [r7, #26]
 800888e:	f003 0311 	and.w	r3, r3, #17
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <f_open+0xea>
					res = FR_DENIED;
 8008896:	2307      	movs	r3, #7
 8008898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800889c:	e007      	b.n	80088ae <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800889e:	79fb      	ldrb	r3, [r7, #7]
 80088a0:	f003 0304 	and.w	r3, r3, #4
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <f_open+0xfa>
 80088a8:	2308      	movs	r3, #8
 80088aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80088ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d168      	bne.n	8008988 <f_open+0x1d4>
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	f003 0308 	and.w	r3, r3, #8
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d063      	beq.n	8008988 <f_open+0x1d4>
				dw = GET_FATTIME();
 80088c0:	f7fd ff22 	bl	8006708 <get_fattime>
 80088c4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80088c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c8:	330e      	adds	r3, #14
 80088ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe f9c9 	bl	8006c64 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80088d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d4:	3316      	adds	r3, #22
 80088d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fe f9c3 	bl	8006c64 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	330b      	adds	r3, #11
 80088e2:	2220      	movs	r2, #32
 80088e4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7ff f99b 	bl	8007c28 <ld_clust>
 80088f2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088f8:	2200      	movs	r2, #0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7ff f9b3 	bl	8007c66 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008902:	331c      	adds	r3, #28
 8008904:	2100      	movs	r1, #0
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe f9ac 	bl	8006c64 <st_dword>
					fs->wflag = 1;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2201      	movs	r2, #1
 8008910:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d037      	beq.n	8008988 <f_open+0x1d4>
						dw = fs->winsect;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800891e:	f107 0314 	add.w	r3, r7, #20
 8008922:	2200      	movs	r2, #0
 8008924:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe fea3 	bl	8007672 <remove_chain>
 800892c:	4603      	mov	r3, r0
 800892e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008936:	2b00      	cmp	r3, #0
 8008938:	d126      	bne.n	8008988 <f_open+0x1d4>
							res = move_window(fs, dw);
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe fbea 	bl	8007118 <move_window>
 8008944:	4603      	mov	r3, r0
 8008946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800894e:	3a01      	subs	r2, #1
 8008950:	611a      	str	r2, [r3, #16]
 8008952:	e019      	b.n	8008988 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008958:	2b00      	cmp	r3, #0
 800895a:	d115      	bne.n	8008988 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800895c:	7ebb      	ldrb	r3, [r7, #26]
 800895e:	f003 0310 	and.w	r3, r3, #16
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008966:	2304      	movs	r3, #4
 8008968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800896c:	e00c      	b.n	8008988 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d007      	beq.n	8008988 <f_open+0x1d4>
 8008978:	7ebb      	ldrb	r3, [r7, #26]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <f_open+0x1d4>
						res = FR_DENIED;
 8008982:	2307      	movs	r3, #7
 8008984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800898c:	2b00      	cmp	r3, #0
 800898e:	d128      	bne.n	80089e2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	f003 0308 	and.w	r3, r3, #8
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800899a:	79fb      	ldrb	r3, [r7, #7]
 800899c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80089aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	f023 0301 	bic.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	bf14      	ite	ne
 80089ba:	2301      	movne	r3, #1
 80089bc:	2300      	moveq	r3, #0
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	461a      	mov	r2, r3
 80089c2:	f107 0314 	add.w	r3, r7, #20
 80089c6:	4611      	mov	r1, r2
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fe fa73 	bl	8006eb4 <inc_lock>
 80089ce:	4602      	mov	r2, r0
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d102      	bne.n	80089e2 <f_open+0x22e>
 80089dc:	2302      	movs	r3, #2
 80089de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80089e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f040 80a3 	bne.w	8008b32 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff f918 	bl	8007c28 <ld_clust>
 80089f8:	4602      	mov	r2, r0
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80089fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a00:	331c      	adds	r3, #28
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe f8f0 	bl	8006be8 <ld_dword>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	88da      	ldrh	r2, [r3, #6]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	79fa      	ldrb	r2, [r7, #7]
 8008a26:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3330      	adds	r3, #48	; 0x30
 8008a3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a42:	2100      	movs	r1, #0
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fe f95a 	bl	8006cfe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d06e      	beq.n	8008b32 <f_open+0x37e>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d06a      	beq.n	8008b32 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	895b      	ldrh	r3, [r3, #10]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	899b      	ldrh	r3, [r3, #12]
 8008a6e:	fb02 f303 	mul.w	r3, r2, r3
 8008a72:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8008a80:	e016      	b.n	8008ab0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fc03 	bl	8007292 <get_fat>
 8008a8c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d802      	bhi.n	8008a9a <f_open+0x2e6>
 8008a94:	2302      	movs	r3, #2
 8008a96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa0:	d102      	bne.n	8008aa8 <f_open+0x2f4>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008aa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	657b      	str	r3, [r7, #84]	; 0x54
 8008ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <f_open+0x30c>
 8008ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d8e0      	bhi.n	8008a82 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ac4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008ac6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d131      	bne.n	8008b32 <f_open+0x37e>
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	899b      	ldrh	r3, [r3, #12]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ad6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ada:	fb01 f202 	mul.w	r2, r1, r2
 8008ade:	1a9b      	subs	r3, r3, r2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d026      	beq.n	8008b32 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe fbb3 	bl	8007254 <clust2sect>
 8008aee:	6478      	str	r0, [r7, #68]	; 0x44
 8008af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d103      	bne.n	8008afe <f_open+0x34a>
						res = FR_INT_ERR;
 8008af6:	2302      	movs	r3, #2
 8008af8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008afc:	e019      	b.n	8008b32 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	899b      	ldrh	r3, [r3, #12]
 8008b02:	461a      	mov	r2, r3
 8008b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b06:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b0c:	441a      	add	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	7858      	ldrb	r0, [r3, #1]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6a1a      	ldr	r2, [r3, #32]
 8008b20:	2301      	movs	r3, #1
 8008b22:	f7fd ffeb 	bl	8006afc <disk_read>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <f_open+0x37e>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <f_open+0x38c>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008b40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3760      	adds	r7, #96	; 0x60
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08c      	sub	sp, #48	; 0x30
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
 8008b58:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f107 0210 	add.w	r2, r7, #16
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7ff fda5 	bl	80086bc <validate>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d107      	bne.n	8008b90 <f_write+0x44>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	7d5b      	ldrb	r3, [r3, #21]
 8008b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <f_write+0x4a>
 8008b90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b94:	e16a      	b.n	8008e6c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	7d1b      	ldrb	r3, [r3, #20]
 8008b9a:	f003 0302 	and.w	r3, r3, #2
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <f_write+0x5a>
 8008ba2:	2307      	movs	r3, #7
 8008ba4:	e162      	b.n	8008e6c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	699a      	ldr	r2, [r3, #24]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	441a      	add	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	f080 814c 	bcs.w	8008e50 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	43db      	mvns	r3, r3
 8008bbe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008bc0:	e146      	b.n	8008e50 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	8992      	ldrh	r2, [r2, #12]
 8008bca:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bce:	fb01 f202 	mul.w	r2, r1, r2
 8008bd2:	1a9b      	subs	r3, r3, r2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f040 80f1 	bne.w	8008dbc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	8992      	ldrh	r2, [r2, #12]
 8008be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	8952      	ldrh	r2, [r2, #10]
 8008bea:	3a01      	subs	r2, #1
 8008bec:	4013      	ands	r3, r2
 8008bee:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d143      	bne.n	8008c7e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10c      	bne.n	8008c18 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d11a      	bne.n	8008c40 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fd94 	bl	800773c <create_chain>
 8008c14:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c16:	e013      	b.n	8008c40 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d007      	beq.n	8008c30 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	4619      	mov	r1, r3
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f7fe fe20 	bl	800786c <clmt_clust>
 8008c2c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c2e:	e007      	b.n	8008c40 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	4619      	mov	r1, r3
 8008c38:	4610      	mov	r0, r2
 8008c3a:	f7fe fd7f 	bl	800773c <create_chain>
 8008c3e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f000 8109 	beq.w	8008e5a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d104      	bne.n	8008c58 <f_write+0x10c>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2202      	movs	r2, #2
 8008c52:	755a      	strb	r2, [r3, #21]
 8008c54:	2302      	movs	r3, #2
 8008c56:	e109      	b.n	8008e6c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5e:	d104      	bne.n	8008c6a <f_write+0x11e>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2201      	movs	r2, #1
 8008c64:	755a      	strb	r2, [r3, #21]
 8008c66:	2301      	movs	r3, #1
 8008c68:	e100      	b.n	8008e6c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c6e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d102      	bne.n	8008c7e <f_write+0x132>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c7c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	7d1b      	ldrb	r3, [r3, #20]
 8008c82:	b25b      	sxtb	r3, r3
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	da18      	bge.n	8008cba <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	7858      	ldrb	r0, [r3, #1]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6a1a      	ldr	r2, [r3, #32]
 8008c96:	2301      	movs	r3, #1
 8008c98:	f7fd ff50 	bl	8006b3c <disk_write>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d004      	beq.n	8008cac <f_write+0x160>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	755a      	strb	r2, [r3, #21]
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e0df      	b.n	8008e6c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	7d1b      	ldrb	r3, [r3, #20]
 8008cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	f7fe fac6 	bl	8007254 <clust2sect>
 8008cc8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d104      	bne.n	8008cda <f_write+0x18e>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	755a      	strb	r2, [r3, #21]
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	e0c8      	b.n	8008e6c <f_write+0x320>
			sect += csect;
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	4413      	add	r3, r2
 8008ce0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	899b      	ldrh	r3, [r3, #12]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d043      	beq.n	8008d7e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	8952      	ldrh	r2, [r2, #10]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d905      	bls.n	8008d10 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	895b      	ldrh	r3, [r3, #10]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	7858      	ldrb	r0, [r3, #1]
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	69f9      	ldr	r1, [r7, #28]
 8008d1a:	f7fd ff0f 	bl	8006b3c <disk_write>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <f_write+0x1e2>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	755a      	strb	r2, [r3, #21]
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e09e      	b.n	8008e6c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a1a      	ldr	r2, [r3, #32]
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	6a3a      	ldr	r2, [r7, #32]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d918      	bls.n	8008d6e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6a1a      	ldr	r2, [r3, #32]
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	8992      	ldrh	r2, [r2, #12]
 8008d4e:	fb02 f303 	mul.w	r3, r2, r3
 8008d52:	69fa      	ldr	r2, [r7, #28]
 8008d54:	18d1      	adds	r1, r2, r3
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	899b      	ldrh	r3, [r3, #12]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	f7fd ffae 	bl	8006cbc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	7d1b      	ldrb	r3, [r3, #20]
 8008d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	899b      	ldrh	r3, [r3, #12]
 8008d72:	461a      	mov	r2, r3
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	fb02 f303 	mul.w	r3, r2, r3
 8008d7a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008d7c:	e04b      	b.n	8008e16 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d016      	beq.n	8008db6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	699a      	ldr	r2, [r3, #24]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d210      	bcs.n	8008db6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	7858      	ldrb	r0, [r3, #1]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d9e:	2301      	movs	r3, #1
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	f7fd feab 	bl	8006afc <disk_read>
 8008da6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d004      	beq.n	8008db6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2201      	movs	r2, #1
 8008db0:	755a      	strb	r2, [r3, #21]
 8008db2:	2301      	movs	r3, #1
 8008db4:	e05a      	b.n	8008e6c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	899b      	ldrh	r3, [r3, #12]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	8992      	ldrh	r2, [r2, #12]
 8008dca:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dce:	fb01 f202 	mul.w	r2, r1, r2
 8008dd2:	1a9b      	subs	r3, r3, r2
 8008dd4:	1ac3      	subs	r3, r0, r3
 8008dd6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d901      	bls.n	8008de4 <f_write+0x298>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	8992      	ldrh	r2, [r2, #12]
 8008df2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008df6:	fb00 f202 	mul.w	r2, r0, r2
 8008dfa:	1a9b      	subs	r3, r3, r2
 8008dfc:	440b      	add	r3, r1
 8008dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e00:	69f9      	ldr	r1, [r7, #28]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fd ff5a 	bl	8006cbc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	7d1b      	ldrb	r3, [r3, #20]
 8008e0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	4413      	add	r3, r2
 8008e1c:	61fb      	str	r3, [r7, #28]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	699a      	ldr	r2, [r3, #24]
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	441a      	add	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	619a      	str	r2, [r3, #24]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	bf38      	it	cc
 8008e36:	461a      	movcc	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	60da      	str	r2, [r3, #12]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	441a      	add	r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f47f aeb5 	bne.w	8008bc2 <f_write+0x76>
 8008e58:	e000      	b.n	8008e5c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008e5a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	7d1b      	ldrb	r3, [r3, #20]
 8008e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3730      	adds	r7, #48	; 0x30
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f107 0208 	add.w	r2, r7, #8
 8008e82:	4611      	mov	r1, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff fc19 	bl	80086bc <validate>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d168      	bne.n	8008f66 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	7d1b      	ldrb	r3, [r3, #20]
 8008e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d062      	beq.n	8008f66 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	7d1b      	ldrb	r3, [r3, #20]
 8008ea4:	b25b      	sxtb	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	da15      	bge.n	8008ed6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	7858      	ldrb	r0, [r3, #1]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1a      	ldr	r2, [r3, #32]
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f7fd fe3f 	bl	8006b3c <disk_write>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <f_sync+0x54>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e04f      	b.n	8008f68 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	7d1b      	ldrb	r3, [r3, #20]
 8008ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ed6:	f7fd fc17 	bl	8006708 <get_fattime>
 8008eda:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f7fe f917 	bl	8007118 <move_window>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d138      	bne.n	8008f66 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	330b      	adds	r3, #11
 8008efe:	781a      	ldrb	r2, [r3, #0]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	330b      	adds	r3, #11
 8008f04:	f042 0220 	orr.w	r2, r2, #32
 8008f08:	b2d2      	uxtb	r2, r2
 8008f0a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	461a      	mov	r2, r3
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	f7fe fea5 	bl	8007c66 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f103 021c 	add.w	r2, r3, #28
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	4619      	mov	r1, r3
 8008f28:	4610      	mov	r0, r2
 8008f2a:	f7fd fe9b 	bl	8006c64 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3316      	adds	r3, #22
 8008f32:	6939      	ldr	r1, [r7, #16]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fd fe95 	bl	8006c64 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3312      	adds	r3, #18
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fd fe74 	bl	8006c2e <st_word>
					fs->wflag = 1;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe f910 	bl	8007174 <sync_fs>
 8008f54:	4603      	mov	r3, r0
 8008f56:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	7d1b      	ldrb	r3, [r3, #20]
 8008f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3718      	adds	r7, #24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff ff7b 	bl	8008e74 <f_sync>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d118      	bne.n	8008fba <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f107 0208 	add.w	r2, r7, #8
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff fb93 	bl	80086bc <validate>
 8008f96:	4603      	mov	r3, r0
 8008f98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10c      	bne.n	8008fba <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe f813 	bl	8006fd0 <dec_lock>
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b090      	sub	sp, #64	; 0x40
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f107 0208 	add.w	r2, r7, #8
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7ff fb70 	bl	80086bc <validate>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008fe2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d103      	bne.n	8008ff2 <f_lseek+0x2e>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	7d5b      	ldrb	r3, [r3, #21]
 8008fee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008ff2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <f_lseek+0x3c>
 8008ffa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ffe:	e201      	b.n	8009404 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 80d9 	beq.w	80091bc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009010:	d15a      	bne.n	80090c8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	1d1a      	adds	r2, r3, #4
 800901c:	627a      	str	r2, [r7, #36]	; 0x24
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	617b      	str	r3, [r7, #20]
 8009022:	2302      	movs	r3, #2
 8009024:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	2b00      	cmp	r3, #0
 8009030:	d03a      	beq.n	80090a8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	613b      	str	r3, [r7, #16]
 8009036:	2300      	movs	r3, #0
 8009038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	3302      	adds	r3, #2
 800903e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009046:	3301      	adds	r3, #1
 8009048:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe f91f 	bl	8007292 <get_fat>
 8009054:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	2b01      	cmp	r3, #1
 800905a:	d804      	bhi.n	8009066 <f_lseek+0xa2>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	755a      	strb	r2, [r3, #21]
 8009062:	2302      	movs	r3, #2
 8009064:	e1ce      	b.n	8009404 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906c:	d104      	bne.n	8009078 <f_lseek+0xb4>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	755a      	strb	r2, [r3, #21]
 8009074:	2301      	movs	r3, #1
 8009076:	e1c5      	b.n	8009404 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3301      	adds	r3, #1
 800907c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800907e:	429a      	cmp	r2, r3
 8009080:	d0de      	beq.n	8009040 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	429a      	cmp	r2, r3
 8009088:	d809      	bhi.n	800909e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	1d1a      	adds	r2, r3, #4
 800908e:	627a      	str	r2, [r7, #36]	; 0x24
 8009090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	1d1a      	adds	r2, r3, #4
 8009098:	627a      	str	r2, [r7, #36]	; 0x24
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d3c4      	bcc.n	8009032 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ae:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80090b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d803      	bhi.n	80090c0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	e19f      	b.n	8009400 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80090c0:	2311      	movs	r3, #17
 80090c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80090c6:	e19b      	b.n	8009400 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d902      	bls.n	80090d8 <f_lseek+0x114>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 818d 	beq.w	8009400 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7fe fbbd 	bl	800786c <clmt_clust>
 80090f2:	4602      	mov	r2, r0
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	69db      	ldr	r3, [r3, #28]
 80090fe:	4619      	mov	r1, r3
 8009100:	4610      	mov	r0, r2
 8009102:	f7fe f8a7 	bl	8007254 <clust2sect>
 8009106:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d104      	bne.n	8009118 <f_lseek+0x154>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2202      	movs	r2, #2
 8009112:	755a      	strb	r2, [r3, #21]
 8009114:	2302      	movs	r3, #2
 8009116:	e175      	b.n	8009404 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	3b01      	subs	r3, #1
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	8992      	ldrh	r2, [r2, #12]
 8009120:	fbb3 f3f2 	udiv	r3, r3, r2
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	8952      	ldrh	r2, [r2, #10]
 8009128:	3a01      	subs	r2, #1
 800912a:	4013      	ands	r3, r2
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	4413      	add	r3, r2
 8009130:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	8992      	ldrh	r2, [r2, #12]
 800913a:	fbb3 f1f2 	udiv	r1, r3, r2
 800913e:	fb01 f202 	mul.w	r2, r1, r2
 8009142:	1a9b      	subs	r3, r3, r2
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 815b 	beq.w	8009400 <f_lseek+0x43c>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	429a      	cmp	r2, r3
 8009152:	f000 8155 	beq.w	8009400 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	7d1b      	ldrb	r3, [r3, #20]
 800915a:	b25b      	sxtb	r3, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	da18      	bge.n	8009192 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	7858      	ldrb	r0, [r3, #1]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a1a      	ldr	r2, [r3, #32]
 800916e:	2301      	movs	r3, #1
 8009170:	f7fd fce4 	bl	8006b3c <disk_write>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d004      	beq.n	8009184 <f_lseek+0x1c0>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	755a      	strb	r2, [r3, #21]
 8009180:	2301      	movs	r3, #1
 8009182:	e13f      	b.n	8009404 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	7d1b      	ldrb	r3, [r3, #20]
 8009188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918c:	b2da      	uxtb	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	7858      	ldrb	r0, [r3, #1]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800919c:	2301      	movs	r3, #1
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	f7fd fcac 	bl	8006afc <disk_read>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d004      	beq.n	80091b4 <f_lseek+0x1f0>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	755a      	strb	r2, [r3, #21]
 80091b0:	2301      	movs	r3, #1
 80091b2:	e127      	b.n	8009404 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	621a      	str	r2, [r3, #32]
 80091ba:	e121      	b.n	8009400 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d908      	bls.n	80091d8 <f_lseek+0x214>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7d1b      	ldrb	r3, [r3, #20]
 80091ca:	f003 0302 	and.w	r3, r3, #2
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d102      	bne.n	80091d8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	637b      	str	r3, [r7, #52]	; 0x34
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091e6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 80b5 	beq.w	800935a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	895b      	ldrh	r3, [r3, #10]
 80091f4:	461a      	mov	r2, r3
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	899b      	ldrh	r3, [r3, #12]
 80091fa:	fb02 f303 	mul.w	r3, r2, r3
 80091fe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d01b      	beq.n	800923e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	1e5a      	subs	r2, r3, #1
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	1e59      	subs	r1, r3, #1
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800921a:	429a      	cmp	r2, r3
 800921c:	d30f      	bcc.n	800923e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	1e5a      	subs	r2, r3, #1
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	425b      	negs	r3, r3
 8009226:	401a      	ands	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	63bb      	str	r3, [r7, #56]	; 0x38
 800923c:	e022      	b.n	8009284 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009246:	2b00      	cmp	r3, #0
 8009248:	d119      	bne.n	800927e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2100      	movs	r1, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe fa74 	bl	800773c <create_chain>
 8009254:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009258:	2b01      	cmp	r3, #1
 800925a:	d104      	bne.n	8009266 <f_lseek+0x2a2>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	755a      	strb	r2, [r3, #21]
 8009262:	2302      	movs	r3, #2
 8009264:	e0ce      	b.n	8009404 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926c:	d104      	bne.n	8009278 <f_lseek+0x2b4>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	755a      	strb	r2, [r3, #21]
 8009274:	2301      	movs	r3, #1
 8009276:	e0c5      	b.n	8009404 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800927c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009282:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009286:	2b00      	cmp	r3, #0
 8009288:	d067      	beq.n	800935a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800928a:	e03a      	b.n	8009302 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	699a      	ldr	r2, [r3, #24]
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	441a      	add	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	7d1b      	ldrb	r3, [r3, #20]
 80092a4:	f003 0302 	and.w	r3, r3, #2
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fe fa43 	bl	800773c <create_chain>
 80092b6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80092b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d108      	bne.n	80092d0 <f_lseek+0x30c>
							ofs = 0; break;
 80092be:	2300      	movs	r3, #0
 80092c0:	603b      	str	r3, [r7, #0]
 80092c2:	e022      	b.n	800930a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fd ffe2 	bl	8007292 <get_fat>
 80092ce:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d6:	d104      	bne.n	80092e2 <f_lseek+0x31e>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	755a      	strb	r2, [r3, #21]
 80092de:	2301      	movs	r3, #1
 80092e0:	e090      	b.n	8009404 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80092e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d904      	bls.n	80092f2 <f_lseek+0x32e>
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d304      	bcc.n	80092fc <f_lseek+0x338>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2202      	movs	r2, #2
 80092f6:	755a      	strb	r2, [r3, #21]
 80092f8:	2302      	movs	r3, #2
 80092fa:	e083      	b.n	8009404 <f_lseek+0x440>
					fp->clust = clst;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009300:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	429a      	cmp	r2, r3
 8009308:	d8c0      	bhi.n	800928c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	699a      	ldr	r2, [r3, #24]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	441a      	add	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	899b      	ldrh	r3, [r3, #12]
 800931a:	461a      	mov	r2, r3
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009322:	fb01 f202 	mul.w	r2, r1, r2
 8009326:	1a9b      	subs	r3, r3, r2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d016      	beq.n	800935a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009330:	4618      	mov	r0, r3
 8009332:	f7fd ff8f 	bl	8007254 <clust2sect>
 8009336:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933a:	2b00      	cmp	r3, #0
 800933c:	d104      	bne.n	8009348 <f_lseek+0x384>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2202      	movs	r2, #2
 8009342:	755a      	strb	r2, [r3, #21]
 8009344:	2302      	movs	r3, #2
 8009346:	e05d      	b.n	8009404 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	899b      	ldrh	r3, [r3, #12]
 800934c:	461a      	mov	r2, r3
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	fbb3 f3f2 	udiv	r3, r3, r2
 8009354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009356:	4413      	add	r3, r2
 8009358:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	699a      	ldr	r2, [r3, #24]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	429a      	cmp	r2, r3
 8009364:	d90a      	bls.n	800937c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	699a      	ldr	r2, [r3, #24]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	7d1b      	ldrb	r3, [r3, #20]
 8009372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009376:	b2da      	uxtb	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	8992      	ldrh	r2, [r2, #12]
 8009384:	fbb3 f1f2 	udiv	r1, r3, r2
 8009388:	fb01 f202 	mul.w	r2, r1, r2
 800938c:	1a9b      	subs	r3, r3, r2
 800938e:	2b00      	cmp	r3, #0
 8009390:	d036      	beq.n	8009400 <f_lseek+0x43c>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a1b      	ldr	r3, [r3, #32]
 8009396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009398:	429a      	cmp	r2, r3
 800939a:	d031      	beq.n	8009400 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	7d1b      	ldrb	r3, [r3, #20]
 80093a0:	b25b      	sxtb	r3, r3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	da18      	bge.n	80093d8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	7858      	ldrb	r0, [r3, #1]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a1a      	ldr	r2, [r3, #32]
 80093b4:	2301      	movs	r3, #1
 80093b6:	f7fd fbc1 	bl	8006b3c <disk_write>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d004      	beq.n	80093ca <f_lseek+0x406>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	755a      	strb	r2, [r3, #21]
 80093c6:	2301      	movs	r3, #1
 80093c8:	e01c      	b.n	8009404 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	7d1b      	ldrb	r3, [r3, #20]
 80093ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	7858      	ldrb	r0, [r3, #1]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093e2:	2301      	movs	r3, #1
 80093e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e6:	f7fd fb89 	bl	8006afc <disk_read>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d004      	beq.n	80093fa <f_lseek+0x436>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	755a      	strb	r2, [r3, #21]
 80093f6:	2301      	movs	r3, #1
 80093f8:	e004      	b.n	8009404 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093fe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009400:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009404:	4618      	mov	r0, r3
 8009406:	3740      	adds	r7, #64	; 0x40
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b090      	sub	sp, #64	; 0x40
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009416:	f107 010c 	add.w	r1, r7, #12
 800941a:	1d3b      	adds	r3, r7, #4
 800941c:	2200      	movs	r2, #0
 800941e:	4618      	mov	r0, r3
 8009420:	f7fe fecc 	bl	80081bc <find_volume>
 8009424:	4603      	mov	r3, r0
 8009426:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800942a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800942e:	2b00      	cmp	r3, #0
 8009430:	d11f      	bne.n	8009472 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	f107 030c 	add.w	r3, r7, #12
 8009438:	4611      	mov	r1, r2
 800943a:	4618      	mov	r0, r3
 800943c:	f7fe fdae 	bl	8007f9c <follow_path>
 8009440:	4603      	mov	r3, r0
 8009442:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8009446:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800944a:	2b00      	cmp	r3, #0
 800944c:	d111      	bne.n	8009472 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800944e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009452:	b25b      	sxtb	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	da03      	bge.n	8009460 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8009458:	2306      	movs	r3, #6
 800945a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800945e:	e008      	b.n	8009472 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d005      	beq.n	8009472 <f_stat+0x66>
 8009466:	f107 030c 	add.w	r3, r7, #12
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe fca1 	bl	8007db4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8009472:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009476:	4618      	mov	r0, r3
 8009478:	3740      	adds	r7, #64	; 0x40
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	460b      	mov	r3, r1
 8009488:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800948a:	78fb      	ldrb	r3, [r7, #3]
 800948c:	2b0a      	cmp	r3, #10
 800948e:	d103      	bne.n	8009498 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009490:	210d      	movs	r1, #13
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff fff3 	bl	800947e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	db25      	blt.n	80094f0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	60fa      	str	r2, [r7, #12]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	4413      	add	r3, r2
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2b3c      	cmp	r3, #60	; 0x3c
 80094b6:	dd12      	ble.n	80094de <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f103 010c 	add.w	r1, r3, #12
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	f107 0308 	add.w	r3, r7, #8
 80094c8:	f7ff fb40 	bl	8008b4c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d101      	bne.n	80094d8 <putc_bfd+0x5a>
 80094d4:	2300      	movs	r3, #0
 80094d6:	e001      	b.n	80094dc <putc_bfd+0x5e>
 80094d8:	f04f 33ff 	mov.w	r3, #4294967295
 80094dc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	609a      	str	r2, [r3, #8]
 80094ee:	e000      	b.n	80094f2 <putc_bfd+0x74>
	if (i < 0) return;
 80094f0:	bf00      	nop
}
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	db16      	blt.n	8009536 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6818      	ldr	r0, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f103 010c 	add.w	r1, r3, #12
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	461a      	mov	r2, r3
 8009518:	f107 030c 	add.w	r3, r7, #12
 800951c:	f7ff fb16 	bl	8008b4c <f_write>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d107      	bne.n	8009536 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	4293      	cmp	r3, r2
 800952e:	d102      	bne.n	8009536 <putc_flush+0x3e>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	e001      	b.n	800953a <putc_flush+0x42>
	return EOF;
 8009536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	605a      	str	r2, [r3, #4]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	609a      	str	r2, [r3, #8]
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800956c:	b40e      	push	{r1, r2, r3}
 800956e:	b580      	push	{r7, lr}
 8009570:	b0a7      	sub	sp, #156	; 0x9c
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8009576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800957a:	6879      	ldr	r1, [r7, #4]
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff ffe0 	bl	8009542 <putc_init>

	va_start(arp, fmt);
 8009582:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009586:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8009588:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800958c:	1c5a      	adds	r2, r3, #1
 800958e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8009598:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 81f2 	beq.w	8009986 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80095a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80095a6:	2b25      	cmp	r3, #37	; 0x25
 80095a8:	d008      	beq.n	80095bc <f_printf+0x50>
			putc_bfd(&pb, c);
 80095aa:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80095ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095b2:	4611      	mov	r1, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7ff ff62 	bl	800947e <putc_bfd>
			continue;
 80095ba:	e1e3      	b.n	8009984 <f_printf+0x418>
		}
		w = f = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80095c2:	2300      	movs	r3, #0
 80095c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 80095c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80095d8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80095dc:	2b30      	cmp	r3, #48	; 0x30
 80095de:	d10b      	bne.n	80095f8 <f_printf+0x8c>
			f = 1; c = *fmt++;
 80095e0:	2301      	movs	r3, #1
 80095e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80095e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80095f6:	e024      	b.n	8009642 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80095f8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80095fc:	2b2d      	cmp	r3, #45	; 0x2d
 80095fe:	d120      	bne.n	8009642 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8009600:	2302      	movs	r3, #2
 8009602:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8009616:	e014      	b.n	8009642 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8009618:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800961c:	4613      	mov	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	005b      	lsls	r3, r3, #1
 8009624:	461a      	mov	r2, r3
 8009626:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800962a:	4413      	add	r3, r2
 800962c:	3b30      	subs	r3, #48	; 0x30
 800962e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8009632:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8009642:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009646:	2b2f      	cmp	r3, #47	; 0x2f
 8009648:	d903      	bls.n	8009652 <f_printf+0xe6>
 800964a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800964e:	2b39      	cmp	r3, #57	; 0x39
 8009650:	d9e2      	bls.n	8009618 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8009652:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009656:	2b6c      	cmp	r3, #108	; 0x6c
 8009658:	d003      	beq.n	8009662 <f_printf+0xf6>
 800965a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800965e:	2b4c      	cmp	r3, #76	; 0x4c
 8009660:	d10d      	bne.n	800967e <f_printf+0x112>
			f |= 4; c = *fmt++;
 8009662:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009666:	f043 0304 	orr.w	r3, r3, #4
 800966a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800966e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009672:	1c5a      	adds	r2, r3, #1
 8009674:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800967e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 8181 	beq.w	800998a <f_printf+0x41e>
		d = c;
 8009688:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800968c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8009690:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009694:	2b60      	cmp	r3, #96	; 0x60
 8009696:	d908      	bls.n	80096aa <f_printf+0x13e>
 8009698:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800969c:	2b7a      	cmp	r3, #122	; 0x7a
 800969e:	d804      	bhi.n	80096aa <f_printf+0x13e>
 80096a0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80096a4:	3b20      	subs	r3, #32
 80096a6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 80096aa:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80096ae:	3b42      	subs	r3, #66	; 0x42
 80096b0:	2b16      	cmp	r3, #22
 80096b2:	f200 8098 	bhi.w	80097e6 <f_printf+0x27a>
 80096b6:	a201      	add	r2, pc, #4	; (adr r2, 80096bc <f_printf+0x150>)
 80096b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096bc:	080097c7 	.word	0x080097c7
 80096c0:	080097af 	.word	0x080097af
 80096c4:	080097d7 	.word	0x080097d7
 80096c8:	080097e7 	.word	0x080097e7
 80096cc:	080097e7 	.word	0x080097e7
 80096d0:	080097e7 	.word	0x080097e7
 80096d4:	080097e7 	.word	0x080097e7
 80096d8:	080097e7 	.word	0x080097e7
 80096dc:	080097e7 	.word	0x080097e7
 80096e0:	080097e7 	.word	0x080097e7
 80096e4:	080097e7 	.word	0x080097e7
 80096e8:	080097e7 	.word	0x080097e7
 80096ec:	080097e7 	.word	0x080097e7
 80096f0:	080097cf 	.word	0x080097cf
 80096f4:	080097e7 	.word	0x080097e7
 80096f8:	080097e7 	.word	0x080097e7
 80096fc:	080097e7 	.word	0x080097e7
 8009700:	08009719 	.word	0x08009719
 8009704:	080097e7 	.word	0x080097e7
 8009708:	080097d7 	.word	0x080097d7
 800970c:	080097e7 	.word	0x080097e7
 8009710:	080097e7 	.word	0x080097e7
 8009714:	080097df 	.word	0x080097df
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8009718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800971a:	1d1a      	adds	r2, r3, #4
 800971c:	67ba      	str	r2, [r7, #120]	; 0x78
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8009722:	2300      	movs	r3, #0
 8009724:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009728:	e004      	b.n	8009734 <f_printf+0x1c8>
 800972a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800972e:	3301      	adds	r3, #1
 8009730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009734:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800973a:	4413      	add	r3, r2
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1f3      	bne.n	800972a <f_printf+0x1be>
			if (!(f & 2)) {
 8009742:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009746:	f003 0302 	and.w	r3, r3, #2
 800974a:	2b00      	cmp	r3, #0
 800974c:	d11a      	bne.n	8009784 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800974e:	e005      	b.n	800975c <f_printf+0x1f0>
 8009750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009754:	2120      	movs	r1, #32
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff fe91 	bl	800947e <putc_bfd>
 800975c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009760:	1c5a      	adds	r2, r3, #1
 8009762:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009766:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800976a:	429a      	cmp	r2, r3
 800976c:	d8f0      	bhi.n	8009750 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800976e:	e009      	b.n	8009784 <f_printf+0x218>
 8009770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009776:	781a      	ldrb	r2, [r3, #0]
 8009778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800977c:	4611      	mov	r1, r2
 800977e:	4618      	mov	r0, r3
 8009780:	f7ff fe7d 	bl	800947e <putc_bfd>
 8009784:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1f1      	bne.n	8009770 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800978c:	e005      	b.n	800979a <f_printf+0x22e>
 800978e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009792:	2120      	movs	r1, #32
 8009794:	4618      	mov	r0, r3
 8009796:	f7ff fe72 	bl	800947e <putc_bfd>
 800979a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80097a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d8f0      	bhi.n	800978e <f_printf+0x222>
			continue;
 80097ac:	e0ea      	b.n	8009984 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80097ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097b0:	1d1a      	adds	r2, r3, #4
 80097b2:	67ba      	str	r2, [r7, #120]	; 0x78
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff fe5d 	bl	800947e <putc_bfd>
 80097c4:	e0de      	b.n	8009984 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80097c6:	2302      	movs	r3, #2
 80097c8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80097cc:	e014      	b.n	80097f8 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80097ce:	2308      	movs	r3, #8
 80097d0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80097d4:	e010      	b.n	80097f8 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80097d6:	230a      	movs	r3, #10
 80097d8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80097dc:	e00c      	b.n	80097f8 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80097de:	2310      	movs	r3, #16
 80097e0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80097e4:	e008      	b.n	80097f8 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80097e6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80097ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff fe44 	bl	800947e <putc_bfd>
 80097f6:	e0c5      	b.n	8009984 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80097f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d004      	beq.n	800980e <f_printf+0x2a2>
 8009804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009806:	1d1a      	adds	r2, r3, #4
 8009808:	67ba      	str	r2, [r7, #120]	; 0x78
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	e00c      	b.n	8009828 <f_printf+0x2bc>
 800980e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009812:	2b44      	cmp	r3, #68	; 0x44
 8009814:	d104      	bne.n	8009820 <f_printf+0x2b4>
 8009816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009818:	1d1a      	adds	r2, r3, #4
 800981a:	67ba      	str	r2, [r7, #120]	; 0x78
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	e003      	b.n	8009828 <f_printf+0x2bc>
 8009820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009822:	1d1a      	adds	r2, r3, #4
 8009824:	67ba      	str	r2, [r7, #120]	; 0x78
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800982c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009830:	2b44      	cmp	r3, #68	; 0x44
 8009832:	d10e      	bne.n	8009852 <f_printf+0x2e6>
 8009834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009838:	2b00      	cmp	r3, #0
 800983a:	da0a      	bge.n	8009852 <f_printf+0x2e6>
			v = 0 - v;
 800983c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009840:	425b      	negs	r3, r3
 8009842:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8009846:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800984a:	f043 0308 	orr.w	r3, r3, #8
 800984e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8009852:	2300      	movs	r3, #0
 8009854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8009858:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800985c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009860:	fbb3 f1f2 	udiv	r1, r3, r2
 8009864:	fb01 f202 	mul.w	r2, r1, r2
 8009868:	1a9b      	subs	r3, r3, r2
 800986a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800986e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8009872:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009876:	fbb2 f3f3 	udiv	r3, r2, r3
 800987a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800987e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009882:	2b09      	cmp	r3, #9
 8009884:	d90b      	bls.n	800989e <f_printf+0x332>
 8009886:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800988a:	2b78      	cmp	r3, #120	; 0x78
 800988c:	d101      	bne.n	8009892 <f_printf+0x326>
 800988e:	2227      	movs	r2, #39	; 0x27
 8009890:	e000      	b.n	8009894 <f_printf+0x328>
 8009892:	2207      	movs	r2, #7
 8009894:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009898:	4413      	add	r3, r2
 800989a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800989e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80098a8:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80098ac:	3230      	adds	r2, #48	; 0x30
 80098ae:	b2d2      	uxtb	r2, r2
 80098b0:	3398      	adds	r3, #152	; 0x98
 80098b2:	443b      	add	r3, r7
 80098b4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80098b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <f_printf+0x35c>
 80098c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098c4:	2b1f      	cmp	r3, #31
 80098c6:	d9c7      	bls.n	8009858 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80098c8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80098cc:	f003 0308 	and.w	r3, r3, #8
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d009      	beq.n	80098e8 <f_printf+0x37c>
 80098d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80098de:	3398      	adds	r3, #152	; 0x98
 80098e0:	443b      	add	r3, r7
 80098e2:	222d      	movs	r2, #45	; 0x2d
 80098e4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80098e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80098f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <f_printf+0x394>
 80098fc:	2330      	movs	r3, #48	; 0x30
 80098fe:	e000      	b.n	8009902 <f_printf+0x396>
 8009900:	2320      	movs	r3, #32
 8009902:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8009906:	e007      	b.n	8009918 <f_printf+0x3ac>
 8009908:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800990c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009910:	4611      	mov	r1, r2
 8009912:	4618      	mov	r0, r3
 8009914:	f7ff fdb3 	bl	800947e <putc_bfd>
 8009918:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800991c:	f003 0302 	and.w	r3, r3, #2
 8009920:	2b00      	cmp	r3, #0
 8009922:	d108      	bne.n	8009936 <f_printf+0x3ca>
 8009924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009928:	1c5a      	adds	r2, r3, #1
 800992a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800992e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009932:	429a      	cmp	r2, r3
 8009934:	d8e8      	bhi.n	8009908 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8009936:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800993a:	3b01      	subs	r3, #1
 800993c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009940:	f107 020c 	add.w	r2, r7, #12
 8009944:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009948:	4413      	add	r3, r2
 800994a:	781a      	ldrb	r2, [r3, #0]
 800994c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff fd93 	bl	800947e <putc_bfd>
		} while (i);
 8009958:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1ea      	bne.n	8009936 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8009960:	e007      	b.n	8009972 <f_printf+0x406>
 8009962:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800996a:	4611      	mov	r1, r2
 800996c:	4618      	mov	r0, r3
 800996e:	f7ff fd86 	bl	800947e <putc_bfd>
 8009972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009976:	1c5a      	adds	r2, r3, #1
 8009978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800997c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009980:	429a      	cmp	r2, r3
 8009982:	d8ee      	bhi.n	8009962 <f_printf+0x3f6>
		c = *fmt++;
 8009984:	e600      	b.n	8009588 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8009986:	bf00      	nop
 8009988:	e000      	b.n	800998c <f_printf+0x420>
		if (!c) break;
 800998a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800998c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009990:	4618      	mov	r0, r3
 8009992:	f7ff fdb1 	bl	80094f8 <putc_flush>
 8009996:	4603      	mov	r3, r0
}
 8009998:	4618      	mov	r0, r3
 800999a:	379c      	adds	r7, #156	; 0x9c
 800999c:	46bd      	mov	sp, r7
 800999e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099a2:	b003      	add	sp, #12
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop

080099a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	4613      	mov	r3, r2
 80099b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80099b6:	2301      	movs	r3, #1
 80099b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80099ba:	2300      	movs	r3, #0
 80099bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80099be:	4b1f      	ldr	r3, [pc, #124]	; (8009a3c <FATFS_LinkDriverEx+0x94>)
 80099c0:	7a5b      	ldrb	r3, [r3, #9]
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d131      	bne.n	8009a2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80099c8:	4b1c      	ldr	r3, [pc, #112]	; (8009a3c <FATFS_LinkDriverEx+0x94>)
 80099ca:	7a5b      	ldrb	r3, [r3, #9]
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	461a      	mov	r2, r3
 80099d0:	4b1a      	ldr	r3, [pc, #104]	; (8009a3c <FATFS_LinkDriverEx+0x94>)
 80099d2:	2100      	movs	r1, #0
 80099d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80099d6:	4b19      	ldr	r3, [pc, #100]	; (8009a3c <FATFS_LinkDriverEx+0x94>)
 80099d8:	7a5b      	ldrb	r3, [r3, #9]
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	4a17      	ldr	r2, [pc, #92]	; (8009a3c <FATFS_LinkDriverEx+0x94>)
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80099e6:	4b15      	ldr	r3, [pc, #84]	; (8009a3c <FATFS_LinkDriverEx+0x94>)
 80099e8:	7a5b      	ldrb	r3, [r3, #9]
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	461a      	mov	r2, r3
 80099ee:	4b13      	ldr	r3, [pc, #76]	; (8009a3c <FATFS_LinkDriverEx+0x94>)
 80099f0:	4413      	add	r3, r2
 80099f2:	79fa      	ldrb	r2, [r7, #7]
 80099f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80099f6:	4b11      	ldr	r3, [pc, #68]	; (8009a3c <FATFS_LinkDriverEx+0x94>)
 80099f8:	7a5b      	ldrb	r3, [r3, #9]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	b2d1      	uxtb	r1, r2
 8009a00:	4a0e      	ldr	r2, [pc, #56]	; (8009a3c <FATFS_LinkDriverEx+0x94>)
 8009a02:	7251      	strb	r1, [r2, #9]
 8009a04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009a06:	7dbb      	ldrb	r3, [r7, #22]
 8009a08:	3330      	adds	r3, #48	; 0x30
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	3301      	adds	r3, #1
 8009a14:	223a      	movs	r2, #58	; 0x3a
 8009a16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	3302      	adds	r3, #2
 8009a1c:	222f      	movs	r2, #47	; 0x2f
 8009a1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	3303      	adds	r3, #3
 8009a24:	2200      	movs	r2, #0
 8009a26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	371c      	adds	r7, #28
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	20002688 	.word	0x20002688

08009a40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7ff ffaa 	bl	80099a8 <FATFS_LinkDriverEx>
 8009a54:	4603      	mov	r3, r0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
	...

08009a60 <__errno>:
 8009a60:	4b01      	ldr	r3, [pc, #4]	; (8009a68 <__errno+0x8>)
 8009a62:	6818      	ldr	r0, [r3, #0]
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	20000010 	.word	0x20000010

08009a6c <__libc_init_array>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	4d0d      	ldr	r5, [pc, #52]	; (8009aa4 <__libc_init_array+0x38>)
 8009a70:	4c0d      	ldr	r4, [pc, #52]	; (8009aa8 <__libc_init_array+0x3c>)
 8009a72:	1b64      	subs	r4, r4, r5
 8009a74:	10a4      	asrs	r4, r4, #2
 8009a76:	2600      	movs	r6, #0
 8009a78:	42a6      	cmp	r6, r4
 8009a7a:	d109      	bne.n	8009a90 <__libc_init_array+0x24>
 8009a7c:	4d0b      	ldr	r5, [pc, #44]	; (8009aac <__libc_init_array+0x40>)
 8009a7e:	4c0c      	ldr	r4, [pc, #48]	; (8009ab0 <__libc_init_array+0x44>)
 8009a80:	f001 f824 	bl	800aacc <_init>
 8009a84:	1b64      	subs	r4, r4, r5
 8009a86:	10a4      	asrs	r4, r4, #2
 8009a88:	2600      	movs	r6, #0
 8009a8a:	42a6      	cmp	r6, r4
 8009a8c:	d105      	bne.n	8009a9a <__libc_init_array+0x2e>
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a94:	4798      	blx	r3
 8009a96:	3601      	adds	r6, #1
 8009a98:	e7ee      	b.n	8009a78 <__libc_init_array+0xc>
 8009a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a9e:	4798      	blx	r3
 8009aa0:	3601      	adds	r6, #1
 8009aa2:	e7f2      	b.n	8009a8a <__libc_init_array+0x1e>
 8009aa4:	0800ae24 	.word	0x0800ae24
 8009aa8:	0800ae24 	.word	0x0800ae24
 8009aac:	0800ae24 	.word	0x0800ae24
 8009ab0:	0800ae28 	.word	0x0800ae28

08009ab4 <memset>:
 8009ab4:	4402      	add	r2, r0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d100      	bne.n	8009abe <memset+0xa>
 8009abc:	4770      	bx	lr
 8009abe:	f803 1b01 	strb.w	r1, [r3], #1
 8009ac2:	e7f9      	b.n	8009ab8 <memset+0x4>

08009ac4 <iprintf>:
 8009ac4:	b40f      	push	{r0, r1, r2, r3}
 8009ac6:	4b0a      	ldr	r3, [pc, #40]	; (8009af0 <iprintf+0x2c>)
 8009ac8:	b513      	push	{r0, r1, r4, lr}
 8009aca:	681c      	ldr	r4, [r3, #0]
 8009acc:	b124      	cbz	r4, 8009ad8 <iprintf+0x14>
 8009ace:	69a3      	ldr	r3, [r4, #24]
 8009ad0:	b913      	cbnz	r3, 8009ad8 <iprintf+0x14>
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f000 fa5e 	bl	8009f94 <__sinit>
 8009ad8:	ab05      	add	r3, sp, #20
 8009ada:	9a04      	ldr	r2, [sp, #16]
 8009adc:	68a1      	ldr	r1, [r4, #8]
 8009ade:	9301      	str	r3, [sp, #4]
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 fc67 	bl	800a3b4 <_vfiprintf_r>
 8009ae6:	b002      	add	sp, #8
 8009ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aec:	b004      	add	sp, #16
 8009aee:	4770      	bx	lr
 8009af0:	20000010 	.word	0x20000010

08009af4 <_puts_r>:
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	460e      	mov	r6, r1
 8009af8:	4605      	mov	r5, r0
 8009afa:	b118      	cbz	r0, 8009b04 <_puts_r+0x10>
 8009afc:	6983      	ldr	r3, [r0, #24]
 8009afe:	b90b      	cbnz	r3, 8009b04 <_puts_r+0x10>
 8009b00:	f000 fa48 	bl	8009f94 <__sinit>
 8009b04:	69ab      	ldr	r3, [r5, #24]
 8009b06:	68ac      	ldr	r4, [r5, #8]
 8009b08:	b913      	cbnz	r3, 8009b10 <_puts_r+0x1c>
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f000 fa42 	bl	8009f94 <__sinit>
 8009b10:	4b2c      	ldr	r3, [pc, #176]	; (8009bc4 <_puts_r+0xd0>)
 8009b12:	429c      	cmp	r4, r3
 8009b14:	d120      	bne.n	8009b58 <_puts_r+0x64>
 8009b16:	686c      	ldr	r4, [r5, #4]
 8009b18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b1a:	07db      	lsls	r3, r3, #31
 8009b1c:	d405      	bmi.n	8009b2a <_puts_r+0x36>
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	0598      	lsls	r0, r3, #22
 8009b22:	d402      	bmi.n	8009b2a <_puts_r+0x36>
 8009b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b26:	f000 fad3 	bl	800a0d0 <__retarget_lock_acquire_recursive>
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	0719      	lsls	r1, r3, #28
 8009b2e:	d51d      	bpl.n	8009b6c <_puts_r+0x78>
 8009b30:	6923      	ldr	r3, [r4, #16]
 8009b32:	b1db      	cbz	r3, 8009b6c <_puts_r+0x78>
 8009b34:	3e01      	subs	r6, #1
 8009b36:	68a3      	ldr	r3, [r4, #8]
 8009b38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	60a3      	str	r3, [r4, #8]
 8009b40:	bb39      	cbnz	r1, 8009b92 <_puts_r+0x9e>
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	da38      	bge.n	8009bb8 <_puts_r+0xc4>
 8009b46:	4622      	mov	r2, r4
 8009b48:	210a      	movs	r1, #10
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	f000 f848 	bl	8009be0 <__swbuf_r>
 8009b50:	3001      	adds	r0, #1
 8009b52:	d011      	beq.n	8009b78 <_puts_r+0x84>
 8009b54:	250a      	movs	r5, #10
 8009b56:	e011      	b.n	8009b7c <_puts_r+0x88>
 8009b58:	4b1b      	ldr	r3, [pc, #108]	; (8009bc8 <_puts_r+0xd4>)
 8009b5a:	429c      	cmp	r4, r3
 8009b5c:	d101      	bne.n	8009b62 <_puts_r+0x6e>
 8009b5e:	68ac      	ldr	r4, [r5, #8]
 8009b60:	e7da      	b.n	8009b18 <_puts_r+0x24>
 8009b62:	4b1a      	ldr	r3, [pc, #104]	; (8009bcc <_puts_r+0xd8>)
 8009b64:	429c      	cmp	r4, r3
 8009b66:	bf08      	it	eq
 8009b68:	68ec      	ldreq	r4, [r5, #12]
 8009b6a:	e7d5      	b.n	8009b18 <_puts_r+0x24>
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 f888 	bl	8009c84 <__swsetup_r>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d0dd      	beq.n	8009b34 <_puts_r+0x40>
 8009b78:	f04f 35ff 	mov.w	r5, #4294967295
 8009b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b7e:	07da      	lsls	r2, r3, #31
 8009b80:	d405      	bmi.n	8009b8e <_puts_r+0x9a>
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	059b      	lsls	r3, r3, #22
 8009b86:	d402      	bmi.n	8009b8e <_puts_r+0x9a>
 8009b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b8a:	f000 faa2 	bl	800a0d2 <__retarget_lock_release_recursive>
 8009b8e:	4628      	mov	r0, r5
 8009b90:	bd70      	pop	{r4, r5, r6, pc}
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	da04      	bge.n	8009ba0 <_puts_r+0xac>
 8009b96:	69a2      	ldr	r2, [r4, #24]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	dc06      	bgt.n	8009baa <_puts_r+0xb6>
 8009b9c:	290a      	cmp	r1, #10
 8009b9e:	d004      	beq.n	8009baa <_puts_r+0xb6>
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	1c5a      	adds	r2, r3, #1
 8009ba4:	6022      	str	r2, [r4, #0]
 8009ba6:	7019      	strb	r1, [r3, #0]
 8009ba8:	e7c5      	b.n	8009b36 <_puts_r+0x42>
 8009baa:	4622      	mov	r2, r4
 8009bac:	4628      	mov	r0, r5
 8009bae:	f000 f817 	bl	8009be0 <__swbuf_r>
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	d1bf      	bne.n	8009b36 <_puts_r+0x42>
 8009bb6:	e7df      	b.n	8009b78 <_puts_r+0x84>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	250a      	movs	r5, #10
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	6022      	str	r2, [r4, #0]
 8009bc0:	701d      	strb	r5, [r3, #0]
 8009bc2:	e7db      	b.n	8009b7c <_puts_r+0x88>
 8009bc4:	0800ada8 	.word	0x0800ada8
 8009bc8:	0800adc8 	.word	0x0800adc8
 8009bcc:	0800ad88 	.word	0x0800ad88

08009bd0 <puts>:
 8009bd0:	4b02      	ldr	r3, [pc, #8]	; (8009bdc <puts+0xc>)
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	f7ff bf8d 	b.w	8009af4 <_puts_r>
 8009bda:	bf00      	nop
 8009bdc:	20000010 	.word	0x20000010

08009be0 <__swbuf_r>:
 8009be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be2:	460e      	mov	r6, r1
 8009be4:	4614      	mov	r4, r2
 8009be6:	4605      	mov	r5, r0
 8009be8:	b118      	cbz	r0, 8009bf2 <__swbuf_r+0x12>
 8009bea:	6983      	ldr	r3, [r0, #24]
 8009bec:	b90b      	cbnz	r3, 8009bf2 <__swbuf_r+0x12>
 8009bee:	f000 f9d1 	bl	8009f94 <__sinit>
 8009bf2:	4b21      	ldr	r3, [pc, #132]	; (8009c78 <__swbuf_r+0x98>)
 8009bf4:	429c      	cmp	r4, r3
 8009bf6:	d12b      	bne.n	8009c50 <__swbuf_r+0x70>
 8009bf8:	686c      	ldr	r4, [r5, #4]
 8009bfa:	69a3      	ldr	r3, [r4, #24]
 8009bfc:	60a3      	str	r3, [r4, #8]
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	071a      	lsls	r2, r3, #28
 8009c02:	d52f      	bpl.n	8009c64 <__swbuf_r+0x84>
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	b36b      	cbz	r3, 8009c64 <__swbuf_r+0x84>
 8009c08:	6923      	ldr	r3, [r4, #16]
 8009c0a:	6820      	ldr	r0, [r4, #0]
 8009c0c:	1ac0      	subs	r0, r0, r3
 8009c0e:	6963      	ldr	r3, [r4, #20]
 8009c10:	b2f6      	uxtb	r6, r6
 8009c12:	4283      	cmp	r3, r0
 8009c14:	4637      	mov	r7, r6
 8009c16:	dc04      	bgt.n	8009c22 <__swbuf_r+0x42>
 8009c18:	4621      	mov	r1, r4
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f000 f926 	bl	8009e6c <_fflush_r>
 8009c20:	bb30      	cbnz	r0, 8009c70 <__swbuf_r+0x90>
 8009c22:	68a3      	ldr	r3, [r4, #8]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	60a3      	str	r3, [r4, #8]
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	6022      	str	r2, [r4, #0]
 8009c2e:	701e      	strb	r6, [r3, #0]
 8009c30:	6963      	ldr	r3, [r4, #20]
 8009c32:	3001      	adds	r0, #1
 8009c34:	4283      	cmp	r3, r0
 8009c36:	d004      	beq.n	8009c42 <__swbuf_r+0x62>
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	07db      	lsls	r3, r3, #31
 8009c3c:	d506      	bpl.n	8009c4c <__swbuf_r+0x6c>
 8009c3e:	2e0a      	cmp	r6, #10
 8009c40:	d104      	bne.n	8009c4c <__swbuf_r+0x6c>
 8009c42:	4621      	mov	r1, r4
 8009c44:	4628      	mov	r0, r5
 8009c46:	f000 f911 	bl	8009e6c <_fflush_r>
 8009c4a:	b988      	cbnz	r0, 8009c70 <__swbuf_r+0x90>
 8009c4c:	4638      	mov	r0, r7
 8009c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c50:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <__swbuf_r+0x9c>)
 8009c52:	429c      	cmp	r4, r3
 8009c54:	d101      	bne.n	8009c5a <__swbuf_r+0x7a>
 8009c56:	68ac      	ldr	r4, [r5, #8]
 8009c58:	e7cf      	b.n	8009bfa <__swbuf_r+0x1a>
 8009c5a:	4b09      	ldr	r3, [pc, #36]	; (8009c80 <__swbuf_r+0xa0>)
 8009c5c:	429c      	cmp	r4, r3
 8009c5e:	bf08      	it	eq
 8009c60:	68ec      	ldreq	r4, [r5, #12]
 8009c62:	e7ca      	b.n	8009bfa <__swbuf_r+0x1a>
 8009c64:	4621      	mov	r1, r4
 8009c66:	4628      	mov	r0, r5
 8009c68:	f000 f80c 	bl	8009c84 <__swsetup_r>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d0cb      	beq.n	8009c08 <__swbuf_r+0x28>
 8009c70:	f04f 37ff 	mov.w	r7, #4294967295
 8009c74:	e7ea      	b.n	8009c4c <__swbuf_r+0x6c>
 8009c76:	bf00      	nop
 8009c78:	0800ada8 	.word	0x0800ada8
 8009c7c:	0800adc8 	.word	0x0800adc8
 8009c80:	0800ad88 	.word	0x0800ad88

08009c84 <__swsetup_r>:
 8009c84:	4b32      	ldr	r3, [pc, #200]	; (8009d50 <__swsetup_r+0xcc>)
 8009c86:	b570      	push	{r4, r5, r6, lr}
 8009c88:	681d      	ldr	r5, [r3, #0]
 8009c8a:	4606      	mov	r6, r0
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	b125      	cbz	r5, 8009c9a <__swsetup_r+0x16>
 8009c90:	69ab      	ldr	r3, [r5, #24]
 8009c92:	b913      	cbnz	r3, 8009c9a <__swsetup_r+0x16>
 8009c94:	4628      	mov	r0, r5
 8009c96:	f000 f97d 	bl	8009f94 <__sinit>
 8009c9a:	4b2e      	ldr	r3, [pc, #184]	; (8009d54 <__swsetup_r+0xd0>)
 8009c9c:	429c      	cmp	r4, r3
 8009c9e:	d10f      	bne.n	8009cc0 <__swsetup_r+0x3c>
 8009ca0:	686c      	ldr	r4, [r5, #4]
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ca8:	0719      	lsls	r1, r3, #28
 8009caa:	d42c      	bmi.n	8009d06 <__swsetup_r+0x82>
 8009cac:	06dd      	lsls	r5, r3, #27
 8009cae:	d411      	bmi.n	8009cd4 <__swsetup_r+0x50>
 8009cb0:	2309      	movs	r3, #9
 8009cb2:	6033      	str	r3, [r6, #0]
 8009cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cb8:	81a3      	strh	r3, [r4, #12]
 8009cba:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbe:	e03e      	b.n	8009d3e <__swsetup_r+0xba>
 8009cc0:	4b25      	ldr	r3, [pc, #148]	; (8009d58 <__swsetup_r+0xd4>)
 8009cc2:	429c      	cmp	r4, r3
 8009cc4:	d101      	bne.n	8009cca <__swsetup_r+0x46>
 8009cc6:	68ac      	ldr	r4, [r5, #8]
 8009cc8:	e7eb      	b.n	8009ca2 <__swsetup_r+0x1e>
 8009cca:	4b24      	ldr	r3, [pc, #144]	; (8009d5c <__swsetup_r+0xd8>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	bf08      	it	eq
 8009cd0:	68ec      	ldreq	r4, [r5, #12]
 8009cd2:	e7e6      	b.n	8009ca2 <__swsetup_r+0x1e>
 8009cd4:	0758      	lsls	r0, r3, #29
 8009cd6:	d512      	bpl.n	8009cfe <__swsetup_r+0x7a>
 8009cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cda:	b141      	cbz	r1, 8009cee <__swsetup_r+0x6a>
 8009cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ce0:	4299      	cmp	r1, r3
 8009ce2:	d002      	beq.n	8009cea <__swsetup_r+0x66>
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f000 fa5b 	bl	800a1a0 <_free_r>
 8009cea:	2300      	movs	r3, #0
 8009cec:	6363      	str	r3, [r4, #52]	; 0x34
 8009cee:	89a3      	ldrh	r3, [r4, #12]
 8009cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cf4:	81a3      	strh	r3, [r4, #12]
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	6063      	str	r3, [r4, #4]
 8009cfa:	6923      	ldr	r3, [r4, #16]
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	f043 0308 	orr.w	r3, r3, #8
 8009d04:	81a3      	strh	r3, [r4, #12]
 8009d06:	6923      	ldr	r3, [r4, #16]
 8009d08:	b94b      	cbnz	r3, 8009d1e <__swsetup_r+0x9a>
 8009d0a:	89a3      	ldrh	r3, [r4, #12]
 8009d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d14:	d003      	beq.n	8009d1e <__swsetup_r+0x9a>
 8009d16:	4621      	mov	r1, r4
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f000 fa01 	bl	800a120 <__smakebuf_r>
 8009d1e:	89a0      	ldrh	r0, [r4, #12]
 8009d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d24:	f010 0301 	ands.w	r3, r0, #1
 8009d28:	d00a      	beq.n	8009d40 <__swsetup_r+0xbc>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60a3      	str	r3, [r4, #8]
 8009d2e:	6963      	ldr	r3, [r4, #20]
 8009d30:	425b      	negs	r3, r3
 8009d32:	61a3      	str	r3, [r4, #24]
 8009d34:	6923      	ldr	r3, [r4, #16]
 8009d36:	b943      	cbnz	r3, 8009d4a <__swsetup_r+0xc6>
 8009d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d3c:	d1ba      	bne.n	8009cb4 <__swsetup_r+0x30>
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	0781      	lsls	r1, r0, #30
 8009d42:	bf58      	it	pl
 8009d44:	6963      	ldrpl	r3, [r4, #20]
 8009d46:	60a3      	str	r3, [r4, #8]
 8009d48:	e7f4      	b.n	8009d34 <__swsetup_r+0xb0>
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	e7f7      	b.n	8009d3e <__swsetup_r+0xba>
 8009d4e:	bf00      	nop
 8009d50:	20000010 	.word	0x20000010
 8009d54:	0800ada8 	.word	0x0800ada8
 8009d58:	0800adc8 	.word	0x0800adc8
 8009d5c:	0800ad88 	.word	0x0800ad88

08009d60 <__sflush_r>:
 8009d60:	898a      	ldrh	r2, [r1, #12]
 8009d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d66:	4605      	mov	r5, r0
 8009d68:	0710      	lsls	r0, r2, #28
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	d458      	bmi.n	8009e20 <__sflush_r+0xc0>
 8009d6e:	684b      	ldr	r3, [r1, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	dc05      	bgt.n	8009d80 <__sflush_r+0x20>
 8009d74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	dc02      	bgt.n	8009d80 <__sflush_r+0x20>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d82:	2e00      	cmp	r6, #0
 8009d84:	d0f9      	beq.n	8009d7a <__sflush_r+0x1a>
 8009d86:	2300      	movs	r3, #0
 8009d88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d8c:	682f      	ldr	r7, [r5, #0]
 8009d8e:	602b      	str	r3, [r5, #0]
 8009d90:	d032      	beq.n	8009df8 <__sflush_r+0x98>
 8009d92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	075a      	lsls	r2, r3, #29
 8009d98:	d505      	bpl.n	8009da6 <__sflush_r+0x46>
 8009d9a:	6863      	ldr	r3, [r4, #4]
 8009d9c:	1ac0      	subs	r0, r0, r3
 8009d9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009da0:	b10b      	cbz	r3, 8009da6 <__sflush_r+0x46>
 8009da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009da4:	1ac0      	subs	r0, r0, r3
 8009da6:	2300      	movs	r3, #0
 8009da8:	4602      	mov	r2, r0
 8009daa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dac:	6a21      	ldr	r1, [r4, #32]
 8009dae:	4628      	mov	r0, r5
 8009db0:	47b0      	blx	r6
 8009db2:	1c43      	adds	r3, r0, #1
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	d106      	bne.n	8009dc6 <__sflush_r+0x66>
 8009db8:	6829      	ldr	r1, [r5, #0]
 8009dba:	291d      	cmp	r1, #29
 8009dbc:	d82c      	bhi.n	8009e18 <__sflush_r+0xb8>
 8009dbe:	4a2a      	ldr	r2, [pc, #168]	; (8009e68 <__sflush_r+0x108>)
 8009dc0:	40ca      	lsrs	r2, r1
 8009dc2:	07d6      	lsls	r6, r2, #31
 8009dc4:	d528      	bpl.n	8009e18 <__sflush_r+0xb8>
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	6062      	str	r2, [r4, #4]
 8009dca:	04d9      	lsls	r1, r3, #19
 8009dcc:	6922      	ldr	r2, [r4, #16]
 8009dce:	6022      	str	r2, [r4, #0]
 8009dd0:	d504      	bpl.n	8009ddc <__sflush_r+0x7c>
 8009dd2:	1c42      	adds	r2, r0, #1
 8009dd4:	d101      	bne.n	8009dda <__sflush_r+0x7a>
 8009dd6:	682b      	ldr	r3, [r5, #0]
 8009dd8:	b903      	cbnz	r3, 8009ddc <__sflush_r+0x7c>
 8009dda:	6560      	str	r0, [r4, #84]	; 0x54
 8009ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dde:	602f      	str	r7, [r5, #0]
 8009de0:	2900      	cmp	r1, #0
 8009de2:	d0ca      	beq.n	8009d7a <__sflush_r+0x1a>
 8009de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009de8:	4299      	cmp	r1, r3
 8009dea:	d002      	beq.n	8009df2 <__sflush_r+0x92>
 8009dec:	4628      	mov	r0, r5
 8009dee:	f000 f9d7 	bl	800a1a0 <_free_r>
 8009df2:	2000      	movs	r0, #0
 8009df4:	6360      	str	r0, [r4, #52]	; 0x34
 8009df6:	e7c1      	b.n	8009d7c <__sflush_r+0x1c>
 8009df8:	6a21      	ldr	r1, [r4, #32]
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	47b0      	blx	r6
 8009e00:	1c41      	adds	r1, r0, #1
 8009e02:	d1c7      	bne.n	8009d94 <__sflush_r+0x34>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d0c4      	beq.n	8009d94 <__sflush_r+0x34>
 8009e0a:	2b1d      	cmp	r3, #29
 8009e0c:	d001      	beq.n	8009e12 <__sflush_r+0xb2>
 8009e0e:	2b16      	cmp	r3, #22
 8009e10:	d101      	bne.n	8009e16 <__sflush_r+0xb6>
 8009e12:	602f      	str	r7, [r5, #0]
 8009e14:	e7b1      	b.n	8009d7a <__sflush_r+0x1a>
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e1c:	81a3      	strh	r3, [r4, #12]
 8009e1e:	e7ad      	b.n	8009d7c <__sflush_r+0x1c>
 8009e20:	690f      	ldr	r7, [r1, #16]
 8009e22:	2f00      	cmp	r7, #0
 8009e24:	d0a9      	beq.n	8009d7a <__sflush_r+0x1a>
 8009e26:	0793      	lsls	r3, r2, #30
 8009e28:	680e      	ldr	r6, [r1, #0]
 8009e2a:	bf08      	it	eq
 8009e2c:	694b      	ldreq	r3, [r1, #20]
 8009e2e:	600f      	str	r7, [r1, #0]
 8009e30:	bf18      	it	ne
 8009e32:	2300      	movne	r3, #0
 8009e34:	eba6 0807 	sub.w	r8, r6, r7
 8009e38:	608b      	str	r3, [r1, #8]
 8009e3a:	f1b8 0f00 	cmp.w	r8, #0
 8009e3e:	dd9c      	ble.n	8009d7a <__sflush_r+0x1a>
 8009e40:	6a21      	ldr	r1, [r4, #32]
 8009e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e44:	4643      	mov	r3, r8
 8009e46:	463a      	mov	r2, r7
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b0      	blx	r6
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	dc06      	bgt.n	8009e5e <__sflush_r+0xfe>
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5c:	e78e      	b.n	8009d7c <__sflush_r+0x1c>
 8009e5e:	4407      	add	r7, r0
 8009e60:	eba8 0800 	sub.w	r8, r8, r0
 8009e64:	e7e9      	b.n	8009e3a <__sflush_r+0xda>
 8009e66:	bf00      	nop
 8009e68:	20400001 	.word	0x20400001

08009e6c <_fflush_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	690b      	ldr	r3, [r1, #16]
 8009e70:	4605      	mov	r5, r0
 8009e72:	460c      	mov	r4, r1
 8009e74:	b913      	cbnz	r3, 8009e7c <_fflush_r+0x10>
 8009e76:	2500      	movs	r5, #0
 8009e78:	4628      	mov	r0, r5
 8009e7a:	bd38      	pop	{r3, r4, r5, pc}
 8009e7c:	b118      	cbz	r0, 8009e86 <_fflush_r+0x1a>
 8009e7e:	6983      	ldr	r3, [r0, #24]
 8009e80:	b90b      	cbnz	r3, 8009e86 <_fflush_r+0x1a>
 8009e82:	f000 f887 	bl	8009f94 <__sinit>
 8009e86:	4b14      	ldr	r3, [pc, #80]	; (8009ed8 <_fflush_r+0x6c>)
 8009e88:	429c      	cmp	r4, r3
 8009e8a:	d11b      	bne.n	8009ec4 <_fflush_r+0x58>
 8009e8c:	686c      	ldr	r4, [r5, #4]
 8009e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0ef      	beq.n	8009e76 <_fflush_r+0xa>
 8009e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e98:	07d0      	lsls	r0, r2, #31
 8009e9a:	d404      	bmi.n	8009ea6 <_fflush_r+0x3a>
 8009e9c:	0599      	lsls	r1, r3, #22
 8009e9e:	d402      	bmi.n	8009ea6 <_fflush_r+0x3a>
 8009ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ea2:	f000 f915 	bl	800a0d0 <__retarget_lock_acquire_recursive>
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	f7ff ff59 	bl	8009d60 <__sflush_r>
 8009eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009eb0:	07da      	lsls	r2, r3, #31
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	d4e0      	bmi.n	8009e78 <_fflush_r+0xc>
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	059b      	lsls	r3, r3, #22
 8009eba:	d4dd      	bmi.n	8009e78 <_fflush_r+0xc>
 8009ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ebe:	f000 f908 	bl	800a0d2 <__retarget_lock_release_recursive>
 8009ec2:	e7d9      	b.n	8009e78 <_fflush_r+0xc>
 8009ec4:	4b05      	ldr	r3, [pc, #20]	; (8009edc <_fflush_r+0x70>)
 8009ec6:	429c      	cmp	r4, r3
 8009ec8:	d101      	bne.n	8009ece <_fflush_r+0x62>
 8009eca:	68ac      	ldr	r4, [r5, #8]
 8009ecc:	e7df      	b.n	8009e8e <_fflush_r+0x22>
 8009ece:	4b04      	ldr	r3, [pc, #16]	; (8009ee0 <_fflush_r+0x74>)
 8009ed0:	429c      	cmp	r4, r3
 8009ed2:	bf08      	it	eq
 8009ed4:	68ec      	ldreq	r4, [r5, #12]
 8009ed6:	e7da      	b.n	8009e8e <_fflush_r+0x22>
 8009ed8:	0800ada8 	.word	0x0800ada8
 8009edc:	0800adc8 	.word	0x0800adc8
 8009ee0:	0800ad88 	.word	0x0800ad88

08009ee4 <std>:
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	4604      	mov	r4, r0
 8009eea:	e9c0 3300 	strd	r3, r3, [r0]
 8009eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ef2:	6083      	str	r3, [r0, #8]
 8009ef4:	8181      	strh	r1, [r0, #12]
 8009ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8009ef8:	81c2      	strh	r2, [r0, #14]
 8009efa:	6183      	str	r3, [r0, #24]
 8009efc:	4619      	mov	r1, r3
 8009efe:	2208      	movs	r2, #8
 8009f00:	305c      	adds	r0, #92	; 0x5c
 8009f02:	f7ff fdd7 	bl	8009ab4 <memset>
 8009f06:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <std+0x38>)
 8009f08:	6263      	str	r3, [r4, #36]	; 0x24
 8009f0a:	4b05      	ldr	r3, [pc, #20]	; (8009f20 <std+0x3c>)
 8009f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f0e:	4b05      	ldr	r3, [pc, #20]	; (8009f24 <std+0x40>)
 8009f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f12:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <std+0x44>)
 8009f14:	6224      	str	r4, [r4, #32]
 8009f16:	6323      	str	r3, [r4, #48]	; 0x30
 8009f18:	bd10      	pop	{r4, pc}
 8009f1a:	bf00      	nop
 8009f1c:	0800a95d 	.word	0x0800a95d
 8009f20:	0800a97f 	.word	0x0800a97f
 8009f24:	0800a9b7 	.word	0x0800a9b7
 8009f28:	0800a9db 	.word	0x0800a9db

08009f2c <_cleanup_r>:
 8009f2c:	4901      	ldr	r1, [pc, #4]	; (8009f34 <_cleanup_r+0x8>)
 8009f2e:	f000 b8af 	b.w	800a090 <_fwalk_reent>
 8009f32:	bf00      	nop
 8009f34:	08009e6d 	.word	0x08009e6d

08009f38 <__sfmoreglue>:
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	2268      	movs	r2, #104	; 0x68
 8009f3c:	1e4d      	subs	r5, r1, #1
 8009f3e:	4355      	muls	r5, r2
 8009f40:	460e      	mov	r6, r1
 8009f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f46:	f000 f997 	bl	800a278 <_malloc_r>
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	b140      	cbz	r0, 8009f60 <__sfmoreglue+0x28>
 8009f4e:	2100      	movs	r1, #0
 8009f50:	e9c0 1600 	strd	r1, r6, [r0]
 8009f54:	300c      	adds	r0, #12
 8009f56:	60a0      	str	r0, [r4, #8]
 8009f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f5c:	f7ff fdaa 	bl	8009ab4 <memset>
 8009f60:	4620      	mov	r0, r4
 8009f62:	bd70      	pop	{r4, r5, r6, pc}

08009f64 <__sfp_lock_acquire>:
 8009f64:	4801      	ldr	r0, [pc, #4]	; (8009f6c <__sfp_lock_acquire+0x8>)
 8009f66:	f000 b8b3 	b.w	800a0d0 <__retarget_lock_acquire_recursive>
 8009f6a:	bf00      	nop
 8009f6c:	20002695 	.word	0x20002695

08009f70 <__sfp_lock_release>:
 8009f70:	4801      	ldr	r0, [pc, #4]	; (8009f78 <__sfp_lock_release+0x8>)
 8009f72:	f000 b8ae 	b.w	800a0d2 <__retarget_lock_release_recursive>
 8009f76:	bf00      	nop
 8009f78:	20002695 	.word	0x20002695

08009f7c <__sinit_lock_acquire>:
 8009f7c:	4801      	ldr	r0, [pc, #4]	; (8009f84 <__sinit_lock_acquire+0x8>)
 8009f7e:	f000 b8a7 	b.w	800a0d0 <__retarget_lock_acquire_recursive>
 8009f82:	bf00      	nop
 8009f84:	20002696 	.word	0x20002696

08009f88 <__sinit_lock_release>:
 8009f88:	4801      	ldr	r0, [pc, #4]	; (8009f90 <__sinit_lock_release+0x8>)
 8009f8a:	f000 b8a2 	b.w	800a0d2 <__retarget_lock_release_recursive>
 8009f8e:	bf00      	nop
 8009f90:	20002696 	.word	0x20002696

08009f94 <__sinit>:
 8009f94:	b510      	push	{r4, lr}
 8009f96:	4604      	mov	r4, r0
 8009f98:	f7ff fff0 	bl	8009f7c <__sinit_lock_acquire>
 8009f9c:	69a3      	ldr	r3, [r4, #24]
 8009f9e:	b11b      	cbz	r3, 8009fa8 <__sinit+0x14>
 8009fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fa4:	f7ff bff0 	b.w	8009f88 <__sinit_lock_release>
 8009fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fac:	6523      	str	r3, [r4, #80]	; 0x50
 8009fae:	4b13      	ldr	r3, [pc, #76]	; (8009ffc <__sinit+0x68>)
 8009fb0:	4a13      	ldr	r2, [pc, #76]	; (800a000 <__sinit+0x6c>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009fb6:	42a3      	cmp	r3, r4
 8009fb8:	bf04      	itt	eq
 8009fba:	2301      	moveq	r3, #1
 8009fbc:	61a3      	streq	r3, [r4, #24]
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 f820 	bl	800a004 <__sfp>
 8009fc4:	6060      	str	r0, [r4, #4]
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f000 f81c 	bl	800a004 <__sfp>
 8009fcc:	60a0      	str	r0, [r4, #8]
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f000 f818 	bl	800a004 <__sfp>
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	60e0      	str	r0, [r4, #12]
 8009fd8:	2104      	movs	r1, #4
 8009fda:	6860      	ldr	r0, [r4, #4]
 8009fdc:	f7ff ff82 	bl	8009ee4 <std>
 8009fe0:	68a0      	ldr	r0, [r4, #8]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	2109      	movs	r1, #9
 8009fe6:	f7ff ff7d 	bl	8009ee4 <std>
 8009fea:	68e0      	ldr	r0, [r4, #12]
 8009fec:	2202      	movs	r2, #2
 8009fee:	2112      	movs	r1, #18
 8009ff0:	f7ff ff78 	bl	8009ee4 <std>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	61a3      	str	r3, [r4, #24]
 8009ff8:	e7d2      	b.n	8009fa0 <__sinit+0xc>
 8009ffa:	bf00      	nop
 8009ffc:	0800ad84 	.word	0x0800ad84
 800a000:	08009f2d 	.word	0x08009f2d

0800a004 <__sfp>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	4607      	mov	r7, r0
 800a008:	f7ff ffac 	bl	8009f64 <__sfp_lock_acquire>
 800a00c:	4b1e      	ldr	r3, [pc, #120]	; (800a088 <__sfp+0x84>)
 800a00e:	681e      	ldr	r6, [r3, #0]
 800a010:	69b3      	ldr	r3, [r6, #24]
 800a012:	b913      	cbnz	r3, 800a01a <__sfp+0x16>
 800a014:	4630      	mov	r0, r6
 800a016:	f7ff ffbd 	bl	8009f94 <__sinit>
 800a01a:	3648      	adds	r6, #72	; 0x48
 800a01c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a020:	3b01      	subs	r3, #1
 800a022:	d503      	bpl.n	800a02c <__sfp+0x28>
 800a024:	6833      	ldr	r3, [r6, #0]
 800a026:	b30b      	cbz	r3, 800a06c <__sfp+0x68>
 800a028:	6836      	ldr	r6, [r6, #0]
 800a02a:	e7f7      	b.n	800a01c <__sfp+0x18>
 800a02c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a030:	b9d5      	cbnz	r5, 800a068 <__sfp+0x64>
 800a032:	4b16      	ldr	r3, [pc, #88]	; (800a08c <__sfp+0x88>)
 800a034:	60e3      	str	r3, [r4, #12]
 800a036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a03a:	6665      	str	r5, [r4, #100]	; 0x64
 800a03c:	f000 f847 	bl	800a0ce <__retarget_lock_init_recursive>
 800a040:	f7ff ff96 	bl	8009f70 <__sfp_lock_release>
 800a044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a04c:	6025      	str	r5, [r4, #0]
 800a04e:	61a5      	str	r5, [r4, #24]
 800a050:	2208      	movs	r2, #8
 800a052:	4629      	mov	r1, r5
 800a054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a058:	f7ff fd2c 	bl	8009ab4 <memset>
 800a05c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a064:	4620      	mov	r0, r4
 800a066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a068:	3468      	adds	r4, #104	; 0x68
 800a06a:	e7d9      	b.n	800a020 <__sfp+0x1c>
 800a06c:	2104      	movs	r1, #4
 800a06e:	4638      	mov	r0, r7
 800a070:	f7ff ff62 	bl	8009f38 <__sfmoreglue>
 800a074:	4604      	mov	r4, r0
 800a076:	6030      	str	r0, [r6, #0]
 800a078:	2800      	cmp	r0, #0
 800a07a:	d1d5      	bne.n	800a028 <__sfp+0x24>
 800a07c:	f7ff ff78 	bl	8009f70 <__sfp_lock_release>
 800a080:	230c      	movs	r3, #12
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	e7ee      	b.n	800a064 <__sfp+0x60>
 800a086:	bf00      	nop
 800a088:	0800ad84 	.word	0x0800ad84
 800a08c:	ffff0001 	.word	0xffff0001

0800a090 <_fwalk_reent>:
 800a090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a094:	4606      	mov	r6, r0
 800a096:	4688      	mov	r8, r1
 800a098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a09c:	2700      	movs	r7, #0
 800a09e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0a2:	f1b9 0901 	subs.w	r9, r9, #1
 800a0a6:	d505      	bpl.n	800a0b4 <_fwalk_reent+0x24>
 800a0a8:	6824      	ldr	r4, [r4, #0]
 800a0aa:	2c00      	cmp	r4, #0
 800a0ac:	d1f7      	bne.n	800a09e <_fwalk_reent+0xe>
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0b4:	89ab      	ldrh	r3, [r5, #12]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d907      	bls.n	800a0ca <_fwalk_reent+0x3a>
 800a0ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	d003      	beq.n	800a0ca <_fwalk_reent+0x3a>
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	47c0      	blx	r8
 800a0c8:	4307      	orrs	r7, r0
 800a0ca:	3568      	adds	r5, #104	; 0x68
 800a0cc:	e7e9      	b.n	800a0a2 <_fwalk_reent+0x12>

0800a0ce <__retarget_lock_init_recursive>:
 800a0ce:	4770      	bx	lr

0800a0d0 <__retarget_lock_acquire_recursive>:
 800a0d0:	4770      	bx	lr

0800a0d2 <__retarget_lock_release_recursive>:
 800a0d2:	4770      	bx	lr

0800a0d4 <__swhatbuf_r>:
 800a0d4:	b570      	push	{r4, r5, r6, lr}
 800a0d6:	460e      	mov	r6, r1
 800a0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	b096      	sub	sp, #88	; 0x58
 800a0e0:	4614      	mov	r4, r2
 800a0e2:	461d      	mov	r5, r3
 800a0e4:	da08      	bge.n	800a0f8 <__swhatbuf_r+0x24>
 800a0e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	602a      	str	r2, [r5, #0]
 800a0ee:	061a      	lsls	r2, r3, #24
 800a0f0:	d410      	bmi.n	800a114 <__swhatbuf_r+0x40>
 800a0f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0f6:	e00e      	b.n	800a116 <__swhatbuf_r+0x42>
 800a0f8:	466a      	mov	r2, sp
 800a0fa:	f000 fc95 	bl	800aa28 <_fstat_r>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	dbf1      	blt.n	800a0e6 <__swhatbuf_r+0x12>
 800a102:	9a01      	ldr	r2, [sp, #4]
 800a104:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a108:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a10c:	425a      	negs	r2, r3
 800a10e:	415a      	adcs	r2, r3
 800a110:	602a      	str	r2, [r5, #0]
 800a112:	e7ee      	b.n	800a0f2 <__swhatbuf_r+0x1e>
 800a114:	2340      	movs	r3, #64	; 0x40
 800a116:	2000      	movs	r0, #0
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	b016      	add	sp, #88	; 0x58
 800a11c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a120 <__smakebuf_r>:
 800a120:	898b      	ldrh	r3, [r1, #12]
 800a122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a124:	079d      	lsls	r5, r3, #30
 800a126:	4606      	mov	r6, r0
 800a128:	460c      	mov	r4, r1
 800a12a:	d507      	bpl.n	800a13c <__smakebuf_r+0x1c>
 800a12c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	6123      	str	r3, [r4, #16]
 800a134:	2301      	movs	r3, #1
 800a136:	6163      	str	r3, [r4, #20]
 800a138:	b002      	add	sp, #8
 800a13a:	bd70      	pop	{r4, r5, r6, pc}
 800a13c:	ab01      	add	r3, sp, #4
 800a13e:	466a      	mov	r2, sp
 800a140:	f7ff ffc8 	bl	800a0d4 <__swhatbuf_r>
 800a144:	9900      	ldr	r1, [sp, #0]
 800a146:	4605      	mov	r5, r0
 800a148:	4630      	mov	r0, r6
 800a14a:	f000 f895 	bl	800a278 <_malloc_r>
 800a14e:	b948      	cbnz	r0, 800a164 <__smakebuf_r+0x44>
 800a150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a154:	059a      	lsls	r2, r3, #22
 800a156:	d4ef      	bmi.n	800a138 <__smakebuf_r+0x18>
 800a158:	f023 0303 	bic.w	r3, r3, #3
 800a15c:	f043 0302 	orr.w	r3, r3, #2
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	e7e3      	b.n	800a12c <__smakebuf_r+0xc>
 800a164:	4b0d      	ldr	r3, [pc, #52]	; (800a19c <__smakebuf_r+0x7c>)
 800a166:	62b3      	str	r3, [r6, #40]	; 0x28
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	6020      	str	r0, [r4, #0]
 800a16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	6163      	str	r3, [r4, #20]
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	6120      	str	r0, [r4, #16]
 800a17a:	b15b      	cbz	r3, 800a194 <__smakebuf_r+0x74>
 800a17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a180:	4630      	mov	r0, r6
 800a182:	f000 fc63 	bl	800aa4c <_isatty_r>
 800a186:	b128      	cbz	r0, 800a194 <__smakebuf_r+0x74>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	f023 0303 	bic.w	r3, r3, #3
 800a18e:	f043 0301 	orr.w	r3, r3, #1
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	89a0      	ldrh	r0, [r4, #12]
 800a196:	4305      	orrs	r5, r0
 800a198:	81a5      	strh	r5, [r4, #12]
 800a19a:	e7cd      	b.n	800a138 <__smakebuf_r+0x18>
 800a19c:	08009f2d 	.word	0x08009f2d

0800a1a0 <_free_r>:
 800a1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1a2:	2900      	cmp	r1, #0
 800a1a4:	d044      	beq.n	800a230 <_free_r+0x90>
 800a1a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1aa:	9001      	str	r0, [sp, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f1a1 0404 	sub.w	r4, r1, #4
 800a1b2:	bfb8      	it	lt
 800a1b4:	18e4      	addlt	r4, r4, r3
 800a1b6:	f000 fc6b 	bl	800aa90 <__malloc_lock>
 800a1ba:	4a1e      	ldr	r2, [pc, #120]	; (800a234 <_free_r+0x94>)
 800a1bc:	9801      	ldr	r0, [sp, #4]
 800a1be:	6813      	ldr	r3, [r2, #0]
 800a1c0:	b933      	cbnz	r3, 800a1d0 <_free_r+0x30>
 800a1c2:	6063      	str	r3, [r4, #4]
 800a1c4:	6014      	str	r4, [r2, #0]
 800a1c6:	b003      	add	sp, #12
 800a1c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1cc:	f000 bc66 	b.w	800aa9c <__malloc_unlock>
 800a1d0:	42a3      	cmp	r3, r4
 800a1d2:	d908      	bls.n	800a1e6 <_free_r+0x46>
 800a1d4:	6825      	ldr	r5, [r4, #0]
 800a1d6:	1961      	adds	r1, r4, r5
 800a1d8:	428b      	cmp	r3, r1
 800a1da:	bf01      	itttt	eq
 800a1dc:	6819      	ldreq	r1, [r3, #0]
 800a1de:	685b      	ldreq	r3, [r3, #4]
 800a1e0:	1949      	addeq	r1, r1, r5
 800a1e2:	6021      	streq	r1, [r4, #0]
 800a1e4:	e7ed      	b.n	800a1c2 <_free_r+0x22>
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	b10b      	cbz	r3, 800a1f0 <_free_r+0x50>
 800a1ec:	42a3      	cmp	r3, r4
 800a1ee:	d9fa      	bls.n	800a1e6 <_free_r+0x46>
 800a1f0:	6811      	ldr	r1, [r2, #0]
 800a1f2:	1855      	adds	r5, r2, r1
 800a1f4:	42a5      	cmp	r5, r4
 800a1f6:	d10b      	bne.n	800a210 <_free_r+0x70>
 800a1f8:	6824      	ldr	r4, [r4, #0]
 800a1fa:	4421      	add	r1, r4
 800a1fc:	1854      	adds	r4, r2, r1
 800a1fe:	42a3      	cmp	r3, r4
 800a200:	6011      	str	r1, [r2, #0]
 800a202:	d1e0      	bne.n	800a1c6 <_free_r+0x26>
 800a204:	681c      	ldr	r4, [r3, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	6053      	str	r3, [r2, #4]
 800a20a:	4421      	add	r1, r4
 800a20c:	6011      	str	r1, [r2, #0]
 800a20e:	e7da      	b.n	800a1c6 <_free_r+0x26>
 800a210:	d902      	bls.n	800a218 <_free_r+0x78>
 800a212:	230c      	movs	r3, #12
 800a214:	6003      	str	r3, [r0, #0]
 800a216:	e7d6      	b.n	800a1c6 <_free_r+0x26>
 800a218:	6825      	ldr	r5, [r4, #0]
 800a21a:	1961      	adds	r1, r4, r5
 800a21c:	428b      	cmp	r3, r1
 800a21e:	bf04      	itt	eq
 800a220:	6819      	ldreq	r1, [r3, #0]
 800a222:	685b      	ldreq	r3, [r3, #4]
 800a224:	6063      	str	r3, [r4, #4]
 800a226:	bf04      	itt	eq
 800a228:	1949      	addeq	r1, r1, r5
 800a22a:	6021      	streq	r1, [r4, #0]
 800a22c:	6054      	str	r4, [r2, #4]
 800a22e:	e7ca      	b.n	800a1c6 <_free_r+0x26>
 800a230:	b003      	add	sp, #12
 800a232:	bd30      	pop	{r4, r5, pc}
 800a234:	20002698 	.word	0x20002698

0800a238 <sbrk_aligned>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	4e0e      	ldr	r6, [pc, #56]	; (800a274 <sbrk_aligned+0x3c>)
 800a23c:	460c      	mov	r4, r1
 800a23e:	6831      	ldr	r1, [r6, #0]
 800a240:	4605      	mov	r5, r0
 800a242:	b911      	cbnz	r1, 800a24a <sbrk_aligned+0x12>
 800a244:	f000 fb7a 	bl	800a93c <_sbrk_r>
 800a248:	6030      	str	r0, [r6, #0]
 800a24a:	4621      	mov	r1, r4
 800a24c:	4628      	mov	r0, r5
 800a24e:	f000 fb75 	bl	800a93c <_sbrk_r>
 800a252:	1c43      	adds	r3, r0, #1
 800a254:	d00a      	beq.n	800a26c <sbrk_aligned+0x34>
 800a256:	1cc4      	adds	r4, r0, #3
 800a258:	f024 0403 	bic.w	r4, r4, #3
 800a25c:	42a0      	cmp	r0, r4
 800a25e:	d007      	beq.n	800a270 <sbrk_aligned+0x38>
 800a260:	1a21      	subs	r1, r4, r0
 800a262:	4628      	mov	r0, r5
 800a264:	f000 fb6a 	bl	800a93c <_sbrk_r>
 800a268:	3001      	adds	r0, #1
 800a26a:	d101      	bne.n	800a270 <sbrk_aligned+0x38>
 800a26c:	f04f 34ff 	mov.w	r4, #4294967295
 800a270:	4620      	mov	r0, r4
 800a272:	bd70      	pop	{r4, r5, r6, pc}
 800a274:	2000269c 	.word	0x2000269c

0800a278 <_malloc_r>:
 800a278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27c:	1ccd      	adds	r5, r1, #3
 800a27e:	f025 0503 	bic.w	r5, r5, #3
 800a282:	3508      	adds	r5, #8
 800a284:	2d0c      	cmp	r5, #12
 800a286:	bf38      	it	cc
 800a288:	250c      	movcc	r5, #12
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	4607      	mov	r7, r0
 800a28e:	db01      	blt.n	800a294 <_malloc_r+0x1c>
 800a290:	42a9      	cmp	r1, r5
 800a292:	d905      	bls.n	800a2a0 <_malloc_r+0x28>
 800a294:	230c      	movs	r3, #12
 800a296:	603b      	str	r3, [r7, #0]
 800a298:	2600      	movs	r6, #0
 800a29a:	4630      	mov	r0, r6
 800a29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a0:	4e2e      	ldr	r6, [pc, #184]	; (800a35c <_malloc_r+0xe4>)
 800a2a2:	f000 fbf5 	bl	800aa90 <__malloc_lock>
 800a2a6:	6833      	ldr	r3, [r6, #0]
 800a2a8:	461c      	mov	r4, r3
 800a2aa:	bb34      	cbnz	r4, 800a2fa <_malloc_r+0x82>
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	f7ff ffc2 	bl	800a238 <sbrk_aligned>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	d14d      	bne.n	800a356 <_malloc_r+0xde>
 800a2ba:	6834      	ldr	r4, [r6, #0]
 800a2bc:	4626      	mov	r6, r4
 800a2be:	2e00      	cmp	r6, #0
 800a2c0:	d140      	bne.n	800a344 <_malloc_r+0xcc>
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	eb04 0803 	add.w	r8, r4, r3
 800a2cc:	f000 fb36 	bl	800a93c <_sbrk_r>
 800a2d0:	4580      	cmp	r8, r0
 800a2d2:	d13a      	bne.n	800a34a <_malloc_r+0xd2>
 800a2d4:	6821      	ldr	r1, [r4, #0]
 800a2d6:	3503      	adds	r5, #3
 800a2d8:	1a6d      	subs	r5, r5, r1
 800a2da:	f025 0503 	bic.w	r5, r5, #3
 800a2de:	3508      	adds	r5, #8
 800a2e0:	2d0c      	cmp	r5, #12
 800a2e2:	bf38      	it	cc
 800a2e4:	250c      	movcc	r5, #12
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	f7ff ffa5 	bl	800a238 <sbrk_aligned>
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d02b      	beq.n	800a34a <_malloc_r+0xd2>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	442b      	add	r3, r5
 800a2f6:	6023      	str	r3, [r4, #0]
 800a2f8:	e00e      	b.n	800a318 <_malloc_r+0xa0>
 800a2fa:	6822      	ldr	r2, [r4, #0]
 800a2fc:	1b52      	subs	r2, r2, r5
 800a2fe:	d41e      	bmi.n	800a33e <_malloc_r+0xc6>
 800a300:	2a0b      	cmp	r2, #11
 800a302:	d916      	bls.n	800a332 <_malloc_r+0xba>
 800a304:	1961      	adds	r1, r4, r5
 800a306:	42a3      	cmp	r3, r4
 800a308:	6025      	str	r5, [r4, #0]
 800a30a:	bf18      	it	ne
 800a30c:	6059      	strne	r1, [r3, #4]
 800a30e:	6863      	ldr	r3, [r4, #4]
 800a310:	bf08      	it	eq
 800a312:	6031      	streq	r1, [r6, #0]
 800a314:	5162      	str	r2, [r4, r5]
 800a316:	604b      	str	r3, [r1, #4]
 800a318:	4638      	mov	r0, r7
 800a31a:	f104 060b 	add.w	r6, r4, #11
 800a31e:	f000 fbbd 	bl	800aa9c <__malloc_unlock>
 800a322:	f026 0607 	bic.w	r6, r6, #7
 800a326:	1d23      	adds	r3, r4, #4
 800a328:	1af2      	subs	r2, r6, r3
 800a32a:	d0b6      	beq.n	800a29a <_malloc_r+0x22>
 800a32c:	1b9b      	subs	r3, r3, r6
 800a32e:	50a3      	str	r3, [r4, r2]
 800a330:	e7b3      	b.n	800a29a <_malloc_r+0x22>
 800a332:	6862      	ldr	r2, [r4, #4]
 800a334:	42a3      	cmp	r3, r4
 800a336:	bf0c      	ite	eq
 800a338:	6032      	streq	r2, [r6, #0]
 800a33a:	605a      	strne	r2, [r3, #4]
 800a33c:	e7ec      	b.n	800a318 <_malloc_r+0xa0>
 800a33e:	4623      	mov	r3, r4
 800a340:	6864      	ldr	r4, [r4, #4]
 800a342:	e7b2      	b.n	800a2aa <_malloc_r+0x32>
 800a344:	4634      	mov	r4, r6
 800a346:	6876      	ldr	r6, [r6, #4]
 800a348:	e7b9      	b.n	800a2be <_malloc_r+0x46>
 800a34a:	230c      	movs	r3, #12
 800a34c:	603b      	str	r3, [r7, #0]
 800a34e:	4638      	mov	r0, r7
 800a350:	f000 fba4 	bl	800aa9c <__malloc_unlock>
 800a354:	e7a1      	b.n	800a29a <_malloc_r+0x22>
 800a356:	6025      	str	r5, [r4, #0]
 800a358:	e7de      	b.n	800a318 <_malloc_r+0xa0>
 800a35a:	bf00      	nop
 800a35c:	20002698 	.word	0x20002698

0800a360 <__sfputc_r>:
 800a360:	6893      	ldr	r3, [r2, #8]
 800a362:	3b01      	subs	r3, #1
 800a364:	2b00      	cmp	r3, #0
 800a366:	b410      	push	{r4}
 800a368:	6093      	str	r3, [r2, #8]
 800a36a:	da08      	bge.n	800a37e <__sfputc_r+0x1e>
 800a36c:	6994      	ldr	r4, [r2, #24]
 800a36e:	42a3      	cmp	r3, r4
 800a370:	db01      	blt.n	800a376 <__sfputc_r+0x16>
 800a372:	290a      	cmp	r1, #10
 800a374:	d103      	bne.n	800a37e <__sfputc_r+0x1e>
 800a376:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a37a:	f7ff bc31 	b.w	8009be0 <__swbuf_r>
 800a37e:	6813      	ldr	r3, [r2, #0]
 800a380:	1c58      	adds	r0, r3, #1
 800a382:	6010      	str	r0, [r2, #0]
 800a384:	7019      	strb	r1, [r3, #0]
 800a386:	4608      	mov	r0, r1
 800a388:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <__sfputs_r>:
 800a38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a390:	4606      	mov	r6, r0
 800a392:	460f      	mov	r7, r1
 800a394:	4614      	mov	r4, r2
 800a396:	18d5      	adds	r5, r2, r3
 800a398:	42ac      	cmp	r4, r5
 800a39a:	d101      	bne.n	800a3a0 <__sfputs_r+0x12>
 800a39c:	2000      	movs	r0, #0
 800a39e:	e007      	b.n	800a3b0 <__sfputs_r+0x22>
 800a3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a4:	463a      	mov	r2, r7
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f7ff ffda 	bl	800a360 <__sfputc_r>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d1f3      	bne.n	800a398 <__sfputs_r+0xa>
 800a3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3b4 <_vfiprintf_r>:
 800a3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b8:	460d      	mov	r5, r1
 800a3ba:	b09d      	sub	sp, #116	; 0x74
 800a3bc:	4614      	mov	r4, r2
 800a3be:	4698      	mov	r8, r3
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	b118      	cbz	r0, 800a3cc <_vfiprintf_r+0x18>
 800a3c4:	6983      	ldr	r3, [r0, #24]
 800a3c6:	b90b      	cbnz	r3, 800a3cc <_vfiprintf_r+0x18>
 800a3c8:	f7ff fde4 	bl	8009f94 <__sinit>
 800a3cc:	4b89      	ldr	r3, [pc, #548]	; (800a5f4 <_vfiprintf_r+0x240>)
 800a3ce:	429d      	cmp	r5, r3
 800a3d0:	d11b      	bne.n	800a40a <_vfiprintf_r+0x56>
 800a3d2:	6875      	ldr	r5, [r6, #4]
 800a3d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3d6:	07d9      	lsls	r1, r3, #31
 800a3d8:	d405      	bmi.n	800a3e6 <_vfiprintf_r+0x32>
 800a3da:	89ab      	ldrh	r3, [r5, #12]
 800a3dc:	059a      	lsls	r2, r3, #22
 800a3de:	d402      	bmi.n	800a3e6 <_vfiprintf_r+0x32>
 800a3e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3e2:	f7ff fe75 	bl	800a0d0 <__retarget_lock_acquire_recursive>
 800a3e6:	89ab      	ldrh	r3, [r5, #12]
 800a3e8:	071b      	lsls	r3, r3, #28
 800a3ea:	d501      	bpl.n	800a3f0 <_vfiprintf_r+0x3c>
 800a3ec:	692b      	ldr	r3, [r5, #16]
 800a3ee:	b9eb      	cbnz	r3, 800a42c <_vfiprintf_r+0x78>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f7ff fc46 	bl	8009c84 <__swsetup_r>
 800a3f8:	b1c0      	cbz	r0, 800a42c <_vfiprintf_r+0x78>
 800a3fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3fc:	07dc      	lsls	r4, r3, #31
 800a3fe:	d50e      	bpl.n	800a41e <_vfiprintf_r+0x6a>
 800a400:	f04f 30ff 	mov.w	r0, #4294967295
 800a404:	b01d      	add	sp, #116	; 0x74
 800a406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40a:	4b7b      	ldr	r3, [pc, #492]	; (800a5f8 <_vfiprintf_r+0x244>)
 800a40c:	429d      	cmp	r5, r3
 800a40e:	d101      	bne.n	800a414 <_vfiprintf_r+0x60>
 800a410:	68b5      	ldr	r5, [r6, #8]
 800a412:	e7df      	b.n	800a3d4 <_vfiprintf_r+0x20>
 800a414:	4b79      	ldr	r3, [pc, #484]	; (800a5fc <_vfiprintf_r+0x248>)
 800a416:	429d      	cmp	r5, r3
 800a418:	bf08      	it	eq
 800a41a:	68f5      	ldreq	r5, [r6, #12]
 800a41c:	e7da      	b.n	800a3d4 <_vfiprintf_r+0x20>
 800a41e:	89ab      	ldrh	r3, [r5, #12]
 800a420:	0598      	lsls	r0, r3, #22
 800a422:	d4ed      	bmi.n	800a400 <_vfiprintf_r+0x4c>
 800a424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a426:	f7ff fe54 	bl	800a0d2 <__retarget_lock_release_recursive>
 800a42a:	e7e9      	b.n	800a400 <_vfiprintf_r+0x4c>
 800a42c:	2300      	movs	r3, #0
 800a42e:	9309      	str	r3, [sp, #36]	; 0x24
 800a430:	2320      	movs	r3, #32
 800a432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a436:	f8cd 800c 	str.w	r8, [sp, #12]
 800a43a:	2330      	movs	r3, #48	; 0x30
 800a43c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a600 <_vfiprintf_r+0x24c>
 800a440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a444:	f04f 0901 	mov.w	r9, #1
 800a448:	4623      	mov	r3, r4
 800a44a:	469a      	mov	sl, r3
 800a44c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a450:	b10a      	cbz	r2, 800a456 <_vfiprintf_r+0xa2>
 800a452:	2a25      	cmp	r2, #37	; 0x25
 800a454:	d1f9      	bne.n	800a44a <_vfiprintf_r+0x96>
 800a456:	ebba 0b04 	subs.w	fp, sl, r4
 800a45a:	d00b      	beq.n	800a474 <_vfiprintf_r+0xc0>
 800a45c:	465b      	mov	r3, fp
 800a45e:	4622      	mov	r2, r4
 800a460:	4629      	mov	r1, r5
 800a462:	4630      	mov	r0, r6
 800a464:	f7ff ff93 	bl	800a38e <__sfputs_r>
 800a468:	3001      	adds	r0, #1
 800a46a:	f000 80aa 	beq.w	800a5c2 <_vfiprintf_r+0x20e>
 800a46e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a470:	445a      	add	r2, fp
 800a472:	9209      	str	r2, [sp, #36]	; 0x24
 800a474:	f89a 3000 	ldrb.w	r3, [sl]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 80a2 	beq.w	800a5c2 <_vfiprintf_r+0x20e>
 800a47e:	2300      	movs	r3, #0
 800a480:	f04f 32ff 	mov.w	r2, #4294967295
 800a484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a488:	f10a 0a01 	add.w	sl, sl, #1
 800a48c:	9304      	str	r3, [sp, #16]
 800a48e:	9307      	str	r3, [sp, #28]
 800a490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a494:	931a      	str	r3, [sp, #104]	; 0x68
 800a496:	4654      	mov	r4, sl
 800a498:	2205      	movs	r2, #5
 800a49a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a49e:	4858      	ldr	r0, [pc, #352]	; (800a600 <_vfiprintf_r+0x24c>)
 800a4a0:	f7f5 feb6 	bl	8000210 <memchr>
 800a4a4:	9a04      	ldr	r2, [sp, #16]
 800a4a6:	b9d8      	cbnz	r0, 800a4e0 <_vfiprintf_r+0x12c>
 800a4a8:	06d1      	lsls	r1, r2, #27
 800a4aa:	bf44      	itt	mi
 800a4ac:	2320      	movmi	r3, #32
 800a4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4b2:	0713      	lsls	r3, r2, #28
 800a4b4:	bf44      	itt	mi
 800a4b6:	232b      	movmi	r3, #43	; 0x2b
 800a4b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c2:	d015      	beq.n	800a4f0 <_vfiprintf_r+0x13c>
 800a4c4:	9a07      	ldr	r2, [sp, #28]
 800a4c6:	4654      	mov	r4, sl
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	f04f 0c0a 	mov.w	ip, #10
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4d4:	3b30      	subs	r3, #48	; 0x30
 800a4d6:	2b09      	cmp	r3, #9
 800a4d8:	d94e      	bls.n	800a578 <_vfiprintf_r+0x1c4>
 800a4da:	b1b0      	cbz	r0, 800a50a <_vfiprintf_r+0x156>
 800a4dc:	9207      	str	r2, [sp, #28]
 800a4de:	e014      	b.n	800a50a <_vfiprintf_r+0x156>
 800a4e0:	eba0 0308 	sub.w	r3, r0, r8
 800a4e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	9304      	str	r3, [sp, #16]
 800a4ec:	46a2      	mov	sl, r4
 800a4ee:	e7d2      	b.n	800a496 <_vfiprintf_r+0xe2>
 800a4f0:	9b03      	ldr	r3, [sp, #12]
 800a4f2:	1d19      	adds	r1, r3, #4
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	9103      	str	r1, [sp, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	bfbb      	ittet	lt
 800a4fc:	425b      	neglt	r3, r3
 800a4fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a502:	9307      	strge	r3, [sp, #28]
 800a504:	9307      	strlt	r3, [sp, #28]
 800a506:	bfb8      	it	lt
 800a508:	9204      	strlt	r2, [sp, #16]
 800a50a:	7823      	ldrb	r3, [r4, #0]
 800a50c:	2b2e      	cmp	r3, #46	; 0x2e
 800a50e:	d10c      	bne.n	800a52a <_vfiprintf_r+0x176>
 800a510:	7863      	ldrb	r3, [r4, #1]
 800a512:	2b2a      	cmp	r3, #42	; 0x2a
 800a514:	d135      	bne.n	800a582 <_vfiprintf_r+0x1ce>
 800a516:	9b03      	ldr	r3, [sp, #12]
 800a518:	1d1a      	adds	r2, r3, #4
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	9203      	str	r2, [sp, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	bfb8      	it	lt
 800a522:	f04f 33ff 	movlt.w	r3, #4294967295
 800a526:	3402      	adds	r4, #2
 800a528:	9305      	str	r3, [sp, #20]
 800a52a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a610 <_vfiprintf_r+0x25c>
 800a52e:	7821      	ldrb	r1, [r4, #0]
 800a530:	2203      	movs	r2, #3
 800a532:	4650      	mov	r0, sl
 800a534:	f7f5 fe6c 	bl	8000210 <memchr>
 800a538:	b140      	cbz	r0, 800a54c <_vfiprintf_r+0x198>
 800a53a:	2340      	movs	r3, #64	; 0x40
 800a53c:	eba0 000a 	sub.w	r0, r0, sl
 800a540:	fa03 f000 	lsl.w	r0, r3, r0
 800a544:	9b04      	ldr	r3, [sp, #16]
 800a546:	4303      	orrs	r3, r0
 800a548:	3401      	adds	r4, #1
 800a54a:	9304      	str	r3, [sp, #16]
 800a54c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a550:	482c      	ldr	r0, [pc, #176]	; (800a604 <_vfiprintf_r+0x250>)
 800a552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a556:	2206      	movs	r2, #6
 800a558:	f7f5 fe5a 	bl	8000210 <memchr>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d03f      	beq.n	800a5e0 <_vfiprintf_r+0x22c>
 800a560:	4b29      	ldr	r3, [pc, #164]	; (800a608 <_vfiprintf_r+0x254>)
 800a562:	bb1b      	cbnz	r3, 800a5ac <_vfiprintf_r+0x1f8>
 800a564:	9b03      	ldr	r3, [sp, #12]
 800a566:	3307      	adds	r3, #7
 800a568:	f023 0307 	bic.w	r3, r3, #7
 800a56c:	3308      	adds	r3, #8
 800a56e:	9303      	str	r3, [sp, #12]
 800a570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a572:	443b      	add	r3, r7
 800a574:	9309      	str	r3, [sp, #36]	; 0x24
 800a576:	e767      	b.n	800a448 <_vfiprintf_r+0x94>
 800a578:	fb0c 3202 	mla	r2, ip, r2, r3
 800a57c:	460c      	mov	r4, r1
 800a57e:	2001      	movs	r0, #1
 800a580:	e7a5      	b.n	800a4ce <_vfiprintf_r+0x11a>
 800a582:	2300      	movs	r3, #0
 800a584:	3401      	adds	r4, #1
 800a586:	9305      	str	r3, [sp, #20]
 800a588:	4619      	mov	r1, r3
 800a58a:	f04f 0c0a 	mov.w	ip, #10
 800a58e:	4620      	mov	r0, r4
 800a590:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a594:	3a30      	subs	r2, #48	; 0x30
 800a596:	2a09      	cmp	r2, #9
 800a598:	d903      	bls.n	800a5a2 <_vfiprintf_r+0x1ee>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d0c5      	beq.n	800a52a <_vfiprintf_r+0x176>
 800a59e:	9105      	str	r1, [sp, #20]
 800a5a0:	e7c3      	b.n	800a52a <_vfiprintf_r+0x176>
 800a5a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e7f0      	b.n	800a58e <_vfiprintf_r+0x1da>
 800a5ac:	ab03      	add	r3, sp, #12
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	462a      	mov	r2, r5
 800a5b2:	4b16      	ldr	r3, [pc, #88]	; (800a60c <_vfiprintf_r+0x258>)
 800a5b4:	a904      	add	r1, sp, #16
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f3af 8000 	nop.w
 800a5bc:	4607      	mov	r7, r0
 800a5be:	1c78      	adds	r0, r7, #1
 800a5c0:	d1d6      	bne.n	800a570 <_vfiprintf_r+0x1bc>
 800a5c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5c4:	07d9      	lsls	r1, r3, #31
 800a5c6:	d405      	bmi.n	800a5d4 <_vfiprintf_r+0x220>
 800a5c8:	89ab      	ldrh	r3, [r5, #12]
 800a5ca:	059a      	lsls	r2, r3, #22
 800a5cc:	d402      	bmi.n	800a5d4 <_vfiprintf_r+0x220>
 800a5ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5d0:	f7ff fd7f 	bl	800a0d2 <__retarget_lock_release_recursive>
 800a5d4:	89ab      	ldrh	r3, [r5, #12]
 800a5d6:	065b      	lsls	r3, r3, #25
 800a5d8:	f53f af12 	bmi.w	800a400 <_vfiprintf_r+0x4c>
 800a5dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5de:	e711      	b.n	800a404 <_vfiprintf_r+0x50>
 800a5e0:	ab03      	add	r3, sp, #12
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	462a      	mov	r2, r5
 800a5e6:	4b09      	ldr	r3, [pc, #36]	; (800a60c <_vfiprintf_r+0x258>)
 800a5e8:	a904      	add	r1, sp, #16
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f000 f880 	bl	800a6f0 <_printf_i>
 800a5f0:	e7e4      	b.n	800a5bc <_vfiprintf_r+0x208>
 800a5f2:	bf00      	nop
 800a5f4:	0800ada8 	.word	0x0800ada8
 800a5f8:	0800adc8 	.word	0x0800adc8
 800a5fc:	0800ad88 	.word	0x0800ad88
 800a600:	0800ade8 	.word	0x0800ade8
 800a604:	0800adf2 	.word	0x0800adf2
 800a608:	00000000 	.word	0x00000000
 800a60c:	0800a38f 	.word	0x0800a38f
 800a610:	0800adee 	.word	0x0800adee

0800a614 <_printf_common>:
 800a614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a618:	4616      	mov	r6, r2
 800a61a:	4699      	mov	r9, r3
 800a61c:	688a      	ldr	r2, [r1, #8]
 800a61e:	690b      	ldr	r3, [r1, #16]
 800a620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a624:	4293      	cmp	r3, r2
 800a626:	bfb8      	it	lt
 800a628:	4613      	movlt	r3, r2
 800a62a:	6033      	str	r3, [r6, #0]
 800a62c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a630:	4607      	mov	r7, r0
 800a632:	460c      	mov	r4, r1
 800a634:	b10a      	cbz	r2, 800a63a <_printf_common+0x26>
 800a636:	3301      	adds	r3, #1
 800a638:	6033      	str	r3, [r6, #0]
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	0699      	lsls	r1, r3, #26
 800a63e:	bf42      	ittt	mi
 800a640:	6833      	ldrmi	r3, [r6, #0]
 800a642:	3302      	addmi	r3, #2
 800a644:	6033      	strmi	r3, [r6, #0]
 800a646:	6825      	ldr	r5, [r4, #0]
 800a648:	f015 0506 	ands.w	r5, r5, #6
 800a64c:	d106      	bne.n	800a65c <_printf_common+0x48>
 800a64e:	f104 0a19 	add.w	sl, r4, #25
 800a652:	68e3      	ldr	r3, [r4, #12]
 800a654:	6832      	ldr	r2, [r6, #0]
 800a656:	1a9b      	subs	r3, r3, r2
 800a658:	42ab      	cmp	r3, r5
 800a65a:	dc26      	bgt.n	800a6aa <_printf_common+0x96>
 800a65c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a660:	1e13      	subs	r3, r2, #0
 800a662:	6822      	ldr	r2, [r4, #0]
 800a664:	bf18      	it	ne
 800a666:	2301      	movne	r3, #1
 800a668:	0692      	lsls	r2, r2, #26
 800a66a:	d42b      	bmi.n	800a6c4 <_printf_common+0xb0>
 800a66c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a670:	4649      	mov	r1, r9
 800a672:	4638      	mov	r0, r7
 800a674:	47c0      	blx	r8
 800a676:	3001      	adds	r0, #1
 800a678:	d01e      	beq.n	800a6b8 <_printf_common+0xa4>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	68e5      	ldr	r5, [r4, #12]
 800a67e:	6832      	ldr	r2, [r6, #0]
 800a680:	f003 0306 	and.w	r3, r3, #6
 800a684:	2b04      	cmp	r3, #4
 800a686:	bf08      	it	eq
 800a688:	1aad      	subeq	r5, r5, r2
 800a68a:	68a3      	ldr	r3, [r4, #8]
 800a68c:	6922      	ldr	r2, [r4, #16]
 800a68e:	bf0c      	ite	eq
 800a690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a694:	2500      	movne	r5, #0
 800a696:	4293      	cmp	r3, r2
 800a698:	bfc4      	itt	gt
 800a69a:	1a9b      	subgt	r3, r3, r2
 800a69c:	18ed      	addgt	r5, r5, r3
 800a69e:	2600      	movs	r6, #0
 800a6a0:	341a      	adds	r4, #26
 800a6a2:	42b5      	cmp	r5, r6
 800a6a4:	d11a      	bne.n	800a6dc <_printf_common+0xc8>
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	e008      	b.n	800a6bc <_printf_common+0xa8>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	4652      	mov	r2, sl
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	4638      	mov	r0, r7
 800a6b2:	47c0      	blx	r8
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d103      	bne.n	800a6c0 <_printf_common+0xac>
 800a6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c0:	3501      	adds	r5, #1
 800a6c2:	e7c6      	b.n	800a652 <_printf_common+0x3e>
 800a6c4:	18e1      	adds	r1, r4, r3
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	2030      	movs	r0, #48	; 0x30
 800a6ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6ce:	4422      	add	r2, r4
 800a6d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6d8:	3302      	adds	r3, #2
 800a6da:	e7c7      	b.n	800a66c <_printf_common+0x58>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	4622      	mov	r2, r4
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	4638      	mov	r0, r7
 800a6e4:	47c0      	blx	r8
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	d0e6      	beq.n	800a6b8 <_printf_common+0xa4>
 800a6ea:	3601      	adds	r6, #1
 800a6ec:	e7d9      	b.n	800a6a2 <_printf_common+0x8e>
	...

0800a6f0 <_printf_i>:
 800a6f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f4:	7e0f      	ldrb	r7, [r1, #24]
 800a6f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6f8:	2f78      	cmp	r7, #120	; 0x78
 800a6fa:	4691      	mov	r9, r2
 800a6fc:	4680      	mov	r8, r0
 800a6fe:	460c      	mov	r4, r1
 800a700:	469a      	mov	sl, r3
 800a702:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a706:	d807      	bhi.n	800a718 <_printf_i+0x28>
 800a708:	2f62      	cmp	r7, #98	; 0x62
 800a70a:	d80a      	bhi.n	800a722 <_printf_i+0x32>
 800a70c:	2f00      	cmp	r7, #0
 800a70e:	f000 80d8 	beq.w	800a8c2 <_printf_i+0x1d2>
 800a712:	2f58      	cmp	r7, #88	; 0x58
 800a714:	f000 80a3 	beq.w	800a85e <_printf_i+0x16e>
 800a718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a71c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a720:	e03a      	b.n	800a798 <_printf_i+0xa8>
 800a722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a726:	2b15      	cmp	r3, #21
 800a728:	d8f6      	bhi.n	800a718 <_printf_i+0x28>
 800a72a:	a101      	add	r1, pc, #4	; (adr r1, 800a730 <_printf_i+0x40>)
 800a72c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a730:	0800a789 	.word	0x0800a789
 800a734:	0800a79d 	.word	0x0800a79d
 800a738:	0800a719 	.word	0x0800a719
 800a73c:	0800a719 	.word	0x0800a719
 800a740:	0800a719 	.word	0x0800a719
 800a744:	0800a719 	.word	0x0800a719
 800a748:	0800a79d 	.word	0x0800a79d
 800a74c:	0800a719 	.word	0x0800a719
 800a750:	0800a719 	.word	0x0800a719
 800a754:	0800a719 	.word	0x0800a719
 800a758:	0800a719 	.word	0x0800a719
 800a75c:	0800a8a9 	.word	0x0800a8a9
 800a760:	0800a7cd 	.word	0x0800a7cd
 800a764:	0800a88b 	.word	0x0800a88b
 800a768:	0800a719 	.word	0x0800a719
 800a76c:	0800a719 	.word	0x0800a719
 800a770:	0800a8cb 	.word	0x0800a8cb
 800a774:	0800a719 	.word	0x0800a719
 800a778:	0800a7cd 	.word	0x0800a7cd
 800a77c:	0800a719 	.word	0x0800a719
 800a780:	0800a719 	.word	0x0800a719
 800a784:	0800a893 	.word	0x0800a893
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	1d1a      	adds	r2, r3, #4
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	602a      	str	r2, [r5, #0]
 800a790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a798:	2301      	movs	r3, #1
 800a79a:	e0a3      	b.n	800a8e4 <_printf_i+0x1f4>
 800a79c:	6820      	ldr	r0, [r4, #0]
 800a79e:	6829      	ldr	r1, [r5, #0]
 800a7a0:	0606      	lsls	r6, r0, #24
 800a7a2:	f101 0304 	add.w	r3, r1, #4
 800a7a6:	d50a      	bpl.n	800a7be <_printf_i+0xce>
 800a7a8:	680e      	ldr	r6, [r1, #0]
 800a7aa:	602b      	str	r3, [r5, #0]
 800a7ac:	2e00      	cmp	r6, #0
 800a7ae:	da03      	bge.n	800a7b8 <_printf_i+0xc8>
 800a7b0:	232d      	movs	r3, #45	; 0x2d
 800a7b2:	4276      	negs	r6, r6
 800a7b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7b8:	485e      	ldr	r0, [pc, #376]	; (800a934 <_printf_i+0x244>)
 800a7ba:	230a      	movs	r3, #10
 800a7bc:	e019      	b.n	800a7f2 <_printf_i+0x102>
 800a7be:	680e      	ldr	r6, [r1, #0]
 800a7c0:	602b      	str	r3, [r5, #0]
 800a7c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a7c6:	bf18      	it	ne
 800a7c8:	b236      	sxthne	r6, r6
 800a7ca:	e7ef      	b.n	800a7ac <_printf_i+0xbc>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	6820      	ldr	r0, [r4, #0]
 800a7d0:	1d19      	adds	r1, r3, #4
 800a7d2:	6029      	str	r1, [r5, #0]
 800a7d4:	0601      	lsls	r1, r0, #24
 800a7d6:	d501      	bpl.n	800a7dc <_printf_i+0xec>
 800a7d8:	681e      	ldr	r6, [r3, #0]
 800a7da:	e002      	b.n	800a7e2 <_printf_i+0xf2>
 800a7dc:	0646      	lsls	r6, r0, #25
 800a7de:	d5fb      	bpl.n	800a7d8 <_printf_i+0xe8>
 800a7e0:	881e      	ldrh	r6, [r3, #0]
 800a7e2:	4854      	ldr	r0, [pc, #336]	; (800a934 <_printf_i+0x244>)
 800a7e4:	2f6f      	cmp	r7, #111	; 0x6f
 800a7e6:	bf0c      	ite	eq
 800a7e8:	2308      	moveq	r3, #8
 800a7ea:	230a      	movne	r3, #10
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7f2:	6865      	ldr	r5, [r4, #4]
 800a7f4:	60a5      	str	r5, [r4, #8]
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	bfa2      	ittt	ge
 800a7fa:	6821      	ldrge	r1, [r4, #0]
 800a7fc:	f021 0104 	bicge.w	r1, r1, #4
 800a800:	6021      	strge	r1, [r4, #0]
 800a802:	b90e      	cbnz	r6, 800a808 <_printf_i+0x118>
 800a804:	2d00      	cmp	r5, #0
 800a806:	d04d      	beq.n	800a8a4 <_printf_i+0x1b4>
 800a808:	4615      	mov	r5, r2
 800a80a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a80e:	fb03 6711 	mls	r7, r3, r1, r6
 800a812:	5dc7      	ldrb	r7, [r0, r7]
 800a814:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a818:	4637      	mov	r7, r6
 800a81a:	42bb      	cmp	r3, r7
 800a81c:	460e      	mov	r6, r1
 800a81e:	d9f4      	bls.n	800a80a <_printf_i+0x11a>
 800a820:	2b08      	cmp	r3, #8
 800a822:	d10b      	bne.n	800a83c <_printf_i+0x14c>
 800a824:	6823      	ldr	r3, [r4, #0]
 800a826:	07de      	lsls	r6, r3, #31
 800a828:	d508      	bpl.n	800a83c <_printf_i+0x14c>
 800a82a:	6923      	ldr	r3, [r4, #16]
 800a82c:	6861      	ldr	r1, [r4, #4]
 800a82e:	4299      	cmp	r1, r3
 800a830:	bfde      	ittt	le
 800a832:	2330      	movle	r3, #48	; 0x30
 800a834:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a838:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a83c:	1b52      	subs	r2, r2, r5
 800a83e:	6122      	str	r2, [r4, #16]
 800a840:	f8cd a000 	str.w	sl, [sp]
 800a844:	464b      	mov	r3, r9
 800a846:	aa03      	add	r2, sp, #12
 800a848:	4621      	mov	r1, r4
 800a84a:	4640      	mov	r0, r8
 800a84c:	f7ff fee2 	bl	800a614 <_printf_common>
 800a850:	3001      	adds	r0, #1
 800a852:	d14c      	bne.n	800a8ee <_printf_i+0x1fe>
 800a854:	f04f 30ff 	mov.w	r0, #4294967295
 800a858:	b004      	add	sp, #16
 800a85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a85e:	4835      	ldr	r0, [pc, #212]	; (800a934 <_printf_i+0x244>)
 800a860:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a864:	6829      	ldr	r1, [r5, #0]
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	f851 6b04 	ldr.w	r6, [r1], #4
 800a86c:	6029      	str	r1, [r5, #0]
 800a86e:	061d      	lsls	r5, r3, #24
 800a870:	d514      	bpl.n	800a89c <_printf_i+0x1ac>
 800a872:	07df      	lsls	r7, r3, #31
 800a874:	bf44      	itt	mi
 800a876:	f043 0320 	orrmi.w	r3, r3, #32
 800a87a:	6023      	strmi	r3, [r4, #0]
 800a87c:	b91e      	cbnz	r6, 800a886 <_printf_i+0x196>
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	f023 0320 	bic.w	r3, r3, #32
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	2310      	movs	r3, #16
 800a888:	e7b0      	b.n	800a7ec <_printf_i+0xfc>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	f043 0320 	orr.w	r3, r3, #32
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	2378      	movs	r3, #120	; 0x78
 800a894:	4828      	ldr	r0, [pc, #160]	; (800a938 <_printf_i+0x248>)
 800a896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a89a:	e7e3      	b.n	800a864 <_printf_i+0x174>
 800a89c:	0659      	lsls	r1, r3, #25
 800a89e:	bf48      	it	mi
 800a8a0:	b2b6      	uxthmi	r6, r6
 800a8a2:	e7e6      	b.n	800a872 <_printf_i+0x182>
 800a8a4:	4615      	mov	r5, r2
 800a8a6:	e7bb      	b.n	800a820 <_printf_i+0x130>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	6826      	ldr	r6, [r4, #0]
 800a8ac:	6961      	ldr	r1, [r4, #20]
 800a8ae:	1d18      	adds	r0, r3, #4
 800a8b0:	6028      	str	r0, [r5, #0]
 800a8b2:	0635      	lsls	r5, r6, #24
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	d501      	bpl.n	800a8bc <_printf_i+0x1cc>
 800a8b8:	6019      	str	r1, [r3, #0]
 800a8ba:	e002      	b.n	800a8c2 <_printf_i+0x1d2>
 800a8bc:	0670      	lsls	r0, r6, #25
 800a8be:	d5fb      	bpl.n	800a8b8 <_printf_i+0x1c8>
 800a8c0:	8019      	strh	r1, [r3, #0]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6123      	str	r3, [r4, #16]
 800a8c6:	4615      	mov	r5, r2
 800a8c8:	e7ba      	b.n	800a840 <_printf_i+0x150>
 800a8ca:	682b      	ldr	r3, [r5, #0]
 800a8cc:	1d1a      	adds	r2, r3, #4
 800a8ce:	602a      	str	r2, [r5, #0]
 800a8d0:	681d      	ldr	r5, [r3, #0]
 800a8d2:	6862      	ldr	r2, [r4, #4]
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f7f5 fc9a 	bl	8000210 <memchr>
 800a8dc:	b108      	cbz	r0, 800a8e2 <_printf_i+0x1f2>
 800a8de:	1b40      	subs	r0, r0, r5
 800a8e0:	6060      	str	r0, [r4, #4]
 800a8e2:	6863      	ldr	r3, [r4, #4]
 800a8e4:	6123      	str	r3, [r4, #16]
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8ec:	e7a8      	b.n	800a840 <_printf_i+0x150>
 800a8ee:	6923      	ldr	r3, [r4, #16]
 800a8f0:	462a      	mov	r2, r5
 800a8f2:	4649      	mov	r1, r9
 800a8f4:	4640      	mov	r0, r8
 800a8f6:	47d0      	blx	sl
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	d0ab      	beq.n	800a854 <_printf_i+0x164>
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	079b      	lsls	r3, r3, #30
 800a900:	d413      	bmi.n	800a92a <_printf_i+0x23a>
 800a902:	68e0      	ldr	r0, [r4, #12]
 800a904:	9b03      	ldr	r3, [sp, #12]
 800a906:	4298      	cmp	r0, r3
 800a908:	bfb8      	it	lt
 800a90a:	4618      	movlt	r0, r3
 800a90c:	e7a4      	b.n	800a858 <_printf_i+0x168>
 800a90e:	2301      	movs	r3, #1
 800a910:	4632      	mov	r2, r6
 800a912:	4649      	mov	r1, r9
 800a914:	4640      	mov	r0, r8
 800a916:	47d0      	blx	sl
 800a918:	3001      	adds	r0, #1
 800a91a:	d09b      	beq.n	800a854 <_printf_i+0x164>
 800a91c:	3501      	adds	r5, #1
 800a91e:	68e3      	ldr	r3, [r4, #12]
 800a920:	9903      	ldr	r1, [sp, #12]
 800a922:	1a5b      	subs	r3, r3, r1
 800a924:	42ab      	cmp	r3, r5
 800a926:	dcf2      	bgt.n	800a90e <_printf_i+0x21e>
 800a928:	e7eb      	b.n	800a902 <_printf_i+0x212>
 800a92a:	2500      	movs	r5, #0
 800a92c:	f104 0619 	add.w	r6, r4, #25
 800a930:	e7f5      	b.n	800a91e <_printf_i+0x22e>
 800a932:	bf00      	nop
 800a934:	0800adf9 	.word	0x0800adf9
 800a938:	0800ae0a 	.word	0x0800ae0a

0800a93c <_sbrk_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	4d06      	ldr	r5, [pc, #24]	; (800a958 <_sbrk_r+0x1c>)
 800a940:	2300      	movs	r3, #0
 800a942:	4604      	mov	r4, r0
 800a944:	4608      	mov	r0, r1
 800a946:	602b      	str	r3, [r5, #0]
 800a948:	f7f6 fcda 	bl	8001300 <_sbrk>
 800a94c:	1c43      	adds	r3, r0, #1
 800a94e:	d102      	bne.n	800a956 <_sbrk_r+0x1a>
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	b103      	cbz	r3, 800a956 <_sbrk_r+0x1a>
 800a954:	6023      	str	r3, [r4, #0]
 800a956:	bd38      	pop	{r3, r4, r5, pc}
 800a958:	200026a0 	.word	0x200026a0

0800a95c <__sread>:
 800a95c:	b510      	push	{r4, lr}
 800a95e:	460c      	mov	r4, r1
 800a960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a964:	f000 f8a0 	bl	800aaa8 <_read_r>
 800a968:	2800      	cmp	r0, #0
 800a96a:	bfab      	itete	ge
 800a96c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a96e:	89a3      	ldrhlt	r3, [r4, #12]
 800a970:	181b      	addge	r3, r3, r0
 800a972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a976:	bfac      	ite	ge
 800a978:	6563      	strge	r3, [r4, #84]	; 0x54
 800a97a:	81a3      	strhlt	r3, [r4, #12]
 800a97c:	bd10      	pop	{r4, pc}

0800a97e <__swrite>:
 800a97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a982:	461f      	mov	r7, r3
 800a984:	898b      	ldrh	r3, [r1, #12]
 800a986:	05db      	lsls	r3, r3, #23
 800a988:	4605      	mov	r5, r0
 800a98a:	460c      	mov	r4, r1
 800a98c:	4616      	mov	r6, r2
 800a98e:	d505      	bpl.n	800a99c <__swrite+0x1e>
 800a990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a994:	2302      	movs	r3, #2
 800a996:	2200      	movs	r2, #0
 800a998:	f000 f868 	bl	800aa6c <_lseek_r>
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9a6:	81a3      	strh	r3, [r4, #12]
 800a9a8:	4632      	mov	r2, r6
 800a9aa:	463b      	mov	r3, r7
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b2:	f000 b817 	b.w	800a9e4 <_write_r>

0800a9b6 <__sseek>:
 800a9b6:	b510      	push	{r4, lr}
 800a9b8:	460c      	mov	r4, r1
 800a9ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9be:	f000 f855 	bl	800aa6c <_lseek_r>
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	89a3      	ldrh	r3, [r4, #12]
 800a9c6:	bf15      	itete	ne
 800a9c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9d2:	81a3      	strheq	r3, [r4, #12]
 800a9d4:	bf18      	it	ne
 800a9d6:	81a3      	strhne	r3, [r4, #12]
 800a9d8:	bd10      	pop	{r4, pc}

0800a9da <__sclose>:
 800a9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9de:	f000 b813 	b.w	800aa08 <_close_r>
	...

0800a9e4 <_write_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4d07      	ldr	r5, [pc, #28]	; (800aa04 <_write_r+0x20>)
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	4608      	mov	r0, r1
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	602a      	str	r2, [r5, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	f7f5 fe05 	bl	8000602 <_write>
 800a9f8:	1c43      	adds	r3, r0, #1
 800a9fa:	d102      	bne.n	800aa02 <_write_r+0x1e>
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	b103      	cbz	r3, 800aa02 <_write_r+0x1e>
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	bd38      	pop	{r3, r4, r5, pc}
 800aa04:	200026a0 	.word	0x200026a0

0800aa08 <_close_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4d06      	ldr	r5, [pc, #24]	; (800aa24 <_close_r+0x1c>)
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	4604      	mov	r4, r0
 800aa10:	4608      	mov	r0, r1
 800aa12:	602b      	str	r3, [r5, #0]
 800aa14:	f7f6 fc3f 	bl	8001296 <_close>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	d102      	bne.n	800aa22 <_close_r+0x1a>
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	b103      	cbz	r3, 800aa22 <_close_r+0x1a>
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	bd38      	pop	{r3, r4, r5, pc}
 800aa24:	200026a0 	.word	0x200026a0

0800aa28 <_fstat_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	4d07      	ldr	r5, [pc, #28]	; (800aa48 <_fstat_r+0x20>)
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	4604      	mov	r4, r0
 800aa30:	4608      	mov	r0, r1
 800aa32:	4611      	mov	r1, r2
 800aa34:	602b      	str	r3, [r5, #0]
 800aa36:	f7f6 fc3a 	bl	80012ae <_fstat>
 800aa3a:	1c43      	adds	r3, r0, #1
 800aa3c:	d102      	bne.n	800aa44 <_fstat_r+0x1c>
 800aa3e:	682b      	ldr	r3, [r5, #0]
 800aa40:	b103      	cbz	r3, 800aa44 <_fstat_r+0x1c>
 800aa42:	6023      	str	r3, [r4, #0]
 800aa44:	bd38      	pop	{r3, r4, r5, pc}
 800aa46:	bf00      	nop
 800aa48:	200026a0 	.word	0x200026a0

0800aa4c <_isatty_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d06      	ldr	r5, [pc, #24]	; (800aa68 <_isatty_r+0x1c>)
 800aa50:	2300      	movs	r3, #0
 800aa52:	4604      	mov	r4, r0
 800aa54:	4608      	mov	r0, r1
 800aa56:	602b      	str	r3, [r5, #0]
 800aa58:	f7f6 fc39 	bl	80012ce <_isatty>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	d102      	bne.n	800aa66 <_isatty_r+0x1a>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	b103      	cbz	r3, 800aa66 <_isatty_r+0x1a>
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	200026a0 	.word	0x200026a0

0800aa6c <_lseek_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4d07      	ldr	r5, [pc, #28]	; (800aa8c <_lseek_r+0x20>)
 800aa70:	4604      	mov	r4, r0
 800aa72:	4608      	mov	r0, r1
 800aa74:	4611      	mov	r1, r2
 800aa76:	2200      	movs	r2, #0
 800aa78:	602a      	str	r2, [r5, #0]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	f7f6 fc32 	bl	80012e4 <_lseek>
 800aa80:	1c43      	adds	r3, r0, #1
 800aa82:	d102      	bne.n	800aa8a <_lseek_r+0x1e>
 800aa84:	682b      	ldr	r3, [r5, #0]
 800aa86:	b103      	cbz	r3, 800aa8a <_lseek_r+0x1e>
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	bd38      	pop	{r3, r4, r5, pc}
 800aa8c:	200026a0 	.word	0x200026a0

0800aa90 <__malloc_lock>:
 800aa90:	4801      	ldr	r0, [pc, #4]	; (800aa98 <__malloc_lock+0x8>)
 800aa92:	f7ff bb1d 	b.w	800a0d0 <__retarget_lock_acquire_recursive>
 800aa96:	bf00      	nop
 800aa98:	20002694 	.word	0x20002694

0800aa9c <__malloc_unlock>:
 800aa9c:	4801      	ldr	r0, [pc, #4]	; (800aaa4 <__malloc_unlock+0x8>)
 800aa9e:	f7ff bb18 	b.w	800a0d2 <__retarget_lock_release_recursive>
 800aaa2:	bf00      	nop
 800aaa4:	20002694 	.word	0x20002694

0800aaa8 <_read_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d07      	ldr	r5, [pc, #28]	; (800aac8 <_read_r+0x20>)
 800aaac:	4604      	mov	r4, r0
 800aaae:	4608      	mov	r0, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	2200      	movs	r2, #0
 800aab4:	602a      	str	r2, [r5, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f7f6 fbd0 	bl	800125c <_read>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_read_r+0x1e>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_read_r+0x1e>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	200026a0 	.word	0x200026a0

0800aacc <_init>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	bf00      	nop
 800aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad2:	bc08      	pop	{r3}
 800aad4:	469e      	mov	lr, r3
 800aad6:	4770      	bx	lr

0800aad8 <_fini>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	bf00      	nop
 800aadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aade:	bc08      	pop	{r3}
 800aae0:	469e      	mov	lr, r3
 800aae2:	4770      	bx	lr
