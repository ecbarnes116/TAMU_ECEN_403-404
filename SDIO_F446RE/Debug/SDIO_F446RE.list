
SDIO_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c28c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800c460  0800c460  0001c460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7f0  0800c7f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7f0  0800c7f0  0001c7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7f8  0800c7f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7f8  0800c7f8  0001c7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7fc  0800c7fc  0001c7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002350  20000074  0800c874  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023c4  0800c874  000223c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001573a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032f3  00000000  00000000  000357de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00038ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  00039c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054d2  00000000  00000000  0003ac20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c36  00000000  00000000  000400f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f8d  00000000  00000000  00057d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bcb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d4  00000000  00000000  0013bd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c444 	.word	0x0800c444

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800c444 	.word	0x0800c444

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ed8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d013      	beq.n	8000f0c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ee4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000eec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00b      	beq.n	8000f0c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ef4:	e000      	b.n	8000ef8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ef6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ef8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f9      	beq.n	8000ef6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f02:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_write>:

uint16_t delta_audio;
uint16_t delta_pressure;
uint16_t delta_acc;

int _write(int file, char *ptr, int length) {
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]

	for(i = 0; i < length; i++) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	e009      	b.n	8000f44 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	60ba      	str	r2, [r7, #8]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ffc7 	bl	8000ecc <ITM_SendChar>
	for(i = 0; i < length; i++) {
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf1      	blt.n	8000f30 <_write+0x16>
	}

	return length;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <bufclear>:
	return i;
}


// Clear UART buffer for debugging
void bufclear(void) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	e007      	b.n	8000f74 <bufclear+0x1c>
		buffer[i] = '\0';
 8000f64:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <bufclear+0x30>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b7f      	cmp	r3, #127	; 0x7f
 8000f78:	ddf4      	ble.n	8000f64 <bufclear+0xc>
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	2000024c 	.word	0x2000024c

08000f8c <HAL_ADC_ConvHalfCpltCallback>:
// Size of buffer needs to be a multiple of number of ADC channels (minimum of 5)
// Needs to be divisible by the number of bytes in each line
// that I am writing to the SD card				<-- What did I mean by this???

// Called when ADC buffer is half filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	fromADC_Ptr = &adc_data[0];
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000f98:	601a      	str	r2, [r3, #0]
	toSD_Ptr 	= &SD_data[0];
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000f9e:	601a      	str	r2, [r3, #0]

	dataReady = 1;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000248 	.word	0x20000248
 8000fb8:	20000220 	.word	0x20000220
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000234 	.word	0x20000234
 8000fc4:	200002cc 	.word	0x200002cc

08000fc8 <HAL_ADC_ConvCpltCallback>:



// Called when ADC buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	fromADC_Ptr = &adc_data[ADC_BUFFER_SIZE/2];
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_ADC_ConvCpltCallback+0x28>)
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000fd4:	601a      	str	r2, [r3, #0]
	toSD_Ptr 	= &SD_data[ADC_BUFFER_SIZE/2];
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_ADC_ConvCpltCallback+0x30>)
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_ADC_ConvCpltCallback+0x34>)
 8000fda:	601a      	str	r2, [r3, #0]

	dataReady = 1;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_ADC_ConvCpltCallback+0x38>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000248 	.word	0x20000248
 8000ff4:	2000022a 	.word	0x2000022a
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	2000023e 	.word	0x2000023e
 8001000:	200002cc 	.word	0x200002cc
 8001004:	00000000 	.word	0x00000000

08001008 <processData>:
	fresult = f_sync(&fil);
}



void processData() {
 8001008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af06      	add	r7, sp, #24
//	for(uint8_t i = 0; i < (ADC_BUFFER_SIZE)/2; i++) {
	if(1) {
		uint8_t i = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
		// Initialize respective sensor data variables
		current_audio = fromADC_Ptr[i];
 8001012:	4b8d      	ldr	r3, [pc, #564]	; (8001248 <processData+0x240>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b8a      	ldr	r3, [pc, #552]	; (800124c <processData+0x244>)
 8001022:	801a      	strh	r2, [r3, #0]
		current_pressure = fromADC_Ptr[i+1];
 8001024:	4b88      	ldr	r3, [pc, #544]	; (8001248 <processData+0x240>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	3301      	adds	r3, #1
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b86      	ldr	r3, [pc, #536]	; (8001250 <processData+0x248>)
 8001036:	801a      	strh	r2, [r3, #0]
		current_acc = sqrt(pow(fromADC_Ptr[i+2], 2) + pow(fromADC_Ptr[i+3], 2) + pow(fromADC_Ptr[i+4], 2));
 8001038:	4b83      	ldr	r3, [pc, #524]	; (8001248 <processData+0x240>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	3302      	adds	r3, #2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	b29b      	uxth	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa73 	bl	8000534 <__aeabi_ui2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8001240 <processData+0x238>
 8001056:	ec43 2b10 	vmov	d0, r2, r3
 800105a:	f00a faad 	bl	800b5b8 <pow>
 800105e:	ec55 4b10 	vmov	r4, r5, d0
 8001062:	4b79      	ldr	r3, [pc, #484]	; (8001248 <processData+0x240>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	3303      	adds	r3, #3
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4413      	add	r3, r2
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	b29b      	uxth	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa5e 	bl	8000534 <__aeabi_ui2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001240 <processData+0x238>
 8001080:	ec43 2b10 	vmov	d0, r2, r3
 8001084:	f00a fa98 	bl	800b5b8 <pow>
 8001088:	ec53 2b10 	vmov	r2, r3, d0
 800108c:	4620      	mov	r0, r4
 800108e:	4629      	mov	r1, r5
 8001090:	f7ff f914 	bl	80002bc <__adddf3>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4614      	mov	r4, r2
 800109a:	461d      	mov	r5, r3
 800109c:	4b6a      	ldr	r3, [pc, #424]	; (8001248 <processData+0x240>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	3304      	adds	r3, #4
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa41 	bl	8000534 <__aeabi_ui2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8001240 <processData+0x238>
 80010ba:	ec43 2b10 	vmov	d0, r2, r3
 80010be:	f00a fa7b 	bl	800b5b8 <pow>
 80010c2:	ec53 2b10 	vmov	r2, r3, d0
 80010c6:	4620      	mov	r0, r4
 80010c8:	4629      	mov	r1, r5
 80010ca:	f7ff f8f7 	bl	80002bc <__adddf3>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	ec43 2b17 	vmov	d7, r2, r3
 80010d6:	eeb0 0a47 	vmov.f32	s0, s14
 80010da:	eef0 0a67 	vmov.f32	s1, s15
 80010de:	f00a fadb 	bl	800b698 <sqrt>
 80010e2:	ec53 2b10 	vmov	r2, r3, d0
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fd4d 	bl	8000b88 <__aeabi_d2uiz>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b58      	ldr	r3, [pc, #352]	; (8001254 <processData+0x24c>)
 80010f4:	801a      	strh	r2, [r3, #0]

		current_acc_x = fromADC_Ptr[i+2];
 80010f6:	4b54      	ldr	r3, [pc, #336]	; (8001248 <processData+0x240>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	3302      	adds	r3, #2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29a      	uxth	r2, r3
 8001106:	4b54      	ldr	r3, [pc, #336]	; (8001258 <processData+0x250>)
 8001108:	801a      	strh	r2, [r3, #0]
		current_acc_y = fromADC_Ptr[i+3];
 800110a:	4b4f      	ldr	r3, [pc, #316]	; (8001248 <processData+0x240>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	3303      	adds	r3, #3
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b50      	ldr	r3, [pc, #320]	; (800125c <processData+0x254>)
 800111c:	801a      	strh	r2, [r3, #0]
		current_acc_z = fromADC_Ptr[i+4];
 800111e:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <processData+0x240>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	3304      	adds	r3, #4
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	b29a      	uxth	r2, r3
 800112e:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <processData+0x258>)
 8001130:	801a      	strh	r2, [r3, #0]

		delta_audio = current_audio - previous_audio;
 8001132:	4b46      	ldr	r3, [pc, #280]	; (800124c <processData+0x244>)
 8001134:	881a      	ldrh	r2, [r3, #0]
 8001136:	4b4b      	ldr	r3, [pc, #300]	; (8001264 <processData+0x25c>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	b29a      	uxth	r2, r3
 800113e:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <processData+0x260>)
 8001140:	801a      	strh	r2, [r3, #0]
		delta_pressure = current_pressure - previous_pressure;
 8001142:	4b43      	ldr	r3, [pc, #268]	; (8001250 <processData+0x248>)
 8001144:	881a      	ldrh	r2, [r3, #0]
 8001146:	4b49      	ldr	r3, [pc, #292]	; (800126c <processData+0x264>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b48      	ldr	r3, [pc, #288]	; (8001270 <processData+0x268>)
 8001150:	801a      	strh	r2, [r3, #0]
		delta_acc = current_acc - previous_acc;
 8001152:	4b40      	ldr	r3, [pc, #256]	; (8001254 <processData+0x24c>)
 8001154:	881a      	ldrh	r2, [r3, #0]
 8001156:	4b47      	ldr	r3, [pc, #284]	; (8001274 <processData+0x26c>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b46      	ldr	r3, [pc, #280]	; (8001278 <processData+0x270>)
 8001160:	801a      	strh	r2, [r3, #0]

		// Do explosion detection here
		if(delta_audio >= THRESHOLD_AUDIO) {
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <processData+0x260>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	2b27      	cmp	r3, #39	; 0x27
 8001168:	d903      	bls.n	8001172 <processData+0x16a>
			explosionDetected = 1;
 800116a:	4b44      	ldr	r3, [pc, #272]	; (800127c <processData+0x274>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	e00e      	b.n	8001190 <processData+0x188>
		}
		else if(delta_pressure >= THRESHOLD_PRESSURE) {
 8001172:	4b3f      	ldr	r3, [pc, #252]	; (8001270 <processData+0x268>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	2b27      	cmp	r3, #39	; 0x27
 8001178:	d903      	bls.n	8001182 <processData+0x17a>
			explosionDetected = 1;
 800117a:	4b40      	ldr	r3, [pc, #256]	; (800127c <processData+0x274>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e006      	b.n	8001190 <processData+0x188>
		}
		else if(delta_acc >= THRESHOLD_ACCELERATION) {
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <processData+0x270>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	2b27      	cmp	r3, #39	; 0x27
 8001188:	d902      	bls.n	8001190 <processData+0x188>
			explosionDetected = 1;
 800118a:	4b3c      	ldr	r3, [pc, #240]	; (800127c <processData+0x274>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]

		// Write data and results to SD card
//		snprintf(buffer, BUFFER_SIZE, "%d, %d, %d, %d, %d\r\n", 0, 0, current_audio, current_pressure, current_acc);
//		writeSD(buffer);

		fresult = f_lseek(&fil, f_size(&fil));
 8001190:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <processData+0x278>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	4619      	mov	r1, r3
 8001196:	483a      	ldr	r0, [pc, #232]	; (8001280 <processData+0x278>)
 8001198:	f008 fc8a 	bl	8009ab0 <f_lseek>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b38      	ldr	r3, [pc, #224]	; (8001284 <processData+0x27c>)
 80011a2:	701a      	strb	r2, [r3, #0]
		fresult = f_printf(&fil, "%d, %d, %d, %d, %d, d_audio = %d, d_pressure = %d, d_acc = %d\r\n", 0, explosionDetected, current_audio, current_pressure, current_acc, delta_audio, delta_pressure, delta_acc);
 80011a4:	4b35      	ldr	r3, [pc, #212]	; (800127c <processData+0x274>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461e      	mov	r6, r3
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <processData+0x244>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <processData+0x248>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	4b27      	ldr	r3, [pc, #156]	; (8001254 <processData+0x24c>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <processData+0x260>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	461c      	mov	r4, r3
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <processData+0x268>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	461d      	mov	r5, r3
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <processData+0x270>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	9305      	str	r3, [sp, #20]
 80011ce:	9504      	str	r5, [sp, #16]
 80011d0:	9403      	str	r4, [sp, #12]
 80011d2:	9002      	str	r0, [sp, #8]
 80011d4:	9101      	str	r1, [sp, #4]
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	4633      	mov	r3, r6
 80011da:	2200      	movs	r2, #0
 80011dc:	492a      	ldr	r1, [pc, #168]	; (8001288 <processData+0x280>)
 80011de:	4828      	ldr	r0, [pc, #160]	; (8001280 <processData+0x278>)
 80011e0:	f008 ff3a 	bl	800a058 <f_printf>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <processData+0x27c>)
 80011ea:	701a      	strb	r2, [r3, #0]
		fresult = f_sync(&fil);
 80011ec:	4824      	ldr	r0, [pc, #144]	; (8001280 <processData+0x278>)
 80011ee:	f008 fbb7 	bl	8009960 <f_sync>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <processData+0x27c>)
 80011f8:	701a      	strb	r2, [r3, #0]

		// Logic for determining when to set explosionDetected back to 0
		explosionDetected = 0;
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <processData+0x274>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]

		// The current samples will be the "previous" samples for the next samples
		previous_audio = current_audio;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <processData+0x244>)
 8001202:	881a      	ldrh	r2, [r3, #0]
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <processData+0x25c>)
 8001206:	801a      	strh	r2, [r3, #0]
		previous_pressure = current_pressure;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <processData+0x248>)
 800120a:	881a      	ldrh	r2, [r3, #0]
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <processData+0x264>)
 800120e:	801a      	strh	r2, [r3, #0]
		previous_acc = current_acc;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <processData+0x24c>)
 8001212:	881a      	ldrh	r2, [r3, #0]
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <processData+0x26c>)
 8001216:	801a      	strh	r2, [r3, #0]

		previous_acc_x = current_acc_x;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <processData+0x250>)
 800121a:	881a      	ldrh	r2, [r3, #0]
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <processData+0x284>)
 800121e:	801a      	strh	r2, [r3, #0]
		previous_acc_y = current_acc_y;
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <processData+0x254>)
 8001222:	881a      	ldrh	r2, [r3, #0]
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <processData+0x288>)
 8001226:	801a      	strh	r2, [r3, #0]
		previous_acc_z = current_acc_z;
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <processData+0x258>)
 800122a:	881a      	ldrh	r2, [r3, #0]
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <processData+0x28c>)
 800122e:	801a      	strh	r2, [r3, #0]
	}

	dataReady = 0;
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <processData+0x290>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800123e:	bf00      	nop
 8001240:	00000000 	.word	0x00000000
 8001244:	40000000 	.word	0x40000000
 8001248:	20000248 	.word	0x20000248
 800124c:	2000235c 	.word	0x2000235c
 8001250:	2000235e 	.word	0x2000235e
 8001254:	20002360 	.word	0x20002360
 8001258:	20002362 	.word	0x20002362
 800125c:	20002364 	.word	0x20002364
 8001260:	20002366 	.word	0x20002366
 8001264:	20002350 	.word	0x20002350
 8001268:	20002368 	.word	0x20002368
 800126c:	20002352 	.word	0x20002352
 8001270:	2000236a 	.word	0x2000236a
 8001274:	20002354 	.word	0x20002354
 8001278:	2000236c 	.word	0x2000236c
 800127c:	2000234e 	.word	0x2000234e
 8001280:	20001304 	.word	0x20001304
 8001284:	2000234c 	.word	0x2000234c
 8001288:	0800c460 	.word	0x0800c460
 800128c:	20002356 	.word	0x20002356
 8001290:	20002358 	.word	0x20002358
 8001294:	2000235a 	.word	0x2000235a
 8001298:	200002cc 	.word	0x200002cc

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a2:	f000 fe15 	bl	8001ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a6:	f000 f8e1 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012aa:	f000 faa3 	bl	80017f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ae:	f000 fa81 	bl	80017b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012b2:	f000 fa55 	bl	8001760 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80012b6:	f000 f94f 	bl	8001558 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 80012ba:	f000 fa31 	bl	8001720 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80012be:	f005 ff87 	bl	80071d0 <MX_FATFS_Init>
  MX_RTC_Init();
 80012c2:	f000 f9d3 	bl	800166c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Start DMA buffer
  // Might need to stop DMA at some point
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_data, ADC_BUFFER_SIZE);
 80012c6:	220a      	movs	r2, #10
 80012c8:	4953      	ldr	r1, [pc, #332]	; (8001418 <main+0x17c>)
 80012ca:	4854      	ldr	r0, [pc, #336]	; (800141c <main+0x180>)
 80012cc:	f000 feda 	bl	8002084 <HAL_ADC_Start_DMA>

  // Mount SD card
  fresult = f_mount(&fs, "", 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	4953      	ldr	r1, [pc, #332]	; (8001420 <main+0x184>)
 80012d4:	4853      	ldr	r0, [pc, #332]	; (8001424 <main+0x188>)
 80012d6:	f007 ff9d 	bl	8009214 <f_mount>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	4b52      	ldr	r3, [pc, #328]	; (8001428 <main+0x18c>)
 80012e0:	701a      	strb	r2, [r3, #0]

  if(fresult != FR_OK){
 80012e2:	4b51      	ldr	r3, [pc, #324]	; (8001428 <main+0x18c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <main+0x56>
	  printf("ERROR in mounting SD card...\n");
 80012ea:	4850      	ldr	r0, [pc, #320]	; (800142c <main+0x190>)
 80012ec:	f009 f9e6 	bl	800a6bc <puts>
 80012f0:	e002      	b.n	80012f8 <main+0x5c>
  }
  else {
	  printf("SD card mounted successfully...\n");
 80012f2:	484f      	ldr	r0, [pc, #316]	; (8001430 <main+0x194>)
 80012f4:	f009 f9e2 	bl	800a6bc <puts>
//  bufclear();
//  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
//  printf("SD card free space: \t%lu\n", free_space);
//  bufclear();

  char *name = "adc_data.csv";
 80012f8:	4b4e      	ldr	r3, [pc, #312]	; (8001434 <main+0x198>)
 80012fa:	60fb      	str	r3, [r7, #12]

  fresult = f_stat(name, &fno);
 80012fc:	494e      	ldr	r1, [pc, #312]	; (8001438 <main+0x19c>)
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f008 fdfa 	bl	8009ef8 <f_stat>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b47      	ldr	r3, [pc, #284]	; (8001428 <main+0x18c>)
 800130a:	701a      	strb	r2, [r3, #0]

  if (fresult == FR_OK) {
 800130c:	4b46      	ldr	r3, [pc, #280]	; (8001428 <main+0x18c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d106      	bne.n	8001322 <main+0x86>
	  printf("*%s* already exists!!!!\n",name);
 8001314:	68f9      	ldr	r1, [r7, #12]
 8001316:	4849      	ldr	r0, [pc, #292]	; (800143c <main+0x1a0>)
 8001318:	f009 f94a 	bl	800a5b0 <iprintf>
	  bufclear();
 800131c:	f7ff fe1c 	bl	8000f58 <bufclear>
 8001320:	e008      	b.n	8001334 <main+0x98>
  }
  else {
	  fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001322:	220b      	movs	r2, #11
 8001324:	68f9      	ldr	r1, [r7, #12]
 8001326:	4846      	ldr	r0, [pc, #280]	; (8001440 <main+0x1a4>)
 8001328:	f007 ffba 	bl	80092a0 <f_open>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <main+0x18c>)
 8001332:	701a      	strb	r2, [r3, #0]
  }
	  if(fresult != FR_OK) {
 8001334:	4b3c      	ldr	r3, [pc, #240]	; (8001428 <main+0x18c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d009      	beq.n	8001350 <main+0xb4>
		  printf ("ERROR: no %d in creating file *%s*\n", fresult, name);
 800133c:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <main+0x18c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4619      	mov	r1, r3
 8001344:	483f      	ldr	r0, [pc, #252]	; (8001444 <main+0x1a8>)
 8001346:	f009 f933 	bl	800a5b0 <iprintf>
		  bufclear();
 800134a:	f7ff fe05 	bl	8000f58 <bufclear>
 800134e:	e005      	b.n	800135c <main+0xc0>
	  }
	  else {
		  printf ("*%s* created successfully\n",name);
 8001350:	68f9      	ldr	r1, [r7, #12]
 8001352:	483d      	ldr	r0, [pc, #244]	; (8001448 <main+0x1ac>)
 8001354:	f009 f92c 	bl	800a5b0 <iprintf>
		  bufclear();
 8001358:	f7ff fdfe 	bl	8000f58 <bufclear>
	  }

  fresult = f_printf(&fil, "time, explosion, audio, pressure, acceleration\r\n");
 800135c:	493b      	ldr	r1, [pc, #236]	; (800144c <main+0x1b0>)
 800135e:	4838      	ldr	r0, [pc, #224]	; (8001440 <main+0x1a4>)
 8001360:	f008 fe7a 	bl	800a058 <f_printf>
 8001364:	4603      	mov	r3, r0
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <main+0x18c>)
 800136a:	701a      	strb	r2, [r3, #0]

  // Get starting tick value (start timer)
  int start = HAL_GetTick();
 800136c:	f000 fe16 	bl	8001f9c <HAL_GetTick>
 8001370:	4603      	mov	r3, r0
 8001372:	60bb      	str	r3, [r7, #8]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(dataReady) {
 8001374:	4b36      	ldr	r3, [pc, #216]	; (8001450 <main+0x1b4>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <main+0xf2>

		  processData();
 800137e:	f7ff fe43 	bl	8001008 <processData>

		  // Increment count
		  count++;
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <main+0x1b8>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b32      	ldr	r3, [pc, #200]	; (8001454 <main+0x1b8>)
 800138c:	701a      	strb	r2, [r3, #0]

	  	  }

	  // Stop when count is a certain value (leads to unmount SD card)
	  if(count == 100) {
 800138e:	4b31      	ldr	r3, [pc, #196]	; (8001454 <main+0x1b8>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d000      	beq.n	8001398 <main+0xfc>
	  if(dataReady) {
 8001396:	e7ed      	b.n	8001374 <main+0xd8>
		  break;
 8001398:	bf00      	nop
	  }

  }

  int stop = HAL_GetTick();
 800139a:	f000 fdff 	bl	8001f9c <HAL_GetTick>
 800139e:	4603      	mov	r3, r0
 80013a0:	607b      	str	r3, [r7, #4]

  printf("Total time to write %d values to SD card (WITH printf): %d ms\n", count, (stop - start));
 80013a2:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <main+0x1b8>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	4829      	ldr	r0, [pc, #164]	; (8001458 <main+0x1bc>)
 80013b2:	f009 f8fd 	bl	800a5b0 <iprintf>

  // Stop ADC DMA and disable ADC
  HAL_ADC_Stop_DMA(&hadc1);
 80013b6:	4819      	ldr	r0, [pc, #100]	; (800141c <main+0x180>)
 80013b8:	f000 ff74 	bl	80022a4 <HAL_ADC_Stop_DMA>

  // Close buffer file
  f_close(&fil);
 80013bc:	4820      	ldr	r0, [pc, #128]	; (8001440 <main+0x1a4>)
 80013be:	f008 fb4d 	bl	8009a5c <f_close>
  if (fresult != FR_OK) {
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <main+0x18c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d008      	beq.n	80013dc <main+0x140>
	  printf ("ERROR: no %d in closing file *%s*\n", fresult, name);
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <main+0x18c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4822      	ldr	r0, [pc, #136]	; (800145c <main+0x1c0>)
 80013d4:	f009 f8ec 	bl	800a5b0 <iprintf>
	  bufclear();
 80013d8:	f7ff fdbe 	bl	8000f58 <bufclear>
  }

  // After while loop when break
  // Unmount SD card
  fresult = f_mount(NULL, "/", 1);
 80013dc:	2201      	movs	r2, #1
 80013de:	4920      	ldr	r1, [pc, #128]	; (8001460 <main+0x1c4>)
 80013e0:	2000      	movs	r0, #0
 80013e2:	f007 ff17 	bl	8009214 <f_mount>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <main+0x18c>)
 80013ec:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) {
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <main+0x18c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d105      	bne.n	8001402 <main+0x166>
	  printf("SD card unmounted successfully...\n");
 80013f6:	481b      	ldr	r0, [pc, #108]	; (8001464 <main+0x1c8>)
 80013f8:	f009 f960 	bl	800a6bc <puts>
	  bufclear();
 80013fc:	f7ff fdac 	bl	8000f58 <bufclear>
 8001400:	e004      	b.n	800140c <main+0x170>
  }
  else {
	  printf("ERROR: unmounting SD card\n");
 8001402:	4819      	ldr	r0, [pc, #100]	; (8001468 <main+0x1cc>)
 8001404:	f009 f95a 	bl	800a6bc <puts>
	  bufclear();
 8001408:	f7ff fda6 	bl	8000f58 <bufclear>
 800140c:	2300      	movs	r3, #0
  }

  /* USER CODE END 3 */
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000220 	.word	0x20000220
 800141c:	20000090 	.word	0x20000090
 8001420:	0800c4a0 	.word	0x0800c4a0
 8001424:	200002d0 	.word	0x200002d0
 8001428:	2000234c 	.word	0x2000234c
 800142c:	0800c4a4 	.word	0x0800c4a4
 8001430:	0800c4c4 	.word	0x0800c4c4
 8001434:	0800c4e4 	.word	0x0800c4e4
 8001438:	20002334 	.word	0x20002334
 800143c:	0800c4f4 	.word	0x0800c4f4
 8001440:	20001304 	.word	0x20001304
 8001444:	0800c510 	.word	0x0800c510
 8001448:	0800c534 	.word	0x0800c534
 800144c:	0800c550 	.word	0x0800c550
 8001450:	200002cc 	.word	0x200002cc
 8001454:	2000234d 	.word	0x2000234d
 8001458:	0800c584 	.word	0x0800c584
 800145c:	0800c5c4 	.word	0x0800c5c4
 8001460:	0800c5e8 	.word	0x0800c5e8
 8001464:	0800c5ec 	.word	0x0800c5ec
 8001468:	0800c610 	.word	0x0800c610

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b094      	sub	sp, #80	; 0x50
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	2234      	movs	r2, #52	; 0x34
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f009 f890 	bl	800a5a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <SystemClock_Config+0xe4>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a2d      	ldr	r2, [pc, #180]	; (8001550 <SystemClock_Config+0xe4>)
 800149a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <SystemClock_Config+0xe4>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <SystemClock_Config+0xe8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a27      	ldr	r2, [pc, #156]	; (8001554 <SystemClock_Config+0xe8>)
 80014b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b25      	ldr	r3, [pc, #148]	; (8001554 <SystemClock_Config+0xe8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80014c8:	230a      	movs	r3, #10
 80014ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014cc:	2301      	movs	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d4:	2310      	movs	r3, #16
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014d8:	2301      	movs	r3, #1
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014dc:	2302      	movs	r3, #2
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e0:	2300      	movs	r3, #0
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014e4:	2308      	movs	r3, #8
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80014e8:	23b4      	movs	r3, #180	; 0xb4
 80014ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80014f0:	2309      	movs	r3, #9
 80014f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 ff83 	bl	8004408 <HAL_RCC_OscConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001508:	f000 f9fc 	bl	8001904 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800150c:	f002 f8b8 	bl	8003680 <HAL_PWREx_EnableOverDrive>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001516:	f000 f9f5 	bl	8001904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151a:	230f      	movs	r3, #15
 800151c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151e:	2302      	movs	r3, #2
 8001520:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001526:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800152a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800152c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001530:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	2105      	movs	r1, #5
 8001538:	4618      	mov	r0, r3
 800153a:	f002 f8f1 	bl	8003720 <HAL_RCC_ClockConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001544:	f000 f9de 	bl	8001904 <Error_Handler>
  }
}
 8001548:	bf00      	nop
 800154a:	3750      	adds	r7, #80	; 0x50
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	40007000 	.word	0x40007000

08001558 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800155e:	463b      	mov	r3, r7
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800156a:	4b3d      	ldr	r3, [pc, #244]	; (8001660 <MX_ADC1_Init+0x108>)
 800156c:	4a3d      	ldr	r2, [pc, #244]	; (8001664 <MX_ADC1_Init+0x10c>)
 800156e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001570:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <MX_ADC1_Init+0x108>)
 8001572:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001576:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001578:	4b39      	ldr	r3, [pc, #228]	; (8001660 <MX_ADC1_Init+0x108>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800157e:	4b38      	ldr	r3, [pc, #224]	; (8001660 <MX_ADC1_Init+0x108>)
 8001580:	2201      	movs	r2, #1
 8001582:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001584:	4b36      	ldr	r3, [pc, #216]	; (8001660 <MX_ADC1_Init+0x108>)
 8001586:	2201      	movs	r2, #1
 8001588:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800158a:	4b35      	ldr	r3, [pc, #212]	; (8001660 <MX_ADC1_Init+0x108>)
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001592:	4b33      	ldr	r3, [pc, #204]	; (8001660 <MX_ADC1_Init+0x108>)
 8001594:	2200      	movs	r2, #0
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <MX_ADC1_Init+0x108>)
 800159a:	4a33      	ldr	r2, [pc, #204]	; (8001668 <MX_ADC1_Init+0x110>)
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800159e:	4b30      	ldr	r3, [pc, #192]	; (8001660 <MX_ADC1_Init+0x108>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80015a4:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <MX_ADC1_Init+0x108>)
 80015a6:	2205      	movs	r2, #5
 80015a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <MX_ADC1_Init+0x108>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <MX_ADC1_Init+0x108>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015b8:	4829      	ldr	r0, [pc, #164]	; (8001660 <MX_ADC1_Init+0x108>)
 80015ba:	f000 fd1f 	bl	8001ffc <HAL_ADC_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015c4:	f000 f99e 	bl	8001904 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015d0:	2307      	movs	r3, #7
 80015d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	4821      	ldr	r0, [pc, #132]	; (8001660 <MX_ADC1_Init+0x108>)
 80015da:	f000 fec7 	bl	800236c <HAL_ADC_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015e4:	f000 f98e 	bl	8001904 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	481a      	ldr	r0, [pc, #104]	; (8001660 <MX_ADC1_Init+0x108>)
 80015f6:	f000 feb9 	bl	800236c <HAL_ADC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001600:	f000 f980 	bl	8001904 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001604:	230c      	movs	r3, #12
 8001606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001608:	2303      	movs	r3, #3
 800160a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800160c:	463b      	mov	r3, r7
 800160e:	4619      	mov	r1, r3
 8001610:	4813      	ldr	r0, [pc, #76]	; (8001660 <MX_ADC1_Init+0x108>)
 8001612:	f000 feab 	bl	800236c <HAL_ADC_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800161c:	f000 f972 	bl	8001904 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001620:	230d      	movs	r3, #13
 8001622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001624:	2304      	movs	r3, #4
 8001626:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	4619      	mov	r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <MX_ADC1_Init+0x108>)
 800162e:	f000 fe9d 	bl	800236c <HAL_ADC_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001638:	f000 f964 	bl	8001904 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800163c:	2304      	movs	r3, #4
 800163e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001640:	2305      	movs	r3, #5
 8001642:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001644:	463b      	mov	r3, r7
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_ADC1_Init+0x108>)
 800164a:	f000 fe8f 	bl	800236c <HAL_ADC_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001654:	f000 f956 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000090 	.word	0x20000090
 8001664:	40012000 	.word	0x40012000
 8001668:	0f000001 	.word	0x0f000001

0800166c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001680:	2300      	movs	r3, #0
 8001682:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <MX_RTC_Init+0xac>)
 8001686:	4a25      	ldr	r2, [pc, #148]	; (800171c <MX_RTC_Init+0xb0>)
 8001688:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <MX_RTC_Init+0xac>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <MX_RTC_Init+0xac>)
 8001692:	227f      	movs	r2, #127	; 0x7f
 8001694:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <MX_RTC_Init+0xac>)
 8001698:	22ff      	movs	r2, #255	; 0xff
 800169a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <MX_RTC_Init+0xac>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <MX_RTC_Init+0xac>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_RTC_Init+0xac>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016ae:	481a      	ldr	r0, [pc, #104]	; (8001718 <MX_RTC_Init+0xac>)
 80016b0:	f003 f948 	bl	8004944 <HAL_RTC_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80016ba:	f000 f923 	bl	8001904 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016be:	2300      	movs	r3, #0
 80016c0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2201      	movs	r2, #1
 80016d6:	4619      	mov	r1, r3
 80016d8:	480f      	ldr	r0, [pc, #60]	; (8001718 <MX_RTC_Init+0xac>)
 80016da:	f003 f9a9 	bl	8004a30 <HAL_RTC_SetTime>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80016e4:	f000 f90e 	bl	8001904 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80016e8:	2301      	movs	r3, #1
 80016ea:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80016ec:	2304      	movs	r3, #4
 80016ee:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x17;
 80016f0:	2317      	movs	r3, #23
 80016f2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80016f4:	2323      	movs	r3, #35	; 0x23
 80016f6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80016f8:	463b      	mov	r3, r7
 80016fa:	2201      	movs	r2, #1
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_RTC_Init+0xac>)
 8001700:	f003 fa30 	bl	8004b64 <HAL_RTC_SetDate>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800170a:	f000 f8fb 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000138 	.word	0x20000138
 800171c:	40002800 	.word	0x40002800

08001720 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_SDIO_SD_Init+0x38>)
 8001726:	4a0d      	ldr	r2, [pc, #52]	; (800175c <MX_SDIO_SD_Init+0x3c>)
 8001728:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_SDIO_SD_Init+0x38>)
 800172c:	2200      	movs	r2, #0
 800172e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_SDIO_SD_Init+0x38>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_SDIO_SD_Init+0x38>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_SDIO_SD_Init+0x38>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <MX_SDIO_SD_Init+0x38>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 18;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <MX_SDIO_SD_Init+0x38>)
 800174a:	2212      	movs	r2, #18
 800174c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	20000158 	.word	0x20000158
 800175c:	40012c00 	.word	0x40012c00

08001760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f004 fd26 	bl	80061e8 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 f8af 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200001dc 	.word	0x200001dc
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_DMA_Init+0x3c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <MX_DMA_Init+0x3c>)
 80017c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_DMA_Init+0x3c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2038      	movs	r0, #56	; 0x38
 80017dc:	f001 f951 	bl	8002a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017e0:	2038      	movs	r0, #56	; 0x38
 80017e2:	f001 f96a 	bl	8002aba <HAL_NVIC_EnableIRQ>

}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <MX_GPIO_Init+0x104>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a39      	ldr	r2, [pc, #228]	; (80018f8 <MX_GPIO_Init+0x104>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <MX_GPIO_Init+0x104>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <MX_GPIO_Init+0x104>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a32      	ldr	r2, [pc, #200]	; (80018f8 <MX_GPIO_Init+0x104>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <MX_GPIO_Init+0x104>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <MX_GPIO_Init+0x104>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a2b      	ldr	r2, [pc, #172]	; (80018f8 <MX_GPIO_Init+0x104>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <MX_GPIO_Init+0x104>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <MX_GPIO_Init+0x104>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a24      	ldr	r2, [pc, #144]	; (80018f8 <MX_GPIO_Init+0x104>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <MX_GPIO_Init+0x104>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <MX_GPIO_Init+0x104>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <MX_GPIO_Init+0x104>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <MX_GPIO_Init+0x104>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2120      	movs	r1, #32
 800189a:	4818      	ldr	r0, [pc, #96]	; (80018fc <MX_GPIO_Init+0x108>)
 800189c:	f001 fed6 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4812      	ldr	r0, [pc, #72]	; (8001900 <MX_GPIO_Init+0x10c>)
 80018b8:	f001 fd1c 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018bc:	2302      	movs	r3, #2
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <MX_GPIO_Init+0x10c>)
 80018d0:	f001 fd10 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018d4:	2320      	movs	r3, #32
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_GPIO_Init+0x108>)
 80018ec:	f001 fd02 	bl	80032f4 <HAL_GPIO_Init>

}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	; 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020800 	.word	0x40020800

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190c:	e7fe      	b.n	800190c <Error_Handler+0x8>
	...

08001910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_MspInit+0x4c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a0f      	ldr	r2, [pc, #60]	; (800195c <HAL_MspInit+0x4c>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_MspInit+0x4c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_MspInit+0x4c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_MspInit+0x4c>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_MspInit+0x4c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800194e:	2007      	movs	r0, #7
 8001950:	f001 f88c 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a3c      	ldr	r2, [pc, #240]	; (8001a70 <HAL_ADC_MspInit+0x110>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d171      	bne.n	8001a66 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_ADC_MspInit+0x114>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a3a      	ldr	r2, [pc, #232]	; (8001a74 <HAL_ADC_MspInit+0x114>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <HAL_ADC_MspInit+0x114>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b34      	ldr	r3, [pc, #208]	; (8001a74 <HAL_ADC_MspInit+0x114>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a33      	ldr	r2, [pc, #204]	; (8001a74 <HAL_ADC_MspInit+0x114>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <HAL_ADC_MspInit+0x114>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_ADC_MspInit+0x114>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a2c      	ldr	r2, [pc, #176]	; (8001a74 <HAL_ADC_MspInit+0x114>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_ADC_MspInit+0x114>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019d6:	230c      	movs	r3, #12
 80019d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019da:	2303      	movs	r3, #3
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4823      	ldr	r0, [pc, #140]	; (8001a78 <HAL_ADC_MspInit+0x118>)
 80019ea:	f001 fc83 	bl	80032f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80019ee:	2313      	movs	r3, #19
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f2:	2303      	movs	r3, #3
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	481e      	ldr	r0, [pc, #120]	; (8001a7c <HAL_ADC_MspInit+0x11c>)
 8001a02:	f001 fc77 	bl	80032f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a08:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_ADC_MspInit+0x124>)
 8001a0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a3c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a4a:	480d      	ldr	r0, [pc, #52]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a4c:	f001 f850 	bl	8002af0 <HAL_DMA_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001a56:	f7ff ff55 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a5e:	639a      	str	r2, [r3, #56]	; 0x38
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <HAL_ADC_MspInit+0x120>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40012000 	.word	0x40012000
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	200000d8 	.word	0x200000d8
 8001a84:	40026410 	.word	0x40026410

08001a88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09a      	sub	sp, #104	; 0x68
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	225c      	movs	r2, #92	; 0x5c
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f008 fd81 	bl	800a5a0 <memset>
  if(hrtc->Instance==RTC)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <HAL_RTC_MspInit+0x4c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d111      	bne.n	8001acc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 ff4c 	bl	8003954 <HAL_RCCEx_PeriphCLKConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001ac2:	f7ff ff1f 	bl	8001904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_RTC_MspInit+0x50>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001acc:	bf00      	nop
 8001ace:	3768      	adds	r7, #104	; 0x68
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40002800 	.word	0x40002800
 8001ad8:	42470e3c 	.word	0x42470e3c

08001adc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0a2      	sub	sp, #136	; 0x88
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	225c      	movs	r2, #92	; 0x5c
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f008 fd4f 	bl	800a5a0 <memset>
  if(hsd->Instance==SDIO)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <HAL_SD_MspInit+0x14c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	f040 8088 	bne.w	8001c1e <HAL_SD_MspInit+0x142>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001b14:	2300      	movs	r3, #0
 8001b16:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b1c:	f107 0318 	add.w	r3, r7, #24
 8001b20:	4618      	mov	r0, r3
 8001b22:	f001 ff17 	bl	8003954 <HAL_RCCEx_PeriphCLKConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001b2c:	f7ff feea 	bl	8001904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <HAL_SD_MspInit+0x150>)
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	4a3c      	ldr	r2, [pc, #240]	; (8001c2c <HAL_SD_MspInit+0x150>)
 8001b3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b40:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <HAL_SD_MspInit+0x150>)
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <HAL_SD_MspInit+0x150>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	4a35      	ldr	r2, [pc, #212]	; (8001c2c <HAL_SD_MspInit+0x150>)
 8001b56:	f043 0302 	orr.w	r3, r3, #2
 8001b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5c:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <HAL_SD_MspInit+0x150>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <HAL_SD_MspInit+0x150>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	4a2e      	ldr	r2, [pc, #184]	; (8001c2c <HAL_SD_MspInit+0x150>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	6313      	str	r3, [r2, #48]	; 0x30
 8001b78:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <HAL_SD_MspInit+0x150>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_SD_MspInit+0x150>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <HAL_SD_MspInit+0x150>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6313      	str	r3, [r2, #48]	; 0x30
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_SD_MspInit+0x150>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	481c      	ldr	r0, [pc, #112]	; (8001c30 <HAL_SD_MspInit+0x154>)
 8001bc0:	f001 fb98 	bl	80032f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001bd8:	230c      	movs	r3, #12
 8001bda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bde:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001be2:	4619      	mov	r1, r3
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <HAL_SD_MspInit+0x158>)
 8001be6:	f001 fb85 	bl	80032f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bea:	2304      	movs	r3, #4
 8001bec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001bfc:	230c      	movs	r3, #12
 8001bfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c06:	4619      	mov	r1, r3
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <HAL_SD_MspInit+0x15c>)
 8001c0a:	f001 fb73 	bl	80032f4 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	2031      	movs	r0, #49	; 0x31
 8001c14:	f000 ff35 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001c18:	2031      	movs	r0, #49	; 0x31
 8001c1a:	f000 ff4e 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3788      	adds	r7, #136	; 0x88
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40012c00 	.word	0x40012c00
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020c00 	.word	0x40020c00

08001c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_UART_MspInit+0x84>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d12b      	bne.n	8001cb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c96:	230c      	movs	r3, #12
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001cb2:	f001 fb1f 	bl	80032f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40004400 	.word	0x40004400
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler+0x4>

08001cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d18:	f000 f92c 	bl	8001f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <SDIO_IRQHandler+0x10>)
 8001d26:	f003 fc57 	bl	80055d8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000158 	.word	0x20000158

08001d34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <DMA2_Stream0_IRQHandler+0x10>)
 8001d3a:	f001 f871 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200000d8 	.word	0x200000d8

08001d48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	e00a      	b.n	8001d70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d5a:	f3af 8000 	nop.w
 8001d5e:	4601      	mov	r1, r0
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	60ba      	str	r2, [r7, #8]
 8001d66:	b2ca      	uxtb	r2, r1
 8001d68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbf0      	blt.n	8001d5a <_read+0x12>
  }

  return len;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001daa:	605a      	str	r2, [r3, #4]
  return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_isatty>:

int _isatty(int file)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <_sbrk+0x5c>)
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <_sbrk+0x60>)
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <_sbrk+0x64>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <_sbrk+0x68>)
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e1c:	f008 fb96 	bl	800a54c <__errno>
 8001e20:	4603      	mov	r3, r0
 8001e22:	220c      	movs	r2, #12
 8001e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	e009      	b.n	8001e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <_sbrk+0x64>)
 8001e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20020000 	.word	0x20020000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	20002370 	.word	0x20002370
 8001e54:	200023c8 	.word	0x200023c8

08001e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e80:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e82:	490e      	ldr	r1, [pc, #56]	; (8001ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e84:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e88:	e002      	b.n	8001e90 <LoopCopyDataInit>

08001e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8e:	3304      	adds	r3, #4

08001e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e94:	d3f9      	bcc.n	8001e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e98:	4c0b      	ldr	r4, [pc, #44]	; (8001ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e9c:	e001      	b.n	8001ea2 <LoopFillZerobss>

08001e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea0:	3204      	adds	r2, #4

08001ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea4:	d3fb      	bcc.n	8001e9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ea6:	f7ff ffd7 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eaa:	f008 fb55 	bl	800a558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eae:	f7ff f9f5 	bl	800129c <main>
  bx  lr    
 8001eb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ebc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ec0:	0800c800 	.word	0x0800c800
  ldr r2, =_sbss
 8001ec4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ec8:	200023c4 	.word	0x200023c4

08001ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC_IRQHandler>
	...

08001ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <HAL_Init+0x40>)
 8001eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_Init+0x40>)
 8001ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <HAL_Init+0x40>)
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f000 fdb7 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efe:	2000      	movs	r0, #0
 8001f00:	f000 f808 	bl	8001f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f04:	f7ff fd04 	bl	8001910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_InitTick+0x54>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_InitTick+0x58>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4619      	mov	r1, r3
 8001f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fdcf 	bl	8002ad6 <HAL_SYSTICK_Config>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00e      	b.n	8001f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	d80a      	bhi.n	8001f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f000 fd97 	bl	8002a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f54:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <HAL_InitTick+0x5c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000004 	.word	0x20000004
 8001f6c:	2000000c 	.word	0x2000000c
 8001f70:	20000008 	.word	0x20000008

08001f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x20>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_IncTick+0x24>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_IncTick+0x24>)
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	2000000c 	.word	0x2000000c
 8001f98:	20002374 	.word	0x20002374

08001f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_GetTick+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20002374 	.word	0x20002374

08001fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff ffee 	bl	8001f9c <HAL_GetTick>
 8001fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d005      	beq.n	8001fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_Delay+0x44>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fda:	bf00      	nop
 8001fdc:	f7ff ffde 	bl	8001f9c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d8f7      	bhi.n	8001fdc <HAL_Delay+0x28>
  {
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000000c 	.word	0x2000000c

08001ffc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e033      	b.n	800207a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fca0 	bl	8001960 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d118      	bne.n	800206c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002042:	f023 0302 	bic.w	r3, r3, #2
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fabe 	bl	80025d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
 800206a:	e001      	b.n	8002070 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_ADC_Start_DMA+0x1e>
 800209e:	2302      	movs	r3, #2
 80020a0:	e0e9      	b.n	8002276 <HAL_ADC_Start_DMA+0x1f2>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d018      	beq.n	80020ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020c8:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <HAL_ADC_Start_DMA+0x1fc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a6d      	ldr	r2, [pc, #436]	; (8002284 <HAL_ADC_Start_DMA+0x200>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	0c9a      	lsrs	r2, r3, #18
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020dc:	e002      	b.n	80020e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f9      	bne.n	80020de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f8:	d107      	bne.n	800210a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002108:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	f040 80a1 	bne.w	800225c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002144:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002158:	d106      	bne.n	8002168 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f023 0206 	bic.w	r2, r3, #6
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
 8002166:	e002      	b.n	800216e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002176:	4b44      	ldr	r3, [pc, #272]	; (8002288 <HAL_ADC_Start_DMA+0x204>)
 8002178:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217e:	4a43      	ldr	r2, [pc, #268]	; (800228c <HAL_ADC_Start_DMA+0x208>)
 8002180:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	4a42      	ldr	r2, [pc, #264]	; (8002290 <HAL_ADC_Start_DMA+0x20c>)
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	4a41      	ldr	r2, [pc, #260]	; (8002294 <HAL_ADC_Start_DMA+0x210>)
 8002190:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800219a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	334c      	adds	r3, #76	; 0x4c
 80021c6:	4619      	mov	r1, r3
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f000 fd3e 	bl	8002c4c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d12a      	bne.n	8002232 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2d      	ldr	r2, [pc, #180]	; (8002298 <HAL_ADC_Start_DMA+0x214>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d015      	beq.n	8002212 <HAL_ADC_Start_DMA+0x18e>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2c      	ldr	r2, [pc, #176]	; (800229c <HAL_ADC_Start_DMA+0x218>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d105      	bne.n	80021fc <HAL_ADC_Start_DMA+0x178>
 80021f0:	4b25      	ldr	r3, [pc, #148]	; (8002288 <HAL_ADC_Start_DMA+0x204>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a27      	ldr	r2, [pc, #156]	; (80022a0 <HAL_ADC_Start_DMA+0x21c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d136      	bne.n	8002274 <HAL_ADC_Start_DMA+0x1f0>
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_ADC_Start_DMA+0x204>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2b00      	cmp	r3, #0
 8002210:	d130      	bne.n	8002274 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d129      	bne.n	8002274 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	e020      	b.n	8002274 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a18      	ldr	r2, [pc, #96]	; (8002298 <HAL_ADC_Start_DMA+0x214>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d11b      	bne.n	8002274 <HAL_ADC_Start_DMA+0x1f0>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d114      	bne.n	8002274 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	e00b      	b.n	8002274 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f043 0210 	orr.w	r2, r3, #16
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000004 	.word	0x20000004
 8002284:	431bde83 	.word	0x431bde83
 8002288:	40012300 	.word	0x40012300
 800228c:	080027c9 	.word	0x080027c9
 8002290:	08002883 	.word	0x08002883
 8002294:	0800289f 	.word	0x0800289f
 8002298:	40012000 	.word	0x40012000
 800229c:	40012100 	.word	0x40012100
 80022a0:	40012200 	.word	0x40012200

080022a4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_ADC_Stop_DMA+0x1a>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e048      	b.n	8002350 <HAL_ADC_Stop_DMA+0xac>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d130      	bne.n	8002346 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d10f      	bne.n	8002322 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fcf8 	bl	8002cfc <HAL_DMA_Abort>
 800230c:	4603      	mov	r3, r0
 800230e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002330:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1c>
 8002384:	2302      	movs	r3, #2
 8002386:	e113      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x244>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b09      	cmp	r3, #9
 8002396:	d925      	bls.n	80023e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68d9      	ldr	r1, [r3, #12]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	3b1e      	subs	r3, #30
 80023ae:	2207      	movs	r2, #7
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43da      	mvns	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	400a      	ands	r2, r1
 80023bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68d9      	ldr	r1, [r3, #12]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	4618      	mov	r0, r3
 80023d0:	4603      	mov	r3, r0
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4403      	add	r3, r0
 80023d6:	3b1e      	subs	r3, #30
 80023d8:	409a      	lsls	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	e022      	b.n	800242a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6919      	ldr	r1, [r3, #16]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	2207      	movs	r2, #7
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	400a      	ands	r2, r1
 8002406:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6919      	ldr	r1, [r3, #16]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	4618      	mov	r0, r3
 800241a:	4603      	mov	r3, r0
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4403      	add	r3, r0
 8002420:	409a      	lsls	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b06      	cmp	r3, #6
 8002430:	d824      	bhi.n	800247c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	3b05      	subs	r3, #5
 8002444:	221f      	movs	r2, #31
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	400a      	ands	r2, r1
 8002452:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	3b05      	subs	r3, #5
 800246e:	fa00 f203 	lsl.w	r2, r0, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	635a      	str	r2, [r3, #52]	; 0x34
 800247a:	e04c      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b0c      	cmp	r3, #12
 8002482:	d824      	bhi.n	80024ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b23      	subs	r3, #35	; 0x23
 8002496:	221f      	movs	r2, #31
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43da      	mvns	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	400a      	ands	r2, r1
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	3b23      	subs	r3, #35	; 0x23
 80024c0:	fa00 f203 	lsl.w	r2, r0, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
 80024cc:	e023      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	3b41      	subs	r3, #65	; 0x41
 80024e0:	221f      	movs	r2, #31
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	400a      	ands	r2, r1
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	4618      	mov	r0, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	3b41      	subs	r3, #65	; 0x41
 800250a:	fa00 f203 	lsl.w	r2, r0, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_ADC_ConfigChannel+0x250>)
 8002518:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <HAL_ADC_ConfigChannel+0x254>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d10f      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x1d8>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b12      	cmp	r3, #18
 800252a:	d10b      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <HAL_ADC_ConfigChannel+0x254>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d12b      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x23a>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_ADC_ConfigChannel+0x258>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <HAL_ADC_ConfigChannel+0x1f4>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b11      	cmp	r3, #17
 800255e:	d122      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <HAL_ADC_ConfigChannel+0x258>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d111      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_ADC_ConfigChannel+0x25c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a11      	ldr	r2, [pc, #68]	; (80025cc <HAL_ADC_ConfigChannel+0x260>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	0c9a      	lsrs	r2, r3, #18
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002598:	e002      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3b01      	subs	r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f9      	bne.n	800259a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40012300 	.word	0x40012300
 80025c0:	40012000 	.word	0x40012000
 80025c4:	10000012 	.word	0x10000012
 80025c8:	20000004 	.word	0x20000004
 80025cc:	431bde83 	.word	0x431bde83

080025d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d8:	4b79      	ldr	r3, [pc, #484]	; (80027c0 <ADC_Init+0x1f0>)
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	021a      	lsls	r2, r3, #8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800264a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6899      	ldr	r1, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <ADC_Init+0x1f4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d022      	beq.n	80026ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002676:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6899      	ldr	r1, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6899      	ldr	r1, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	e00f      	b.n	80026ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0202 	bic.w	r2, r2, #2
 80026dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6899      	ldr	r1, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7e1b      	ldrb	r3, [r3, #24]
 80026e8:	005a      	lsls	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01b      	beq.n	8002734 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800271a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	3b01      	subs	r3, #1
 8002728:	035a      	lsls	r2, r3, #13
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	e007      	b.n	8002744 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002742:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	3b01      	subs	r3, #1
 8002760:	051a      	lsls	r2, r3, #20
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6899      	ldr	r1, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002786:	025a      	lsls	r2, r3, #9
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800279e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6899      	ldr	r1, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	029a      	lsls	r2, r3, #10
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40012300 	.word	0x40012300
 80027c4:	0f000001 	.word	0x0f000001

080027c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d13c      	bne.n	800285c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d12b      	bne.n	8002854 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002800:	2b00      	cmp	r3, #0
 8002802:	d127      	bne.n	8002854 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800281c:	2b00      	cmp	r3, #0
 800281e:	d119      	bne.n	8002854 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0220 	bic.w	r2, r2, #32
 800282e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f043 0201 	orr.w	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7fe fbb7 	bl	8000fc8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800285a:	e00e      	b.n	800287a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff fd75 	bl	8002358 <HAL_ADC_ErrorCallback>
}
 800286e:	e004      	b.n	800287a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7fe fb7b 	bl	8000f8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f043 0204 	orr.w	r2, r3, #4
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f7ff fd4a 	bl	8002358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <__NVIC_SetPriorityGrouping>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	60d3      	str	r3, [r2, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_GetPriorityGrouping>:
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <__NVIC_GetPriorityGrouping+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 0307 	and.w	r3, r3, #7
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_EnableIRQ>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db0b      	blt.n	800295a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <__NVIC_EnableIRQ+0x38>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2001      	movs	r0, #1
 8002952:	fa00 f202 	lsl.w	r2, r0, r2
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e100 	.word	0xe000e100

0800296c <__NVIC_SetPriority>:
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	; (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <SysTick_Config>:
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a38:	d301      	bcc.n	8002a3e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00f      	b.n	8002a5e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <SysTick_Config+0x40>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a46:	210f      	movs	r1, #15
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f7ff ff8e 	bl	800296c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <SysTick_Config+0x40>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <SysTick_Config+0x40>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	e000e010 	.word	0xe000e010

08002a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff29 	bl	80028cc <__NVIC_SetPriorityGrouping>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a94:	f7ff ff3e 	bl	8002914 <__NVIC_GetPriorityGrouping>
 8002a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff ff8e 	bl	80029c0 <NVIC_EncodePriority>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff5d 	bl	800296c <__NVIC_SetPriority>
}
 8002ab2:	bf00      	nop
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff31 	bl	8002930 <__NVIC_EnableIRQ>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ffa2 	bl	8002a28 <SysTick_Config>
 8002ae4:	4603      	mov	r3, r0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002afc:	f7ff fa4e 	bl	8001f9c <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e099      	b.n	8002c40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b2c:	e00f      	b.n	8002b4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b2e:	f7ff fa35 	bl	8001f9c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d908      	bls.n	8002b4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2203      	movs	r2, #3
 8002b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e078      	b.n	8002c40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e8      	bne.n	8002b2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <HAL_DMA_Init+0x158>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d107      	bne.n	8002bb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 0307 	bic.w	r3, r3, #7
 8002bce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d117      	bne.n	8002c12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00e      	beq.n	8002c12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fb01 	bl	80031fc <DMA_CheckFifoParam>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2240      	movs	r2, #64	; 0x40
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e016      	b.n	8002c40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fab8 	bl	8003190 <DMA_CalcBaseAndBitshift>
 8002c20:	4603      	mov	r3, r0
 8002c22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	223f      	movs	r2, #63	; 0x3f
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	f010803f 	.word	0xf010803f

08002c4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_DMA_Start_IT+0x26>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e040      	b.n	8002cf4 <HAL_DMA_Start_IT+0xa8>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d12f      	bne.n	8002ce6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fa4a 	bl	8003134 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	223f      	movs	r2, #63	; 0x3f
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0216 	orr.w	r2, r2, #22
 8002cba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0208 	orr.w	r2, r2, #8
 8002cd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e005      	b.n	8002cf2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d0a:	f7ff f947 	bl	8001f9c <HAL_GetTick>
 8002d0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d008      	beq.n	8002d2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e052      	b.n	8002dd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0216 	bic.w	r2, r2, #22
 8002d3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <HAL_DMA_Abort+0x62>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0208 	bic.w	r2, r2, #8
 8002d6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d7e:	e013      	b.n	8002da8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d80:	f7ff f90c 	bl	8001f9c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b05      	cmp	r3, #5
 8002d8c:	d90c      	bls.n	8002da8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2203      	movs	r2, #3
 8002d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e015      	b.n	8002dd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1e4      	bne.n	8002d80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	223f      	movs	r2, #63	; 0x3f
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d004      	beq.n	8002dfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00c      	b.n	8002e14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e2c:	4b8e      	ldr	r3, [pc, #568]	; (8003068 <HAL_DMA_IRQHandler+0x248>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a8e      	ldr	r2, [pc, #568]	; (800306c <HAL_DMA_IRQHandler+0x24c>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0a9b      	lsrs	r3, r3, #10
 8002e38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01a      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0204 	bic.w	r2, r2, #4
 8002e72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	2208      	movs	r2, #8
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	2201      	movs	r2, #1
 8002e92:	409a      	lsls	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d012      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	2201      	movs	r2, #1
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f043 0202 	orr.w	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d012      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f043 0204 	orr.w	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	2210      	movs	r2, #16
 8002efe:	409a      	lsls	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d043      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d03c      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d018      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d024      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
 8002f4e:	e01f      	b.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01b      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
 8002f60:	e016      	b.n	8002f90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0208 	bic.w	r2, r2, #8
 8002f7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	2220      	movs	r2, #32
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 808f 	beq.w	80030c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8087 	beq.w	80030c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b05      	cmp	r3, #5
 8002fc8:	d136      	bne.n	8003038 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0216 	bic.w	r2, r2, #22
 8002fd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <HAL_DMA_IRQHandler+0x1da>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0208 	bic.w	r2, r2, #8
 8003008:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	223f      	movs	r2, #63	; 0x3f
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302a:	2b00      	cmp	r3, #0
 800302c:	d07e      	beq.n	800312c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
        }
        return;
 8003036:	e079      	b.n	800312c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01d      	beq.n	8003082 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10d      	bne.n	8003070 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003058:	2b00      	cmp	r3, #0
 800305a:	d031      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
 8003064:	e02c      	b.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
 8003066:	bf00      	nop
 8003068:	20000004 	.word	0x20000004
 800306c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d023      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
 8003080:	e01e      	b.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10f      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0210 	bic.w	r2, r2, #16
 800309e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d032      	beq.n	800312e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d022      	beq.n	800311a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2205      	movs	r2, #5
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	3301      	adds	r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d307      	bcc.n	8003108 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f2      	bne.n	80030ec <HAL_DMA_IRQHandler+0x2cc>
 8003106:	e000      	b.n	800310a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003108:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
 800312a:	e000      	b.n	800312e <HAL_DMA_IRQHandler+0x30e>
        return;
 800312c:	bf00      	nop
    }
  }
}
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003150:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d108      	bne.n	8003174 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003172:	e007      	b.n	8003184 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	60da      	str	r2, [r3, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	3b10      	subs	r3, #16
 80031a0:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <DMA_CalcBaseAndBitshift+0x64>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031aa:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <DMA_CalcBaseAndBitshift+0x68>)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d909      	bls.n	80031d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031c6:	f023 0303 	bic.w	r3, r3, #3
 80031ca:	1d1a      	adds	r2, r3, #4
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	659a      	str	r2, [r3, #88]	; 0x58
 80031d0:	e007      	b.n	80031e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031da:	f023 0303 	bic.w	r3, r3, #3
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	aaaaaaab 	.word	0xaaaaaaab
 80031f8:	0800c688 	.word	0x0800c688

080031fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11f      	bne.n	8003256 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d856      	bhi.n	80032ca <DMA_CheckFifoParam+0xce>
 800321c:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <DMA_CheckFifoParam+0x28>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	08003235 	.word	0x08003235
 8003228:	08003247 	.word	0x08003247
 800322c:	08003235 	.word	0x08003235
 8003230:	080032cb 	.word	0x080032cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d046      	beq.n	80032ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003244:	e043      	b.n	80032ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800324e:	d140      	bne.n	80032d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003254:	e03d      	b.n	80032d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325e:	d121      	bne.n	80032a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d837      	bhi.n	80032d6 <DMA_CheckFifoParam+0xda>
 8003266:	a201      	add	r2, pc, #4	; (adr r2, 800326c <DMA_CheckFifoParam+0x70>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	0800327d 	.word	0x0800327d
 8003270:	08003283 	.word	0x08003283
 8003274:	0800327d 	.word	0x0800327d
 8003278:	08003295 	.word	0x08003295
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
      break;
 8003280:	e030      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d025      	beq.n	80032da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003292:	e022      	b.n	80032da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800329c:	d11f      	bne.n	80032de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032a2:	e01c      	b.n	80032de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d903      	bls.n	80032b2 <DMA_CheckFifoParam+0xb6>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d003      	beq.n	80032b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032b0:	e018      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      break;
 80032b6:	e015      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00e      	beq.n	80032e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      break;
 80032c8:	e00b      	b.n	80032e2 <DMA_CheckFifoParam+0xe6>
      break;
 80032ca:	bf00      	nop
 80032cc:	e00a      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032ce:	bf00      	nop
 80032d0:	e008      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032d2:	bf00      	nop
 80032d4:	e006      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032d6:	bf00      	nop
 80032d8:	e004      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032da:	bf00      	nop
 80032dc:	e002      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <DMA_CheckFifoParam+0xe8>
      break;
 80032e2:	bf00      	nop
    }
  } 
  
  return status; 
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop

080032f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b089      	sub	sp, #36	; 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003306:	2300      	movs	r3, #0
 8003308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	e165      	b.n	80035dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003310:	2201      	movs	r2, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4013      	ands	r3, r2
 8003322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	429a      	cmp	r2, r3
 800332a:	f040 8154 	bne.w	80035d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d005      	beq.n	8003346 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003342:	2b02      	cmp	r3, #2
 8003344:	d130      	bne.n	80033a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	2203      	movs	r2, #3
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800337c:	2201      	movs	r2, #1
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 0201 	and.w	r2, r3, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d017      	beq.n	80033e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	2203      	movs	r2, #3
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d123      	bne.n	8003438 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	08da      	lsrs	r2, r3, #3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3208      	adds	r2, #8
 80033f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220f      	movs	r2, #15
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	08da      	lsrs	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3208      	adds	r2, #8
 8003432:	69b9      	ldr	r1, [r7, #24]
 8003434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2203      	movs	r2, #3
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0203 	and.w	r2, r3, #3
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80ae 	beq.w	80035d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	4b5d      	ldr	r3, [pc, #372]	; (80035f4 <HAL_GPIO_Init+0x300>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	4a5c      	ldr	r2, [pc, #368]	; (80035f4 <HAL_GPIO_Init+0x300>)
 8003484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003488:	6453      	str	r3, [r2, #68]	; 0x44
 800348a:	4b5a      	ldr	r3, [pc, #360]	; (80035f4 <HAL_GPIO_Init+0x300>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003496:	4a58      	ldr	r2, [pc, #352]	; (80035f8 <HAL_GPIO_Init+0x304>)
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	3302      	adds	r3, #2
 800349e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4f      	ldr	r2, [pc, #316]	; (80035fc <HAL_GPIO_Init+0x308>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d025      	beq.n	800350e <HAL_GPIO_Init+0x21a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4e      	ldr	r2, [pc, #312]	; (8003600 <HAL_GPIO_Init+0x30c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d01f      	beq.n	800350a <HAL_GPIO_Init+0x216>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4d      	ldr	r2, [pc, #308]	; (8003604 <HAL_GPIO_Init+0x310>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d019      	beq.n	8003506 <HAL_GPIO_Init+0x212>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4c      	ldr	r2, [pc, #304]	; (8003608 <HAL_GPIO_Init+0x314>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_GPIO_Init+0x20e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4b      	ldr	r2, [pc, #300]	; (800360c <HAL_GPIO_Init+0x318>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00d      	beq.n	80034fe <HAL_GPIO_Init+0x20a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4a      	ldr	r2, [pc, #296]	; (8003610 <HAL_GPIO_Init+0x31c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <HAL_GPIO_Init+0x206>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a49      	ldr	r2, [pc, #292]	; (8003614 <HAL_GPIO_Init+0x320>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d101      	bne.n	80034f6 <HAL_GPIO_Init+0x202>
 80034f2:	2306      	movs	r3, #6
 80034f4:	e00c      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 80034f6:	2307      	movs	r3, #7
 80034f8:	e00a      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 80034fa:	2305      	movs	r3, #5
 80034fc:	e008      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 80034fe:	2304      	movs	r3, #4
 8003500:	e006      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 8003502:	2303      	movs	r3, #3
 8003504:	e004      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 8003506:	2302      	movs	r3, #2
 8003508:	e002      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_GPIO_Init+0x21c>
 800350e:	2300      	movs	r3, #0
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	f002 0203 	and.w	r2, r2, #3
 8003516:	0092      	lsls	r2, r2, #2
 8003518:	4093      	lsls	r3, r2
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003520:	4935      	ldr	r1, [pc, #212]	; (80035f8 <HAL_GPIO_Init+0x304>)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800352e:	4b3a      	ldr	r3, [pc, #232]	; (8003618 <HAL_GPIO_Init+0x324>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003552:	4a31      	ldr	r2, [pc, #196]	; (8003618 <HAL_GPIO_Init+0x324>)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003558:	4b2f      	ldr	r3, [pc, #188]	; (8003618 <HAL_GPIO_Init+0x324>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800357c:	4a26      	ldr	r2, [pc, #152]	; (8003618 <HAL_GPIO_Init+0x324>)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003582:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_GPIO_Init+0x324>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_GPIO_Init+0x324>)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_GPIO_Init+0x324>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d0:	4a11      	ldr	r2, [pc, #68]	; (8003618 <HAL_GPIO_Init+0x324>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3301      	adds	r3, #1
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b0f      	cmp	r3, #15
 80035e0:	f67f ae96 	bls.w	8003310 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3724      	adds	r7, #36	; 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40013800 	.word	0x40013800
 80035fc:	40020000 	.word	0x40020000
 8003600:	40020400 	.word	0x40020400
 8003604:	40020800 	.word	0x40020800
 8003608:	40020c00 	.word	0x40020c00
 800360c:	40021000 	.word	0x40021000
 8003610:	40021400 	.word	0x40021400
 8003614:	40021800 	.word	0x40021800
 8003618:	40013c00 	.word	0x40013c00

0800361c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	e001      	b.n	800363e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800363e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
 8003658:	4613      	mov	r3, r2
 800365a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800365c:	787b      	ldrb	r3, [r7, #1]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003668:	e003      	b.n	8003672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800366a:	887b      	ldrh	r3, [r7, #2]
 800366c:	041a      	lsls	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	619a      	str	r2, [r3, #24]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <HAL_PWREx_EnableOverDrive+0x90>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <HAL_PWREx_EnableOverDrive+0x90>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003698:	6413      	str	r3, [r2, #64]	; 0x40
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_PWREx_EnableOverDrive+0x90>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_PWREx_EnableOverDrive+0x94>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ac:	f7fe fc76 	bl	8001f9c <HAL_GetTick>
 80036b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036b2:	e009      	b.n	80036c8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036b4:	f7fe fc72 	bl	8001f9c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036c2:	d901      	bls.n	80036c8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e01f      	b.n	8003708 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036c8:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_PWREx_EnableOverDrive+0x98>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d4:	d1ee      	bne.n	80036b4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_PWREx_EnableOverDrive+0x9c>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036dc:	f7fe fc5e 	bl	8001f9c <HAL_GetTick>
 80036e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036e2:	e009      	b.n	80036f8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036e4:	f7fe fc5a 	bl	8001f9c <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f2:	d901      	bls.n	80036f8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e007      	b.n	8003708 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <HAL_PWREx_EnableOverDrive+0x98>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003704:	d1ee      	bne.n	80036e4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40023800 	.word	0x40023800
 8003714:	420e0040 	.word	0x420e0040
 8003718:	40007000 	.word	0x40007000
 800371c:	420e0044 	.word	0x420e0044

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0cc      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b68      	ldr	r3, [pc, #416]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d90c      	bls.n	800375c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b65      	ldr	r3, [pc, #404]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0b8      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003774:	4b59      	ldr	r3, [pc, #356]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4a58      	ldr	r2, [pc, #352]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800377e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800378c:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a52      	ldr	r2, [pc, #328]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003798:	4b50      	ldr	r3, [pc, #320]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	494d      	ldr	r1, [pc, #308]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d044      	beq.n	8003840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d119      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d003      	beq.n	80037de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037de:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e067      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fe:	4b37      	ldr	r3, [pc, #220]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 0203 	bic.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4934      	ldr	r1, [pc, #208]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003810:	f7fe fbc4 	bl	8001f9c <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	e00a      	b.n	800382e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003818:	f7fe fbc0 	bl	8001f9c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e04f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 020c 	and.w	r2, r3, #12
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	429a      	cmp	r2, r3
 800383e:	d1eb      	bne.n	8003818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003840:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d20c      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e032      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4916      	ldr	r1, [pc, #88]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	490e      	ldr	r1, [pc, #56]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038a6:	f000 fb7f 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 80038aa:	4602      	mov	r2, r0
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	490a      	ldr	r1, [pc, #40]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	5ccb      	ldrb	r3, [r1, r3]
 80038ba:	fa22 f303 	lsr.w	r3, r2, r3
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fb24 	bl	8001f14 <HAL_InitTick>

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023c00 	.word	0x40023c00
 80038dc:	40023800 	.word	0x40023800
 80038e0:	0800c670 	.word	0x0800c670
 80038e4:	20000004 	.word	0x20000004
 80038e8:	20000008 	.word	0x20000008

080038ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000004 	.word	0x20000004

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003908:	f7ff fff0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0a9b      	lsrs	r3, r3, #10
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4903      	ldr	r1, [pc, #12]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40023800 	.word	0x40023800
 8003928:	0800c680 	.word	0x0800c680

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003930:	f7ff ffdc 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0b5b      	lsrs	r3, r3, #13
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	; (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	0800c680 	.word	0x0800c680

08003954 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08c      	sub	sp, #48	; 0x30
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d010      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800398c:	4b6f      	ldr	r3, [pc, #444]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800398e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003992:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	496c      	ldr	r1, [pc, #432]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80039aa:	2301      	movs	r3, #1
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d010      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80039ba:	4b64      	ldr	r3, [pc, #400]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	4960      	ldr	r1, [pc, #384]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80039d8:	2301      	movs	r3, #1
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d017      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e8:	4b58      	ldr	r3, [pc, #352]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	4955      	ldr	r1, [pc, #340]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a06:	d101      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003a14:	2301      	movs	r3, #1
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d017      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a24:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	4946      	ldr	r1, [pc, #280]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a42:	d101      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003a44:	2301      	movs	r3, #1
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003a50:	2301      	movs	r3, #1
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 808a 	beq.w	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	4a38      	ldr	r2, [pc, #224]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a70:	6413      	str	r3, [r2, #64]	; 0x40
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a7e:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a33      	ldr	r2, [pc, #204]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a8a:	f7fe fa87 	bl	8001f9c <HAL_GetTick>
 8003a8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fe fa83 	bl	8001f9c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e278      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003aa4:	4b2a      	ldr	r3, [pc, #168]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ab0:	4b26      	ldr	r3, [pc, #152]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02f      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d028      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ace:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ad8:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ae4:	4a19      	ldr	r2, [pc, #100]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d114      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fe fa51 	bl	8001f9c <HAL_GetTick>
 8003afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fe fa4d 	bl	8001f9c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e240      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ee      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b2c:	d114      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b42:	4902      	ldr	r1, [pc, #8]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]
 8003b48:	e00c      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40007000 	.word	0x40007000
 8003b54:	42470e40 	.word	0x42470e40
 8003b58:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	4a49      	ldr	r2, [pc, #292]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b62:	6093      	str	r3, [r2, #8]
 8003b64:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	4944      	ldr	r1, [pc, #272]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003b88:	4b3f      	ldr	r3, [pc, #252]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003b8a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003b98:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	4937      	ldr	r1, [pc, #220]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bba:	4b32      	ldr	r3, [pc, #200]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc8:	492e      	ldr	r1, [pc, #184]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d011      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bdc:	4b29      	ldr	r3, [pc, #164]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	4926      	ldr	r1, [pc, #152]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	491a      	ldr	r1, [pc, #104]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d011      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003c2e:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c34:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3c:	4911      	ldr	r1, [pc, #68]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d005      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c60:	f040 80ff 	bne.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c6a:	f7fe f997 	bl	8001f9c <HAL_GetTick>
 8003c6e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c70:	e00e      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c72:	f7fe f993 	bl	8001f9c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d907      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e188      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003c84:	40023800 	.word	0x40023800
 8003c88:	424711e0 	.word	0x424711e0
 8003c8c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c90:	4b7e      	ldr	r3, [pc, #504]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ea      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d028      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d124      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003cc4:	4b71      	ldr	r3, [pc, #452]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cd6:	4b6d      	ldr	r3, [pc, #436]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cdc:	0e1b      	lsrs	r3, r3, #24
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	061b      	lsls	r3, r3, #24
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	071b      	lsls	r3, r3, #28
 8003d06:	4961      	ldr	r1, [pc, #388]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d035      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d38:	d130      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d3a:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	3301      	adds	r3, #1
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d4c:	4b4f      	ldr	r3, [pc, #316]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d52:	0f1b      	lsrs	r3, r3, #28
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	019b      	lsls	r3, r3, #6
 8003d64:	431a      	orrs	r2, r3
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	431a      	orrs	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	071b      	lsls	r3, r3, #28
 8003d7c:	4943      	ldr	r1, [pc, #268]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d84:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d8a:	f023 021f 	bic.w	r2, r3, #31
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	3b01      	subs	r3, #1
 8003d94:	493d      	ldr	r1, [pc, #244]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d029      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db0:	d124      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003db2:	4b36      	ldr	r3, [pc, #216]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dc4:	4b31      	ldr	r3, [pc, #196]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dca:	0f1b      	lsrs	r3, r3, #28
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	019b      	lsls	r3, r3, #6
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	3b01      	subs	r3, #1
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	431a      	orrs	r2, r3
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	431a      	orrs	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	071b      	lsls	r3, r3, #28
 8003df4:	4925      	ldr	r1, [pc, #148]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d016      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	085b      	lsrs	r3, r3, #1
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	061b      	lsls	r3, r3, #24
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	071b      	lsls	r3, r3, #28
 8003e2e:	4917      	ldr	r1, [pc, #92]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e3c:	f7fe f8ae 	bl	8001f9c <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e44:	f7fe f8aa 	bl	8001f9c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e09f      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f040 8095 	bne.w	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e70:	f7fe f894 	bl	8001f9c <HAL_GetTick>
 8003e74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e76:	e00f      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e78:	f7fe f890 	bl	8001f9c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d908      	bls.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e085      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	42470068 	.word	0x42470068
 8003e94:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e98:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea4:	d0e8      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d02b      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d127      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003ece:	4b34      	ldr	r3, [pc, #208]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	3301      	adds	r3, #1
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699a      	ldr	r2, [r3, #24]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	019b      	lsls	r3, r3, #6
 8003eea:	431a      	orrs	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	041b      	lsls	r3, r3, #16
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	061b      	lsls	r3, r3, #24
 8003efc:	4928      	ldr	r1, [pc, #160]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f04:	4b26      	ldr	r3, [pc, #152]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	3b01      	subs	r3, #1
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	4922      	ldr	r1, [pc, #136]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01d      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f32:	d118      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	0e1b      	lsrs	r3, r3, #24
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	019b      	lsls	r3, r3, #6
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	3b01      	subs	r3, #1
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	4910      	ldr	r1, [pc, #64]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f6c:	f7fe f816 	bl	8001f9c <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f74:	f7fe f812 	bl	8001f9c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e007      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f92:	d1ef      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3730      	adds	r7, #48	; 0x30
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	42470070 	.word	0x42470070

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	b0ae      	sub	sp, #184	; 0xb8
 8003fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fce:	4bcb      	ldr	r3, [pc, #812]	; (80042fc <HAL_RCC_GetSysClockFreq+0x354>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	f200 8206 	bhi.w	80043e8 <HAL_RCC_GetSysClockFreq+0x440>
 8003fdc:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	08004019 	.word	0x08004019
 8003fe8:	080043e9 	.word	0x080043e9
 8003fec:	080043e9 	.word	0x080043e9
 8003ff0:	080043e9 	.word	0x080043e9
 8003ff4:	08004021 	.word	0x08004021
 8003ff8:	080043e9 	.word	0x080043e9
 8003ffc:	080043e9 	.word	0x080043e9
 8004000:	080043e9 	.word	0x080043e9
 8004004:	08004029 	.word	0x08004029
 8004008:	080043e9 	.word	0x080043e9
 800400c:	080043e9 	.word	0x080043e9
 8004010:	080043e9 	.word	0x080043e9
 8004014:	08004219 	.word	0x08004219
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004018:	4bb9      	ldr	r3, [pc, #740]	; (8004300 <HAL_RCC_GetSysClockFreq+0x358>)
 800401a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800401e:	e1e7      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004020:	4bb8      	ldr	r3, [pc, #736]	; (8004304 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004026:	e1e3      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004028:	4bb4      	ldr	r3, [pc, #720]	; (80042fc <HAL_RCC_GetSysClockFreq+0x354>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004034:	4bb1      	ldr	r3, [pc, #708]	; (80042fc <HAL_RCC_GetSysClockFreq+0x354>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d071      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004040:	4bae      	ldr	r3, [pc, #696]	; (80042fc <HAL_RCC_GetSysClockFreq+0x354>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	099b      	lsrs	r3, r3, #6
 8004046:	2200      	movs	r2, #0
 8004048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800404c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004050:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004058:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800405c:	2300      	movs	r3, #0
 800405e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004062:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004066:	4622      	mov	r2, r4
 8004068:	462b      	mov	r3, r5
 800406a:	f04f 0000 	mov.w	r0, #0
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	0159      	lsls	r1, r3, #5
 8004074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004078:	0150      	lsls	r0, r2, #5
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4621      	mov	r1, r4
 8004080:	1a51      	subs	r1, r2, r1
 8004082:	6439      	str	r1, [r7, #64]	; 0x40
 8004084:	4629      	mov	r1, r5
 8004086:	eb63 0301 	sbc.w	r3, r3, r1
 800408a:	647b      	str	r3, [r7, #68]	; 0x44
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004098:	4649      	mov	r1, r9
 800409a:	018b      	lsls	r3, r1, #6
 800409c:	4641      	mov	r1, r8
 800409e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040a2:	4641      	mov	r1, r8
 80040a4:	018a      	lsls	r2, r1, #6
 80040a6:	4641      	mov	r1, r8
 80040a8:	1a51      	subs	r1, r2, r1
 80040aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80040ac:	4649      	mov	r1, r9
 80040ae:	eb63 0301 	sbc.w	r3, r3, r1
 80040b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80040c0:	4649      	mov	r1, r9
 80040c2:	00cb      	lsls	r3, r1, #3
 80040c4:	4641      	mov	r1, r8
 80040c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ca:	4641      	mov	r1, r8
 80040cc:	00ca      	lsls	r2, r1, #3
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	4603      	mov	r3, r0
 80040d4:	4622      	mov	r2, r4
 80040d6:	189b      	adds	r3, r3, r2
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30
 80040da:	462b      	mov	r3, r5
 80040dc:	460a      	mov	r2, r1
 80040de:	eb42 0303 	adc.w	r3, r2, r3
 80040e2:	637b      	str	r3, [r7, #52]	; 0x34
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040f0:	4629      	mov	r1, r5
 80040f2:	024b      	lsls	r3, r1, #9
 80040f4:	4621      	mov	r1, r4
 80040f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040fa:	4621      	mov	r1, r4
 80040fc:	024a      	lsls	r2, r1, #9
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004106:	2200      	movs	r2, #0
 8004108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800410c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004110:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004114:	f7fc fd58 	bl	8000bc8 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4613      	mov	r3, r2
 800411e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004122:	e067      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004124:	4b75      	ldr	r3, [pc, #468]	; (80042fc <HAL_RCC_GetSysClockFreq+0x354>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	099b      	lsrs	r3, r3, #6
 800412a:	2200      	movs	r2, #0
 800412c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004130:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413c:	67bb      	str	r3, [r7, #120]	; 0x78
 800413e:	2300      	movs	r3, #0
 8004140:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004142:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004146:	4622      	mov	r2, r4
 8004148:	462b      	mov	r3, r5
 800414a:	f04f 0000 	mov.w	r0, #0
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	0159      	lsls	r1, r3, #5
 8004154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004158:	0150      	lsls	r0, r2, #5
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4621      	mov	r1, r4
 8004160:	1a51      	subs	r1, r2, r1
 8004162:	62b9      	str	r1, [r7, #40]	; 0x28
 8004164:	4629      	mov	r1, r5
 8004166:	eb63 0301 	sbc.w	r3, r3, r1
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004178:	4649      	mov	r1, r9
 800417a:	018b      	lsls	r3, r1, #6
 800417c:	4641      	mov	r1, r8
 800417e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004182:	4641      	mov	r1, r8
 8004184:	018a      	lsls	r2, r1, #6
 8004186:	4641      	mov	r1, r8
 8004188:	ebb2 0a01 	subs.w	sl, r2, r1
 800418c:	4649      	mov	r1, r9
 800418e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800419e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041a6:	4692      	mov	sl, r2
 80041a8:	469b      	mov	fp, r3
 80041aa:	4623      	mov	r3, r4
 80041ac:	eb1a 0303 	adds.w	r3, sl, r3
 80041b0:	623b      	str	r3, [r7, #32]
 80041b2:	462b      	mov	r3, r5
 80041b4:	eb4b 0303 	adc.w	r3, fp, r3
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80041c6:	4629      	mov	r1, r5
 80041c8:	028b      	lsls	r3, r1, #10
 80041ca:	4621      	mov	r1, r4
 80041cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041d0:	4621      	mov	r1, r4
 80041d2:	028a      	lsls	r2, r1, #10
 80041d4:	4610      	mov	r0, r2
 80041d6:	4619      	mov	r1, r3
 80041d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041dc:	2200      	movs	r2, #0
 80041de:	673b      	str	r3, [r7, #112]	; 0x70
 80041e0:	677a      	str	r2, [r7, #116]	; 0x74
 80041e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80041e6:	f7fc fcef 	bl	8000bc8 <__aeabi_uldivmod>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4613      	mov	r3, r2
 80041f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041f4:	4b41      	ldr	r3, [pc, #260]	; (80042fc <HAL_RCC_GetSysClockFreq+0x354>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800420a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800420e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004216:	e0eb      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004218:	4b38      	ldr	r3, [pc, #224]	; (80042fc <HAL_RCC_GetSysClockFreq+0x354>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004220:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004224:	4b35      	ldr	r3, [pc, #212]	; (80042fc <HAL_RCC_GetSysClockFreq+0x354>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d06b      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004230:	4b32      	ldr	r3, [pc, #200]	; (80042fc <HAL_RCC_GetSysClockFreq+0x354>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	099b      	lsrs	r3, r3, #6
 8004236:	2200      	movs	r2, #0
 8004238:	66bb      	str	r3, [r7, #104]	; 0x68
 800423a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800423c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800423e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004242:	663b      	str	r3, [r7, #96]	; 0x60
 8004244:	2300      	movs	r3, #0
 8004246:	667b      	str	r3, [r7, #100]	; 0x64
 8004248:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800424c:	4622      	mov	r2, r4
 800424e:	462b      	mov	r3, r5
 8004250:	f04f 0000 	mov.w	r0, #0
 8004254:	f04f 0100 	mov.w	r1, #0
 8004258:	0159      	lsls	r1, r3, #5
 800425a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800425e:	0150      	lsls	r0, r2, #5
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4621      	mov	r1, r4
 8004266:	1a51      	subs	r1, r2, r1
 8004268:	61b9      	str	r1, [r7, #24]
 800426a:	4629      	mov	r1, r5
 800426c:	eb63 0301 	sbc.w	r3, r3, r1
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800427e:	4659      	mov	r1, fp
 8004280:	018b      	lsls	r3, r1, #6
 8004282:	4651      	mov	r1, sl
 8004284:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004288:	4651      	mov	r1, sl
 800428a:	018a      	lsls	r2, r1, #6
 800428c:	4651      	mov	r1, sl
 800428e:	ebb2 0801 	subs.w	r8, r2, r1
 8004292:	4659      	mov	r1, fp
 8004294:	eb63 0901 	sbc.w	r9, r3, r1
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ac:	4690      	mov	r8, r2
 80042ae:	4699      	mov	r9, r3
 80042b0:	4623      	mov	r3, r4
 80042b2:	eb18 0303 	adds.w	r3, r8, r3
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	462b      	mov	r3, r5
 80042ba:	eb49 0303 	adc.w	r3, r9, r3
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80042cc:	4629      	mov	r1, r5
 80042ce:	024b      	lsls	r3, r1, #9
 80042d0:	4621      	mov	r1, r4
 80042d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042d6:	4621      	mov	r1, r4
 80042d8:	024a      	lsls	r2, r1, #9
 80042da:	4610      	mov	r0, r2
 80042dc:	4619      	mov	r1, r3
 80042de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042e2:	2200      	movs	r2, #0
 80042e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80042e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80042e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042ec:	f7fc fc6c 	bl	8000bc8 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4613      	mov	r3, r2
 80042f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042fa:	e065      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x420>
 80042fc:	40023800 	.word	0x40023800
 8004300:	00f42400 	.word	0x00f42400
 8004304:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004308:	4b3d      	ldr	r3, [pc, #244]	; (8004400 <HAL_RCC_GetSysClockFreq+0x458>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	2200      	movs	r2, #0
 8004310:	4618      	mov	r0, r3
 8004312:	4611      	mov	r1, r2
 8004314:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004318:	653b      	str	r3, [r7, #80]	; 0x50
 800431a:	2300      	movs	r3, #0
 800431c:	657b      	str	r3, [r7, #84]	; 0x54
 800431e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004322:	4642      	mov	r2, r8
 8004324:	464b      	mov	r3, r9
 8004326:	f04f 0000 	mov.w	r0, #0
 800432a:	f04f 0100 	mov.w	r1, #0
 800432e:	0159      	lsls	r1, r3, #5
 8004330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004334:	0150      	lsls	r0, r2, #5
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4641      	mov	r1, r8
 800433c:	1a51      	subs	r1, r2, r1
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	4649      	mov	r1, r9
 8004342:	eb63 0301 	sbc.w	r3, r3, r1
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004354:	4659      	mov	r1, fp
 8004356:	018b      	lsls	r3, r1, #6
 8004358:	4651      	mov	r1, sl
 800435a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800435e:	4651      	mov	r1, sl
 8004360:	018a      	lsls	r2, r1, #6
 8004362:	4651      	mov	r1, sl
 8004364:	1a54      	subs	r4, r2, r1
 8004366:	4659      	mov	r1, fp
 8004368:	eb63 0501 	sbc.w	r5, r3, r1
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	00eb      	lsls	r3, r5, #3
 8004376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800437a:	00e2      	lsls	r2, r4, #3
 800437c:	4614      	mov	r4, r2
 800437e:	461d      	mov	r5, r3
 8004380:	4643      	mov	r3, r8
 8004382:	18e3      	adds	r3, r4, r3
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	464b      	mov	r3, r9
 8004388:	eb45 0303 	adc.w	r3, r5, r3
 800438c:	607b      	str	r3, [r7, #4]
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800439a:	4629      	mov	r1, r5
 800439c:	028b      	lsls	r3, r1, #10
 800439e:	4621      	mov	r1, r4
 80043a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043a4:	4621      	mov	r1, r4
 80043a6:	028a      	lsls	r2, r1, #10
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043b0:	2200      	movs	r2, #0
 80043b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80043b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043ba:	f7fc fc05 	bl	8000bc8 <__aeabi_uldivmod>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4613      	mov	r3, r2
 80043c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <HAL_RCC_GetSysClockFreq+0x458>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	0f1b      	lsrs	r3, r3, #28
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80043d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043e6:	e003      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_RCC_GetSysClockFreq+0x45c>)
 80043ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	37b8      	adds	r7, #184	; 0xb8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
 8004404:	00f42400 	.word	0x00f42400

08004408 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e28d      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8083 	beq.w	800452e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004428:	4b94      	ldr	r3, [pc, #592]	; (800467c <HAL_RCC_OscConfig+0x274>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b04      	cmp	r3, #4
 8004432:	d019      	beq.n	8004468 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004434:	4b91      	ldr	r3, [pc, #580]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800443c:	2b08      	cmp	r3, #8
 800443e:	d106      	bne.n	800444e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004440:	4b8e      	ldr	r3, [pc, #568]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444c:	d00c      	beq.n	8004468 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800444e:	4b8b      	ldr	r3, [pc, #556]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004456:	2b0c      	cmp	r3, #12
 8004458:	d112      	bne.n	8004480 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800445a:	4b88      	ldr	r3, [pc, #544]	; (800467c <HAL_RCC_OscConfig+0x274>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004466:	d10b      	bne.n	8004480 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004468:	4b84      	ldr	r3, [pc, #528]	; (800467c <HAL_RCC_OscConfig+0x274>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d05b      	beq.n	800452c <HAL_RCC_OscConfig+0x124>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d157      	bne.n	800452c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e25a      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004488:	d106      	bne.n	8004498 <HAL_RCC_OscConfig+0x90>
 800448a:	4b7c      	ldr	r3, [pc, #496]	; (800467c <HAL_RCC_OscConfig+0x274>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a7b      	ldr	r2, [pc, #492]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e01d      	b.n	80044d4 <HAL_RCC_OscConfig+0xcc>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a0:	d10c      	bne.n	80044bc <HAL_RCC_OscConfig+0xb4>
 80044a2:	4b76      	ldr	r3, [pc, #472]	; (800467c <HAL_RCC_OscConfig+0x274>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a75      	ldr	r2, [pc, #468]	; (800467c <HAL_RCC_OscConfig+0x274>)
 80044a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	4b73      	ldr	r3, [pc, #460]	; (800467c <HAL_RCC_OscConfig+0x274>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a72      	ldr	r2, [pc, #456]	; (800467c <HAL_RCC_OscConfig+0x274>)
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e00b      	b.n	80044d4 <HAL_RCC_OscConfig+0xcc>
 80044bc:	4b6f      	ldr	r3, [pc, #444]	; (800467c <HAL_RCC_OscConfig+0x274>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a6e      	ldr	r2, [pc, #440]	; (800467c <HAL_RCC_OscConfig+0x274>)
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b6c      	ldr	r3, [pc, #432]	; (800467c <HAL_RCC_OscConfig+0x274>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a6b      	ldr	r2, [pc, #428]	; (800467c <HAL_RCC_OscConfig+0x274>)
 80044ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d013      	beq.n	8004504 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd fd5e 	bl	8001f9c <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fd fd5a 	bl	8001f9c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e21f      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	4b61      	ldr	r3, [pc, #388]	; (800467c <HAL_RCC_OscConfig+0x274>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0xdc>
 8004502:	e014      	b.n	800452e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd fd4a 	bl	8001f9c <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800450c:	f7fd fd46 	bl	8001f9c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e20b      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451e:	4b57      	ldr	r3, [pc, #348]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x104>
 800452a:	e000      	b.n	800452e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d06f      	beq.n	800461a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800453a:	4b50      	ldr	r3, [pc, #320]	; (800467c <HAL_RCC_OscConfig+0x274>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b00      	cmp	r3, #0
 8004544:	d017      	beq.n	8004576 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004546:	4b4d      	ldr	r3, [pc, #308]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800454e:	2b08      	cmp	r3, #8
 8004550:	d105      	bne.n	800455e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004552:	4b4a      	ldr	r3, [pc, #296]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455e:	4b47      	ldr	r3, [pc, #284]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004566:	2b0c      	cmp	r3, #12
 8004568:	d11c      	bne.n	80045a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800456a:	4b44      	ldr	r3, [pc, #272]	; (800467c <HAL_RCC_OscConfig+0x274>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d116      	bne.n	80045a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004576:	4b41      	ldr	r3, [pc, #260]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_RCC_OscConfig+0x186>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d001      	beq.n	800458e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e1d3      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458e:	4b3b      	ldr	r3, [pc, #236]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4937      	ldr	r1, [pc, #220]	; (800467c <HAL_RCC_OscConfig+0x274>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a2:	e03a      	b.n	800461a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d020      	beq.n	80045ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ac:	4b34      	ldr	r3, [pc, #208]	; (8004680 <HAL_RCC_OscConfig+0x278>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b2:	f7fd fcf3 	bl	8001f9c <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ba:	f7fd fcef 	bl	8001f9c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e1b4      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045cc:	4b2b      	ldr	r3, [pc, #172]	; (800467c <HAL_RCC_OscConfig+0x274>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0f0      	beq.n	80045ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d8:	4b28      	ldr	r3, [pc, #160]	; (800467c <HAL_RCC_OscConfig+0x274>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4925      	ldr	r1, [pc, #148]	; (800467c <HAL_RCC_OscConfig+0x274>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	600b      	str	r3, [r1, #0]
 80045ec:	e015      	b.n	800461a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ee:	4b24      	ldr	r3, [pc, #144]	; (8004680 <HAL_RCC_OscConfig+0x278>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd fcd2 	bl	8001f9c <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045fc:	f7fd fcce 	bl	8001f9c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e193      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460e:	4b1b      	ldr	r3, [pc, #108]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d036      	beq.n	8004694 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d016      	beq.n	800465c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462e:	4b15      	ldr	r3, [pc, #84]	; (8004684 <HAL_RCC_OscConfig+0x27c>)
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fd fcb2 	bl	8001f9c <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800463c:	f7fd fcae 	bl	8001f9c <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e173      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCC_OscConfig+0x234>
 800465a:	e01b      	b.n	8004694 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_OscConfig+0x27c>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004662:	f7fd fc9b 	bl	8001f9c <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004668:	e00e      	b.n	8004688 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800466a:	f7fd fc97 	bl	8001f9c <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d907      	bls.n	8004688 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e15c      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
 800467c:	40023800 	.word	0x40023800
 8004680:	42470000 	.word	0x42470000
 8004684:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	4b8a      	ldr	r3, [pc, #552]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 800468a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ea      	bne.n	800466a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8097 	beq.w	80047d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a6:	4b83      	ldr	r3, [pc, #524]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10f      	bne.n	80046d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	4b7f      	ldr	r3, [pc, #508]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	4a7e      	ldr	r2, [pc, #504]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 80046bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c0:	6413      	str	r3, [r2, #64]	; 0x40
 80046c2:	4b7c      	ldr	r3, [pc, #496]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ce:	2301      	movs	r3, #1
 80046d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d2:	4b79      	ldr	r3, [pc, #484]	; (80048b8 <HAL_RCC_OscConfig+0x4b0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d118      	bne.n	8004710 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046de:	4b76      	ldr	r3, [pc, #472]	; (80048b8 <HAL_RCC_OscConfig+0x4b0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a75      	ldr	r2, [pc, #468]	; (80048b8 <HAL_RCC_OscConfig+0x4b0>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ea:	f7fd fc57 	bl	8001f9c <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f2:	f7fd fc53 	bl	8001f9c <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e118      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	4b6c      	ldr	r3, [pc, #432]	; (80048b8 <HAL_RCC_OscConfig+0x4b0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d106      	bne.n	8004726 <HAL_RCC_OscConfig+0x31e>
 8004718:	4b66      	ldr	r3, [pc, #408]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	4a65      	ldr	r2, [pc, #404]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	6713      	str	r3, [r2, #112]	; 0x70
 8004724:	e01c      	b.n	8004760 <HAL_RCC_OscConfig+0x358>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b05      	cmp	r3, #5
 800472c:	d10c      	bne.n	8004748 <HAL_RCC_OscConfig+0x340>
 800472e:	4b61      	ldr	r3, [pc, #388]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	4a60      	ldr	r2, [pc, #384]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 8004734:	f043 0304 	orr.w	r3, r3, #4
 8004738:	6713      	str	r3, [r2, #112]	; 0x70
 800473a:	4b5e      	ldr	r3, [pc, #376]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	4a5d      	ldr	r2, [pc, #372]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	6713      	str	r3, [r2, #112]	; 0x70
 8004746:	e00b      	b.n	8004760 <HAL_RCC_OscConfig+0x358>
 8004748:	4b5a      	ldr	r3, [pc, #360]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	4a59      	ldr	r2, [pc, #356]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	6713      	str	r3, [r2, #112]	; 0x70
 8004754:	4b57      	ldr	r3, [pc, #348]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	4a56      	ldr	r2, [pc, #344]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 800475a:	f023 0304 	bic.w	r3, r3, #4
 800475e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d015      	beq.n	8004794 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7fd fc18 	bl	8001f9c <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476e:	e00a      	b.n	8004786 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004770:	f7fd fc14 	bl	8001f9c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	; 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e0d7      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004786:	4b4b      	ldr	r3, [pc, #300]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0ee      	beq.n	8004770 <HAL_RCC_OscConfig+0x368>
 8004792:	e014      	b.n	80047be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7fd fc02 	bl	8001f9c <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800479a:	e00a      	b.n	80047b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800479c:	f7fd fbfe 	bl	8001f9c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e0c1      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b2:	4b40      	ldr	r3, [pc, #256]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1ee      	bne.n	800479c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d105      	bne.n	80047d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c4:	4b3b      	ldr	r3, [pc, #236]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	4a3a      	ldr	r2, [pc, #232]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 80047ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80ad 	beq.w	8004934 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047da:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d060      	beq.n	80048a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d145      	bne.n	800487a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ee:	4b33      	ldr	r3, [pc, #204]	; (80048bc <HAL_RCC_OscConfig+0x4b4>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f4:	f7fd fbd2 	bl	8001f9c <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fd fbce 	bl	8001f9c <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e093      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	019b      	lsls	r3, r3, #6
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	3b01      	subs	r3, #1
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	061b      	lsls	r3, r3, #24
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	071b      	lsls	r3, r3, #28
 8004846:	491b      	ldr	r1, [pc, #108]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800484c:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <HAL_RCC_OscConfig+0x4b4>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fd fba3 	bl	8001f9c <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485a:	f7fd fb9f 	bl	8001f9c <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e064      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486c:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x452>
 8004878:	e05c      	b.n	8004934 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487a:	4b10      	ldr	r3, [pc, #64]	; (80048bc <HAL_RCC_OscConfig+0x4b4>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fd fb8c 	bl	8001f9c <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004888:	f7fd fb88 	bl	8001f9c <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e04d      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_RCC_OscConfig+0x4ac>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x480>
 80048a6:	e045      	b.n	8004934 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d107      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e040      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40007000 	.word	0x40007000
 80048bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048c0:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <HAL_RCC_OscConfig+0x538>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d030      	beq.n	8004930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d129      	bne.n	8004930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d122      	bne.n	8004930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048f0:	4013      	ands	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d119      	bne.n	8004930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	3b01      	subs	r3, #1
 800490a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d10f      	bne.n	8004930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d107      	bne.n	8004930 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d001      	beq.n	8004934 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40023800 	.word	0x40023800

08004944 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e066      	b.n	8004a28 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	7f5b      	ldrb	r3, [r3, #29]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd f88c 	bl	8001a88 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	22ca      	movs	r2, #202	; 0xca
 800497c:	625a      	str	r2, [r3, #36]	; 0x24
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2253      	movs	r2, #83	; 0x53
 8004984:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f998 	bl	8004cbc <RTC_EnterInitMode>
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d12c      	bne.n	80049f0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6899      	ldr	r1, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68d2      	ldr	r2, [r2, #12]
 80049d0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6919      	ldr	r1, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	041a      	lsls	r2, r3, #16
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f99f 	bl	8004d2a <RTC_ExitInitMode>
 80049ec:	4603      	mov	r3, r0
 80049ee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d113      	bne.n	8004a1e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	22ff      	movs	r2, #255	; 0xff
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a30:	b590      	push	{r4, r7, lr}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	7f1b      	ldrb	r3, [r3, #28]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_RTC_SetTime+0x1c>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e087      	b.n	8004b5c <HAL_RTC_SetTime+0x12c>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2202      	movs	r2, #2
 8004a56:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d126      	bne.n	8004aac <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f97c 	bl	8004d74 <RTC_ByteToBcd2>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	785b      	ldrb	r3, [r3, #1]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 f975 	bl	8004d74 <RTC_ByteToBcd2>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a8e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	789b      	ldrb	r3, [r3, #2]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 f96d 	bl	8004d74 <RTC_ByteToBcd2>
 8004a9a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a9c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	78db      	ldrb	r3, [r3, #3]
 8004aa4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	e018      	b.n	8004ade <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2200      	movs	r2, #0
 8004abe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	785b      	ldrb	r3, [r3, #1]
 8004aca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004acc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004ad2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	78db      	ldrb	r3, [r3, #3]
 8004ad8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	22ca      	movs	r2, #202	; 0xca
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2253      	movs	r2, #83	; 0x53
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f8e4 	bl	8004cbc <RTC_EnterInitMode>
 8004af4:	4603      	mov	r3, r0
 8004af6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004af8:	7cfb      	ldrb	r3, [r7, #19]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d120      	bne.n	8004b40 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004b08:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004b0c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6899      	ldr	r1, [r3, #8]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f8f7 	bl	8004d2a <RTC_ExitInitMode>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004b40:	7cfb      	ldrb	r3, [r7, #19]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	22ff      	movs	r2, #255	; 0xff
 8004b52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	771a      	strb	r2, [r3, #28]

  return status;
 8004b5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd90      	pop	{r4, r7, pc}

08004b64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b64:	b590      	push	{r4, r7, lr}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	7f1b      	ldrb	r3, [r3, #28]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_RTC_SetDate+0x1c>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e071      	b.n	8004c64 <HAL_RTC_SetDate+0x100>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10e      	bne.n	8004bb0 <HAL_RTC_SetDate+0x4c>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	785b      	ldrb	r3, [r3, #1]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d008      	beq.n	8004bb0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	785b      	ldrb	r3, [r3, #1]
 8004ba2:	f023 0310 	bic.w	r3, r3, #16
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	330a      	adds	r3, #10
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d11c      	bne.n	8004bf0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	78db      	ldrb	r3, [r3, #3]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f8da 	bl	8004d74 <RTC_ByteToBcd2>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	785b      	ldrb	r3, [r3, #1]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f8d3 	bl	8004d74 <RTC_ByteToBcd2>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bd2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	789b      	ldrb	r3, [r3, #2]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 f8cb 	bl	8004d74 <RTC_ByteToBcd2>
 8004bde:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004be0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e00e      	b.n	8004c0e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	78db      	ldrb	r3, [r3, #3]
 8004bf4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004bfc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c02:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	22ca      	movs	r2, #202	; 0xca
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2253      	movs	r2, #83	; 0x53
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f84c 	bl	8004cbc <RTC_EnterInitMode>
 8004c24:	4603      	mov	r3, r0
 8004c26:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004c28:	7cfb      	ldrb	r3, [r7, #19]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10c      	bne.n	8004c48 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c3c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f873 	bl	8004d2a <RTC_ExitInitMode>
 8004c44:	4603      	mov	r3, r0
 8004c46:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	22ff      	movs	r2, #255	; 0xff
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	771a      	strb	r2, [r3, #28]

  return status;
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd90      	pop	{r4, r7, pc}

08004c6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c86:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c88:	f7fd f988 	bl	8001f9c <HAL_GetTick>
 8004c8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c8e:	e009      	b.n	8004ca4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c90:	f7fd f984 	bl	8001f9c <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e007      	b.n	8004cb4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0ee      	beq.n	8004c90 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d122      	bne.n	8004d20 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ce8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cea:	f7fd f957 	bl	8001f9c <HAL_GetTick>
 8004cee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004cf0:	e00c      	b.n	8004d0c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cf2:	f7fd f953 	bl	8001f9c <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d00:	d904      	bls.n	8004d0c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2204      	movs	r2, #4
 8004d06:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <RTC_EnterInitMode+0x64>
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d1e8      	bne.n	8004cf2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d44:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff89 	bl	8004c6c <HAL_RTC_WaitForSynchro>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d004      	beq.n	8004d6a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2204      	movs	r2, #4
 8004d64:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004d82:	e005      	b.n	8004d90 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	3301      	adds	r3, #1
 8004d88:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	3b0a      	subs	r3, #10
 8004d8e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	2b09      	cmp	r3, #9
 8004d94:	d8f6      	bhi.n	8004d84 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	b2db      	uxtb	r3, r3
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e022      	b.n	8004e06 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d105      	bne.n	8004dd8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fc fe82 	bl	8001adc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2203      	movs	r2, #3
 8004ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f815 	bl	8004e10 <HAL_SD_InitCard>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e00a      	b.n	8004e06 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004e10:	b5b0      	push	{r4, r5, r7, lr}
 8004e12:	b08e      	sub	sp, #56	; 0x38
 8004e14:	af04      	add	r7, sp, #16
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004e2c:	2376      	movs	r3, #118	; 0x76
 8004e2e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681d      	ldr	r5, [r3, #0]
 8004e34:	466c      	mov	r4, sp
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e42:	f107 0308 	add.w	r3, r7, #8
 8004e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f001 fc8f 	bl	800676c <SDIO_Init>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e04f      	b.n	8004f00 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004e60:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <HAL_SD_InitCard+0xf8>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f001 fcc7 	bl	80067fe <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004e70:	4b25      	ldr	r3, [pc, #148]	; (8004f08 <HAL_SD_InitCard+0xf8>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004e76:	2002      	movs	r0, #2
 8004e78:	f7fd f89c 	bl	8001fb4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 f857 	bl	8005f30 <SD_PowerON>
 8004e82:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e02e      	b.n	8004f00 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 ff76 	bl	8005d94 <SD_InitCard>
 8004ea8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00b      	beq.n	8004ec8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e01b      	b.n	8004f00 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f001 fd26 	bl	8006922 <SDMMC_CmdBlockLength>
 8004ed6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00f      	beq.n	8004efe <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <HAL_SD_InitCard+0xfc>)
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3728      	adds	r7, #40	; 0x28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bdb0      	pop	{r4, r5, r7, pc}
 8004f08:	422580a0 	.word	0x422580a0
 8004f0c:	004005ff 	.word	0x004005ff

08004f10 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b092      	sub	sp, #72	; 0x48
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004f1e:	f7fd f83d 	bl	8001f9c <HAL_GetTick>
 8004f22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d107      	bne.n	8004f42 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e1bd      	b.n	80052be <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	f040 81b0 	bne.w	80052b0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	441a      	add	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d907      	bls.n	8004f74 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e1a4      	b.n	80052be <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2203      	movs	r2, #3
 8004f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2200      	movs	r2, #0
 8004f82:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d002      	beq.n	8004f92 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	025b      	lsls	r3, r3, #9
 8004f90:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f92:	f04f 33ff 	mov.w	r3, #4294967295
 8004f96:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	025b      	lsls	r3, r3, #9
 8004f9c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004f9e:	2390      	movs	r3, #144	; 0x90
 8004fa0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004faa:	2301      	movs	r3, #1
 8004fac:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f107 0214 	add.w	r2, r7, #20
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f001 fc86 	bl	80068ca <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d90a      	bls.n	8004fda <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f001 fcea 	bl	80069aa <SDMMC_CmdReadMultiBlock>
 8004fd6:	6478      	str	r0, [r7, #68]	; 0x44
 8004fd8:	e009      	b.n	8004fee <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f001 fcbd 	bl	8006966 <SDMMC_CmdReadSingleBlock>
 8004fec:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d012      	beq.n	800501a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a7a      	ldr	r2, [pc, #488]	; (80051e4 <HAL_SD_ReadBlocks+0x2d4>)
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005002:	431a      	orrs	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e151      	b.n	80052be <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800501e:	e061      	b.n	80050e4 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d03c      	beq.n	80050a8 <HAL_SD_ReadBlocks+0x198>
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d039      	beq.n	80050a8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005034:	2300      	movs	r3, #0
 8005036:	643b      	str	r3, [r7, #64]	; 0x40
 8005038:	e033      	b.n	80050a2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f001 fbbf 	bl	80067c2 <SDIO_ReadFIFO>
 8005044:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	b2da      	uxtb	r2, r3
 800504a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800504e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005050:	3301      	adds	r3, #1
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005056:	3b01      	subs	r3, #1
 8005058:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	b2da      	uxtb	r2, r3
 8005060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005062:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005066:	3301      	adds	r3, #1
 8005068:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	3b01      	subs	r3, #1
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	0c1b      	lsrs	r3, r3, #16
 8005074:	b2da      	uxtb	r2, r3
 8005076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005078:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800507a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507c:	3301      	adds	r3, #1
 800507e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005082:	3b01      	subs	r3, #1
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005088:	0e1b      	lsrs	r3, r3, #24
 800508a:	b2da      	uxtb	r2, r3
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005092:	3301      	adds	r3, #1
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005098:	3b01      	subs	r3, #1
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800509c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800509e:	3301      	adds	r3, #1
 80050a0:	643b      	str	r3, [r7, #64]	; 0x40
 80050a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a4:	2b07      	cmp	r3, #7
 80050a6:	d9c8      	bls.n	800503a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80050a8:	f7fc ff78 	bl	8001f9c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d902      	bls.n	80050be <HAL_SD_ReadBlocks+0x1ae>
 80050b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d112      	bne.n	80050e4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a48      	ldr	r2, [pc, #288]	; (80051e4 <HAL_SD_ReadBlocks+0x2d4>)
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e0ec      	b.n	80052be <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ea:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d096      	beq.n	8005020 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d022      	beq.n	8005146 <HAL_SD_ReadBlocks+0x236>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d91f      	bls.n	8005146 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	2b03      	cmp	r3, #3
 800510c:	d01b      	beq.n	8005146 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f001 fcb0 	bl	8006a78 <SDMMC_CmdStopTransfer>
 8005118:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800511a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a2f      	ldr	r2, [pc, #188]	; (80051e4 <HAL_SD_ReadBlocks+0x2d4>)
 8005126:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800512e:	431a      	orrs	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e0bb      	b.n	80052be <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d012      	beq.n	800517a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a22      	ldr	r2, [pc, #136]	; (80051e4 <HAL_SD_ReadBlocks+0x2d4>)
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	f043 0208 	orr.w	r2, r3, #8
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e0a1      	b.n	80052be <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d012      	beq.n	80051ae <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <HAL_SD_ReadBlocks+0x2d4>)
 800518e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	f043 0202 	orr.w	r2, r3, #2
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e087      	b.n	80052be <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d064      	beq.n	8005286 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <HAL_SD_ReadBlocks+0x2d4>)
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e06d      	b.n	80052be <HAL_SD_ReadBlocks+0x3ae>
 80051e2:	bf00      	nop
 80051e4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f001 fae8 	bl	80067c2 <SDIO_ReadFIFO>
 80051f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fe:	3301      	adds	r3, #1
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005204:	3b01      	subs	r3, #1
 8005206:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	b2da      	uxtb	r2, r3
 800520e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005210:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005214:	3301      	adds	r3, #1
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800521a:	3b01      	subs	r3, #1
 800521c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	b2da      	uxtb	r2, r3
 8005224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005226:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522a:	3301      	adds	r3, #1
 800522c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800522e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005230:	3b01      	subs	r3, #1
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	0e1b      	lsrs	r3, r3, #24
 8005238:	b2da      	uxtb	r2, r3
 800523a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800523e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005240:	3301      	adds	r3, #1
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005246:	3b01      	subs	r3, #1
 8005248:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800524a:	f7fc fea7 	bl	8001f9c <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005256:	429a      	cmp	r2, r3
 8005258:	d902      	bls.n	8005260 <HAL_SD_ReadBlocks+0x350>
 800525a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800525c:	2b00      	cmp	r3, #0
 800525e:	d112      	bne.n	8005286 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <HAL_SD_ReadBlocks+0x3b8>)
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e01b      	b.n	80052be <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_SD_ReadBlocks+0x38a>
 8005294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1a6      	bne.n	80051e8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f240 523a 	movw	r2, #1338	; 0x53a
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e006      	b.n	80052be <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3748      	adds	r7, #72	; 0x48
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	004005ff 	.word	0x004005ff

080052cc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b092      	sub	sp, #72	; 0x48
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80052da:	f7fc fe5f 	bl	8001f9c <HAL_GetTick>
 80052de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d107      	bne.n	80052fe <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e165      	b.n	80055ca <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	f040 8158 	bne.w	80055bc <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	441a      	add	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531c:	429a      	cmp	r2, r3
 800531e:	d907      	bls.n	8005330 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e14c      	b.n	80055ca <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2203      	movs	r2, #3
 8005334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2200      	movs	r2, #0
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005344:	2b01      	cmp	r3, #1
 8005346:	d002      	beq.n	800534e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534a:	025b      	lsls	r3, r3, #9
 800534c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800534e:	f04f 33ff 	mov.w	r3, #4294967295
 8005352:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	025b      	lsls	r3, r3, #9
 8005358:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800535a:	2390      	movs	r3, #144	; 0x90
 800535c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800535e:	2300      	movs	r3, #0
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005362:	2300      	movs	r3, #0
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005366:	2301      	movs	r3, #1
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f107 0218 	add.w	r2, r7, #24
 8005372:	4611      	mov	r1, r2
 8005374:	4618      	mov	r0, r3
 8005376:	f001 faa8 	bl	80068ca <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d90a      	bls.n	8005396 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800538c:	4618      	mov	r0, r3
 800538e:	f001 fb50 	bl	8006a32 <SDMMC_CmdWriteMultiBlock>
 8005392:	6478      	str	r0, [r7, #68]	; 0x44
 8005394:	e009      	b.n	80053aa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2210      	movs	r2, #16
 800539a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 fb23 	bl	80069ee <SDMMC_CmdWriteSingleBlock>
 80053a8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80053aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d012      	beq.n	80053d6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a87      	ldr	r2, [pc, #540]	; (80055d4 <HAL_SD_WriteBlocks+0x308>)
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053be:	431a      	orrs	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0f9      	b.n	80055ca <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80053da:	e065      	b.n	80054a8 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d040      	beq.n	800546c <HAL_SD_WriteBlocks+0x1a0>
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d03d      	beq.n	800546c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80053f0:	2300      	movs	r3, #0
 80053f2:	643b      	str	r3, [r7, #64]	; 0x40
 80053f4:	e037      	b.n	8005466 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80053f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80053fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fe:	3301      	adds	r3, #1
 8005400:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005404:	3b01      	subs	r3, #1
 8005406:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	021a      	lsls	r2, r3, #8
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005416:	3301      	adds	r3, #1
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800541a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541c:	3b01      	subs	r3, #1
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	041a      	lsls	r2, r3, #16
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542e:	3301      	adds	r3, #1
 8005430:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005434:	3b01      	subs	r3, #1
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	061a      	lsls	r2, r3, #24
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	3301      	adds	r3, #1
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800544a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544c:	3b01      	subs	r3, #1
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f107 0214 	add.w	r2, r7, #20
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f001 f9be 	bl	80067dc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005462:	3301      	adds	r3, #1
 8005464:	643b      	str	r3, [r7, #64]	; 0x40
 8005466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005468:	2b07      	cmp	r3, #7
 800546a:	d9c4      	bls.n	80053f6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800546c:	f7fc fd96 	bl	8001f9c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005478:	429a      	cmp	r2, r3
 800547a:	d902      	bls.n	8005482 <HAL_SD_WriteBlocks+0x1b6>
 800547c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547e:	2b00      	cmp	r3, #0
 8005480:	d112      	bne.n	80054a8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a53      	ldr	r2, [pc, #332]	; (80055d4 <HAL_SD_WriteBlocks+0x308>)
 8005488:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005490:	431a      	orrs	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e090      	b.n	80055ca <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ae:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d092      	beq.n	80053dc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d022      	beq.n	800550a <HAL_SD_WriteBlocks+0x23e>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d91f      	bls.n	800550a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d01b      	beq.n	800550a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 face 	bl	8006a78 <SDMMC_CmdStopTransfer>
 80054dc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80054de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d012      	beq.n	800550a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a3a      	ldr	r2, [pc, #232]	; (80055d4 <HAL_SD_WriteBlocks+0x308>)
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f2:	431a      	orrs	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e05f      	b.n	80055ca <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d012      	beq.n	800553e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a2d      	ldr	r2, [pc, #180]	; (80055d4 <HAL_SD_WriteBlocks+0x308>)
 800551e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	f043 0208 	orr.w	r2, r3, #8
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e045      	b.n	80055ca <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d012      	beq.n	8005572 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a20      	ldr	r2, [pc, #128]	; (80055d4 <HAL_SD_WriteBlocks+0x308>)
 8005552:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	f043 0202 	orr.w	r2, r3, #2
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e02b      	b.n	80055ca <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	d012      	beq.n	80055a6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a13      	ldr	r2, [pc, #76]	; (80055d4 <HAL_SD_WriteBlocks+0x308>)
 8005586:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	f043 0210 	orr.w	r2, r3, #16
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e011      	b.n	80055ca <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	e006      	b.n	80055ca <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
  }
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3748      	adds	r7, #72	; 0x48
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	004005ff 	.word	0x004005ff

080055d8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <HAL_SD_IRQHandler+0x2e>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fd4c 	bl	800609c <SD_Read_IT>
 8005604:	e155      	b.n	80058b2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 808f 	beq.w	8005734 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800561e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800562e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005632:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d039      	beq.n	80056c2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <HAL_SD_IRQHandler+0x8a>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d011      	beq.n	8005686 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f001 fa06 	bl	8006a78 <SDMMC_CmdStopTransfer>
 800566c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f91f 	bl	80058c4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f240 523a 	movw	r2, #1338	; 0x53a
 800568e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d104      	bne.n	80056b2 <HAL_SD_IRQHandler+0xda>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 fe2c 	bl	8007310 <HAL_SD_RxCpltCallback>
 80056b8:	e0fb      	b.n	80058b2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f001 fe1e 	bl	80072fc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80056c0:	e0f7      	b.n	80058b2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80f2 	beq.w	80058b2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d011      	beq.n	80056fc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 f9cb 	bl	8006a78 <SDMMC_CmdStopTransfer>
 80056e2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d008      	beq.n	80056fc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f8e4 	bl	80058c4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	f040 80d5 	bne.w	80058b2 <HAL_SD_IRQHandler+0x2da>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	f040 80cf 	bne.w	80058b2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0208 	bic.w	r2, r2, #8
 8005722:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 fde5 	bl	80072fc <HAL_SD_TxCpltCallback>
}
 8005732:	e0be      	b.n	80058b2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d008      	beq.n	8005754 <HAL_SD_IRQHandler+0x17c>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fcf6 	bl	800613e <SD_Write_IT>
 8005752:	e0ae      	b.n	80058b2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 80a7 	beq.w	80058b2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	f043 0202 	orr.w	r2, r3, #2
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	f043 0208 	orr.w	r2, r3, #8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	f043 0220 	orr.w	r2, r3, #32
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	f043 0210 	orr.w	r2, r3, #16
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80057d4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80057e4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 f944 	bl	8006a78 <SDMMC_CmdStopTransfer>
 80057f0:	4602      	mov	r2, r0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f855 	bl	80058c4 <HAL_SD_ErrorCallback>
}
 800581a:	e04a      	b.n	80058b2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005822:	2b00      	cmp	r3, #0
 8005824:	d045      	beq.n	80058b2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	d104      	bne.n	800583a <HAL_SD_IRQHandler+0x262>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b00      	cmp	r3, #0
 8005838:	d011      	beq.n	800585e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583e:	4a1f      	ldr	r2, [pc, #124]	; (80058bc <HAL_SD_IRQHandler+0x2e4>)
 8005840:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	4618      	mov	r0, r3
 8005848:	f7fd fac8 	bl	8002ddc <HAL_DMA_Abort_IT>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d02f      	beq.n	80058b2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fa2e 	bl	8005cb8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800585c:	e029      	b.n	80058b2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <HAL_SD_IRQHandler+0x29a>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d011      	beq.n	8005896 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	4a12      	ldr	r2, [pc, #72]	; (80058c0 <HAL_SD_IRQHandler+0x2e8>)
 8005878:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	4618      	mov	r0, r3
 8005880:	f7fd faac 	bl	8002ddc <HAL_DMA_Abort_IT>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d013      	beq.n	80058b2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fa49 	bl	8005d26 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005894:	e00d      	b.n	80058b2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f001 fd1c 	bl	80072e8 <HAL_SD_AbortCallback>
}
 80058b0:	e7ff      	b.n	80058b2 <HAL_SD_IRQHandler+0x2da>
 80058b2:	bf00      	nop
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	08005cb9 	.word	0x08005cb9
 80058c0:	08005d27 	.word	0x08005d27

080058c4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e6:	0f9b      	lsrs	r3, r3, #30
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f2:	0e9b      	lsrs	r3, r3, #26
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005904:	0e1b      	lsrs	r3, r3, #24
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	b2da      	uxtb	r2, r3
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005916:	0c1b      	lsrs	r3, r3, #16
 8005918:	b2da      	uxtb	r2, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	b2da      	uxtb	r2, r3
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800592e:	b2da      	uxtb	r2, r3
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005938:	0d1b      	lsrs	r3, r3, #20
 800593a:	b29a      	uxth	r2, r3
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	b2da      	uxtb	r2, r3
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005956:	0bdb      	lsrs	r3, r3, #15
 8005958:	b2db      	uxtb	r3, r3
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	b2da      	uxtb	r2, r3
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005968:	0b9b      	lsrs	r3, r3, #14
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	b2da      	uxtb	r2, r3
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800597a:	0b5b      	lsrs	r3, r3, #13
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	b2da      	uxtb	r2, r3
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800598c:	0b1b      	lsrs	r3, r3, #12
 800598e:	b2db      	uxtb	r3, r3
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	b2da      	uxtb	r2, r3
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2200      	movs	r2, #0
 800599e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d163      	bne.n	8005a70 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ac:	009a      	lsls	r2, r3, #2
 80059ae:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059b2:	4013      	ands	r3, r2
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80059b8:	0f92      	lsrs	r2, r2, #30
 80059ba:	431a      	orrs	r2, r3
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c4:	0edb      	lsrs	r3, r3, #27
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d6:	0e1b      	lsrs	r3, r3, #24
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e8:	0d5b      	lsrs	r3, r3, #21
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059fa:	0c9b      	lsrs	r3, r3, #18
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a0c:	0bdb      	lsrs	r3, r3, #15
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	7e1b      	ldrb	r3, [r3, #24]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	3302      	adds	r3, #2
 8005a30:	2201      	movs	r2, #1
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005a3a:	fb03 f202 	mul.w	r2, r3, r2
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	7a1b      	ldrb	r3, [r3, #8]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	409a      	lsls	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005a5c:	0a52      	lsrs	r2, r2, #9
 8005a5e:	fb03 f202 	mul.w	r2, r3, r2
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6c:	661a      	str	r2, [r3, #96]	; 0x60
 8005a6e:	e031      	b.n	8005ad4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d11d      	bne.n	8005ab4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a86:	0c1b      	lsrs	r3, r3, #16
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	3301      	adds	r3, #1
 8005a94:	029a      	lsls	r2, r3, #10
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	661a      	str	r2, [r3, #96]	; 0x60
 8005ab2:	e00f      	b.n	8005ad4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a58      	ldr	r2, [pc, #352]	; (8005c1c <HAL_SD_GetCardCSD+0x344>)
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e09d      	b.n	8005c10 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ad8:	0b9b      	lsrs	r3, r3, #14
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aea:	09db      	lsrs	r3, r3, #7
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	0fdb      	lsrs	r3, r3, #31
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b18:	0f5b      	lsrs	r3, r3, #29
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2a:	0e9b      	lsrs	r3, r3, #26
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	0d9b      	lsrs	r3, r3, #22
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	0d5b      	lsrs	r3, r3, #21
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6a:	0c1b      	lsrs	r3, r3, #16
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	0bdb      	lsrs	r3, r3, #15
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b92:	0b9b      	lsrs	r3, r3, #14
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba6:	0b5b      	lsrs	r3, r3, #13
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bba:	0b1b      	lsrs	r3, r3, #12
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bce:	0a9b      	lsrs	r3, r3, #10
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	0a1b      	lsrs	r3, r3, #8
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	004005ff 	.word	0x004005ff

08005c20 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005c84:	f107 030c 	add.w	r3, r7, #12
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f9de 	bl	800604c <SD_SendStatus>
 8005c90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	0a5b      	lsrs	r3, r3, #9
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005cae:	693b      	ldr	r3, [r7, #16]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f240 523a 	movw	r2, #1338	; 0x53a
 8005cce:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff ffd1 	bl	8005c78 <HAL_SD_GetCardState>
 8005cd6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b06      	cmp	r3, #6
 8005cea:	d002      	beq.n	8005cf2 <SD_DMATxAbort+0x3a>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d10a      	bne.n	8005d08 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 febe 	bl	8006a78 <SDMMC_CmdStopTransfer>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	431a      	orrs	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d103      	bne.n	8005d18 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f001 fae9 	bl	80072e8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005d16:	e002      	b.n	8005d1e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff fdd3 	bl	80058c4 <HAL_SD_ErrorCallback>
}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f240 523a 	movw	r2, #1338	; 0x53a
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f7ff ff9a 	bl	8005c78 <HAL_SD_GetCardState>
 8005d44:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b06      	cmp	r3, #6
 8005d58:	d002      	beq.n	8005d60 <SD_DMARxAbort+0x3a>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b05      	cmp	r3, #5
 8005d5e:	d10a      	bne.n	8005d76 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fe87 	bl	8006a78 <SDMMC_CmdStopTransfer>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	431a      	orrs	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f001 fab2 	bl	80072e8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005d84:	e002      	b.n	8005d8c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7ff fd9c 	bl	80058c4 <HAL_SD_ErrorCallback>
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005d94:	b5b0      	push	{r4, r5, r7, lr}
 8005d96:	b094      	sub	sp, #80	; 0x50
 8005d98:	af04      	add	r7, sp, #16
 8005d9a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 fd38 	bl	800681a <SDIO_GetPowerState>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d102      	bne.n	8005db6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005db0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005db4:	e0b8      	b.n	8005f28 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d02f      	beq.n	8005e1e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 ff1f 	bl	8006c06 <SDMMC_CmdSendCID>
 8005dc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <SD_InitCard+0x40>
    {
      return errorstate;
 8005dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd2:	e0a9      	b.n	8005f28 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fd62 	bl	80068a4 <SDIO_GetResponse>
 8005de0:	4602      	mov	r2, r0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2104      	movs	r1, #4
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fd59 	bl	80068a4 <SDIO_GetResponse>
 8005df2:	4602      	mov	r2, r0
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2108      	movs	r1, #8
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fd50 	bl	80068a4 <SDIO_GetResponse>
 8005e04:	4602      	mov	r2, r0
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	210c      	movs	r1, #12
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fd47 	bl	80068a4 <SDIO_GetResponse>
 8005e16:	4602      	mov	r2, r0
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d00d      	beq.n	8005e42 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f107 020e 	add.w	r2, r7, #14
 8005e2e:	4611      	mov	r1, r2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 ff25 	bl	8006c80 <SDMMC_CmdSetRelAdd>
 8005e36:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <SD_InitCard+0xae>
    {
      return errorstate;
 8005e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e40:	e072      	b.n	8005f28 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d036      	beq.n	8005eb8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005e4a:	89fb      	ldrh	r3, [r7, #14]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5a:	041b      	lsls	r3, r3, #16
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f000 feef 	bl	8006c42 <SDMMC_CmdSendCSD>
 8005e64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e6e:	e05b      	b.n	8005f28 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2100      	movs	r1, #0
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fd14 	bl	80068a4 <SDIO_GetResponse>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2104      	movs	r1, #4
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fd0b 	bl	80068a4 <SDIO_GetResponse>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2108      	movs	r1, #8
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fd02 	bl	80068a4 <SDIO_GetResponse>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	210c      	movs	r1, #12
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fcf9 	bl	80068a4 <SDIO_GetResponse>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2104      	movs	r1, #4
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fcf0 	bl	80068a4 <SDIO_GetResponse>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	0d1a      	lsrs	r2, r3, #20
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005ecc:	f107 0310 	add.w	r3, r7, #16
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff fd00 	bl	80058d8 <HAL_SD_GetCardCSD>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ede:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ee2:	e021      	b.n	8005f28 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6819      	ldr	r1, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eec:	041b      	lsls	r3, r3, #16
 8005eee:	2200      	movs	r2, #0
 8005ef0:	461c      	mov	r4, r3
 8005ef2:	4615      	mov	r5, r2
 8005ef4:	4622      	mov	r2, r4
 8005ef6:	462b      	mov	r3, r5
 8005ef8:	4608      	mov	r0, r1
 8005efa:	f000 fddf 	bl	8006abc <SDMMC_CmdSelDesel>
 8005efe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <SD_InitCard+0x176>
  {
    return errorstate;
 8005f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f08:	e00e      	b.n	8005f28 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681d      	ldr	r5, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	466c      	mov	r4, sp
 8005f12:	f103 0210 	add.w	r2, r3, #16
 8005f16:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f20:	4628      	mov	r0, r5
 8005f22:	f000 fc23 	bl	800676c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3740      	adds	r7, #64	; 0x40
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bdb0      	pop	{r4, r5, r7, pc}

08005f30 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	2300      	movs	r3, #0
 8005f42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fdda 	bl	8006b02 <SDMMC_CmdGoIdleState>
 8005f4e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	e072      	b.n	8006040 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fded 	bl	8006b3e <SDMMC_CmdOperCond>
 8005f64:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00d      	beq.n	8005f88 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fdc3 	bl	8006b02 <SDMMC_CmdGoIdleState>
 8005f7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d004      	beq.n	8005f8e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	e05b      	b.n	8006040 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d137      	bne.n	8006006 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fded 	bl	8006b7c <SDMMC_CmdAppCommand>
 8005fa2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d02d      	beq.n	8006006 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005faa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005fae:	e047      	b.n	8006040 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fde0 	bl	8006b7c <SDMMC_CmdAppCommand>
 8005fbc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <SD_PowerON+0x98>
    {
      return errorstate;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	e03b      	b.n	8006040 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	491e      	ldr	r1, [pc, #120]	; (8006048 <SD_PowerON+0x118>)
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fdf6 	bl	8006bc0 <SDMMC_CmdAppOperCommand>
 8005fd4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005fe0:	e02e      	b.n	8006040 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fc5b 	bl	80068a4 <SDIO_GetResponse>
 8005fee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	0fdb      	lsrs	r3, r3, #31
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <SD_PowerON+0xcc>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e000      	b.n	8005ffe <SD_PowerON+0xce>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	613b      	str	r3, [r7, #16]

    count++;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	3301      	adds	r3, #1
 8006004:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800600c:	4293      	cmp	r3, r2
 800600e:	d802      	bhi.n	8006016 <SD_PowerON+0xe6>
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0cc      	beq.n	8005fb0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800601c:	4293      	cmp	r3, r2
 800601e:	d902      	bls.n	8006026 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006024:	e00c      	b.n	8006040 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	645a      	str	r2, [r3, #68]	; 0x44
 8006036:	e002      	b.n	800603e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	c1100000 	.word	0xc1100000

0800604c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d102      	bne.n	8006062 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800605c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006060:	e018      	b.n	8006094 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606a:	041b      	lsls	r3, r3, #16
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f000 fe27 	bl	8006cc2 <SDMMC_CmdSendStatus>
 8006074:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <SD_SendStatus+0x34>
  {
    return errorstate;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	e009      	b.n	8006094 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fc0c 	bl	80068a4 <SDIO_GetResponse>
 800608c:	4602      	mov	r2, r0
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d03f      	beq.n	8006136 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	e033      	b.n	8006124 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fb7e 	bl	80067c2 <SDIO_ReadFIFO>
 80060c6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	3b01      	subs	r3, #1
 80060da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	0a1b      	lsrs	r3, r3, #8
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3301      	adds	r3, #1
 80060ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	0c1b      	lsrs	r3, r3, #16
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3301      	adds	r3, #1
 8006100:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	3b01      	subs	r3, #1
 8006106:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	0e1b      	lsrs	r3, r3, #24
 800610c:	b2da      	uxtb	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	3b01      	subs	r3, #1
 800611c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	3301      	adds	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2b07      	cmp	r3, #7
 8006128:	d9c8      	bls.n	80060bc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006136:	bf00      	nop
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b086      	sub	sp, #24
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d043      	beq.n	80061e0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	e037      	b.n	80061ce <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3301      	adds	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3b01      	subs	r3, #1
 800616e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	021a      	lsls	r2, r3, #8
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4313      	orrs	r3, r2
 800617a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3301      	adds	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	3b01      	subs	r3, #1
 8006186:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	041a      	lsls	r2, r3, #16
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	4313      	orrs	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3301      	adds	r3, #1
 8006198:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	3b01      	subs	r3, #1
 800619e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	061a      	lsls	r2, r3, #24
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3301      	adds	r3, #1
 80061b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f107 0208 	add.w	r2, r7, #8
 80061c0:	4611      	mov	r1, r2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fb0a 	bl	80067dc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	3301      	adds	r3, #1
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b07      	cmp	r3, #7
 80061d2:	d9c4      	bls.n	800615e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80061e0:	bf00      	nop
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e03f      	b.n	800627a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fb fd14 	bl	8001c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2224      	movs	r2, #36	; 0x24
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800622a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f829 	bl	8006284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695a      	ldr	r2, [r3, #20]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006288:	b0c0      	sub	sp, #256	; 0x100
 800628a:	af00      	add	r7, sp, #0
 800628c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a0:	68d9      	ldr	r1, [r3, #12]
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	ea40 0301 	orr.w	r3, r0, r1
 80062ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062dc:	f021 010c 	bic.w	r1, r1, #12
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062ea:	430b      	orrs	r3, r1
 80062ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	6999      	ldr	r1, [r3, #24]
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	ea40 0301 	orr.w	r3, r0, r1
 800630a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b8f      	ldr	r3, [pc, #572]	; (8006550 <UART_SetConfig+0x2cc>)
 8006314:	429a      	cmp	r2, r3
 8006316:	d005      	beq.n	8006324 <UART_SetConfig+0xa0>
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4b8d      	ldr	r3, [pc, #564]	; (8006554 <UART_SetConfig+0x2d0>)
 8006320:	429a      	cmp	r2, r3
 8006322:	d104      	bne.n	800632e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006324:	f7fd fb02 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8006328:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800632c:	e003      	b.n	8006336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800632e:	f7fd fae9 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8006332:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006340:	f040 810c 	bne.w	800655c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006348:	2200      	movs	r2, #0
 800634a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800634e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006356:	4622      	mov	r2, r4
 8006358:	462b      	mov	r3, r5
 800635a:	1891      	adds	r1, r2, r2
 800635c:	65b9      	str	r1, [r7, #88]	; 0x58
 800635e:	415b      	adcs	r3, r3
 8006360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006366:	4621      	mov	r1, r4
 8006368:	eb12 0801 	adds.w	r8, r2, r1
 800636c:	4629      	mov	r1, r5
 800636e:	eb43 0901 	adc.w	r9, r3, r1
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800637e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006386:	4690      	mov	r8, r2
 8006388:	4699      	mov	r9, r3
 800638a:	4623      	mov	r3, r4
 800638c:	eb18 0303 	adds.w	r3, r8, r3
 8006390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006394:	462b      	mov	r3, r5
 8006396:	eb49 0303 	adc.w	r3, r9, r3
 800639a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800639e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063b2:	460b      	mov	r3, r1
 80063b4:	18db      	adds	r3, r3, r3
 80063b6:	653b      	str	r3, [r7, #80]	; 0x50
 80063b8:	4613      	mov	r3, r2
 80063ba:	eb42 0303 	adc.w	r3, r2, r3
 80063be:	657b      	str	r3, [r7, #84]	; 0x54
 80063c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063c8:	f7fa fbfe 	bl	8000bc8 <__aeabi_uldivmod>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4b61      	ldr	r3, [pc, #388]	; (8006558 <UART_SetConfig+0x2d4>)
 80063d2:	fba3 2302 	umull	r2, r3, r3, r2
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	011c      	lsls	r4, r3, #4
 80063da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063ec:	4642      	mov	r2, r8
 80063ee:	464b      	mov	r3, r9
 80063f0:	1891      	adds	r1, r2, r2
 80063f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80063f4:	415b      	adcs	r3, r3
 80063f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063fc:	4641      	mov	r1, r8
 80063fe:	eb12 0a01 	adds.w	sl, r2, r1
 8006402:	4649      	mov	r1, r9
 8006404:	eb43 0b01 	adc.w	fp, r3, r1
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800641c:	4692      	mov	sl, r2
 800641e:	469b      	mov	fp, r3
 8006420:	4643      	mov	r3, r8
 8006422:	eb1a 0303 	adds.w	r3, sl, r3
 8006426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800642a:	464b      	mov	r3, r9
 800642c:	eb4b 0303 	adc.w	r3, fp, r3
 8006430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006440:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006448:	460b      	mov	r3, r1
 800644a:	18db      	adds	r3, r3, r3
 800644c:	643b      	str	r3, [r7, #64]	; 0x40
 800644e:	4613      	mov	r3, r2
 8006450:	eb42 0303 	adc.w	r3, r2, r3
 8006454:	647b      	str	r3, [r7, #68]	; 0x44
 8006456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800645a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800645e:	f7fa fbb3 	bl	8000bc8 <__aeabi_uldivmod>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4611      	mov	r1, r2
 8006468:	4b3b      	ldr	r3, [pc, #236]	; (8006558 <UART_SetConfig+0x2d4>)
 800646a:	fba3 2301 	umull	r2, r3, r3, r1
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	2264      	movs	r2, #100	; 0x64
 8006472:	fb02 f303 	mul.w	r3, r2, r3
 8006476:	1acb      	subs	r3, r1, r3
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800647e:	4b36      	ldr	r3, [pc, #216]	; (8006558 <UART_SetConfig+0x2d4>)
 8006480:	fba3 2302 	umull	r2, r3, r3, r2
 8006484:	095b      	lsrs	r3, r3, #5
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800648c:	441c      	add	r4, r3
 800648e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006492:	2200      	movs	r2, #0
 8006494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006498:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800649c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064a0:	4642      	mov	r2, r8
 80064a2:	464b      	mov	r3, r9
 80064a4:	1891      	adds	r1, r2, r2
 80064a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80064a8:	415b      	adcs	r3, r3
 80064aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064b0:	4641      	mov	r1, r8
 80064b2:	1851      	adds	r1, r2, r1
 80064b4:	6339      	str	r1, [r7, #48]	; 0x30
 80064b6:	4649      	mov	r1, r9
 80064b8:	414b      	adcs	r3, r1
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064c8:	4659      	mov	r1, fp
 80064ca:	00cb      	lsls	r3, r1, #3
 80064cc:	4651      	mov	r1, sl
 80064ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064d2:	4651      	mov	r1, sl
 80064d4:	00ca      	lsls	r2, r1, #3
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	4603      	mov	r3, r0
 80064dc:	4642      	mov	r2, r8
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064e4:	464b      	mov	r3, r9
 80064e6:	460a      	mov	r2, r1
 80064e8:	eb42 0303 	adc.w	r3, r2, r3
 80064ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006504:	460b      	mov	r3, r1
 8006506:	18db      	adds	r3, r3, r3
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
 800650a:	4613      	mov	r3, r2
 800650c:	eb42 0303 	adc.w	r3, r2, r3
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800651a:	f7fa fb55 	bl	8000bc8 <__aeabi_uldivmod>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <UART_SetConfig+0x2d4>)
 8006524:	fba3 1302 	umull	r1, r3, r3, r2
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	2164      	movs	r1, #100	; 0x64
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	3332      	adds	r3, #50	; 0x32
 8006536:	4a08      	ldr	r2, [pc, #32]	; (8006558 <UART_SetConfig+0x2d4>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	f003 0207 	and.w	r2, r3, #7
 8006542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4422      	add	r2, r4
 800654a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800654c:	e105      	b.n	800675a <UART_SetConfig+0x4d6>
 800654e:	bf00      	nop
 8006550:	40011000 	.word	0x40011000
 8006554:	40011400 	.word	0x40011400
 8006558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800655c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006560:	2200      	movs	r2, #0
 8006562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006566:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800656a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800656e:	4642      	mov	r2, r8
 8006570:	464b      	mov	r3, r9
 8006572:	1891      	adds	r1, r2, r2
 8006574:	6239      	str	r1, [r7, #32]
 8006576:	415b      	adcs	r3, r3
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
 800657a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800657e:	4641      	mov	r1, r8
 8006580:	1854      	adds	r4, r2, r1
 8006582:	4649      	mov	r1, r9
 8006584:	eb43 0501 	adc.w	r5, r3, r1
 8006588:	f04f 0200 	mov.w	r2, #0
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	00eb      	lsls	r3, r5, #3
 8006592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006596:	00e2      	lsls	r2, r4, #3
 8006598:	4614      	mov	r4, r2
 800659a:	461d      	mov	r5, r3
 800659c:	4643      	mov	r3, r8
 800659e:	18e3      	adds	r3, r4, r3
 80065a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065a4:	464b      	mov	r3, r9
 80065a6:	eb45 0303 	adc.w	r3, r5, r3
 80065aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065ca:	4629      	mov	r1, r5
 80065cc:	008b      	lsls	r3, r1, #2
 80065ce:	4621      	mov	r1, r4
 80065d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065d4:	4621      	mov	r1, r4
 80065d6:	008a      	lsls	r2, r1, #2
 80065d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065dc:	f7fa faf4 	bl	8000bc8 <__aeabi_uldivmod>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4b60      	ldr	r3, [pc, #384]	; (8006768 <UART_SetConfig+0x4e4>)
 80065e6:	fba3 2302 	umull	r2, r3, r3, r2
 80065ea:	095b      	lsrs	r3, r3, #5
 80065ec:	011c      	lsls	r4, r3, #4
 80065ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006600:	4642      	mov	r2, r8
 8006602:	464b      	mov	r3, r9
 8006604:	1891      	adds	r1, r2, r2
 8006606:	61b9      	str	r1, [r7, #24]
 8006608:	415b      	adcs	r3, r3
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006610:	4641      	mov	r1, r8
 8006612:	1851      	adds	r1, r2, r1
 8006614:	6139      	str	r1, [r7, #16]
 8006616:	4649      	mov	r1, r9
 8006618:	414b      	adcs	r3, r1
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	f04f 0200 	mov.w	r2, #0
 8006620:	f04f 0300 	mov.w	r3, #0
 8006624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006628:	4659      	mov	r1, fp
 800662a:	00cb      	lsls	r3, r1, #3
 800662c:	4651      	mov	r1, sl
 800662e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006632:	4651      	mov	r1, sl
 8006634:	00ca      	lsls	r2, r1, #3
 8006636:	4610      	mov	r0, r2
 8006638:	4619      	mov	r1, r3
 800663a:	4603      	mov	r3, r0
 800663c:	4642      	mov	r2, r8
 800663e:	189b      	adds	r3, r3, r2
 8006640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006644:	464b      	mov	r3, r9
 8006646:	460a      	mov	r2, r1
 8006648:	eb42 0303 	adc.w	r3, r2, r3
 800664c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	67bb      	str	r3, [r7, #120]	; 0x78
 800665a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006668:	4649      	mov	r1, r9
 800666a:	008b      	lsls	r3, r1, #2
 800666c:	4641      	mov	r1, r8
 800666e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006672:	4641      	mov	r1, r8
 8006674:	008a      	lsls	r2, r1, #2
 8006676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800667a:	f7fa faa5 	bl	8000bc8 <__aeabi_uldivmod>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4b39      	ldr	r3, [pc, #228]	; (8006768 <UART_SetConfig+0x4e4>)
 8006684:	fba3 1302 	umull	r1, r3, r3, r2
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	2164      	movs	r1, #100	; 0x64
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	3332      	adds	r3, #50	; 0x32
 8006696:	4a34      	ldr	r2, [pc, #208]	; (8006768 <UART_SetConfig+0x4e4>)
 8006698:	fba2 2303 	umull	r2, r3, r2, r3
 800669c:	095b      	lsrs	r3, r3, #5
 800669e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066a2:	441c      	add	r4, r3
 80066a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a8:	2200      	movs	r2, #0
 80066aa:	673b      	str	r3, [r7, #112]	; 0x70
 80066ac:	677a      	str	r2, [r7, #116]	; 0x74
 80066ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066b2:	4642      	mov	r2, r8
 80066b4:	464b      	mov	r3, r9
 80066b6:	1891      	adds	r1, r2, r2
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	415b      	adcs	r3, r3
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066c2:	4641      	mov	r1, r8
 80066c4:	1851      	adds	r1, r2, r1
 80066c6:	6039      	str	r1, [r7, #0]
 80066c8:	4649      	mov	r1, r9
 80066ca:	414b      	adcs	r3, r1
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	f04f 0200 	mov.w	r2, #0
 80066d2:	f04f 0300 	mov.w	r3, #0
 80066d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066da:	4659      	mov	r1, fp
 80066dc:	00cb      	lsls	r3, r1, #3
 80066de:	4651      	mov	r1, sl
 80066e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066e4:	4651      	mov	r1, sl
 80066e6:	00ca      	lsls	r2, r1, #3
 80066e8:	4610      	mov	r0, r2
 80066ea:	4619      	mov	r1, r3
 80066ec:	4603      	mov	r3, r0
 80066ee:	4642      	mov	r2, r8
 80066f0:	189b      	adds	r3, r3, r2
 80066f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80066f4:	464b      	mov	r3, r9
 80066f6:	460a      	mov	r2, r1
 80066f8:	eb42 0303 	adc.w	r3, r2, r3
 80066fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	663b      	str	r3, [r7, #96]	; 0x60
 8006708:	667a      	str	r2, [r7, #100]	; 0x64
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006716:	4649      	mov	r1, r9
 8006718:	008b      	lsls	r3, r1, #2
 800671a:	4641      	mov	r1, r8
 800671c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006720:	4641      	mov	r1, r8
 8006722:	008a      	lsls	r2, r1, #2
 8006724:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006728:	f7fa fa4e 	bl	8000bc8 <__aeabi_uldivmod>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4b0d      	ldr	r3, [pc, #52]	; (8006768 <UART_SetConfig+0x4e4>)
 8006732:	fba3 1302 	umull	r1, r3, r3, r2
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	2164      	movs	r1, #100	; 0x64
 800673a:	fb01 f303 	mul.w	r3, r1, r3
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	3332      	adds	r3, #50	; 0x32
 8006744:	4a08      	ldr	r2, [pc, #32]	; (8006768 <UART_SetConfig+0x4e4>)
 8006746:	fba2 2303 	umull	r2, r3, r2, r3
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	f003 020f 	and.w	r2, r3, #15
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4422      	add	r2, r4
 8006758:	609a      	str	r2, [r3, #8]
}
 800675a:	bf00      	nop
 800675c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006760:	46bd      	mov	sp, r7
 8006762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006766:	bf00      	nop
 8006768:	51eb851f 	.word	0x51eb851f

0800676c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800676c:	b084      	sub	sp, #16
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	f107 001c 	add.w	r0, r7, #28
 800677a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006782:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006784:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006786:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800678a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800678e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006792:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006796:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80067a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	b004      	add	sp, #16
 80067c0:	4770      	bx	lr

080067c2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2203      	movs	r2, #3
 800680a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0303 	and.w	r3, r3, #3
}
 800682a:	4618      	mov	r0, r3
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006836:	b480      	push	{r7}
 8006838:	b085      	sub	sp, #20
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006854:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800685a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006860:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006870:	f023 030f 	bic.w	r3, r3, #15
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	b2db      	uxtb	r3, r3
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3314      	adds	r3, #20
 80068b2:	461a      	mov	r2, r3
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	4413      	add	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
}  
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80068f0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80068f6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80068fc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006914:	2300      	movs	r3, #0

}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b088      	sub	sp, #32
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006930:	2310      	movs	r3, #16
 8006932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006934:	2340      	movs	r3, #64	; 0x40
 8006936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800693c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006940:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006942:	f107 0308 	add.w	r3, r7, #8
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff ff74 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800694e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006952:	2110      	movs	r1, #16
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f9d7 	bl	8006d08 <SDMMC_GetCmdResp1>
 800695a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800695c:	69fb      	ldr	r3, [r7, #28]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3720      	adds	r7, #32
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b088      	sub	sp, #32
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006974:	2311      	movs	r3, #17
 8006976:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006978:	2340      	movs	r3, #64	; 0x40
 800697a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006984:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006986:	f107 0308 	add.w	r3, r7, #8
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff ff52 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	2111      	movs	r1, #17
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f9b5 	bl	8006d08 <SDMMC_GetCmdResp1>
 800699e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069a0:	69fb      	ldr	r3, [r7, #28]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3720      	adds	r7, #32
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b088      	sub	sp, #32
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80069b8:	2312      	movs	r3, #18
 80069ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069bc:	2340      	movs	r3, #64	; 0x40
 80069be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069c0:	2300      	movs	r3, #0
 80069c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069ca:	f107 0308 	add.w	r3, r7, #8
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff ff30 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80069d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069da:	2112      	movs	r1, #18
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f993 	bl	8006d08 <SDMMC_GetCmdResp1>
 80069e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069e4:	69fb      	ldr	r3, [r7, #28]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3720      	adds	r7, #32
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b088      	sub	sp, #32
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80069fc:	2318      	movs	r3, #24
 80069fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a00:	2340      	movs	r3, #64	; 0x40
 8006a02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff ff0e 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a1e:	2118      	movs	r1, #24
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f971 	bl	8006d08 <SDMMC_GetCmdResp1>
 8006a26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a28:	69fb      	ldr	r3, [r7, #28]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3720      	adds	r7, #32
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b088      	sub	sp, #32
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006a40:	2319      	movs	r3, #25
 8006a42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a44:	2340      	movs	r3, #64	; 0x40
 8006a46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a52:	f107 0308 	add.w	r3, r7, #8
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff feec 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a62:	2119      	movs	r1, #25
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f94f 	bl	8006d08 <SDMMC_GetCmdResp1>
 8006a6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006a84:	230c      	movs	r3, #12
 8006a86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a88:	2340      	movs	r3, #64	; 0x40
 8006a8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a96:	f107 0308 	add.w	r3, r7, #8
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff feca 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006aa2:	4a05      	ldr	r2, [pc, #20]	; (8006ab8 <SDMMC_CmdStopTransfer+0x40>)
 8006aa4:	210c      	movs	r1, #12
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f92e 	bl	8006d08 <SDMMC_GetCmdResp1>
 8006aac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006aae:	69fb      	ldr	r3, [r7, #28]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	05f5e100 	.word	0x05f5e100

08006abc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08a      	sub	sp, #40	; 0x28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006acc:	2307      	movs	r3, #7
 8006ace:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ad0:	2340      	movs	r3, #64	; 0x40
 8006ad2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006adc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ade:	f107 0310 	add.w	r3, r7, #16
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff fea6 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aee:	2107      	movs	r1, #7
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 f909 	bl	8006d08 <SDMMC_GetCmdResp1>
 8006af6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3728      	adds	r7, #40	; 0x28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b088      	sub	sp, #32
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006b12:	2300      	movs	r3, #0
 8006b14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b16:	2300      	movs	r3, #0
 8006b18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b20:	f107 0308 	add.w	r3, r7, #8
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff fe85 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fb23 	bl	8007178 <SDMMC_GetCmdError>
 8006b32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b34:	69fb      	ldr	r3, [r7, #28]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3720      	adds	r7, #32
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b088      	sub	sp, #32
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006b46:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006b4c:	2308      	movs	r3, #8
 8006b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b50:	2340      	movs	r3, #64	; 0x40
 8006b52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b5e:	f107 0308 	add.w	r3, r7, #8
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff fe66 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fab6 	bl	80070dc <SDMMC_GetCmdResp7>
 8006b70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b72:	69fb      	ldr	r3, [r7, #28]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3720      	adds	r7, #32
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006b8a:	2337      	movs	r3, #55	; 0x37
 8006b8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b8e:	2340      	movs	r3, #64	; 0x40
 8006b90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b9c:	f107 0308 	add.w	r3, r7, #8
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff fe47 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bac:	2137      	movs	r1, #55	; 0x37
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f8aa 	bl	8006d08 <SDMMC_GetCmdResp1>
 8006bb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bb6:	69fb      	ldr	r3, [r7, #28]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3720      	adds	r7, #32
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b088      	sub	sp, #32
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006bd6:	2329      	movs	r3, #41	; 0x29
 8006bd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bda:	2340      	movs	r3, #64	; 0x40
 8006bdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006be8:	f107 0308 	add.w	r3, r7, #8
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff fe21 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f9bd 	bl	8006f74 <SDMMC_GetCmdResp3>
 8006bfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3720      	adds	r7, #32
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b088      	sub	sp, #32
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006c12:	2302      	movs	r3, #2
 8006c14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006c16:	23c0      	movs	r3, #192	; 0xc0
 8006c18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c24:	f107 0308 	add.w	r3, r7, #8
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff fe03 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f957 	bl	8006ee4 <SDMMC_GetCmdResp2>
 8006c36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c38:	69fb      	ldr	r3, [r7, #28]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b088      	sub	sp, #32
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006c50:	2309      	movs	r3, #9
 8006c52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006c54:	23c0      	movs	r3, #192	; 0xc0
 8006c56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c62:	f107 0308 	add.w	r3, r7, #8
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff fde4 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f938 	bl	8006ee4 <SDMMC_GetCmdResp2>
 8006c74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c76:	69fb      	ldr	r3, [r7, #28]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3720      	adds	r7, #32
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c92:	2340      	movs	r3, #64	; 0x40
 8006c94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ca0:	f107 0308 	add.w	r3, r7, #8
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff fdc5 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	2103      	movs	r1, #3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f99d 	bl	8006ff0 <SDMMC_GetCmdResp6>
 8006cb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b088      	sub	sp, #32
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006cd0:	230d      	movs	r3, #13
 8006cd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cd4:	2340      	movs	r3, #64	; 0x40
 8006cd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ce2:	f107 0308 	add.w	r3, r7, #8
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff fda4 	bl	8006836 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf2:	210d      	movs	r1, #13
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f807 	bl	8006d08 <SDMMC_GetCmdResp1>
 8006cfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3720      	adds	r7, #32
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	460b      	mov	r3, r1
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006d16:	4b70      	ldr	r3, [pc, #448]	; (8006ed8 <SDMMC_GetCmdResp1+0x1d0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a70      	ldr	r2, [pc, #448]	; (8006edc <SDMMC_GetCmdResp1+0x1d4>)
 8006d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d20:	0a5a      	lsrs	r2, r3, #9
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	fb02 f303 	mul.w	r3, r2, r3
 8006d28:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	1e5a      	subs	r2, r3, #1
 8006d2e:	61fa      	str	r2, [r7, #28]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d38:	e0c9      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0ef      	beq.n	8006d2a <SDMMC_GetCmdResp1+0x22>
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1ea      	bne.n	8006d2a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d58:	f003 0304 	and.w	r3, r3, #4
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d004      	beq.n	8006d6a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2204      	movs	r2, #4
 8006d64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d66:	2304      	movs	r3, #4
 8006d68:	e0b1      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d004      	beq.n	8006d80 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e0a6      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	22c5      	movs	r2, #197	; 0xc5
 8006d84:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff fd7f 	bl	800688a <SDIO_GetCommandResponse>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	461a      	mov	r2, r3
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d001      	beq.n	8006d9a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e099      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff fd81 	bl	80068a4 <SDIO_GetResponse>
 8006da2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4b4e      	ldr	r3, [pc, #312]	; (8006ee0 <SDMMC_GetCmdResp1+0x1d8>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006dae:	2300      	movs	r3, #0
 8006db0:	e08d      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da02      	bge.n	8006dbe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dbc:	e087      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006dc8:	2340      	movs	r3, #64	; 0x40
 8006dca:	e080      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006dd6:	2380      	movs	r3, #128	; 0x80
 8006dd8:	e079      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006de8:	e071      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006df8:	e069      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e08:	e061      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e18:	e059      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e28:	e051      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e38:	e049      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006e44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e48:	e041      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e58:	e039      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e68:	e031      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006e74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e78:	e029      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006e84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e88:	e021      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006e94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e98:	e019      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ea4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ea8:	e011      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006eb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006eb8:	e009      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006ec4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006ec8:	e001      	b.n	8006ece <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3720      	adds	r7, #32
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000004 	.word	0x20000004
 8006edc:	10624dd3 	.word	0x10624dd3
 8006ee0:	fdffe008 	.word	0xfdffe008

08006ee4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006eec:	4b1f      	ldr	r3, [pc, #124]	; (8006f6c <SDMMC_GetCmdResp2+0x88>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <SDMMC_GetCmdResp2+0x8c>)
 8006ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef6:	0a5b      	lsrs	r3, r3, #9
 8006ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efc:	fb02 f303 	mul.w	r3, r2, r3
 8006f00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	1e5a      	subs	r2, r3, #1
 8006f06:	60fa      	str	r2, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f10:	e026      	b.n	8006f60 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0ef      	beq.n	8006f02 <SDMMC_GetCmdResp2+0x1e>
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1ea      	bne.n	8006f02 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d004      	beq.n	8006f42 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f3e:	2304      	movs	r3, #4
 8006f40:	e00e      	b.n	8006f60 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d004      	beq.n	8006f58 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e003      	b.n	8006f60 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	22c5      	movs	r2, #197	; 0xc5
 8006f5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	20000004 	.word	0x20000004
 8006f70:	10624dd3 	.word	0x10624dd3

08006f74 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f7c:	4b1a      	ldr	r3, [pc, #104]	; (8006fe8 <SDMMC_GetCmdResp3+0x74>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a1a      	ldr	r2, [pc, #104]	; (8006fec <SDMMC_GetCmdResp3+0x78>)
 8006f82:	fba2 2303 	umull	r2, r3, r2, r3
 8006f86:	0a5b      	lsrs	r3, r3, #9
 8006f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8c:	fb02 f303 	mul.w	r3, r2, r3
 8006f90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1e5a      	subs	r2, r3, #1
 8006f96:	60fa      	str	r2, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fa0:	e01b      	b.n	8006fda <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0ef      	beq.n	8006f92 <SDMMC_GetCmdResp3+0x1e>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1ea      	bne.n	8006f92 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d004      	beq.n	8006fd2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fce:	2304      	movs	r3, #4
 8006fd0:	e003      	b.n	8006fda <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	22c5      	movs	r2, #197	; 0xc5
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	20000004 	.word	0x20000004
 8006fec:	10624dd3 	.word	0x10624dd3

08006ff0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ffe:	4b35      	ldr	r3, [pc, #212]	; (80070d4 <SDMMC_GetCmdResp6+0xe4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a35      	ldr	r2, [pc, #212]	; (80070d8 <SDMMC_GetCmdResp6+0xe8>)
 8007004:	fba2 2303 	umull	r2, r3, r2, r3
 8007008:	0a5b      	lsrs	r3, r3, #9
 800700a:	f241 3288 	movw	r2, #5000	; 0x1388
 800700e:	fb02 f303 	mul.w	r3, r2, r3
 8007012:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	1e5a      	subs	r2, r3, #1
 8007018:	61fa      	str	r2, [r7, #28]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d102      	bne.n	8007024 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800701e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007022:	e052      	b.n	80070ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007028:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007030:	2b00      	cmp	r3, #0
 8007032:	d0ef      	beq.n	8007014 <SDMMC_GetCmdResp6+0x24>
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1ea      	bne.n	8007014 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2204      	movs	r2, #4
 800704e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007050:	2304      	movs	r3, #4
 8007052:	e03a      	b.n	80070ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b00      	cmp	r3, #0
 800705e:	d004      	beq.n	800706a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007066:	2301      	movs	r3, #1
 8007068:	e02f      	b.n	80070ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f7ff fc0d 	bl	800688a <SDIO_GetCommandResponse>
 8007070:	4603      	mov	r3, r0
 8007072:	461a      	mov	r2, r3
 8007074:	7afb      	ldrb	r3, [r7, #11]
 8007076:	4293      	cmp	r3, r2
 8007078:	d001      	beq.n	800707e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800707a:	2301      	movs	r3, #1
 800707c:	e025      	b.n	80070ca <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	22c5      	movs	r2, #197	; 0xc5
 8007082:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007084:	2100      	movs	r1, #0
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f7ff fc0c 	bl	80068a4 <SDIO_GetResponse>
 800708c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	0c1b      	lsrs	r3, r3, #16
 800709c:	b29a      	uxth	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e011      	b.n	80070ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80070b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070b4:	e009      	b.n	80070ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80070c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070c4:	e001      	b.n	80070ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80070c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3720      	adds	r7, #32
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000004 	.word	0x20000004
 80070d8:	10624dd3 	.word	0x10624dd3

080070dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070e4:	4b22      	ldr	r3, [pc, #136]	; (8007170 <SDMMC_GetCmdResp7+0x94>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a22      	ldr	r2, [pc, #136]	; (8007174 <SDMMC_GetCmdResp7+0x98>)
 80070ea:	fba2 2303 	umull	r2, r3, r2, r3
 80070ee:	0a5b      	lsrs	r3, r3, #9
 80070f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f4:	fb02 f303 	mul.w	r3, r2, r3
 80070f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	1e5a      	subs	r2, r3, #1
 80070fe:	60fa      	str	r2, [r7, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d102      	bne.n	800710a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007108:	e02c      	b.n	8007164 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0ef      	beq.n	80070fa <SDMMC_GetCmdResp7+0x1e>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1ea      	bne.n	80070fa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d004      	beq.n	800713a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2204      	movs	r2, #4
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007136:	2304      	movs	r3, #4
 8007138:	e014      	b.n	8007164 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d004      	beq.n	8007150 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800714c:	2301      	movs	r3, #1
 800714e:	e009      	b.n	8007164 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2240      	movs	r2, #64	; 0x40
 8007160:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007162:	2300      	movs	r3, #0
  
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	20000004 	.word	0x20000004
 8007174:	10624dd3 	.word	0x10624dd3

08007178 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007180:	4b11      	ldr	r3, [pc, #68]	; (80071c8 <SDMMC_GetCmdError+0x50>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a11      	ldr	r2, [pc, #68]	; (80071cc <SDMMC_GetCmdError+0x54>)
 8007186:	fba2 2303 	umull	r2, r3, r2, r3
 800718a:	0a5b      	lsrs	r3, r3, #9
 800718c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007190:	fb02 f303 	mul.w	r3, r2, r3
 8007194:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	1e5a      	subs	r2, r3, #1
 800719a:	60fa      	str	r2, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d102      	bne.n	80071a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071a4:	e009      	b.n	80071ba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0f1      	beq.n	8007196 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	22c5      	movs	r2, #197	; 0xc5
 80071b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	20000004 	.word	0x20000004
 80071cc:	10624dd3 	.word	0x10624dd3

080071d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80071d4:	4904      	ldr	r1, [pc, #16]	; (80071e8 <MX_FATFS_Init+0x18>)
 80071d6:	4805      	ldr	r0, [pc, #20]	; (80071ec <MX_FATFS_Init+0x1c>)
 80071d8:	f003 f9a8 	bl	800a52c <FATFS_LinkDriver>
 80071dc:	4603      	mov	r3, r0
 80071de:	461a      	mov	r2, r3
 80071e0:	4b03      	ldr	r3, [pc, #12]	; (80071f0 <MX_FATFS_Init+0x20>)
 80071e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80071e4:	bf00      	nop
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	2000237c 	.word	0x2000237c
 80071ec:	0800c690 	.word	0x0800c690
 80071f0:	20002378 	.word	0x20002378

080071f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80071f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800720e:	f000 f89e 	bl	800734e <BSP_SD_IsDetected>
 8007212:	4603      	mov	r3, r0
 8007214:	2b01      	cmp	r3, #1
 8007216:	d001      	beq.n	800721c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e005      	b.n	8007228 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800721c:	4804      	ldr	r0, [pc, #16]	; (8007230 <BSP_SD_Init+0x2c>)
 800721e:	f7fd fdc6 	bl	8004dae <HAL_SD_Init>
 8007222:	4603      	mov	r3, r0
 8007224:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007226:	79fb      	ldrb	r3, [r7, #7]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000158 	.word	0x20000158

08007234 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af02      	add	r7, sp, #8
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	68f9      	ldr	r1, [r7, #12]
 8007250:	4806      	ldr	r0, [pc, #24]	; (800726c <BSP_SD_ReadBlocks+0x38>)
 8007252:	f7fd fe5d 	bl	8004f10 <HAL_SD_ReadBlocks>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20000158 	.word	0x20000158

08007270 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af02      	add	r7, sp, #8
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	4806      	ldr	r0, [pc, #24]	; (80072a8 <BSP_SD_WriteBlocks+0x38>)
 800728e:	f7fe f81d 	bl	80052cc <HAL_SD_WriteBlocks>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800729c:	7dfb      	ldrb	r3, [r7, #23]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000158 	.word	0x20000158

080072ac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80072b0:	4805      	ldr	r0, [pc, #20]	; (80072c8 <BSP_SD_GetCardState+0x1c>)
 80072b2:	f7fe fce1 	bl	8005c78 <HAL_SD_GetCardState>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	bf14      	ite	ne
 80072bc:	2301      	movne	r3, #1
 80072be:	2300      	moveq	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000158 	.word	0x20000158

080072cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4803      	ldr	r0, [pc, #12]	; (80072e4 <BSP_SD_GetCardInfo+0x18>)
 80072d8:	f7fe fca2 	bl	8005c20 <HAL_SD_GetCardInfo>
}
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000158 	.word	0x20000158

080072e8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80072f0:	f000 f818 	bl	8007324 <BSP_SD_AbortCallback>
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007304:	f000 f815 	bl	8007332 <BSP_SD_WriteCpltCallback>
}
 8007308:	bf00      	nop
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007318:	f000 f812 	bl	8007340 <BSP_SD_ReadCpltCallback>
}
 800731c:	bf00      	nop
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0

}
 8007328:	bf00      	nop
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8007332:	b480      	push	{r7}
 8007334:	af00      	add	r7, sp, #0

}
 8007336:	bf00      	nop
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0

}
 8007344:	bf00      	nop
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007354:	2301      	movs	r3, #1
 8007356:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007358:	f000 f80c 	bl	8007374 <BSP_PlatformIsDetected>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007362:	2300      	movs	r3, #0
 8007364:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007366:	79fb      	ldrb	r3, [r7, #7]
 8007368:	b2db      	uxtb	r3, r3
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
	...

08007374 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800737a:	2301      	movs	r3, #1
 800737c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800737e:	2102      	movs	r1, #2
 8007380:	4806      	ldr	r0, [pc, #24]	; (800739c <BSP_PlatformIsDetected+0x28>)
 8007382:	f7fc f94b 	bl	800361c <HAL_GPIO_ReadPin>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800738c:	2300      	movs	r3, #0
 800738e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007390:	79fb      	ldrb	r3, [r7, #7]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	40020800 	.word	0x40020800

080073a0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80073aa:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <SD_CheckStatus+0x38>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80073b0:	f7ff ff7c 	bl	80072ac <BSP_SD_GetCardState>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d107      	bne.n	80073ca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80073ba:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <SD_CheckStatus+0x38>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	f023 0301 	bic.w	r3, r3, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <SD_CheckStatus+0x38>)
 80073c8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80073ca:	4b03      	ldr	r3, [pc, #12]	; (80073d8 <SD_CheckStatus+0x38>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b2db      	uxtb	r3, r3
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	2000000d 	.word	0x2000000d

080073dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80073e6:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <SD_initialize+0x38>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80073ec:	f7ff ff0a 	bl	8007204 <BSP_SD_Init>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d107      	bne.n	8007406 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff ffd1 	bl	80073a0 <SD_CheckStatus>
 80073fe:	4603      	mov	r3, r0
 8007400:	461a      	mov	r2, r3
 8007402:	4b04      	ldr	r3, [pc, #16]	; (8007414 <SD_initialize+0x38>)
 8007404:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007406:	4b03      	ldr	r3, [pc, #12]	; (8007414 <SD_initialize+0x38>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	b2db      	uxtb	r3, r3
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	2000000d 	.word	0x2000000d

08007418 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	4603      	mov	r3, r0
 8007420:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007422:	79fb      	ldrb	r3, [r7, #7]
 8007424:	4618      	mov	r0, r3
 8007426:	f7ff ffbb 	bl	80073a0 <SD_CheckStatus>
 800742a:	4603      	mov	r3, r0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	607a      	str	r2, [r7, #4]
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	4603      	mov	r3, r0
 8007442:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007448:	f04f 33ff 	mov.w	r3, #4294967295
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	68b8      	ldr	r0, [r7, #8]
 8007452:	f7ff feef 	bl	8007234 <BSP_SD_ReadBlocks>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d107      	bne.n	800746c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800745c:	bf00      	nop
 800745e:	f7ff ff25 	bl	80072ac <BSP_SD_GetCardState>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1fa      	bne.n	800745e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b086      	sub	sp, #24
 800747a:	af00      	add	r7, sp, #0
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800748a:	f04f 33ff 	mov.w	r3, #4294967295
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	68b8      	ldr	r0, [r7, #8]
 8007494:	f7ff feec 	bl	8007270 <BSP_SD_WriteBlocks>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d107      	bne.n	80074ae <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800749e:	bf00      	nop
 80074a0:	f7ff ff04 	bl	80072ac <BSP_SD_GetCardState>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1fa      	bne.n	80074a0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b08c      	sub	sp, #48	; 0x30
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4603      	mov	r3, r0
 80074c0:	603a      	str	r2, [r7, #0]
 80074c2:	71fb      	strb	r3, [r7, #7]
 80074c4:	460b      	mov	r3, r1
 80074c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80074ce:	4b25      	ldr	r3, [pc, #148]	; (8007564 <SD_ioctl+0xac>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <SD_ioctl+0x28>
 80074dc:	2303      	movs	r3, #3
 80074de:	e03c      	b.n	800755a <SD_ioctl+0xa2>

  switch (cmd)
 80074e0:	79bb      	ldrb	r3, [r7, #6]
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d834      	bhi.n	8007550 <SD_ioctl+0x98>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <SD_ioctl+0x34>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	080074fd 	.word	0x080074fd
 80074f0:	08007505 	.word	0x08007505
 80074f4:	0800751d 	.word	0x0800751d
 80074f8:	08007537 	.word	0x08007537
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007502:	e028      	b.n	8007556 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007504:	f107 030c 	add.w	r3, r7, #12
 8007508:	4618      	mov	r0, r3
 800750a:	f7ff fedf 	bl	80072cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800750e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800751a:	e01c      	b.n	8007556 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800751c:	f107 030c 	add.w	r3, r7, #12
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff fed3 	bl	80072cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	b29a      	uxth	r2, r3
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007534:	e00f      	b.n	8007556 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007536:	f107 030c 	add.w	r3, r7, #12
 800753a:	4618      	mov	r0, r3
 800753c:	f7ff fec6 	bl	80072cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	0a5a      	lsrs	r2, r3, #9
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800754e:	e002      	b.n	8007556 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007550:	2304      	movs	r3, #4
 8007552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800755a:	4618      	mov	r0, r3
 800755c:	3730      	adds	r7, #48	; 0x30
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	2000000d 	.word	0x2000000d

08007568 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	4603      	mov	r3, r0
 8007570:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	4a08      	ldr	r2, [pc, #32]	; (8007598 <disk_status+0x30>)
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	79fa      	ldrb	r2, [r7, #7]
 8007580:	4905      	ldr	r1, [pc, #20]	; (8007598 <disk_status+0x30>)
 8007582:	440a      	add	r2, r1
 8007584:	7a12      	ldrb	r2, [r2, #8]
 8007586:	4610      	mov	r0, r2
 8007588:	4798      	blx	r3
 800758a:	4603      	mov	r3, r0
 800758c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	200023a8 	.word	0x200023a8

0800759c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80075aa:	79fb      	ldrb	r3, [r7, #7]
 80075ac:	4a0d      	ldr	r2, [pc, #52]	; (80075e4 <disk_initialize+0x48>)
 80075ae:	5cd3      	ldrb	r3, [r2, r3]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d111      	bne.n	80075d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	4a0b      	ldr	r2, [pc, #44]	; (80075e4 <disk_initialize+0x48>)
 80075b8:	2101      	movs	r1, #1
 80075ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80075bc:	79fb      	ldrb	r3, [r7, #7]
 80075be:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <disk_initialize+0x48>)
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	79fa      	ldrb	r2, [r7, #7]
 80075ca:	4906      	ldr	r1, [pc, #24]	; (80075e4 <disk_initialize+0x48>)
 80075cc:	440a      	add	r2, r1
 80075ce:	7a12      	ldrb	r2, [r2, #8]
 80075d0:	4610      	mov	r0, r2
 80075d2:	4798      	blx	r3
 80075d4:	4603      	mov	r3, r0
 80075d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	200023a8 	.word	0x200023a8

080075e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80075e8:	b590      	push	{r4, r7, lr}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	607a      	str	r2, [r7, #4]
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	4603      	mov	r3, r0
 80075f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	4a0a      	ldr	r2, [pc, #40]	; (8007624 <disk_read+0x3c>)
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	689c      	ldr	r4, [r3, #8]
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	4a07      	ldr	r2, [pc, #28]	; (8007624 <disk_read+0x3c>)
 8007608:	4413      	add	r3, r2
 800760a:	7a18      	ldrb	r0, [r3, #8]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	47a0      	blx	r4
 8007614:	4603      	mov	r3, r0
 8007616:	75fb      	strb	r3, [r7, #23]
  return res;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
}
 800761a:	4618      	mov	r0, r3
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	bd90      	pop	{r4, r7, pc}
 8007622:	bf00      	nop
 8007624:	200023a8 	.word	0x200023a8

08007628 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007628:	b590      	push	{r4, r7, lr}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	607a      	str	r2, [r7, #4]
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	4a0a      	ldr	r2, [pc, #40]	; (8007664 <disk_write+0x3c>)
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	68dc      	ldr	r4, [r3, #12]
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	4a07      	ldr	r2, [pc, #28]	; (8007664 <disk_write+0x3c>)
 8007648:	4413      	add	r3, r2
 800764a:	7a18      	ldrb	r0, [r3, #8]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	47a0      	blx	r4
 8007654:	4603      	mov	r3, r0
 8007656:	75fb      	strb	r3, [r7, #23]
  return res;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
}
 800765a:	4618      	mov	r0, r3
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	bd90      	pop	{r4, r7, pc}
 8007662:	bf00      	nop
 8007664:	200023a8 	.word	0x200023a8

08007668 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	603a      	str	r2, [r7, #0]
 8007672:	71fb      	strb	r3, [r7, #7]
 8007674:	460b      	mov	r3, r1
 8007676:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <disk_ioctl+0x38>)
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	79fa      	ldrb	r2, [r7, #7]
 8007686:	4906      	ldr	r1, [pc, #24]	; (80076a0 <disk_ioctl+0x38>)
 8007688:	440a      	add	r2, r1
 800768a:	7a10      	ldrb	r0, [r2, #8]
 800768c:	79b9      	ldrb	r1, [r7, #6]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	4798      	blx	r3
 8007692:	4603      	mov	r3, r0
 8007694:	73fb      	strb	r3, [r7, #15]
  return res;
 8007696:	7bfb      	ldrb	r3, [r7, #15]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	200023a8 	.word	0x200023a8

080076a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3301      	adds	r3, #1
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80076b4:	89fb      	ldrh	r3, [r7, #14]
 80076b6:	021b      	lsls	r3, r3, #8
 80076b8:	b21a      	sxth	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	b21b      	sxth	r3, r3
 80076c0:	4313      	orrs	r3, r2
 80076c2:	b21b      	sxth	r3, r3
 80076c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80076c6:	89fb      	ldrh	r3, [r7, #14]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3303      	adds	r3, #3
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	021b      	lsls	r3, r3, #8
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	3202      	adds	r2, #2
 80076ec:	7812      	ldrb	r2, [r2, #0]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	3201      	adds	r2, #1
 80076fa:	7812      	ldrb	r2, [r2, #0]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	7812      	ldrb	r2, [r2, #0]
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]
	return rv;
 800770c:	68fb      	ldr	r3, [r7, #12]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	460b      	mov	r3, r1
 8007724:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	887a      	ldrh	r2, [r7, #2]
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	887b      	ldrh	r3, [r7, #2]
 8007734:	0a1b      	lsrs	r3, r3, #8
 8007736:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	887a      	ldrh	r2, [r7, #2]
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	701a      	strb	r2, [r3, #0]
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	b2d2      	uxtb	r2, r2
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	0a1b      	lsrs	r3, r3, #8
 800776a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	607a      	str	r2, [r7, #4]
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	b2d2      	uxtb	r2, r2
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	0a1b      	lsrs	r3, r3, #8
 800777c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	0a1b      	lsrs	r3, r3, #8
 800778e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	607a      	str	r2, [r7, #4]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	b2d2      	uxtb	r2, r2
 800779a:	701a      	strb	r2, [r3, #0]
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00d      	beq.n	80077de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	1c53      	adds	r3, r2, #1
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	1c59      	adds	r1, r3, #1
 80077cc:	6179      	str	r1, [r7, #20]
 80077ce:	7812      	ldrb	r2, [r2, #0]
 80077d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	607b      	str	r3, [r7, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1f1      	bne.n	80077c2 <mem_cpy+0x1a>
	}
}
 80077de:	bf00      	nop
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80077ea:	b480      	push	{r7}
 80077ec:	b087      	sub	sp, #28
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	617a      	str	r2, [r7, #20]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	b2d2      	uxtb	r2, r2
 8007804:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3b01      	subs	r3, #1
 800780a:	607b      	str	r3, [r7, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1f3      	bne.n	80077fa <mem_set+0x10>
}
 8007812:	bf00      	nop
 8007814:	bf00      	nop
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007820:	b480      	push	{r7}
 8007822:	b089      	sub	sp, #36	; 0x24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	61fb      	str	r3, [r7, #28]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	61fa      	str	r2, [r7, #28]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	4619      	mov	r1, r3
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	61ba      	str	r2, [r7, #24]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	1acb      	subs	r3, r1, r3
 800784c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	3b01      	subs	r3, #1
 8007852:	607b      	str	r3, [r7, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <mem_cmp+0x40>
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0eb      	beq.n	8007838 <mem_cmp+0x18>

	return r;
 8007860:	697b      	ldr	r3, [r7, #20]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3724      	adds	r7, #36	; 0x24
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007878:	e002      	b.n	8007880 <chk_chr+0x12>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3301      	adds	r3, #1
 800787e:	607b      	str	r3, [r7, #4]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d005      	beq.n	8007894 <chk_chr+0x26>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	4293      	cmp	r3, r2
 8007892:	d1f2      	bne.n	800787a <chk_chr+0xc>
	return *str;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	781b      	ldrb	r3, [r3, #0]
}
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80078ae:	2300      	movs	r3, #0
 80078b0:	60bb      	str	r3, [r7, #8]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	e029      	b.n	800790c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80078b8:	4a27      	ldr	r2, [pc, #156]	; (8007958 <chk_lock+0xb4>)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	4413      	add	r3, r2
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d01d      	beq.n	8007902 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80078c6:	4a24      	ldr	r2, [pc, #144]	; (8007958 <chk_lock+0xb4>)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	4413      	add	r3, r2
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d116      	bne.n	8007906 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80078d8:	4a1f      	ldr	r2, [pc, #124]	; (8007958 <chk_lock+0xb4>)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	4413      	add	r3, r2
 80078e0:	3304      	adds	r3, #4
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d10c      	bne.n	8007906 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078ec:	4a1a      	ldr	r2, [pc, #104]	; (8007958 <chk_lock+0xb4>)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	4413      	add	r3, r2
 80078f4:	3308      	adds	r3, #8
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d102      	bne.n	8007906 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007900:	e007      	b.n	8007912 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007902:	2301      	movs	r3, #1
 8007904:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3301      	adds	r3, #1
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d9d2      	bls.n	80078b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2b02      	cmp	r3, #2
 8007916:	d109      	bne.n	800792c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d102      	bne.n	8007924 <chk_lock+0x80>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d101      	bne.n	8007928 <chk_lock+0x84>
 8007924:	2300      	movs	r3, #0
 8007926:	e010      	b.n	800794a <chk_lock+0xa6>
 8007928:	2312      	movs	r3, #18
 800792a:	e00e      	b.n	800794a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d108      	bne.n	8007944 <chk_lock+0xa0>
 8007932:	4a09      	ldr	r2, [pc, #36]	; (8007958 <chk_lock+0xb4>)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	4413      	add	r3, r2
 800793a:	330c      	adds	r3, #12
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007942:	d101      	bne.n	8007948 <chk_lock+0xa4>
 8007944:	2310      	movs	r3, #16
 8007946:	e000      	b.n	800794a <chk_lock+0xa6>
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	20002388 	.word	0x20002388

0800795c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007962:	2300      	movs	r3, #0
 8007964:	607b      	str	r3, [r7, #4]
 8007966:	e002      	b.n	800796e <enq_lock+0x12>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3301      	adds	r3, #1
 800796c:	607b      	str	r3, [r7, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d806      	bhi.n	8007982 <enq_lock+0x26>
 8007974:	4a09      	ldr	r2, [pc, #36]	; (800799c <enq_lock+0x40>)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	011b      	lsls	r3, r3, #4
 800797a:	4413      	add	r3, r2
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1f2      	bne.n	8007968 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b02      	cmp	r3, #2
 8007986:	bf14      	ite	ne
 8007988:	2301      	movne	r3, #1
 800798a:	2300      	moveq	r3, #0
 800798c:	b2db      	uxtb	r3, r3
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	20002388 	.word	0x20002388

080079a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	e01f      	b.n	80079f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80079b0:	4a41      	ldr	r2, [pc, #260]	; (8007ab8 <inc_lock+0x118>)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	011b      	lsls	r3, r3, #4
 80079b6:	4413      	add	r3, r2
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d113      	bne.n	80079ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80079c2:	4a3d      	ldr	r2, [pc, #244]	; (8007ab8 <inc_lock+0x118>)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	4413      	add	r3, r2
 80079ca:	3304      	adds	r3, #4
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d109      	bne.n	80079ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80079d6:	4a38      	ldr	r2, [pc, #224]	; (8007ab8 <inc_lock+0x118>)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	4413      	add	r3, r2
 80079de:	3308      	adds	r3, #8
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d006      	beq.n	80079f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3301      	adds	r3, #1
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d9dc      	bls.n	80079b0 <inc_lock+0x10>
 80079f6:	e000      	b.n	80079fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80079f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d132      	bne.n	8007a66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007a00:	2300      	movs	r3, #0
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	e002      	b.n	8007a0c <inc_lock+0x6c>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d806      	bhi.n	8007a20 <inc_lock+0x80>
 8007a12:	4a29      	ldr	r2, [pc, #164]	; (8007ab8 <inc_lock+0x118>)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	011b      	lsls	r3, r3, #4
 8007a18:	4413      	add	r3, r2
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1f2      	bne.n	8007a06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d101      	bne.n	8007a2a <inc_lock+0x8a>
 8007a26:	2300      	movs	r3, #0
 8007a28:	e040      	b.n	8007aac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4922      	ldr	r1, [pc, #136]	; (8007ab8 <inc_lock+0x118>)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	440b      	add	r3, r1
 8007a36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	491e      	ldr	r1, [pc, #120]	; (8007ab8 <inc_lock+0x118>)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	440b      	add	r3, r1
 8007a44:	3304      	adds	r3, #4
 8007a46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	695a      	ldr	r2, [r3, #20]
 8007a4c:	491a      	ldr	r1, [pc, #104]	; (8007ab8 <inc_lock+0x118>)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	440b      	add	r3, r1
 8007a54:	3308      	adds	r3, #8
 8007a56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007a58:	4a17      	ldr	r2, [pc, #92]	; (8007ab8 <inc_lock+0x118>)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	011b      	lsls	r3, r3, #4
 8007a5e:	4413      	add	r3, r2
 8007a60:	330c      	adds	r3, #12
 8007a62:	2200      	movs	r2, #0
 8007a64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d009      	beq.n	8007a80 <inc_lock+0xe0>
 8007a6c:	4a12      	ldr	r2, [pc, #72]	; (8007ab8 <inc_lock+0x118>)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	4413      	add	r3, r2
 8007a74:	330c      	adds	r3, #12
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <inc_lock+0xe0>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e015      	b.n	8007aac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d108      	bne.n	8007a98 <inc_lock+0xf8>
 8007a86:	4a0c      	ldr	r2, [pc, #48]	; (8007ab8 <inc_lock+0x118>)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	4413      	add	r3, r2
 8007a8e:	330c      	adds	r3, #12
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	3301      	adds	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	e001      	b.n	8007a9c <inc_lock+0xfc>
 8007a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a9c:	4906      	ldr	r1, [pc, #24]	; (8007ab8 <inc_lock+0x118>)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	440b      	add	r3, r1
 8007aa4:	330c      	adds	r3, #12
 8007aa6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3301      	adds	r3, #1
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	20002388 	.word	0x20002388

08007abc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	607b      	str	r3, [r7, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d825      	bhi.n	8007b1c <dec_lock+0x60>
		n = Files[i].ctr;
 8007ad0:	4a17      	ldr	r2, [pc, #92]	; (8007b30 <dec_lock+0x74>)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	4413      	add	r3, r2
 8007ad8:	330c      	adds	r3, #12
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007ade:	89fb      	ldrh	r3, [r7, #14]
 8007ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae4:	d101      	bne.n	8007aea <dec_lock+0x2e>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007aea:	89fb      	ldrh	r3, [r7, #14]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <dec_lock+0x3a>
 8007af0:	89fb      	ldrh	r3, [r7, #14]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007af6:	4a0e      	ldr	r2, [pc, #56]	; (8007b30 <dec_lock+0x74>)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	4413      	add	r3, r2
 8007afe:	330c      	adds	r3, #12
 8007b00:	89fa      	ldrh	r2, [r7, #14]
 8007b02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007b04:	89fb      	ldrh	r3, [r7, #14]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <dec_lock+0x5a>
 8007b0a:	4a09      	ldr	r2, [pc, #36]	; (8007b30 <dec_lock+0x74>)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	4413      	add	r3, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	737b      	strb	r3, [r7, #13]
 8007b1a:	e001      	b.n	8007b20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007b20:	7b7b      	ldrb	r3, [r7, #13]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	20002388 	.word	0x20002388

08007b34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	e010      	b.n	8007b64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007b42:	4a0d      	ldr	r2, [pc, #52]	; (8007b78 <clear_lock+0x44>)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	4413      	add	r3, r2
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d105      	bne.n	8007b5e <clear_lock+0x2a>
 8007b52:	4a09      	ldr	r2, [pc, #36]	; (8007b78 <clear_lock+0x44>)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	4413      	add	r3, r2
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3301      	adds	r3, #1
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d9eb      	bls.n	8007b42 <clear_lock+0xe>
	}
}
 8007b6a:	bf00      	nop
 8007b6c:	bf00      	nop
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	20002388 	.word	0x20002388

08007b7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	78db      	ldrb	r3, [r3, #3]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d034      	beq.n	8007bfa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	7858      	ldrb	r0, [r3, #1]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	f7ff fd40 	bl	8007628 <disk_write>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	73fb      	strb	r3, [r7, #15]
 8007bb2:	e022      	b.n	8007bfa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	1ad2      	subs	r2, r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d217      	bcs.n	8007bfa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	789b      	ldrb	r3, [r3, #2]
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	e010      	b.n	8007bf4 <sync_window+0x78>
					wsect += fs->fsize;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4413      	add	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	7858      	ldrb	r0, [r3, #1]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007be6:	2301      	movs	r3, #1
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	f7ff fd1d 	bl	8007628 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	613b      	str	r3, [r7, #16]
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d8eb      	bhi.n	8007bd2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d01b      	beq.n	8007c54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff ffad 	bl	8007b7c <sync_window>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d113      	bne.n	8007c54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	7858      	ldrb	r0, [r3, #1]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007c36:	2301      	movs	r3, #1
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	f7ff fcd5 	bl	80075e8 <disk_read>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d004      	beq.n	8007c4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007c44:	f04f 33ff 	mov.w	r3, #4294967295
 8007c48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff ff87 	bl	8007b7c <sync_window>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d159      	bne.n	8007d2c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d149      	bne.n	8007d14 <sync_fs+0xb4>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	791b      	ldrb	r3, [r3, #4]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d145      	bne.n	8007d14 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	899b      	ldrh	r3, [r3, #12]
 8007c92:	461a      	mov	r2, r3
 8007c94:	2100      	movs	r1, #0
 8007c96:	f7ff fda8 	bl	80077ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3334      	adds	r3, #52	; 0x34
 8007c9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ca2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff fd37 	bl	800771a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3334      	adds	r3, #52	; 0x34
 8007cb0:	4921      	ldr	r1, [pc, #132]	; (8007d38 <sync_fs+0xd8>)
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fd4c 	bl	8007750 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3334      	adds	r3, #52	; 0x34
 8007cbc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007cc0:	491e      	ldr	r1, [pc, #120]	; (8007d3c <sync_fs+0xdc>)
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7ff fd44 	bl	8007750 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3334      	adds	r3, #52	; 0x34
 8007ccc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	f7ff fd3a 	bl	8007750 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3334      	adds	r3, #52	; 0x34
 8007ce0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4610      	mov	r0, r2
 8007cec:	f7ff fd30 	bl	8007750 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	7858      	ldrb	r0, [r3, #1]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f7ff fc8d 	bl	8007628 <disk_write>
			fs->fsi_flag = 0;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff fca3 	bl	8007668 <disk_ioctl>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <sync_fs+0xcc>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	41615252 	.word	0x41615252
 8007d3c:	61417272 	.word	0x61417272

08007d40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	3b02      	subs	r3, #2
 8007d4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	3b02      	subs	r3, #2
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d301      	bcc.n	8007d60 <clust2sect+0x20>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e008      	b.n	8007d72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	895b      	ldrh	r3, [r3, #10]
 8007d64:	461a      	mov	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	fb03 f202 	mul.w	r2, r3, r2
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	4413      	add	r3, r2
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b086      	sub	sp, #24
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d904      	bls.n	8007d9e <get_fat+0x20>
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d302      	bcc.n	8007da4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007d9e:	2301      	movs	r3, #1
 8007da0:	617b      	str	r3, [r7, #20]
 8007da2:	e0bb      	b.n	8007f1c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007da4:	f04f 33ff 	mov.w	r3, #4294967295
 8007da8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	f000 8083 	beq.w	8007eba <get_fat+0x13c>
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	f300 80a7 	bgt.w	8007f08 <get_fat+0x18a>
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d002      	beq.n	8007dc4 <get_fat+0x46>
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d056      	beq.n	8007e70 <get_fat+0xf2>
 8007dc2:	e0a1      	b.n	8007f08 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	085b      	lsrs	r3, r3, #1
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	899b      	ldrh	r3, [r3, #12]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8007de2:	4413      	add	r3, r2
 8007de4:	4619      	mov	r1, r3
 8007de6:	6938      	ldr	r0, [r7, #16]
 8007de8:	f7ff ff0c 	bl	8007c04 <move_window>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f040 808d 	bne.w	8007f0e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	60fa      	str	r2, [r7, #12]
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	8992      	ldrh	r2, [r2, #12]
 8007dfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e02:	fb01 f202 	mul.w	r2, r1, r2
 8007e06:	1a9b      	subs	r3, r3, r2
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e10:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	899b      	ldrh	r3, [r3, #12]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e22:	4413      	add	r3, r2
 8007e24:	4619      	mov	r1, r3
 8007e26:	6938      	ldr	r0, [r7, #16]
 8007e28:	f7ff feec 	bl	8007c04 <move_window>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d16f      	bne.n	8007f12 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	899b      	ldrh	r3, [r3, #12]
 8007e36:	461a      	mov	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e3e:	fb01 f202 	mul.w	r2, r1, r2
 8007e42:	1a9b      	subs	r3, r3, r2
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	4413      	add	r3, r2
 8007e48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e4c:	021b      	lsls	r3, r3, #8
 8007e4e:	461a      	mov	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <get_fat+0xe8>
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	091b      	lsrs	r3, r3, #4
 8007e64:	e002      	b.n	8007e6c <get_fat+0xee>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e6c:	617b      	str	r3, [r7, #20]
			break;
 8007e6e:	e055      	b.n	8007f1c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	899b      	ldrh	r3, [r3, #12]
 8007e78:	085b      	lsrs	r3, r3, #1
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e84:	4413      	add	r3, r2
 8007e86:	4619      	mov	r1, r3
 8007e88:	6938      	ldr	r0, [r7, #16]
 8007e8a:	f7ff febb 	bl	8007c04 <move_window>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d140      	bne.n	8007f16 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	8992      	ldrh	r2, [r2, #12]
 8007ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ea6:	fb00 f202 	mul.w	r2, r0, r2
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	440b      	add	r3, r1
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff fbf8 	bl	80076a4 <ld_word>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	617b      	str	r3, [r7, #20]
			break;
 8007eb8:	e030      	b.n	8007f1c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	899b      	ldrh	r3, [r3, #12]
 8007ec2:	089b      	lsrs	r3, r3, #2
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ece:	4413      	add	r3, r2
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6938      	ldr	r0, [r7, #16]
 8007ed4:	f7ff fe96 	bl	8007c04 <move_window>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d11d      	bne.n	8007f1a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	8992      	ldrh	r2, [r2, #12]
 8007eec:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ef0:	fb00 f202 	mul.w	r2, r0, r2
 8007ef4:	1a9b      	subs	r3, r3, r2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7ff fbeb 	bl	80076d4 <ld_dword>
 8007efe:	4603      	mov	r3, r0
 8007f00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007f04:	617b      	str	r3, [r7, #20]
			break;
 8007f06:	e009      	b.n	8007f1c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007f08:	2301      	movs	r3, #1
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	e006      	b.n	8007f1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f0e:	bf00      	nop
 8007f10:	e004      	b.n	8007f1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f12:	bf00      	nop
 8007f14:	e002      	b.n	8007f1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007f16:	bf00      	nop
 8007f18:	e000      	b.n	8007f1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f1a:	bf00      	nop
		}
	}

	return val;
 8007f1c:	697b      	ldr	r3, [r7, #20]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007f26:	b590      	push	{r4, r7, lr}
 8007f28:	b089      	sub	sp, #36	; 0x24
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007f32:	2302      	movs	r3, #2
 8007f34:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	f240 8102 	bls.w	8008142 <put_fat+0x21c>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	f080 80fc 	bcs.w	8008142 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	f000 80b6 	beq.w	80080c0 <put_fat+0x19a>
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	f300 80fd 	bgt.w	8008154 <put_fat+0x22e>
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d003      	beq.n	8007f66 <put_fat+0x40>
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	f000 8083 	beq.w	800806a <put_fat+0x144>
 8007f64:	e0f6      	b.n	8008154 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	61bb      	str	r3, [r7, #24]
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	085b      	lsrs	r3, r3, #1
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	4413      	add	r3, r2
 8007f72:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	899b      	ldrh	r3, [r3, #12]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f84:	4413      	add	r3, r2
 8007f86:	4619      	mov	r1, r3
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f7ff fe3b 	bl	8007c04 <move_window>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f92:	7ffb      	ldrb	r3, [r7, #31]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f040 80d6 	bne.w	8008146 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	61ba      	str	r2, [r7, #24]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	8992      	ldrh	r2, [r2, #12]
 8007faa:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fae:	fb00 f202 	mul.w	r2, r0, r2
 8007fb2:	1a9b      	subs	r3, r3, r2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00d      	beq.n	8007fde <put_fat+0xb8>
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	b25b      	sxtb	r3, r3
 8007fc8:	f003 030f 	and.w	r3, r3, #15
 8007fcc:	b25a      	sxtb	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	b25b      	sxtb	r3, r3
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	b25b      	sxtb	r3, r3
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	e001      	b.n	8007fe2 <put_fat+0xbc>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	899b      	ldrh	r3, [r3, #12]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ffc:	4413      	add	r3, r2
 8007ffe:	4619      	mov	r1, r3
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f7ff fdff 	bl	8007c04 <move_window>
 8008006:	4603      	mov	r3, r0
 8008008:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800800a:	7ffb      	ldrb	r3, [r7, #31]
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 809c 	bne.w	800814a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	899b      	ldrh	r3, [r3, #12]
 800801c:	461a      	mov	r2, r3
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	fbb3 f0f2 	udiv	r0, r3, r2
 8008024:	fb00 f202 	mul.w	r2, r0, r2
 8008028:	1a9b      	subs	r3, r3, r2
 800802a:	440b      	add	r3, r1
 800802c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <put_fat+0x11a>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	091b      	lsrs	r3, r3, #4
 800803c:	b2db      	uxtb	r3, r3
 800803e:	e00e      	b.n	800805e <put_fat+0x138>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	b25b      	sxtb	r3, r3
 8008046:	f023 030f 	bic.w	r3, r3, #15
 800804a:	b25a      	sxtb	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	0a1b      	lsrs	r3, r3, #8
 8008050:	b25b      	sxtb	r3, r3
 8008052:	f003 030f 	and.w	r3, r3, #15
 8008056:	b25b      	sxtb	r3, r3
 8008058:	4313      	orrs	r3, r2
 800805a:	b25b      	sxtb	r3, r3
 800805c:	b2db      	uxtb	r3, r3
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2201      	movs	r2, #1
 8008066:	70da      	strb	r2, [r3, #3]
			break;
 8008068:	e074      	b.n	8008154 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	899b      	ldrh	r3, [r3, #12]
 8008072:	085b      	lsrs	r3, r3, #1
 8008074:	b29b      	uxth	r3, r3
 8008076:	4619      	mov	r1, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	fbb3 f3f1 	udiv	r3, r3, r1
 800807e:	4413      	add	r3, r2
 8008080:	4619      	mov	r1, r3
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff fdbe 	bl	8007c04 <move_window>
 8008088:	4603      	mov	r3, r0
 800808a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800808c:	7ffb      	ldrb	r3, [r7, #31]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d15d      	bne.n	800814e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	005b      	lsls	r3, r3, #1
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	8992      	ldrh	r2, [r2, #12]
 80080a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80080a4:	fb00 f202 	mul.w	r2, r0, r2
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	440b      	add	r3, r1
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	b292      	uxth	r2, r2
 80080b0:	4611      	mov	r1, r2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fb31 	bl	800771a <st_word>
			fs->wflag = 1;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2201      	movs	r2, #1
 80080bc:	70da      	strb	r2, [r3, #3]
			break;
 80080be:	e049      	b.n	8008154 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	899b      	ldrh	r3, [r3, #12]
 80080c8:	089b      	lsrs	r3, r3, #2
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	4619      	mov	r1, r3
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80080d4:	4413      	add	r3, r2
 80080d6:	4619      	mov	r1, r3
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f7ff fd93 	bl	8007c04 <move_window>
 80080de:	4603      	mov	r3, r0
 80080e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80080e2:	7ffb      	ldrb	r3, [r7, #31]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d134      	bne.n	8008152 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	8992      	ldrh	r2, [r2, #12]
 80080fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008100:	fb00 f202 	mul.w	r2, r0, r2
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	440b      	add	r3, r1
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff fae3 	bl	80076d4 <ld_dword>
 800810e:	4603      	mov	r3, r0
 8008110:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008114:	4323      	orrs	r3, r4
 8008116:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	8992      	ldrh	r2, [r2, #12]
 8008126:	fbb3 f0f2 	udiv	r0, r3, r2
 800812a:	fb00 f202 	mul.w	r2, r0, r2
 800812e:	1a9b      	subs	r3, r3, r2
 8008130:	440b      	add	r3, r1
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff fb0b 	bl	8007750 <st_dword>
			fs->wflag = 1;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2201      	movs	r2, #1
 800813e:	70da      	strb	r2, [r3, #3]
			break;
 8008140:	e008      	b.n	8008154 <put_fat+0x22e>
		}
	}
 8008142:	bf00      	nop
 8008144:	e006      	b.n	8008154 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008146:	bf00      	nop
 8008148:	e004      	b.n	8008154 <put_fat+0x22e>
			if (res != FR_OK) break;
 800814a:	bf00      	nop
 800814c:	e002      	b.n	8008154 <put_fat+0x22e>
			if (res != FR_OK) break;
 800814e:	bf00      	nop
 8008150:	e000      	b.n	8008154 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008152:	bf00      	nop
	return res;
 8008154:	7ffb      	ldrb	r3, [r7, #31]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3724      	adds	r7, #36	; 0x24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd90      	pop	{r4, r7, pc}

0800815e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b088      	sub	sp, #32
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d904      	bls.n	8008184 <remove_chain+0x26>
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	429a      	cmp	r2, r3
 8008182:	d301      	bcc.n	8008188 <remove_chain+0x2a>
 8008184:	2302      	movs	r3, #2
 8008186:	e04b      	b.n	8008220 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00c      	beq.n	80081a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800818e:	f04f 32ff 	mov.w	r2, #4294967295
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	69b8      	ldr	r0, [r7, #24]
 8008196:	f7ff fec6 	bl	8007f26 <put_fat>
 800819a:	4603      	mov	r3, r0
 800819c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800819e:	7ffb      	ldrb	r3, [r7, #31]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <remove_chain+0x4a>
 80081a4:	7ffb      	ldrb	r3, [r7, #31]
 80081a6:	e03b      	b.n	8008220 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f7ff fde7 	bl	8007d7e <get_fat>
 80081b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d031      	beq.n	800821c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d101      	bne.n	80081c2 <remove_chain+0x64>
 80081be:	2302      	movs	r3, #2
 80081c0:	e02e      	b.n	8008220 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c8:	d101      	bne.n	80081ce <remove_chain+0x70>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e028      	b.n	8008220 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80081ce:	2200      	movs	r2, #0
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	69b8      	ldr	r0, [r7, #24]
 80081d4:	f7ff fea7 	bl	8007f26 <put_fat>
 80081d8:	4603      	mov	r3, r0
 80081da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80081dc:	7ffb      	ldrb	r3, [r7, #31]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <remove_chain+0x88>
 80081e2:	7ffb      	ldrb	r3, [r7, #31]
 80081e4:	e01c      	b.n	8008220 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	695a      	ldr	r2, [r3, #20]
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	3b02      	subs	r3, #2
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d20b      	bcs.n	800820c <remove_chain+0xae>
			fs->free_clst++;
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	791b      	ldrb	r3, [r3, #4]
 8008202:	f043 0301 	orr.w	r3, r3, #1
 8008206:	b2da      	uxtb	r2, r3
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	429a      	cmp	r2, r3
 8008218:	d3c6      	bcc.n	80081a8 <remove_chain+0x4a>
 800821a:	e000      	b.n	800821e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800821c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3720      	adds	r7, #32
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10d      	bne.n	800825a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d004      	beq.n	8008254 <create_chain+0x2c>
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	429a      	cmp	r2, r3
 8008252:	d31b      	bcc.n	800828c <create_chain+0x64>
 8008254:	2301      	movs	r3, #1
 8008256:	61bb      	str	r3, [r7, #24]
 8008258:	e018      	b.n	800828c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff fd8e 	bl	8007d7e <get_fat>
 8008262:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d801      	bhi.n	800826e <create_chain+0x46>
 800826a:	2301      	movs	r3, #1
 800826c:	e070      	b.n	8008350 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008274:	d101      	bne.n	800827a <create_chain+0x52>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	e06a      	b.n	8008350 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	429a      	cmp	r2, r3
 8008282:	d201      	bcs.n	8008288 <create_chain+0x60>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	e063      	b.n	8008350 <create_chain+0x128>
		scl = clst;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	3301      	adds	r3, #1
 8008294:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	429a      	cmp	r2, r3
 800829e:	d307      	bcc.n	80082b0 <create_chain+0x88>
				ncl = 2;
 80082a0:	2302      	movs	r3, #2
 80082a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d901      	bls.n	80082b0 <create_chain+0x88>
 80082ac:	2300      	movs	r3, #0
 80082ae:	e04f      	b.n	8008350 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80082b0:	69f9      	ldr	r1, [r7, #28]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff fd63 	bl	8007d7e <get_fat>
 80082b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00e      	beq.n	80082de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d003      	beq.n	80082ce <create_chain+0xa6>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082cc:	d101      	bne.n	80082d2 <create_chain+0xaa>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	e03e      	b.n	8008350 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d1da      	bne.n	8008290 <create_chain+0x68>
 80082da:	2300      	movs	r3, #0
 80082dc:	e038      	b.n	8008350 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80082de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80082e0:	f04f 32ff 	mov.w	r2, #4294967295
 80082e4:	69f9      	ldr	r1, [r7, #28]
 80082e6:	6938      	ldr	r0, [r7, #16]
 80082e8:	f7ff fe1d 	bl	8007f26 <put_fat>
 80082ec:	4603      	mov	r3, r0
 80082ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d109      	bne.n	800830a <create_chain+0xe2>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d006      	beq.n	800830a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6938      	ldr	r0, [r7, #16]
 8008302:	f7ff fe10 	bl	8007f26 <put_fat>
 8008306:	4603      	mov	r3, r0
 8008308:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800830a:	7dfb      	ldrb	r3, [r7, #23]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d116      	bne.n	800833e <create_chain+0x116>
		fs->last_clst = ncl;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	695a      	ldr	r2, [r3, #20]
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	3b02      	subs	r3, #2
 8008320:	429a      	cmp	r2, r3
 8008322:	d804      	bhi.n	800832e <create_chain+0x106>
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	695b      	ldr	r3, [r3, #20]
 8008328:	1e5a      	subs	r2, r3, #1
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	791b      	ldrb	r3, [r3, #4]
 8008332:	f043 0301 	orr.w	r3, r3, #1
 8008336:	b2da      	uxtb	r2, r3
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	711a      	strb	r2, [r3, #4]
 800833c:	e007      	b.n	800834e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d102      	bne.n	800834a <create_chain+0x122>
 8008344:	f04f 33ff 	mov.w	r3, #4294967295
 8008348:	e000      	b.n	800834c <create_chain+0x124>
 800834a:	2301      	movs	r3, #1
 800834c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800834e:	69fb      	ldr	r3, [r7, #28]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3720      	adds	r7, #32
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836c:	3304      	adds	r3, #4
 800836e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	899b      	ldrh	r3, [r3, #12]
 8008374:	461a      	mov	r2, r3
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	fbb3 f3f2 	udiv	r3, r3, r2
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	8952      	ldrh	r2, [r2, #10]
 8008380:	fbb3 f3f2 	udiv	r3, r3, r2
 8008384:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	1d1a      	adds	r2, r3, #4
 800838a:	613a      	str	r2, [r7, #16]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <clmt_clust+0x42>
 8008396:	2300      	movs	r3, #0
 8008398:	e010      	b.n	80083bc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d307      	bcc.n	80083b2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	617b      	str	r3, [r7, #20]
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	3304      	adds	r3, #4
 80083ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80083b0:	e7e9      	b.n	8008386 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80083b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	4413      	add	r3, r2
}
 80083bc:	4618      	mov	r0, r3
 80083be:	371c      	adds	r7, #28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083de:	d204      	bcs.n	80083ea <dir_sdi+0x22>
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	f003 031f 	and.w	r3, r3, #31
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <dir_sdi+0x26>
		return FR_INT_ERR;
 80083ea:	2302      	movs	r3, #2
 80083ec:	e071      	b.n	80084d2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <dir_sdi+0x46>
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2b02      	cmp	r3, #2
 8008406:	d902      	bls.n	800840e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10c      	bne.n	800842e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	095b      	lsrs	r3, r3, #5
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	8912      	ldrh	r2, [r2, #8]
 800841c:	4293      	cmp	r3, r2
 800841e:	d301      	bcc.n	8008424 <dir_sdi+0x5c>
 8008420:	2302      	movs	r3, #2
 8008422:	e056      	b.n	80084d2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	61da      	str	r2, [r3, #28]
 800842c:	e02d      	b.n	800848a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	895b      	ldrh	r3, [r3, #10]
 8008432:	461a      	mov	r2, r3
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	899b      	ldrh	r3, [r3, #12]
 8008438:	fb02 f303 	mul.w	r3, r2, r3
 800843c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800843e:	e019      	b.n	8008474 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6979      	ldr	r1, [r7, #20]
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff fc9a 	bl	8007d7e <get_fat>
 800844a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008452:	d101      	bne.n	8008458 <dir_sdi+0x90>
 8008454:	2301      	movs	r3, #1
 8008456:	e03c      	b.n	80084d2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d904      	bls.n	8008468 <dir_sdi+0xa0>
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	429a      	cmp	r2, r3
 8008466:	d301      	bcc.n	800846c <dir_sdi+0xa4>
 8008468:	2302      	movs	r3, #2
 800846a:	e032      	b.n	80084d2 <dir_sdi+0x10a>
			ofs -= csz;
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	429a      	cmp	r2, r3
 800847a:	d2e1      	bcs.n	8008440 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800847c:	6979      	ldr	r1, [r7, #20]
 800847e:	6938      	ldr	r0, [r7, #16]
 8008480:	f7ff fc5e 	bl	8007d40 <clust2sect>
 8008484:	4602      	mov	r2, r0
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <dir_sdi+0xd4>
 8008498:	2302      	movs	r3, #2
 800849a:	e01a      	b.n	80084d2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	69da      	ldr	r2, [r3, #28]
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	899b      	ldrh	r3, [r3, #12]
 80084a4:	4619      	mov	r1, r3
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80084ac:	441a      	add	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	899b      	ldrh	r3, [r3, #12]
 80084bc:	461a      	mov	r2, r3
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80084c4:	fb00 f202 	mul.w	r2, r0, r2
 80084c8:	1a9b      	subs	r3, r3, r2
 80084ca:	18ca      	adds	r2, r1, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b086      	sub	sp, #24
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	3320      	adds	r3, #32
 80084f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <dir_next+0x28>
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008500:	d301      	bcc.n	8008506 <dir_next+0x2c>
 8008502:	2304      	movs	r3, #4
 8008504:	e0bb      	b.n	800867e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	899b      	ldrh	r3, [r3, #12]
 800850a:	461a      	mov	r2, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008512:	fb01 f202 	mul.w	r2, r1, r2
 8008516:	1a9b      	subs	r3, r3, r2
 8008518:	2b00      	cmp	r3, #0
 800851a:	f040 809d 	bne.w	8008658 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10b      	bne.n	8008548 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	095b      	lsrs	r3, r3, #5
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	8912      	ldrh	r2, [r2, #8]
 8008538:	4293      	cmp	r3, r2
 800853a:	f0c0 808d 	bcc.w	8008658 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	61da      	str	r2, [r3, #28]
 8008544:	2304      	movs	r3, #4
 8008546:	e09a      	b.n	800867e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	899b      	ldrh	r3, [r3, #12]
 800854c:	461a      	mov	r2, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	fbb3 f3f2 	udiv	r3, r3, r2
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	8952      	ldrh	r2, [r2, #10]
 8008558:	3a01      	subs	r2, #1
 800855a:	4013      	ands	r3, r2
 800855c:	2b00      	cmp	r3, #0
 800855e:	d17b      	bne.n	8008658 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	4619      	mov	r1, r3
 8008568:	4610      	mov	r0, r2
 800856a:	f7ff fc08 	bl	8007d7e <get_fat>
 800856e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d801      	bhi.n	800857a <dir_next+0xa0>
 8008576:	2302      	movs	r3, #2
 8008578:	e081      	b.n	800867e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d101      	bne.n	8008586 <dir_next+0xac>
 8008582:	2301      	movs	r3, #1
 8008584:	e07b      	b.n	800867e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	429a      	cmp	r2, r3
 800858e:	d359      	bcc.n	8008644 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d104      	bne.n	80085a0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	61da      	str	r2, [r3, #28]
 800859c:	2304      	movs	r3, #4
 800859e:	e06e      	b.n	800867e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7ff fe3d 	bl	8008228 <create_chain>
 80085ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <dir_next+0xe0>
 80085b6:	2307      	movs	r3, #7
 80085b8:	e061      	b.n	800867e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <dir_next+0xea>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e05c      	b.n	800867e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ca:	d101      	bne.n	80085d0 <dir_next+0xf6>
 80085cc:	2301      	movs	r3, #1
 80085ce:	e056      	b.n	800867e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff fad3 	bl	8007b7c <sync_window>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <dir_next+0x106>
 80085dc:	2301      	movs	r3, #1
 80085de:	e04e      	b.n	800867e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	899b      	ldrh	r3, [r3, #12]
 80085ea:	461a      	mov	r2, r3
 80085ec:	2100      	movs	r1, #0
 80085ee:	f7ff f8fc 	bl	80077ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085f2:	2300      	movs	r3, #0
 80085f4:	613b      	str	r3, [r7, #16]
 80085f6:	6979      	ldr	r1, [r7, #20]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f7ff fba1 	bl	8007d40 <clust2sect>
 80085fe:	4602      	mov	r2, r0
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	631a      	str	r2, [r3, #48]	; 0x30
 8008604:	e012      	b.n	800862c <dir_next+0x152>
						fs->wflag = 1;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2201      	movs	r2, #1
 800860a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f7ff fab5 	bl	8007b7c <sync_window>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <dir_next+0x142>
 8008618:	2301      	movs	r3, #1
 800861a:	e030      	b.n	800867e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	3301      	adds	r3, #1
 8008620:	613b      	str	r3, [r7, #16]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	631a      	str	r2, [r3, #48]	; 0x30
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	895b      	ldrh	r3, [r3, #10]
 8008630:	461a      	mov	r2, r3
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	4293      	cmp	r3, r2
 8008636:	d3e6      	bcc.n	8008606 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	1ad2      	subs	r2, r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800864a:	6979      	ldr	r1, [r7, #20]
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7ff fb77 	bl	8007d40 <clust2sect>
 8008652:	4602      	mov	r2, r0
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	899b      	ldrh	r3, [r3, #12]
 8008668:	461a      	mov	r2, r3
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008670:	fb00 f202 	mul.w	r2, r0, r2
 8008674:	1a9b      	subs	r3, r3, r2
 8008676:	18ca      	adds	r2, r1, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b086      	sub	sp, #24
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008696:	2100      	movs	r1, #0
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff fe95 	bl	80083c8 <dir_sdi>
 800869e:	4603      	mov	r3, r0
 80086a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d12b      	bne.n	8008700 <dir_alloc+0x7a>
		n = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	69db      	ldr	r3, [r3, #28]
 80086b0:	4619      	mov	r1, r3
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f7ff faa6 	bl	8007c04 <move_window>
 80086b8:	4603      	mov	r3, r0
 80086ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d11d      	bne.n	80086fe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2be5      	cmp	r3, #229	; 0xe5
 80086ca:	d004      	beq.n	80086d6 <dir_alloc+0x50>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d107      	bne.n	80086e6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	3301      	adds	r3, #1
 80086da:	613b      	str	r3, [r7, #16]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d102      	bne.n	80086ea <dir_alloc+0x64>
 80086e4:	e00c      	b.n	8008700 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80086e6:	2300      	movs	r3, #0
 80086e8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80086ea:	2101      	movs	r1, #1
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff fef4 	bl	80084da <dir_next>
 80086f2:	4603      	mov	r3, r0
 80086f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0d7      	beq.n	80086ac <dir_alloc+0x26>
 80086fc:	e000      	b.n	8008700 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80086fe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008700:	7dfb      	ldrb	r3, [r7, #23]
 8008702:	2b04      	cmp	r3, #4
 8008704:	d101      	bne.n	800870a <dir_alloc+0x84>
 8008706:	2307      	movs	r3, #7
 8008708:	75fb      	strb	r3, [r7, #23]
	return res;
 800870a:	7dfb      	ldrb	r3, [r7, #23]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	331a      	adds	r3, #26
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe ffbe 	bl	80076a4 <ld_word>
 8008728:	4603      	mov	r3, r0
 800872a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b03      	cmp	r3, #3
 8008732:	d109      	bne.n	8008748 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	3314      	adds	r3, #20
 8008738:	4618      	mov	r0, r3
 800873a:	f7fe ffb3 	bl	80076a4 <ld_word>
 800873e:	4603      	mov	r3, r0
 8008740:	041b      	lsls	r3, r3, #16
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	4313      	orrs	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008748:	68fb      	ldr	r3, [r7, #12]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	331a      	adds	r3, #26
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	b292      	uxth	r2, r2
 8008766:	4611      	mov	r1, r2
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe ffd6 	bl	800771a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b03      	cmp	r3, #3
 8008774:	d109      	bne.n	800878a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f103 0214 	add.w	r2, r3, #20
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	0c1b      	lsrs	r3, r3, #16
 8008780:	b29b      	uxth	r3, r3
 8008782:	4619      	mov	r1, r3
 8008784:	4610      	mov	r0, r2
 8008786:	f7fe ffc8 	bl	800771a <st_word>
	}
}
 800878a:	bf00      	nop
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b086      	sub	sp, #24
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80087a0:	2100      	movs	r1, #0
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff fe10 	bl	80083c8 <dir_sdi>
 80087a8:	4603      	mov	r3, r0
 80087aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <dir_find+0x24>
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	e03e      	b.n	8008834 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	4619      	mov	r1, r3
 80087bc:	6938      	ldr	r0, [r7, #16]
 80087be:	f7ff fa21 	bl	8007c04 <move_window>
 80087c2:	4603      	mov	r3, r0
 80087c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d12f      	bne.n	800882c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d102      	bne.n	80087e0 <dir_find+0x4e>
 80087da:	2304      	movs	r3, #4
 80087dc:	75fb      	strb	r3, [r7, #23]
 80087de:	e028      	b.n	8008832 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	330b      	adds	r3, #11
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	330b      	adds	r3, #11
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	f003 0308 	and.w	r3, r3, #8
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10a      	bne.n	8008818 <dir_find+0x86>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a18      	ldr	r0, [r3, #32]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	3324      	adds	r3, #36	; 0x24
 800880a:	220b      	movs	r2, #11
 800880c:	4619      	mov	r1, r3
 800880e:	f7ff f807 	bl	8007820 <mem_cmp>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00b      	beq.n	8008830 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008818:	2100      	movs	r1, #0
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff fe5d 	bl	80084da <dir_next>
 8008820:	4603      	mov	r3, r0
 8008822:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0c5      	beq.n	80087b6 <dir_find+0x24>
 800882a:	e002      	b.n	8008832 <dir_find+0xa0>
		if (res != FR_OK) break;
 800882c:	bf00      	nop
 800882e:	e000      	b.n	8008832 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008830:	bf00      	nop

	return res;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800884a:	2101      	movs	r1, #1
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff ff1a 	bl	8008686 <dir_alloc>
 8008852:	4603      	mov	r3, r0
 8008854:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d11c      	bne.n	8008896 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	4619      	mov	r1, r3
 8008862:	68b8      	ldr	r0, [r7, #8]
 8008864:	f7ff f9ce 	bl	8007c04 <move_window>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d111      	bne.n	8008896 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	2220      	movs	r2, #32
 8008878:	2100      	movs	r1, #0
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe ffb5 	bl	80077ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a18      	ldr	r0, [r3, #32]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3324      	adds	r3, #36	; 0x24
 8008888:	220b      	movs	r2, #11
 800888a:	4619      	mov	r1, r3
 800888c:	f7fe ff8c 	bl	80077a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2201      	movs	r2, #1
 8008894:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008896:	7bfb      	ldrb	r3, [r7, #15]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2200      	movs	r2, #0
 80088ae:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d04e      	beq.n	8008956 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80088c0:	e021      	b.n	8008906 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1a      	ldr	r2, [r3, #32]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	1c59      	adds	r1, r3, #1
 80088ca:	6179      	str	r1, [r7, #20]
 80088cc:	4413      	add	r3, r2
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	d100      	bne.n	80088da <get_fileinfo+0x3a>
 80088d8:	e015      	b.n	8008906 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	2b05      	cmp	r3, #5
 80088de:	d101      	bne.n	80088e4 <get_fileinfo+0x44>
 80088e0:	23e5      	movs	r3, #229	; 0xe5
 80088e2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2b09      	cmp	r3, #9
 80088e8:	d106      	bne.n	80088f8 <get_fileinfo+0x58>
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	613a      	str	r2, [r7, #16]
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	4413      	add	r3, r2
 80088f4:	222e      	movs	r2, #46	; 0x2e
 80088f6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	613a      	str	r2, [r7, #16]
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	4413      	add	r3, r2
 8008902:	7bfa      	ldrb	r2, [r7, #15]
 8008904:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b0a      	cmp	r3, #10
 800890a:	d9da      	bls.n	80088c2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	4413      	add	r3, r2
 8008912:	3309      	adds	r3, #9
 8008914:	2200      	movs	r2, #0
 8008916:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	7ada      	ldrb	r2, [r3, #11]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	331c      	adds	r3, #28
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe fed3 	bl	80076d4 <ld_dword>
 800892e:	4602      	mov	r2, r0
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	3316      	adds	r3, #22
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe feca 	bl	80076d4 <ld_dword>
 8008940:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	b29a      	uxth	r2, r3
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	80da      	strh	r2, [r3, #6]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	0c1b      	lsrs	r3, r3, #16
 800894e:	b29a      	uxth	r2, r3
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	809a      	strh	r2, [r3, #4]
 8008954:	e000      	b.n	8008958 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008956:	bf00      	nop
}
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	3324      	adds	r3, #36	; 0x24
 8008974:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008976:	220b      	movs	r2, #11
 8008978:	2120      	movs	r1, #32
 800897a:	68b8      	ldr	r0, [r7, #8]
 800897c:	f7fe ff35 	bl	80077ea <mem_set>
	si = i = 0; ni = 8;
 8008980:	2300      	movs	r3, #0
 8008982:	613b      	str	r3, [r7, #16]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	61fb      	str	r3, [r7, #28]
 8008988:	2308      	movs	r3, #8
 800898a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	1c5a      	adds	r2, r3, #1
 8008990:	61fa      	str	r2, [r7, #28]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4413      	add	r3, r2
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800899a:	7efb      	ldrb	r3, [r7, #27]
 800899c:	2b20      	cmp	r3, #32
 800899e:	d94e      	bls.n	8008a3e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80089a0:	7efb      	ldrb	r3, [r7, #27]
 80089a2:	2b2f      	cmp	r3, #47	; 0x2f
 80089a4:	d006      	beq.n	80089b4 <create_name+0x54>
 80089a6:	7efb      	ldrb	r3, [r7, #27]
 80089a8:	2b5c      	cmp	r3, #92	; 0x5c
 80089aa:	d110      	bne.n	80089ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80089ac:	e002      	b.n	80089b4 <create_name+0x54>
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	3301      	adds	r3, #1
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	4413      	add	r3, r2
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	2b2f      	cmp	r3, #47	; 0x2f
 80089be:	d0f6      	beq.n	80089ae <create_name+0x4e>
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	4413      	add	r3, r2
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b5c      	cmp	r3, #92	; 0x5c
 80089ca:	d0f0      	beq.n	80089ae <create_name+0x4e>
			break;
 80089cc:	e038      	b.n	8008a40 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80089ce:	7efb      	ldrb	r3, [r7, #27]
 80089d0:	2b2e      	cmp	r3, #46	; 0x2e
 80089d2:	d003      	beq.n	80089dc <create_name+0x7c>
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d30c      	bcc.n	80089f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b0b      	cmp	r3, #11
 80089e0:	d002      	beq.n	80089e8 <create_name+0x88>
 80089e2:	7efb      	ldrb	r3, [r7, #27]
 80089e4:	2b2e      	cmp	r3, #46	; 0x2e
 80089e6:	d001      	beq.n	80089ec <create_name+0x8c>
 80089e8:	2306      	movs	r3, #6
 80089ea:	e044      	b.n	8008a76 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80089ec:	2308      	movs	r3, #8
 80089ee:	613b      	str	r3, [r7, #16]
 80089f0:	230b      	movs	r3, #11
 80089f2:	617b      	str	r3, [r7, #20]
			continue;
 80089f4:	e022      	b.n	8008a3c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80089f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	da04      	bge.n	8008a08 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80089fe:	7efb      	ldrb	r3, [r7, #27]
 8008a00:	3b80      	subs	r3, #128	; 0x80
 8008a02:	4a1f      	ldr	r2, [pc, #124]	; (8008a80 <create_name+0x120>)
 8008a04:	5cd3      	ldrb	r3, [r2, r3]
 8008a06:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008a08:	7efb      	ldrb	r3, [r7, #27]
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	481d      	ldr	r0, [pc, #116]	; (8008a84 <create_name+0x124>)
 8008a0e:	f7fe ff2e 	bl	800786e <chk_chr>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <create_name+0xbc>
 8008a18:	2306      	movs	r3, #6
 8008a1a:	e02c      	b.n	8008a76 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008a1c:	7efb      	ldrb	r3, [r7, #27]
 8008a1e:	2b60      	cmp	r3, #96	; 0x60
 8008a20:	d905      	bls.n	8008a2e <create_name+0xce>
 8008a22:	7efb      	ldrb	r3, [r7, #27]
 8008a24:	2b7a      	cmp	r3, #122	; 0x7a
 8008a26:	d802      	bhi.n	8008a2e <create_name+0xce>
 8008a28:	7efb      	ldrb	r3, [r7, #27]
 8008a2a:	3b20      	subs	r3, #32
 8008a2c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	613a      	str	r2, [r7, #16]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	4413      	add	r3, r2
 8008a38:	7efa      	ldrb	r2, [r7, #27]
 8008a3a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008a3c:	e7a6      	b.n	800898c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008a3e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	441a      	add	r2, r3
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <create_name+0xf4>
 8008a50:	2306      	movs	r3, #6
 8008a52:	e010      	b.n	8008a76 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2be5      	cmp	r3, #229	; 0xe5
 8008a5a:	d102      	bne.n	8008a62 <create_name+0x102>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2205      	movs	r2, #5
 8008a60:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008a62:	7efb      	ldrb	r3, [r7, #27]
 8008a64:	2b20      	cmp	r3, #32
 8008a66:	d801      	bhi.n	8008a6c <create_name+0x10c>
 8008a68:	2204      	movs	r2, #4
 8008a6a:	e000      	b.n	8008a6e <create_name+0x10e>
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	330b      	adds	r3, #11
 8008a72:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008a74:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3720      	adds	r7, #32
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	0800c6a4 	.word	0x0800c6a4
 8008a84:	0800c62c 	.word	0x0800c62c

08008a88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008a9c:	e002      	b.n	8008aa4 <follow_path+0x1c>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b2f      	cmp	r3, #47	; 0x2f
 8008aaa:	d0f8      	beq.n	8008a9e <follow_path+0x16>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b5c      	cmp	r3, #92	; 0x5c
 8008ab2:	d0f4      	beq.n	8008a9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b1f      	cmp	r3, #31
 8008ac0:	d80a      	bhi.n	8008ad8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2280      	movs	r2, #128	; 0x80
 8008ac6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008aca:	2100      	movs	r1, #0
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7ff fc7b 	bl	80083c8 <dir_sdi>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	75fb      	strb	r3, [r7, #23]
 8008ad6:	e048      	b.n	8008b6a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ad8:	463b      	mov	r3, r7
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff ff3f 	bl	8008960 <create_name>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008ae6:	7dfb      	ldrb	r3, [r7, #23]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d139      	bne.n	8008b60 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff fe50 	bl	8008792 <dir_find>
 8008af2:	4603      	mov	r3, r0
 8008af4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008afc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00a      	beq.n	8008b1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d12c      	bne.n	8008b64 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d127      	bne.n	8008b64 <follow_path+0xdc>
 8008b14:	2305      	movs	r3, #5
 8008b16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008b18:	e024      	b.n	8008b64 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008b1a:	7afb      	ldrb	r3, [r7, #11]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d121      	bne.n	8008b68 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	799b      	ldrb	r3, [r3, #6]
 8008b28:	f003 0310 	and.w	r3, r3, #16
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d102      	bne.n	8008b36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008b30:	2305      	movs	r3, #5
 8008b32:	75fb      	strb	r3, [r7, #23]
 8008b34:	e019      	b.n	8008b6a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	8992      	ldrh	r2, [r2, #12]
 8008b44:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b48:	fb00 f202 	mul.w	r2, r0, r2
 8008b4c:	1a9b      	subs	r3, r3, r2
 8008b4e:	440b      	add	r3, r1
 8008b50:	4619      	mov	r1, r3
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff fdde 	bl	8008714 <ld_clust>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008b5e:	e7bb      	b.n	8008ad8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008b60:	bf00      	nop
 8008b62:	e002      	b.n	8008b6a <follow_path+0xe2>
				break;
 8008b64:	bf00      	nop
 8008b66:	e000      	b.n	8008b6a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008b68:	bf00      	nop
			}
		}
	}

	return res;
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b80:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d031      	beq.n	8008bee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	e002      	b.n	8008b98 <get_ldnumber+0x24>
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	3301      	adds	r3, #1
 8008b96:	617b      	str	r3, [r7, #20]
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b20      	cmp	r3, #32
 8008b9e:	d903      	bls.n	8008ba8 <get_ldnumber+0x34>
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b3a      	cmp	r3, #58	; 0x3a
 8008ba6:	d1f4      	bne.n	8008b92 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	2b3a      	cmp	r3, #58	; 0x3a
 8008bae:	d11c      	bne.n	8008bea <get_ldnumber+0x76>
			tp = *path;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	60fa      	str	r2, [r7, #12]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	3b30      	subs	r3, #48	; 0x30
 8008bc0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b09      	cmp	r3, #9
 8008bc6:	d80e      	bhi.n	8008be6 <get_ldnumber+0x72>
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d10a      	bne.n	8008be6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d107      	bne.n	8008be6 <get_ldnumber+0x72>
					vol = (int)i;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	617b      	str	r3, [r7, #20]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	e002      	b.n	8008bf0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008bea:	2300      	movs	r3, #0
 8008bec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008bee:	693b      	ldr	r3, [r7, #16]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	371c      	adds	r7, #28
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	70da      	strb	r2, [r3, #3]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c12:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7fe fff4 	bl	8007c04 <move_window>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <check_fs+0x2a>
 8008c22:	2304      	movs	r3, #4
 8008c24:	e038      	b.n	8008c98 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3334      	adds	r3, #52	; 0x34
 8008c2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fe fd38 	bl	80076a4 <ld_word>
 8008c34:	4603      	mov	r3, r0
 8008c36:	461a      	mov	r2, r3
 8008c38:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d001      	beq.n	8008c44 <check_fs+0x48>
 8008c40:	2303      	movs	r3, #3
 8008c42:	e029      	b.n	8008c98 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c4a:	2be9      	cmp	r3, #233	; 0xe9
 8008c4c:	d009      	beq.n	8008c62 <check_fs+0x66>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c54:	2beb      	cmp	r3, #235	; 0xeb
 8008c56:	d11e      	bne.n	8008c96 <check_fs+0x9a>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008c5e:	2b90      	cmp	r3, #144	; 0x90
 8008c60:	d119      	bne.n	8008c96 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3334      	adds	r3, #52	; 0x34
 8008c66:	3336      	adds	r3, #54	; 0x36
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fe fd33 	bl	80076d4 <ld_dword>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c74:	4a0a      	ldr	r2, [pc, #40]	; (8008ca0 <check_fs+0xa4>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d101      	bne.n	8008c7e <check_fs+0x82>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e00c      	b.n	8008c98 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3334      	adds	r3, #52	; 0x34
 8008c82:	3352      	adds	r3, #82	; 0x52
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fe fd25 	bl	80076d4 <ld_dword>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	4a05      	ldr	r2, [pc, #20]	; (8008ca4 <check_fs+0xa8>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d101      	bne.n	8008c96 <check_fs+0x9a>
 8008c92:	2300      	movs	r3, #0
 8008c94:	e000      	b.n	8008c98 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008c96:	2302      	movs	r3, #2
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	00544146 	.word	0x00544146
 8008ca4:	33544146 	.word	0x33544146

08008ca8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b096      	sub	sp, #88	; 0x58
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f7ff ff59 	bl	8008b74 <get_ldnumber>
 8008cc2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	da01      	bge.n	8008cce <find_volume+0x26>
 8008cca:	230b      	movs	r3, #11
 8008ccc:	e262      	b.n	8009194 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008cce:	4a9f      	ldr	r2, [pc, #636]	; (8008f4c <find_volume+0x2a4>)
 8008cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cd6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <find_volume+0x3a>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	e258      	b.n	8009194 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ce6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008ce8:	79fb      	ldrb	r3, [r7, #7]
 8008cea:	f023 0301 	bic.w	r3, r3, #1
 8008cee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d01a      	beq.n	8008d2e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfa:	785b      	ldrb	r3, [r3, #1]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fe fc33 	bl	8007568 <disk_status>
 8008d02:	4603      	mov	r3, r0
 8008d04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008d08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10c      	bne.n	8008d2e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008d14:	79fb      	ldrb	r3, [r7, #7]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d007      	beq.n	8008d2a <find_volume+0x82>
 8008d1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d1e:	f003 0304 	and.w	r3, r3, #4
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008d26:	230a      	movs	r3, #10
 8008d28:	e234      	b.n	8009194 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e232      	b.n	8009194 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	2200      	movs	r2, #0
 8008d32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3e:	785b      	ldrb	r3, [r3, #1]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fe fc2b 	bl	800759c <disk_initialize>
 8008d46:	4603      	mov	r3, r0
 8008d48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008d4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e21b      	b.n	8009194 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d007      	beq.n	8008d72 <find_volume+0xca>
 8008d62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d66:	f003 0304 	and.w	r3, r3, #4
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008d6e:	230a      	movs	r3, #10
 8008d70:	e210      	b.n	8009194 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d74:	7858      	ldrb	r0, [r3, #1]
 8008d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d78:	330c      	adds	r3, #12
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	2102      	movs	r1, #2
 8008d7e:	f7fe fc73 	bl	8007668 <disk_ioctl>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <find_volume+0xe4>
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e203      	b.n	8009194 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	899b      	ldrh	r3, [r3, #12]
 8008d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d94:	d80d      	bhi.n	8008db2 <find_volume+0x10a>
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	899b      	ldrh	r3, [r3, #12]
 8008d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d9e:	d308      	bcc.n	8008db2 <find_volume+0x10a>
 8008da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da2:	899b      	ldrh	r3, [r3, #12]
 8008da4:	461a      	mov	r2, r3
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	899b      	ldrh	r3, [r3, #12]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	4013      	ands	r3, r2
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <find_volume+0x10e>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e1ee      	b.n	8009194 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008dba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008dbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008dbe:	f7ff ff1d 	bl	8008bfc <check_fs>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008dc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d149      	bne.n	8008e64 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8008dd4:	e01e      	b.n	8008e14 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dde:	011b      	lsls	r3, r3, #4
 8008de0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008de4:	4413      	add	r3, r2
 8008de6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dea:	3304      	adds	r3, #4
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d006      	beq.n	8008e00 <find_volume+0x158>
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	3308      	adds	r3, #8
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fe fc6c 	bl	80076d4 <ld_dword>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	e000      	b.n	8008e02 <find_volume+0x15a>
 8008e00:	2200      	movs	r2, #0
 8008e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	3358      	adds	r3, #88	; 0x58
 8008e08:	443b      	add	r3, r7
 8008e0a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e10:	3301      	adds	r3, #1
 8008e12:	643b      	str	r3, [r7, #64]	; 0x40
 8008e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d9dd      	bls.n	8008dd6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <find_volume+0x182>
 8008e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e26:	3b01      	subs	r3, #1
 8008e28:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	3358      	adds	r3, #88	; 0x58
 8008e30:	443b      	add	r3, r7
 8008e32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008e36:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d005      	beq.n	8008e4a <find_volume+0x1a2>
 8008e3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e42:	f7ff fedb 	bl	8008bfc <check_fs>
 8008e46:	4603      	mov	r3, r0
 8008e48:	e000      	b.n	8008e4c <find_volume+0x1a4>
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008e50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d905      	bls.n	8008e64 <find_volume+0x1bc>
 8008e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d9e2      	bls.n	8008e2a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008e64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d101      	bne.n	8008e70 <find_volume+0x1c8>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e191      	b.n	8009194 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008e70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d901      	bls.n	8008e7c <find_volume+0x1d4>
 8008e78:	230d      	movs	r3, #13
 8008e7a:	e18b      	b.n	8009194 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	3334      	adds	r3, #52	; 0x34
 8008e80:	330b      	adds	r3, #11
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fc0e 	bl	80076a4 <ld_word>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	899b      	ldrh	r3, [r3, #12]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d001      	beq.n	8008e98 <find_volume+0x1f0>
 8008e94:	230d      	movs	r3, #13
 8008e96:	e17d      	b.n	8009194 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	3334      	adds	r3, #52	; 0x34
 8008e9c:	3316      	adds	r3, #22
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe fc00 	bl	80076a4 <ld_word>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d106      	bne.n	8008ebc <find_volume+0x214>
 8008eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb0:	3334      	adds	r3, #52	; 0x34
 8008eb2:	3324      	adds	r3, #36	; 0x24
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe fc0d 	bl	80076d4 <ld_dword>
 8008eba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ec0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	789b      	ldrb	r3, [r3, #2]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d005      	beq.n	8008ee0 <find_volume+0x238>
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed6:	789b      	ldrb	r3, [r3, #2]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d001      	beq.n	8008ee0 <find_volume+0x238>
 8008edc:	230d      	movs	r3, #13
 8008ede:	e159      	b.n	8009194 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee2:	789b      	ldrb	r3, [r3, #2]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ee8:	fb02 f303 	mul.w	r3, r2, r3
 8008eec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efc:	895b      	ldrh	r3, [r3, #10]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d008      	beq.n	8008f14 <find_volume+0x26c>
 8008f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f04:	895b      	ldrh	r3, [r3, #10]
 8008f06:	461a      	mov	r2, r3
 8008f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0a:	895b      	ldrh	r3, [r3, #10]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	4013      	ands	r3, r2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <find_volume+0x270>
 8008f14:	230d      	movs	r3, #13
 8008f16:	e13d      	b.n	8009194 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1a:	3334      	adds	r3, #52	; 0x34
 8008f1c:	3311      	adds	r3, #17
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fbc0 	bl	80076a4 <ld_word>
 8008f24:	4603      	mov	r3, r0
 8008f26:	461a      	mov	r2, r3
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2e:	891b      	ldrh	r3, [r3, #8]
 8008f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f32:	8992      	ldrh	r2, [r2, #12]
 8008f34:	0952      	lsrs	r2, r2, #5
 8008f36:	b292      	uxth	r2, r2
 8008f38:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f3c:	fb01 f202 	mul.w	r2, r1, r2
 8008f40:	1a9b      	subs	r3, r3, r2
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <find_volume+0x2a8>
 8008f48:	230d      	movs	r3, #13
 8008f4a:	e123      	b.n	8009194 <find_volume+0x4ec>
 8008f4c:	20002380 	.word	0x20002380

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	3334      	adds	r3, #52	; 0x34
 8008f54:	3313      	adds	r3, #19
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fe fba4 	bl	80076a4 <ld_word>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <find_volume+0x2cc>
 8008f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f68:	3334      	adds	r3, #52	; 0x34
 8008f6a:	3320      	adds	r3, #32
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fe fbb1 	bl	80076d4 <ld_dword>
 8008f72:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	3334      	adds	r3, #52	; 0x34
 8008f78:	330e      	adds	r3, #14
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe fb92 	bl	80076a4 <ld_word>
 8008f80:	4603      	mov	r3, r0
 8008f82:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008f84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <find_volume+0x2e6>
 8008f8a:	230d      	movs	r3, #13
 8008f8c:	e102      	b.n	8009194 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008f8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f92:	4413      	add	r3, r2
 8008f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f96:	8911      	ldrh	r1, [r2, #8]
 8008f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f9a:	8992      	ldrh	r2, [r2, #12]
 8008f9c:	0952      	lsrs	r2, r2, #5
 8008f9e:	b292      	uxth	r2, r2
 8008fa0:	fbb1 f2f2 	udiv	r2, r1, r2
 8008fa4:	b292      	uxth	r2, r2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d201      	bcs.n	8008fb6 <find_volume+0x30e>
 8008fb2:	230d      	movs	r3, #13
 8008fb4:	e0ee      	b.n	8009194 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fbe:	8952      	ldrh	r2, [r2, #10]
 8008fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fc4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <find_volume+0x328>
 8008fcc:	230d      	movs	r3, #13
 8008fce:	e0e1      	b.n	8009194 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d802      	bhi.n	8008fe6 <find_volume+0x33e>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d802      	bhi.n	8008ff6 <find_volume+0x34e>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	1c9a      	adds	r2, r3, #2
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009000:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009002:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009004:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009008:	441a      	add	r2, r3
 800900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800900e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	441a      	add	r2, r3
 8009014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009016:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800901c:	2b03      	cmp	r3, #3
 800901e:	d11e      	bne.n	800905e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009022:	3334      	adds	r3, #52	; 0x34
 8009024:	332a      	adds	r3, #42	; 0x2a
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fb3c 	bl	80076a4 <ld_word>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <find_volume+0x38e>
 8009032:	230d      	movs	r3, #13
 8009034:	e0ae      	b.n	8009194 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	891b      	ldrh	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <find_volume+0x39a>
 800903e:	230d      	movs	r3, #13
 8009040:	e0a8      	b.n	8009194 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	3334      	adds	r3, #52	; 0x34
 8009046:	332c      	adds	r3, #44	; 0x2c
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe fb43 	bl	80076d4 <ld_dword>
 800904e:	4602      	mov	r2, r0
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	647b      	str	r3, [r7, #68]	; 0x44
 800905c:	e01f      	b.n	800909e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	891b      	ldrh	r3, [r3, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <find_volume+0x3c2>
 8009066:	230d      	movs	r3, #13
 8009068:	e094      	b.n	8009194 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800906e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009070:	441a      	add	r2, r3
 8009072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009074:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009076:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800907a:	2b02      	cmp	r3, #2
 800907c:	d103      	bne.n	8009086 <find_volume+0x3de>
 800907e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	e00a      	b.n	800909c <find_volume+0x3f4>
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	699a      	ldr	r2, [r3, #24]
 800908a:	4613      	mov	r3, r2
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	4413      	add	r3, r2
 8009090:	085a      	lsrs	r2, r3, #1
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800909c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800909e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a0:	69da      	ldr	r2, [r3, #28]
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	899b      	ldrh	r3, [r3, #12]
 80090a6:	4619      	mov	r1, r3
 80090a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090aa:	440b      	add	r3, r1
 80090ac:	3b01      	subs	r3, #1
 80090ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090b0:	8989      	ldrh	r1, [r1, #12]
 80090b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d201      	bcs.n	80090be <find_volume+0x416>
 80090ba:	230d      	movs	r3, #13
 80090bc:	e06a      	b.n	8009194 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80090be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	615a      	str	r2, [r3, #20]
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	695a      	ldr	r2, [r3, #20]
 80090ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090cc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80090ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d0:	2280      	movs	r2, #128	; 0x80
 80090d2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80090d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d149      	bne.n	8009170 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80090dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090de:	3334      	adds	r3, #52	; 0x34
 80090e0:	3330      	adds	r3, #48	; 0x30
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fade 	bl	80076a4 <ld_word>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d140      	bne.n	8009170 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80090ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090f0:	3301      	adds	r3, #1
 80090f2:	4619      	mov	r1, r3
 80090f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090f6:	f7fe fd85 	bl	8007c04 <move_window>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d137      	bne.n	8009170 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009102:	2200      	movs	r2, #0
 8009104:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	3334      	adds	r3, #52	; 0x34
 800910a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe fac8 	bl	80076a4 <ld_word>
 8009114:	4603      	mov	r3, r0
 8009116:	461a      	mov	r2, r3
 8009118:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800911c:	429a      	cmp	r2, r3
 800911e:	d127      	bne.n	8009170 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009122:	3334      	adds	r3, #52	; 0x34
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fad5 	bl	80076d4 <ld_dword>
 800912a:	4603      	mov	r3, r0
 800912c:	4a1b      	ldr	r2, [pc, #108]	; (800919c <find_volume+0x4f4>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d11e      	bne.n	8009170 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009134:	3334      	adds	r3, #52	; 0x34
 8009136:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe faca 	bl	80076d4 <ld_dword>
 8009140:	4603      	mov	r3, r0
 8009142:	4a17      	ldr	r2, [pc, #92]	; (80091a0 <find_volume+0x4f8>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d113      	bne.n	8009170 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	3334      	adds	r3, #52	; 0x34
 800914c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009150:	4618      	mov	r0, r3
 8009152:	f7fe fabf 	bl	80076d4 <ld_dword>
 8009156:	4602      	mov	r2, r0
 8009158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800915c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915e:	3334      	adds	r3, #52	; 0x34
 8009160:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe fab5 	bl	80076d4 <ld_dword>
 800916a:	4602      	mov	r2, r0
 800916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009176:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009178:	4b0a      	ldr	r3, [pc, #40]	; (80091a4 <find_volume+0x4fc>)
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	3301      	adds	r3, #1
 800917e:	b29a      	uxth	r2, r3
 8009180:	4b08      	ldr	r3, [pc, #32]	; (80091a4 <find_volume+0x4fc>)
 8009182:	801a      	strh	r2, [r3, #0]
 8009184:	4b07      	ldr	r3, [pc, #28]	; (80091a4 <find_volume+0x4fc>)
 8009186:	881a      	ldrh	r2, [r3, #0]
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800918c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800918e:	f7fe fcd1 	bl	8007b34 <clear_lock>
#endif
	return FR_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3758      	adds	r7, #88	; 0x58
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	41615252 	.word	0x41615252
 80091a0:	61417272 	.word	0x61417272
 80091a4:	20002384 	.word	0x20002384

080091a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80091b2:	2309      	movs	r3, #9
 80091b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d01c      	beq.n	80091f6 <validate+0x4e>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d018      	beq.n	80091f6 <validate+0x4e>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d013      	beq.n	80091f6 <validate+0x4e>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	889a      	ldrh	r2, [r3, #4]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	88db      	ldrh	r3, [r3, #6]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d10c      	bne.n	80091f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	785b      	ldrb	r3, [r3, #1]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe f9c0 	bl	8007568 <disk_status>
 80091e8:	4603      	mov	r3, r0
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <validate+0x4e>
			res = FR_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <validate+0x5a>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	e000      	b.n	8009204 <validate+0x5c>
 8009202:	2300      	movs	r3, #0
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	6013      	str	r3, [r2, #0]
	return res;
 8009208:	7bfb      	ldrb	r3, [r7, #15]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4613      	mov	r3, r2
 8009220:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009226:	f107 0310 	add.w	r3, r7, #16
 800922a:	4618      	mov	r0, r3
 800922c:	f7ff fca2 	bl	8008b74 <get_ldnumber>
 8009230:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	da01      	bge.n	800923c <f_mount+0x28>
 8009238:	230b      	movs	r3, #11
 800923a:	e02b      	b.n	8009294 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800923c:	4a17      	ldr	r2, [pc, #92]	; (800929c <f_mount+0x88>)
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009244:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d005      	beq.n	8009258 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800924c:	69b8      	ldr	r0, [r7, #24]
 800924e:	f7fe fc71 	bl	8007b34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	490d      	ldr	r1, [pc, #52]	; (800929c <f_mount+0x88>)
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d002      	beq.n	800927a <f_mount+0x66>
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d001      	beq.n	800927e <f_mount+0x6a>
 800927a:	2300      	movs	r3, #0
 800927c:	e00a      	b.n	8009294 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800927e:	f107 010c 	add.w	r1, r7, #12
 8009282:	f107 0308 	add.w	r3, r7, #8
 8009286:	2200      	movs	r2, #0
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff fd0d 	bl	8008ca8 <find_volume>
 800928e:	4603      	mov	r3, r0
 8009290:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009292:	7dfb      	ldrb	r3, [r7, #23]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3720      	adds	r7, #32
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	20002380 	.word	0x20002380

080092a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b098      	sub	sp, #96	; 0x60
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	4613      	mov	r3, r2
 80092ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <f_open+0x18>
 80092b4:	2309      	movs	r3, #9
 80092b6:	e1bb      	b.n	8009630 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80092c0:	79fa      	ldrb	r2, [r7, #7]
 80092c2:	f107 0110 	add.w	r1, r7, #16
 80092c6:	f107 0308 	add.w	r3, r7, #8
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7ff fcec 	bl	8008ca8 <find_volume>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80092d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f040 819f 	bne.w	800961e <f_open+0x37e>
		dj.obj.fs = fs;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	f107 0314 	add.w	r3, r7, #20
 80092ea:	4611      	mov	r1, r2
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7ff fbcb 	bl	8008a88 <follow_path>
 80092f2:	4603      	mov	r3, r0
 80092f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80092f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d11a      	bne.n	8009336 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009300:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009304:	b25b      	sxtb	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	da03      	bge.n	8009312 <f_open+0x72>
				res = FR_INVALID_NAME;
 800930a:	2306      	movs	r3, #6
 800930c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009310:	e011      	b.n	8009336 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009312:	79fb      	ldrb	r3, [r7, #7]
 8009314:	f023 0301 	bic.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	bf14      	ite	ne
 800931c:	2301      	movne	r3, #1
 800931e:	2300      	moveq	r3, #0
 8009320:	b2db      	uxtb	r3, r3
 8009322:	461a      	mov	r2, r3
 8009324:	f107 0314 	add.w	r3, r7, #20
 8009328:	4611      	mov	r1, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe faba 	bl	80078a4 <chk_lock>
 8009330:	4603      	mov	r3, r0
 8009332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009336:	79fb      	ldrb	r3, [r7, #7]
 8009338:	f003 031c 	and.w	r3, r3, #28
 800933c:	2b00      	cmp	r3, #0
 800933e:	d07f      	beq.n	8009440 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009340:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009344:	2b00      	cmp	r3, #0
 8009346:	d017      	beq.n	8009378 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800934c:	2b04      	cmp	r3, #4
 800934e:	d10e      	bne.n	800936e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009350:	f7fe fb04 	bl	800795c <enq_lock>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d006      	beq.n	8009368 <f_open+0xc8>
 800935a:	f107 0314 	add.w	r3, r7, #20
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff fa6c 	bl	800883c <dir_register>
 8009364:	4603      	mov	r3, r0
 8009366:	e000      	b.n	800936a <f_open+0xca>
 8009368:	2312      	movs	r3, #18
 800936a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	f043 0308 	orr.w	r3, r3, #8
 8009374:	71fb      	strb	r3, [r7, #7]
 8009376:	e010      	b.n	800939a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009378:	7ebb      	ldrb	r3, [r7, #26]
 800937a:	f003 0311 	and.w	r3, r3, #17
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <f_open+0xea>
					res = FR_DENIED;
 8009382:	2307      	movs	r3, #7
 8009384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009388:	e007      	b.n	800939a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <f_open+0xfa>
 8009394:	2308      	movs	r3, #8
 8009396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800939a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d168      	bne.n	8009474 <f_open+0x1d4>
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	f003 0308 	and.w	r3, r3, #8
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d063      	beq.n	8009474 <f_open+0x1d4>
				dw = GET_FATTIME();
 80093ac:	f7fd ff22 	bl	80071f4 <get_fattime>
 80093b0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80093b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b4:	330e      	adds	r3, #14
 80093b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fe f9c9 	bl	8007750 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80093be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c0:	3316      	adds	r3, #22
 80093c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe f9c3 	bl	8007750 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80093ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093cc:	330b      	adds	r3, #11
 80093ce:	2220      	movs	r2, #32
 80093d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093d6:	4611      	mov	r1, r2
 80093d8:	4618      	mov	r0, r3
 80093da:	f7ff f99b 	bl	8008714 <ld_clust>
 80093de:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093e4:	2200      	movs	r2, #0
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7ff f9b3 	bl	8008752 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80093ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ee:	331c      	adds	r3, #28
 80093f0:	2100      	movs	r1, #0
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe f9ac 	bl	8007750 <st_dword>
					fs->wflag = 1;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	2201      	movs	r2, #1
 80093fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80093fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009400:	2b00      	cmp	r3, #0
 8009402:	d037      	beq.n	8009474 <f_open+0x1d4>
						dw = fs->winsect;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009408:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800940a:	f107 0314 	add.w	r3, r7, #20
 800940e:	2200      	movs	r2, #0
 8009410:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009412:	4618      	mov	r0, r3
 8009414:	f7fe fea3 	bl	800815e <remove_chain>
 8009418:	4603      	mov	r3, r0
 800941a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800941e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009422:	2b00      	cmp	r3, #0
 8009424:	d126      	bne.n	8009474 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fbea 	bl	8007c04 <move_window>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800943a:	3a01      	subs	r2, #1
 800943c:	611a      	str	r2, [r3, #16]
 800943e:	e019      	b.n	8009474 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009444:	2b00      	cmp	r3, #0
 8009446:	d115      	bne.n	8009474 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009448:	7ebb      	ldrb	r3, [r7, #26]
 800944a:	f003 0310 	and.w	r3, r3, #16
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009452:	2304      	movs	r3, #4
 8009454:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009458:	e00c      	b.n	8009474 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d007      	beq.n	8009474 <f_open+0x1d4>
 8009464:	7ebb      	ldrb	r3, [r7, #26]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <f_open+0x1d4>
						res = FR_DENIED;
 800946e:	2307      	movs	r3, #7
 8009470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009478:	2b00      	cmp	r3, #0
 800947a:	d128      	bne.n	80094ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	f003 0308 	and.w	r3, r3, #8
 8009482:	2b00      	cmp	r3, #0
 8009484:	d003      	beq.n	800948e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800948c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	f023 0301 	bic.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bf14      	ite	ne
 80094a6:	2301      	movne	r3, #1
 80094a8:	2300      	moveq	r3, #0
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	f107 0314 	add.w	r3, r7, #20
 80094b2:	4611      	mov	r1, r2
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fe fa73 	bl	80079a0 <inc_lock>
 80094ba:	4602      	mov	r2, r0
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d102      	bne.n	80094ce <f_open+0x22e>
 80094c8:	2302      	movs	r3, #2
 80094ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80094ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f040 80a3 	bne.w	800961e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094dc:	4611      	mov	r1, r2
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff f918 	bl	8008714 <ld_clust>
 80094e4:	4602      	mov	r2, r0
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80094ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ec:	331c      	adds	r3, #28
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe f8f0 	bl	80076d4 <ld_dword>
 80094f4:	4602      	mov	r2, r0
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	88da      	ldrh	r2, [r3, #6]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	79fa      	ldrb	r2, [r7, #7]
 8009512:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3330      	adds	r3, #48	; 0x30
 800952a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800952e:	2100      	movs	r1, #0
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe f95a 	bl	80077ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	f003 0320 	and.w	r3, r3, #32
 800953c:	2b00      	cmp	r3, #0
 800953e:	d06e      	beq.n	800961e <f_open+0x37e>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d06a      	beq.n	800961e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	68da      	ldr	r2, [r3, #12]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	895b      	ldrh	r3, [r3, #10]
 8009554:	461a      	mov	r2, r3
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	899b      	ldrh	r3, [r3, #12]
 800955a:	fb02 f303 	mul.w	r3, r2, r3
 800955e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	657b      	str	r3, [r7, #84]	; 0x54
 800956c:	e016      	b.n	800959c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fc03 	bl	8007d7e <get_fat>
 8009578:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800957a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800957c:	2b01      	cmp	r3, #1
 800957e:	d802      	bhi.n	8009586 <f_open+0x2e6>
 8009580:	2302      	movs	r3, #2
 8009582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958c:	d102      	bne.n	8009594 <f_open+0x2f4>
 800958e:	2301      	movs	r3, #1
 8009590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009594:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	657b      	str	r3, [r7, #84]	; 0x54
 800959c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d103      	bne.n	80095ac <f_open+0x30c>
 80095a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d8e0      	bhi.n	800956e <f_open+0x2ce>
				}
				fp->clust = clst;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80095b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d131      	bne.n	800961e <f_open+0x37e>
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	899b      	ldrh	r3, [r3, #12]
 80095be:	461a      	mov	r2, r3
 80095c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80095c6:	fb01 f202 	mul.w	r2, r1, r2
 80095ca:	1a9b      	subs	r3, r3, r2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d026      	beq.n	800961e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fe fbb3 	bl	8007d40 <clust2sect>
 80095da:	6478      	str	r0, [r7, #68]	; 0x44
 80095dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d103      	bne.n	80095ea <f_open+0x34a>
						res = FR_INT_ERR;
 80095e2:	2302      	movs	r3, #2
 80095e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80095e8:	e019      	b.n	800961e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	899b      	ldrh	r3, [r3, #12]
 80095ee:	461a      	mov	r2, r3
 80095f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80095f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095f8:	441a      	add	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	7858      	ldrb	r0, [r3, #1]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6a1a      	ldr	r2, [r3, #32]
 800960c:	2301      	movs	r3, #1
 800960e:	f7fd ffeb 	bl	80075e8 <disk_read>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <f_open+0x37e>
 8009618:	2301      	movs	r3, #1
 800961a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800961e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009622:	2b00      	cmp	r3, #0
 8009624:	d002      	beq.n	800962c <f_open+0x38c>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800962c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009630:	4618      	mov	r0, r3
 8009632:	3760      	adds	r7, #96	; 0x60
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08c      	sub	sp, #48	; 0x30
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2200      	movs	r2, #0
 800964e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f107 0210 	add.w	r2, r7, #16
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f7ff fda5 	bl	80091a8 <validate>
 800965e:	4603      	mov	r3, r0
 8009660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009668:	2b00      	cmp	r3, #0
 800966a:	d107      	bne.n	800967c <f_write+0x44>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	7d5b      	ldrb	r3, [r3, #21]
 8009670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009674:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <f_write+0x4a>
 800967c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009680:	e16a      	b.n	8009958 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	7d1b      	ldrb	r3, [r3, #20]
 8009686:	f003 0302 	and.w	r3, r3, #2
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <f_write+0x5a>
 800968e:	2307      	movs	r3, #7
 8009690:	e162      	b.n	8009958 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	699a      	ldr	r2, [r3, #24]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	441a      	add	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	429a      	cmp	r2, r3
 80096a0:	f080 814c 	bcs.w	800993c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	43db      	mvns	r3, r3
 80096aa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80096ac:	e146      	b.n	800993c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	8992      	ldrh	r2, [r2, #12]
 80096b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80096ba:	fb01 f202 	mul.w	r2, r1, r2
 80096be:	1a9b      	subs	r3, r3, r2
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f040 80f1 	bne.w	80098a8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	8992      	ldrh	r2, [r2, #12]
 80096ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	8952      	ldrh	r2, [r2, #10]
 80096d6:	3a01      	subs	r2, #1
 80096d8:	4013      	ands	r3, r2
 80096da:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d143      	bne.n	800976a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10c      	bne.n	8009704 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d11a      	bne.n	800972c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2100      	movs	r1, #0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe fd94 	bl	8008228 <create_chain>
 8009700:	62b8      	str	r0, [r7, #40]	; 0x28
 8009702:	e013      	b.n	800972c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009708:	2b00      	cmp	r3, #0
 800970a:	d007      	beq.n	800971c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	4619      	mov	r1, r3
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7fe fe20 	bl	8008358 <clmt_clust>
 8009718:	62b8      	str	r0, [r7, #40]	; 0x28
 800971a:	e007      	b.n	800972c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	4619      	mov	r1, r3
 8009724:	4610      	mov	r0, r2
 8009726:	f7fe fd7f 	bl	8008228 <create_chain>
 800972a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 8109 	beq.w	8009946 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	2b01      	cmp	r3, #1
 8009738:	d104      	bne.n	8009744 <f_write+0x10c>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2202      	movs	r2, #2
 800973e:	755a      	strb	r2, [r3, #21]
 8009740:	2302      	movs	r3, #2
 8009742:	e109      	b.n	8009958 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974a:	d104      	bne.n	8009756 <f_write+0x11e>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	755a      	strb	r2, [r3, #21]
 8009752:	2301      	movs	r3, #1
 8009754:	e100      	b.n	8009958 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800975a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d102      	bne.n	800976a <f_write+0x132>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009768:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	7d1b      	ldrb	r3, [r3, #20]
 800976e:	b25b      	sxtb	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	da18      	bge.n	80097a6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	7858      	ldrb	r0, [r3, #1]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6a1a      	ldr	r2, [r3, #32]
 8009782:	2301      	movs	r3, #1
 8009784:	f7fd ff50 	bl	8007628 <disk_write>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d004      	beq.n	8009798 <f_write+0x160>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2201      	movs	r2, #1
 8009792:	755a      	strb	r2, [r3, #21]
 8009794:	2301      	movs	r3, #1
 8009796:	e0df      	b.n	8009958 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	7d1b      	ldrb	r3, [r3, #20]
 800979c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	4619      	mov	r1, r3
 80097ae:	4610      	mov	r0, r2
 80097b0:	f7fe fac6 	bl	8007d40 <clust2sect>
 80097b4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <f_write+0x18e>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2202      	movs	r2, #2
 80097c0:	755a      	strb	r2, [r3, #21]
 80097c2:	2302      	movs	r3, #2
 80097c4:	e0c8      	b.n	8009958 <f_write+0x320>
			sect += csect;
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	4413      	add	r3, r2
 80097cc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	899b      	ldrh	r3, [r3, #12]
 80097d2:	461a      	mov	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80097da:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d043      	beq.n	800986a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80097e2:	69ba      	ldr	r2, [r7, #24]
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	4413      	add	r3, r2
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	8952      	ldrh	r2, [r2, #10]
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d905      	bls.n	80097fc <f_write+0x1c4>
					cc = fs->csize - csect;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	895b      	ldrh	r3, [r3, #10]
 80097f4:	461a      	mov	r2, r3
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	7858      	ldrb	r0, [r3, #1]
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	69f9      	ldr	r1, [r7, #28]
 8009806:	f7fd ff0f 	bl	8007628 <disk_write>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d004      	beq.n	800981a <f_write+0x1e2>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2201      	movs	r2, #1
 8009814:	755a      	strb	r2, [r3, #21]
 8009816:	2301      	movs	r3, #1
 8009818:	e09e      	b.n	8009958 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6a1a      	ldr	r2, [r3, #32]
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	6a3a      	ldr	r2, [r7, #32]
 8009824:	429a      	cmp	r2, r3
 8009826:	d918      	bls.n	800985a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a1a      	ldr	r2, [r3, #32]
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	8992      	ldrh	r2, [r2, #12]
 800983a:	fb02 f303 	mul.w	r3, r2, r3
 800983e:	69fa      	ldr	r2, [r7, #28]
 8009840:	18d1      	adds	r1, r2, r3
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	899b      	ldrh	r3, [r3, #12]
 8009846:	461a      	mov	r2, r3
 8009848:	f7fd ffae 	bl	80077a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	7d1b      	ldrb	r3, [r3, #20]
 8009850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009854:	b2da      	uxtb	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	899b      	ldrh	r3, [r3, #12]
 800985e:	461a      	mov	r2, r3
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	fb02 f303 	mul.w	r3, r2, r3
 8009866:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009868:	e04b      	b.n	8009902 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	429a      	cmp	r2, r3
 8009872:	d016      	beq.n	80098a2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	699a      	ldr	r2, [r3, #24]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800987c:	429a      	cmp	r2, r3
 800987e:	d210      	bcs.n	80098a2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	7858      	ldrb	r0, [r3, #1]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800988a:	2301      	movs	r3, #1
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	f7fd feab 	bl	80075e8 <disk_read>
 8009892:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009894:	2b00      	cmp	r3, #0
 8009896:	d004      	beq.n	80098a2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2201      	movs	r2, #1
 800989c:	755a      	strb	r2, [r3, #21]
 800989e:	2301      	movs	r3, #1
 80098a0:	e05a      	b.n	8009958 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	899b      	ldrh	r3, [r3, #12]
 80098ac:	4618      	mov	r0, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	8992      	ldrh	r2, [r2, #12]
 80098b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80098ba:	fb01 f202 	mul.w	r2, r1, r2
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	1ac3      	subs	r3, r0, r3
 80098c2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80098c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d901      	bls.n	80098d0 <f_write+0x298>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	8992      	ldrh	r2, [r2, #12]
 80098de:	fbb3 f0f2 	udiv	r0, r3, r2
 80098e2:	fb00 f202 	mul.w	r2, r0, r2
 80098e6:	1a9b      	subs	r3, r3, r2
 80098e8:	440b      	add	r3, r1
 80098ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ec:	69f9      	ldr	r1, [r7, #28]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fd ff5a 	bl	80077a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	7d1b      	ldrb	r3, [r3, #20]
 80098f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009902:	69fa      	ldr	r2, [r7, #28]
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009906:	4413      	add	r3, r2
 8009908:	61fb      	str	r3, [r7, #28]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	699a      	ldr	r2, [r3, #24]
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	441a      	add	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	619a      	str	r2, [r3, #24]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	68da      	ldr	r2, [r3, #12]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	429a      	cmp	r2, r3
 8009920:	bf38      	it	cc
 8009922:	461a      	movcc	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	60da      	str	r2, [r3, #12]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	441a      	add	r2, r3
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	f47f aeb5 	bne.w	80096ae <f_write+0x76>
 8009944:	e000      	b.n	8009948 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009946:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	7d1b      	ldrb	r3, [r3, #20]
 800994c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009950:	b2da      	uxtb	r2, r3
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3730      	adds	r7, #48	; 0x30
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f107 0208 	add.w	r2, r7, #8
 800996e:	4611      	mov	r1, r2
 8009970:	4618      	mov	r0, r3
 8009972:	f7ff fc19 	bl	80091a8 <validate>
 8009976:	4603      	mov	r3, r0
 8009978:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d168      	bne.n	8009a52 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	7d1b      	ldrb	r3, [r3, #20]
 8009984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009988:	2b00      	cmp	r3, #0
 800998a:	d062      	beq.n	8009a52 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	7d1b      	ldrb	r3, [r3, #20]
 8009990:	b25b      	sxtb	r3, r3
 8009992:	2b00      	cmp	r3, #0
 8009994:	da15      	bge.n	80099c2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	7858      	ldrb	r0, [r3, #1]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a1a      	ldr	r2, [r3, #32]
 80099a4:	2301      	movs	r3, #1
 80099a6:	f7fd fe3f 	bl	8007628 <disk_write>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <f_sync+0x54>
 80099b0:	2301      	movs	r3, #1
 80099b2:	e04f      	b.n	8009a54 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	7d1b      	ldrb	r3, [r3, #20]
 80099b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80099c2:	f7fd fc17 	bl	80071f4 <get_fattime>
 80099c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ce:	4619      	mov	r1, r3
 80099d0:	4610      	mov	r0, r2
 80099d2:	f7fe f917 	bl	8007c04 <move_window>
 80099d6:	4603      	mov	r3, r0
 80099d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80099da:	7dfb      	ldrb	r3, [r7, #23]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d138      	bne.n	8009a52 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	330b      	adds	r3, #11
 80099ea:	781a      	ldrb	r2, [r3, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	330b      	adds	r3, #11
 80099f0:	f042 0220 	orr.w	r2, r2, #32
 80099f4:	b2d2      	uxtb	r2, r2
 80099f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	461a      	mov	r2, r3
 8009a02:	68f9      	ldr	r1, [r7, #12]
 8009a04:	f7fe fea5 	bl	8008752 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f103 021c 	add.w	r2, r3, #28
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	4619      	mov	r1, r3
 8009a14:	4610      	mov	r0, r2
 8009a16:	f7fd fe9b 	bl	8007750 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3316      	adds	r3, #22
 8009a1e:	6939      	ldr	r1, [r7, #16]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fd fe95 	bl	8007750 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	3312      	adds	r3, #18
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fd fe74 	bl	800771a <st_word>
					fs->wflag = 1;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2201      	movs	r2, #1
 8009a36:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fe f910 	bl	8007c60 <sync_fs>
 8009a40:	4603      	mov	r3, r0
 8009a42:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	7d1b      	ldrb	r3, [r3, #20]
 8009a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff ff7b 	bl	8009960 <f_sync>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d118      	bne.n	8009aa6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f107 0208 	add.w	r2, r7, #8
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7ff fb93 	bl	80091a8 <validate>
 8009a82:	4603      	mov	r3, r0
 8009a84:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10c      	bne.n	8009aa6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe f813 	bl	8007abc <dec_lock>
 8009a96:	4603      	mov	r3, r0
 8009a98:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d102      	bne.n	8009aa6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b090      	sub	sp, #64	; 0x40
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f107 0208 	add.w	r2, r7, #8
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff fb70 	bl	80091a8 <validate>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009ace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d103      	bne.n	8009ade <f_lseek+0x2e>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	7d5b      	ldrb	r3, [r3, #21]
 8009ada:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009ade:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d002      	beq.n	8009aec <f_lseek+0x3c>
 8009ae6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009aea:	e201      	b.n	8009ef0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 80d9 	beq.w	8009ca8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009afc:	d15a      	bne.n	8009bb4 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b02:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	1d1a      	adds	r2, r3, #4
 8009b08:	627a      	str	r2, [r7, #36]	; 0x24
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	617b      	str	r3, [r7, #20]
 8009b0e:	2302      	movs	r3, #2
 8009b10:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d03a      	beq.n	8009b94 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	613b      	str	r3, [r7, #16]
 8009b22:	2300      	movs	r3, #0
 8009b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	3302      	adds	r3, #2
 8009b2a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b32:	3301      	adds	r3, #1
 8009b34:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe f91f 	bl	8007d7e <get_fat>
 8009b40:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d804      	bhi.n	8009b52 <f_lseek+0xa2>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	755a      	strb	r2, [r3, #21]
 8009b4e:	2302      	movs	r3, #2
 8009b50:	e1ce      	b.n	8009ef0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b58:	d104      	bne.n	8009b64 <f_lseek+0xb4>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	755a      	strb	r2, [r3, #21]
 8009b60:	2301      	movs	r3, #1
 8009b62:	e1c5      	b.n	8009ef0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3301      	adds	r3, #1
 8009b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d0de      	beq.n	8009b2c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d809      	bhi.n	8009b8a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	1d1a      	adds	r2, r3, #4
 8009b7a:	627a      	str	r2, [r7, #36]	; 0x24
 8009b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b7e:	601a      	str	r2, [r3, #0]
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	1d1a      	adds	r2, r3, #4
 8009b84:	627a      	str	r2, [r7, #36]	; 0x24
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d3c4      	bcc.n	8009b1e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b9a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d803      	bhi.n	8009bac <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	e19f      	b.n	8009eec <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009bac:	2311      	movs	r3, #17
 8009bae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009bb2:	e19b      	b.n	8009eec <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d902      	bls.n	8009bc4 <f_lseek+0x114>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 818d 	beq.w	8009eec <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7fe fbbd 	bl	8008358 <clmt_clust>
 8009bde:	4602      	mov	r2, r0
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	4619      	mov	r1, r3
 8009bec:	4610      	mov	r0, r2
 8009bee:	f7fe f8a7 	bl	8007d40 <clust2sect>
 8009bf2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d104      	bne.n	8009c04 <f_lseek+0x154>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	755a      	strb	r2, [r3, #21]
 8009c00:	2302      	movs	r3, #2
 8009c02:	e175      	b.n	8009ef0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	8992      	ldrh	r2, [r2, #12]
 8009c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	8952      	ldrh	r2, [r2, #10]
 8009c14:	3a01      	subs	r2, #1
 8009c16:	4013      	ands	r3, r2
 8009c18:	69ba      	ldr	r2, [r7, #24]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	8992      	ldrh	r2, [r2, #12]
 8009c26:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c2a:	fb01 f202 	mul.w	r2, r1, r2
 8009c2e:	1a9b      	subs	r3, r3, r2
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 815b 	beq.w	8009eec <f_lseek+0x43c>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	69ba      	ldr	r2, [r7, #24]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	f000 8155 	beq.w	8009eec <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	7d1b      	ldrb	r3, [r3, #20]
 8009c46:	b25b      	sxtb	r3, r3
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	da18      	bge.n	8009c7e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	7858      	ldrb	r0, [r3, #1]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1a      	ldr	r2, [r3, #32]
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	f7fd fce4 	bl	8007628 <disk_write>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d004      	beq.n	8009c70 <f_lseek+0x1c0>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	755a      	strb	r2, [r3, #21]
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e13f      	b.n	8009ef0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	7d1b      	ldrb	r3, [r3, #20]
 8009c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	7858      	ldrb	r0, [r3, #1]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c88:	2301      	movs	r3, #1
 8009c8a:	69ba      	ldr	r2, [r7, #24]
 8009c8c:	f7fd fcac 	bl	80075e8 <disk_read>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d004      	beq.n	8009ca0 <f_lseek+0x1f0>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	755a      	strb	r2, [r3, #21]
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e127      	b.n	8009ef0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	621a      	str	r2, [r3, #32]
 8009ca6:	e121      	b.n	8009eec <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d908      	bls.n	8009cc4 <f_lseek+0x214>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	7d1b      	ldrb	r3, [r3, #20]
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d102      	bne.n	8009cc4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cd2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 80b5 	beq.w	8009e46 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	895b      	ldrh	r3, [r3, #10]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	899b      	ldrh	r3, [r3, #12]
 8009ce6:	fb02 f303 	mul.w	r3, r2, r3
 8009cea:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d01b      	beq.n	8009d2a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	1e5a      	subs	r2, r3, #1
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	1e59      	subs	r1, r3, #1
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d30f      	bcc.n	8009d2a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	1e5a      	subs	r2, r3, #1
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	425b      	negs	r3, r3
 8009d12:	401a      	ands	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d28:	e022      	b.n	8009d70 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d119      	bne.n	8009d6a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2100      	movs	r1, #0
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fe fa74 	bl	8008228 <create_chain>
 8009d40:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d104      	bne.n	8009d52 <f_lseek+0x2a2>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	755a      	strb	r2, [r3, #21]
 8009d4e:	2302      	movs	r3, #2
 8009d50:	e0ce      	b.n	8009ef0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d58:	d104      	bne.n	8009d64 <f_lseek+0x2b4>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	755a      	strb	r2, [r3, #21]
 8009d60:	2301      	movs	r3, #1
 8009d62:	e0c5      	b.n	8009ef0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d68:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d6e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d067      	beq.n	8009e46 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8009d76:	e03a      	b.n	8009dee <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	603b      	str	r3, [r7, #0]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	699a      	ldr	r2, [r3, #24]
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	441a      	add	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	7d1b      	ldrb	r3, [r3, #20]
 8009d90:	f003 0302 	and.w	r3, r3, #2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00b      	beq.n	8009db0 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fe fa43 	bl	8008228 <create_chain>
 8009da2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d108      	bne.n	8009dbc <f_lseek+0x30c>
							ofs = 0; break;
 8009daa:	2300      	movs	r3, #0
 8009dac:	603b      	str	r3, [r7, #0]
 8009dae:	e022      	b.n	8009df6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fd ffe2 	bl	8007d7e <get_fat>
 8009dba:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc2:	d104      	bne.n	8009dce <f_lseek+0x31e>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	755a      	strb	r2, [r3, #21]
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e090      	b.n	8009ef0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d904      	bls.n	8009dde <f_lseek+0x32e>
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d304      	bcc.n	8009de8 <f_lseek+0x338>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2202      	movs	r2, #2
 8009de2:	755a      	strb	r2, [r3, #21]
 8009de4:	2302      	movs	r3, #2
 8009de6:	e083      	b.n	8009ef0 <f_lseek+0x440>
					fp->clust = clst;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dec:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d8c0      	bhi.n	8009d78 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	699a      	ldr	r2, [r3, #24]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	441a      	add	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	899b      	ldrh	r3, [r3, #12]
 8009e06:	461a      	mov	r2, r3
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e0e:	fb01 f202 	mul.w	r2, r1, r2
 8009e12:	1a9b      	subs	r3, r3, r2
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d016      	beq.n	8009e46 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fd ff8f 	bl	8007d40 <clust2sect>
 8009e22:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d104      	bne.n	8009e34 <f_lseek+0x384>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2202      	movs	r2, #2
 8009e2e:	755a      	strb	r2, [r3, #21]
 8009e30:	2302      	movs	r3, #2
 8009e32:	e05d      	b.n	8009ef0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	899b      	ldrh	r3, [r3, #12]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e42:	4413      	add	r3, r2
 8009e44:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	699a      	ldr	r2, [r3, #24]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d90a      	bls.n	8009e68 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	699a      	ldr	r2, [r3, #24]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	7d1b      	ldrb	r3, [r3, #20]
 8009e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e62:	b2da      	uxtb	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	8992      	ldrh	r2, [r2, #12]
 8009e70:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e74:	fb01 f202 	mul.w	r2, r1, r2
 8009e78:	1a9b      	subs	r3, r3, r2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d036      	beq.n	8009eec <f_lseek+0x43c>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d031      	beq.n	8009eec <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	7d1b      	ldrb	r3, [r3, #20]
 8009e8c:	b25b      	sxtb	r3, r3
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	da18      	bge.n	8009ec4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	7858      	ldrb	r0, [r3, #1]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a1a      	ldr	r2, [r3, #32]
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f7fd fbc1 	bl	8007628 <disk_write>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d004      	beq.n	8009eb6 <f_lseek+0x406>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	755a      	strb	r2, [r3, #21]
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e01c      	b.n	8009ef0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	7d1b      	ldrb	r3, [r3, #20]
 8009eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	7858      	ldrb	r0, [r3, #1]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ece:	2301      	movs	r3, #1
 8009ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ed2:	f7fd fb89 	bl	80075e8 <disk_read>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d004      	beq.n	8009ee6 <f_lseek+0x436>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	755a      	strb	r2, [r3, #21]
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e004      	b.n	8009ef0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009eea:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009eec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3740      	adds	r7, #64	; 0x40
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b090      	sub	sp, #64	; 0x40
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009f02:	f107 010c 	add.w	r1, r7, #12
 8009f06:	1d3b      	adds	r3, r7, #4
 8009f08:	2200      	movs	r2, #0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fecc 	bl	8008ca8 <find_volume>
 8009f10:	4603      	mov	r3, r0
 8009f12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8009f16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d11f      	bne.n	8009f5e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	f107 030c 	add.w	r3, r7, #12
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fdae 	bl	8008a88 <follow_path>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8009f32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d111      	bne.n	8009f5e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8009f3a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009f3e:	b25b      	sxtb	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	da03      	bge.n	8009f4c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8009f44:	2306      	movs	r3, #6
 8009f46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009f4a:	e008      	b.n	8009f5e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d005      	beq.n	8009f5e <f_stat+0x66>
 8009f52:	f107 030c 	add.w	r3, r7, #12
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fe fca1 	bl	80088a0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8009f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3740      	adds	r7, #64	; 0x40
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	460b      	mov	r3, r1
 8009f74:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009f76:	78fb      	ldrb	r3, [r7, #3]
 8009f78:	2b0a      	cmp	r3, #10
 8009f7a:	d103      	bne.n	8009f84 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009f7c:	210d      	movs	r1, #13
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7ff fff3 	bl	8009f6a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	db25      	blt.n	8009fdc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	60fa      	str	r2, [r7, #12]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	4413      	add	r3, r2
 8009f9a:	78fa      	ldrb	r2, [r7, #3]
 8009f9c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b3c      	cmp	r3, #60	; 0x3c
 8009fa2:	dd12      	ble.n	8009fca <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6818      	ldr	r0, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f103 010c 	add.w	r1, r3, #12
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	f107 0308 	add.w	r3, r7, #8
 8009fb4:	f7ff fb40 	bl	8009638 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d101      	bne.n	8009fc4 <putc_bfd+0x5a>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	e001      	b.n	8009fc8 <putc_bfd+0x5e>
 8009fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	1c5a      	adds	r2, r3, #1
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	609a      	str	r2, [r3, #8]
 8009fda:	e000      	b.n	8009fde <putc_bfd+0x74>
	if (i < 0) return;
 8009fdc:	bf00      	nop
}
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	db16      	blt.n	800a022 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6818      	ldr	r0, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f103 010c 	add.w	r1, r3, #12
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	461a      	mov	r2, r3
 800a004:	f107 030c 	add.w	r3, r7, #12
 800a008:	f7ff fb16 	bl	8009638 <f_write>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d107      	bne.n	800a022 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	4293      	cmp	r3, r2
 800a01a:	d102      	bne.n	800a022 <putc_flush+0x3e>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	e001      	b.n	800a026 <putc_flush+0x42>
	return EOF;
 800a022:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	605a      	str	r2, [r3, #4]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	609a      	str	r2, [r3, #8]
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a058:	b40e      	push	{r1, r2, r3}
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b0a7      	sub	sp, #156	; 0x9c
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	4618      	mov	r0, r3
 800a06a:	f7ff ffe0 	bl	800a02e <putc_init>

	va_start(arp, fmt);
 800a06e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a072:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800a074:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a078:	1c5a      	adds	r2, r3, #1
 800a07a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800a084:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 81f2 	beq.w	800a472 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800a08e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a092:	2b25      	cmp	r3, #37	; 0x25
 800a094:	d008      	beq.n	800a0a8 <f_printf+0x50>
			putc_bfd(&pb, c);
 800a096:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a09a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a09e:	4611      	mov	r1, r2
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7ff ff62 	bl	8009f6a <putc_bfd>
			continue;
 800a0a6:	e1e3      	b.n	800a470 <f_printf+0x418>
		}
		w = f = 0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800a0b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800a0c4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a0c8:	2b30      	cmp	r3, #48	; 0x30
 800a0ca:	d10b      	bne.n	800a0e4 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a0d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800a0e2:	e024      	b.n	800a12e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a0e4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a0e8:	2b2d      	cmp	r3, #45	; 0x2d
 800a0ea:	d120      	bne.n	800a12e <f_printf+0xd6>
				f = 2; c = *fmt++;
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a0f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800a102:	e014      	b.n	800a12e <f_printf+0xd6>
			w = w * 10 + c - '0';
 800a104:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a108:	4613      	mov	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	461a      	mov	r2, r3
 800a112:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a116:	4413      	add	r3, r2
 800a118:	3b30      	subs	r3, #48	; 0x30
 800a11a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800a11e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800a12e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a132:	2b2f      	cmp	r3, #47	; 0x2f
 800a134:	d903      	bls.n	800a13e <f_printf+0xe6>
 800a136:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a13a:	2b39      	cmp	r3, #57	; 0x39
 800a13c:	d9e2      	bls.n	800a104 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a13e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a142:	2b6c      	cmp	r3, #108	; 0x6c
 800a144:	d003      	beq.n	800a14e <f_printf+0xf6>
 800a146:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a14a:	2b4c      	cmp	r3, #76	; 0x4c
 800a14c:	d10d      	bne.n	800a16a <f_printf+0x112>
			f |= 4; c = *fmt++;
 800a14e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a152:	f043 0304 	orr.w	r3, r3, #4
 800a156:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a15a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800a16a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f000 8181 	beq.w	800a476 <f_printf+0x41e>
		d = c;
 800a174:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a178:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800a17c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a180:	2b60      	cmp	r3, #96	; 0x60
 800a182:	d908      	bls.n	800a196 <f_printf+0x13e>
 800a184:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a188:	2b7a      	cmp	r3, #122	; 0x7a
 800a18a:	d804      	bhi.n	800a196 <f_printf+0x13e>
 800a18c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a190:	3b20      	subs	r3, #32
 800a192:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800a196:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a19a:	3b42      	subs	r3, #66	; 0x42
 800a19c:	2b16      	cmp	r3, #22
 800a19e:	f200 8098 	bhi.w	800a2d2 <f_printf+0x27a>
 800a1a2:	a201      	add	r2, pc, #4	; (adr r2, 800a1a8 <f_printf+0x150>)
 800a1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a8:	0800a2b3 	.word	0x0800a2b3
 800a1ac:	0800a29b 	.word	0x0800a29b
 800a1b0:	0800a2c3 	.word	0x0800a2c3
 800a1b4:	0800a2d3 	.word	0x0800a2d3
 800a1b8:	0800a2d3 	.word	0x0800a2d3
 800a1bc:	0800a2d3 	.word	0x0800a2d3
 800a1c0:	0800a2d3 	.word	0x0800a2d3
 800a1c4:	0800a2d3 	.word	0x0800a2d3
 800a1c8:	0800a2d3 	.word	0x0800a2d3
 800a1cc:	0800a2d3 	.word	0x0800a2d3
 800a1d0:	0800a2d3 	.word	0x0800a2d3
 800a1d4:	0800a2d3 	.word	0x0800a2d3
 800a1d8:	0800a2d3 	.word	0x0800a2d3
 800a1dc:	0800a2bb 	.word	0x0800a2bb
 800a1e0:	0800a2d3 	.word	0x0800a2d3
 800a1e4:	0800a2d3 	.word	0x0800a2d3
 800a1e8:	0800a2d3 	.word	0x0800a2d3
 800a1ec:	0800a205 	.word	0x0800a205
 800a1f0:	0800a2d3 	.word	0x0800a2d3
 800a1f4:	0800a2c3 	.word	0x0800a2c3
 800a1f8:	0800a2d3 	.word	0x0800a2d3
 800a1fc:	0800a2d3 	.word	0x0800a2d3
 800a200:	0800a2cb 	.word	0x0800a2cb
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800a204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a206:	1d1a      	adds	r2, r3, #4
 800a208:	67ba      	str	r2, [r7, #120]	; 0x78
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800a20e:	2300      	movs	r3, #0
 800a210:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a214:	e004      	b.n	800a220 <f_printf+0x1c8>
 800a216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a21a:	3301      	adds	r3, #1
 800a21c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a220:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a226:	4413      	add	r3, r2
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1f3      	bne.n	800a216 <f_printf+0x1be>
			if (!(f & 2)) {
 800a22e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a232:	f003 0302 	and.w	r3, r3, #2
 800a236:	2b00      	cmp	r3, #0
 800a238:	d11a      	bne.n	800a270 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800a23a:	e005      	b.n	800a248 <f_printf+0x1f0>
 800a23c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a240:	2120      	movs	r1, #32
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff fe91 	bl	8009f6a <putc_bfd>
 800a248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a24c:	1c5a      	adds	r2, r3, #1
 800a24e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a252:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a256:	429a      	cmp	r2, r3
 800a258:	d8f0      	bhi.n	800a23c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800a25a:	e009      	b.n	800a270 <f_printf+0x218>
 800a25c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a25e:	1c5a      	adds	r2, r3, #1
 800a260:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a262:	781a      	ldrb	r2, [r3, #0]
 800a264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a268:	4611      	mov	r1, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7ff fe7d 	bl	8009f6a <putc_bfd>
 800a270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1f1      	bne.n	800a25c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800a278:	e005      	b.n	800a286 <f_printf+0x22e>
 800a27a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a27e:	2120      	movs	r1, #32
 800a280:	4618      	mov	r0, r3
 800a282:	f7ff fe72 	bl	8009f6a <putc_bfd>
 800a286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a28a:	1c5a      	adds	r2, r3, #1
 800a28c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a290:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a294:	429a      	cmp	r2, r3
 800a296:	d8f0      	bhi.n	800a27a <f_printf+0x222>
			continue;
 800a298:	e0ea      	b.n	800a470 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800a29a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a29c:	1d1a      	adds	r2, r3, #4
 800a29e:	67ba      	str	r2, [r7, #120]	; 0x78
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	b2da      	uxtb	r2, r3
 800a2a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff fe5d 	bl	8009f6a <putc_bfd>
 800a2b0:	e0de      	b.n	800a470 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a2b8:	e014      	b.n	800a2e4 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800a2ba:	2308      	movs	r3, #8
 800a2bc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a2c0:	e010      	b.n	800a2e4 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800a2c2:	230a      	movs	r3, #10
 800a2c4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a2c8:	e00c      	b.n	800a2e4 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800a2ca:	2310      	movs	r3, #16
 800a2cc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a2d0:	e008      	b.n	800a2e4 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800a2d2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a2d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2da:	4611      	mov	r1, r2
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7ff fe44 	bl	8009f6a <putc_bfd>
 800a2e2:	e0c5      	b.n	800a470 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a2e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a2e8:	f003 0304 	and.w	r3, r3, #4
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d004      	beq.n	800a2fa <f_printf+0x2a2>
 800a2f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2f2:	1d1a      	adds	r2, r3, #4
 800a2f4:	67ba      	str	r2, [r7, #120]	; 0x78
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	e00c      	b.n	800a314 <f_printf+0x2bc>
 800a2fa:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a2fe:	2b44      	cmp	r3, #68	; 0x44
 800a300:	d104      	bne.n	800a30c <f_printf+0x2b4>
 800a302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a304:	1d1a      	adds	r2, r3, #4
 800a306:	67ba      	str	r2, [r7, #120]	; 0x78
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	e003      	b.n	800a314 <f_printf+0x2bc>
 800a30c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a30e:	1d1a      	adds	r2, r3, #4
 800a310:	67ba      	str	r2, [r7, #120]	; 0x78
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800a318:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a31c:	2b44      	cmp	r3, #68	; 0x44
 800a31e:	d10e      	bne.n	800a33e <f_printf+0x2e6>
 800a320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a324:	2b00      	cmp	r3, #0
 800a326:	da0a      	bge.n	800a33e <f_printf+0x2e6>
			v = 0 - v;
 800a328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a32c:	425b      	negs	r3, r3
 800a32e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800a332:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a336:	f043 0308 	orr.w	r3, r3, #8
 800a33a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800a344:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800a348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a34c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a350:	fb01 f202 	mul.w	r2, r1, r2
 800a354:	1a9b      	subs	r3, r3, r2
 800a356:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800a35a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800a35e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a362:	fbb2 f3f3 	udiv	r3, r2, r3
 800a366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a36a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a36e:	2b09      	cmp	r3, #9
 800a370:	d90b      	bls.n	800a38a <f_printf+0x332>
 800a372:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a376:	2b78      	cmp	r3, #120	; 0x78
 800a378:	d101      	bne.n	800a37e <f_printf+0x326>
 800a37a:	2227      	movs	r2, #39	; 0x27
 800a37c:	e000      	b.n	800a380 <f_printf+0x328>
 800a37e:	2207      	movs	r2, #7
 800a380:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a384:	4413      	add	r3, r2
 800a386:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800a38a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a38e:	1c5a      	adds	r2, r3, #1
 800a390:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a394:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a398:	3230      	adds	r2, #48	; 0x30
 800a39a:	b2d2      	uxtb	r2, r2
 800a39c:	3398      	adds	r3, #152	; 0x98
 800a39e:	443b      	add	r3, r7
 800a3a0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800a3a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <f_printf+0x35c>
 800a3ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3b0:	2b1f      	cmp	r3, #31
 800a3b2:	d9c7      	bls.n	800a344 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800a3b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a3b8:	f003 0308 	and.w	r3, r3, #8
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d009      	beq.n	800a3d4 <f_printf+0x37c>
 800a3c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a3ca:	3398      	adds	r3, #152	; 0x98
 800a3cc:	443b      	add	r3, r7
 800a3ce:	222d      	movs	r2, #45	; 0x2d
 800a3d0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800a3d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a3dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a3e0:	f003 0301 	and.w	r3, r3, #1
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <f_printf+0x394>
 800a3e8:	2330      	movs	r3, #48	; 0x30
 800a3ea:	e000      	b.n	800a3ee <f_printf+0x396>
 800a3ec:	2320      	movs	r3, #32
 800a3ee:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a3f2:	e007      	b.n	800a404 <f_printf+0x3ac>
 800a3f4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a3f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7ff fdb3 	bl	8009f6a <putc_bfd>
 800a404:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a408:	f003 0302 	and.w	r3, r3, #2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d108      	bne.n	800a422 <f_printf+0x3ca>
 800a410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a414:	1c5a      	adds	r2, r3, #1
 800a416:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a41a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a41e:	429a      	cmp	r2, r3
 800a420:	d8e8      	bhi.n	800a3f4 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800a422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a426:	3b01      	subs	r3, #1
 800a428:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a42c:	f107 020c 	add.w	r2, r7, #12
 800a430:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a434:	4413      	add	r3, r2
 800a436:	781a      	ldrb	r2, [r3, #0]
 800a438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a43c:	4611      	mov	r1, r2
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff fd93 	bl	8009f6a <putc_bfd>
		} while (i);
 800a444:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1ea      	bne.n	800a422 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800a44c:	e007      	b.n	800a45e <f_printf+0x406>
 800a44e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a456:	4611      	mov	r1, r2
 800a458:	4618      	mov	r0, r3
 800a45a:	f7ff fd86 	bl	8009f6a <putc_bfd>
 800a45e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a468:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d8ee      	bhi.n	800a44e <f_printf+0x3f6>
		c = *fmt++;
 800a470:	e600      	b.n	800a074 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800a472:	bf00      	nop
 800a474:	e000      	b.n	800a478 <f_printf+0x420>
		if (!c) break;
 800a476:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800a478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7ff fdb1 	bl	8009fe4 <putc_flush>
 800a482:	4603      	mov	r3, r0
}
 800a484:	4618      	mov	r0, r3
 800a486:	379c      	adds	r7, #156	; 0x9c
 800a488:	46bd      	mov	sp, r7
 800a48a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a48e:	b003      	add	sp, #12
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop

0800a494 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a494:	b480      	push	{r7}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a4aa:	4b1f      	ldr	r3, [pc, #124]	; (800a528 <FATFS_LinkDriverEx+0x94>)
 800a4ac:	7a5b      	ldrb	r3, [r3, #9]
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d131      	bne.n	800a518 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a4b4:	4b1c      	ldr	r3, [pc, #112]	; (800a528 <FATFS_LinkDriverEx+0x94>)
 800a4b6:	7a5b      	ldrb	r3, [r3, #9]
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	4b1a      	ldr	r3, [pc, #104]	; (800a528 <FATFS_LinkDriverEx+0x94>)
 800a4be:	2100      	movs	r1, #0
 800a4c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a4c2:	4b19      	ldr	r3, [pc, #100]	; (800a528 <FATFS_LinkDriverEx+0x94>)
 800a4c4:	7a5b      	ldrb	r3, [r3, #9]
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	4a17      	ldr	r2, [pc, #92]	; (800a528 <FATFS_LinkDriverEx+0x94>)
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a4d2:	4b15      	ldr	r3, [pc, #84]	; (800a528 <FATFS_LinkDriverEx+0x94>)
 800a4d4:	7a5b      	ldrb	r3, [r3, #9]
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	461a      	mov	r2, r3
 800a4da:	4b13      	ldr	r3, [pc, #76]	; (800a528 <FATFS_LinkDriverEx+0x94>)
 800a4dc:	4413      	add	r3, r2
 800a4de:	79fa      	ldrb	r2, [r7, #7]
 800a4e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a4e2:	4b11      	ldr	r3, [pc, #68]	; (800a528 <FATFS_LinkDriverEx+0x94>)
 800a4e4:	7a5b      	ldrb	r3, [r3, #9]
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	b2d1      	uxtb	r1, r2
 800a4ec:	4a0e      	ldr	r2, [pc, #56]	; (800a528 <FATFS_LinkDriverEx+0x94>)
 800a4ee:	7251      	strb	r1, [r2, #9]
 800a4f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a4f2:	7dbb      	ldrb	r3, [r7, #22]
 800a4f4:	3330      	adds	r3, #48	; 0x30
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	3301      	adds	r3, #1
 800a500:	223a      	movs	r2, #58	; 0x3a
 800a502:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	3302      	adds	r3, #2
 800a508:	222f      	movs	r2, #47	; 0x2f
 800a50a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	3303      	adds	r3, #3
 800a510:	2200      	movs	r2, #0
 800a512:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a518:	7dfb      	ldrb	r3, [r7, #23]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	371c      	adds	r7, #28
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	200023a8 	.word	0x200023a8

0800a52c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a536:	2200      	movs	r2, #0
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7ff ffaa 	bl	800a494 <FATFS_LinkDriverEx>
 800a540:	4603      	mov	r3, r0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
	...

0800a54c <__errno>:
 800a54c:	4b01      	ldr	r3, [pc, #4]	; (800a554 <__errno+0x8>)
 800a54e:	6818      	ldr	r0, [r3, #0]
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	20000010 	.word	0x20000010

0800a558 <__libc_init_array>:
 800a558:	b570      	push	{r4, r5, r6, lr}
 800a55a:	4d0d      	ldr	r5, [pc, #52]	; (800a590 <__libc_init_array+0x38>)
 800a55c:	4c0d      	ldr	r4, [pc, #52]	; (800a594 <__libc_init_array+0x3c>)
 800a55e:	1b64      	subs	r4, r4, r5
 800a560:	10a4      	asrs	r4, r4, #2
 800a562:	2600      	movs	r6, #0
 800a564:	42a6      	cmp	r6, r4
 800a566:	d109      	bne.n	800a57c <__libc_init_array+0x24>
 800a568:	4d0b      	ldr	r5, [pc, #44]	; (800a598 <__libc_init_array+0x40>)
 800a56a:	4c0c      	ldr	r4, [pc, #48]	; (800a59c <__libc_init_array+0x44>)
 800a56c:	f001 ff6a 	bl	800c444 <_init>
 800a570:	1b64      	subs	r4, r4, r5
 800a572:	10a4      	asrs	r4, r4, #2
 800a574:	2600      	movs	r6, #0
 800a576:	42a6      	cmp	r6, r4
 800a578:	d105      	bne.n	800a586 <__libc_init_array+0x2e>
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a580:	4798      	blx	r3
 800a582:	3601      	adds	r6, #1
 800a584:	e7ee      	b.n	800a564 <__libc_init_array+0xc>
 800a586:	f855 3b04 	ldr.w	r3, [r5], #4
 800a58a:	4798      	blx	r3
 800a58c:	3601      	adds	r6, #1
 800a58e:	e7f2      	b.n	800a576 <__libc_init_array+0x1e>
 800a590:	0800c7f8 	.word	0x0800c7f8
 800a594:	0800c7f8 	.word	0x0800c7f8
 800a598:	0800c7f8 	.word	0x0800c7f8
 800a59c:	0800c7fc 	.word	0x0800c7fc

0800a5a0 <memset>:
 800a5a0:	4402      	add	r2, r0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d100      	bne.n	800a5aa <memset+0xa>
 800a5a8:	4770      	bx	lr
 800a5aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ae:	e7f9      	b.n	800a5a4 <memset+0x4>

0800a5b0 <iprintf>:
 800a5b0:	b40f      	push	{r0, r1, r2, r3}
 800a5b2:	4b0a      	ldr	r3, [pc, #40]	; (800a5dc <iprintf+0x2c>)
 800a5b4:	b513      	push	{r0, r1, r4, lr}
 800a5b6:	681c      	ldr	r4, [r3, #0]
 800a5b8:	b124      	cbz	r4, 800a5c4 <iprintf+0x14>
 800a5ba:	69a3      	ldr	r3, [r4, #24]
 800a5bc:	b913      	cbnz	r3, 800a5c4 <iprintf+0x14>
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f000 fa5e 	bl	800aa80 <__sinit>
 800a5c4:	ab05      	add	r3, sp, #20
 800a5c6:	9a04      	ldr	r2, [sp, #16]
 800a5c8:	68a1      	ldr	r1, [r4, #8]
 800a5ca:	9301      	str	r3, [sp, #4]
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f000 fc67 	bl	800aea0 <_vfiprintf_r>
 800a5d2:	b002      	add	sp, #8
 800a5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d8:	b004      	add	sp, #16
 800a5da:	4770      	bx	lr
 800a5dc:	20000010 	.word	0x20000010

0800a5e0 <_puts_r>:
 800a5e0:	b570      	push	{r4, r5, r6, lr}
 800a5e2:	460e      	mov	r6, r1
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	b118      	cbz	r0, 800a5f0 <_puts_r+0x10>
 800a5e8:	6983      	ldr	r3, [r0, #24]
 800a5ea:	b90b      	cbnz	r3, 800a5f0 <_puts_r+0x10>
 800a5ec:	f000 fa48 	bl	800aa80 <__sinit>
 800a5f0:	69ab      	ldr	r3, [r5, #24]
 800a5f2:	68ac      	ldr	r4, [r5, #8]
 800a5f4:	b913      	cbnz	r3, 800a5fc <_puts_r+0x1c>
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f000 fa42 	bl	800aa80 <__sinit>
 800a5fc:	4b2c      	ldr	r3, [pc, #176]	; (800a6b0 <_puts_r+0xd0>)
 800a5fe:	429c      	cmp	r4, r3
 800a600:	d120      	bne.n	800a644 <_puts_r+0x64>
 800a602:	686c      	ldr	r4, [r5, #4]
 800a604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a606:	07db      	lsls	r3, r3, #31
 800a608:	d405      	bmi.n	800a616 <_puts_r+0x36>
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	0598      	lsls	r0, r3, #22
 800a60e:	d402      	bmi.n	800a616 <_puts_r+0x36>
 800a610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a612:	f000 fad3 	bl	800abbc <__retarget_lock_acquire_recursive>
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	0719      	lsls	r1, r3, #28
 800a61a:	d51d      	bpl.n	800a658 <_puts_r+0x78>
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	b1db      	cbz	r3, 800a658 <_puts_r+0x78>
 800a620:	3e01      	subs	r6, #1
 800a622:	68a3      	ldr	r3, [r4, #8]
 800a624:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a628:	3b01      	subs	r3, #1
 800a62a:	60a3      	str	r3, [r4, #8]
 800a62c:	bb39      	cbnz	r1, 800a67e <_puts_r+0x9e>
 800a62e:	2b00      	cmp	r3, #0
 800a630:	da38      	bge.n	800a6a4 <_puts_r+0xc4>
 800a632:	4622      	mov	r2, r4
 800a634:	210a      	movs	r1, #10
 800a636:	4628      	mov	r0, r5
 800a638:	f000 f848 	bl	800a6cc <__swbuf_r>
 800a63c:	3001      	adds	r0, #1
 800a63e:	d011      	beq.n	800a664 <_puts_r+0x84>
 800a640:	250a      	movs	r5, #10
 800a642:	e011      	b.n	800a668 <_puts_r+0x88>
 800a644:	4b1b      	ldr	r3, [pc, #108]	; (800a6b4 <_puts_r+0xd4>)
 800a646:	429c      	cmp	r4, r3
 800a648:	d101      	bne.n	800a64e <_puts_r+0x6e>
 800a64a:	68ac      	ldr	r4, [r5, #8]
 800a64c:	e7da      	b.n	800a604 <_puts_r+0x24>
 800a64e:	4b1a      	ldr	r3, [pc, #104]	; (800a6b8 <_puts_r+0xd8>)
 800a650:	429c      	cmp	r4, r3
 800a652:	bf08      	it	eq
 800a654:	68ec      	ldreq	r4, [r5, #12]
 800a656:	e7d5      	b.n	800a604 <_puts_r+0x24>
 800a658:	4621      	mov	r1, r4
 800a65a:	4628      	mov	r0, r5
 800a65c:	f000 f888 	bl	800a770 <__swsetup_r>
 800a660:	2800      	cmp	r0, #0
 800a662:	d0dd      	beq.n	800a620 <_puts_r+0x40>
 800a664:	f04f 35ff 	mov.w	r5, #4294967295
 800a668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a66a:	07da      	lsls	r2, r3, #31
 800a66c:	d405      	bmi.n	800a67a <_puts_r+0x9a>
 800a66e:	89a3      	ldrh	r3, [r4, #12]
 800a670:	059b      	lsls	r3, r3, #22
 800a672:	d402      	bmi.n	800a67a <_puts_r+0x9a>
 800a674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a676:	f000 faa2 	bl	800abbe <__retarget_lock_release_recursive>
 800a67a:	4628      	mov	r0, r5
 800a67c:	bd70      	pop	{r4, r5, r6, pc}
 800a67e:	2b00      	cmp	r3, #0
 800a680:	da04      	bge.n	800a68c <_puts_r+0xac>
 800a682:	69a2      	ldr	r2, [r4, #24]
 800a684:	429a      	cmp	r2, r3
 800a686:	dc06      	bgt.n	800a696 <_puts_r+0xb6>
 800a688:	290a      	cmp	r1, #10
 800a68a:	d004      	beq.n	800a696 <_puts_r+0xb6>
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	1c5a      	adds	r2, r3, #1
 800a690:	6022      	str	r2, [r4, #0]
 800a692:	7019      	strb	r1, [r3, #0]
 800a694:	e7c5      	b.n	800a622 <_puts_r+0x42>
 800a696:	4622      	mov	r2, r4
 800a698:	4628      	mov	r0, r5
 800a69a:	f000 f817 	bl	800a6cc <__swbuf_r>
 800a69e:	3001      	adds	r0, #1
 800a6a0:	d1bf      	bne.n	800a622 <_puts_r+0x42>
 800a6a2:	e7df      	b.n	800a664 <_puts_r+0x84>
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	250a      	movs	r5, #10
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	6022      	str	r2, [r4, #0]
 800a6ac:	701d      	strb	r5, [r3, #0]
 800a6ae:	e7db      	b.n	800a668 <_puts_r+0x88>
 800a6b0:	0800c748 	.word	0x0800c748
 800a6b4:	0800c768 	.word	0x0800c768
 800a6b8:	0800c728 	.word	0x0800c728

0800a6bc <puts>:
 800a6bc:	4b02      	ldr	r3, [pc, #8]	; (800a6c8 <puts+0xc>)
 800a6be:	4601      	mov	r1, r0
 800a6c0:	6818      	ldr	r0, [r3, #0]
 800a6c2:	f7ff bf8d 	b.w	800a5e0 <_puts_r>
 800a6c6:	bf00      	nop
 800a6c8:	20000010 	.word	0x20000010

0800a6cc <__swbuf_r>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	460e      	mov	r6, r1
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	b118      	cbz	r0, 800a6de <__swbuf_r+0x12>
 800a6d6:	6983      	ldr	r3, [r0, #24]
 800a6d8:	b90b      	cbnz	r3, 800a6de <__swbuf_r+0x12>
 800a6da:	f000 f9d1 	bl	800aa80 <__sinit>
 800a6de:	4b21      	ldr	r3, [pc, #132]	; (800a764 <__swbuf_r+0x98>)
 800a6e0:	429c      	cmp	r4, r3
 800a6e2:	d12b      	bne.n	800a73c <__swbuf_r+0x70>
 800a6e4:	686c      	ldr	r4, [r5, #4]
 800a6e6:	69a3      	ldr	r3, [r4, #24]
 800a6e8:	60a3      	str	r3, [r4, #8]
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	071a      	lsls	r2, r3, #28
 800a6ee:	d52f      	bpl.n	800a750 <__swbuf_r+0x84>
 800a6f0:	6923      	ldr	r3, [r4, #16]
 800a6f2:	b36b      	cbz	r3, 800a750 <__swbuf_r+0x84>
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	6820      	ldr	r0, [r4, #0]
 800a6f8:	1ac0      	subs	r0, r0, r3
 800a6fa:	6963      	ldr	r3, [r4, #20]
 800a6fc:	b2f6      	uxtb	r6, r6
 800a6fe:	4283      	cmp	r3, r0
 800a700:	4637      	mov	r7, r6
 800a702:	dc04      	bgt.n	800a70e <__swbuf_r+0x42>
 800a704:	4621      	mov	r1, r4
 800a706:	4628      	mov	r0, r5
 800a708:	f000 f926 	bl	800a958 <_fflush_r>
 800a70c:	bb30      	cbnz	r0, 800a75c <__swbuf_r+0x90>
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	3b01      	subs	r3, #1
 800a712:	60a3      	str	r3, [r4, #8]
 800a714:	6823      	ldr	r3, [r4, #0]
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	6022      	str	r2, [r4, #0]
 800a71a:	701e      	strb	r6, [r3, #0]
 800a71c:	6963      	ldr	r3, [r4, #20]
 800a71e:	3001      	adds	r0, #1
 800a720:	4283      	cmp	r3, r0
 800a722:	d004      	beq.n	800a72e <__swbuf_r+0x62>
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	07db      	lsls	r3, r3, #31
 800a728:	d506      	bpl.n	800a738 <__swbuf_r+0x6c>
 800a72a:	2e0a      	cmp	r6, #10
 800a72c:	d104      	bne.n	800a738 <__swbuf_r+0x6c>
 800a72e:	4621      	mov	r1, r4
 800a730:	4628      	mov	r0, r5
 800a732:	f000 f911 	bl	800a958 <_fflush_r>
 800a736:	b988      	cbnz	r0, 800a75c <__swbuf_r+0x90>
 800a738:	4638      	mov	r0, r7
 800a73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a73c:	4b0a      	ldr	r3, [pc, #40]	; (800a768 <__swbuf_r+0x9c>)
 800a73e:	429c      	cmp	r4, r3
 800a740:	d101      	bne.n	800a746 <__swbuf_r+0x7a>
 800a742:	68ac      	ldr	r4, [r5, #8]
 800a744:	e7cf      	b.n	800a6e6 <__swbuf_r+0x1a>
 800a746:	4b09      	ldr	r3, [pc, #36]	; (800a76c <__swbuf_r+0xa0>)
 800a748:	429c      	cmp	r4, r3
 800a74a:	bf08      	it	eq
 800a74c:	68ec      	ldreq	r4, [r5, #12]
 800a74e:	e7ca      	b.n	800a6e6 <__swbuf_r+0x1a>
 800a750:	4621      	mov	r1, r4
 800a752:	4628      	mov	r0, r5
 800a754:	f000 f80c 	bl	800a770 <__swsetup_r>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d0cb      	beq.n	800a6f4 <__swbuf_r+0x28>
 800a75c:	f04f 37ff 	mov.w	r7, #4294967295
 800a760:	e7ea      	b.n	800a738 <__swbuf_r+0x6c>
 800a762:	bf00      	nop
 800a764:	0800c748 	.word	0x0800c748
 800a768:	0800c768 	.word	0x0800c768
 800a76c:	0800c728 	.word	0x0800c728

0800a770 <__swsetup_r>:
 800a770:	4b32      	ldr	r3, [pc, #200]	; (800a83c <__swsetup_r+0xcc>)
 800a772:	b570      	push	{r4, r5, r6, lr}
 800a774:	681d      	ldr	r5, [r3, #0]
 800a776:	4606      	mov	r6, r0
 800a778:	460c      	mov	r4, r1
 800a77a:	b125      	cbz	r5, 800a786 <__swsetup_r+0x16>
 800a77c:	69ab      	ldr	r3, [r5, #24]
 800a77e:	b913      	cbnz	r3, 800a786 <__swsetup_r+0x16>
 800a780:	4628      	mov	r0, r5
 800a782:	f000 f97d 	bl	800aa80 <__sinit>
 800a786:	4b2e      	ldr	r3, [pc, #184]	; (800a840 <__swsetup_r+0xd0>)
 800a788:	429c      	cmp	r4, r3
 800a78a:	d10f      	bne.n	800a7ac <__swsetup_r+0x3c>
 800a78c:	686c      	ldr	r4, [r5, #4]
 800a78e:	89a3      	ldrh	r3, [r4, #12]
 800a790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a794:	0719      	lsls	r1, r3, #28
 800a796:	d42c      	bmi.n	800a7f2 <__swsetup_r+0x82>
 800a798:	06dd      	lsls	r5, r3, #27
 800a79a:	d411      	bmi.n	800a7c0 <__swsetup_r+0x50>
 800a79c:	2309      	movs	r3, #9
 800a79e:	6033      	str	r3, [r6, #0]
 800a7a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7aa:	e03e      	b.n	800a82a <__swsetup_r+0xba>
 800a7ac:	4b25      	ldr	r3, [pc, #148]	; (800a844 <__swsetup_r+0xd4>)
 800a7ae:	429c      	cmp	r4, r3
 800a7b0:	d101      	bne.n	800a7b6 <__swsetup_r+0x46>
 800a7b2:	68ac      	ldr	r4, [r5, #8]
 800a7b4:	e7eb      	b.n	800a78e <__swsetup_r+0x1e>
 800a7b6:	4b24      	ldr	r3, [pc, #144]	; (800a848 <__swsetup_r+0xd8>)
 800a7b8:	429c      	cmp	r4, r3
 800a7ba:	bf08      	it	eq
 800a7bc:	68ec      	ldreq	r4, [r5, #12]
 800a7be:	e7e6      	b.n	800a78e <__swsetup_r+0x1e>
 800a7c0:	0758      	lsls	r0, r3, #29
 800a7c2:	d512      	bpl.n	800a7ea <__swsetup_r+0x7a>
 800a7c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7c6:	b141      	cbz	r1, 800a7da <__swsetup_r+0x6a>
 800a7c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7cc:	4299      	cmp	r1, r3
 800a7ce:	d002      	beq.n	800a7d6 <__swsetup_r+0x66>
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f000 fa5b 	bl	800ac8c <_free_r>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	6363      	str	r3, [r4, #52]	; 0x34
 800a7da:	89a3      	ldrh	r3, [r4, #12]
 800a7dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7e0:	81a3      	strh	r3, [r4, #12]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	6063      	str	r3, [r4, #4]
 800a7e6:	6923      	ldr	r3, [r4, #16]
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	89a3      	ldrh	r3, [r4, #12]
 800a7ec:	f043 0308 	orr.w	r3, r3, #8
 800a7f0:	81a3      	strh	r3, [r4, #12]
 800a7f2:	6923      	ldr	r3, [r4, #16]
 800a7f4:	b94b      	cbnz	r3, 800a80a <__swsetup_r+0x9a>
 800a7f6:	89a3      	ldrh	r3, [r4, #12]
 800a7f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a800:	d003      	beq.n	800a80a <__swsetup_r+0x9a>
 800a802:	4621      	mov	r1, r4
 800a804:	4630      	mov	r0, r6
 800a806:	f000 fa01 	bl	800ac0c <__smakebuf_r>
 800a80a:	89a0      	ldrh	r0, [r4, #12]
 800a80c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a810:	f010 0301 	ands.w	r3, r0, #1
 800a814:	d00a      	beq.n	800a82c <__swsetup_r+0xbc>
 800a816:	2300      	movs	r3, #0
 800a818:	60a3      	str	r3, [r4, #8]
 800a81a:	6963      	ldr	r3, [r4, #20]
 800a81c:	425b      	negs	r3, r3
 800a81e:	61a3      	str	r3, [r4, #24]
 800a820:	6923      	ldr	r3, [r4, #16]
 800a822:	b943      	cbnz	r3, 800a836 <__swsetup_r+0xc6>
 800a824:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a828:	d1ba      	bne.n	800a7a0 <__swsetup_r+0x30>
 800a82a:	bd70      	pop	{r4, r5, r6, pc}
 800a82c:	0781      	lsls	r1, r0, #30
 800a82e:	bf58      	it	pl
 800a830:	6963      	ldrpl	r3, [r4, #20]
 800a832:	60a3      	str	r3, [r4, #8]
 800a834:	e7f4      	b.n	800a820 <__swsetup_r+0xb0>
 800a836:	2000      	movs	r0, #0
 800a838:	e7f7      	b.n	800a82a <__swsetup_r+0xba>
 800a83a:	bf00      	nop
 800a83c:	20000010 	.word	0x20000010
 800a840:	0800c748 	.word	0x0800c748
 800a844:	0800c768 	.word	0x0800c768
 800a848:	0800c728 	.word	0x0800c728

0800a84c <__sflush_r>:
 800a84c:	898a      	ldrh	r2, [r1, #12]
 800a84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a852:	4605      	mov	r5, r0
 800a854:	0710      	lsls	r0, r2, #28
 800a856:	460c      	mov	r4, r1
 800a858:	d458      	bmi.n	800a90c <__sflush_r+0xc0>
 800a85a:	684b      	ldr	r3, [r1, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	dc05      	bgt.n	800a86c <__sflush_r+0x20>
 800a860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a862:	2b00      	cmp	r3, #0
 800a864:	dc02      	bgt.n	800a86c <__sflush_r+0x20>
 800a866:	2000      	movs	r0, #0
 800a868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a86c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a86e:	2e00      	cmp	r6, #0
 800a870:	d0f9      	beq.n	800a866 <__sflush_r+0x1a>
 800a872:	2300      	movs	r3, #0
 800a874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a878:	682f      	ldr	r7, [r5, #0]
 800a87a:	602b      	str	r3, [r5, #0]
 800a87c:	d032      	beq.n	800a8e4 <__sflush_r+0x98>
 800a87e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	075a      	lsls	r2, r3, #29
 800a884:	d505      	bpl.n	800a892 <__sflush_r+0x46>
 800a886:	6863      	ldr	r3, [r4, #4]
 800a888:	1ac0      	subs	r0, r0, r3
 800a88a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a88c:	b10b      	cbz	r3, 800a892 <__sflush_r+0x46>
 800a88e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a890:	1ac0      	subs	r0, r0, r3
 800a892:	2300      	movs	r3, #0
 800a894:	4602      	mov	r2, r0
 800a896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a898:	6a21      	ldr	r1, [r4, #32]
 800a89a:	4628      	mov	r0, r5
 800a89c:	47b0      	blx	r6
 800a89e:	1c43      	adds	r3, r0, #1
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	d106      	bne.n	800a8b2 <__sflush_r+0x66>
 800a8a4:	6829      	ldr	r1, [r5, #0]
 800a8a6:	291d      	cmp	r1, #29
 800a8a8:	d82c      	bhi.n	800a904 <__sflush_r+0xb8>
 800a8aa:	4a2a      	ldr	r2, [pc, #168]	; (800a954 <__sflush_r+0x108>)
 800a8ac:	40ca      	lsrs	r2, r1
 800a8ae:	07d6      	lsls	r6, r2, #31
 800a8b0:	d528      	bpl.n	800a904 <__sflush_r+0xb8>
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	6062      	str	r2, [r4, #4]
 800a8b6:	04d9      	lsls	r1, r3, #19
 800a8b8:	6922      	ldr	r2, [r4, #16]
 800a8ba:	6022      	str	r2, [r4, #0]
 800a8bc:	d504      	bpl.n	800a8c8 <__sflush_r+0x7c>
 800a8be:	1c42      	adds	r2, r0, #1
 800a8c0:	d101      	bne.n	800a8c6 <__sflush_r+0x7a>
 800a8c2:	682b      	ldr	r3, [r5, #0]
 800a8c4:	b903      	cbnz	r3, 800a8c8 <__sflush_r+0x7c>
 800a8c6:	6560      	str	r0, [r4, #84]	; 0x54
 800a8c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8ca:	602f      	str	r7, [r5, #0]
 800a8cc:	2900      	cmp	r1, #0
 800a8ce:	d0ca      	beq.n	800a866 <__sflush_r+0x1a>
 800a8d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8d4:	4299      	cmp	r1, r3
 800a8d6:	d002      	beq.n	800a8de <__sflush_r+0x92>
 800a8d8:	4628      	mov	r0, r5
 800a8da:	f000 f9d7 	bl	800ac8c <_free_r>
 800a8de:	2000      	movs	r0, #0
 800a8e0:	6360      	str	r0, [r4, #52]	; 0x34
 800a8e2:	e7c1      	b.n	800a868 <__sflush_r+0x1c>
 800a8e4:	6a21      	ldr	r1, [r4, #32]
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	47b0      	blx	r6
 800a8ec:	1c41      	adds	r1, r0, #1
 800a8ee:	d1c7      	bne.n	800a880 <__sflush_r+0x34>
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d0c4      	beq.n	800a880 <__sflush_r+0x34>
 800a8f6:	2b1d      	cmp	r3, #29
 800a8f8:	d001      	beq.n	800a8fe <__sflush_r+0xb2>
 800a8fa:	2b16      	cmp	r3, #22
 800a8fc:	d101      	bne.n	800a902 <__sflush_r+0xb6>
 800a8fe:	602f      	str	r7, [r5, #0]
 800a900:	e7b1      	b.n	800a866 <__sflush_r+0x1a>
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a908:	81a3      	strh	r3, [r4, #12]
 800a90a:	e7ad      	b.n	800a868 <__sflush_r+0x1c>
 800a90c:	690f      	ldr	r7, [r1, #16]
 800a90e:	2f00      	cmp	r7, #0
 800a910:	d0a9      	beq.n	800a866 <__sflush_r+0x1a>
 800a912:	0793      	lsls	r3, r2, #30
 800a914:	680e      	ldr	r6, [r1, #0]
 800a916:	bf08      	it	eq
 800a918:	694b      	ldreq	r3, [r1, #20]
 800a91a:	600f      	str	r7, [r1, #0]
 800a91c:	bf18      	it	ne
 800a91e:	2300      	movne	r3, #0
 800a920:	eba6 0807 	sub.w	r8, r6, r7
 800a924:	608b      	str	r3, [r1, #8]
 800a926:	f1b8 0f00 	cmp.w	r8, #0
 800a92a:	dd9c      	ble.n	800a866 <__sflush_r+0x1a>
 800a92c:	6a21      	ldr	r1, [r4, #32]
 800a92e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a930:	4643      	mov	r3, r8
 800a932:	463a      	mov	r2, r7
 800a934:	4628      	mov	r0, r5
 800a936:	47b0      	blx	r6
 800a938:	2800      	cmp	r0, #0
 800a93a:	dc06      	bgt.n	800a94a <__sflush_r+0xfe>
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a942:	81a3      	strh	r3, [r4, #12]
 800a944:	f04f 30ff 	mov.w	r0, #4294967295
 800a948:	e78e      	b.n	800a868 <__sflush_r+0x1c>
 800a94a:	4407      	add	r7, r0
 800a94c:	eba8 0800 	sub.w	r8, r8, r0
 800a950:	e7e9      	b.n	800a926 <__sflush_r+0xda>
 800a952:	bf00      	nop
 800a954:	20400001 	.word	0x20400001

0800a958 <_fflush_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	690b      	ldr	r3, [r1, #16]
 800a95c:	4605      	mov	r5, r0
 800a95e:	460c      	mov	r4, r1
 800a960:	b913      	cbnz	r3, 800a968 <_fflush_r+0x10>
 800a962:	2500      	movs	r5, #0
 800a964:	4628      	mov	r0, r5
 800a966:	bd38      	pop	{r3, r4, r5, pc}
 800a968:	b118      	cbz	r0, 800a972 <_fflush_r+0x1a>
 800a96a:	6983      	ldr	r3, [r0, #24]
 800a96c:	b90b      	cbnz	r3, 800a972 <_fflush_r+0x1a>
 800a96e:	f000 f887 	bl	800aa80 <__sinit>
 800a972:	4b14      	ldr	r3, [pc, #80]	; (800a9c4 <_fflush_r+0x6c>)
 800a974:	429c      	cmp	r4, r3
 800a976:	d11b      	bne.n	800a9b0 <_fflush_r+0x58>
 800a978:	686c      	ldr	r4, [r5, #4]
 800a97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0ef      	beq.n	800a962 <_fflush_r+0xa>
 800a982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a984:	07d0      	lsls	r0, r2, #31
 800a986:	d404      	bmi.n	800a992 <_fflush_r+0x3a>
 800a988:	0599      	lsls	r1, r3, #22
 800a98a:	d402      	bmi.n	800a992 <_fflush_r+0x3a>
 800a98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a98e:	f000 f915 	bl	800abbc <__retarget_lock_acquire_recursive>
 800a992:	4628      	mov	r0, r5
 800a994:	4621      	mov	r1, r4
 800a996:	f7ff ff59 	bl	800a84c <__sflush_r>
 800a99a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a99c:	07da      	lsls	r2, r3, #31
 800a99e:	4605      	mov	r5, r0
 800a9a0:	d4e0      	bmi.n	800a964 <_fflush_r+0xc>
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	059b      	lsls	r3, r3, #22
 800a9a6:	d4dd      	bmi.n	800a964 <_fflush_r+0xc>
 800a9a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9aa:	f000 f908 	bl	800abbe <__retarget_lock_release_recursive>
 800a9ae:	e7d9      	b.n	800a964 <_fflush_r+0xc>
 800a9b0:	4b05      	ldr	r3, [pc, #20]	; (800a9c8 <_fflush_r+0x70>)
 800a9b2:	429c      	cmp	r4, r3
 800a9b4:	d101      	bne.n	800a9ba <_fflush_r+0x62>
 800a9b6:	68ac      	ldr	r4, [r5, #8]
 800a9b8:	e7df      	b.n	800a97a <_fflush_r+0x22>
 800a9ba:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <_fflush_r+0x74>)
 800a9bc:	429c      	cmp	r4, r3
 800a9be:	bf08      	it	eq
 800a9c0:	68ec      	ldreq	r4, [r5, #12]
 800a9c2:	e7da      	b.n	800a97a <_fflush_r+0x22>
 800a9c4:	0800c748 	.word	0x0800c748
 800a9c8:	0800c768 	.word	0x0800c768
 800a9cc:	0800c728 	.word	0x0800c728

0800a9d0 <std>:
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	b510      	push	{r4, lr}
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a9da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9de:	6083      	str	r3, [r0, #8]
 800a9e0:	8181      	strh	r1, [r0, #12]
 800a9e2:	6643      	str	r3, [r0, #100]	; 0x64
 800a9e4:	81c2      	strh	r2, [r0, #14]
 800a9e6:	6183      	str	r3, [r0, #24]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	2208      	movs	r2, #8
 800a9ec:	305c      	adds	r0, #92	; 0x5c
 800a9ee:	f7ff fdd7 	bl	800a5a0 <memset>
 800a9f2:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <std+0x38>)
 800a9f4:	6263      	str	r3, [r4, #36]	; 0x24
 800a9f6:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <std+0x3c>)
 800a9f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9fa:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <std+0x40>)
 800a9fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9fe:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <std+0x44>)
 800aa00:	6224      	str	r4, [r4, #32]
 800aa02:	6323      	str	r3, [r4, #48]	; 0x30
 800aa04:	bd10      	pop	{r4, pc}
 800aa06:	bf00      	nop
 800aa08:	0800b449 	.word	0x0800b449
 800aa0c:	0800b46b 	.word	0x0800b46b
 800aa10:	0800b4a3 	.word	0x0800b4a3
 800aa14:	0800b4c7 	.word	0x0800b4c7

0800aa18 <_cleanup_r>:
 800aa18:	4901      	ldr	r1, [pc, #4]	; (800aa20 <_cleanup_r+0x8>)
 800aa1a:	f000 b8af 	b.w	800ab7c <_fwalk_reent>
 800aa1e:	bf00      	nop
 800aa20:	0800a959 	.word	0x0800a959

0800aa24 <__sfmoreglue>:
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	2268      	movs	r2, #104	; 0x68
 800aa28:	1e4d      	subs	r5, r1, #1
 800aa2a:	4355      	muls	r5, r2
 800aa2c:	460e      	mov	r6, r1
 800aa2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa32:	f000 f997 	bl	800ad64 <_malloc_r>
 800aa36:	4604      	mov	r4, r0
 800aa38:	b140      	cbz	r0, 800aa4c <__sfmoreglue+0x28>
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	e9c0 1600 	strd	r1, r6, [r0]
 800aa40:	300c      	adds	r0, #12
 800aa42:	60a0      	str	r0, [r4, #8]
 800aa44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa48:	f7ff fdaa 	bl	800a5a0 <memset>
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	bd70      	pop	{r4, r5, r6, pc}

0800aa50 <__sfp_lock_acquire>:
 800aa50:	4801      	ldr	r0, [pc, #4]	; (800aa58 <__sfp_lock_acquire+0x8>)
 800aa52:	f000 b8b3 	b.w	800abbc <__retarget_lock_acquire_recursive>
 800aa56:	bf00      	nop
 800aa58:	200023b5 	.word	0x200023b5

0800aa5c <__sfp_lock_release>:
 800aa5c:	4801      	ldr	r0, [pc, #4]	; (800aa64 <__sfp_lock_release+0x8>)
 800aa5e:	f000 b8ae 	b.w	800abbe <__retarget_lock_release_recursive>
 800aa62:	bf00      	nop
 800aa64:	200023b5 	.word	0x200023b5

0800aa68 <__sinit_lock_acquire>:
 800aa68:	4801      	ldr	r0, [pc, #4]	; (800aa70 <__sinit_lock_acquire+0x8>)
 800aa6a:	f000 b8a7 	b.w	800abbc <__retarget_lock_acquire_recursive>
 800aa6e:	bf00      	nop
 800aa70:	200023b6 	.word	0x200023b6

0800aa74 <__sinit_lock_release>:
 800aa74:	4801      	ldr	r0, [pc, #4]	; (800aa7c <__sinit_lock_release+0x8>)
 800aa76:	f000 b8a2 	b.w	800abbe <__retarget_lock_release_recursive>
 800aa7a:	bf00      	nop
 800aa7c:	200023b6 	.word	0x200023b6

0800aa80 <__sinit>:
 800aa80:	b510      	push	{r4, lr}
 800aa82:	4604      	mov	r4, r0
 800aa84:	f7ff fff0 	bl	800aa68 <__sinit_lock_acquire>
 800aa88:	69a3      	ldr	r3, [r4, #24]
 800aa8a:	b11b      	cbz	r3, 800aa94 <__sinit+0x14>
 800aa8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa90:	f7ff bff0 	b.w	800aa74 <__sinit_lock_release>
 800aa94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa98:	6523      	str	r3, [r4, #80]	; 0x50
 800aa9a:	4b13      	ldr	r3, [pc, #76]	; (800aae8 <__sinit+0x68>)
 800aa9c:	4a13      	ldr	r2, [pc, #76]	; (800aaec <__sinit+0x6c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aaa2:	42a3      	cmp	r3, r4
 800aaa4:	bf04      	itt	eq
 800aaa6:	2301      	moveq	r3, #1
 800aaa8:	61a3      	streq	r3, [r4, #24]
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f000 f820 	bl	800aaf0 <__sfp>
 800aab0:	6060      	str	r0, [r4, #4]
 800aab2:	4620      	mov	r0, r4
 800aab4:	f000 f81c 	bl	800aaf0 <__sfp>
 800aab8:	60a0      	str	r0, [r4, #8]
 800aaba:	4620      	mov	r0, r4
 800aabc:	f000 f818 	bl	800aaf0 <__sfp>
 800aac0:	2200      	movs	r2, #0
 800aac2:	60e0      	str	r0, [r4, #12]
 800aac4:	2104      	movs	r1, #4
 800aac6:	6860      	ldr	r0, [r4, #4]
 800aac8:	f7ff ff82 	bl	800a9d0 <std>
 800aacc:	68a0      	ldr	r0, [r4, #8]
 800aace:	2201      	movs	r2, #1
 800aad0:	2109      	movs	r1, #9
 800aad2:	f7ff ff7d 	bl	800a9d0 <std>
 800aad6:	68e0      	ldr	r0, [r4, #12]
 800aad8:	2202      	movs	r2, #2
 800aada:	2112      	movs	r1, #18
 800aadc:	f7ff ff78 	bl	800a9d0 <std>
 800aae0:	2301      	movs	r3, #1
 800aae2:	61a3      	str	r3, [r4, #24]
 800aae4:	e7d2      	b.n	800aa8c <__sinit+0xc>
 800aae6:	bf00      	nop
 800aae8:	0800c724 	.word	0x0800c724
 800aaec:	0800aa19 	.word	0x0800aa19

0800aaf0 <__sfp>:
 800aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf2:	4607      	mov	r7, r0
 800aaf4:	f7ff ffac 	bl	800aa50 <__sfp_lock_acquire>
 800aaf8:	4b1e      	ldr	r3, [pc, #120]	; (800ab74 <__sfp+0x84>)
 800aafa:	681e      	ldr	r6, [r3, #0]
 800aafc:	69b3      	ldr	r3, [r6, #24]
 800aafe:	b913      	cbnz	r3, 800ab06 <__sfp+0x16>
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff ffbd 	bl	800aa80 <__sinit>
 800ab06:	3648      	adds	r6, #72	; 0x48
 800ab08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	d503      	bpl.n	800ab18 <__sfp+0x28>
 800ab10:	6833      	ldr	r3, [r6, #0]
 800ab12:	b30b      	cbz	r3, 800ab58 <__sfp+0x68>
 800ab14:	6836      	ldr	r6, [r6, #0]
 800ab16:	e7f7      	b.n	800ab08 <__sfp+0x18>
 800ab18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab1c:	b9d5      	cbnz	r5, 800ab54 <__sfp+0x64>
 800ab1e:	4b16      	ldr	r3, [pc, #88]	; (800ab78 <__sfp+0x88>)
 800ab20:	60e3      	str	r3, [r4, #12]
 800ab22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab26:	6665      	str	r5, [r4, #100]	; 0x64
 800ab28:	f000 f847 	bl	800abba <__retarget_lock_init_recursive>
 800ab2c:	f7ff ff96 	bl	800aa5c <__sfp_lock_release>
 800ab30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab38:	6025      	str	r5, [r4, #0]
 800ab3a:	61a5      	str	r5, [r4, #24]
 800ab3c:	2208      	movs	r2, #8
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab44:	f7ff fd2c 	bl	800a5a0 <memset>
 800ab48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab50:	4620      	mov	r0, r4
 800ab52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab54:	3468      	adds	r4, #104	; 0x68
 800ab56:	e7d9      	b.n	800ab0c <__sfp+0x1c>
 800ab58:	2104      	movs	r1, #4
 800ab5a:	4638      	mov	r0, r7
 800ab5c:	f7ff ff62 	bl	800aa24 <__sfmoreglue>
 800ab60:	4604      	mov	r4, r0
 800ab62:	6030      	str	r0, [r6, #0]
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d1d5      	bne.n	800ab14 <__sfp+0x24>
 800ab68:	f7ff ff78 	bl	800aa5c <__sfp_lock_release>
 800ab6c:	230c      	movs	r3, #12
 800ab6e:	603b      	str	r3, [r7, #0]
 800ab70:	e7ee      	b.n	800ab50 <__sfp+0x60>
 800ab72:	bf00      	nop
 800ab74:	0800c724 	.word	0x0800c724
 800ab78:	ffff0001 	.word	0xffff0001

0800ab7c <_fwalk_reent>:
 800ab7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab80:	4606      	mov	r6, r0
 800ab82:	4688      	mov	r8, r1
 800ab84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab88:	2700      	movs	r7, #0
 800ab8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab8e:	f1b9 0901 	subs.w	r9, r9, #1
 800ab92:	d505      	bpl.n	800aba0 <_fwalk_reent+0x24>
 800ab94:	6824      	ldr	r4, [r4, #0]
 800ab96:	2c00      	cmp	r4, #0
 800ab98:	d1f7      	bne.n	800ab8a <_fwalk_reent+0xe>
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba0:	89ab      	ldrh	r3, [r5, #12]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d907      	bls.n	800abb6 <_fwalk_reent+0x3a>
 800aba6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abaa:	3301      	adds	r3, #1
 800abac:	d003      	beq.n	800abb6 <_fwalk_reent+0x3a>
 800abae:	4629      	mov	r1, r5
 800abb0:	4630      	mov	r0, r6
 800abb2:	47c0      	blx	r8
 800abb4:	4307      	orrs	r7, r0
 800abb6:	3568      	adds	r5, #104	; 0x68
 800abb8:	e7e9      	b.n	800ab8e <_fwalk_reent+0x12>

0800abba <__retarget_lock_init_recursive>:
 800abba:	4770      	bx	lr

0800abbc <__retarget_lock_acquire_recursive>:
 800abbc:	4770      	bx	lr

0800abbe <__retarget_lock_release_recursive>:
 800abbe:	4770      	bx	lr

0800abc0 <__swhatbuf_r>:
 800abc0:	b570      	push	{r4, r5, r6, lr}
 800abc2:	460e      	mov	r6, r1
 800abc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc8:	2900      	cmp	r1, #0
 800abca:	b096      	sub	sp, #88	; 0x58
 800abcc:	4614      	mov	r4, r2
 800abce:	461d      	mov	r5, r3
 800abd0:	da08      	bge.n	800abe4 <__swhatbuf_r+0x24>
 800abd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	602a      	str	r2, [r5, #0]
 800abda:	061a      	lsls	r2, r3, #24
 800abdc:	d410      	bmi.n	800ac00 <__swhatbuf_r+0x40>
 800abde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abe2:	e00e      	b.n	800ac02 <__swhatbuf_r+0x42>
 800abe4:	466a      	mov	r2, sp
 800abe6:	f000 fc95 	bl	800b514 <_fstat_r>
 800abea:	2800      	cmp	r0, #0
 800abec:	dbf1      	blt.n	800abd2 <__swhatbuf_r+0x12>
 800abee:	9a01      	ldr	r2, [sp, #4]
 800abf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abf8:	425a      	negs	r2, r3
 800abfa:	415a      	adcs	r2, r3
 800abfc:	602a      	str	r2, [r5, #0]
 800abfe:	e7ee      	b.n	800abde <__swhatbuf_r+0x1e>
 800ac00:	2340      	movs	r3, #64	; 0x40
 800ac02:	2000      	movs	r0, #0
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	b016      	add	sp, #88	; 0x58
 800ac08:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac0c <__smakebuf_r>:
 800ac0c:	898b      	ldrh	r3, [r1, #12]
 800ac0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac10:	079d      	lsls	r5, r3, #30
 800ac12:	4606      	mov	r6, r0
 800ac14:	460c      	mov	r4, r1
 800ac16:	d507      	bpl.n	800ac28 <__smakebuf_r+0x1c>
 800ac18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	6123      	str	r3, [r4, #16]
 800ac20:	2301      	movs	r3, #1
 800ac22:	6163      	str	r3, [r4, #20]
 800ac24:	b002      	add	sp, #8
 800ac26:	bd70      	pop	{r4, r5, r6, pc}
 800ac28:	ab01      	add	r3, sp, #4
 800ac2a:	466a      	mov	r2, sp
 800ac2c:	f7ff ffc8 	bl	800abc0 <__swhatbuf_r>
 800ac30:	9900      	ldr	r1, [sp, #0]
 800ac32:	4605      	mov	r5, r0
 800ac34:	4630      	mov	r0, r6
 800ac36:	f000 f895 	bl	800ad64 <_malloc_r>
 800ac3a:	b948      	cbnz	r0, 800ac50 <__smakebuf_r+0x44>
 800ac3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac40:	059a      	lsls	r2, r3, #22
 800ac42:	d4ef      	bmi.n	800ac24 <__smakebuf_r+0x18>
 800ac44:	f023 0303 	bic.w	r3, r3, #3
 800ac48:	f043 0302 	orr.w	r3, r3, #2
 800ac4c:	81a3      	strh	r3, [r4, #12]
 800ac4e:	e7e3      	b.n	800ac18 <__smakebuf_r+0xc>
 800ac50:	4b0d      	ldr	r3, [pc, #52]	; (800ac88 <__smakebuf_r+0x7c>)
 800ac52:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	6020      	str	r0, [r4, #0]
 800ac58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac5c:	81a3      	strh	r3, [r4, #12]
 800ac5e:	9b00      	ldr	r3, [sp, #0]
 800ac60:	6163      	str	r3, [r4, #20]
 800ac62:	9b01      	ldr	r3, [sp, #4]
 800ac64:	6120      	str	r0, [r4, #16]
 800ac66:	b15b      	cbz	r3, 800ac80 <__smakebuf_r+0x74>
 800ac68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f000 fc63 	bl	800b538 <_isatty_r>
 800ac72:	b128      	cbz	r0, 800ac80 <__smakebuf_r+0x74>
 800ac74:	89a3      	ldrh	r3, [r4, #12]
 800ac76:	f023 0303 	bic.w	r3, r3, #3
 800ac7a:	f043 0301 	orr.w	r3, r3, #1
 800ac7e:	81a3      	strh	r3, [r4, #12]
 800ac80:	89a0      	ldrh	r0, [r4, #12]
 800ac82:	4305      	orrs	r5, r0
 800ac84:	81a5      	strh	r5, [r4, #12]
 800ac86:	e7cd      	b.n	800ac24 <__smakebuf_r+0x18>
 800ac88:	0800aa19 	.word	0x0800aa19

0800ac8c <_free_r>:
 800ac8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac8e:	2900      	cmp	r1, #0
 800ac90:	d044      	beq.n	800ad1c <_free_r+0x90>
 800ac92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac96:	9001      	str	r0, [sp, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac9e:	bfb8      	it	lt
 800aca0:	18e4      	addlt	r4, r4, r3
 800aca2:	f000 fc6b 	bl	800b57c <__malloc_lock>
 800aca6:	4a1e      	ldr	r2, [pc, #120]	; (800ad20 <_free_r+0x94>)
 800aca8:	9801      	ldr	r0, [sp, #4]
 800acaa:	6813      	ldr	r3, [r2, #0]
 800acac:	b933      	cbnz	r3, 800acbc <_free_r+0x30>
 800acae:	6063      	str	r3, [r4, #4]
 800acb0:	6014      	str	r4, [r2, #0]
 800acb2:	b003      	add	sp, #12
 800acb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acb8:	f000 bc66 	b.w	800b588 <__malloc_unlock>
 800acbc:	42a3      	cmp	r3, r4
 800acbe:	d908      	bls.n	800acd2 <_free_r+0x46>
 800acc0:	6825      	ldr	r5, [r4, #0]
 800acc2:	1961      	adds	r1, r4, r5
 800acc4:	428b      	cmp	r3, r1
 800acc6:	bf01      	itttt	eq
 800acc8:	6819      	ldreq	r1, [r3, #0]
 800acca:	685b      	ldreq	r3, [r3, #4]
 800accc:	1949      	addeq	r1, r1, r5
 800acce:	6021      	streq	r1, [r4, #0]
 800acd0:	e7ed      	b.n	800acae <_free_r+0x22>
 800acd2:	461a      	mov	r2, r3
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	b10b      	cbz	r3, 800acdc <_free_r+0x50>
 800acd8:	42a3      	cmp	r3, r4
 800acda:	d9fa      	bls.n	800acd2 <_free_r+0x46>
 800acdc:	6811      	ldr	r1, [r2, #0]
 800acde:	1855      	adds	r5, r2, r1
 800ace0:	42a5      	cmp	r5, r4
 800ace2:	d10b      	bne.n	800acfc <_free_r+0x70>
 800ace4:	6824      	ldr	r4, [r4, #0]
 800ace6:	4421      	add	r1, r4
 800ace8:	1854      	adds	r4, r2, r1
 800acea:	42a3      	cmp	r3, r4
 800acec:	6011      	str	r1, [r2, #0]
 800acee:	d1e0      	bne.n	800acb2 <_free_r+0x26>
 800acf0:	681c      	ldr	r4, [r3, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	6053      	str	r3, [r2, #4]
 800acf6:	4421      	add	r1, r4
 800acf8:	6011      	str	r1, [r2, #0]
 800acfa:	e7da      	b.n	800acb2 <_free_r+0x26>
 800acfc:	d902      	bls.n	800ad04 <_free_r+0x78>
 800acfe:	230c      	movs	r3, #12
 800ad00:	6003      	str	r3, [r0, #0]
 800ad02:	e7d6      	b.n	800acb2 <_free_r+0x26>
 800ad04:	6825      	ldr	r5, [r4, #0]
 800ad06:	1961      	adds	r1, r4, r5
 800ad08:	428b      	cmp	r3, r1
 800ad0a:	bf04      	itt	eq
 800ad0c:	6819      	ldreq	r1, [r3, #0]
 800ad0e:	685b      	ldreq	r3, [r3, #4]
 800ad10:	6063      	str	r3, [r4, #4]
 800ad12:	bf04      	itt	eq
 800ad14:	1949      	addeq	r1, r1, r5
 800ad16:	6021      	streq	r1, [r4, #0]
 800ad18:	6054      	str	r4, [r2, #4]
 800ad1a:	e7ca      	b.n	800acb2 <_free_r+0x26>
 800ad1c:	b003      	add	sp, #12
 800ad1e:	bd30      	pop	{r4, r5, pc}
 800ad20:	200023b8 	.word	0x200023b8

0800ad24 <sbrk_aligned>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	4e0e      	ldr	r6, [pc, #56]	; (800ad60 <sbrk_aligned+0x3c>)
 800ad28:	460c      	mov	r4, r1
 800ad2a:	6831      	ldr	r1, [r6, #0]
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	b911      	cbnz	r1, 800ad36 <sbrk_aligned+0x12>
 800ad30:	f000 fb7a 	bl	800b428 <_sbrk_r>
 800ad34:	6030      	str	r0, [r6, #0]
 800ad36:	4621      	mov	r1, r4
 800ad38:	4628      	mov	r0, r5
 800ad3a:	f000 fb75 	bl	800b428 <_sbrk_r>
 800ad3e:	1c43      	adds	r3, r0, #1
 800ad40:	d00a      	beq.n	800ad58 <sbrk_aligned+0x34>
 800ad42:	1cc4      	adds	r4, r0, #3
 800ad44:	f024 0403 	bic.w	r4, r4, #3
 800ad48:	42a0      	cmp	r0, r4
 800ad4a:	d007      	beq.n	800ad5c <sbrk_aligned+0x38>
 800ad4c:	1a21      	subs	r1, r4, r0
 800ad4e:	4628      	mov	r0, r5
 800ad50:	f000 fb6a 	bl	800b428 <_sbrk_r>
 800ad54:	3001      	adds	r0, #1
 800ad56:	d101      	bne.n	800ad5c <sbrk_aligned+0x38>
 800ad58:	f04f 34ff 	mov.w	r4, #4294967295
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	bd70      	pop	{r4, r5, r6, pc}
 800ad60:	200023bc 	.word	0x200023bc

0800ad64 <_malloc_r>:
 800ad64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad68:	1ccd      	adds	r5, r1, #3
 800ad6a:	f025 0503 	bic.w	r5, r5, #3
 800ad6e:	3508      	adds	r5, #8
 800ad70:	2d0c      	cmp	r5, #12
 800ad72:	bf38      	it	cc
 800ad74:	250c      	movcc	r5, #12
 800ad76:	2d00      	cmp	r5, #0
 800ad78:	4607      	mov	r7, r0
 800ad7a:	db01      	blt.n	800ad80 <_malloc_r+0x1c>
 800ad7c:	42a9      	cmp	r1, r5
 800ad7e:	d905      	bls.n	800ad8c <_malloc_r+0x28>
 800ad80:	230c      	movs	r3, #12
 800ad82:	603b      	str	r3, [r7, #0]
 800ad84:	2600      	movs	r6, #0
 800ad86:	4630      	mov	r0, r6
 800ad88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad8c:	4e2e      	ldr	r6, [pc, #184]	; (800ae48 <_malloc_r+0xe4>)
 800ad8e:	f000 fbf5 	bl	800b57c <__malloc_lock>
 800ad92:	6833      	ldr	r3, [r6, #0]
 800ad94:	461c      	mov	r4, r3
 800ad96:	bb34      	cbnz	r4, 800ade6 <_malloc_r+0x82>
 800ad98:	4629      	mov	r1, r5
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	f7ff ffc2 	bl	800ad24 <sbrk_aligned>
 800ada0:	1c43      	adds	r3, r0, #1
 800ada2:	4604      	mov	r4, r0
 800ada4:	d14d      	bne.n	800ae42 <_malloc_r+0xde>
 800ada6:	6834      	ldr	r4, [r6, #0]
 800ada8:	4626      	mov	r6, r4
 800adaa:	2e00      	cmp	r6, #0
 800adac:	d140      	bne.n	800ae30 <_malloc_r+0xcc>
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	4631      	mov	r1, r6
 800adb2:	4638      	mov	r0, r7
 800adb4:	eb04 0803 	add.w	r8, r4, r3
 800adb8:	f000 fb36 	bl	800b428 <_sbrk_r>
 800adbc:	4580      	cmp	r8, r0
 800adbe:	d13a      	bne.n	800ae36 <_malloc_r+0xd2>
 800adc0:	6821      	ldr	r1, [r4, #0]
 800adc2:	3503      	adds	r5, #3
 800adc4:	1a6d      	subs	r5, r5, r1
 800adc6:	f025 0503 	bic.w	r5, r5, #3
 800adca:	3508      	adds	r5, #8
 800adcc:	2d0c      	cmp	r5, #12
 800adce:	bf38      	it	cc
 800add0:	250c      	movcc	r5, #12
 800add2:	4629      	mov	r1, r5
 800add4:	4638      	mov	r0, r7
 800add6:	f7ff ffa5 	bl	800ad24 <sbrk_aligned>
 800adda:	3001      	adds	r0, #1
 800addc:	d02b      	beq.n	800ae36 <_malloc_r+0xd2>
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	442b      	add	r3, r5
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	e00e      	b.n	800ae04 <_malloc_r+0xa0>
 800ade6:	6822      	ldr	r2, [r4, #0]
 800ade8:	1b52      	subs	r2, r2, r5
 800adea:	d41e      	bmi.n	800ae2a <_malloc_r+0xc6>
 800adec:	2a0b      	cmp	r2, #11
 800adee:	d916      	bls.n	800ae1e <_malloc_r+0xba>
 800adf0:	1961      	adds	r1, r4, r5
 800adf2:	42a3      	cmp	r3, r4
 800adf4:	6025      	str	r5, [r4, #0]
 800adf6:	bf18      	it	ne
 800adf8:	6059      	strne	r1, [r3, #4]
 800adfa:	6863      	ldr	r3, [r4, #4]
 800adfc:	bf08      	it	eq
 800adfe:	6031      	streq	r1, [r6, #0]
 800ae00:	5162      	str	r2, [r4, r5]
 800ae02:	604b      	str	r3, [r1, #4]
 800ae04:	4638      	mov	r0, r7
 800ae06:	f104 060b 	add.w	r6, r4, #11
 800ae0a:	f000 fbbd 	bl	800b588 <__malloc_unlock>
 800ae0e:	f026 0607 	bic.w	r6, r6, #7
 800ae12:	1d23      	adds	r3, r4, #4
 800ae14:	1af2      	subs	r2, r6, r3
 800ae16:	d0b6      	beq.n	800ad86 <_malloc_r+0x22>
 800ae18:	1b9b      	subs	r3, r3, r6
 800ae1a:	50a3      	str	r3, [r4, r2]
 800ae1c:	e7b3      	b.n	800ad86 <_malloc_r+0x22>
 800ae1e:	6862      	ldr	r2, [r4, #4]
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	bf0c      	ite	eq
 800ae24:	6032      	streq	r2, [r6, #0]
 800ae26:	605a      	strne	r2, [r3, #4]
 800ae28:	e7ec      	b.n	800ae04 <_malloc_r+0xa0>
 800ae2a:	4623      	mov	r3, r4
 800ae2c:	6864      	ldr	r4, [r4, #4]
 800ae2e:	e7b2      	b.n	800ad96 <_malloc_r+0x32>
 800ae30:	4634      	mov	r4, r6
 800ae32:	6876      	ldr	r6, [r6, #4]
 800ae34:	e7b9      	b.n	800adaa <_malloc_r+0x46>
 800ae36:	230c      	movs	r3, #12
 800ae38:	603b      	str	r3, [r7, #0]
 800ae3a:	4638      	mov	r0, r7
 800ae3c:	f000 fba4 	bl	800b588 <__malloc_unlock>
 800ae40:	e7a1      	b.n	800ad86 <_malloc_r+0x22>
 800ae42:	6025      	str	r5, [r4, #0]
 800ae44:	e7de      	b.n	800ae04 <_malloc_r+0xa0>
 800ae46:	bf00      	nop
 800ae48:	200023b8 	.word	0x200023b8

0800ae4c <__sfputc_r>:
 800ae4c:	6893      	ldr	r3, [r2, #8]
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	b410      	push	{r4}
 800ae54:	6093      	str	r3, [r2, #8]
 800ae56:	da08      	bge.n	800ae6a <__sfputc_r+0x1e>
 800ae58:	6994      	ldr	r4, [r2, #24]
 800ae5a:	42a3      	cmp	r3, r4
 800ae5c:	db01      	blt.n	800ae62 <__sfputc_r+0x16>
 800ae5e:	290a      	cmp	r1, #10
 800ae60:	d103      	bne.n	800ae6a <__sfputc_r+0x1e>
 800ae62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae66:	f7ff bc31 	b.w	800a6cc <__swbuf_r>
 800ae6a:	6813      	ldr	r3, [r2, #0]
 800ae6c:	1c58      	adds	r0, r3, #1
 800ae6e:	6010      	str	r0, [r2, #0]
 800ae70:	7019      	strb	r1, [r3, #0]
 800ae72:	4608      	mov	r0, r1
 800ae74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <__sfputs_r>:
 800ae7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	460f      	mov	r7, r1
 800ae80:	4614      	mov	r4, r2
 800ae82:	18d5      	adds	r5, r2, r3
 800ae84:	42ac      	cmp	r4, r5
 800ae86:	d101      	bne.n	800ae8c <__sfputs_r+0x12>
 800ae88:	2000      	movs	r0, #0
 800ae8a:	e007      	b.n	800ae9c <__sfputs_r+0x22>
 800ae8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae90:	463a      	mov	r2, r7
 800ae92:	4630      	mov	r0, r6
 800ae94:	f7ff ffda 	bl	800ae4c <__sfputc_r>
 800ae98:	1c43      	adds	r3, r0, #1
 800ae9a:	d1f3      	bne.n	800ae84 <__sfputs_r+0xa>
 800ae9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aea0 <_vfiprintf_r>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	460d      	mov	r5, r1
 800aea6:	b09d      	sub	sp, #116	; 0x74
 800aea8:	4614      	mov	r4, r2
 800aeaa:	4698      	mov	r8, r3
 800aeac:	4606      	mov	r6, r0
 800aeae:	b118      	cbz	r0, 800aeb8 <_vfiprintf_r+0x18>
 800aeb0:	6983      	ldr	r3, [r0, #24]
 800aeb2:	b90b      	cbnz	r3, 800aeb8 <_vfiprintf_r+0x18>
 800aeb4:	f7ff fde4 	bl	800aa80 <__sinit>
 800aeb8:	4b89      	ldr	r3, [pc, #548]	; (800b0e0 <_vfiprintf_r+0x240>)
 800aeba:	429d      	cmp	r5, r3
 800aebc:	d11b      	bne.n	800aef6 <_vfiprintf_r+0x56>
 800aebe:	6875      	ldr	r5, [r6, #4]
 800aec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aec2:	07d9      	lsls	r1, r3, #31
 800aec4:	d405      	bmi.n	800aed2 <_vfiprintf_r+0x32>
 800aec6:	89ab      	ldrh	r3, [r5, #12]
 800aec8:	059a      	lsls	r2, r3, #22
 800aeca:	d402      	bmi.n	800aed2 <_vfiprintf_r+0x32>
 800aecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aece:	f7ff fe75 	bl	800abbc <__retarget_lock_acquire_recursive>
 800aed2:	89ab      	ldrh	r3, [r5, #12]
 800aed4:	071b      	lsls	r3, r3, #28
 800aed6:	d501      	bpl.n	800aedc <_vfiprintf_r+0x3c>
 800aed8:	692b      	ldr	r3, [r5, #16]
 800aeda:	b9eb      	cbnz	r3, 800af18 <_vfiprintf_r+0x78>
 800aedc:	4629      	mov	r1, r5
 800aede:	4630      	mov	r0, r6
 800aee0:	f7ff fc46 	bl	800a770 <__swsetup_r>
 800aee4:	b1c0      	cbz	r0, 800af18 <_vfiprintf_r+0x78>
 800aee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aee8:	07dc      	lsls	r4, r3, #31
 800aeea:	d50e      	bpl.n	800af0a <_vfiprintf_r+0x6a>
 800aeec:	f04f 30ff 	mov.w	r0, #4294967295
 800aef0:	b01d      	add	sp, #116	; 0x74
 800aef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef6:	4b7b      	ldr	r3, [pc, #492]	; (800b0e4 <_vfiprintf_r+0x244>)
 800aef8:	429d      	cmp	r5, r3
 800aefa:	d101      	bne.n	800af00 <_vfiprintf_r+0x60>
 800aefc:	68b5      	ldr	r5, [r6, #8]
 800aefe:	e7df      	b.n	800aec0 <_vfiprintf_r+0x20>
 800af00:	4b79      	ldr	r3, [pc, #484]	; (800b0e8 <_vfiprintf_r+0x248>)
 800af02:	429d      	cmp	r5, r3
 800af04:	bf08      	it	eq
 800af06:	68f5      	ldreq	r5, [r6, #12]
 800af08:	e7da      	b.n	800aec0 <_vfiprintf_r+0x20>
 800af0a:	89ab      	ldrh	r3, [r5, #12]
 800af0c:	0598      	lsls	r0, r3, #22
 800af0e:	d4ed      	bmi.n	800aeec <_vfiprintf_r+0x4c>
 800af10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af12:	f7ff fe54 	bl	800abbe <__retarget_lock_release_recursive>
 800af16:	e7e9      	b.n	800aeec <_vfiprintf_r+0x4c>
 800af18:	2300      	movs	r3, #0
 800af1a:	9309      	str	r3, [sp, #36]	; 0x24
 800af1c:	2320      	movs	r3, #32
 800af1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af22:	f8cd 800c 	str.w	r8, [sp, #12]
 800af26:	2330      	movs	r3, #48	; 0x30
 800af28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0ec <_vfiprintf_r+0x24c>
 800af2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af30:	f04f 0901 	mov.w	r9, #1
 800af34:	4623      	mov	r3, r4
 800af36:	469a      	mov	sl, r3
 800af38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af3c:	b10a      	cbz	r2, 800af42 <_vfiprintf_r+0xa2>
 800af3e:	2a25      	cmp	r2, #37	; 0x25
 800af40:	d1f9      	bne.n	800af36 <_vfiprintf_r+0x96>
 800af42:	ebba 0b04 	subs.w	fp, sl, r4
 800af46:	d00b      	beq.n	800af60 <_vfiprintf_r+0xc0>
 800af48:	465b      	mov	r3, fp
 800af4a:	4622      	mov	r2, r4
 800af4c:	4629      	mov	r1, r5
 800af4e:	4630      	mov	r0, r6
 800af50:	f7ff ff93 	bl	800ae7a <__sfputs_r>
 800af54:	3001      	adds	r0, #1
 800af56:	f000 80aa 	beq.w	800b0ae <_vfiprintf_r+0x20e>
 800af5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af5c:	445a      	add	r2, fp
 800af5e:	9209      	str	r2, [sp, #36]	; 0x24
 800af60:	f89a 3000 	ldrb.w	r3, [sl]
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 80a2 	beq.w	800b0ae <_vfiprintf_r+0x20e>
 800af6a:	2300      	movs	r3, #0
 800af6c:	f04f 32ff 	mov.w	r2, #4294967295
 800af70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af74:	f10a 0a01 	add.w	sl, sl, #1
 800af78:	9304      	str	r3, [sp, #16]
 800af7a:	9307      	str	r3, [sp, #28]
 800af7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af80:	931a      	str	r3, [sp, #104]	; 0x68
 800af82:	4654      	mov	r4, sl
 800af84:	2205      	movs	r2, #5
 800af86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af8a:	4858      	ldr	r0, [pc, #352]	; (800b0ec <_vfiprintf_r+0x24c>)
 800af8c:	f7f5 f940 	bl	8000210 <memchr>
 800af90:	9a04      	ldr	r2, [sp, #16]
 800af92:	b9d8      	cbnz	r0, 800afcc <_vfiprintf_r+0x12c>
 800af94:	06d1      	lsls	r1, r2, #27
 800af96:	bf44      	itt	mi
 800af98:	2320      	movmi	r3, #32
 800af9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af9e:	0713      	lsls	r3, r2, #28
 800afa0:	bf44      	itt	mi
 800afa2:	232b      	movmi	r3, #43	; 0x2b
 800afa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afa8:	f89a 3000 	ldrb.w	r3, [sl]
 800afac:	2b2a      	cmp	r3, #42	; 0x2a
 800afae:	d015      	beq.n	800afdc <_vfiprintf_r+0x13c>
 800afb0:	9a07      	ldr	r2, [sp, #28]
 800afb2:	4654      	mov	r4, sl
 800afb4:	2000      	movs	r0, #0
 800afb6:	f04f 0c0a 	mov.w	ip, #10
 800afba:	4621      	mov	r1, r4
 800afbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afc0:	3b30      	subs	r3, #48	; 0x30
 800afc2:	2b09      	cmp	r3, #9
 800afc4:	d94e      	bls.n	800b064 <_vfiprintf_r+0x1c4>
 800afc6:	b1b0      	cbz	r0, 800aff6 <_vfiprintf_r+0x156>
 800afc8:	9207      	str	r2, [sp, #28]
 800afca:	e014      	b.n	800aff6 <_vfiprintf_r+0x156>
 800afcc:	eba0 0308 	sub.w	r3, r0, r8
 800afd0:	fa09 f303 	lsl.w	r3, r9, r3
 800afd4:	4313      	orrs	r3, r2
 800afd6:	9304      	str	r3, [sp, #16]
 800afd8:	46a2      	mov	sl, r4
 800afda:	e7d2      	b.n	800af82 <_vfiprintf_r+0xe2>
 800afdc:	9b03      	ldr	r3, [sp, #12]
 800afde:	1d19      	adds	r1, r3, #4
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	9103      	str	r1, [sp, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	bfbb      	ittet	lt
 800afe8:	425b      	neglt	r3, r3
 800afea:	f042 0202 	orrlt.w	r2, r2, #2
 800afee:	9307      	strge	r3, [sp, #28]
 800aff0:	9307      	strlt	r3, [sp, #28]
 800aff2:	bfb8      	it	lt
 800aff4:	9204      	strlt	r2, [sp, #16]
 800aff6:	7823      	ldrb	r3, [r4, #0]
 800aff8:	2b2e      	cmp	r3, #46	; 0x2e
 800affa:	d10c      	bne.n	800b016 <_vfiprintf_r+0x176>
 800affc:	7863      	ldrb	r3, [r4, #1]
 800affe:	2b2a      	cmp	r3, #42	; 0x2a
 800b000:	d135      	bne.n	800b06e <_vfiprintf_r+0x1ce>
 800b002:	9b03      	ldr	r3, [sp, #12]
 800b004:	1d1a      	adds	r2, r3, #4
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	9203      	str	r2, [sp, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	bfb8      	it	lt
 800b00e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b012:	3402      	adds	r4, #2
 800b014:	9305      	str	r3, [sp, #20]
 800b016:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0fc <_vfiprintf_r+0x25c>
 800b01a:	7821      	ldrb	r1, [r4, #0]
 800b01c:	2203      	movs	r2, #3
 800b01e:	4650      	mov	r0, sl
 800b020:	f7f5 f8f6 	bl	8000210 <memchr>
 800b024:	b140      	cbz	r0, 800b038 <_vfiprintf_r+0x198>
 800b026:	2340      	movs	r3, #64	; 0x40
 800b028:	eba0 000a 	sub.w	r0, r0, sl
 800b02c:	fa03 f000 	lsl.w	r0, r3, r0
 800b030:	9b04      	ldr	r3, [sp, #16]
 800b032:	4303      	orrs	r3, r0
 800b034:	3401      	adds	r4, #1
 800b036:	9304      	str	r3, [sp, #16]
 800b038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03c:	482c      	ldr	r0, [pc, #176]	; (800b0f0 <_vfiprintf_r+0x250>)
 800b03e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b042:	2206      	movs	r2, #6
 800b044:	f7f5 f8e4 	bl	8000210 <memchr>
 800b048:	2800      	cmp	r0, #0
 800b04a:	d03f      	beq.n	800b0cc <_vfiprintf_r+0x22c>
 800b04c:	4b29      	ldr	r3, [pc, #164]	; (800b0f4 <_vfiprintf_r+0x254>)
 800b04e:	bb1b      	cbnz	r3, 800b098 <_vfiprintf_r+0x1f8>
 800b050:	9b03      	ldr	r3, [sp, #12]
 800b052:	3307      	adds	r3, #7
 800b054:	f023 0307 	bic.w	r3, r3, #7
 800b058:	3308      	adds	r3, #8
 800b05a:	9303      	str	r3, [sp, #12]
 800b05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05e:	443b      	add	r3, r7
 800b060:	9309      	str	r3, [sp, #36]	; 0x24
 800b062:	e767      	b.n	800af34 <_vfiprintf_r+0x94>
 800b064:	fb0c 3202 	mla	r2, ip, r2, r3
 800b068:	460c      	mov	r4, r1
 800b06a:	2001      	movs	r0, #1
 800b06c:	e7a5      	b.n	800afba <_vfiprintf_r+0x11a>
 800b06e:	2300      	movs	r3, #0
 800b070:	3401      	adds	r4, #1
 800b072:	9305      	str	r3, [sp, #20]
 800b074:	4619      	mov	r1, r3
 800b076:	f04f 0c0a 	mov.w	ip, #10
 800b07a:	4620      	mov	r0, r4
 800b07c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b080:	3a30      	subs	r2, #48	; 0x30
 800b082:	2a09      	cmp	r2, #9
 800b084:	d903      	bls.n	800b08e <_vfiprintf_r+0x1ee>
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0c5      	beq.n	800b016 <_vfiprintf_r+0x176>
 800b08a:	9105      	str	r1, [sp, #20]
 800b08c:	e7c3      	b.n	800b016 <_vfiprintf_r+0x176>
 800b08e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b092:	4604      	mov	r4, r0
 800b094:	2301      	movs	r3, #1
 800b096:	e7f0      	b.n	800b07a <_vfiprintf_r+0x1da>
 800b098:	ab03      	add	r3, sp, #12
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	462a      	mov	r2, r5
 800b09e:	4b16      	ldr	r3, [pc, #88]	; (800b0f8 <_vfiprintf_r+0x258>)
 800b0a0:	a904      	add	r1, sp, #16
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f3af 8000 	nop.w
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	1c78      	adds	r0, r7, #1
 800b0ac:	d1d6      	bne.n	800b05c <_vfiprintf_r+0x1bc>
 800b0ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0b0:	07d9      	lsls	r1, r3, #31
 800b0b2:	d405      	bmi.n	800b0c0 <_vfiprintf_r+0x220>
 800b0b4:	89ab      	ldrh	r3, [r5, #12]
 800b0b6:	059a      	lsls	r2, r3, #22
 800b0b8:	d402      	bmi.n	800b0c0 <_vfiprintf_r+0x220>
 800b0ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0bc:	f7ff fd7f 	bl	800abbe <__retarget_lock_release_recursive>
 800b0c0:	89ab      	ldrh	r3, [r5, #12]
 800b0c2:	065b      	lsls	r3, r3, #25
 800b0c4:	f53f af12 	bmi.w	800aeec <_vfiprintf_r+0x4c>
 800b0c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0ca:	e711      	b.n	800aef0 <_vfiprintf_r+0x50>
 800b0cc:	ab03      	add	r3, sp, #12
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	462a      	mov	r2, r5
 800b0d2:	4b09      	ldr	r3, [pc, #36]	; (800b0f8 <_vfiprintf_r+0x258>)
 800b0d4:	a904      	add	r1, sp, #16
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	f000 f880 	bl	800b1dc <_printf_i>
 800b0dc:	e7e4      	b.n	800b0a8 <_vfiprintf_r+0x208>
 800b0de:	bf00      	nop
 800b0e0:	0800c748 	.word	0x0800c748
 800b0e4:	0800c768 	.word	0x0800c768
 800b0e8:	0800c728 	.word	0x0800c728
 800b0ec:	0800c788 	.word	0x0800c788
 800b0f0:	0800c792 	.word	0x0800c792
 800b0f4:	00000000 	.word	0x00000000
 800b0f8:	0800ae7b 	.word	0x0800ae7b
 800b0fc:	0800c78e 	.word	0x0800c78e

0800b100 <_printf_common>:
 800b100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b104:	4616      	mov	r6, r2
 800b106:	4699      	mov	r9, r3
 800b108:	688a      	ldr	r2, [r1, #8]
 800b10a:	690b      	ldr	r3, [r1, #16]
 800b10c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b110:	4293      	cmp	r3, r2
 800b112:	bfb8      	it	lt
 800b114:	4613      	movlt	r3, r2
 800b116:	6033      	str	r3, [r6, #0]
 800b118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b11c:	4607      	mov	r7, r0
 800b11e:	460c      	mov	r4, r1
 800b120:	b10a      	cbz	r2, 800b126 <_printf_common+0x26>
 800b122:	3301      	adds	r3, #1
 800b124:	6033      	str	r3, [r6, #0]
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	0699      	lsls	r1, r3, #26
 800b12a:	bf42      	ittt	mi
 800b12c:	6833      	ldrmi	r3, [r6, #0]
 800b12e:	3302      	addmi	r3, #2
 800b130:	6033      	strmi	r3, [r6, #0]
 800b132:	6825      	ldr	r5, [r4, #0]
 800b134:	f015 0506 	ands.w	r5, r5, #6
 800b138:	d106      	bne.n	800b148 <_printf_common+0x48>
 800b13a:	f104 0a19 	add.w	sl, r4, #25
 800b13e:	68e3      	ldr	r3, [r4, #12]
 800b140:	6832      	ldr	r2, [r6, #0]
 800b142:	1a9b      	subs	r3, r3, r2
 800b144:	42ab      	cmp	r3, r5
 800b146:	dc26      	bgt.n	800b196 <_printf_common+0x96>
 800b148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b14c:	1e13      	subs	r3, r2, #0
 800b14e:	6822      	ldr	r2, [r4, #0]
 800b150:	bf18      	it	ne
 800b152:	2301      	movne	r3, #1
 800b154:	0692      	lsls	r2, r2, #26
 800b156:	d42b      	bmi.n	800b1b0 <_printf_common+0xb0>
 800b158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b15c:	4649      	mov	r1, r9
 800b15e:	4638      	mov	r0, r7
 800b160:	47c0      	blx	r8
 800b162:	3001      	adds	r0, #1
 800b164:	d01e      	beq.n	800b1a4 <_printf_common+0xa4>
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	68e5      	ldr	r5, [r4, #12]
 800b16a:	6832      	ldr	r2, [r6, #0]
 800b16c:	f003 0306 	and.w	r3, r3, #6
 800b170:	2b04      	cmp	r3, #4
 800b172:	bf08      	it	eq
 800b174:	1aad      	subeq	r5, r5, r2
 800b176:	68a3      	ldr	r3, [r4, #8]
 800b178:	6922      	ldr	r2, [r4, #16]
 800b17a:	bf0c      	ite	eq
 800b17c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b180:	2500      	movne	r5, #0
 800b182:	4293      	cmp	r3, r2
 800b184:	bfc4      	itt	gt
 800b186:	1a9b      	subgt	r3, r3, r2
 800b188:	18ed      	addgt	r5, r5, r3
 800b18a:	2600      	movs	r6, #0
 800b18c:	341a      	adds	r4, #26
 800b18e:	42b5      	cmp	r5, r6
 800b190:	d11a      	bne.n	800b1c8 <_printf_common+0xc8>
 800b192:	2000      	movs	r0, #0
 800b194:	e008      	b.n	800b1a8 <_printf_common+0xa8>
 800b196:	2301      	movs	r3, #1
 800b198:	4652      	mov	r2, sl
 800b19a:	4649      	mov	r1, r9
 800b19c:	4638      	mov	r0, r7
 800b19e:	47c0      	blx	r8
 800b1a0:	3001      	adds	r0, #1
 800b1a2:	d103      	bne.n	800b1ac <_printf_common+0xac>
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ac:	3501      	adds	r5, #1
 800b1ae:	e7c6      	b.n	800b13e <_printf_common+0x3e>
 800b1b0:	18e1      	adds	r1, r4, r3
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	2030      	movs	r0, #48	; 0x30
 800b1b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1ba:	4422      	add	r2, r4
 800b1bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1c4:	3302      	adds	r3, #2
 800b1c6:	e7c7      	b.n	800b158 <_printf_common+0x58>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	4622      	mov	r2, r4
 800b1cc:	4649      	mov	r1, r9
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	47c0      	blx	r8
 800b1d2:	3001      	adds	r0, #1
 800b1d4:	d0e6      	beq.n	800b1a4 <_printf_common+0xa4>
 800b1d6:	3601      	adds	r6, #1
 800b1d8:	e7d9      	b.n	800b18e <_printf_common+0x8e>
	...

0800b1dc <_printf_i>:
 800b1dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e0:	7e0f      	ldrb	r7, [r1, #24]
 800b1e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1e4:	2f78      	cmp	r7, #120	; 0x78
 800b1e6:	4691      	mov	r9, r2
 800b1e8:	4680      	mov	r8, r0
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	469a      	mov	sl, r3
 800b1ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1f2:	d807      	bhi.n	800b204 <_printf_i+0x28>
 800b1f4:	2f62      	cmp	r7, #98	; 0x62
 800b1f6:	d80a      	bhi.n	800b20e <_printf_i+0x32>
 800b1f8:	2f00      	cmp	r7, #0
 800b1fa:	f000 80d8 	beq.w	800b3ae <_printf_i+0x1d2>
 800b1fe:	2f58      	cmp	r7, #88	; 0x58
 800b200:	f000 80a3 	beq.w	800b34a <_printf_i+0x16e>
 800b204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b20c:	e03a      	b.n	800b284 <_printf_i+0xa8>
 800b20e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b212:	2b15      	cmp	r3, #21
 800b214:	d8f6      	bhi.n	800b204 <_printf_i+0x28>
 800b216:	a101      	add	r1, pc, #4	; (adr r1, 800b21c <_printf_i+0x40>)
 800b218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b21c:	0800b275 	.word	0x0800b275
 800b220:	0800b289 	.word	0x0800b289
 800b224:	0800b205 	.word	0x0800b205
 800b228:	0800b205 	.word	0x0800b205
 800b22c:	0800b205 	.word	0x0800b205
 800b230:	0800b205 	.word	0x0800b205
 800b234:	0800b289 	.word	0x0800b289
 800b238:	0800b205 	.word	0x0800b205
 800b23c:	0800b205 	.word	0x0800b205
 800b240:	0800b205 	.word	0x0800b205
 800b244:	0800b205 	.word	0x0800b205
 800b248:	0800b395 	.word	0x0800b395
 800b24c:	0800b2b9 	.word	0x0800b2b9
 800b250:	0800b377 	.word	0x0800b377
 800b254:	0800b205 	.word	0x0800b205
 800b258:	0800b205 	.word	0x0800b205
 800b25c:	0800b3b7 	.word	0x0800b3b7
 800b260:	0800b205 	.word	0x0800b205
 800b264:	0800b2b9 	.word	0x0800b2b9
 800b268:	0800b205 	.word	0x0800b205
 800b26c:	0800b205 	.word	0x0800b205
 800b270:	0800b37f 	.word	0x0800b37f
 800b274:	682b      	ldr	r3, [r5, #0]
 800b276:	1d1a      	adds	r2, r3, #4
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	602a      	str	r2, [r5, #0]
 800b27c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b284:	2301      	movs	r3, #1
 800b286:	e0a3      	b.n	800b3d0 <_printf_i+0x1f4>
 800b288:	6820      	ldr	r0, [r4, #0]
 800b28a:	6829      	ldr	r1, [r5, #0]
 800b28c:	0606      	lsls	r6, r0, #24
 800b28e:	f101 0304 	add.w	r3, r1, #4
 800b292:	d50a      	bpl.n	800b2aa <_printf_i+0xce>
 800b294:	680e      	ldr	r6, [r1, #0]
 800b296:	602b      	str	r3, [r5, #0]
 800b298:	2e00      	cmp	r6, #0
 800b29a:	da03      	bge.n	800b2a4 <_printf_i+0xc8>
 800b29c:	232d      	movs	r3, #45	; 0x2d
 800b29e:	4276      	negs	r6, r6
 800b2a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2a4:	485e      	ldr	r0, [pc, #376]	; (800b420 <_printf_i+0x244>)
 800b2a6:	230a      	movs	r3, #10
 800b2a8:	e019      	b.n	800b2de <_printf_i+0x102>
 800b2aa:	680e      	ldr	r6, [r1, #0]
 800b2ac:	602b      	str	r3, [r5, #0]
 800b2ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b2b2:	bf18      	it	ne
 800b2b4:	b236      	sxthne	r6, r6
 800b2b6:	e7ef      	b.n	800b298 <_printf_i+0xbc>
 800b2b8:	682b      	ldr	r3, [r5, #0]
 800b2ba:	6820      	ldr	r0, [r4, #0]
 800b2bc:	1d19      	adds	r1, r3, #4
 800b2be:	6029      	str	r1, [r5, #0]
 800b2c0:	0601      	lsls	r1, r0, #24
 800b2c2:	d501      	bpl.n	800b2c8 <_printf_i+0xec>
 800b2c4:	681e      	ldr	r6, [r3, #0]
 800b2c6:	e002      	b.n	800b2ce <_printf_i+0xf2>
 800b2c8:	0646      	lsls	r6, r0, #25
 800b2ca:	d5fb      	bpl.n	800b2c4 <_printf_i+0xe8>
 800b2cc:	881e      	ldrh	r6, [r3, #0]
 800b2ce:	4854      	ldr	r0, [pc, #336]	; (800b420 <_printf_i+0x244>)
 800b2d0:	2f6f      	cmp	r7, #111	; 0x6f
 800b2d2:	bf0c      	ite	eq
 800b2d4:	2308      	moveq	r3, #8
 800b2d6:	230a      	movne	r3, #10
 800b2d8:	2100      	movs	r1, #0
 800b2da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2de:	6865      	ldr	r5, [r4, #4]
 800b2e0:	60a5      	str	r5, [r4, #8]
 800b2e2:	2d00      	cmp	r5, #0
 800b2e4:	bfa2      	ittt	ge
 800b2e6:	6821      	ldrge	r1, [r4, #0]
 800b2e8:	f021 0104 	bicge.w	r1, r1, #4
 800b2ec:	6021      	strge	r1, [r4, #0]
 800b2ee:	b90e      	cbnz	r6, 800b2f4 <_printf_i+0x118>
 800b2f0:	2d00      	cmp	r5, #0
 800b2f2:	d04d      	beq.n	800b390 <_printf_i+0x1b4>
 800b2f4:	4615      	mov	r5, r2
 800b2f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2fa:	fb03 6711 	mls	r7, r3, r1, r6
 800b2fe:	5dc7      	ldrb	r7, [r0, r7]
 800b300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b304:	4637      	mov	r7, r6
 800b306:	42bb      	cmp	r3, r7
 800b308:	460e      	mov	r6, r1
 800b30a:	d9f4      	bls.n	800b2f6 <_printf_i+0x11a>
 800b30c:	2b08      	cmp	r3, #8
 800b30e:	d10b      	bne.n	800b328 <_printf_i+0x14c>
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	07de      	lsls	r6, r3, #31
 800b314:	d508      	bpl.n	800b328 <_printf_i+0x14c>
 800b316:	6923      	ldr	r3, [r4, #16]
 800b318:	6861      	ldr	r1, [r4, #4]
 800b31a:	4299      	cmp	r1, r3
 800b31c:	bfde      	ittt	le
 800b31e:	2330      	movle	r3, #48	; 0x30
 800b320:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b324:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b328:	1b52      	subs	r2, r2, r5
 800b32a:	6122      	str	r2, [r4, #16]
 800b32c:	f8cd a000 	str.w	sl, [sp]
 800b330:	464b      	mov	r3, r9
 800b332:	aa03      	add	r2, sp, #12
 800b334:	4621      	mov	r1, r4
 800b336:	4640      	mov	r0, r8
 800b338:	f7ff fee2 	bl	800b100 <_printf_common>
 800b33c:	3001      	adds	r0, #1
 800b33e:	d14c      	bne.n	800b3da <_printf_i+0x1fe>
 800b340:	f04f 30ff 	mov.w	r0, #4294967295
 800b344:	b004      	add	sp, #16
 800b346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34a:	4835      	ldr	r0, [pc, #212]	; (800b420 <_printf_i+0x244>)
 800b34c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b350:	6829      	ldr	r1, [r5, #0]
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	f851 6b04 	ldr.w	r6, [r1], #4
 800b358:	6029      	str	r1, [r5, #0]
 800b35a:	061d      	lsls	r5, r3, #24
 800b35c:	d514      	bpl.n	800b388 <_printf_i+0x1ac>
 800b35e:	07df      	lsls	r7, r3, #31
 800b360:	bf44      	itt	mi
 800b362:	f043 0320 	orrmi.w	r3, r3, #32
 800b366:	6023      	strmi	r3, [r4, #0]
 800b368:	b91e      	cbnz	r6, 800b372 <_printf_i+0x196>
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	f023 0320 	bic.w	r3, r3, #32
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	2310      	movs	r3, #16
 800b374:	e7b0      	b.n	800b2d8 <_printf_i+0xfc>
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	f043 0320 	orr.w	r3, r3, #32
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	2378      	movs	r3, #120	; 0x78
 800b380:	4828      	ldr	r0, [pc, #160]	; (800b424 <_printf_i+0x248>)
 800b382:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b386:	e7e3      	b.n	800b350 <_printf_i+0x174>
 800b388:	0659      	lsls	r1, r3, #25
 800b38a:	bf48      	it	mi
 800b38c:	b2b6      	uxthmi	r6, r6
 800b38e:	e7e6      	b.n	800b35e <_printf_i+0x182>
 800b390:	4615      	mov	r5, r2
 800b392:	e7bb      	b.n	800b30c <_printf_i+0x130>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	6826      	ldr	r6, [r4, #0]
 800b398:	6961      	ldr	r1, [r4, #20]
 800b39a:	1d18      	adds	r0, r3, #4
 800b39c:	6028      	str	r0, [r5, #0]
 800b39e:	0635      	lsls	r5, r6, #24
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	d501      	bpl.n	800b3a8 <_printf_i+0x1cc>
 800b3a4:	6019      	str	r1, [r3, #0]
 800b3a6:	e002      	b.n	800b3ae <_printf_i+0x1d2>
 800b3a8:	0670      	lsls	r0, r6, #25
 800b3aa:	d5fb      	bpl.n	800b3a4 <_printf_i+0x1c8>
 800b3ac:	8019      	strh	r1, [r3, #0]
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	6123      	str	r3, [r4, #16]
 800b3b2:	4615      	mov	r5, r2
 800b3b4:	e7ba      	b.n	800b32c <_printf_i+0x150>
 800b3b6:	682b      	ldr	r3, [r5, #0]
 800b3b8:	1d1a      	adds	r2, r3, #4
 800b3ba:	602a      	str	r2, [r5, #0]
 800b3bc:	681d      	ldr	r5, [r3, #0]
 800b3be:	6862      	ldr	r2, [r4, #4]
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	f7f4 ff24 	bl	8000210 <memchr>
 800b3c8:	b108      	cbz	r0, 800b3ce <_printf_i+0x1f2>
 800b3ca:	1b40      	subs	r0, r0, r5
 800b3cc:	6060      	str	r0, [r4, #4]
 800b3ce:	6863      	ldr	r3, [r4, #4]
 800b3d0:	6123      	str	r3, [r4, #16]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3d8:	e7a8      	b.n	800b32c <_printf_i+0x150>
 800b3da:	6923      	ldr	r3, [r4, #16]
 800b3dc:	462a      	mov	r2, r5
 800b3de:	4649      	mov	r1, r9
 800b3e0:	4640      	mov	r0, r8
 800b3e2:	47d0      	blx	sl
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	d0ab      	beq.n	800b340 <_printf_i+0x164>
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	079b      	lsls	r3, r3, #30
 800b3ec:	d413      	bmi.n	800b416 <_printf_i+0x23a>
 800b3ee:	68e0      	ldr	r0, [r4, #12]
 800b3f0:	9b03      	ldr	r3, [sp, #12]
 800b3f2:	4298      	cmp	r0, r3
 800b3f4:	bfb8      	it	lt
 800b3f6:	4618      	movlt	r0, r3
 800b3f8:	e7a4      	b.n	800b344 <_printf_i+0x168>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	4649      	mov	r1, r9
 800b400:	4640      	mov	r0, r8
 800b402:	47d0      	blx	sl
 800b404:	3001      	adds	r0, #1
 800b406:	d09b      	beq.n	800b340 <_printf_i+0x164>
 800b408:	3501      	adds	r5, #1
 800b40a:	68e3      	ldr	r3, [r4, #12]
 800b40c:	9903      	ldr	r1, [sp, #12]
 800b40e:	1a5b      	subs	r3, r3, r1
 800b410:	42ab      	cmp	r3, r5
 800b412:	dcf2      	bgt.n	800b3fa <_printf_i+0x21e>
 800b414:	e7eb      	b.n	800b3ee <_printf_i+0x212>
 800b416:	2500      	movs	r5, #0
 800b418:	f104 0619 	add.w	r6, r4, #25
 800b41c:	e7f5      	b.n	800b40a <_printf_i+0x22e>
 800b41e:	bf00      	nop
 800b420:	0800c799 	.word	0x0800c799
 800b424:	0800c7aa 	.word	0x0800c7aa

0800b428 <_sbrk_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	4d06      	ldr	r5, [pc, #24]	; (800b444 <_sbrk_r+0x1c>)
 800b42c:	2300      	movs	r3, #0
 800b42e:	4604      	mov	r4, r0
 800b430:	4608      	mov	r0, r1
 800b432:	602b      	str	r3, [r5, #0]
 800b434:	f7f6 fcda 	bl	8001dec <_sbrk>
 800b438:	1c43      	adds	r3, r0, #1
 800b43a:	d102      	bne.n	800b442 <_sbrk_r+0x1a>
 800b43c:	682b      	ldr	r3, [r5, #0]
 800b43e:	b103      	cbz	r3, 800b442 <_sbrk_r+0x1a>
 800b440:	6023      	str	r3, [r4, #0]
 800b442:	bd38      	pop	{r3, r4, r5, pc}
 800b444:	200023c0 	.word	0x200023c0

0800b448 <__sread>:
 800b448:	b510      	push	{r4, lr}
 800b44a:	460c      	mov	r4, r1
 800b44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b450:	f000 f8a0 	bl	800b594 <_read_r>
 800b454:	2800      	cmp	r0, #0
 800b456:	bfab      	itete	ge
 800b458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b45a:	89a3      	ldrhlt	r3, [r4, #12]
 800b45c:	181b      	addge	r3, r3, r0
 800b45e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b462:	bfac      	ite	ge
 800b464:	6563      	strge	r3, [r4, #84]	; 0x54
 800b466:	81a3      	strhlt	r3, [r4, #12]
 800b468:	bd10      	pop	{r4, pc}

0800b46a <__swrite>:
 800b46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b46e:	461f      	mov	r7, r3
 800b470:	898b      	ldrh	r3, [r1, #12]
 800b472:	05db      	lsls	r3, r3, #23
 800b474:	4605      	mov	r5, r0
 800b476:	460c      	mov	r4, r1
 800b478:	4616      	mov	r6, r2
 800b47a:	d505      	bpl.n	800b488 <__swrite+0x1e>
 800b47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b480:	2302      	movs	r3, #2
 800b482:	2200      	movs	r2, #0
 800b484:	f000 f868 	bl	800b558 <_lseek_r>
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b48e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b492:	81a3      	strh	r3, [r4, #12]
 800b494:	4632      	mov	r2, r6
 800b496:	463b      	mov	r3, r7
 800b498:	4628      	mov	r0, r5
 800b49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b49e:	f000 b817 	b.w	800b4d0 <_write_r>

0800b4a2 <__sseek>:
 800b4a2:	b510      	push	{r4, lr}
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4aa:	f000 f855 	bl	800b558 <_lseek_r>
 800b4ae:	1c43      	adds	r3, r0, #1
 800b4b0:	89a3      	ldrh	r3, [r4, #12]
 800b4b2:	bf15      	itete	ne
 800b4b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4be:	81a3      	strheq	r3, [r4, #12]
 800b4c0:	bf18      	it	ne
 800b4c2:	81a3      	strhne	r3, [r4, #12]
 800b4c4:	bd10      	pop	{r4, pc}

0800b4c6 <__sclose>:
 800b4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ca:	f000 b813 	b.w	800b4f4 <_close_r>
	...

0800b4d0 <_write_r>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	4d07      	ldr	r5, [pc, #28]	; (800b4f0 <_write_r+0x20>)
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	4608      	mov	r0, r1
 800b4d8:	4611      	mov	r1, r2
 800b4da:	2200      	movs	r2, #0
 800b4dc:	602a      	str	r2, [r5, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f7f5 fd1b 	bl	8000f1a <_write>
 800b4e4:	1c43      	adds	r3, r0, #1
 800b4e6:	d102      	bne.n	800b4ee <_write_r+0x1e>
 800b4e8:	682b      	ldr	r3, [r5, #0]
 800b4ea:	b103      	cbz	r3, 800b4ee <_write_r+0x1e>
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	bd38      	pop	{r3, r4, r5, pc}
 800b4f0:	200023c0 	.word	0x200023c0

0800b4f4 <_close_r>:
 800b4f4:	b538      	push	{r3, r4, r5, lr}
 800b4f6:	4d06      	ldr	r5, [pc, #24]	; (800b510 <_close_r+0x1c>)
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	4608      	mov	r0, r1
 800b4fe:	602b      	str	r3, [r5, #0]
 800b500:	f7f6 fc3f 	bl	8001d82 <_close>
 800b504:	1c43      	adds	r3, r0, #1
 800b506:	d102      	bne.n	800b50e <_close_r+0x1a>
 800b508:	682b      	ldr	r3, [r5, #0]
 800b50a:	b103      	cbz	r3, 800b50e <_close_r+0x1a>
 800b50c:	6023      	str	r3, [r4, #0]
 800b50e:	bd38      	pop	{r3, r4, r5, pc}
 800b510:	200023c0 	.word	0x200023c0

0800b514 <_fstat_r>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	4d07      	ldr	r5, [pc, #28]	; (800b534 <_fstat_r+0x20>)
 800b518:	2300      	movs	r3, #0
 800b51a:	4604      	mov	r4, r0
 800b51c:	4608      	mov	r0, r1
 800b51e:	4611      	mov	r1, r2
 800b520:	602b      	str	r3, [r5, #0]
 800b522:	f7f6 fc3a 	bl	8001d9a <_fstat>
 800b526:	1c43      	adds	r3, r0, #1
 800b528:	d102      	bne.n	800b530 <_fstat_r+0x1c>
 800b52a:	682b      	ldr	r3, [r5, #0]
 800b52c:	b103      	cbz	r3, 800b530 <_fstat_r+0x1c>
 800b52e:	6023      	str	r3, [r4, #0]
 800b530:	bd38      	pop	{r3, r4, r5, pc}
 800b532:	bf00      	nop
 800b534:	200023c0 	.word	0x200023c0

0800b538 <_isatty_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4d06      	ldr	r5, [pc, #24]	; (800b554 <_isatty_r+0x1c>)
 800b53c:	2300      	movs	r3, #0
 800b53e:	4604      	mov	r4, r0
 800b540:	4608      	mov	r0, r1
 800b542:	602b      	str	r3, [r5, #0]
 800b544:	f7f6 fc39 	bl	8001dba <_isatty>
 800b548:	1c43      	adds	r3, r0, #1
 800b54a:	d102      	bne.n	800b552 <_isatty_r+0x1a>
 800b54c:	682b      	ldr	r3, [r5, #0]
 800b54e:	b103      	cbz	r3, 800b552 <_isatty_r+0x1a>
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	bd38      	pop	{r3, r4, r5, pc}
 800b554:	200023c0 	.word	0x200023c0

0800b558 <_lseek_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	4d07      	ldr	r5, [pc, #28]	; (800b578 <_lseek_r+0x20>)
 800b55c:	4604      	mov	r4, r0
 800b55e:	4608      	mov	r0, r1
 800b560:	4611      	mov	r1, r2
 800b562:	2200      	movs	r2, #0
 800b564:	602a      	str	r2, [r5, #0]
 800b566:	461a      	mov	r2, r3
 800b568:	f7f6 fc32 	bl	8001dd0 <_lseek>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	d102      	bne.n	800b576 <_lseek_r+0x1e>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	b103      	cbz	r3, 800b576 <_lseek_r+0x1e>
 800b574:	6023      	str	r3, [r4, #0]
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	200023c0 	.word	0x200023c0

0800b57c <__malloc_lock>:
 800b57c:	4801      	ldr	r0, [pc, #4]	; (800b584 <__malloc_lock+0x8>)
 800b57e:	f7ff bb1d 	b.w	800abbc <__retarget_lock_acquire_recursive>
 800b582:	bf00      	nop
 800b584:	200023b4 	.word	0x200023b4

0800b588 <__malloc_unlock>:
 800b588:	4801      	ldr	r0, [pc, #4]	; (800b590 <__malloc_unlock+0x8>)
 800b58a:	f7ff bb18 	b.w	800abbe <__retarget_lock_release_recursive>
 800b58e:	bf00      	nop
 800b590:	200023b4 	.word	0x200023b4

0800b594 <_read_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4d07      	ldr	r5, [pc, #28]	; (800b5b4 <_read_r+0x20>)
 800b598:	4604      	mov	r4, r0
 800b59a:	4608      	mov	r0, r1
 800b59c:	4611      	mov	r1, r2
 800b59e:	2200      	movs	r2, #0
 800b5a0:	602a      	str	r2, [r5, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f7f6 fbd0 	bl	8001d48 <_read>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	d102      	bne.n	800b5b2 <_read_r+0x1e>
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	b103      	cbz	r3, 800b5b2 <_read_r+0x1e>
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	bd38      	pop	{r3, r4, r5, pc}
 800b5b4:	200023c0 	.word	0x200023c0

0800b5b8 <pow>:
 800b5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ba:	ed2d 8b02 	vpush	{d8}
 800b5be:	eeb0 8a40 	vmov.f32	s16, s0
 800b5c2:	eef0 8a60 	vmov.f32	s17, s1
 800b5c6:	ec55 4b11 	vmov	r4, r5, d1
 800b5ca:	f000 f891 	bl	800b6f0 <__ieee754_pow>
 800b5ce:	4622      	mov	r2, r4
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	ec57 6b10 	vmov	r6, r7, d0
 800b5da:	f7f5 fabf 	bl	8000b5c <__aeabi_dcmpun>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d13b      	bne.n	800b65a <pow+0xa2>
 800b5e2:	ec51 0b18 	vmov	r0, r1, d8
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f7f5 fa85 	bl	8000af8 <__aeabi_dcmpeq>
 800b5ee:	b1b8      	cbz	r0, 800b620 <pow+0x68>
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	f7f5 fa7e 	bl	8000af8 <__aeabi_dcmpeq>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d146      	bne.n	800b68e <pow+0xd6>
 800b600:	ec45 4b10 	vmov	d0, r4, r5
 800b604:	f000 fe8d 	bl	800c322 <finite>
 800b608:	b338      	cbz	r0, 800b65a <pow+0xa2>
 800b60a:	2200      	movs	r2, #0
 800b60c:	2300      	movs	r3, #0
 800b60e:	4620      	mov	r0, r4
 800b610:	4629      	mov	r1, r5
 800b612:	f7f5 fa7b 	bl	8000b0c <__aeabi_dcmplt>
 800b616:	b300      	cbz	r0, 800b65a <pow+0xa2>
 800b618:	f7fe ff98 	bl	800a54c <__errno>
 800b61c:	2322      	movs	r3, #34	; 0x22
 800b61e:	e01b      	b.n	800b658 <pow+0xa0>
 800b620:	ec47 6b10 	vmov	d0, r6, r7
 800b624:	f000 fe7d 	bl	800c322 <finite>
 800b628:	b9e0      	cbnz	r0, 800b664 <pow+0xac>
 800b62a:	eeb0 0a48 	vmov.f32	s0, s16
 800b62e:	eef0 0a68 	vmov.f32	s1, s17
 800b632:	f000 fe76 	bl	800c322 <finite>
 800b636:	b1a8      	cbz	r0, 800b664 <pow+0xac>
 800b638:	ec45 4b10 	vmov	d0, r4, r5
 800b63c:	f000 fe71 	bl	800c322 <finite>
 800b640:	b180      	cbz	r0, 800b664 <pow+0xac>
 800b642:	4632      	mov	r2, r6
 800b644:	463b      	mov	r3, r7
 800b646:	4630      	mov	r0, r6
 800b648:	4639      	mov	r1, r7
 800b64a:	f7f5 fa87 	bl	8000b5c <__aeabi_dcmpun>
 800b64e:	2800      	cmp	r0, #0
 800b650:	d0e2      	beq.n	800b618 <pow+0x60>
 800b652:	f7fe ff7b 	bl	800a54c <__errno>
 800b656:	2321      	movs	r3, #33	; 0x21
 800b658:	6003      	str	r3, [r0, #0]
 800b65a:	ecbd 8b02 	vpop	{d8}
 800b65e:	ec47 6b10 	vmov	d0, r6, r7
 800b662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b664:	2200      	movs	r2, #0
 800b666:	2300      	movs	r3, #0
 800b668:	4630      	mov	r0, r6
 800b66a:	4639      	mov	r1, r7
 800b66c:	f7f5 fa44 	bl	8000af8 <__aeabi_dcmpeq>
 800b670:	2800      	cmp	r0, #0
 800b672:	d0f2      	beq.n	800b65a <pow+0xa2>
 800b674:	eeb0 0a48 	vmov.f32	s0, s16
 800b678:	eef0 0a68 	vmov.f32	s1, s17
 800b67c:	f000 fe51 	bl	800c322 <finite>
 800b680:	2800      	cmp	r0, #0
 800b682:	d0ea      	beq.n	800b65a <pow+0xa2>
 800b684:	ec45 4b10 	vmov	d0, r4, r5
 800b688:	f000 fe4b 	bl	800c322 <finite>
 800b68c:	e7c3      	b.n	800b616 <pow+0x5e>
 800b68e:	4f01      	ldr	r7, [pc, #4]	; (800b694 <pow+0xdc>)
 800b690:	2600      	movs	r6, #0
 800b692:	e7e2      	b.n	800b65a <pow+0xa2>
 800b694:	3ff00000 	.word	0x3ff00000

0800b698 <sqrt>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	ed2d 8b02 	vpush	{d8}
 800b69e:	ec55 4b10 	vmov	r4, r5, d0
 800b6a2:	f000 fd53 	bl	800c14c <__ieee754_sqrt>
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	462b      	mov	r3, r5
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	eeb0 8a40 	vmov.f32	s16, s0
 800b6b2:	eef0 8a60 	vmov.f32	s17, s1
 800b6b6:	f7f5 fa51 	bl	8000b5c <__aeabi_dcmpun>
 800b6ba:	b990      	cbnz	r0, 800b6e2 <sqrt+0x4a>
 800b6bc:	2200      	movs	r2, #0
 800b6be:	2300      	movs	r3, #0
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	f7f5 fa22 	bl	8000b0c <__aeabi_dcmplt>
 800b6c8:	b158      	cbz	r0, 800b6e2 <sqrt+0x4a>
 800b6ca:	f7fe ff3f 	bl	800a54c <__errno>
 800b6ce:	2321      	movs	r3, #33	; 0x21
 800b6d0:	6003      	str	r3, [r0, #0]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	4619      	mov	r1, r3
 800b6da:	f7f5 f8cf 	bl	800087c <__aeabi_ddiv>
 800b6de:	ec41 0b18 	vmov	d8, r0, r1
 800b6e2:	eeb0 0a48 	vmov.f32	s0, s16
 800b6e6:	eef0 0a68 	vmov.f32	s1, s17
 800b6ea:	ecbd 8b02 	vpop	{d8}
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}

0800b6f0 <__ieee754_pow>:
 800b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f4:	ed2d 8b06 	vpush	{d8-d10}
 800b6f8:	b089      	sub	sp, #36	; 0x24
 800b6fa:	ed8d 1b00 	vstr	d1, [sp]
 800b6fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b702:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b706:	ea58 0102 	orrs.w	r1, r8, r2
 800b70a:	ec57 6b10 	vmov	r6, r7, d0
 800b70e:	d115      	bne.n	800b73c <__ieee754_pow+0x4c>
 800b710:	19b3      	adds	r3, r6, r6
 800b712:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b716:	4152      	adcs	r2, r2
 800b718:	4299      	cmp	r1, r3
 800b71a:	4b89      	ldr	r3, [pc, #548]	; (800b940 <__ieee754_pow+0x250>)
 800b71c:	4193      	sbcs	r3, r2
 800b71e:	f080 84d2 	bcs.w	800c0c6 <__ieee754_pow+0x9d6>
 800b722:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b726:	4630      	mov	r0, r6
 800b728:	4639      	mov	r1, r7
 800b72a:	f7f4 fdc7 	bl	80002bc <__adddf3>
 800b72e:	ec41 0b10 	vmov	d0, r0, r1
 800b732:	b009      	add	sp, #36	; 0x24
 800b734:	ecbd 8b06 	vpop	{d8-d10}
 800b738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73c:	4b81      	ldr	r3, [pc, #516]	; (800b944 <__ieee754_pow+0x254>)
 800b73e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b742:	429c      	cmp	r4, r3
 800b744:	ee10 aa10 	vmov	sl, s0
 800b748:	463d      	mov	r5, r7
 800b74a:	dc06      	bgt.n	800b75a <__ieee754_pow+0x6a>
 800b74c:	d101      	bne.n	800b752 <__ieee754_pow+0x62>
 800b74e:	2e00      	cmp	r6, #0
 800b750:	d1e7      	bne.n	800b722 <__ieee754_pow+0x32>
 800b752:	4598      	cmp	r8, r3
 800b754:	dc01      	bgt.n	800b75a <__ieee754_pow+0x6a>
 800b756:	d10f      	bne.n	800b778 <__ieee754_pow+0x88>
 800b758:	b172      	cbz	r2, 800b778 <__ieee754_pow+0x88>
 800b75a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b75e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b762:	ea55 050a 	orrs.w	r5, r5, sl
 800b766:	d1dc      	bne.n	800b722 <__ieee754_pow+0x32>
 800b768:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b76c:	18db      	adds	r3, r3, r3
 800b76e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b772:	4152      	adcs	r2, r2
 800b774:	429d      	cmp	r5, r3
 800b776:	e7d0      	b.n	800b71a <__ieee754_pow+0x2a>
 800b778:	2d00      	cmp	r5, #0
 800b77a:	da3b      	bge.n	800b7f4 <__ieee754_pow+0x104>
 800b77c:	4b72      	ldr	r3, [pc, #456]	; (800b948 <__ieee754_pow+0x258>)
 800b77e:	4598      	cmp	r8, r3
 800b780:	dc51      	bgt.n	800b826 <__ieee754_pow+0x136>
 800b782:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b786:	4598      	cmp	r8, r3
 800b788:	f340 84ac 	ble.w	800c0e4 <__ieee754_pow+0x9f4>
 800b78c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b790:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b794:	2b14      	cmp	r3, #20
 800b796:	dd0f      	ble.n	800b7b8 <__ieee754_pow+0xc8>
 800b798:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b79c:	fa22 f103 	lsr.w	r1, r2, r3
 800b7a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	f040 849d 	bne.w	800c0e4 <__ieee754_pow+0x9f4>
 800b7aa:	f001 0101 	and.w	r1, r1, #1
 800b7ae:	f1c1 0302 	rsb	r3, r1, #2
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	b182      	cbz	r2, 800b7d8 <__ieee754_pow+0xe8>
 800b7b6:	e05f      	b.n	800b878 <__ieee754_pow+0x188>
 800b7b8:	2a00      	cmp	r2, #0
 800b7ba:	d15b      	bne.n	800b874 <__ieee754_pow+0x184>
 800b7bc:	f1c3 0314 	rsb	r3, r3, #20
 800b7c0:	fa48 f103 	asr.w	r1, r8, r3
 800b7c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b7c8:	4543      	cmp	r3, r8
 800b7ca:	f040 8488 	bne.w	800c0de <__ieee754_pow+0x9ee>
 800b7ce:	f001 0101 	and.w	r1, r1, #1
 800b7d2:	f1c1 0302 	rsb	r3, r1, #2
 800b7d6:	9304      	str	r3, [sp, #16]
 800b7d8:	4b5c      	ldr	r3, [pc, #368]	; (800b94c <__ieee754_pow+0x25c>)
 800b7da:	4598      	cmp	r8, r3
 800b7dc:	d132      	bne.n	800b844 <__ieee754_pow+0x154>
 800b7de:	f1b9 0f00 	cmp.w	r9, #0
 800b7e2:	f280 8478 	bge.w	800c0d6 <__ieee754_pow+0x9e6>
 800b7e6:	4959      	ldr	r1, [pc, #356]	; (800b94c <__ieee754_pow+0x25c>)
 800b7e8:	4632      	mov	r2, r6
 800b7ea:	463b      	mov	r3, r7
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	f7f5 f845 	bl	800087c <__aeabi_ddiv>
 800b7f2:	e79c      	b.n	800b72e <__ieee754_pow+0x3e>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	9304      	str	r3, [sp, #16]
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	d13d      	bne.n	800b878 <__ieee754_pow+0x188>
 800b7fc:	4b51      	ldr	r3, [pc, #324]	; (800b944 <__ieee754_pow+0x254>)
 800b7fe:	4598      	cmp	r8, r3
 800b800:	d1ea      	bne.n	800b7d8 <__ieee754_pow+0xe8>
 800b802:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b806:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b80a:	ea53 030a 	orrs.w	r3, r3, sl
 800b80e:	f000 845a 	beq.w	800c0c6 <__ieee754_pow+0x9d6>
 800b812:	4b4f      	ldr	r3, [pc, #316]	; (800b950 <__ieee754_pow+0x260>)
 800b814:	429c      	cmp	r4, r3
 800b816:	dd08      	ble.n	800b82a <__ieee754_pow+0x13a>
 800b818:	f1b9 0f00 	cmp.w	r9, #0
 800b81c:	f2c0 8457 	blt.w	800c0ce <__ieee754_pow+0x9de>
 800b820:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b824:	e783      	b.n	800b72e <__ieee754_pow+0x3e>
 800b826:	2302      	movs	r3, #2
 800b828:	e7e5      	b.n	800b7f6 <__ieee754_pow+0x106>
 800b82a:	f1b9 0f00 	cmp.w	r9, #0
 800b82e:	f04f 0000 	mov.w	r0, #0
 800b832:	f04f 0100 	mov.w	r1, #0
 800b836:	f6bf af7a 	bge.w	800b72e <__ieee754_pow+0x3e>
 800b83a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b83e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b842:	e774      	b.n	800b72e <__ieee754_pow+0x3e>
 800b844:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b848:	d106      	bne.n	800b858 <__ieee754_pow+0x168>
 800b84a:	4632      	mov	r2, r6
 800b84c:	463b      	mov	r3, r7
 800b84e:	4630      	mov	r0, r6
 800b850:	4639      	mov	r1, r7
 800b852:	f7f4 fee9 	bl	8000628 <__aeabi_dmul>
 800b856:	e76a      	b.n	800b72e <__ieee754_pow+0x3e>
 800b858:	4b3e      	ldr	r3, [pc, #248]	; (800b954 <__ieee754_pow+0x264>)
 800b85a:	4599      	cmp	r9, r3
 800b85c:	d10c      	bne.n	800b878 <__ieee754_pow+0x188>
 800b85e:	2d00      	cmp	r5, #0
 800b860:	db0a      	blt.n	800b878 <__ieee754_pow+0x188>
 800b862:	ec47 6b10 	vmov	d0, r6, r7
 800b866:	b009      	add	sp, #36	; 0x24
 800b868:	ecbd 8b06 	vpop	{d8-d10}
 800b86c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b870:	f000 bc6c 	b.w	800c14c <__ieee754_sqrt>
 800b874:	2300      	movs	r3, #0
 800b876:	9304      	str	r3, [sp, #16]
 800b878:	ec47 6b10 	vmov	d0, r6, r7
 800b87c:	f000 fd48 	bl	800c310 <fabs>
 800b880:	ec51 0b10 	vmov	r0, r1, d0
 800b884:	f1ba 0f00 	cmp.w	sl, #0
 800b888:	d129      	bne.n	800b8de <__ieee754_pow+0x1ee>
 800b88a:	b124      	cbz	r4, 800b896 <__ieee754_pow+0x1a6>
 800b88c:	4b2f      	ldr	r3, [pc, #188]	; (800b94c <__ieee754_pow+0x25c>)
 800b88e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b892:	429a      	cmp	r2, r3
 800b894:	d123      	bne.n	800b8de <__ieee754_pow+0x1ee>
 800b896:	f1b9 0f00 	cmp.w	r9, #0
 800b89a:	da05      	bge.n	800b8a8 <__ieee754_pow+0x1b8>
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	492a      	ldr	r1, [pc, #168]	; (800b94c <__ieee754_pow+0x25c>)
 800b8a4:	f7f4 ffea 	bl	800087c <__aeabi_ddiv>
 800b8a8:	2d00      	cmp	r5, #0
 800b8aa:	f6bf af40 	bge.w	800b72e <__ieee754_pow+0x3e>
 800b8ae:	9b04      	ldr	r3, [sp, #16]
 800b8b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b8b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b8b8:	4323      	orrs	r3, r4
 800b8ba:	d108      	bne.n	800b8ce <__ieee754_pow+0x1de>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	460b      	mov	r3, r1
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	f7f4 fcf8 	bl	80002b8 <__aeabi_dsub>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	e78f      	b.n	800b7ee <__ieee754_pow+0xfe>
 800b8ce:	9b04      	ldr	r3, [sp, #16]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	f47f af2c 	bne.w	800b72e <__ieee754_pow+0x3e>
 800b8d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8da:	4619      	mov	r1, r3
 800b8dc:	e727      	b.n	800b72e <__ieee754_pow+0x3e>
 800b8de:	0feb      	lsrs	r3, r5, #31
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	9306      	str	r3, [sp, #24]
 800b8e4:	9a06      	ldr	r2, [sp, #24]
 800b8e6:	9b04      	ldr	r3, [sp, #16]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	d102      	bne.n	800b8f2 <__ieee754_pow+0x202>
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	463b      	mov	r3, r7
 800b8f0:	e7e6      	b.n	800b8c0 <__ieee754_pow+0x1d0>
 800b8f2:	4b19      	ldr	r3, [pc, #100]	; (800b958 <__ieee754_pow+0x268>)
 800b8f4:	4598      	cmp	r8, r3
 800b8f6:	f340 80fb 	ble.w	800baf0 <__ieee754_pow+0x400>
 800b8fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b8fe:	4598      	cmp	r8, r3
 800b900:	4b13      	ldr	r3, [pc, #76]	; (800b950 <__ieee754_pow+0x260>)
 800b902:	dd0c      	ble.n	800b91e <__ieee754_pow+0x22e>
 800b904:	429c      	cmp	r4, r3
 800b906:	dc0f      	bgt.n	800b928 <__ieee754_pow+0x238>
 800b908:	f1b9 0f00 	cmp.w	r9, #0
 800b90c:	da0f      	bge.n	800b92e <__ieee754_pow+0x23e>
 800b90e:	2000      	movs	r0, #0
 800b910:	b009      	add	sp, #36	; 0x24
 800b912:	ecbd 8b06 	vpop	{d8-d10}
 800b916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91a:	f000 bcf0 	b.w	800c2fe <__math_oflow>
 800b91e:	429c      	cmp	r4, r3
 800b920:	dbf2      	blt.n	800b908 <__ieee754_pow+0x218>
 800b922:	4b0a      	ldr	r3, [pc, #40]	; (800b94c <__ieee754_pow+0x25c>)
 800b924:	429c      	cmp	r4, r3
 800b926:	dd19      	ble.n	800b95c <__ieee754_pow+0x26c>
 800b928:	f1b9 0f00 	cmp.w	r9, #0
 800b92c:	dcef      	bgt.n	800b90e <__ieee754_pow+0x21e>
 800b92e:	2000      	movs	r0, #0
 800b930:	b009      	add	sp, #36	; 0x24
 800b932:	ecbd 8b06 	vpop	{d8-d10}
 800b936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93a:	f000 bcd7 	b.w	800c2ec <__math_uflow>
 800b93e:	bf00      	nop
 800b940:	fff00000 	.word	0xfff00000
 800b944:	7ff00000 	.word	0x7ff00000
 800b948:	433fffff 	.word	0x433fffff
 800b94c:	3ff00000 	.word	0x3ff00000
 800b950:	3fefffff 	.word	0x3fefffff
 800b954:	3fe00000 	.word	0x3fe00000
 800b958:	41e00000 	.word	0x41e00000
 800b95c:	4b60      	ldr	r3, [pc, #384]	; (800bae0 <__ieee754_pow+0x3f0>)
 800b95e:	2200      	movs	r2, #0
 800b960:	f7f4 fcaa 	bl	80002b8 <__aeabi_dsub>
 800b964:	a354      	add	r3, pc, #336	; (adr r3, 800bab8 <__ieee754_pow+0x3c8>)
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	4604      	mov	r4, r0
 800b96c:	460d      	mov	r5, r1
 800b96e:	f7f4 fe5b 	bl	8000628 <__aeabi_dmul>
 800b972:	a353      	add	r3, pc, #332	; (adr r3, 800bac0 <__ieee754_pow+0x3d0>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	4606      	mov	r6, r0
 800b97a:	460f      	mov	r7, r1
 800b97c:	4620      	mov	r0, r4
 800b97e:	4629      	mov	r1, r5
 800b980:	f7f4 fe52 	bl	8000628 <__aeabi_dmul>
 800b984:	4b57      	ldr	r3, [pc, #348]	; (800bae4 <__ieee754_pow+0x3f4>)
 800b986:	4682      	mov	sl, r0
 800b988:	468b      	mov	fp, r1
 800b98a:	2200      	movs	r2, #0
 800b98c:	4620      	mov	r0, r4
 800b98e:	4629      	mov	r1, r5
 800b990:	f7f4 fe4a 	bl	8000628 <__aeabi_dmul>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	a14b      	add	r1, pc, #300	; (adr r1, 800bac8 <__ieee754_pow+0x3d8>)
 800b99a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b99e:	f7f4 fc8b 	bl	80002b8 <__aeabi_dsub>
 800b9a2:	4622      	mov	r2, r4
 800b9a4:	462b      	mov	r3, r5
 800b9a6:	f7f4 fe3f 	bl	8000628 <__aeabi_dmul>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	494d      	ldr	r1, [pc, #308]	; (800bae8 <__ieee754_pow+0x3f8>)
 800b9b2:	f7f4 fc81 	bl	80002b8 <__aeabi_dsub>
 800b9b6:	4622      	mov	r2, r4
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	4689      	mov	r9, r1
 800b9bc:	462b      	mov	r3, r5
 800b9be:	4620      	mov	r0, r4
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	f7f4 fe31 	bl	8000628 <__aeabi_dmul>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4640      	mov	r0, r8
 800b9cc:	4649      	mov	r1, r9
 800b9ce:	f7f4 fe2b 	bl	8000628 <__aeabi_dmul>
 800b9d2:	a33f      	add	r3, pc, #252	; (adr r3, 800bad0 <__ieee754_pow+0x3e0>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f7f4 fe26 	bl	8000628 <__aeabi_dmul>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4650      	mov	r0, sl
 800b9e2:	4659      	mov	r1, fp
 800b9e4:	f7f4 fc68 	bl	80002b8 <__aeabi_dsub>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4680      	mov	r8, r0
 800b9ee:	4689      	mov	r9, r1
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	4639      	mov	r1, r7
 800b9f4:	f7f4 fc62 	bl	80002bc <__adddf3>
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	4632      	mov	r2, r6
 800b9fc:	463b      	mov	r3, r7
 800b9fe:	4604      	mov	r4, r0
 800ba00:	460d      	mov	r5, r1
 800ba02:	f7f4 fc59 	bl	80002b8 <__aeabi_dsub>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	4649      	mov	r1, r9
 800ba0e:	f7f4 fc53 	bl	80002b8 <__aeabi_dsub>
 800ba12:	9b04      	ldr	r3, [sp, #16]
 800ba14:	9a06      	ldr	r2, [sp, #24]
 800ba16:	3b01      	subs	r3, #1
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	4682      	mov	sl, r0
 800ba1c:	468b      	mov	fp, r1
 800ba1e:	f040 81e7 	bne.w	800bdf0 <__ieee754_pow+0x700>
 800ba22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bad8 <__ieee754_pow+0x3e8>
 800ba26:	eeb0 8a47 	vmov.f32	s16, s14
 800ba2a:	eef0 8a67 	vmov.f32	s17, s15
 800ba2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ba32:	2600      	movs	r6, #0
 800ba34:	4632      	mov	r2, r6
 800ba36:	463b      	mov	r3, r7
 800ba38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba3c:	f7f4 fc3c 	bl	80002b8 <__aeabi_dsub>
 800ba40:	4622      	mov	r2, r4
 800ba42:	462b      	mov	r3, r5
 800ba44:	f7f4 fdf0 	bl	8000628 <__aeabi_dmul>
 800ba48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba4c:	4680      	mov	r8, r0
 800ba4e:	4689      	mov	r9, r1
 800ba50:	4650      	mov	r0, sl
 800ba52:	4659      	mov	r1, fp
 800ba54:	f7f4 fde8 	bl	8000628 <__aeabi_dmul>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	4649      	mov	r1, r9
 800ba60:	f7f4 fc2c 	bl	80002bc <__adddf3>
 800ba64:	4632      	mov	r2, r6
 800ba66:	463b      	mov	r3, r7
 800ba68:	4680      	mov	r8, r0
 800ba6a:	4689      	mov	r9, r1
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	4629      	mov	r1, r5
 800ba70:	f7f4 fdda 	bl	8000628 <__aeabi_dmul>
 800ba74:	460b      	mov	r3, r1
 800ba76:	4604      	mov	r4, r0
 800ba78:	460d      	mov	r5, r1
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	4649      	mov	r1, r9
 800ba7e:	4640      	mov	r0, r8
 800ba80:	f7f4 fc1c 	bl	80002bc <__adddf3>
 800ba84:	4b19      	ldr	r3, [pc, #100]	; (800baec <__ieee754_pow+0x3fc>)
 800ba86:	4299      	cmp	r1, r3
 800ba88:	ec45 4b19 	vmov	d9, r4, r5
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	460f      	mov	r7, r1
 800ba90:	468b      	mov	fp, r1
 800ba92:	f340 82f1 	ble.w	800c078 <__ieee754_pow+0x988>
 800ba96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ba9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ba9e:	4303      	orrs	r3, r0
 800baa0:	f000 81e4 	beq.w	800be6c <__ieee754_pow+0x77c>
 800baa4:	ec51 0b18 	vmov	r0, r1, d8
 800baa8:	2200      	movs	r2, #0
 800baaa:	2300      	movs	r3, #0
 800baac:	f7f5 f82e 	bl	8000b0c <__aeabi_dcmplt>
 800bab0:	3800      	subs	r0, #0
 800bab2:	bf18      	it	ne
 800bab4:	2001      	movne	r0, #1
 800bab6:	e72b      	b.n	800b910 <__ieee754_pow+0x220>
 800bab8:	60000000 	.word	0x60000000
 800babc:	3ff71547 	.word	0x3ff71547
 800bac0:	f85ddf44 	.word	0xf85ddf44
 800bac4:	3e54ae0b 	.word	0x3e54ae0b
 800bac8:	55555555 	.word	0x55555555
 800bacc:	3fd55555 	.word	0x3fd55555
 800bad0:	652b82fe 	.word	0x652b82fe
 800bad4:	3ff71547 	.word	0x3ff71547
 800bad8:	00000000 	.word	0x00000000
 800badc:	bff00000 	.word	0xbff00000
 800bae0:	3ff00000 	.word	0x3ff00000
 800bae4:	3fd00000 	.word	0x3fd00000
 800bae8:	3fe00000 	.word	0x3fe00000
 800baec:	408fffff 	.word	0x408fffff
 800baf0:	4bd5      	ldr	r3, [pc, #852]	; (800be48 <__ieee754_pow+0x758>)
 800baf2:	402b      	ands	r3, r5
 800baf4:	2200      	movs	r2, #0
 800baf6:	b92b      	cbnz	r3, 800bb04 <__ieee754_pow+0x414>
 800baf8:	4bd4      	ldr	r3, [pc, #848]	; (800be4c <__ieee754_pow+0x75c>)
 800bafa:	f7f4 fd95 	bl	8000628 <__aeabi_dmul>
 800bafe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bb02:	460c      	mov	r4, r1
 800bb04:	1523      	asrs	r3, r4, #20
 800bb06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bb0a:	4413      	add	r3, r2
 800bb0c:	9305      	str	r3, [sp, #20]
 800bb0e:	4bd0      	ldr	r3, [pc, #832]	; (800be50 <__ieee754_pow+0x760>)
 800bb10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bb14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bb18:	429c      	cmp	r4, r3
 800bb1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bb1e:	dd08      	ble.n	800bb32 <__ieee754_pow+0x442>
 800bb20:	4bcc      	ldr	r3, [pc, #816]	; (800be54 <__ieee754_pow+0x764>)
 800bb22:	429c      	cmp	r4, r3
 800bb24:	f340 8162 	ble.w	800bdec <__ieee754_pow+0x6fc>
 800bb28:	9b05      	ldr	r3, [sp, #20]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	9305      	str	r3, [sp, #20]
 800bb2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bb32:	2400      	movs	r4, #0
 800bb34:	00e3      	lsls	r3, r4, #3
 800bb36:	9307      	str	r3, [sp, #28]
 800bb38:	4bc7      	ldr	r3, [pc, #796]	; (800be58 <__ieee754_pow+0x768>)
 800bb3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb3e:	ed93 7b00 	vldr	d7, [r3]
 800bb42:	4629      	mov	r1, r5
 800bb44:	ec53 2b17 	vmov	r2, r3, d7
 800bb48:	eeb0 9a47 	vmov.f32	s18, s14
 800bb4c:	eef0 9a67 	vmov.f32	s19, s15
 800bb50:	4682      	mov	sl, r0
 800bb52:	f7f4 fbb1 	bl	80002b8 <__aeabi_dsub>
 800bb56:	4652      	mov	r2, sl
 800bb58:	4606      	mov	r6, r0
 800bb5a:	460f      	mov	r7, r1
 800bb5c:	462b      	mov	r3, r5
 800bb5e:	ec51 0b19 	vmov	r0, r1, d9
 800bb62:	f7f4 fbab 	bl	80002bc <__adddf3>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	49bb      	ldr	r1, [pc, #748]	; (800be5c <__ieee754_pow+0x76c>)
 800bb6e:	f7f4 fe85 	bl	800087c <__aeabi_ddiv>
 800bb72:	ec41 0b1a 	vmov	d10, r0, r1
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	4639      	mov	r1, r7
 800bb7e:	f7f4 fd53 	bl	8000628 <__aeabi_dmul>
 800bb82:	2300      	movs	r3, #0
 800bb84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb88:	9302      	str	r3, [sp, #8]
 800bb8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb8e:	46ab      	mov	fp, r5
 800bb90:	106d      	asrs	r5, r5, #1
 800bb92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bb96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bb9a:	ec41 0b18 	vmov	d8, r0, r1
 800bb9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bba2:	2200      	movs	r2, #0
 800bba4:	4640      	mov	r0, r8
 800bba6:	4649      	mov	r1, r9
 800bba8:	4614      	mov	r4, r2
 800bbaa:	461d      	mov	r5, r3
 800bbac:	f7f4 fd3c 	bl	8000628 <__aeabi_dmul>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	4639      	mov	r1, r7
 800bbb8:	f7f4 fb7e 	bl	80002b8 <__aeabi_dsub>
 800bbbc:	ec53 2b19 	vmov	r2, r3, d9
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	460f      	mov	r7, r1
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	f7f4 fb76 	bl	80002b8 <__aeabi_dsub>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4650      	mov	r0, sl
 800bbd2:	4659      	mov	r1, fp
 800bbd4:	f7f4 fb70 	bl	80002b8 <__aeabi_dsub>
 800bbd8:	4642      	mov	r2, r8
 800bbda:	464b      	mov	r3, r9
 800bbdc:	f7f4 fd24 	bl	8000628 <__aeabi_dmul>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	4639      	mov	r1, r7
 800bbe8:	f7f4 fb66 	bl	80002b8 <__aeabi_dsub>
 800bbec:	ec53 2b1a 	vmov	r2, r3, d10
 800bbf0:	f7f4 fd1a 	bl	8000628 <__aeabi_dmul>
 800bbf4:	ec53 2b18 	vmov	r2, r3, d8
 800bbf8:	ec41 0b19 	vmov	d9, r0, r1
 800bbfc:	ec51 0b18 	vmov	r0, r1, d8
 800bc00:	f7f4 fd12 	bl	8000628 <__aeabi_dmul>
 800bc04:	a37c      	add	r3, pc, #496	; (adr r3, 800bdf8 <__ieee754_pow+0x708>)
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	460d      	mov	r5, r1
 800bc0e:	f7f4 fd0b 	bl	8000628 <__aeabi_dmul>
 800bc12:	a37b      	add	r3, pc, #492	; (adr r3, 800be00 <__ieee754_pow+0x710>)
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	f7f4 fb50 	bl	80002bc <__adddf3>
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	462b      	mov	r3, r5
 800bc20:	f7f4 fd02 	bl	8000628 <__aeabi_dmul>
 800bc24:	a378      	add	r3, pc, #480	; (adr r3, 800be08 <__ieee754_pow+0x718>)
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	f7f4 fb47 	bl	80002bc <__adddf3>
 800bc2e:	4622      	mov	r2, r4
 800bc30:	462b      	mov	r3, r5
 800bc32:	f7f4 fcf9 	bl	8000628 <__aeabi_dmul>
 800bc36:	a376      	add	r3, pc, #472	; (adr r3, 800be10 <__ieee754_pow+0x720>)
 800bc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3c:	f7f4 fb3e 	bl	80002bc <__adddf3>
 800bc40:	4622      	mov	r2, r4
 800bc42:	462b      	mov	r3, r5
 800bc44:	f7f4 fcf0 	bl	8000628 <__aeabi_dmul>
 800bc48:	a373      	add	r3, pc, #460	; (adr r3, 800be18 <__ieee754_pow+0x728>)
 800bc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4e:	f7f4 fb35 	bl	80002bc <__adddf3>
 800bc52:	4622      	mov	r2, r4
 800bc54:	462b      	mov	r3, r5
 800bc56:	f7f4 fce7 	bl	8000628 <__aeabi_dmul>
 800bc5a:	a371      	add	r3, pc, #452	; (adr r3, 800be20 <__ieee754_pow+0x730>)
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f7f4 fb2c 	bl	80002bc <__adddf3>
 800bc64:	4622      	mov	r2, r4
 800bc66:	4606      	mov	r6, r0
 800bc68:	460f      	mov	r7, r1
 800bc6a:	462b      	mov	r3, r5
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	4629      	mov	r1, r5
 800bc70:	f7f4 fcda 	bl	8000628 <__aeabi_dmul>
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	4630      	mov	r0, r6
 800bc7a:	4639      	mov	r1, r7
 800bc7c:	f7f4 fcd4 	bl	8000628 <__aeabi_dmul>
 800bc80:	4642      	mov	r2, r8
 800bc82:	4604      	mov	r4, r0
 800bc84:	460d      	mov	r5, r1
 800bc86:	464b      	mov	r3, r9
 800bc88:	ec51 0b18 	vmov	r0, r1, d8
 800bc8c:	f7f4 fb16 	bl	80002bc <__adddf3>
 800bc90:	ec53 2b19 	vmov	r2, r3, d9
 800bc94:	f7f4 fcc8 	bl	8000628 <__aeabi_dmul>
 800bc98:	4622      	mov	r2, r4
 800bc9a:	462b      	mov	r3, r5
 800bc9c:	f7f4 fb0e 	bl	80002bc <__adddf3>
 800bca0:	4642      	mov	r2, r8
 800bca2:	4682      	mov	sl, r0
 800bca4:	468b      	mov	fp, r1
 800bca6:	464b      	mov	r3, r9
 800bca8:	4640      	mov	r0, r8
 800bcaa:	4649      	mov	r1, r9
 800bcac:	f7f4 fcbc 	bl	8000628 <__aeabi_dmul>
 800bcb0:	4b6b      	ldr	r3, [pc, #428]	; (800be60 <__ieee754_pow+0x770>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	460f      	mov	r7, r1
 800bcb8:	f7f4 fb00 	bl	80002bc <__adddf3>
 800bcbc:	4652      	mov	r2, sl
 800bcbe:	465b      	mov	r3, fp
 800bcc0:	f7f4 fafc 	bl	80002bc <__adddf3>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	460d      	mov	r5, r1
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	4640      	mov	r0, r8
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	f7f4 fca9 	bl	8000628 <__aeabi_dmul>
 800bcd6:	4b62      	ldr	r3, [pc, #392]	; (800be60 <__ieee754_pow+0x770>)
 800bcd8:	4680      	mov	r8, r0
 800bcda:	4689      	mov	r9, r1
 800bcdc:	2200      	movs	r2, #0
 800bcde:	4620      	mov	r0, r4
 800bce0:	4629      	mov	r1, r5
 800bce2:	f7f4 fae9 	bl	80002b8 <__aeabi_dsub>
 800bce6:	4632      	mov	r2, r6
 800bce8:	463b      	mov	r3, r7
 800bcea:	f7f4 fae5 	bl	80002b8 <__aeabi_dsub>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4650      	mov	r0, sl
 800bcf4:	4659      	mov	r1, fp
 800bcf6:	f7f4 fadf 	bl	80002b8 <__aeabi_dsub>
 800bcfa:	ec53 2b18 	vmov	r2, r3, d8
 800bcfe:	f7f4 fc93 	bl	8000628 <__aeabi_dmul>
 800bd02:	4622      	mov	r2, r4
 800bd04:	4606      	mov	r6, r0
 800bd06:	460f      	mov	r7, r1
 800bd08:	462b      	mov	r3, r5
 800bd0a:	ec51 0b19 	vmov	r0, r1, d9
 800bd0e:	f7f4 fc8b 	bl	8000628 <__aeabi_dmul>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	4630      	mov	r0, r6
 800bd18:	4639      	mov	r1, r7
 800bd1a:	f7f4 facf 	bl	80002bc <__adddf3>
 800bd1e:	4606      	mov	r6, r0
 800bd20:	460f      	mov	r7, r1
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	4640      	mov	r0, r8
 800bd28:	4649      	mov	r1, r9
 800bd2a:	f7f4 fac7 	bl	80002bc <__adddf3>
 800bd2e:	a33e      	add	r3, pc, #248	; (adr r3, 800be28 <__ieee754_pow+0x738>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	2000      	movs	r0, #0
 800bd36:	4604      	mov	r4, r0
 800bd38:	460d      	mov	r5, r1
 800bd3a:	f7f4 fc75 	bl	8000628 <__aeabi_dmul>
 800bd3e:	4642      	mov	r2, r8
 800bd40:	ec41 0b18 	vmov	d8, r0, r1
 800bd44:	464b      	mov	r3, r9
 800bd46:	4620      	mov	r0, r4
 800bd48:	4629      	mov	r1, r5
 800bd4a:	f7f4 fab5 	bl	80002b8 <__aeabi_dsub>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	460b      	mov	r3, r1
 800bd52:	4630      	mov	r0, r6
 800bd54:	4639      	mov	r1, r7
 800bd56:	f7f4 faaf 	bl	80002b8 <__aeabi_dsub>
 800bd5a:	a335      	add	r3, pc, #212	; (adr r3, 800be30 <__ieee754_pow+0x740>)
 800bd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd60:	f7f4 fc62 	bl	8000628 <__aeabi_dmul>
 800bd64:	a334      	add	r3, pc, #208	; (adr r3, 800be38 <__ieee754_pow+0x748>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	460f      	mov	r7, r1
 800bd6e:	4620      	mov	r0, r4
 800bd70:	4629      	mov	r1, r5
 800bd72:	f7f4 fc59 	bl	8000628 <__aeabi_dmul>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	4639      	mov	r1, r7
 800bd7e:	f7f4 fa9d 	bl	80002bc <__adddf3>
 800bd82:	9a07      	ldr	r2, [sp, #28]
 800bd84:	4b37      	ldr	r3, [pc, #220]	; (800be64 <__ieee754_pow+0x774>)
 800bd86:	4413      	add	r3, r2
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	f7f4 fa96 	bl	80002bc <__adddf3>
 800bd90:	4682      	mov	sl, r0
 800bd92:	9805      	ldr	r0, [sp, #20]
 800bd94:	468b      	mov	fp, r1
 800bd96:	f7f4 fbdd 	bl	8000554 <__aeabi_i2d>
 800bd9a:	9a07      	ldr	r2, [sp, #28]
 800bd9c:	4b32      	ldr	r3, [pc, #200]	; (800be68 <__ieee754_pow+0x778>)
 800bd9e:	4413      	add	r3, r2
 800bda0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bda4:	4606      	mov	r6, r0
 800bda6:	460f      	mov	r7, r1
 800bda8:	4652      	mov	r2, sl
 800bdaa:	465b      	mov	r3, fp
 800bdac:	ec51 0b18 	vmov	r0, r1, d8
 800bdb0:	f7f4 fa84 	bl	80002bc <__adddf3>
 800bdb4:	4642      	mov	r2, r8
 800bdb6:	464b      	mov	r3, r9
 800bdb8:	f7f4 fa80 	bl	80002bc <__adddf3>
 800bdbc:	4632      	mov	r2, r6
 800bdbe:	463b      	mov	r3, r7
 800bdc0:	f7f4 fa7c 	bl	80002bc <__adddf3>
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	4632      	mov	r2, r6
 800bdc8:	463b      	mov	r3, r7
 800bdca:	4604      	mov	r4, r0
 800bdcc:	460d      	mov	r5, r1
 800bdce:	f7f4 fa73 	bl	80002b8 <__aeabi_dsub>
 800bdd2:	4642      	mov	r2, r8
 800bdd4:	464b      	mov	r3, r9
 800bdd6:	f7f4 fa6f 	bl	80002b8 <__aeabi_dsub>
 800bdda:	ec53 2b18 	vmov	r2, r3, d8
 800bdde:	f7f4 fa6b 	bl	80002b8 <__aeabi_dsub>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	4650      	mov	r0, sl
 800bde8:	4659      	mov	r1, fp
 800bdea:	e610      	b.n	800ba0e <__ieee754_pow+0x31e>
 800bdec:	2401      	movs	r4, #1
 800bdee:	e6a1      	b.n	800bb34 <__ieee754_pow+0x444>
 800bdf0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800be40 <__ieee754_pow+0x750>
 800bdf4:	e617      	b.n	800ba26 <__ieee754_pow+0x336>
 800bdf6:	bf00      	nop
 800bdf8:	4a454eef 	.word	0x4a454eef
 800bdfc:	3fca7e28 	.word	0x3fca7e28
 800be00:	93c9db65 	.word	0x93c9db65
 800be04:	3fcd864a 	.word	0x3fcd864a
 800be08:	a91d4101 	.word	0xa91d4101
 800be0c:	3fd17460 	.word	0x3fd17460
 800be10:	518f264d 	.word	0x518f264d
 800be14:	3fd55555 	.word	0x3fd55555
 800be18:	db6fabff 	.word	0xdb6fabff
 800be1c:	3fdb6db6 	.word	0x3fdb6db6
 800be20:	33333303 	.word	0x33333303
 800be24:	3fe33333 	.word	0x3fe33333
 800be28:	e0000000 	.word	0xe0000000
 800be2c:	3feec709 	.word	0x3feec709
 800be30:	dc3a03fd 	.word	0xdc3a03fd
 800be34:	3feec709 	.word	0x3feec709
 800be38:	145b01f5 	.word	0x145b01f5
 800be3c:	be3e2fe0 	.word	0xbe3e2fe0
 800be40:	00000000 	.word	0x00000000
 800be44:	3ff00000 	.word	0x3ff00000
 800be48:	7ff00000 	.word	0x7ff00000
 800be4c:	43400000 	.word	0x43400000
 800be50:	0003988e 	.word	0x0003988e
 800be54:	000bb679 	.word	0x000bb679
 800be58:	0800c7c0 	.word	0x0800c7c0
 800be5c:	3ff00000 	.word	0x3ff00000
 800be60:	40080000 	.word	0x40080000
 800be64:	0800c7e0 	.word	0x0800c7e0
 800be68:	0800c7d0 	.word	0x0800c7d0
 800be6c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c144 <__ieee754_pow+0xa54>)
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	4640      	mov	r0, r8
 800be74:	4649      	mov	r1, r9
 800be76:	f7f4 fa21 	bl	80002bc <__adddf3>
 800be7a:	4622      	mov	r2, r4
 800be7c:	ec41 0b1a 	vmov	d10, r0, r1
 800be80:	462b      	mov	r3, r5
 800be82:	4630      	mov	r0, r6
 800be84:	4639      	mov	r1, r7
 800be86:	f7f4 fa17 	bl	80002b8 <__aeabi_dsub>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	ec51 0b1a 	vmov	r0, r1, d10
 800be92:	f7f4 fe59 	bl	8000b48 <__aeabi_dcmpgt>
 800be96:	2800      	cmp	r0, #0
 800be98:	f47f ae04 	bne.w	800baa4 <__ieee754_pow+0x3b4>
 800be9c:	4aa4      	ldr	r2, [pc, #656]	; (800c130 <__ieee754_pow+0xa40>)
 800be9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bea2:	4293      	cmp	r3, r2
 800bea4:	f340 8108 	ble.w	800c0b8 <__ieee754_pow+0x9c8>
 800bea8:	151b      	asrs	r3, r3, #20
 800beaa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800beae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800beb2:	fa4a f303 	asr.w	r3, sl, r3
 800beb6:	445b      	add	r3, fp
 800beb8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bebc:	4e9d      	ldr	r6, [pc, #628]	; (800c134 <__ieee754_pow+0xa44>)
 800bebe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bec2:	4116      	asrs	r6, r2
 800bec4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bec8:	2000      	movs	r0, #0
 800beca:	ea23 0106 	bic.w	r1, r3, r6
 800bece:	f1c2 0214 	rsb	r2, r2, #20
 800bed2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bed6:	fa4a fa02 	asr.w	sl, sl, r2
 800beda:	f1bb 0f00 	cmp.w	fp, #0
 800bede:	4602      	mov	r2, r0
 800bee0:	460b      	mov	r3, r1
 800bee2:	4620      	mov	r0, r4
 800bee4:	4629      	mov	r1, r5
 800bee6:	bfb8      	it	lt
 800bee8:	f1ca 0a00 	rsblt	sl, sl, #0
 800beec:	f7f4 f9e4 	bl	80002b8 <__aeabi_dsub>
 800bef0:	ec41 0b19 	vmov	d9, r0, r1
 800bef4:	4642      	mov	r2, r8
 800bef6:	464b      	mov	r3, r9
 800bef8:	ec51 0b19 	vmov	r0, r1, d9
 800befc:	f7f4 f9de 	bl	80002bc <__adddf3>
 800bf00:	a37b      	add	r3, pc, #492	; (adr r3, 800c0f0 <__ieee754_pow+0xa00>)
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	2000      	movs	r0, #0
 800bf08:	4604      	mov	r4, r0
 800bf0a:	460d      	mov	r5, r1
 800bf0c:	f7f4 fb8c 	bl	8000628 <__aeabi_dmul>
 800bf10:	ec53 2b19 	vmov	r2, r3, d9
 800bf14:	4606      	mov	r6, r0
 800bf16:	460f      	mov	r7, r1
 800bf18:	4620      	mov	r0, r4
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	f7f4 f9cc 	bl	80002b8 <__aeabi_dsub>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	4640      	mov	r0, r8
 800bf26:	4649      	mov	r1, r9
 800bf28:	f7f4 f9c6 	bl	80002b8 <__aeabi_dsub>
 800bf2c:	a372      	add	r3, pc, #456	; (adr r3, 800c0f8 <__ieee754_pow+0xa08>)
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	f7f4 fb79 	bl	8000628 <__aeabi_dmul>
 800bf36:	a372      	add	r3, pc, #456	; (adr r3, 800c100 <__ieee754_pow+0xa10>)
 800bf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	4689      	mov	r9, r1
 800bf40:	4620      	mov	r0, r4
 800bf42:	4629      	mov	r1, r5
 800bf44:	f7f4 fb70 	bl	8000628 <__aeabi_dmul>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4640      	mov	r0, r8
 800bf4e:	4649      	mov	r1, r9
 800bf50:	f7f4 f9b4 	bl	80002bc <__adddf3>
 800bf54:	4604      	mov	r4, r0
 800bf56:	460d      	mov	r5, r1
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	4639      	mov	r1, r7
 800bf60:	f7f4 f9ac 	bl	80002bc <__adddf3>
 800bf64:	4632      	mov	r2, r6
 800bf66:	463b      	mov	r3, r7
 800bf68:	4680      	mov	r8, r0
 800bf6a:	4689      	mov	r9, r1
 800bf6c:	f7f4 f9a4 	bl	80002b8 <__aeabi_dsub>
 800bf70:	4602      	mov	r2, r0
 800bf72:	460b      	mov	r3, r1
 800bf74:	4620      	mov	r0, r4
 800bf76:	4629      	mov	r1, r5
 800bf78:	f7f4 f99e 	bl	80002b8 <__aeabi_dsub>
 800bf7c:	4642      	mov	r2, r8
 800bf7e:	4606      	mov	r6, r0
 800bf80:	460f      	mov	r7, r1
 800bf82:	464b      	mov	r3, r9
 800bf84:	4640      	mov	r0, r8
 800bf86:	4649      	mov	r1, r9
 800bf88:	f7f4 fb4e 	bl	8000628 <__aeabi_dmul>
 800bf8c:	a35e      	add	r3, pc, #376	; (adr r3, 800c108 <__ieee754_pow+0xa18>)
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	4604      	mov	r4, r0
 800bf94:	460d      	mov	r5, r1
 800bf96:	f7f4 fb47 	bl	8000628 <__aeabi_dmul>
 800bf9a:	a35d      	add	r3, pc, #372	; (adr r3, 800c110 <__ieee754_pow+0xa20>)
 800bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa0:	f7f4 f98a 	bl	80002b8 <__aeabi_dsub>
 800bfa4:	4622      	mov	r2, r4
 800bfa6:	462b      	mov	r3, r5
 800bfa8:	f7f4 fb3e 	bl	8000628 <__aeabi_dmul>
 800bfac:	a35a      	add	r3, pc, #360	; (adr r3, 800c118 <__ieee754_pow+0xa28>)
 800bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb2:	f7f4 f983 	bl	80002bc <__adddf3>
 800bfb6:	4622      	mov	r2, r4
 800bfb8:	462b      	mov	r3, r5
 800bfba:	f7f4 fb35 	bl	8000628 <__aeabi_dmul>
 800bfbe:	a358      	add	r3, pc, #352	; (adr r3, 800c120 <__ieee754_pow+0xa30>)
 800bfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc4:	f7f4 f978 	bl	80002b8 <__aeabi_dsub>
 800bfc8:	4622      	mov	r2, r4
 800bfca:	462b      	mov	r3, r5
 800bfcc:	f7f4 fb2c 	bl	8000628 <__aeabi_dmul>
 800bfd0:	a355      	add	r3, pc, #340	; (adr r3, 800c128 <__ieee754_pow+0xa38>)
 800bfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd6:	f7f4 f971 	bl	80002bc <__adddf3>
 800bfda:	4622      	mov	r2, r4
 800bfdc:	462b      	mov	r3, r5
 800bfde:	f7f4 fb23 	bl	8000628 <__aeabi_dmul>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	4649      	mov	r1, r9
 800bfea:	f7f4 f965 	bl	80002b8 <__aeabi_dsub>
 800bfee:	4604      	mov	r4, r0
 800bff0:	460d      	mov	r5, r1
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	4640      	mov	r0, r8
 800bff8:	4649      	mov	r1, r9
 800bffa:	f7f4 fb15 	bl	8000628 <__aeabi_dmul>
 800bffe:	2200      	movs	r2, #0
 800c000:	ec41 0b19 	vmov	d9, r0, r1
 800c004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c008:	4620      	mov	r0, r4
 800c00a:	4629      	mov	r1, r5
 800c00c:	f7f4 f954 	bl	80002b8 <__aeabi_dsub>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	ec51 0b19 	vmov	r0, r1, d9
 800c018:	f7f4 fc30 	bl	800087c <__aeabi_ddiv>
 800c01c:	4632      	mov	r2, r6
 800c01e:	4604      	mov	r4, r0
 800c020:	460d      	mov	r5, r1
 800c022:	463b      	mov	r3, r7
 800c024:	4640      	mov	r0, r8
 800c026:	4649      	mov	r1, r9
 800c028:	f7f4 fafe 	bl	8000628 <__aeabi_dmul>
 800c02c:	4632      	mov	r2, r6
 800c02e:	463b      	mov	r3, r7
 800c030:	f7f4 f944 	bl	80002bc <__adddf3>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	4620      	mov	r0, r4
 800c03a:	4629      	mov	r1, r5
 800c03c:	f7f4 f93c 	bl	80002b8 <__aeabi_dsub>
 800c040:	4642      	mov	r2, r8
 800c042:	464b      	mov	r3, r9
 800c044:	f7f4 f938 	bl	80002b8 <__aeabi_dsub>
 800c048:	460b      	mov	r3, r1
 800c04a:	4602      	mov	r2, r0
 800c04c:	493a      	ldr	r1, [pc, #232]	; (800c138 <__ieee754_pow+0xa48>)
 800c04e:	2000      	movs	r0, #0
 800c050:	f7f4 f932 	bl	80002b8 <__aeabi_dsub>
 800c054:	ec41 0b10 	vmov	d0, r0, r1
 800c058:	ee10 3a90 	vmov	r3, s1
 800c05c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c064:	da2b      	bge.n	800c0be <__ieee754_pow+0x9ce>
 800c066:	4650      	mov	r0, sl
 800c068:	f000 f966 	bl	800c338 <scalbn>
 800c06c:	ec51 0b10 	vmov	r0, r1, d0
 800c070:	ec53 2b18 	vmov	r2, r3, d8
 800c074:	f7ff bbed 	b.w	800b852 <__ieee754_pow+0x162>
 800c078:	4b30      	ldr	r3, [pc, #192]	; (800c13c <__ieee754_pow+0xa4c>)
 800c07a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c07e:	429e      	cmp	r6, r3
 800c080:	f77f af0c 	ble.w	800be9c <__ieee754_pow+0x7ac>
 800c084:	4b2e      	ldr	r3, [pc, #184]	; (800c140 <__ieee754_pow+0xa50>)
 800c086:	440b      	add	r3, r1
 800c088:	4303      	orrs	r3, r0
 800c08a:	d009      	beq.n	800c0a0 <__ieee754_pow+0x9b0>
 800c08c:	ec51 0b18 	vmov	r0, r1, d8
 800c090:	2200      	movs	r2, #0
 800c092:	2300      	movs	r3, #0
 800c094:	f7f4 fd3a 	bl	8000b0c <__aeabi_dcmplt>
 800c098:	3800      	subs	r0, #0
 800c09a:	bf18      	it	ne
 800c09c:	2001      	movne	r0, #1
 800c09e:	e447      	b.n	800b930 <__ieee754_pow+0x240>
 800c0a0:	4622      	mov	r2, r4
 800c0a2:	462b      	mov	r3, r5
 800c0a4:	f7f4 f908 	bl	80002b8 <__aeabi_dsub>
 800c0a8:	4642      	mov	r2, r8
 800c0aa:	464b      	mov	r3, r9
 800c0ac:	f7f4 fd42 	bl	8000b34 <__aeabi_dcmpge>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	f43f aef3 	beq.w	800be9c <__ieee754_pow+0x7ac>
 800c0b6:	e7e9      	b.n	800c08c <__ieee754_pow+0x99c>
 800c0b8:	f04f 0a00 	mov.w	sl, #0
 800c0bc:	e71a      	b.n	800bef4 <__ieee754_pow+0x804>
 800c0be:	ec51 0b10 	vmov	r0, r1, d0
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	e7d4      	b.n	800c070 <__ieee754_pow+0x980>
 800c0c6:	491c      	ldr	r1, [pc, #112]	; (800c138 <__ieee754_pow+0xa48>)
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	f7ff bb30 	b.w	800b72e <__ieee754_pow+0x3e>
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	f7ff bb2c 	b.w	800b72e <__ieee754_pow+0x3e>
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	4639      	mov	r1, r7
 800c0da:	f7ff bb28 	b.w	800b72e <__ieee754_pow+0x3e>
 800c0de:	9204      	str	r2, [sp, #16]
 800c0e0:	f7ff bb7a 	b.w	800b7d8 <__ieee754_pow+0xe8>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f7ff bb64 	b.w	800b7b2 <__ieee754_pow+0xc2>
 800c0ea:	bf00      	nop
 800c0ec:	f3af 8000 	nop.w
 800c0f0:	00000000 	.word	0x00000000
 800c0f4:	3fe62e43 	.word	0x3fe62e43
 800c0f8:	fefa39ef 	.word	0xfefa39ef
 800c0fc:	3fe62e42 	.word	0x3fe62e42
 800c100:	0ca86c39 	.word	0x0ca86c39
 800c104:	be205c61 	.word	0xbe205c61
 800c108:	72bea4d0 	.word	0x72bea4d0
 800c10c:	3e663769 	.word	0x3e663769
 800c110:	c5d26bf1 	.word	0xc5d26bf1
 800c114:	3ebbbd41 	.word	0x3ebbbd41
 800c118:	af25de2c 	.word	0xaf25de2c
 800c11c:	3f11566a 	.word	0x3f11566a
 800c120:	16bebd93 	.word	0x16bebd93
 800c124:	3f66c16c 	.word	0x3f66c16c
 800c128:	5555553e 	.word	0x5555553e
 800c12c:	3fc55555 	.word	0x3fc55555
 800c130:	3fe00000 	.word	0x3fe00000
 800c134:	000fffff 	.word	0x000fffff
 800c138:	3ff00000 	.word	0x3ff00000
 800c13c:	4090cbff 	.word	0x4090cbff
 800c140:	3f6f3400 	.word	0x3f6f3400
 800c144:	652b82fe 	.word	0x652b82fe
 800c148:	3c971547 	.word	0x3c971547

0800c14c <__ieee754_sqrt>:
 800c14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c150:	ec55 4b10 	vmov	r4, r5, d0
 800c154:	4e55      	ldr	r6, [pc, #340]	; (800c2ac <__ieee754_sqrt+0x160>)
 800c156:	43ae      	bics	r6, r5
 800c158:	ee10 0a10 	vmov	r0, s0
 800c15c:	ee10 3a10 	vmov	r3, s0
 800c160:	462a      	mov	r2, r5
 800c162:	4629      	mov	r1, r5
 800c164:	d110      	bne.n	800c188 <__ieee754_sqrt+0x3c>
 800c166:	ee10 2a10 	vmov	r2, s0
 800c16a:	462b      	mov	r3, r5
 800c16c:	f7f4 fa5c 	bl	8000628 <__aeabi_dmul>
 800c170:	4602      	mov	r2, r0
 800c172:	460b      	mov	r3, r1
 800c174:	4620      	mov	r0, r4
 800c176:	4629      	mov	r1, r5
 800c178:	f7f4 f8a0 	bl	80002bc <__adddf3>
 800c17c:	4604      	mov	r4, r0
 800c17e:	460d      	mov	r5, r1
 800c180:	ec45 4b10 	vmov	d0, r4, r5
 800c184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c188:	2d00      	cmp	r5, #0
 800c18a:	dc10      	bgt.n	800c1ae <__ieee754_sqrt+0x62>
 800c18c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c190:	4330      	orrs	r0, r6
 800c192:	d0f5      	beq.n	800c180 <__ieee754_sqrt+0x34>
 800c194:	b15d      	cbz	r5, 800c1ae <__ieee754_sqrt+0x62>
 800c196:	ee10 2a10 	vmov	r2, s0
 800c19a:	462b      	mov	r3, r5
 800c19c:	ee10 0a10 	vmov	r0, s0
 800c1a0:	f7f4 f88a 	bl	80002b8 <__aeabi_dsub>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	f7f4 fb68 	bl	800087c <__aeabi_ddiv>
 800c1ac:	e7e6      	b.n	800c17c <__ieee754_sqrt+0x30>
 800c1ae:	1512      	asrs	r2, r2, #20
 800c1b0:	d074      	beq.n	800c29c <__ieee754_sqrt+0x150>
 800c1b2:	07d4      	lsls	r4, r2, #31
 800c1b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c1b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c1bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c1c0:	bf5e      	ittt	pl
 800c1c2:	0fda      	lsrpl	r2, r3, #31
 800c1c4:	005b      	lslpl	r3, r3, #1
 800c1c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c1ca:	2400      	movs	r4, #0
 800c1cc:	0fda      	lsrs	r2, r3, #31
 800c1ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c1d2:	107f      	asrs	r7, r7, #1
 800c1d4:	005b      	lsls	r3, r3, #1
 800c1d6:	2516      	movs	r5, #22
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c1de:	1886      	adds	r6, r0, r2
 800c1e0:	428e      	cmp	r6, r1
 800c1e2:	bfde      	ittt	le
 800c1e4:	1b89      	suble	r1, r1, r6
 800c1e6:	18b0      	addle	r0, r6, r2
 800c1e8:	18a4      	addle	r4, r4, r2
 800c1ea:	0049      	lsls	r1, r1, #1
 800c1ec:	3d01      	subs	r5, #1
 800c1ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c1f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c1f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c1fa:	d1f0      	bne.n	800c1de <__ieee754_sqrt+0x92>
 800c1fc:	462a      	mov	r2, r5
 800c1fe:	f04f 0e20 	mov.w	lr, #32
 800c202:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c206:	4281      	cmp	r1, r0
 800c208:	eb06 0c05 	add.w	ip, r6, r5
 800c20c:	dc02      	bgt.n	800c214 <__ieee754_sqrt+0xc8>
 800c20e:	d113      	bne.n	800c238 <__ieee754_sqrt+0xec>
 800c210:	459c      	cmp	ip, r3
 800c212:	d811      	bhi.n	800c238 <__ieee754_sqrt+0xec>
 800c214:	f1bc 0f00 	cmp.w	ip, #0
 800c218:	eb0c 0506 	add.w	r5, ip, r6
 800c21c:	da43      	bge.n	800c2a6 <__ieee754_sqrt+0x15a>
 800c21e:	2d00      	cmp	r5, #0
 800c220:	db41      	blt.n	800c2a6 <__ieee754_sqrt+0x15a>
 800c222:	f100 0801 	add.w	r8, r0, #1
 800c226:	1a09      	subs	r1, r1, r0
 800c228:	459c      	cmp	ip, r3
 800c22a:	bf88      	it	hi
 800c22c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c230:	eba3 030c 	sub.w	r3, r3, ip
 800c234:	4432      	add	r2, r6
 800c236:	4640      	mov	r0, r8
 800c238:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c23c:	f1be 0e01 	subs.w	lr, lr, #1
 800c240:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c244:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c248:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c24c:	d1db      	bne.n	800c206 <__ieee754_sqrt+0xba>
 800c24e:	430b      	orrs	r3, r1
 800c250:	d006      	beq.n	800c260 <__ieee754_sqrt+0x114>
 800c252:	1c50      	adds	r0, r2, #1
 800c254:	bf13      	iteet	ne
 800c256:	3201      	addne	r2, #1
 800c258:	3401      	addeq	r4, #1
 800c25a:	4672      	moveq	r2, lr
 800c25c:	f022 0201 	bicne.w	r2, r2, #1
 800c260:	1063      	asrs	r3, r4, #1
 800c262:	0852      	lsrs	r2, r2, #1
 800c264:	07e1      	lsls	r1, r4, #31
 800c266:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c26a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c26e:	bf48      	it	mi
 800c270:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c274:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c278:	4614      	mov	r4, r2
 800c27a:	e781      	b.n	800c180 <__ieee754_sqrt+0x34>
 800c27c:	0ad9      	lsrs	r1, r3, #11
 800c27e:	3815      	subs	r0, #21
 800c280:	055b      	lsls	r3, r3, #21
 800c282:	2900      	cmp	r1, #0
 800c284:	d0fa      	beq.n	800c27c <__ieee754_sqrt+0x130>
 800c286:	02cd      	lsls	r5, r1, #11
 800c288:	d50a      	bpl.n	800c2a0 <__ieee754_sqrt+0x154>
 800c28a:	f1c2 0420 	rsb	r4, r2, #32
 800c28e:	fa23 f404 	lsr.w	r4, r3, r4
 800c292:	1e55      	subs	r5, r2, #1
 800c294:	4093      	lsls	r3, r2
 800c296:	4321      	orrs	r1, r4
 800c298:	1b42      	subs	r2, r0, r5
 800c29a:	e78a      	b.n	800c1b2 <__ieee754_sqrt+0x66>
 800c29c:	4610      	mov	r0, r2
 800c29e:	e7f0      	b.n	800c282 <__ieee754_sqrt+0x136>
 800c2a0:	0049      	lsls	r1, r1, #1
 800c2a2:	3201      	adds	r2, #1
 800c2a4:	e7ef      	b.n	800c286 <__ieee754_sqrt+0x13a>
 800c2a6:	4680      	mov	r8, r0
 800c2a8:	e7bd      	b.n	800c226 <__ieee754_sqrt+0xda>
 800c2aa:	bf00      	nop
 800c2ac:	7ff00000 	.word	0x7ff00000

0800c2b0 <with_errno>:
 800c2b0:	b570      	push	{r4, r5, r6, lr}
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	460d      	mov	r5, r1
 800c2b6:	4616      	mov	r6, r2
 800c2b8:	f7fe f948 	bl	800a54c <__errno>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	6006      	str	r6, [r0, #0]
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}

0800c2c4 <xflow>:
 800c2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2c6:	4614      	mov	r4, r2
 800c2c8:	461d      	mov	r5, r3
 800c2ca:	b108      	cbz	r0, 800c2d0 <xflow+0xc>
 800c2cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c2d0:	e9cd 2300 	strd	r2, r3, [sp]
 800c2d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2d8:	4620      	mov	r0, r4
 800c2da:	4629      	mov	r1, r5
 800c2dc:	f7f4 f9a4 	bl	8000628 <__aeabi_dmul>
 800c2e0:	2222      	movs	r2, #34	; 0x22
 800c2e2:	b003      	add	sp, #12
 800c2e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2e8:	f7ff bfe2 	b.w	800c2b0 <with_errno>

0800c2ec <__math_uflow>:
 800c2ec:	b508      	push	{r3, lr}
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c2f4:	f7ff ffe6 	bl	800c2c4 <xflow>
 800c2f8:	ec41 0b10 	vmov	d0, r0, r1
 800c2fc:	bd08      	pop	{r3, pc}

0800c2fe <__math_oflow>:
 800c2fe:	b508      	push	{r3, lr}
 800c300:	2200      	movs	r2, #0
 800c302:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c306:	f7ff ffdd 	bl	800c2c4 <xflow>
 800c30a:	ec41 0b10 	vmov	d0, r0, r1
 800c30e:	bd08      	pop	{r3, pc}

0800c310 <fabs>:
 800c310:	ec51 0b10 	vmov	r0, r1, d0
 800c314:	ee10 2a10 	vmov	r2, s0
 800c318:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c31c:	ec43 2b10 	vmov	d0, r2, r3
 800c320:	4770      	bx	lr

0800c322 <finite>:
 800c322:	b082      	sub	sp, #8
 800c324:	ed8d 0b00 	vstr	d0, [sp]
 800c328:	9801      	ldr	r0, [sp, #4]
 800c32a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c32e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c332:	0fc0      	lsrs	r0, r0, #31
 800c334:	b002      	add	sp, #8
 800c336:	4770      	bx	lr

0800c338 <scalbn>:
 800c338:	b570      	push	{r4, r5, r6, lr}
 800c33a:	ec55 4b10 	vmov	r4, r5, d0
 800c33e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c342:	4606      	mov	r6, r0
 800c344:	462b      	mov	r3, r5
 800c346:	b99a      	cbnz	r2, 800c370 <scalbn+0x38>
 800c348:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c34c:	4323      	orrs	r3, r4
 800c34e:	d036      	beq.n	800c3be <scalbn+0x86>
 800c350:	4b39      	ldr	r3, [pc, #228]	; (800c438 <scalbn+0x100>)
 800c352:	4629      	mov	r1, r5
 800c354:	ee10 0a10 	vmov	r0, s0
 800c358:	2200      	movs	r2, #0
 800c35a:	f7f4 f965 	bl	8000628 <__aeabi_dmul>
 800c35e:	4b37      	ldr	r3, [pc, #220]	; (800c43c <scalbn+0x104>)
 800c360:	429e      	cmp	r6, r3
 800c362:	4604      	mov	r4, r0
 800c364:	460d      	mov	r5, r1
 800c366:	da10      	bge.n	800c38a <scalbn+0x52>
 800c368:	a32b      	add	r3, pc, #172	; (adr r3, 800c418 <scalbn+0xe0>)
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	e03a      	b.n	800c3e6 <scalbn+0xae>
 800c370:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c374:	428a      	cmp	r2, r1
 800c376:	d10c      	bne.n	800c392 <scalbn+0x5a>
 800c378:	ee10 2a10 	vmov	r2, s0
 800c37c:	4620      	mov	r0, r4
 800c37e:	4629      	mov	r1, r5
 800c380:	f7f3 ff9c 	bl	80002bc <__adddf3>
 800c384:	4604      	mov	r4, r0
 800c386:	460d      	mov	r5, r1
 800c388:	e019      	b.n	800c3be <scalbn+0x86>
 800c38a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c38e:	460b      	mov	r3, r1
 800c390:	3a36      	subs	r2, #54	; 0x36
 800c392:	4432      	add	r2, r6
 800c394:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c398:	428a      	cmp	r2, r1
 800c39a:	dd08      	ble.n	800c3ae <scalbn+0x76>
 800c39c:	2d00      	cmp	r5, #0
 800c39e:	a120      	add	r1, pc, #128	; (adr r1, 800c420 <scalbn+0xe8>)
 800c3a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3a4:	da1c      	bge.n	800c3e0 <scalbn+0xa8>
 800c3a6:	a120      	add	r1, pc, #128	; (adr r1, 800c428 <scalbn+0xf0>)
 800c3a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ac:	e018      	b.n	800c3e0 <scalbn+0xa8>
 800c3ae:	2a00      	cmp	r2, #0
 800c3b0:	dd08      	ble.n	800c3c4 <scalbn+0x8c>
 800c3b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c3b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c3ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c3be:	ec45 4b10 	vmov	d0, r4, r5
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c3c8:	da19      	bge.n	800c3fe <scalbn+0xc6>
 800c3ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c3ce:	429e      	cmp	r6, r3
 800c3d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c3d4:	dd0a      	ble.n	800c3ec <scalbn+0xb4>
 800c3d6:	a112      	add	r1, pc, #72	; (adr r1, 800c420 <scalbn+0xe8>)
 800c3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1e2      	bne.n	800c3a6 <scalbn+0x6e>
 800c3e0:	a30f      	add	r3, pc, #60	; (adr r3, 800c420 <scalbn+0xe8>)
 800c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e6:	f7f4 f91f 	bl	8000628 <__aeabi_dmul>
 800c3ea:	e7cb      	b.n	800c384 <scalbn+0x4c>
 800c3ec:	a10a      	add	r1, pc, #40	; (adr r1, 800c418 <scalbn+0xe0>)
 800c3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d0b8      	beq.n	800c368 <scalbn+0x30>
 800c3f6:	a10e      	add	r1, pc, #56	; (adr r1, 800c430 <scalbn+0xf8>)
 800c3f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3fc:	e7b4      	b.n	800c368 <scalbn+0x30>
 800c3fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c402:	3236      	adds	r2, #54	; 0x36
 800c404:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c408:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c40c:	4620      	mov	r0, r4
 800c40e:	4b0c      	ldr	r3, [pc, #48]	; (800c440 <scalbn+0x108>)
 800c410:	2200      	movs	r2, #0
 800c412:	e7e8      	b.n	800c3e6 <scalbn+0xae>
 800c414:	f3af 8000 	nop.w
 800c418:	c2f8f359 	.word	0xc2f8f359
 800c41c:	01a56e1f 	.word	0x01a56e1f
 800c420:	8800759c 	.word	0x8800759c
 800c424:	7e37e43c 	.word	0x7e37e43c
 800c428:	8800759c 	.word	0x8800759c
 800c42c:	fe37e43c 	.word	0xfe37e43c
 800c430:	c2f8f359 	.word	0xc2f8f359
 800c434:	81a56e1f 	.word	0x81a56e1f
 800c438:	43500000 	.word	0x43500000
 800c43c:	ffff3cb0 	.word	0xffff3cb0
 800c440:	3c900000 	.word	0x3c900000

0800c444 <_init>:
 800c444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c446:	bf00      	nop
 800c448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c44a:	bc08      	pop	{r3}
 800c44c:	469e      	mov	lr, r3
 800c44e:	4770      	bx	lr

0800c450 <_fini>:
 800c450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c452:	bf00      	nop
 800c454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c456:	bc08      	pop	{r3}
 800c458:	469e      	mov	lr, r3
 800c45a:	4770      	bx	lr
