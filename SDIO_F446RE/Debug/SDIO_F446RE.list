
SDIO_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800b8c0  0800b8c0  0001b8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbf0  0800bbf0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbf0  0800bbf0  0001bbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbf8  0800bbf8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbf8  0800bbf8  0001bbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbfc  0800bbfc  0001bbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800bc00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002314  20000074  0800bc74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002388  0800bc74  00022388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138b0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f1c  00000000  00000000  00033954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00036870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00037890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004dc5  00000000  00000000  00038768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e0f  00000000  00000000  0003d52d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddfd0  00000000  00000000  0005333c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013130c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004edc  00000000  00000000  0013135c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b8a4 	.word	0x0800b8a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800b8a4 	.word	0x0800b8a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ed8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d013      	beq.n	8000f0c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ee4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000eec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00b      	beq.n	8000f0c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ef4:	e000      	b.n	8000ef8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ef6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ef8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f9      	beq.n	8000ef6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f02:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_write>:
UINT br, bw;
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

int _write(int file, char *ptr, int length) {
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]

	for(i = 0; i < length; i++) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	e009      	b.n	8000f44 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	60ba      	str	r2, [r7, #8]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ffc7 	bl	8000ecc <ITM_SendChar>
	for(i = 0; i < length; i++) {
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf1      	blt.n	8000f30 <_write+0x16>
	}

	return length;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <bufclear>:
	return i;
}


// Clear UART buffer for debugging
void bufclear(void) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	e007      	b.n	8000f74 <bufclear+0x1c>
		buffer[i] = '\0';
 8000f64:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <bufclear+0x30>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b7f      	cmp	r3, #127	; 0x7f
 8000f78:	ddf4      	ble.n	8000f64 <bufclear+0xc>
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	2000021c 	.word	0x2000021c

08000f8c <HAL_ADC_ConvHalfCpltCallback>:
// Size of buffer needs to be a multiple of number of ADC channels (minimum of 5)
// Needs to be divisible by the number of bytes in each line
// that I am writing to the SD card				<-- What did I mean by this???

// Called when buffer is half filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	fromADC_Ptr = &adc_data[0];
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000f98:	601a      	str	r2, [r3, #0]
	toSD_Ptr = &SD_data[0];
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000f9e:	601a      	str	r2, [r3, #0]

	dataReady = 1;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000218 	.word	0x20000218
 8000fb8:	20000200 	.word	0x20000200
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	2000020c 	.word	0x2000020c
 8000fc4:	2000029c 	.word	0x2000029c

08000fc8 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	fromADC_Ptr = &adc_data[NUM_CHANNELS/2];
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_ADC_ConvCpltCallback+0x28>)
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000fd4:	601a      	str	r2, [r3, #0]
	toSD_Ptr = &SD_data[NUM_CHANNELS/2];
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_ADC_ConvCpltCallback+0x30>)
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_ADC_ConvCpltCallback+0x34>)
 8000fda:	601a      	str	r2, [r3, #0]

	dataReady = 1;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_ADC_ConvCpltCallback+0x38>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000218 	.word	0x20000218
 8000ff4:	20000204 	.word	0x20000204
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000210 	.word	0x20000210
 8001000:	2000029c 	.word	0x2000029c
 8001004:	00000000 	.word	0x00000000

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f000 fe2b 	bl	8001c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001012:	f000 f99f 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f000 fb03 	bl	8001620 <MX_GPIO_Init>
  MX_DMA_Init();
 800101a:	f000 fae1 	bl	80015e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800101e:	f000 fab5 	bl	800158c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001022:	f000 fa09 	bl	8001438 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8001026:	f000 fa91 	bl	800154c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800102a:	f005 fa99 	bl	8006560 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // Start DMA buffer
  // Might need to stop DMA at some point
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_data, NUM_CHANNELS);
 800102e:	2205      	movs	r2, #5
 8001030:	49ad      	ldr	r1, [pc, #692]	; (80012e8 <main+0x2e0>)
 8001032:	48ae      	ldr	r0, [pc, #696]	; (80012ec <main+0x2e4>)
 8001034:	f000 fef2 	bl	8001e1c <HAL_ADC_Start_DMA>
  uint16_t current_acc_x;
  uint16_t current_acc_y;
  uint16_t current_acc_z;

  // Mount SD card
  fresult = f_mount(&fs, "", 0);
 8001038:	2200      	movs	r2, #0
 800103a:	49ad      	ldr	r1, [pc, #692]	; (80012f0 <main+0x2e8>)
 800103c:	48ad      	ldr	r0, [pc, #692]	; (80012f4 <main+0x2ec>)
 800103e:	f007 fa63 	bl	8008508 <f_mount>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4bac      	ldr	r3, [pc, #688]	; (80012f8 <main+0x2f0>)
 8001048:	701a      	strb	r2, [r3, #0]

  if(fresult != FR_OK){
 800104a:	4bab      	ldr	r3, [pc, #684]	; (80012f8 <main+0x2f0>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <main+0x52>
	  printf("ERROR in mounting SD card...\n");
 8001052:	48aa      	ldr	r0, [pc, #680]	; (80012fc <main+0x2f4>)
 8001054:	f008 fd62 	bl	8009b1c <puts>
 8001058:	e002      	b.n	8001060 <main+0x58>
  }
  else {
	  printf("SD card mounted successfully...\n");
 800105a:	48a9      	ldr	r0, [pc, #676]	; (8001300 <main+0x2f8>)
 800105c:	f008 fd5e 	bl	8009b1c <puts>
  }

  // Check free space on SD card
  f_getfree("", &fre_clust, &pfs);
 8001060:	4aa8      	ldr	r2, [pc, #672]	; (8001304 <main+0x2fc>)
 8001062:	49a9      	ldr	r1, [pc, #676]	; (8001308 <main+0x300>)
 8001064:	48a2      	ldr	r0, [pc, #648]	; (80012f0 <main+0x2e8>)
 8001066:	f008 f8fa 	bl	800925e <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800106a:	4ba6      	ldr	r3, [pc, #664]	; (8001304 <main+0x2fc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	3b02      	subs	r3, #2
 8001072:	4aa4      	ldr	r2, [pc, #656]	; (8001304 <main+0x2fc>)
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	8952      	ldrh	r2, [r2, #10]
 8001078:	fb02 f303 	mul.w	r3, r2, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa59 	bl	8000534 <__aeabi_ui2d>
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4ba1      	ldr	r3, [pc, #644]	; (800130c <main+0x304>)
 8001088:	f7ff face 	bl	8000628 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fd78 	bl	8000b88 <__aeabi_d2uiz>
 8001098:	4603      	mov	r3, r0
 800109a:	4a9d      	ldr	r2, [pc, #628]	; (8001310 <main+0x308>)
 800109c:	6013      	str	r3, [r2, #0]
  printf("SD card total size: \t%lu\n", total);
 800109e:	4b9c      	ldr	r3, [pc, #624]	; (8001310 <main+0x308>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	489b      	ldr	r0, [pc, #620]	; (8001314 <main+0x30c>)
 80010a6:	f008 fcb3 	bl	8009a10 <iprintf>
  bufclear();
 80010aa:	f7ff ff55 	bl	8000f58 <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80010ae:	4b95      	ldr	r3, [pc, #596]	; (8001304 <main+0x2fc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	895b      	ldrh	r3, [r3, #10]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b94      	ldr	r3, [pc, #592]	; (8001308 <main+0x300>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	fb02 f303 	mul.w	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa38 	bl	8000534 <__aeabi_ui2d>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b90      	ldr	r3, [pc, #576]	; (800130c <main+0x304>)
 80010ca:	f7ff faad 	bl	8000628 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fd57 	bl	8000b88 <__aeabi_d2uiz>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a8e      	ldr	r2, [pc, #568]	; (8001318 <main+0x310>)
 80010de:	6013      	str	r3, [r2, #0]
  printf("SD card free space: \t%lu\n", free_space);
 80010e0:	4b8d      	ldr	r3, [pc, #564]	; (8001318 <main+0x310>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	488d      	ldr	r0, [pc, #564]	; (800131c <main+0x314>)
 80010e8:	f008 fc92 	bl	8009a10 <iprintf>
  bufclear();
 80010ec:	f7ff ff34 	bl	8000f58 <bufclear>
//  else {
//	  printf("error!!! in UNMOUNTING SD CARD\n");
//  }


  char *name = "adc_data.csv";
 80010f0:	4b8b      	ldr	r3, [pc, #556]	; (8001320 <main+0x318>)
 80010f2:	61fb      	str	r3, [r7, #28]

  fresult = f_stat(name, &fno);
 80010f4:	498b      	ldr	r1, [pc, #556]	; (8001324 <main+0x31c>)
 80010f6:	69f8      	ldr	r0, [r7, #28]
 80010f8:	f008 f878 	bl	80091ec <f_stat>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b7d      	ldr	r3, [pc, #500]	; (80012f8 <main+0x2f0>)
 8001102:	701a      	strb	r2, [r3, #0]

  if (fresult == FR_OK) {
 8001104:	4b7c      	ldr	r3, [pc, #496]	; (80012f8 <main+0x2f0>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d106      	bne.n	800111a <main+0x112>
	  printf("*%s* already exists!!!!\n",name);
 800110c:	69f9      	ldr	r1, [r7, #28]
 800110e:	4886      	ldr	r0, [pc, #536]	; (8001328 <main+0x320>)
 8001110:	f008 fc7e 	bl	8009a10 <iprintf>
	  bufclear();
 8001114:	f7ff ff20 	bl	8000f58 <bufclear>
 8001118:	e008      	b.n	800112c <main+0x124>
  }
  else {
	  fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800111a:	220b      	movs	r2, #11
 800111c:	69f9      	ldr	r1, [r7, #28]
 800111e:	4883      	ldr	r0, [pc, #524]	; (800132c <main+0x324>)
 8001120:	f007 fa38 	bl	8008594 <f_open>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	4b73      	ldr	r3, [pc, #460]	; (80012f8 <main+0x2f0>)
 800112a:	701a      	strb	r2, [r3, #0]
  }
	  if(fresult != FR_OK) {
 800112c:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <main+0x2f0>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d009      	beq.n	8001148 <main+0x140>
		  printf ("ERROR: no %d in creating file *%s*\n", fresult, name);
 8001134:	4b70      	ldr	r3, [pc, #448]	; (80012f8 <main+0x2f0>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	4619      	mov	r1, r3
 800113c:	487c      	ldr	r0, [pc, #496]	; (8001330 <main+0x328>)
 800113e:	f008 fc67 	bl	8009a10 <iprintf>
		  bufclear();
 8001142:	f7ff ff09 	bl	8000f58 <bufclear>
 8001146:	e005      	b.n	8001154 <main+0x14c>
	  }
	  else {
		  printf ("*%s* created successfully\n",name);
 8001148:	69f9      	ldr	r1, [r7, #28]
 800114a:	487a      	ldr	r0, [pc, #488]	; (8001334 <main+0x32c>)
 800114c:	f008 fc60 	bl	8009a10 <iprintf>
		  bufclear();
 8001150:	f7ff ff02 	bl	8000f58 <bufclear>
//	  count++;
//	  printf("count = %d \n", count);
//	  HAL_Delay(250);

	  // Initialize respective sensor data variables
	  current_audio = adc_data[0];
 8001154:	4b64      	ldr	r3, [pc, #400]	; (80012e8 <main+0x2e0>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	837b      	strh	r3, [r7, #26]
	  current_pressure = adc_data[1];
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <main+0x2e0>)
 800115c:	885b      	ldrh	r3, [r3, #2]
 800115e:	833b      	strh	r3, [r7, #24]
	  current_acc = sqrt(pow(adc_data[2], 2) + pow(adc_data[3], 2) + pow(adc_data[4], 2));
 8001160:	4b61      	ldr	r3, [pc, #388]	; (80012e8 <main+0x2e0>)
 8001162:	889b      	ldrh	r3, [r3, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f9e5 	bl	8000534 <__aeabi_ui2d>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 80012e0 <main+0x2d8>
 8001172:	ec43 2b10 	vmov	d0, r2, r3
 8001176:	f009 fc4f 	bl	800aa18 <pow>
 800117a:	ec55 4b10 	vmov	r4, r5, d0
 800117e:	4b5a      	ldr	r3, [pc, #360]	; (80012e8 <main+0x2e0>)
 8001180:	88db      	ldrh	r3, [r3, #6]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9d6 	bl	8000534 <__aeabi_ui2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	ed9f 1b54 	vldr	d1, [pc, #336]	; 80012e0 <main+0x2d8>
 8001190:	ec43 2b10 	vmov	d0, r2, r3
 8001194:	f009 fc40 	bl	800aa18 <pow>
 8001198:	ec53 2b10 	vmov	r2, r3, d0
 800119c:	4620      	mov	r0, r4
 800119e:	4629      	mov	r1, r5
 80011a0:	f7ff f88c 	bl	80002bc <__adddf3>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4614      	mov	r4, r2
 80011aa:	461d      	mov	r5, r3
 80011ac:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <main+0x2e0>)
 80011ae:	891b      	ldrh	r3, [r3, #8]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9bf 	bl	8000534 <__aeabi_ui2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	ed9f 1b49 	vldr	d1, [pc, #292]	; 80012e0 <main+0x2d8>
 80011be:	ec43 2b10 	vmov	d0, r2, r3
 80011c2:	f009 fc29 	bl	800aa18 <pow>
 80011c6:	ec53 2b10 	vmov	r2, r3, d0
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f875 	bl	80002bc <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	ec43 2b17 	vmov	d7, r2, r3
 80011da:	eeb0 0a47 	vmov.f32	s0, s14
 80011de:	eef0 0a67 	vmov.f32	s1, s15
 80011e2:	f009 fc89 	bl	800aaf8 <sqrt>
 80011e6:	ec53 2b10 	vmov	r2, r3, d0
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fccb 	bl	8000b88 <__aeabi_d2uiz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	82fb      	strh	r3, [r7, #22]

	  current_acc_x = adc_data[2];
 80011f6:	4b3c      	ldr	r3, [pc, #240]	; (80012e8 <main+0x2e0>)
 80011f8:	889b      	ldrh	r3, [r3, #4]
 80011fa:	82bb      	strh	r3, [r7, #20]
	  current_acc_y = adc_data[3];
 80011fc:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <main+0x2e0>)
 80011fe:	88db      	ldrh	r3, [r3, #6]
 8001200:	827b      	strh	r3, [r7, #18]
	  current_acc_z = adc_data[4];
 8001202:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <main+0x2e0>)
 8001204:	891b      	ldrh	r3, [r3, #8]
 8001206:	823b      	strh	r3, [r7, #16]

	  while(dataReady == 0) {
 8001208:	e020      	b.n	800124c <main+0x244>
		  // Do stuff here with one half of ADC while
		  // other half is being filled?
		  fresult = f_lseek(&fil, f_size(&fil));
 800120a:	4b48      	ldr	r3, [pc, #288]	; (800132c <main+0x324>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	4619      	mov	r1, r3
 8001210:	4846      	ldr	r0, [pc, #280]	; (800132c <main+0x324>)
 8001212:	f007 fdc7 	bl	8008da4 <f_lseek>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <main+0x2f0>)
 800121c:	701a      	strb	r2, [r3, #0]
		  fresult = f_printf(&fil, "ADC channel 0 (audio) = %d\n", current_audio);
 800121e:	8b7b      	ldrh	r3, [r7, #26]
 8001220:	461a      	mov	r2, r3
 8001222:	4945      	ldr	r1, [pc, #276]	; (8001338 <main+0x330>)
 8001224:	4841      	ldr	r0, [pc, #260]	; (800132c <main+0x324>)
 8001226:	f008 f947 	bl	80094b8 <f_printf>
 800122a:	4603      	mov	r3, r0
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <main+0x2f0>)
 8001230:	701a      	strb	r2, [r3, #0]
		  fresult = f_sync(&fil);
 8001232:	483e      	ldr	r0, [pc, #248]	; (800132c <main+0x324>)
 8001234:	f007 fd0e 	bl	8008c54 <f_sync>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <main+0x2f0>)
 800123e:	701a      	strb	r2, [r3, #0]

		  // Increment count
		  count++;
 8001240:	4b3e      	ldr	r3, [pc, #248]	; (800133c <main+0x334>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b3c      	ldr	r3, [pc, #240]	; (800133c <main+0x334>)
 800124a:	701a      	strb	r2, [r3, #0]
	  while(dataReady == 0) {
 800124c:	4b3c      	ldr	r3, [pc, #240]	; (8001340 <main+0x338>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0d9      	beq.n	800120a <main+0x202>
	  	  }

	  dataReady = 0;
 8001256:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <main+0x338>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]

	  // The current samples will be the "previous" samples for the next samples
	  previous_audio = current_audio;
 800125c:	8b7b      	ldrh	r3, [r7, #26]
 800125e:	81fb      	strh	r3, [r7, #14]
	  previous_pressure = current_pressure;
 8001260:	8b3b      	ldrh	r3, [r7, #24]
 8001262:	81bb      	strh	r3, [r7, #12]
	  previous_acc = current_acc;
 8001264:	8afb      	ldrh	r3, [r7, #22]
 8001266:	817b      	strh	r3, [r7, #10]

	  previous_acc_x = current_acc_x;
 8001268:	8abb      	ldrh	r3, [r7, #20]
 800126a:	813b      	strh	r3, [r7, #8]
	  previous_acc_y = current_acc_y;
 800126c:	8a7b      	ldrh	r3, [r7, #18]
 800126e:	80fb      	strh	r3, [r7, #6]
	  previous_acc_z = current_acc_z;
 8001270:	8a3b      	ldrh	r3, [r7, #16]
 8001272:	80bb      	strh	r3, [r7, #4]

	  // Stop when count is a certain value (leads to unmount SD card)
	  if(count == 100) {
 8001274:	4b31      	ldr	r3, [pc, #196]	; (800133c <main+0x334>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b64      	cmp	r3, #100	; 0x64
 800127a:	d000      	beq.n	800127e <main+0x276>
	  current_audio = adc_data[0];
 800127c:	e76a      	b.n	8001154 <main+0x14c>
		  break;
 800127e:	bf00      	nop
	  }

  }

  // Stop ADC DMA and disable ADC
  HAL_ADC_Stop_DMA(&hadc1);
 8001280:	481a      	ldr	r0, [pc, #104]	; (80012ec <main+0x2e4>)
 8001282:	f000 fedb 	bl	800203c <HAL_ADC_Stop_DMA>

  // Close buffer file
  f_close(&fil);
 8001286:	4829      	ldr	r0, [pc, #164]	; (800132c <main+0x324>)
 8001288:	f007 fd62 	bl	8008d50 <f_close>
  if (fresult != FR_OK) {
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <main+0x2f0>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <main+0x29e>
	  printf ("ERROR: no %d in closing file *%s*\n", fresult, name);
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <main+0x2f0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	4619      	mov	r1, r3
 800129c:	4829      	ldr	r0, [pc, #164]	; (8001344 <main+0x33c>)
 800129e:	f008 fbb7 	bl	8009a10 <iprintf>
	  bufclear();
 80012a2:	f7ff fe59 	bl	8000f58 <bufclear>
  }

  // After while loop when break
  // Unmount SD card
  fresult = f_mount(NULL, "/", 1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	4927      	ldr	r1, [pc, #156]	; (8001348 <main+0x340>)
 80012aa:	2000      	movs	r0, #0
 80012ac:	f007 f92c 	bl	8008508 <f_mount>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <main+0x2f0>)
 80012b6:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) {
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <main+0x2f0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <main+0x2c4>
	  printf("SD card unmounted successfully...\n");
 80012c0:	4822      	ldr	r0, [pc, #136]	; (800134c <main+0x344>)
 80012c2:	f008 fc2b 	bl	8009b1c <puts>
	  bufclear();
 80012c6:	f7ff fe47 	bl	8000f58 <bufclear>
 80012ca:	e004      	b.n	80012d6 <main+0x2ce>
  }
  else {
	  printf("ERROR: unmounting SD card\n");
 80012cc:	4820      	ldr	r0, [pc, #128]	; (8001350 <main+0x348>)
 80012ce:	f008 fc25 	bl	8009b1c <puts>
	  bufclear();
 80012d2:	f7ff fe41 	bl	8000f58 <bufclear>
 80012d6:	2300      	movs	r3, #0
  }

  /* USER CODE END 3 */
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bdb0      	pop	{r4, r5, r7, pc}
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40000000 	.word	0x40000000
 80012e8:	20000200 	.word	0x20000200
 80012ec:	20000090 	.word	0x20000090
 80012f0:	0800b8c0 	.word	0x0800b8c0
 80012f4:	200002a0 	.word	0x200002a0
 80012f8:	2000231c 	.word	0x2000231c
 80012fc:	0800b8c4 	.word	0x0800b8c4
 8001300:	0800b8e4 	.word	0x0800b8e4
 8001304:	20002320 	.word	0x20002320
 8001308:	20002324 	.word	0x20002324
 800130c:	3fe00000 	.word	0x3fe00000
 8001310:	20002328 	.word	0x20002328
 8001314:	0800b904 	.word	0x0800b904
 8001318:	2000232c 	.word	0x2000232c
 800131c:	0800b920 	.word	0x0800b920
 8001320:	0800b93c 	.word	0x0800b93c
 8001324:	20002304 	.word	0x20002304
 8001328:	0800b94c 	.word	0x0800b94c
 800132c:	200012d4 	.word	0x200012d4
 8001330:	0800b968 	.word	0x0800b968
 8001334:	0800b98c 	.word	0x0800b98c
 8001338:	0800b9a8 	.word	0x0800b9a8
 800133c:	20002330 	.word	0x20002330
 8001340:	2000029c 	.word	0x2000029c
 8001344:	0800b9c4 	.word	0x0800b9c4
 8001348:	0800b9e8 	.word	0x0800b9e8
 800134c:	0800b9ec 	.word	0x0800b9ec
 8001350:	0800ba10 	.word	0x0800ba10

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	; 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	2234      	movs	r2, #52	; 0x34
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f008 fb4c 	bl	8009a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <SystemClock_Config+0xdc>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a2b      	ldr	r2, [pc, #172]	; (8001430 <SystemClock_Config+0xdc>)
 8001382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <SystemClock_Config+0xdc>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001394:	2300      	movs	r3, #0
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	4b26      	ldr	r3, [pc, #152]	; (8001434 <SystemClock_Config+0xe0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a25      	ldr	r2, [pc, #148]	; (8001434 <SystemClock_Config+0xe0>)
 800139e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <SystemClock_Config+0xe0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b8:	2310      	movs	r3, #16
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013bc:	2302      	movs	r3, #2
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c4:	2308      	movs	r3, #8
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013c8:	23b4      	movs	r3, #180	; 0xb4
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013cc:	2302      	movs	r3, #2
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80013d0:	2309      	movs	r3, #9
 80013d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fea5 	bl	800412c <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013e8:	f000 f996 	bl	8001718 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013ec:	f001 ffda 	bl	80033a4 <HAL_PWREx_EnableOverDrive>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013f6:	f000 f98f 	bl	8001718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fa:	230f      	movs	r3, #15
 80013fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fe:	2302      	movs	r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001406:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800140a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800140c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001410:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2105      	movs	r1, #5
 8001418:	4618      	mov	r0, r3
 800141a:	f002 f813 	bl	8003444 <HAL_RCC_ClockConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001424:	f000 f978 	bl	8001718 <Error_Handler>
  }
}
 8001428:	bf00      	nop
 800142a:	3750      	adds	r7, #80	; 0x50
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000

08001438 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800143e:	463b      	mov	r3, r7
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <MX_ADC1_Init+0x108>)
 800144c:	4a3d      	ldr	r2, [pc, #244]	; (8001544 <MX_ADC1_Init+0x10c>)
 800144e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001450:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <MX_ADC1_Init+0x108>)
 8001452:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001456:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001458:	4b39      	ldr	r3, [pc, #228]	; (8001540 <MX_ADC1_Init+0x108>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <MX_ADC1_Init+0x108>)
 8001460:	2201      	movs	r2, #1
 8001462:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <MX_ADC1_Init+0x108>)
 8001466:	2201      	movs	r2, #1
 8001468:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800146a:	4b35      	ldr	r3, [pc, #212]	; (8001540 <MX_ADC1_Init+0x108>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <MX_ADC1_Init+0x108>)
 8001474:	2200      	movs	r2, #0
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001478:	4b31      	ldr	r3, [pc, #196]	; (8001540 <MX_ADC1_Init+0x108>)
 800147a:	4a33      	ldr	r2, [pc, #204]	; (8001548 <MX_ADC1_Init+0x110>)
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <MX_ADC1_Init+0x108>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <MX_ADC1_Init+0x108>)
 8001486:	2205      	movs	r2, #5
 8001488:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <MX_ADC1_Init+0x108>)
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001492:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <MX_ADC1_Init+0x108>)
 8001494:	2201      	movs	r2, #1
 8001496:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001498:	4829      	ldr	r0, [pc, #164]	; (8001540 <MX_ADC1_Init+0x108>)
 800149a:	f000 fc7b 	bl	8001d94 <HAL_ADC_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014a4:	f000 f938 	bl	8001718 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014ac:	2301      	movs	r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014b0:	2307      	movs	r3, #7
 80014b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	4619      	mov	r1, r3
 80014b8:	4821      	ldr	r0, [pc, #132]	; (8001540 <MX_ADC1_Init+0x108>)
 80014ba:	f000 fe23 	bl	8002104 <HAL_ADC_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014c4:	f000 f928 	bl	8001718 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	481a      	ldr	r0, [pc, #104]	; (8001540 <MX_ADC1_Init+0x108>)
 80014d6:	f000 fe15 	bl	8002104 <HAL_ADC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014e0:	f000 f91a 	bl	8001718 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80014e4:	230c      	movs	r3, #12
 80014e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80014e8:	2303      	movs	r3, #3
 80014ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	4619      	mov	r1, r3
 80014f0:	4813      	ldr	r0, [pc, #76]	; (8001540 <MX_ADC1_Init+0x108>)
 80014f2:	f000 fe07 	bl	8002104 <HAL_ADC_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80014fc:	f000 f90c 	bl	8001718 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001500:	230d      	movs	r3, #13
 8001502:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001504:	2304      	movs	r3, #4
 8001506:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <MX_ADC1_Init+0x108>)
 800150e:	f000 fdf9 	bl	8002104 <HAL_ADC_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001518:	f000 f8fe 	bl	8001718 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800151c:	2304      	movs	r3, #4
 800151e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001520:	2305      	movs	r3, #5
 8001522:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_ADC1_Init+0x108>)
 800152a:	f000 fdeb 	bl	8002104 <HAL_ADC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001534:	f000 f8f0 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000090 	.word	0x20000090
 8001544:	40012000 	.word	0x40012000
 8001548:	0f000001 	.word	0x0f000001

0800154c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_SDIO_SD_Init+0x38>)
 8001552:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <MX_SDIO_SD_Init+0x3c>)
 8001554:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_SDIO_SD_Init+0x38>)
 8001558:	2200      	movs	r2, #0
 800155a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_SDIO_SD_Init+0x38>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_SDIO_SD_Init+0x38>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_SDIO_SD_Init+0x38>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <MX_SDIO_SD_Init+0x38>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 18;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <MX_SDIO_SD_Init+0x38>)
 8001576:	2212      	movs	r2, #18
 8001578:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	20000138 	.word	0x20000138
 8001588:	40012c00 	.word	0x40012c00

0800158c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_USART2_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f003 ffd8 	bl	8005578 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f000 f8a3 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200001bc 	.word	0x200001bc
 80015dc:	40004400 	.word	0x40004400

080015e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_DMA_Init+0x3c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <MX_DMA_Init+0x3c>)
 80015f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_DMA_Init+0x3c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2038      	movs	r0, #56	; 0x38
 8001608:	f001 f907 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800160c:	2038      	movs	r0, #56	; 0x38
 800160e:	f001 f920 	bl	8002852 <HAL_NVIC_EnableIRQ>

}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800

08001620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b34      	ldr	r3, [pc, #208]	; (800170c <MX_GPIO_Init+0xec>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a33      	ldr	r2, [pc, #204]	; (800170c <MX_GPIO_Init+0xec>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b31      	ldr	r3, [pc, #196]	; (800170c <MX_GPIO_Init+0xec>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <MX_GPIO_Init+0xec>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a2c      	ldr	r2, [pc, #176]	; (800170c <MX_GPIO_Init+0xec>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <MX_GPIO_Init+0xec>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <MX_GPIO_Init+0xec>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a25      	ldr	r2, [pc, #148]	; (800170c <MX_GPIO_Init+0xec>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <MX_GPIO_Init+0xec>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <MX_GPIO_Init+0xec>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a1e      	ldr	r2, [pc, #120]	; (800170c <MX_GPIO_Init+0xec>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_GPIO_Init+0xec>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <MX_GPIO_Init+0xec>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <MX_GPIO_Init+0xec>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <MX_GPIO_Init+0xec>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2120      	movs	r1, #32
 80016c6:	4812      	ldr	r0, [pc, #72]	; (8001710 <MX_GPIO_Init+0xf0>)
 80016c8:	f001 fe52 	bl	8003370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	480c      	ldr	r0, [pc, #48]	; (8001714 <MX_GPIO_Init+0xf4>)
 80016e4:	f001 fcb0 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016e8:	2320      	movs	r3, #32
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_GPIO_Init+0xf0>)
 8001700:	f001 fca2 	bl	8003048 <HAL_GPIO_Init>

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000
 8001714:	40020800 	.word	0x40020800

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_MspInit+0x4c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <HAL_MspInit+0x4c>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_MspInit+0x4c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <HAL_MspInit+0x4c>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001762:	2007      	movs	r0, #7
 8001764:	f001 f84e 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a3c      	ldr	r2, [pc, #240]	; (8001884 <HAL_ADC_MspInit+0x110>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d171      	bne.n	800187a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <HAL_ADC_MspInit+0x114>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a3a      	ldr	r2, [pc, #232]	; (8001888 <HAL_ADC_MspInit+0x114>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_ADC_MspInit+0x114>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_ADC_MspInit+0x114>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a33      	ldr	r2, [pc, #204]	; (8001888 <HAL_ADC_MspInit+0x114>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b31      	ldr	r3, [pc, #196]	; (8001888 <HAL_ADC_MspInit+0x114>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <HAL_ADC_MspInit+0x114>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a2c      	ldr	r2, [pc, #176]	; (8001888 <HAL_ADC_MspInit+0x114>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <HAL_ADC_MspInit+0x114>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ea:	230c      	movs	r3, #12
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ee:	2303      	movs	r3, #3
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4823      	ldr	r0, [pc, #140]	; (800188c <HAL_ADC_MspInit+0x118>)
 80017fe:	f001 fc23 	bl	8003048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001802:	2313      	movs	r3, #19
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001806:	2303      	movs	r3, #3
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	481e      	ldr	r0, [pc, #120]	; (8001890 <HAL_ADC_MspInit+0x11c>)
 8001816:	f001 fc17 	bl	8003048 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <HAL_ADC_MspInit+0x120>)
 800181c:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <HAL_ADC_MspInit+0x124>)
 800181e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_ADC_MspInit+0x120>)
 8001822:	2200      	movs	r2, #0
 8001824:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_ADC_MspInit+0x120>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_ADC_MspInit+0x120>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_ADC_MspInit+0x120>)
 8001834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001838:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_ADC_MspInit+0x120>)
 800183c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001840:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_ADC_MspInit+0x120>)
 8001844:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001848:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_ADC_MspInit+0x120>)
 800184c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001850:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_ADC_MspInit+0x120>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_ADC_MspInit+0x120>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <HAL_ADC_MspInit+0x120>)
 8001860:	f001 f812 	bl	8002888 <HAL_DMA_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800186a:	f7ff ff55 	bl	8001718 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_ADC_MspInit+0x120>)
 8001872:	639a      	str	r2, [r3, #56]	; 0x38
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_ADC_MspInit+0x120>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40012000 	.word	0x40012000
 8001888:	40023800 	.word	0x40023800
 800188c:	40020800 	.word	0x40020800
 8001890:	40020000 	.word	0x40020000
 8001894:	200000d8 	.word	0x200000d8
 8001898:	40026410 	.word	0x40026410

0800189c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b0a2      	sub	sp, #136	; 0x88
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b4:	f107 0318 	add.w	r3, r7, #24
 80018b8:	225c      	movs	r2, #92	; 0x5c
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f008 f89f 	bl	8009a00 <memset>
  if(hsd->Instance==SDIO)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a43      	ldr	r2, [pc, #268]	; (80019d4 <HAL_SD_MspInit+0x138>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d17f      	bne.n	80019cc <HAL_SD_MspInit+0x130>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80018cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80018d2:	2300      	movs	r3, #0
 80018d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80018d6:	2300      	movs	r3, #0
 80018d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018da:	f107 0318 	add.w	r3, r7, #24
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 feca 	bl	8003678 <HAL_RCCEx_PeriphCLKConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80018ea:	f7ff ff15 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_SD_MspInit+0x13c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a38      	ldr	r2, [pc, #224]	; (80019d8 <HAL_SD_MspInit+0x13c>)
 80018f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_SD_MspInit+0x13c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <HAL_SD_MspInit+0x13c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a31      	ldr	r2, [pc, #196]	; (80019d8 <HAL_SD_MspInit+0x13c>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <HAL_SD_MspInit+0x13c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <HAL_SD_MspInit+0x13c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a2a      	ldr	r2, [pc, #168]	; (80019d8 <HAL_SD_MspInit+0x13c>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <HAL_SD_MspInit+0x13c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <HAL_SD_MspInit+0x13c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a23      	ldr	r2, [pc, #140]	; (80019d8 <HAL_SD_MspInit+0x13c>)
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <HAL_SD_MspInit+0x13c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800195e:	2304      	movs	r3, #4
 8001960:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001970:	230c      	movs	r3, #12
 8001972:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800197a:	4619      	mov	r1, r3
 800197c:	4817      	ldr	r0, [pc, #92]	; (80019dc <HAL_SD_MspInit+0x140>)
 800197e:	f001 fb63 	bl	8003048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001986:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001996:	230c      	movs	r3, #12
 8001998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019a0:	4619      	mov	r1, r3
 80019a2:	480f      	ldr	r0, [pc, #60]	; (80019e0 <HAL_SD_MspInit+0x144>)
 80019a4:	f001 fb50 	bl	8003048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019a8:	2304      	movs	r3, #4
 80019aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019ba:	230c      	movs	r3, #12
 80019bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019c4:	4619      	mov	r1, r3
 80019c6:	4807      	ldr	r0, [pc, #28]	; (80019e4 <HAL_SD_MspInit+0x148>)
 80019c8:	f001 fb3e 	bl	8003048 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80019cc:	bf00      	nop
 80019ce:	3788      	adds	r7, #136	; 0x88
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40012c00 	.word	0x40012c00
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020c00 	.word	0x40020c00

080019e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_UART_MspInit+0x84>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d12b      	bne.n	8001a62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_UART_MspInit+0x88>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <HAL_UART_MspInit+0x88>)
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_UART_MspInit+0x88>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_UART_MspInit+0x88>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <HAL_UART_MspInit+0x88>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_UART_MspInit+0x88>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a42:	230c      	movs	r3, #12
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a52:	2307      	movs	r3, #7
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <HAL_UART_MspInit+0x8c>)
 8001a5e:	f001 faf3 	bl	8003048 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40004400 	.word	0x40004400
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020000 	.word	0x40020000

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac4:	f000 f922 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <DMA2_Stream0_IRQHandler+0x10>)
 8001ad2:	f001 f84f 	bl	8002b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200000d8 	.word	0x200000d8

08001ae0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e00a      	b.n	8001b08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001af2:	f3af 8000 	nop.w
 8001af6:	4601      	mov	r1, r0
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	b2ca      	uxtb	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf0      	blt.n	8001af2 <_read+0x12>
  }

  return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b42:	605a      	str	r2, [r3, #4]
  return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_isatty>:

int _isatty(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f007 fefa 	bl	80099ac <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20020000 	.word	0x20020000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	20002334 	.word	0x20002334
 8001bec:	20002388 	.word	0x20002388

08001bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <SystemInit+0x20>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <SystemInit+0x20>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c1a:	490e      	ldr	r1, [pc, #56]	; (8001c54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c30:	4c0b      	ldr	r4, [pc, #44]	; (8001c60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c3e:	f7ff ffd7 	bl	8001bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f007 feb9 	bl	80099b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7ff f9df 	bl	8001008 <main>
  bx  lr    
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c58:	0800bc00 	.word	0x0800bc00
  ldr r2, =_sbss
 8001c5c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c60:	20002388 	.word	0x20002388

08001c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>
	...

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <HAL_Init+0x40>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_Init+0x40>)
 8001c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <HAL_Init+0x40>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 fdb7 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f000 f808 	bl	8001cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9c:	f7ff fd42 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_InitTick+0x54>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_InitTick+0x58>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fdcf 	bl	800286e <HAL_SYSTICK_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00e      	b.n	8001cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d80a      	bhi.n	8001cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f000 fd97 	bl	800281a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <HAL_InitTick+0x5c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000004 	.word	0x20000004
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	20000008 	.word	0x20000008

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	2000000c 	.word	0x2000000c
 8001d30:	20002338 	.word	0x20002338

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20002338 	.word	0x20002338

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff ffee 	bl	8001d34 <HAL_GetTick>
 8001d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d005      	beq.n	8001d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_Delay+0x44>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d72:	bf00      	nop
 8001d74:	f7ff ffde 	bl	8001d34 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f7      	bhi.n	8001d74 <HAL_Delay+0x28>
  {
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000000c 	.word	0x2000000c

08001d94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e033      	b.n	8001e12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff fcde 	bl	8001774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dda:	f023 0302 	bic.w	r3, r3, #2
 8001dde:	f043 0202 	orr.w	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fabe 	bl	8002368 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f023 0303 	bic.w	r3, r3, #3
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
 8001e02:	e001      	b.n	8001e08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_Start_DMA+0x1e>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e0e9      	b.n	800200e <HAL_ADC_Start_DMA+0x1f2>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d018      	beq.n	8001e82 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e60:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <HAL_ADC_Start_DMA+0x1fc>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a6d      	ldr	r2, [pc, #436]	; (800201c <HAL_ADC_Start_DMA+0x200>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	0c9a      	lsrs	r2, r3, #18
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e74:	e002      	b.n	8001e7c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f9      	bne.n	8001e76 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e90:	d107      	bne.n	8001ea2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	f040 80a1 	bne.w	8001ff4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001edc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef0:	d106      	bne.n	8001f00 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f023 0206 	bic.w	r2, r3, #6
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
 8001efe:	e002      	b.n	8001f06 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f0e:	4b44      	ldr	r3, [pc, #272]	; (8002020 <HAL_ADC_Start_DMA+0x204>)
 8001f10:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f16:	4a43      	ldr	r2, [pc, #268]	; (8002024 <HAL_ADC_Start_DMA+0x208>)
 8001f18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	4a42      	ldr	r2, [pc, #264]	; (8002028 <HAL_ADC_Start_DMA+0x20c>)
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	4a41      	ldr	r2, [pc, #260]	; (800202c <HAL_ADC_Start_DMA+0x210>)
 8001f28:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f32:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f42:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f52:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	334c      	adds	r3, #76	; 0x4c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f000 fd3e 	bl	80029e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d12a      	bne.n	8001fca <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2d      	ldr	r2, [pc, #180]	; (8002030 <HAL_ADC_Start_DMA+0x214>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d015      	beq.n	8001faa <HAL_ADC_Start_DMA+0x18e>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <HAL_ADC_Start_DMA+0x218>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d105      	bne.n	8001f94 <HAL_ADC_Start_DMA+0x178>
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_ADC_Start_DMA+0x204>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a27      	ldr	r2, [pc, #156]	; (8002038 <HAL_ADC_Start_DMA+0x21c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d136      	bne.n	800200c <HAL_ADC_Start_DMA+0x1f0>
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_ADC_Start_DMA+0x204>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d130      	bne.n	800200c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d129      	bne.n	800200c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	e020      	b.n	800200c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_ADC_Start_DMA+0x214>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d11b      	bne.n	800200c <HAL_ADC_Start_DMA+0x1f0>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d114      	bne.n	800200c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	e00b      	b.n	800200c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f043 0210 	orr.w	r2, r3, #16
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000004 	.word	0x20000004
 800201c:	431bde83 	.word	0x431bde83
 8002020:	40012300 	.word	0x40012300
 8002024:	08002561 	.word	0x08002561
 8002028:	0800261b 	.word	0x0800261b
 800202c:	08002637 	.word	0x08002637
 8002030:	40012000 	.word	0x40012000
 8002034:	40012100 	.word	0x40012100
 8002038:	40012200 	.word	0x40012200

0800203c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_ADC_Stop_DMA+0x1a>
 8002052:	2302      	movs	r3, #2
 8002054:	e048      	b.n	80020e8 <HAL_ADC_Stop_DMA+0xac>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d130      	bne.n	80020de <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800208a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d10f      	bne.n	80020ba <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fcf8 	bl	8002a94 <HAL_DMA_Abort>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80020c8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	f043 0201 	orr.w	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x1c>
 800211c:	2302      	movs	r3, #2
 800211e:	e113      	b.n	8002348 <HAL_ADC_ConfigChannel+0x244>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b09      	cmp	r3, #9
 800212e:	d925      	bls.n	800217c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68d9      	ldr	r1, [r3, #12]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	3b1e      	subs	r3, #30
 8002146:	2207      	movs	r2, #7
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43da      	mvns	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	400a      	ands	r2, r1
 8002154:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68d9      	ldr	r1, [r3, #12]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	4618      	mov	r0, r3
 8002168:	4603      	mov	r3, r0
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4403      	add	r3, r0
 800216e:	3b1e      	subs	r3, #30
 8002170:	409a      	lsls	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	e022      	b.n	80021c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6919      	ldr	r1, [r3, #16]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	2207      	movs	r2, #7
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	400a      	ands	r2, r1
 800219e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6919      	ldr	r1, [r3, #16]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4618      	mov	r0, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4403      	add	r3, r0
 80021b8:	409a      	lsls	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d824      	bhi.n	8002214 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	3b05      	subs	r3, #5
 80021dc:	221f      	movs	r2, #31
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	400a      	ands	r2, r1
 80021ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	4618      	mov	r0, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	3b05      	subs	r3, #5
 8002206:	fa00 f203 	lsl.w	r2, r0, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	635a      	str	r2, [r3, #52]	; 0x34
 8002212:	e04c      	b.n	80022ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b0c      	cmp	r3, #12
 800221a:	d824      	bhi.n	8002266 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3b23      	subs	r3, #35	; 0x23
 800222e:	221f      	movs	r2, #31
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43da      	mvns	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	400a      	ands	r2, r1
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	4618      	mov	r0, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	3b23      	subs	r3, #35	; 0x23
 8002258:	fa00 f203 	lsl.w	r2, r0, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
 8002264:	e023      	b.n	80022ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b41      	subs	r3, #65	; 0x41
 8002278:	221f      	movs	r2, #31
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	400a      	ands	r2, r1
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	4618      	mov	r0, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	3b41      	subs	r3, #65	; 0x41
 80022a2:	fa00 f203 	lsl.w	r2, r0, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_ADC_ConfigChannel+0x250>)
 80022b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a28      	ldr	r2, [pc, #160]	; (8002358 <HAL_ADC_ConfigChannel+0x254>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d10f      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x1d8>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b12      	cmp	r3, #18
 80022c2:	d10b      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <HAL_ADC_ConfigChannel+0x254>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d12b      	bne.n	800233e <HAL_ADC_ConfigChannel+0x23a>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a1c      	ldr	r2, [pc, #112]	; (800235c <HAL_ADC_ConfigChannel+0x258>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <HAL_ADC_ConfigChannel+0x1f4>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b11      	cmp	r3, #17
 80022f6:	d122      	bne.n	800233e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_ADC_ConfigChannel+0x258>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d111      	bne.n	800233e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_ADC_ConfigChannel+0x25c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a11      	ldr	r2, [pc, #68]	; (8002364 <HAL_ADC_ConfigChannel+0x260>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	0c9a      	lsrs	r2, r3, #18
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002330:	e002      	b.n	8002338 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3b01      	subs	r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f9      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40012300 	.word	0x40012300
 8002358:	40012000 	.word	0x40012000
 800235c:	10000012 	.word	0x10000012
 8002360:	20000004 	.word	0x20000004
 8002364:	431bde83 	.word	0x431bde83

08002368 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002370:	4b79      	ldr	r3, [pc, #484]	; (8002558 <ADC_Init+0x1f0>)
 8002372:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800239c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	021a      	lsls	r2, r3, #8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6899      	ldr	r1, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	4a58      	ldr	r2, [pc, #352]	; (800255c <ADC_Init+0x1f4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d022      	beq.n	8002446 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800240e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6899      	ldr	r1, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	e00f      	b.n	8002466 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002464:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0202 	bic.w	r2, r2, #2
 8002474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6899      	ldr	r1, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7e1b      	ldrb	r3, [r3, #24]
 8002480:	005a      	lsls	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01b      	beq.n	80024cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6859      	ldr	r1, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	3b01      	subs	r3, #1
 80024c0:	035a      	lsls	r2, r3, #13
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	e007      	b.n	80024dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	051a      	lsls	r2, r3, #20
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002510:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6899      	ldr	r1, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800251e:	025a      	lsls	r2, r3, #9
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6899      	ldr	r1, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	029a      	lsls	r2, r3, #10
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	609a      	str	r2, [r3, #8]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40012300 	.word	0x40012300
 800255c:	0f000001 	.word	0x0f000001

08002560 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002576:	2b00      	cmp	r3, #0
 8002578:	d13c      	bne.n	80025f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d12b      	bne.n	80025ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002598:	2b00      	cmp	r3, #0
 800259a:	d127      	bne.n	80025ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d006      	beq.n	80025b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d119      	bne.n	80025ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0220 	bic.w	r2, r2, #32
 80025c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7fe fceb 	bl	8000fc8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025f2:	e00e      	b.n	8002612 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff fd75 	bl	80020f0 <HAL_ADC_ErrorCallback>
}
 8002606:	e004      	b.n	8002612 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4798      	blx	r3
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7fe fcaf 	bl	8000f8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2240      	movs	r2, #64	; 0x40
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f043 0204 	orr.w	r2, r3, #4
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff fd4a 	bl	80020f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <__NVIC_SetPriorityGrouping>:
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <__NVIC_EnableIRQ+0x38>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_SetPriority>:
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <SysTick_Config>:
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f7ff ff8e 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff29 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff3e 	bl	80026ac <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff8e 	bl	8002758 <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5d 	bl	8002704 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff31 	bl	80026c8 <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa2 	bl	80027c0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff fa4e 	bl	8001d34 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e099      	b.n	80029d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c4:	e00f      	b.n	80028e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c6:	f7ff fa35 	bl	8001d34 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d908      	bls.n	80028e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2203      	movs	r2, #3
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e078      	b.n	80029d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e8      	bne.n	80028c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <HAL_DMA_Init+0x158>)
 8002900:	4013      	ands	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002912:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2b04      	cmp	r3, #4
 800293e:	d107      	bne.n	8002950 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	4313      	orrs	r3, r2
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f023 0307 	bic.w	r3, r3, #7
 8002966:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	2b04      	cmp	r3, #4
 8002978:	d117      	bne.n	80029aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00e      	beq.n	80029aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fadf 	bl	8002f50 <DMA_CheckFifoParam>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029a6:	2301      	movs	r3, #1
 80029a8:	e016      	b.n	80029d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa96 	bl	8002ee4 <DMA_CalcBaseAndBitshift>
 80029b8:	4603      	mov	r3, r0
 80029ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	223f      	movs	r2, #63	; 0x3f
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	f010803f 	.word	0xf010803f

080029e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_DMA_Start_IT+0x26>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e040      	b.n	8002a8c <HAL_DMA_Start_IT+0xa8>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d12f      	bne.n	8002a7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2202      	movs	r2, #2
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fa28 	bl	8002e88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	223f      	movs	r2, #63	; 0x3f
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0216 	orr.w	r2, r2, #22
 8002a52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0208 	orr.w	r2, r2, #8
 8002a6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e005      	b.n	8002a8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aa2:	f7ff f947 	bl	8001d34 <HAL_GetTick>
 8002aa6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d008      	beq.n	8002ac6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e052      	b.n	8002b6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0216 	bic.w	r2, r2, #22
 8002ad4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <HAL_DMA_Abort+0x62>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0208 	bic.w	r2, r2, #8
 8002b04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b16:	e013      	b.n	8002b40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b18:	f7ff f90c 	bl	8001d34 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d90c      	bls.n	8002b40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e015      	b.n	8002b6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e4      	bne.n	8002b18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	223f      	movs	r2, #63	; 0x3f
 8002b54:	409a      	lsls	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b80:	4b8e      	ldr	r3, [pc, #568]	; (8002dbc <HAL_DMA_IRQHandler+0x248>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a8e      	ldr	r2, [pc, #568]	; (8002dc0 <HAL_DMA_IRQHandler+0x24c>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	0a9b      	lsrs	r3, r3, #10
 8002b8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01a      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0204 	bic.w	r2, r2, #4
 8002bc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	2208      	movs	r2, #8
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be4:	2201      	movs	r2, #1
 8002be6:	409a      	lsls	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d012      	beq.n	8002c16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	2201      	movs	r2, #1
 8002c04:	409a      	lsls	r2, r3
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0e:	f043 0202 	orr.w	r2, r3, #2
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d012      	beq.n	8002c4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	2204      	movs	r2, #4
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	f043 0204 	orr.w	r2, r3, #4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	2210      	movs	r2, #16
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d043      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d03c      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	2210      	movs	r2, #16
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d018      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d108      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d024      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
 8002ca2:	e01f      	b.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01b      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
 8002cb4:	e016      	b.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d107      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0208 	bic.w	r2, r2, #8
 8002cd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	2220      	movs	r2, #32
 8002cea:	409a      	lsls	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 808f 	beq.w	8002e14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8087 	beq.w	8002e14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	d136      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0216 	bic.w	r2, r2, #22
 8002d2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d103      	bne.n	8002d4e <HAL_DMA_IRQHandler+0x1da>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0208 	bic.w	r2, r2, #8
 8002d5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d62:	223f      	movs	r2, #63	; 0x3f
 8002d64:	409a      	lsls	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d07e      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
        }
        return;
 8002d8a:	e079      	b.n	8002e80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01d      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10d      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d031      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
 8002db8:	e02c      	b.n	8002e14 <HAL_DMA_IRQHandler+0x2a0>
 8002dba:	bf00      	nop
 8002dbc:	20000004 	.word	0x20000004
 8002dc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d023      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
 8002dd4:	e01e      	b.n	8002e14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10f      	bne.n	8002e04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0210 	bic.w	r2, r2, #16
 8002df2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d032      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d022      	beq.n	8002e6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2205      	movs	r2, #5
 8002e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	3301      	adds	r3, #1
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d307      	bcc.n	8002e5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f2      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x2cc>
 8002e5a:	e000      	b.n	8002e5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
 8002e7e:	e000      	b.n	8002e82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e80:	bf00      	nop
    }
  }
}
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b40      	cmp	r3, #64	; 0x40
 8002eb4:	d108      	bne.n	8002ec8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ec6:	e007      	b.n	8002ed8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	3b10      	subs	r3, #16
 8002ef4:	4a14      	ldr	r2, [pc, #80]	; (8002f48 <DMA_CalcBaseAndBitshift+0x64>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002efe:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <DMA_CalcBaseAndBitshift+0x68>)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d909      	bls.n	8002f26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f1a:	f023 0303 	bic.w	r3, r3, #3
 8002f1e:	1d1a      	adds	r2, r3, #4
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	659a      	str	r2, [r3, #88]	; 0x58
 8002f24:	e007      	b.n	8002f36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	aaaaaaab 	.word	0xaaaaaaab
 8002f4c:	0800ba88 	.word	0x0800ba88

08002f50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d11f      	bne.n	8002faa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d856      	bhi.n	800301e <DMA_CheckFifoParam+0xce>
 8002f70:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <DMA_CheckFifoParam+0x28>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002f9b 	.word	0x08002f9b
 8002f80:	08002f89 	.word	0x08002f89
 8002f84:	0800301f 	.word	0x0800301f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d046      	beq.n	8003022 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f98:	e043      	b.n	8003022 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa2:	d140      	bne.n	8003026 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa8:	e03d      	b.n	8003026 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb2:	d121      	bne.n	8002ff8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d837      	bhi.n	800302a <DMA_CheckFifoParam+0xda>
 8002fba:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <DMA_CheckFifoParam+0x70>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08002fd7 	.word	0x08002fd7
 8002fc8:	08002fd1 	.word	0x08002fd1
 8002fcc:	08002fe9 	.word	0x08002fe9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd4:	e030      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d025      	beq.n	800302e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe6:	e022      	b.n	800302e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ff0:	d11f      	bne.n	8003032 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ff6:	e01c      	b.n	8003032 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d903      	bls.n	8003006 <DMA_CheckFifoParam+0xb6>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b03      	cmp	r3, #3
 8003002:	d003      	beq.n	800300c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003004:	e018      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
      break;
 800300a:	e015      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      break;
 800301c:	e00b      	b.n	8003036 <DMA_CheckFifoParam+0xe6>
      break;
 800301e:	bf00      	nop
 8003020:	e00a      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      break;
 8003022:	bf00      	nop
 8003024:	e008      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      break;
 8003026:	bf00      	nop
 8003028:	e006      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      break;
 800302a:	bf00      	nop
 800302c:	e004      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      break;
 800302e:	bf00      	nop
 8003030:	e002      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      break;   
 8003032:	bf00      	nop
 8003034:	e000      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      break;
 8003036:	bf00      	nop
    }
  } 
  
  return status; 
 8003038:	7bfb      	ldrb	r3, [r7, #15]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop

08003048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e165      	b.n	8003330 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003064:	2201      	movs	r2, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4013      	ands	r3, r2
 8003076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	429a      	cmp	r2, r3
 800307e:	f040 8154 	bne.w	800332a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d005      	beq.n	800309a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003096:	2b02      	cmp	r3, #2
 8003098:	d130      	bne.n	80030fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	2203      	movs	r2, #3
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d0:	2201      	movs	r2, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 0201 	and.w	r2, r3, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b03      	cmp	r3, #3
 8003106:	d017      	beq.n	8003138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d123      	bne.n	800318c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	08da      	lsrs	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3208      	adds	r2, #8
 800314c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	220f      	movs	r2, #15
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	08da      	lsrs	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3208      	adds	r2, #8
 8003186:	69b9      	ldr	r1, [r7, #24]
 8003188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0203 	and.w	r2, r3, #3
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80ae 	beq.w	800332a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	4b5d      	ldr	r3, [pc, #372]	; (8003348 <HAL_GPIO_Init+0x300>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	4a5c      	ldr	r2, [pc, #368]	; (8003348 <HAL_GPIO_Init+0x300>)
 80031d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031dc:	6453      	str	r3, [r2, #68]	; 0x44
 80031de:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <HAL_GPIO_Init+0x300>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ea:	4a58      	ldr	r2, [pc, #352]	; (800334c <HAL_GPIO_Init+0x304>)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	3302      	adds	r3, #2
 80031f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	220f      	movs	r2, #15
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4f      	ldr	r2, [pc, #316]	; (8003350 <HAL_GPIO_Init+0x308>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d025      	beq.n	8003262 <HAL_GPIO_Init+0x21a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4e      	ldr	r2, [pc, #312]	; (8003354 <HAL_GPIO_Init+0x30c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01f      	beq.n	800325e <HAL_GPIO_Init+0x216>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4d      	ldr	r2, [pc, #308]	; (8003358 <HAL_GPIO_Init+0x310>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d019      	beq.n	800325a <HAL_GPIO_Init+0x212>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4c      	ldr	r2, [pc, #304]	; (800335c <HAL_GPIO_Init+0x314>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_GPIO_Init+0x20e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4b      	ldr	r2, [pc, #300]	; (8003360 <HAL_GPIO_Init+0x318>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00d      	beq.n	8003252 <HAL_GPIO_Init+0x20a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4a      	ldr	r2, [pc, #296]	; (8003364 <HAL_GPIO_Init+0x31c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d007      	beq.n	800324e <HAL_GPIO_Init+0x206>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a49      	ldr	r2, [pc, #292]	; (8003368 <HAL_GPIO_Init+0x320>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d101      	bne.n	800324a <HAL_GPIO_Init+0x202>
 8003246:	2306      	movs	r3, #6
 8003248:	e00c      	b.n	8003264 <HAL_GPIO_Init+0x21c>
 800324a:	2307      	movs	r3, #7
 800324c:	e00a      	b.n	8003264 <HAL_GPIO_Init+0x21c>
 800324e:	2305      	movs	r3, #5
 8003250:	e008      	b.n	8003264 <HAL_GPIO_Init+0x21c>
 8003252:	2304      	movs	r3, #4
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x21c>
 8003256:	2303      	movs	r3, #3
 8003258:	e004      	b.n	8003264 <HAL_GPIO_Init+0x21c>
 800325a:	2302      	movs	r3, #2
 800325c:	e002      	b.n	8003264 <HAL_GPIO_Init+0x21c>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_GPIO_Init+0x21c>
 8003262:	2300      	movs	r3, #0
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	f002 0203 	and.w	r2, r2, #3
 800326a:	0092      	lsls	r2, r2, #2
 800326c:	4093      	lsls	r3, r2
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003274:	4935      	ldr	r1, [pc, #212]	; (800334c <HAL_GPIO_Init+0x304>)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	3302      	adds	r3, #2
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003282:	4b3a      	ldr	r3, [pc, #232]	; (800336c <HAL_GPIO_Init+0x324>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032a6:	4a31      	ldr	r2, [pc, #196]	; (800336c <HAL_GPIO_Init+0x324>)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ac:	4b2f      	ldr	r3, [pc, #188]	; (800336c <HAL_GPIO_Init+0x324>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032d0:	4a26      	ldr	r2, [pc, #152]	; (800336c <HAL_GPIO_Init+0x324>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032d6:	4b25      	ldr	r3, [pc, #148]	; (800336c <HAL_GPIO_Init+0x324>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032fa:	4a1c      	ldr	r2, [pc, #112]	; (800336c <HAL_GPIO_Init+0x324>)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_GPIO_Init+0x324>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003324:	4a11      	ldr	r2, [pc, #68]	; (800336c <HAL_GPIO_Init+0x324>)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3301      	adds	r3, #1
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b0f      	cmp	r3, #15
 8003334:	f67f ae96 	bls.w	8003064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3724      	adds	r7, #36	; 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	40013800 	.word	0x40013800
 8003350:	40020000 	.word	0x40020000
 8003354:	40020400 	.word	0x40020400
 8003358:	40020800 	.word	0x40020800
 800335c:	40020c00 	.word	0x40020c00
 8003360:	40021000 	.word	0x40021000
 8003364:	40021400 	.word	0x40021400
 8003368:	40021800 	.word	0x40021800
 800336c:	40013c00 	.word	0x40013c00

08003370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	807b      	strh	r3, [r7, #2]
 800337c:	4613      	mov	r3, r2
 800337e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003380:	787b      	ldrb	r3, [r7, #1]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800338c:	e003      	b.n	8003396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800338e:	887b      	ldrh	r3, [r7, #2]
 8003390:	041a      	lsls	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	619a      	str	r2, [r3, #24]
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_PWREx_EnableOverDrive+0x90>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <HAL_PWREx_EnableOverDrive+0x90>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	6413      	str	r3, [r2, #64]	; 0x40
 80033be:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <HAL_PWREx_EnableOverDrive+0x90>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033ca:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <HAL_PWREx_EnableOverDrive+0x94>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033d0:	f7fe fcb0 	bl	8001d34 <HAL_GetTick>
 80033d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033d6:	e009      	b.n	80033ec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033d8:	f7fe fcac 	bl	8001d34 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033e6:	d901      	bls.n	80033ec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e01f      	b.n	800342c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_PWREx_EnableOverDrive+0x98>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f8:	d1ee      	bne.n	80033d8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003400:	f7fe fc98 	bl	8001d34 <HAL_GetTick>
 8003404:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003406:	e009      	b.n	800341c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003408:	f7fe fc94 	bl	8001d34 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003416:	d901      	bls.n	800341c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e007      	b.n	800342c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800341c:	4b07      	ldr	r3, [pc, #28]	; (800343c <HAL_PWREx_EnableOverDrive+0x98>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003428:	d1ee      	bne.n	8003408 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800
 8003438:	420e0040 	.word	0x420e0040
 800343c:	40007000 	.word	0x40007000
 8003440:	420e0044 	.word	0x420e0044

08003444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0cc      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003458:	4b68      	ldr	r3, [pc, #416]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d90c      	bls.n	8003480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b65      	ldr	r3, [pc, #404]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b63      	ldr	r3, [pc, #396]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0b8      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d020      	beq.n	80034ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003498:	4b59      	ldr	r3, [pc, #356]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a58      	ldr	r2, [pc, #352]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b0:	4b53      	ldr	r3, [pc, #332]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a52      	ldr	r2, [pc, #328]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034bc:	4b50      	ldr	r3, [pc, #320]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	494d      	ldr	r1, [pc, #308]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d044      	beq.n	8003564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d119      	bne.n	8003522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e07f      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d003      	beq.n	8003502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003502:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e06f      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e067      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003522:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f023 0203 	bic.w	r2, r3, #3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4934      	ldr	r1, [pc, #208]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	4313      	orrs	r3, r2
 8003532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003534:	f7fe fbfe 	bl	8001d34 <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353a:	e00a      	b.n	8003552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800353c:	f7fe fbfa 	bl	8001d34 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f241 3288 	movw	r2, #5000	; 0x1388
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e04f      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 020c 	and.w	r2, r3, #12
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	429a      	cmp	r2, r3
 8003562:	d1eb      	bne.n	800353c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d20c      	bcs.n	800358c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b22      	ldr	r3, [pc, #136]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b20      	ldr	r3, [pc, #128]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e032      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4916      	ldr	r1, [pc, #88]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	490e      	ldr	r1, [pc, #56]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ca:	f000 fb7f 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 80035ce:	4602      	mov	r2, r0
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	490a      	ldr	r1, [pc, #40]	; (8003604 <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	5ccb      	ldrb	r3, [r1, r3]
 80035de:	fa22 f303 	lsr.w	r3, r2, r3
 80035e2:	4a09      	ldr	r2, [pc, #36]	; (8003608 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x1c8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fb5e 	bl	8001cac <HAL_InitTick>

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40023c00 	.word	0x40023c00
 8003600:	40023800 	.word	0x40023800
 8003604:	0800ba70 	.word	0x0800ba70
 8003608:	20000004 	.word	0x20000004
 800360c:	20000008 	.word	0x20000008

08003610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <HAL_RCC_GetHCLKFreq+0x14>)
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000004 	.word	0x20000004

08003628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800362c:	f7ff fff0 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8003630:	4602      	mov	r2, r0
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	0a9b      	lsrs	r3, r3, #10
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	4903      	ldr	r1, [pc, #12]	; (800364c <HAL_RCC_GetPCLK1Freq+0x24>)
 800363e:	5ccb      	ldrb	r3, [r1, r3]
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003644:	4618      	mov	r0, r3
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40023800 	.word	0x40023800
 800364c:	0800ba80 	.word	0x0800ba80

08003650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003654:	f7ff ffdc 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	0b5b      	lsrs	r3, r3, #13
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4903      	ldr	r1, [pc, #12]	; (8003674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40023800 	.word	0x40023800
 8003674:	0800ba80 	.word	0x0800ba80

08003678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08c      	sub	sp, #48	; 0x30
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d010      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80036b0:	4b6f      	ldr	r3, [pc, #444]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	496c      	ldr	r1, [pc, #432]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80036ce:	2301      	movs	r3, #1
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d010      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80036de:	4b64      	ldr	r3, [pc, #400]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	4960      	ldr	r1, [pc, #384]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80036fc:	2301      	movs	r3, #1
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d017      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800370c:	4b58      	ldr	r3, [pc, #352]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800370e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4955      	ldr	r1, [pc, #340]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372a:	d101      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800372c:	2301      	movs	r3, #1
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003738:	2301      	movs	r3, #1
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d017      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003748:	4b49      	ldr	r3, [pc, #292]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800374a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800374e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	4946      	ldr	r1, [pc, #280]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003766:	d101      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003768:	2301      	movs	r3, #1
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003774:	2301      	movs	r3, #1
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 808a 	beq.w	800389a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	4b39      	ldr	r3, [pc, #228]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	4a38      	ldr	r2, [pc, #224]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003794:	6413      	str	r3, [r2, #64]	; 0x40
 8003796:	4b36      	ldr	r3, [pc, #216]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037a2:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a33      	ldr	r2, [pc, #204]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037ae:	f7fe fac1 	bl	8001d34 <HAL_GetTick>
 80037b2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037b6:	f7fe fabd 	bl	8001d34 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e278      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037c8:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037d4:	4b26      	ldr	r3, [pc, #152]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037dc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d02f      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ec:	6a3a      	ldr	r2, [r7, #32]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d028      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037f2:	4b1f      	ldr	r3, [pc, #124]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037fc:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003808:	4a19      	ldr	r2, [pc, #100]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800380e:	4b18      	ldr	r3, [pc, #96]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d114      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800381a:	f7fe fa8b 	bl	8001d34 <HAL_GetTick>
 800381e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	e00a      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fe fa87 	bl	8001d34 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e240      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ee      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003850:	d114      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003866:	4902      	ldr	r1, [pc, #8]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]
 800386c:	e00c      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	40007000 	.word	0x40007000
 8003878:	42470e40 	.word	0x42470e40
 800387c:	4b4a      	ldr	r3, [pc, #296]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4a49      	ldr	r2, [pc, #292]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003882:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003886:	6093      	str	r3, [r2, #8]
 8003888:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800388a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	4944      	ldr	r1, [pc, #272]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003896:	4313      	orrs	r3, r2
 8003898:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80038ac:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80038ae:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80038bc:	4b3a      	ldr	r3, [pc, #232]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	4937      	ldr	r1, [pc, #220]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038de:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ec:	492e      	ldr	r1, [pc, #184]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d011      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003906:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	4926      	ldr	r1, [pc, #152]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800391e:	d101      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003920:	2301      	movs	r3, #1
 8003922:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003936:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	491a      	ldr	r1, [pc, #104]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394e:	2b00      	cmp	r3, #0
 8003950:	d011      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003958:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003960:	4911      	ldr	r1, [pc, #68]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003970:	d101      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003972:	2301      	movs	r3, #1
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d005      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003984:	f040 80ff 	bne.w	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800398e:	f7fe f9d1 	bl	8001d34 <HAL_GetTick>
 8003992:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003994:	e00e      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003996:	f7fe f9cd 	bl	8001d34 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d907      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e188      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x642>
 80039a8:	40023800 	.word	0x40023800
 80039ac:	424711e0 	.word	0x424711e0
 80039b0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039b4:	4b7e      	ldr	r3, [pc, #504]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1ea      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d028      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d124      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80039e8:	4b71      	ldr	r3, [pc, #452]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ee:	0c1b      	lsrs	r3, r3, #16
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	3301      	adds	r3, #1
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039fa:	4b6d      	ldr	r3, [pc, #436]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a00:	0e1b      	lsrs	r3, r3, #24
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	431a      	orrs	r2, r3
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	041b      	lsls	r3, r3, #16
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	061b      	lsls	r3, r3, #24
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	071b      	lsls	r3, r3, #28
 8003a2a:	4961      	ldr	r1, [pc, #388]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d035      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5c:	d130      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a5e:	4b54      	ldr	r3, [pc, #336]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a70:	4b4f      	ldr	r3, [pc, #316]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a76:	0f1b      	lsrs	r3, r3, #28
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	019b      	lsls	r3, r3, #6
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	041b      	lsls	r3, r3, #16
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	071b      	lsls	r3, r3, #28
 8003aa0:	4943      	ldr	r1, [pc, #268]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003aa8:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aae:	f023 021f 	bic.w	r2, r3, #31
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	493d      	ldr	r1, [pc, #244]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d029      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad4:	d124      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003adc:	0c1b      	lsrs	r3, r3, #16
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ae8:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aee:	0f1b      	lsrs	r3, r3, #28
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	019b      	lsls	r3, r3, #6
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	061b      	lsls	r3, r3, #24
 8003b12:	431a      	orrs	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	071b      	lsls	r3, r3, #28
 8003b18:	4925      	ldr	r1, [pc, #148]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d016      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	019b      	lsls	r3, r3, #6
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	061b      	lsls	r3, r3, #24
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	071b      	lsls	r3, r3, #28
 8003b52:	4917      	ldr	r1, [pc, #92]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b5a:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b60:	f7fe f8e8 	bl	8001d34 <HAL_GetTick>
 8003b64:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b68:	f7fe f8e4 	bl	8001d34 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e09f      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f040 8095 	bne.w	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b94:	f7fe f8ce 	bl	8001d34 <HAL_GetTick>
 8003b98:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b9a:	e00f      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b9c:	f7fe f8ca 	bl	8001d34 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d908      	bls.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e085      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	42470068 	.word	0x42470068
 8003bb8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bbc:	4b41      	ldr	r3, [pc, #260]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bc8:	d0e8      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d02b      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d127      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003bf2:	4b34      	ldr	r3, [pc, #208]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699a      	ldr	r2, [r3, #24]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	019b      	lsls	r3, r3, #6
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	085b      	lsrs	r3, r3, #1
 8003c14:	3b01      	subs	r3, #1
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	061b      	lsls	r3, r3, #24
 8003c20:	4928      	ldr	r1, [pc, #160]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c28:	4b26      	ldr	r3, [pc, #152]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c2e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	3b01      	subs	r3, #1
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	4922      	ldr	r1, [pc, #136]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01d      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c56:	d118      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	0e1b      	lsrs	r3, r3, #24
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	019b      	lsls	r3, r3, #6
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	041b      	lsls	r3, r3, #16
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	061b      	lsls	r3, r3, #24
 8003c82:	4910      	ldr	r1, [pc, #64]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c90:	f7fe f850 	bl	8001d34 <HAL_GetTick>
 8003c94:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c98:	f7fe f84c 	bl	8001d34 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e007      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb6:	d1ef      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3730      	adds	r7, #48	; 0x30
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	42470070 	.word	0x42470070

08003ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd0:	b0ae      	sub	sp, #184	; 0xb8
 8003cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf2:	4bcb      	ldr	r3, [pc, #812]	; (8004020 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b0c      	cmp	r3, #12
 8003cfc:	f200 8206 	bhi.w	800410c <HAL_RCC_GetSysClockFreq+0x440>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	0800410d 	.word	0x0800410d
 8003d10:	0800410d 	.word	0x0800410d
 8003d14:	0800410d 	.word	0x0800410d
 8003d18:	08003d45 	.word	0x08003d45
 8003d1c:	0800410d 	.word	0x0800410d
 8003d20:	0800410d 	.word	0x0800410d
 8003d24:	0800410d 	.word	0x0800410d
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	0800410d 	.word	0x0800410d
 8003d30:	0800410d 	.word	0x0800410d
 8003d34:	0800410d 	.word	0x0800410d
 8003d38:	08003f3d 	.word	0x08003f3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d3c:	4bb9      	ldr	r3, [pc, #740]	; (8004024 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003d42:	e1e7      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d44:	4bb8      	ldr	r3, [pc, #736]	; (8004028 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d4a:	e1e3      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d4c:	4bb4      	ldr	r3, [pc, #720]	; (8004020 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d58:	4bb1      	ldr	r3, [pc, #708]	; (8004020 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d071      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d64:	4bae      	ldr	r3, [pc, #696]	; (8004020 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	099b      	lsrs	r3, r3, #6
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d70:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d80:	2300      	movs	r3, #0
 8003d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	462b      	mov	r3, r5
 8003d8e:	f04f 0000 	mov.w	r0, #0
 8003d92:	f04f 0100 	mov.w	r1, #0
 8003d96:	0159      	lsls	r1, r3, #5
 8003d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d9c:	0150      	lsls	r0, r2, #5
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4621      	mov	r1, r4
 8003da4:	1a51      	subs	r1, r2, r1
 8003da6:	6439      	str	r1, [r7, #64]	; 0x40
 8003da8:	4629      	mov	r1, r5
 8003daa:	eb63 0301 	sbc.w	r3, r3, r1
 8003dae:	647b      	str	r3, [r7, #68]	; 0x44
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003dbc:	4649      	mov	r1, r9
 8003dbe:	018b      	lsls	r3, r1, #6
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dc6:	4641      	mov	r1, r8
 8003dc8:	018a      	lsls	r2, r1, #6
 8003dca:	4641      	mov	r1, r8
 8003dcc:	1a51      	subs	r1, r2, r1
 8003dce:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003de4:	4649      	mov	r1, r9
 8003de6:	00cb      	lsls	r3, r1, #3
 8003de8:	4641      	mov	r1, r8
 8003dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dee:	4641      	mov	r1, r8
 8003df0:	00ca      	lsls	r2, r1, #3
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	4603      	mov	r3, r0
 8003df8:	4622      	mov	r2, r4
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dfe:	462b      	mov	r3, r5
 8003e00:	460a      	mov	r2, r1
 8003e02:	eb42 0303 	adc.w	r3, r2, r3
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e14:	4629      	mov	r1, r5
 8003e16:	024b      	lsls	r3, r1, #9
 8003e18:	4621      	mov	r1, r4
 8003e1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e1e:	4621      	mov	r1, r4
 8003e20:	024a      	lsls	r2, r1, #9
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003e38:	f7fc fec6 	bl	8000bc8 <__aeabi_uldivmod>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4613      	mov	r3, r2
 8003e42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e46:	e067      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e48:	4b75      	ldr	r3, [pc, #468]	; (8004020 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	099b      	lsrs	r3, r3, #6
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e54:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e62:	2300      	movs	r3, #0
 8003e64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	462b      	mov	r3, r5
 8003e6e:	f04f 0000 	mov.w	r0, #0
 8003e72:	f04f 0100 	mov.w	r1, #0
 8003e76:	0159      	lsls	r1, r3, #5
 8003e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e7c:	0150      	lsls	r0, r2, #5
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4621      	mov	r1, r4
 8003e84:	1a51      	subs	r1, r2, r1
 8003e86:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e88:	4629      	mov	r1, r5
 8003e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	018b      	lsls	r3, r1, #6
 8003ea0:	4641      	mov	r1, r8
 8003ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ea6:	4641      	mov	r1, r8
 8003ea8:	018a      	lsls	r2, r1, #6
 8003eaa:	4641      	mov	r1, r8
 8003eac:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ec2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ec6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eca:	4692      	mov	sl, r2
 8003ecc:	469b      	mov	fp, r3
 8003ece:	4623      	mov	r3, r4
 8003ed0:	eb1a 0303 	adds.w	r3, sl, r3
 8003ed4:	623b      	str	r3, [r7, #32]
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003eea:	4629      	mov	r1, r5
 8003eec:	028b      	lsls	r3, r1, #10
 8003eee:	4621      	mov	r1, r4
 8003ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	028a      	lsls	r2, r1, #10
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f00:	2200      	movs	r2, #0
 8003f02:	673b      	str	r3, [r7, #112]	; 0x70
 8003f04:	677a      	str	r2, [r7, #116]	; 0x74
 8003f06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f0a:	f7fc fe5d 	bl	8000bc8 <__aeabi_uldivmod>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4613      	mov	r3, r2
 8003f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f18:	4b41      	ldr	r3, [pc, #260]	; (8004020 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	3301      	adds	r3, #1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f3a:	e0eb      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f3c:	4b38      	ldr	r3, [pc, #224]	; (8004020 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f48:	4b35      	ldr	r3, [pc, #212]	; (8004020 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d06b      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f54:	4b32      	ldr	r3, [pc, #200]	; (8004020 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f66:	663b      	str	r3, [r7, #96]	; 0x60
 8003f68:	2300      	movs	r3, #0
 8003f6a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003f70:	4622      	mov	r2, r4
 8003f72:	462b      	mov	r3, r5
 8003f74:	f04f 0000 	mov.w	r0, #0
 8003f78:	f04f 0100 	mov.w	r1, #0
 8003f7c:	0159      	lsls	r1, r3, #5
 8003f7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f82:	0150      	lsls	r0, r2, #5
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4621      	mov	r1, r4
 8003f8a:	1a51      	subs	r1, r2, r1
 8003f8c:	61b9      	str	r1, [r7, #24]
 8003f8e:	4629      	mov	r1, r5
 8003f90:	eb63 0301 	sbc.w	r3, r3, r1
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fa2:	4659      	mov	r1, fp
 8003fa4:	018b      	lsls	r3, r1, #6
 8003fa6:	4651      	mov	r1, sl
 8003fa8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fac:	4651      	mov	r1, sl
 8003fae:	018a      	lsls	r2, r1, #6
 8003fb0:	4651      	mov	r1, sl
 8003fb2:	ebb2 0801 	subs.w	r8, r2, r1
 8003fb6:	4659      	mov	r1, fp
 8003fb8:	eb63 0901 	sbc.w	r9, r3, r1
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fcc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fd0:	4690      	mov	r8, r2
 8003fd2:	4699      	mov	r9, r3
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	eb18 0303 	adds.w	r3, r8, r3
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	462b      	mov	r3, r5
 8003fde:	eb49 0303 	adc.w	r3, r9, r3
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	024b      	lsls	r3, r1, #9
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	024a      	lsls	r2, r1, #9
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004006:	2200      	movs	r2, #0
 8004008:	65bb      	str	r3, [r7, #88]	; 0x58
 800400a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800400c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004010:	f7fc fdda 	bl	8000bc8 <__aeabi_uldivmod>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4613      	mov	r3, r2
 800401a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800401e:	e065      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x420>
 8004020:	40023800 	.word	0x40023800
 8004024:	00f42400 	.word	0x00f42400
 8004028:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800402c:	4b3d      	ldr	r3, [pc, #244]	; (8004124 <HAL_RCC_GetSysClockFreq+0x458>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	2200      	movs	r2, #0
 8004034:	4618      	mov	r0, r3
 8004036:	4611      	mov	r1, r2
 8004038:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800403c:	653b      	str	r3, [r7, #80]	; 0x50
 800403e:	2300      	movs	r3, #0
 8004040:	657b      	str	r3, [r7, #84]	; 0x54
 8004042:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004046:	4642      	mov	r2, r8
 8004048:	464b      	mov	r3, r9
 800404a:	f04f 0000 	mov.w	r0, #0
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	0159      	lsls	r1, r3, #5
 8004054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004058:	0150      	lsls	r0, r2, #5
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4641      	mov	r1, r8
 8004060:	1a51      	subs	r1, r2, r1
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	4649      	mov	r1, r9
 8004066:	eb63 0301 	sbc.w	r3, r3, r1
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004078:	4659      	mov	r1, fp
 800407a:	018b      	lsls	r3, r1, #6
 800407c:	4651      	mov	r1, sl
 800407e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004082:	4651      	mov	r1, sl
 8004084:	018a      	lsls	r2, r1, #6
 8004086:	4651      	mov	r1, sl
 8004088:	1a54      	subs	r4, r2, r1
 800408a:	4659      	mov	r1, fp
 800408c:	eb63 0501 	sbc.w	r5, r3, r1
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	00eb      	lsls	r3, r5, #3
 800409a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800409e:	00e2      	lsls	r2, r4, #3
 80040a0:	4614      	mov	r4, r2
 80040a2:	461d      	mov	r5, r3
 80040a4:	4643      	mov	r3, r8
 80040a6:	18e3      	adds	r3, r4, r3
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	464b      	mov	r3, r9
 80040ac:	eb45 0303 	adc.w	r3, r5, r3
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040be:	4629      	mov	r1, r5
 80040c0:	028b      	lsls	r3, r1, #10
 80040c2:	4621      	mov	r1, r4
 80040c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040c8:	4621      	mov	r1, r4
 80040ca:	028a      	lsls	r2, r1, #10
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040d4:	2200      	movs	r2, #0
 80040d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80040da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040de:	f7fc fd73 	bl	8000bc8 <__aeabi_uldivmod>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4613      	mov	r3, r2
 80040e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <HAL_RCC_GetSysClockFreq+0x458>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	0f1b      	lsrs	r3, r3, #28
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80040fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004102:	fbb2 f3f3 	udiv	r3, r2, r3
 8004106:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800410a:	e003      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_RCC_GetSysClockFreq+0x45c>)
 800410e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004112:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004114:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004118:	4618      	mov	r0, r3
 800411a:	37b8      	adds	r7, #184	; 0xb8
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	00f42400 	.word	0x00f42400

0800412c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e28d      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8083 	beq.w	8004252 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800414c:	4b94      	ldr	r3, [pc, #592]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 030c 	and.w	r3, r3, #12
 8004154:	2b04      	cmp	r3, #4
 8004156:	d019      	beq.n	800418c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004158:	4b91      	ldr	r3, [pc, #580]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004160:	2b08      	cmp	r3, #8
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004164:	4b8e      	ldr	r3, [pc, #568]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004170:	d00c      	beq.n	800418c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004172:	4b8b      	ldr	r3, [pc, #556]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d112      	bne.n	80041a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417e:	4b88      	ldr	r3, [pc, #544]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418a:	d10b      	bne.n	80041a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	4b84      	ldr	r3, [pc, #528]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d05b      	beq.n	8004250 <HAL_RCC_OscConfig+0x124>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d157      	bne.n	8004250 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e25a      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d106      	bne.n	80041bc <HAL_RCC_OscConfig+0x90>
 80041ae:	4b7c      	ldr	r3, [pc, #496]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a7b      	ldr	r2, [pc, #492]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e01d      	b.n	80041f8 <HAL_RCC_OscConfig+0xcc>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0xb4>
 80041c6:	4b76      	ldr	r3, [pc, #472]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a75      	ldr	r2, [pc, #468]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80041cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b73      	ldr	r3, [pc, #460]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a72      	ldr	r2, [pc, #456]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e00b      	b.n	80041f8 <HAL_RCC_OscConfig+0xcc>
 80041e0:	4b6f      	ldr	r3, [pc, #444]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a6e      	ldr	r2, [pc, #440]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b6c      	ldr	r3, [pc, #432]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a6b      	ldr	r2, [pc, #428]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fd fd98 	bl	8001d34 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004208:	f7fd fd94 	bl	8001d34 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	; 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e21f      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421a:	4b61      	ldr	r3, [pc, #388]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0xdc>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd fd84 	bl	8001d34 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004230:	f7fd fd80 	bl	8001d34 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e20b      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004242:	4b57      	ldr	r3, [pc, #348]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x104>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d06f      	beq.n	800433e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800425e:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b00      	cmp	r3, #0
 8004268:	d017      	beq.n	800429a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800426a:	4b4d      	ldr	r3, [pc, #308]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004272:	2b08      	cmp	r3, #8
 8004274:	d105      	bne.n	8004282 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004276:	4b4a      	ldr	r3, [pc, #296]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00b      	beq.n	800429a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004282:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800428a:	2b0c      	cmp	r3, #12
 800428c:	d11c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428e:	4b44      	ldr	r3, [pc, #272]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d116      	bne.n	80042c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429a:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_RCC_OscConfig+0x186>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d001      	beq.n	80042b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e1d3      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b2:	4b3b      	ldr	r3, [pc, #236]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4937      	ldr	r1, [pc, #220]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c6:	e03a      	b.n	800433e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d020      	beq.n	8004312 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d0:	4b34      	ldr	r3, [pc, #208]	; (80043a4 <HAL_RCC_OscConfig+0x278>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d6:	f7fd fd2d 	bl	8001d34 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042de:	f7fd fd29 	bl	8001d34 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e1b4      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f0:	4b2b      	ldr	r3, [pc, #172]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0f0      	beq.n	80042de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fc:	4b28      	ldr	r3, [pc, #160]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4925      	ldr	r1, [pc, #148]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 800430c:	4313      	orrs	r3, r2
 800430e:	600b      	str	r3, [r1, #0]
 8004310:	e015      	b.n	800433e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004312:	4b24      	ldr	r3, [pc, #144]	; (80043a4 <HAL_RCC_OscConfig+0x278>)
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fd fd0c 	bl	8001d34 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004320:	f7fd fd08 	bl	8001d34 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e193      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004332:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d036      	beq.n	80043b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d016      	beq.n	8004380 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <HAL_RCC_OscConfig+0x27c>)
 8004354:	2201      	movs	r2, #1
 8004356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fd fcec 	bl	8001d34 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004360:	f7fd fce8 	bl	8001d34 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e173      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCC_OscConfig+0x274>)
 8004374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f0      	beq.n	8004360 <HAL_RCC_OscConfig+0x234>
 800437e:	e01b      	b.n	80043b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_RCC_OscConfig+0x27c>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004386:	f7fd fcd5 	bl	8001d34 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800438c:	e00e      	b.n	80043ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800438e:	f7fd fcd1 	bl	8001d34 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d907      	bls.n	80043ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e15c      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
 80043a0:	40023800 	.word	0x40023800
 80043a4:	42470000 	.word	0x42470000
 80043a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ac:	4b8a      	ldr	r3, [pc, #552]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 80043ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1ea      	bne.n	800438e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8097 	beq.w	80044f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c6:	2300      	movs	r3, #0
 80043c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ca:	4b83      	ldr	r3, [pc, #524]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10f      	bne.n	80043f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	4b7f      	ldr	r3, [pc, #508]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	4a7e      	ldr	r2, [pc, #504]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e4:	6413      	str	r3, [r2, #64]	; 0x40
 80043e6:	4b7c      	ldr	r3, [pc, #496]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ee:	60bb      	str	r3, [r7, #8]
 80043f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f2:	2301      	movs	r3, #1
 80043f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f6:	4b79      	ldr	r3, [pc, #484]	; (80045dc <HAL_RCC_OscConfig+0x4b0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d118      	bne.n	8004434 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004402:	4b76      	ldr	r3, [pc, #472]	; (80045dc <HAL_RCC_OscConfig+0x4b0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a75      	ldr	r2, [pc, #468]	; (80045dc <HAL_RCC_OscConfig+0x4b0>)
 8004408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440e:	f7fd fc91 	bl	8001d34 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004416:	f7fd fc8d 	bl	8001d34 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e118      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004428:	4b6c      	ldr	r3, [pc, #432]	; (80045dc <HAL_RCC_OscConfig+0x4b0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d106      	bne.n	800444a <HAL_RCC_OscConfig+0x31e>
 800443c:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004440:	4a65      	ldr	r2, [pc, #404]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6713      	str	r3, [r2, #112]	; 0x70
 8004448:	e01c      	b.n	8004484 <HAL_RCC_OscConfig+0x358>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b05      	cmp	r3, #5
 8004450:	d10c      	bne.n	800446c <HAL_RCC_OscConfig+0x340>
 8004452:	4b61      	ldr	r3, [pc, #388]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	4a60      	ldr	r2, [pc, #384]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 8004458:	f043 0304 	orr.w	r3, r3, #4
 800445c:	6713      	str	r3, [r2, #112]	; 0x70
 800445e:	4b5e      	ldr	r3, [pc, #376]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	4a5d      	ldr	r2, [pc, #372]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6713      	str	r3, [r2, #112]	; 0x70
 800446a:	e00b      	b.n	8004484 <HAL_RCC_OscConfig+0x358>
 800446c:	4b5a      	ldr	r3, [pc, #360]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	4a59      	ldr	r2, [pc, #356]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	6713      	str	r3, [r2, #112]	; 0x70
 8004478:	4b57      	ldr	r3, [pc, #348]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	4a56      	ldr	r2, [pc, #344]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 800447e:	f023 0304 	bic.w	r3, r3, #4
 8004482:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d015      	beq.n	80044b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448c:	f7fd fc52 	bl	8001d34 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004492:	e00a      	b.n	80044aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004494:	f7fd fc4e 	bl	8001d34 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e0d7      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044aa:	4b4b      	ldr	r3, [pc, #300]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0ee      	beq.n	8004494 <HAL_RCC_OscConfig+0x368>
 80044b6:	e014      	b.n	80044e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fd fc3c 	bl	8001d34 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c0:	f7fd fc38 	bl	8001d34 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e0c1      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d6:	4b40      	ldr	r3, [pc, #256]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1ee      	bne.n	80044c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d105      	bne.n	80044f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e8:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	4a3a      	ldr	r2, [pc, #232]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 80044ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80ad 	beq.w	8004658 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044fe:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	2b08      	cmp	r3, #8
 8004508:	d060      	beq.n	80045cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d145      	bne.n	800459e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004512:	4b33      	ldr	r3, [pc, #204]	; (80045e0 <HAL_RCC_OscConfig+0x4b4>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fd fc0c 	bl	8001d34 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004520:	f7fd fc08 	bl	8001d34 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e093      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69da      	ldr	r2, [r3, #28]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	019b      	lsls	r3, r3, #6
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	3b01      	subs	r3, #1
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	061b      	lsls	r3, r3, #24
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	071b      	lsls	r3, r3, #28
 800456a:	491b      	ldr	r1, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 800456c:	4313      	orrs	r3, r2
 800456e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004570:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <HAL_RCC_OscConfig+0x4b4>)
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004576:	f7fd fbdd 	bl	8001d34 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800457e:	f7fd fbd9 	bl	8001d34 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e064      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004590:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x452>
 800459c:	e05c      	b.n	8004658 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459e:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <HAL_RCC_OscConfig+0x4b4>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fd fbc6 	bl	8001d34 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ac:	f7fd fbc2 	bl	8001d34 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e04d      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045be:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_RCC_OscConfig+0x4ac>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x480>
 80045ca:	e045      	b.n	8004658 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d107      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e040      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40007000 	.word	0x40007000
 80045e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045e4:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <HAL_RCC_OscConfig+0x538>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d030      	beq.n	8004654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d129      	bne.n	8004654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d122      	bne.n	8004654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004614:	4013      	ands	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800461a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800461c:	4293      	cmp	r3, r2
 800461e:	d119      	bne.n	8004654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	3b01      	subs	r3, #1
 800462e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d10f      	bne.n	8004654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d107      	bne.n	8004654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d001      	beq.n	8004658 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40023800 	.word	0x40023800

08004668 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e022      	b.n	80046c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d105      	bne.n	8004692 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7fd f905 	bl	800189c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2203      	movs	r2, #3
 8004696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f814 	bl	80046c8 <HAL_SD_InitCard>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e00a      	b.n	80046c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80046c8:	b5b0      	push	{r4, r5, r7, lr}
 80046ca:	b08e      	sub	sp, #56	; 0x38
 80046cc:	af04      	add	r7, sp, #16
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80046e4:	2376      	movs	r3, #118	; 0x76
 80046e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681d      	ldr	r5, [r3, #0]
 80046ec:	466c      	mov	r4, sp
 80046ee:	f107 0314 	add.w	r3, r7, #20
 80046f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046fa:	f107 0308 	add.w	r3, r7, #8
 80046fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004700:	4628      	mov	r0, r5
 8004702:	f001 f9fb 	bl	8005afc <SDIO_Init>
 8004706:	4603      	mov	r3, r0
 8004708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800470c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e04f      	b.n	80047b8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004718:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <HAL_SD_InitCard+0xf8>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f001 fa33 	bl	8005b8e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004728:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <HAL_SD_InitCard+0xf8>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800472e:	2002      	movs	r0, #2
 8004730:	f7fd fb0c 	bl	8001d4c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fe69 	bl	800540c <SD_PowerON>
 800473a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e02e      	b.n	80047b8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fd88 	bl	8005270 <SD_InitCard>
 8004760:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00b      	beq.n	8004780 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e01b      	b.n	80047b8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004788:	4618      	mov	r0, r3
 800478a:	f001 fa92 	bl	8005cb2 <SDMMC_CmdBlockLength>
 800478e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00f      	beq.n	80047b6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <HAL_SD_InitCard+0xfc>)
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3728      	adds	r7, #40	; 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bdb0      	pop	{r4, r5, r7, pc}
 80047c0:	422580a0 	.word	0x422580a0
 80047c4:	004005ff 	.word	0x004005ff

080047c8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b092      	sub	sp, #72	; 0x48
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80047d6:	f7fd faad 	bl	8001d34 <HAL_GetTick>
 80047da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d107      	bne.n	80047fa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e1bd      	b.n	8004b76 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	f040 81b0 	bne.w	8004b68 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800480e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	441a      	add	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004818:	429a      	cmp	r2, r3
 800481a:	d907      	bls.n	800482c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e1a4      	b.n	8004b76 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2203      	movs	r2, #3
 8004830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2200      	movs	r2, #0
 800483a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004840:	2b01      	cmp	r3, #1
 8004842:	d002      	beq.n	800484a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	025b      	lsls	r3, r3, #9
 8004848:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800484a:	f04f 33ff 	mov.w	r3, #4294967295
 800484e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	025b      	lsls	r3, r3, #9
 8004854:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004856:	2390      	movs	r3, #144	; 0x90
 8004858:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800485a:	2302      	movs	r3, #2
 800485c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004862:	2301      	movs	r3, #1
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f107 0214 	add.w	r2, r7, #20
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f001 f9f2 	bl	8005c5a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d90a      	bls.n	8004892 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2202      	movs	r2, #2
 8004880:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004888:	4618      	mov	r0, r3
 800488a:	f001 fa56 	bl	8005d3a <SDMMC_CmdReadMultiBlock>
 800488e:	6478      	str	r0, [r7, #68]	; 0x44
 8004890:	e009      	b.n	80048a6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800489e:	4618      	mov	r0, r3
 80048a0:	f001 fa29 	bl	8005cf6 <SDMMC_CmdReadSingleBlock>
 80048a4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80048a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d012      	beq.n	80048d2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a7a      	ldr	r2, [pc, #488]	; (8004a9c <HAL_SD_ReadBlocks+0x2d4>)
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ba:	431a      	orrs	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e151      	b.n	8004b76 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80048d6:	e061      	b.n	800499c <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d03c      	beq.n	8004960 <HAL_SD_ReadBlocks+0x198>
 80048e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d039      	beq.n	8004960 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80048ec:	2300      	movs	r3, #0
 80048ee:	643b      	str	r3, [r7, #64]	; 0x40
 80048f0:	e033      	b.n	800495a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 f92b 	bl	8005b52 <SDIO_ReadFIFO>
 80048fc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80048fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004900:	b2da      	uxtb	r2, r3
 8004902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004904:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004908:	3301      	adds	r3, #1
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800490c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490e:	3b01      	subs	r3, #1
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	0a1b      	lsrs	r3, r3, #8
 8004916:	b2da      	uxtb	r2, r3
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800491c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491e:	3301      	adds	r3, #1
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004924:	3b01      	subs	r3, #1
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	0c1b      	lsrs	r3, r3, #16
 800492c:	b2da      	uxtb	r2, r3
 800492e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004930:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	3301      	adds	r3, #1
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493a:	3b01      	subs	r3, #1
 800493c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	0e1b      	lsrs	r3, r3, #24
 8004942:	b2da      	uxtb	r2, r3
 8004944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004946:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494a:	3301      	adds	r3, #1
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800494e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004950:	3b01      	subs	r3, #1
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004956:	3301      	adds	r3, #1
 8004958:	643b      	str	r3, [r7, #64]	; 0x40
 800495a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800495c:	2b07      	cmp	r3, #7
 800495e:	d9c8      	bls.n	80048f2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004960:	f7fd f9e8 	bl	8001d34 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800496c:	429a      	cmp	r2, r3
 800496e:	d902      	bls.n	8004976 <HAL_SD_ReadBlocks+0x1ae>
 8004970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004972:	2b00      	cmp	r3, #0
 8004974:	d112      	bne.n	800499c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a48      	ldr	r2, [pc, #288]	; (8004a9c <HAL_SD_ReadBlocks+0x2d4>)
 800497c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0ec      	b.n	8004b76 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d096      	beq.n	80048d8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d022      	beq.n	80049fe <HAL_SD_ReadBlocks+0x236>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d91f      	bls.n	80049fe <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d01b      	beq.n	80049fe <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 fa1c 	bl	8005e08 <SDMMC_CmdStopTransfer>
 80049d0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80049d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d012      	beq.n	80049fe <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <HAL_SD_ReadBlocks+0x2d4>)
 80049de:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e6:	431a      	orrs	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e0bb      	b.n	8004b76 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d012      	beq.n	8004a32 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a22      	ldr	r2, [pc, #136]	; (8004a9c <HAL_SD_ReadBlocks+0x2d4>)
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	f043 0208 	orr.w	r2, r3, #8
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e0a1      	b.n	8004b76 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d012      	beq.n	8004a66 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <HAL_SD_ReadBlocks+0x2d4>)
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	f043 0202 	orr.w	r2, r3, #2
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e087      	b.n	8004b76 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d064      	beq.n	8004b3e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a08      	ldr	r2, [pc, #32]	; (8004a9c <HAL_SD_ReadBlocks+0x2d4>)
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e06d      	b.n	8004b76 <HAL_SD_ReadBlocks+0x3ae>
 8004a9a:	bf00      	nop
 8004a9c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 f854 	bl	8005b52 <SDIO_ReadFIFO>
 8004aaa:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004abc:	3b01      	subs	r3, #1
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004acc:	3301      	adds	r3, #1
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	0c1b      	lsrs	r3, r3, #16
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	0e1b      	lsrs	r3, r3, #24
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af8:	3301      	adds	r3, #1
 8004afa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afe:	3b01      	subs	r3, #1
 8004b00:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004b02:	f7fd f917 	bl	8001d34 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d902      	bls.n	8004b18 <HAL_SD_ReadBlocks+0x350>
 8004b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d112      	bne.n	8004b3e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a18      	ldr	r2, [pc, #96]	; (8004b80 <HAL_SD_ReadBlocks+0x3b8>)
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e01b      	b.n	8004b76 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_SD_ReadBlocks+0x38a>
 8004b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1a6      	bne.n	8004aa0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e006      	b.n	8004b76 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
  }
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3748      	adds	r7, #72	; 0x48
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	004005ff 	.word	0x004005ff

08004b84 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b092      	sub	sp, #72	; 0x48
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004b92:	f7fd f8cf 	bl	8001d34 <HAL_GetTick>
 8004b96:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d107      	bne.n	8004bb6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e165      	b.n	8004e82 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	f040 8158 	bne.w	8004e74 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	441a      	add	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d907      	bls.n	8004be8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e14c      	b.n	8004e82 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2203      	movs	r2, #3
 8004bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d002      	beq.n	8004c06 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	025b      	lsls	r3, r3, #9
 8004c04:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c06:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	025b      	lsls	r3, r3, #9
 8004c10:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004c12:	2390      	movs	r3, #144	; 0x90
 8004c14:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004c16:	2300      	movs	r3, #0
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f107 0218 	add.w	r2, r7, #24
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 f814 	bl	8005c5a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d90a      	bls.n	8004c4e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c44:	4618      	mov	r0, r3
 8004c46:	f001 f8bc 	bl	8005dc2 <SDMMC_CmdWriteMultiBlock>
 8004c4a:	6478      	str	r0, [r7, #68]	; 0x44
 8004c4c:	e009      	b.n	8004c62 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2210      	movs	r2, #16
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f001 f88f 	bl	8005d7e <SDMMC_CmdWriteSingleBlock>
 8004c60:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d012      	beq.n	8004c8e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a87      	ldr	r2, [pc, #540]	; (8004e8c <HAL_SD_WriteBlocks+0x308>)
 8004c6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c76:	431a      	orrs	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0f9      	b.n	8004e82 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004c92:	e065      	b.n	8004d60 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d040      	beq.n	8004d24 <HAL_SD_WriteBlocks+0x1a0>
 8004ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d03d      	beq.n	8004d24 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	643b      	str	r3, [r7, #64]	; 0x40
 8004cac:	e037      	b.n	8004d1e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8004cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	021a      	lsls	r2, r3, #8
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cce:	3301      	adds	r3, #1
 8004cd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	041a      	lsls	r2, r3, #16
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cec:	3b01      	subs	r3, #1
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	061a      	lsls	r2, r3, #24
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfe:	3301      	adds	r3, #1
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d04:	3b01      	subs	r3, #1
 8004d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f107 0214 	add.w	r2, r7, #20
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 ff2a 	bl	8005b6c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d20:	2b07      	cmp	r3, #7
 8004d22:	d9c4      	bls.n	8004cae <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004d24:	f7fd f806 	bl	8001d34 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d902      	bls.n	8004d3a <HAL_SD_WriteBlocks+0x1b6>
 8004d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d112      	bne.n	8004d60 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a53      	ldr	r2, [pc, #332]	; (8004e8c <HAL_SD_WriteBlocks+0x308>)
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e090      	b.n	8004e82 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d66:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d092      	beq.n	8004c94 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d022      	beq.n	8004dc2 <HAL_SD_WriteBlocks+0x23e>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d91f      	bls.n	8004dc2 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d01b      	beq.n	8004dc2 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f001 f83a 	bl	8005e08 <SDMMC_CmdStopTransfer>
 8004d94:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d012      	beq.n	8004dc2 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a3a      	ldr	r2, [pc, #232]	; (8004e8c <HAL_SD_WriteBlocks+0x308>)
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004daa:	431a      	orrs	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e05f      	b.n	8004e82 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d012      	beq.n	8004df6 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a2d      	ldr	r2, [pc, #180]	; (8004e8c <HAL_SD_WriteBlocks+0x308>)
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	f043 0208 	orr.w	r2, r3, #8
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e045      	b.n	8004e82 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d012      	beq.n	8004e2a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a20      	ldr	r2, [pc, #128]	; (8004e8c <HAL_SD_WriteBlocks+0x308>)
 8004e0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	f043 0202 	orr.w	r2, r3, #2
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e02b      	b.n	8004e82 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d012      	beq.n	8004e5e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a13      	ldr	r2, [pc, #76]	; (8004e8c <HAL_SD_WriteBlocks+0x308>)
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	f043 0210 	orr.w	r2, r3, #16
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e011      	b.n	8004e82 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e006      	b.n	8004e82 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
  }
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3748      	adds	r7, #72	; 0x48
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	004005ff 	.word	0x004005ff

08004e90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e9e:	0f9b      	lsrs	r3, r3, #30
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eaa:	0e9b      	lsrs	r3, r3, #26
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ebc:	0e1b      	lsrs	r3, r3, #24
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ece:	0c1b      	lsrs	r3, r3, #16
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef0:	0d1b      	lsrs	r3, r3, #20
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f0e:	0bdb      	lsrs	r3, r3, #15
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f20:	0b9b      	lsrs	r3, r3, #14
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f32:	0b5b      	lsrs	r3, r3, #13
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f44:	0b1b      	lsrs	r3, r3, #12
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2200      	movs	r2, #0
 8004f56:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d163      	bne.n	8005028 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f64:	009a      	lsls	r2, r3, #2
 8004f66:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004f70:	0f92      	lsrs	r2, r2, #30
 8004f72:	431a      	orrs	r2, r3
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7c:	0edb      	lsrs	r3, r3, #27
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8e:	0e1b      	lsrs	r3, r3, #24
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa0:	0d5b      	lsrs	r3, r3, #21
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb2:	0c9b      	lsrs	r3, r3, #18
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc4:	0bdb      	lsrs	r3, r3, #15
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	7e1b      	ldrb	r3, [r3, #24]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	3302      	adds	r3, #2
 8004fe8:	2201      	movs	r2, #1
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004ff2:	fb03 f202 	mul.w	r2, r3, r2
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	7a1b      	ldrb	r3, [r3, #8]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	2201      	movs	r2, #1
 8005006:	409a      	lsls	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005014:	0a52      	lsrs	r2, r2, #9
 8005016:	fb03 f202 	mul.w	r2, r3, r2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005024:	661a      	str	r2, [r3, #96]	; 0x60
 8005026:	e031      	b.n	800508c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	2b01      	cmp	r3, #1
 800502e:	d11d      	bne.n	800506c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005034:	041b      	lsls	r3, r3, #16
 8005036:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503e:	0c1b      	lsrs	r3, r3, #16
 8005040:	431a      	orrs	r2, r3
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	3301      	adds	r3, #1
 800504c:	029a      	lsls	r2, r3, #10
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005060:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	661a      	str	r2, [r3, #96]	; 0x60
 800506a:	e00f      	b.n	800508c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a58      	ldr	r2, [pc, #352]	; (80051d4 <HAL_SD_GetCardCSD+0x344>)
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e09d      	b.n	80051c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005090:	0b9b      	lsrs	r3, r3, #14
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	b2da      	uxtb	r2, r3
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a2:	09db      	lsrs	r3, r3, #7
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	0fdb      	lsrs	r3, r3, #31
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	0f5b      	lsrs	r3, r3, #29
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e2:	0e9b      	lsrs	r3, r3, #26
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	0d9b      	lsrs	r3, r3, #22
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	0d5b      	lsrs	r3, r3, #21
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	b2da      	uxtb	r2, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	0c1b      	lsrs	r3, r3, #16
 8005124:	b2db      	uxtb	r3, r3
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	b2da      	uxtb	r2, r3
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	0bdb      	lsrs	r3, r3, #15
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	b2da      	uxtb	r2, r3
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	0b9b      	lsrs	r3, r3, #14
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	b2da      	uxtb	r2, r3
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515e:	0b5b      	lsrs	r3, r3, #13
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	b2da      	uxtb	r2, r3
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005172:	0b1b      	lsrs	r3, r3, #12
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	b2da      	uxtb	r2, r3
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	0a9b      	lsrs	r3, r3, #10
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	b2da      	uxtb	r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	004005ff 	.word	0x004005ff

080051d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800523c:	f107 030c 	add.w	r3, r7, #12
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f970 	bl	8005528 <SD_SendStatus>
 8005248:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	0a5b      	lsrs	r3, r3, #9
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005266:	693b      	ldr	r3, [r7, #16]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005270:	b5b0      	push	{r4, r5, r7, lr}
 8005272:	b094      	sub	sp, #80	; 0x50
 8005274:	af04      	add	r7, sp, #16
 8005276:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005278:	2301      	movs	r3, #1
 800527a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fc92 	bl	8005baa <SDIO_GetPowerState>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800528c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005290:	e0b8      	b.n	8005404 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005296:	2b03      	cmp	r3, #3
 8005298:	d02f      	beq.n	80052fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fe79 	bl	8005f96 <SDMMC_CmdSendCID>
 80052a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80052a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80052ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ae:	e0a9      	b.n	8005404 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2100      	movs	r1, #0
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fcbc 	bl	8005c34 <SDIO_GetResponse>
 80052bc:	4602      	mov	r2, r0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2104      	movs	r1, #4
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fcb3 	bl	8005c34 <SDIO_GetResponse>
 80052ce:	4602      	mov	r2, r0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2108      	movs	r1, #8
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fcaa 	bl	8005c34 <SDIO_GetResponse>
 80052e0:	4602      	mov	r2, r0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	210c      	movs	r1, #12
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fca1 	bl	8005c34 <SDIO_GetResponse>
 80052f2:	4602      	mov	r2, r0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d00d      	beq.n	800531e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f107 020e 	add.w	r2, r7, #14
 800530a:	4611      	mov	r1, r2
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fe7f 	bl	8006010 <SDMMC_CmdSetRelAdd>
 8005312:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <SD_InitCard+0xae>
    {
      return errorstate;
 800531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531c:	e072      	b.n	8005404 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	2b03      	cmp	r3, #3
 8005324:	d036      	beq.n	8005394 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005326:	89fb      	ldrh	r3, [r7, #14]
 8005328:	461a      	mov	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 fe49 	bl	8005fd2 <SDMMC_CmdSendCSD>
 8005340:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534a:	e05b      	b.n	8005404 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2100      	movs	r1, #0
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fc6e 	bl	8005c34 <SDIO_GetResponse>
 8005358:	4602      	mov	r2, r0
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2104      	movs	r1, #4
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fc65 	bl	8005c34 <SDIO_GetResponse>
 800536a:	4602      	mov	r2, r0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2108      	movs	r1, #8
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fc5c 	bl	8005c34 <SDIO_GetResponse>
 800537c:	4602      	mov	r2, r0
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	210c      	movs	r1, #12
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fc53 	bl	8005c34 <SDIO_GetResponse>
 800538e:	4602      	mov	r2, r0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2104      	movs	r1, #4
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fc4a 	bl	8005c34 <SDIO_GetResponse>
 80053a0:	4603      	mov	r3, r0
 80053a2:	0d1a      	lsrs	r2, r3, #20
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80053a8:	f107 0310 	add.w	r3, r7, #16
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fd6e 	bl	8004e90 <HAL_SD_GetCardCSD>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80053be:	e021      	b.n	8005404 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	041b      	lsls	r3, r3, #16
 80053ca:	2200      	movs	r2, #0
 80053cc:	461c      	mov	r4, r3
 80053ce:	4615      	mov	r5, r2
 80053d0:	4622      	mov	r2, r4
 80053d2:	462b      	mov	r3, r5
 80053d4:	4608      	mov	r0, r1
 80053d6:	f000 fd39 	bl	8005e4c <SDMMC_CmdSelDesel>
 80053da:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80053dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <SD_InitCard+0x176>
  {
    return errorstate;
 80053e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e4:	e00e      	b.n	8005404 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681d      	ldr	r5, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	466c      	mov	r4, sp
 80053ee:	f103 0210 	add.w	r2, r3, #16
 80053f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80053f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053f8:	3304      	adds	r3, #4
 80053fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053fc:	4628      	mov	r0, r5
 80053fe:	f000 fb7d 	bl	8005afc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3740      	adds	r7, #64	; 0x40
 8005408:	46bd      	mov	sp, r7
 800540a:	bdb0      	pop	{r4, r5, r7, pc}

0800540c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fd34 	bl	8005e92 <SDMMC_CmdGoIdleState>
 800542a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	e072      	b.n	800551c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fd47 	bl	8005ece <SDMMC_CmdOperCond>
 8005440:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00d      	beq.n	8005464 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fd1d 	bl	8005e92 <SDMMC_CmdGoIdleState>
 8005458:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	e05b      	b.n	800551c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546e:	2b01      	cmp	r3, #1
 8005470:	d137      	bne.n	80054e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2100      	movs	r1, #0
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fd47 	bl	8005f0c <SDMMC_CmdAppCommand>
 800547e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d02d      	beq.n	80054e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005486:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800548a:	e047      	b.n	800551c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2100      	movs	r1, #0
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fd3a 	bl	8005f0c <SDMMC_CmdAppCommand>
 8005498:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	e03b      	b.n	800551c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	491e      	ldr	r1, [pc, #120]	; (8005524 <SD_PowerON+0x118>)
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fd50 	bl	8005f50 <SDMMC_CmdAppOperCommand>
 80054b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054bc:	e02e      	b.n	800551c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fbb5 	bl	8005c34 <SDIO_GetResponse>
 80054ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	0fdb      	lsrs	r3, r3, #31
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <SD_PowerON+0xcc>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <SD_PowerON+0xce>
 80054d8:	2300      	movs	r3, #0
 80054da:	613b      	str	r3, [r7, #16]

    count++;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	3301      	adds	r3, #1
 80054e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d802      	bhi.n	80054f2 <SD_PowerON+0xe6>
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0cc      	beq.n	800548c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d902      	bls.n	8005502 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80054fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005500:	e00c      	b.n	800551c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	645a      	str	r2, [r3, #68]	; 0x44
 8005512:	e002      	b.n	800551a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	c1100000 	.word	0xc1100000

08005528 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005538:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800553c:	e018      	b.n	8005570 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005546:	041b      	lsls	r3, r3, #16
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f000 fd81 	bl	8006052 <SDMMC_CmdSendStatus>
 8005550:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	e009      	b.n	8005570 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fb66 	bl	8005c34 <SDIO_GetResponse>
 8005568:	4602      	mov	r2, r0
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e03f      	b.n	800560a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fc fa22 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2224      	movs	r2, #36	; 0x24
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f829 	bl	8005614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695a      	ldr	r2, [r3, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005618:	b0c0      	sub	sp, #256	; 0x100
 800561a:	af00      	add	r7, sp, #0
 800561c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005630:	68d9      	ldr	r1, [r3, #12]
 8005632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	ea40 0301 	orr.w	r3, r0, r1
 800563c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	431a      	orrs	r2, r3
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	431a      	orrs	r2, r3
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800566c:	f021 010c 	bic.w	r1, r1, #12
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800567a:	430b      	orrs	r3, r1
 800567c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568e:	6999      	ldr	r1, [r3, #24]
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	ea40 0301 	orr.w	r3, r0, r1
 800569a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b8f      	ldr	r3, [pc, #572]	; (80058e0 <UART_SetConfig+0x2cc>)
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d005      	beq.n	80056b4 <UART_SetConfig+0xa0>
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b8d      	ldr	r3, [pc, #564]	; (80058e4 <UART_SetConfig+0x2d0>)
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d104      	bne.n	80056be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056b4:	f7fd ffcc 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 80056b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056bc:	e003      	b.n	80056c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056be:	f7fd ffb3 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 80056c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d0:	f040 810c 	bne.w	80058ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056d8:	2200      	movs	r2, #0
 80056da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056e6:	4622      	mov	r2, r4
 80056e8:	462b      	mov	r3, r5
 80056ea:	1891      	adds	r1, r2, r2
 80056ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80056ee:	415b      	adcs	r3, r3
 80056f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056f6:	4621      	mov	r1, r4
 80056f8:	eb12 0801 	adds.w	r8, r2, r1
 80056fc:	4629      	mov	r1, r5
 80056fe:	eb43 0901 	adc.w	r9, r3, r1
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800570e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005716:	4690      	mov	r8, r2
 8005718:	4699      	mov	r9, r3
 800571a:	4623      	mov	r3, r4
 800571c:	eb18 0303 	adds.w	r3, r8, r3
 8005720:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005724:	462b      	mov	r3, r5
 8005726:	eb49 0303 	adc.w	r3, r9, r3
 800572a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800573a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800573e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005742:	460b      	mov	r3, r1
 8005744:	18db      	adds	r3, r3, r3
 8005746:	653b      	str	r3, [r7, #80]	; 0x50
 8005748:	4613      	mov	r3, r2
 800574a:	eb42 0303 	adc.w	r3, r2, r3
 800574e:	657b      	str	r3, [r7, #84]	; 0x54
 8005750:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005754:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005758:	f7fb fa36 	bl	8000bc8 <__aeabi_uldivmod>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4b61      	ldr	r3, [pc, #388]	; (80058e8 <UART_SetConfig+0x2d4>)
 8005762:	fba3 2302 	umull	r2, r3, r3, r2
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	011c      	lsls	r4, r3, #4
 800576a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800576e:	2200      	movs	r2, #0
 8005770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005774:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005778:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800577c:	4642      	mov	r2, r8
 800577e:	464b      	mov	r3, r9
 8005780:	1891      	adds	r1, r2, r2
 8005782:	64b9      	str	r1, [r7, #72]	; 0x48
 8005784:	415b      	adcs	r3, r3
 8005786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005788:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800578c:	4641      	mov	r1, r8
 800578e:	eb12 0a01 	adds.w	sl, r2, r1
 8005792:	4649      	mov	r1, r9
 8005794:	eb43 0b01 	adc.w	fp, r3, r1
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057ac:	4692      	mov	sl, r2
 80057ae:	469b      	mov	fp, r3
 80057b0:	4643      	mov	r3, r8
 80057b2:	eb1a 0303 	adds.w	r3, sl, r3
 80057b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057ba:	464b      	mov	r3, r9
 80057bc:	eb4b 0303 	adc.w	r3, fp, r3
 80057c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057d8:	460b      	mov	r3, r1
 80057da:	18db      	adds	r3, r3, r3
 80057dc:	643b      	str	r3, [r7, #64]	; 0x40
 80057de:	4613      	mov	r3, r2
 80057e0:	eb42 0303 	adc.w	r3, r2, r3
 80057e4:	647b      	str	r3, [r7, #68]	; 0x44
 80057e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057ee:	f7fb f9eb 	bl	8000bc8 <__aeabi_uldivmod>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	4b3b      	ldr	r3, [pc, #236]	; (80058e8 <UART_SetConfig+0x2d4>)
 80057fa:	fba3 2301 	umull	r2, r3, r3, r1
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	2264      	movs	r2, #100	; 0x64
 8005802:	fb02 f303 	mul.w	r3, r2, r3
 8005806:	1acb      	subs	r3, r1, r3
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800580e:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <UART_SetConfig+0x2d4>)
 8005810:	fba3 2302 	umull	r2, r3, r3, r2
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800581c:	441c      	add	r4, r3
 800581e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005822:	2200      	movs	r2, #0
 8005824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005828:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800582c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005830:	4642      	mov	r2, r8
 8005832:	464b      	mov	r3, r9
 8005834:	1891      	adds	r1, r2, r2
 8005836:	63b9      	str	r1, [r7, #56]	; 0x38
 8005838:	415b      	adcs	r3, r3
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005840:	4641      	mov	r1, r8
 8005842:	1851      	adds	r1, r2, r1
 8005844:	6339      	str	r1, [r7, #48]	; 0x30
 8005846:	4649      	mov	r1, r9
 8005848:	414b      	adcs	r3, r1
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005858:	4659      	mov	r1, fp
 800585a:	00cb      	lsls	r3, r1, #3
 800585c:	4651      	mov	r1, sl
 800585e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005862:	4651      	mov	r1, sl
 8005864:	00ca      	lsls	r2, r1, #3
 8005866:	4610      	mov	r0, r2
 8005868:	4619      	mov	r1, r3
 800586a:	4603      	mov	r3, r0
 800586c:	4642      	mov	r2, r8
 800586e:	189b      	adds	r3, r3, r2
 8005870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005874:	464b      	mov	r3, r9
 8005876:	460a      	mov	r2, r1
 8005878:	eb42 0303 	adc.w	r3, r2, r3
 800587c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800588c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005890:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005894:	460b      	mov	r3, r1
 8005896:	18db      	adds	r3, r3, r3
 8005898:	62bb      	str	r3, [r7, #40]	; 0x28
 800589a:	4613      	mov	r3, r2
 800589c:	eb42 0303 	adc.w	r3, r2, r3
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058aa:	f7fb f98d 	bl	8000bc8 <__aeabi_uldivmod>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <UART_SetConfig+0x2d4>)
 80058b4:	fba3 1302 	umull	r1, r3, r3, r2
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	2164      	movs	r1, #100	; 0x64
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	3332      	adds	r3, #50	; 0x32
 80058c6:	4a08      	ldr	r2, [pc, #32]	; (80058e8 <UART_SetConfig+0x2d4>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	f003 0207 	and.w	r2, r3, #7
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4422      	add	r2, r4
 80058da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058dc:	e105      	b.n	8005aea <UART_SetConfig+0x4d6>
 80058de:	bf00      	nop
 80058e0:	40011000 	.word	0x40011000
 80058e4:	40011400 	.word	0x40011400
 80058e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058fe:	4642      	mov	r2, r8
 8005900:	464b      	mov	r3, r9
 8005902:	1891      	adds	r1, r2, r2
 8005904:	6239      	str	r1, [r7, #32]
 8005906:	415b      	adcs	r3, r3
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
 800590a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800590e:	4641      	mov	r1, r8
 8005910:	1854      	adds	r4, r2, r1
 8005912:	4649      	mov	r1, r9
 8005914:	eb43 0501 	adc.w	r5, r3, r1
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	00eb      	lsls	r3, r5, #3
 8005922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005926:	00e2      	lsls	r2, r4, #3
 8005928:	4614      	mov	r4, r2
 800592a:	461d      	mov	r5, r3
 800592c:	4643      	mov	r3, r8
 800592e:	18e3      	adds	r3, r4, r3
 8005930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005934:	464b      	mov	r3, r9
 8005936:	eb45 0303 	adc.w	r3, r5, r3
 800593a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800593e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800594a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800595a:	4629      	mov	r1, r5
 800595c:	008b      	lsls	r3, r1, #2
 800595e:	4621      	mov	r1, r4
 8005960:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005964:	4621      	mov	r1, r4
 8005966:	008a      	lsls	r2, r1, #2
 8005968:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800596c:	f7fb f92c 	bl	8000bc8 <__aeabi_uldivmod>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4b60      	ldr	r3, [pc, #384]	; (8005af8 <UART_SetConfig+0x4e4>)
 8005976:	fba3 2302 	umull	r2, r3, r3, r2
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	011c      	lsls	r4, r3, #4
 800597e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005982:	2200      	movs	r2, #0
 8005984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005988:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800598c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005990:	4642      	mov	r2, r8
 8005992:	464b      	mov	r3, r9
 8005994:	1891      	adds	r1, r2, r2
 8005996:	61b9      	str	r1, [r7, #24]
 8005998:	415b      	adcs	r3, r3
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059a0:	4641      	mov	r1, r8
 80059a2:	1851      	adds	r1, r2, r1
 80059a4:	6139      	str	r1, [r7, #16]
 80059a6:	4649      	mov	r1, r9
 80059a8:	414b      	adcs	r3, r1
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059b8:	4659      	mov	r1, fp
 80059ba:	00cb      	lsls	r3, r1, #3
 80059bc:	4651      	mov	r1, sl
 80059be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059c2:	4651      	mov	r1, sl
 80059c4:	00ca      	lsls	r2, r1, #3
 80059c6:	4610      	mov	r0, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	4603      	mov	r3, r0
 80059cc:	4642      	mov	r2, r8
 80059ce:	189b      	adds	r3, r3, r2
 80059d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059d4:	464b      	mov	r3, r9
 80059d6:	460a      	mov	r2, r1
 80059d8:	eb42 0303 	adc.w	r3, r2, r3
 80059dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80059ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059f8:	4649      	mov	r1, r9
 80059fa:	008b      	lsls	r3, r1, #2
 80059fc:	4641      	mov	r1, r8
 80059fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a02:	4641      	mov	r1, r8
 8005a04:	008a      	lsls	r2, r1, #2
 8005a06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a0a:	f7fb f8dd 	bl	8000bc8 <__aeabi_uldivmod>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4b39      	ldr	r3, [pc, #228]	; (8005af8 <UART_SetConfig+0x4e4>)
 8005a14:	fba3 1302 	umull	r1, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	2164      	movs	r1, #100	; 0x64
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	3332      	adds	r3, #50	; 0x32
 8005a26:	4a34      	ldr	r2, [pc, #208]	; (8005af8 <UART_SetConfig+0x4e4>)
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a32:	441c      	add	r4, r3
 8005a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a38:	2200      	movs	r2, #0
 8005a3a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a3c:	677a      	str	r2, [r7, #116]	; 0x74
 8005a3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a42:	4642      	mov	r2, r8
 8005a44:	464b      	mov	r3, r9
 8005a46:	1891      	adds	r1, r2, r2
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	415b      	adcs	r3, r3
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a52:	4641      	mov	r1, r8
 8005a54:	1851      	adds	r1, r2, r1
 8005a56:	6039      	str	r1, [r7, #0]
 8005a58:	4649      	mov	r1, r9
 8005a5a:	414b      	adcs	r3, r1
 8005a5c:	607b      	str	r3, [r7, #4]
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a6a:	4659      	mov	r1, fp
 8005a6c:	00cb      	lsls	r3, r1, #3
 8005a6e:	4651      	mov	r1, sl
 8005a70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a74:	4651      	mov	r1, sl
 8005a76:	00ca      	lsls	r2, r1, #3
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	4642      	mov	r2, r8
 8005a80:	189b      	adds	r3, r3, r2
 8005a82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a84:	464b      	mov	r3, r9
 8005a86:	460a      	mov	r2, r1
 8005a88:	eb42 0303 	adc.w	r3, r2, r3
 8005a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	663b      	str	r3, [r7, #96]	; 0x60
 8005a98:	667a      	str	r2, [r7, #100]	; 0x64
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	008b      	lsls	r3, r1, #2
 8005aaa:	4641      	mov	r1, r8
 8005aac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ab0:	4641      	mov	r1, r8
 8005ab2:	008a      	lsls	r2, r1, #2
 8005ab4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ab8:	f7fb f886 	bl	8000bc8 <__aeabi_uldivmod>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <UART_SetConfig+0x4e4>)
 8005ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	2164      	movs	r1, #100	; 0x64
 8005aca:	fb01 f303 	mul.w	r3, r1, r3
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	3332      	adds	r3, #50	; 0x32
 8005ad4:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <UART_SetConfig+0x4e4>)
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	f003 020f 	and.w	r2, r3, #15
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4422      	add	r2, r4
 8005ae8:	609a      	str	r2, [r3, #8]
}
 8005aea:	bf00      	nop
 8005aec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005af0:	46bd      	mov	sp, r7
 8005af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005af6:	bf00      	nop
 8005af8:	51eb851f 	.word	0x51eb851f

08005afc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005afc:	b084      	sub	sp, #16
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	f107 001c 	add.w	r0, r7, #28
 8005b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005b12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005b14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005b16:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005b1a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005b1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005b22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005b26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005b36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	b004      	add	sp, #16
 8005b50:	4770      	bx	lr

08005b52 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2203      	movs	r2, #3
 8005b9a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b085      	sub	sp, #20
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005be4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005bea:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005bf0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005c00:	f023 030f 	bic.w	r3, r3, #15
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	b2db      	uxtb	r3, r3
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3314      	adds	r3, #20
 8005c42:	461a      	mov	r2, r3
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	4413      	add	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
}  
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c80:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005c86:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005c8c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0

}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b088      	sub	sp, #32
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005cc0:	2310      	movs	r3, #16
 8005cc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cc4:	2340      	movs	r3, #64	; 0x40
 8005cc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cd2:	f107 0308 	add.w	r3, r7, #8
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff ff74 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce2:	2110      	movs	r1, #16
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f9d7 	bl	8006098 <SDMMC_GetCmdResp1>
 8005cea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cec:	69fb      	ldr	r3, [r7, #28]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b088      	sub	sp, #32
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005d04:	2311      	movs	r3, #17
 8005d06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d08:	2340      	movs	r3, #64	; 0x40
 8005d0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d16:	f107 0308 	add.w	r3, r7, #8
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff ff52 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d26:	2111      	movs	r1, #17
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f9b5 	bl	8006098 <SDMMC_GetCmdResp1>
 8005d2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d30:	69fb      	ldr	r3, [r7, #28]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b088      	sub	sp, #32
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005d48:	2312      	movs	r3, #18
 8005d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d4c:	2340      	movs	r3, #64	; 0x40
 8005d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d50:	2300      	movs	r3, #0
 8005d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d5a:	f107 0308 	add.w	r3, r7, #8
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff ff30 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6a:	2112      	movs	r1, #18
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f993 	bl	8006098 <SDMMC_GetCmdResp1>
 8005d72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d74:	69fb      	ldr	r3, [r7, #28]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3720      	adds	r7, #32
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b088      	sub	sp, #32
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005d8c:	2318      	movs	r3, #24
 8005d8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d90:	2340      	movs	r3, #64	; 0x40
 8005d92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d9e:	f107 0308 	add.w	r3, r7, #8
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff ff0e 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dae:	2118      	movs	r1, #24
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f971 	bl	8006098 <SDMMC_GetCmdResp1>
 8005db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005db8:	69fb      	ldr	r3, [r7, #28]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b088      	sub	sp, #32
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005dd0:	2319      	movs	r3, #25
 8005dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dd4:	2340      	movs	r3, #64	; 0x40
 8005dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005de2:	f107 0308 	add.w	r3, r7, #8
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff feec 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df2:	2119      	movs	r1, #25
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f94f 	bl	8006098 <SDMMC_GetCmdResp1>
 8005dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3720      	adds	r7, #32
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005e14:	230c      	movs	r3, #12
 8005e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e18:	2340      	movs	r3, #64	; 0x40
 8005e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e26:	f107 0308 	add.w	r3, r7, #8
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff feca 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005e32:	4a05      	ldr	r2, [pc, #20]	; (8005e48 <SDMMC_CmdStopTransfer+0x40>)
 8005e34:	210c      	movs	r1, #12
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f92e 	bl	8006098 <SDMMC_GetCmdResp1>
 8005e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3720      	adds	r7, #32
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	05f5e100 	.word	0x05f5e100

08005e4c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08a      	sub	sp, #40	; 0x28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005e5c:	2307      	movs	r3, #7
 8005e5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e60:	2340      	movs	r3, #64	; 0x40
 8005e62:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e6c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e6e:	f107 0310 	add.w	r3, r7, #16
 8005e72:	4619      	mov	r1, r3
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff fea6 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7e:	2107      	movs	r1, #7
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 f909 	bl	8006098 <SDMMC_GetCmdResp1>
 8005e86:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3728      	adds	r7, #40	; 0x28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b088      	sub	sp, #32
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005eb0:	f107 0308 	add.w	r3, r7, #8
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff fe85 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fb23 	bl	8006508 <SDMMC_GetCmdError>
 8005ec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b088      	sub	sp, #32
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005ed6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005eda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005edc:	2308      	movs	r3, #8
 8005ede:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ee0:	2340      	movs	r3, #64	; 0x40
 8005ee2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005eee:	f107 0308 	add.w	r3, r7, #8
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff fe66 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fab6 	bl	800646c <SDMMC_GetCmdResp7>
 8005f00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f02:	69fb      	ldr	r3, [r7, #28]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3720      	adds	r7, #32
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005f1a:	2337      	movs	r3, #55	; 0x37
 8005f1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f1e:	2340      	movs	r3, #64	; 0x40
 8005f20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f2c:	f107 0308 	add.w	r3, r7, #8
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fe47 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3c:	2137      	movs	r1, #55	; 0x37
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f8aa 	bl	8006098 <SDMMC_GetCmdResp1>
 8005f44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f46:	69fb      	ldr	r3, [r7, #28]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005f66:	2329      	movs	r3, #41	; 0x29
 8005f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f78:	f107 0308 	add.w	r3, r7, #8
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff fe21 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f9bd 	bl	8006304 <SDMMC_GetCmdResp3>
 8005f8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b088      	sub	sp, #32
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005fa6:	23c0      	movs	r3, #192	; 0xc0
 8005fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fb4:	f107 0308 	add.w	r3, r7, #8
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff fe03 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f957 	bl	8006274 <SDMMC_GetCmdResp2>
 8005fc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3720      	adds	r7, #32
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b088      	sub	sp, #32
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005fe0:	2309      	movs	r3, #9
 8005fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005fe4:	23c0      	movs	r3, #192	; 0xc0
 8005fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff fde4 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f938 	bl	8006274 <SDMMC_GetCmdResp2>
 8006004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006006:	69fb      	ldr	r3, [r7, #28]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3720      	adds	r7, #32
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800601e:	2303      	movs	r3, #3
 8006020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006022:	2340      	movs	r3, #64	; 0x40
 8006024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800602a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800602e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006030:	f107 0308 	add.w	r3, r7, #8
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff fdc5 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	2103      	movs	r1, #3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f99d 	bl	8006380 <SDMMC_GetCmdResp6>
 8006046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006048:	69fb      	ldr	r3, [r7, #28]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b088      	sub	sp, #32
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006060:	230d      	movs	r3, #13
 8006062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006064:	2340      	movs	r3, #64	; 0x40
 8006066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800606c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006070:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006072:	f107 0308 	add.w	r3, r7, #8
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff fda4 	bl	8005bc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800607e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006082:	210d      	movs	r1, #13
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f807 	bl	8006098 <SDMMC_GetCmdResp1>
 800608a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800608c:	69fb      	ldr	r3, [r7, #28]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	460b      	mov	r3, r1
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80060a6:	4b70      	ldr	r3, [pc, #448]	; (8006268 <SDMMC_GetCmdResp1+0x1d0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a70      	ldr	r2, [pc, #448]	; (800626c <SDMMC_GetCmdResp1+0x1d4>)
 80060ac:	fba2 2303 	umull	r2, r3, r2, r3
 80060b0:	0a5a      	lsrs	r2, r3, #9
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	fb02 f303 	mul.w	r3, r2, r3
 80060b8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	1e5a      	subs	r2, r3, #1
 80060be:	61fa      	str	r2, [r7, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80060c8:	e0c9      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ce:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0ef      	beq.n	80060ba <SDMMC_GetCmdResp1+0x22>
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1ea      	bne.n	80060ba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d004      	beq.n	80060fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2204      	movs	r2, #4
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80060f6:	2304      	movs	r3, #4
 80060f8:	e0b1      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d004      	beq.n	8006110 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800610c:	2301      	movs	r3, #1
 800610e:	e0a6      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	22c5      	movs	r2, #197	; 0xc5
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff fd7f 	bl	8005c1a <SDIO_GetCommandResponse>
 800611c:	4603      	mov	r3, r0
 800611e:	461a      	mov	r2, r3
 8006120:	7afb      	ldrb	r3, [r7, #11]
 8006122:	4293      	cmp	r3, r2
 8006124:	d001      	beq.n	800612a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006126:	2301      	movs	r3, #1
 8006128:	e099      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800612a:	2100      	movs	r1, #0
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff fd81 	bl	8005c34 <SDIO_GetResponse>
 8006132:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4b4e      	ldr	r3, [pc, #312]	; (8006270 <SDMMC_GetCmdResp1+0x1d8>)
 8006138:	4013      	ands	r3, r2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800613e:	2300      	movs	r3, #0
 8006140:	e08d      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b00      	cmp	r3, #0
 8006146:	da02      	bge.n	800614e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800614c:	e087      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006158:	2340      	movs	r3, #64	; 0x40
 800615a:	e080      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006166:	2380      	movs	r3, #128	; 0x80
 8006168:	e079      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006178:	e071      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006188:	e069      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006198:	e061      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80061a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061a8:	e059      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80061b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061b8:	e051      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80061c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061c8:	e049      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80061d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061d8:	e041      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80061e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061e8:	e039      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80061f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061f8:	e031      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006204:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006208:	e029      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006214:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006218:	e021      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006224:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006228:	e019      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006234:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006238:	e011      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006244:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006248:	e009      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006254:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006258:	e001      	b.n	800625e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800625a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800625e:	4618      	mov	r0, r3
 8006260:	3720      	adds	r7, #32
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000004 	.word	0x20000004
 800626c:	10624dd3 	.word	0x10624dd3
 8006270:	fdffe008 	.word	0xfdffe008

08006274 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800627c:	4b1f      	ldr	r3, [pc, #124]	; (80062fc <SDMMC_GetCmdResp2+0x88>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1f      	ldr	r2, [pc, #124]	; (8006300 <SDMMC_GetCmdResp2+0x8c>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	0a5b      	lsrs	r3, r3, #9
 8006288:	f241 3288 	movw	r2, #5000	; 0x1388
 800628c:	fb02 f303 	mul.w	r3, r2, r3
 8006290:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1e5a      	subs	r2, r3, #1
 8006296:	60fa      	str	r2, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d102      	bne.n	80062a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800629c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062a0:	e026      	b.n	80062f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0ef      	beq.n	8006292 <SDMMC_GetCmdResp2+0x1e>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1ea      	bne.n	8006292 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2204      	movs	r2, #4
 80062cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062ce:	2304      	movs	r3, #4
 80062d0:	e00e      	b.n	80062f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d004      	beq.n	80062e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e003      	b.n	80062f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	22c5      	movs	r2, #197	; 0xc5
 80062ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	20000004 	.word	0x20000004
 8006300:	10624dd3 	.word	0x10624dd3

08006304 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800630c:	4b1a      	ldr	r3, [pc, #104]	; (8006378 <SDMMC_GetCmdResp3+0x74>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a1a      	ldr	r2, [pc, #104]	; (800637c <SDMMC_GetCmdResp3+0x78>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	0a5b      	lsrs	r3, r3, #9
 8006318:	f241 3288 	movw	r2, #5000	; 0x1388
 800631c:	fb02 f303 	mul.w	r3, r2, r3
 8006320:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1e5a      	subs	r2, r3, #1
 8006326:	60fa      	str	r2, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800632c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006330:	e01b      	b.n	800636a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006336:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0ef      	beq.n	8006322 <SDMMC_GetCmdResp3+0x1e>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1ea      	bne.n	8006322 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2204      	movs	r2, #4
 800635c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800635e:	2304      	movs	r3, #4
 8006360:	e003      	b.n	800636a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	22c5      	movs	r2, #197	; 0xc5
 8006366:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000004 	.word	0x20000004
 800637c:	10624dd3 	.word	0x10624dd3

08006380 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	460b      	mov	r3, r1
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800638e:	4b35      	ldr	r3, [pc, #212]	; (8006464 <SDMMC_GetCmdResp6+0xe4>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a35      	ldr	r2, [pc, #212]	; (8006468 <SDMMC_GetCmdResp6+0xe8>)
 8006394:	fba2 2303 	umull	r2, r3, r2, r3
 8006398:	0a5b      	lsrs	r3, r3, #9
 800639a:	f241 3288 	movw	r2, #5000	; 0x1388
 800639e:	fb02 f303 	mul.w	r3, r2, r3
 80063a2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	1e5a      	subs	r2, r3, #1
 80063a8:	61fa      	str	r2, [r7, #28]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d102      	bne.n	80063b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063b2:	e052      	b.n	800645a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0ef      	beq.n	80063a4 <SDMMC_GetCmdResp6+0x24>
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1ea      	bne.n	80063a4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d004      	beq.n	80063e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2204      	movs	r2, #4
 80063de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063e0:	2304      	movs	r3, #4
 80063e2:	e03a      	b.n	800645a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d004      	beq.n	80063fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e02f      	b.n	800645a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f7ff fc0d 	bl	8005c1a <SDIO_GetCommandResponse>
 8006400:	4603      	mov	r3, r0
 8006402:	461a      	mov	r2, r3
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	4293      	cmp	r3, r2
 8006408:	d001      	beq.n	800640e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800640a:	2301      	movs	r3, #1
 800640c:	e025      	b.n	800645a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	22c5      	movs	r2, #197	; 0xc5
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006414:	2100      	movs	r1, #0
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fc0c 	bl	8005c34 <SDIO_GetResponse>
 800641c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	0c1b      	lsrs	r3, r3, #16
 800642c:	b29a      	uxth	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006432:	2300      	movs	r3, #0
 8006434:	e011      	b.n	800645a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006444:	e009      	b.n	800645a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006454:	e001      	b.n	800645a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800645a:	4618      	mov	r0, r3
 800645c:	3720      	adds	r7, #32
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000004 	.word	0x20000004
 8006468:	10624dd3 	.word	0x10624dd3

0800646c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006474:	4b22      	ldr	r3, [pc, #136]	; (8006500 <SDMMC_GetCmdResp7+0x94>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a22      	ldr	r2, [pc, #136]	; (8006504 <SDMMC_GetCmdResp7+0x98>)
 800647a:	fba2 2303 	umull	r2, r3, r2, r3
 800647e:	0a5b      	lsrs	r3, r3, #9
 8006480:	f241 3288 	movw	r2, #5000	; 0x1388
 8006484:	fb02 f303 	mul.w	r3, r2, r3
 8006488:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1e5a      	subs	r2, r3, #1
 800648e:	60fa      	str	r2, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006494:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006498:	e02c      	b.n	80064f4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0ef      	beq.n	800648a <SDMMC_GetCmdResp7+0x1e>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1ea      	bne.n	800648a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d004      	beq.n	80064ca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2204      	movs	r2, #4
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064c6:	2304      	movs	r3, #4
 80064c8:	e014      	b.n	80064f4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064dc:	2301      	movs	r3, #1
 80064de:	e009      	b.n	80064f4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2240      	movs	r2, #64	; 0x40
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80064f2:	2300      	movs	r3, #0
  
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	20000004 	.word	0x20000004
 8006504:	10624dd3 	.word	0x10624dd3

08006508 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006510:	4b11      	ldr	r3, [pc, #68]	; (8006558 <SDMMC_GetCmdError+0x50>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a11      	ldr	r2, [pc, #68]	; (800655c <SDMMC_GetCmdError+0x54>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	0a5b      	lsrs	r3, r3, #9
 800651c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006520:	fb02 f303 	mul.w	r3, r2, r3
 8006524:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	1e5a      	subs	r2, r3, #1
 800652a:	60fa      	str	r2, [r7, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006530:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006534:	e009      	b.n	800654a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0f1      	beq.n	8006526 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	22c5      	movs	r2, #197	; 0xc5
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	20000004 	.word	0x20000004
 800655c:	10624dd3 	.word	0x10624dd3

08006560 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006564:	4904      	ldr	r1, [pc, #16]	; (8006578 <MX_FATFS_Init+0x18>)
 8006566:	4805      	ldr	r0, [pc, #20]	; (800657c <MX_FATFS_Init+0x1c>)
 8006568:	f003 fa10 	bl	800998c <FATFS_LinkDriver>
 800656c:	4603      	mov	r3, r0
 800656e:	461a      	mov	r2, r3
 8006570:	4b03      	ldr	r3, [pc, #12]	; (8006580 <MX_FATFS_Init+0x20>)
 8006572:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006574:	bf00      	nop
 8006576:	bd80      	pop	{r7, pc}
 8006578:	20002340 	.word	0x20002340
 800657c:	0800ba90 	.word	0x0800ba90
 8006580:	2000233c 	.word	0x2000233c

08006584 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006588:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800658a:	4618      	mov	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800659e:	f000 f86b 	bl	8006678 <BSP_SD_IsDetected>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d001      	beq.n	80065ac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e005      	b.n	80065b8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80065ac:	4804      	ldr	r0, [pc, #16]	; (80065c0 <BSP_SD_Init+0x2c>)
 80065ae:	f7fe f85b 	bl	8004668 <HAL_SD_Init>
 80065b2:	4603      	mov	r3, r0
 80065b4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80065b6:	79fb      	ldrb	r3, [r7, #7]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20000138 	.word	0x20000138

080065c4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af02      	add	r7, sp, #8
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	68f9      	ldr	r1, [r7, #12]
 80065e0:	4806      	ldr	r0, [pc, #24]	; (80065fc <BSP_SD_ReadBlocks+0x38>)
 80065e2:	f7fe f8f1 	bl	80047c8 <HAL_SD_ReadBlocks>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000138 	.word	0x20000138

08006600 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af02      	add	r7, sp, #8
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	4806      	ldr	r0, [pc, #24]	; (8006638 <BSP_SD_WriteBlocks+0x38>)
 800661e:	f7fe fab1 	bl	8004b84 <HAL_SD_WriteBlocks>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000138 	.word	0x20000138

0800663c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006640:	4805      	ldr	r0, [pc, #20]	; (8006658 <BSP_SD_GetCardState+0x1c>)
 8006642:	f7fe fdf5 	bl	8005230 <HAL_SD_GetCardState>
 8006646:	4603      	mov	r3, r0
 8006648:	2b04      	cmp	r3, #4
 800664a:	bf14      	ite	ne
 800664c:	2301      	movne	r3, #1
 800664e:	2300      	moveq	r3, #0
 8006650:	b2db      	uxtb	r3, r3
}
 8006652:	4618      	mov	r0, r3
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000138 	.word	0x20000138

0800665c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	4803      	ldr	r0, [pc, #12]	; (8006674 <BSP_SD_GetCardInfo+0x18>)
 8006668:	f7fe fdb6 	bl	80051d8 <HAL_SD_GetCardInfo>
}
 800666c:	bf00      	nop
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	20000138 	.word	0x20000138

08006678 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800667e:	2301      	movs	r3, #1
 8006680:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	b2db      	uxtb	r3, r3
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <SD_CheckStatus+0x38>)
 80066a0:	2201      	movs	r2, #1
 80066a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80066a4:	f7ff ffca 	bl	800663c <BSP_SD_GetCardState>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d107      	bne.n	80066be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80066ae:	4b07      	ldr	r3, [pc, #28]	; (80066cc <SD_CheckStatus+0x38>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	f023 0301 	bic.w	r3, r3, #1
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	4b04      	ldr	r3, [pc, #16]	; (80066cc <SD_CheckStatus+0x38>)
 80066bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80066be:	4b03      	ldr	r3, [pc, #12]	; (80066cc <SD_CheckStatus+0x38>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	b2db      	uxtb	r3, r3
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	2000000d 	.word	0x2000000d

080066d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80066da:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <SD_initialize+0x38>)
 80066dc:	2201      	movs	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80066e0:	f7ff ff58 	bl	8006594 <BSP_SD_Init>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d107      	bne.n	80066fa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff ffd1 	bl	8006694 <SD_CheckStatus>
 80066f2:	4603      	mov	r3, r0
 80066f4:	461a      	mov	r2, r3
 80066f6:	4b04      	ldr	r3, [pc, #16]	; (8006708 <SD_initialize+0x38>)
 80066f8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80066fa:	4b03      	ldr	r3, [pc, #12]	; (8006708 <SD_initialize+0x38>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	b2db      	uxtb	r3, r3
}
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	2000000d 	.word	0x2000000d

0800670c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff ffbb 	bl	8006694 <SD_CheckStatus>
 800671e:	4603      	mov	r3, r0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	607a      	str	r2, [r7, #4]
 8006732:	603b      	str	r3, [r7, #0]
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800673c:	f04f 33ff 	mov.w	r3, #4294967295
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	68b8      	ldr	r0, [r7, #8]
 8006746:	f7ff ff3d 	bl	80065c4 <BSP_SD_ReadBlocks>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d107      	bne.n	8006760 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006750:	bf00      	nop
 8006752:	f7ff ff73 	bl	800663c <BSP_SD_GetCardState>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1fa      	bne.n	8006752 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006760:	7dfb      	ldrb	r3, [r7, #23]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b086      	sub	sp, #24
 800676e:	af00      	add	r7, sp, #0
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	4603      	mov	r3, r0
 8006778:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800677e:	f04f 33ff 	mov.w	r3, #4294967295
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	68b8      	ldr	r0, [r7, #8]
 8006788:	f7ff ff3a 	bl	8006600 <BSP_SD_WriteBlocks>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d107      	bne.n	80067a2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006792:	bf00      	nop
 8006794:	f7ff ff52 	bl	800663c <BSP_SD_GetCardState>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1fa      	bne.n	8006794 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08c      	sub	sp, #48	; 0x30
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	603a      	str	r2, [r7, #0]
 80067b6:	71fb      	strb	r3, [r7, #7]
 80067b8:	460b      	mov	r3, r1
 80067ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80067c2:	4b25      	ldr	r3, [pc, #148]	; (8006858 <SD_ioctl+0xac>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <SD_ioctl+0x28>
 80067d0:	2303      	movs	r3, #3
 80067d2:	e03c      	b.n	800684e <SD_ioctl+0xa2>

  switch (cmd)
 80067d4:	79bb      	ldrb	r3, [r7, #6]
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d834      	bhi.n	8006844 <SD_ioctl+0x98>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <SD_ioctl+0x34>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	080067f1 	.word	0x080067f1
 80067e4:	080067f9 	.word	0x080067f9
 80067e8:	08006811 	.word	0x08006811
 80067ec:	0800682b 	.word	0x0800682b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80067f6:	e028      	b.n	800684a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80067f8:	f107 030c 	add.w	r3, r7, #12
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff ff2d 	bl	800665c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800680e:	e01c      	b.n	800684a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006810:	f107 030c 	add.w	r3, r7, #12
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff ff21 	bl	800665c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	b29a      	uxth	r2, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006828:	e00f      	b.n	800684a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800682a:	f107 030c 	add.w	r3, r7, #12
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff ff14 	bl	800665c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	0a5a      	lsrs	r2, r3, #9
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006842:	e002      	b.n	800684a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006844:	2304      	movs	r3, #4
 8006846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800684a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800684e:	4618      	mov	r0, r3
 8006850:	3730      	adds	r7, #48	; 0x30
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	2000000d 	.word	0x2000000d

0800685c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	4a08      	ldr	r2, [pc, #32]	; (800688c <disk_status+0x30>)
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	79fa      	ldrb	r2, [r7, #7]
 8006874:	4905      	ldr	r1, [pc, #20]	; (800688c <disk_status+0x30>)
 8006876:	440a      	add	r2, r1
 8006878:	7a12      	ldrb	r2, [r2, #8]
 800687a:	4610      	mov	r0, r2
 800687c:	4798      	blx	r3
 800687e:	4603      	mov	r3, r0
 8006880:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	2000236c 	.word	0x2000236c

08006890 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	4a0d      	ldr	r2, [pc, #52]	; (80068d8 <disk_initialize+0x48>)
 80068a2:	5cd3      	ldrb	r3, [r2, r3]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d111      	bne.n	80068cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	4a0b      	ldr	r2, [pc, #44]	; (80068d8 <disk_initialize+0x48>)
 80068ac:	2101      	movs	r1, #1
 80068ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	4a09      	ldr	r2, [pc, #36]	; (80068d8 <disk_initialize+0x48>)
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	79fa      	ldrb	r2, [r7, #7]
 80068be:	4906      	ldr	r1, [pc, #24]	; (80068d8 <disk_initialize+0x48>)
 80068c0:	440a      	add	r2, r1
 80068c2:	7a12      	ldrb	r2, [r2, #8]
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	2000236c 	.word	0x2000236c

080068dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80068dc:	b590      	push	{r4, r7, lr}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	607a      	str	r2, [r7, #4]
 80068e6:	603b      	str	r3, [r7, #0]
 80068e8:	4603      	mov	r3, r0
 80068ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	4a0a      	ldr	r2, [pc, #40]	; (8006918 <disk_read+0x3c>)
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	689c      	ldr	r4, [r3, #8]
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	4a07      	ldr	r2, [pc, #28]	; (8006918 <disk_read+0x3c>)
 80068fc:	4413      	add	r3, r2
 80068fe:	7a18      	ldrb	r0, [r3, #8]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	68b9      	ldr	r1, [r7, #8]
 8006906:	47a0      	blx	r4
 8006908:	4603      	mov	r3, r0
 800690a:	75fb      	strb	r3, [r7, #23]
  return res;
 800690c:	7dfb      	ldrb	r3, [r7, #23]
}
 800690e:	4618      	mov	r0, r3
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	bd90      	pop	{r4, r7, pc}
 8006916:	bf00      	nop
 8006918:	2000236c 	.word	0x2000236c

0800691c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800691c:	b590      	push	{r4, r7, lr}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	4a0a      	ldr	r2, [pc, #40]	; (8006958 <disk_write+0x3c>)
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	68dc      	ldr	r4, [r3, #12]
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	4a07      	ldr	r2, [pc, #28]	; (8006958 <disk_write+0x3c>)
 800693c:	4413      	add	r3, r2
 800693e:	7a18      	ldrb	r0, [r3, #8]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	47a0      	blx	r4
 8006948:	4603      	mov	r3, r0
 800694a:	75fb      	strb	r3, [r7, #23]
  return res;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
}
 800694e:	4618      	mov	r0, r3
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	bd90      	pop	{r4, r7, pc}
 8006956:	bf00      	nop
 8006958:	2000236c 	.word	0x2000236c

0800695c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	4603      	mov	r3, r0
 8006964:	603a      	str	r2, [r7, #0]
 8006966:	71fb      	strb	r3, [r7, #7]
 8006968:	460b      	mov	r3, r1
 800696a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	4a09      	ldr	r2, [pc, #36]	; (8006994 <disk_ioctl+0x38>)
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	79fa      	ldrb	r2, [r7, #7]
 800697a:	4906      	ldr	r1, [pc, #24]	; (8006994 <disk_ioctl+0x38>)
 800697c:	440a      	add	r2, r1
 800697e:	7a10      	ldrb	r0, [r2, #8]
 8006980:	79b9      	ldrb	r1, [r7, #6]
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	4798      	blx	r3
 8006986:	4603      	mov	r3, r0
 8006988:	73fb      	strb	r3, [r7, #15]
  return res;
 800698a:	7bfb      	ldrb	r3, [r7, #15]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	2000236c 	.word	0x2000236c

08006998 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3301      	adds	r3, #1
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80069a8:	89fb      	ldrh	r3, [r7, #14]
 80069aa:	021b      	lsls	r3, r3, #8
 80069ac:	b21a      	sxth	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b21b      	sxth	r3, r3
 80069b4:	4313      	orrs	r3, r2
 80069b6:	b21b      	sxth	r3, r3
 80069b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80069ba:	89fb      	ldrh	r3, [r7, #14]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3303      	adds	r3, #3
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	3202      	adds	r2, #2
 80069e0:	7812      	ldrb	r2, [r2, #0]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	3201      	adds	r2, #1
 80069ee:	7812      	ldrb	r2, [r2, #0]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	7812      	ldrb	r2, [r2, #0]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8006a00:	68fb      	ldr	r3, [r7, #12]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	460b      	mov	r3, r1
 8006a18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	887a      	ldrh	r2, [r7, #2]
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	887b      	ldrh	r3, [r7, #2]
 8006a28:	0a1b      	lsrs	r3, r3, #8
 8006a2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	607a      	str	r2, [r7, #4]
 8006a32:	887a      	ldrh	r2, [r7, #2]
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	0a1b      	lsrs	r3, r3, #8
 8006a5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	607a      	str	r2, [r7, #4]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	b2d2      	uxtb	r2, r2
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	0a1b      	lsrs	r3, r3, #8
 8006a70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	0a1b      	lsrs	r3, r3, #8
 8006a82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	607a      	str	r2, [r7, #4]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	701a      	strb	r2, [r3, #0]
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	1c53      	adds	r3, r2, #1
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	1c59      	adds	r1, r3, #1
 8006ac0:	6179      	str	r1, [r7, #20]
 8006ac2:	7812      	ldrb	r2, [r2, #0]
 8006ac4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	607b      	str	r3, [r7, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f1      	bne.n	8006ab6 <mem_cpy+0x1a>
	}
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006ade:	b480      	push	{r7}
 8006ae0:	b087      	sub	sp, #28
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	617a      	str	r2, [r7, #20]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	607b      	str	r3, [r7, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1f3      	bne.n	8006aee <mem_set+0x10>
}
 8006b06:	bf00      	nop
 8006b08:	bf00      	nop
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006b14:	b480      	push	{r7}
 8006b16:	b089      	sub	sp, #36	; 0x24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	61fa      	str	r2, [r7, #28]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	4619      	mov	r1, r3
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	61ba      	str	r2, [r7, #24]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	1acb      	subs	r3, r1, r3
 8006b40:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	607b      	str	r3, [r7, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <mem_cmp+0x40>
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d0eb      	beq.n	8006b2c <mem_cmp+0x18>

	return r;
 8006b54:	697b      	ldr	r3, [r7, #20]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3724      	adds	r7, #36	; 0x24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006b6c:	e002      	b.n	8006b74 <chk_chr+0x12>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3301      	adds	r3, #1
 8006b72:	607b      	str	r3, [r7, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <chk_chr+0x26>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d1f2      	bne.n	8006b6e <chk_chr+0xc>
	return *str;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	e029      	b.n	8006c00 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006bac:	4a27      	ldr	r2, [pc, #156]	; (8006c4c <chk_lock+0xb4>)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	4413      	add	r3, r2
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d01d      	beq.n	8006bf6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006bba:	4a24      	ldr	r2, [pc, #144]	; (8006c4c <chk_lock+0xb4>)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	4413      	add	r3, r2
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d116      	bne.n	8006bfa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	; (8006c4c <chk_lock+0xb4>)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	4413      	add	r3, r2
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d10c      	bne.n	8006bfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006be0:	4a1a      	ldr	r2, [pc, #104]	; (8006c4c <chk_lock+0xb4>)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	4413      	add	r3, r2
 8006be8:	3308      	adds	r3, #8
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d102      	bne.n	8006bfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006bf4:	e007      	b.n	8006c06 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d9d2      	bls.n	8006bac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d109      	bne.n	8006c20 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d102      	bne.n	8006c18 <chk_lock+0x80>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d101      	bne.n	8006c1c <chk_lock+0x84>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	e010      	b.n	8006c3e <chk_lock+0xa6>
 8006c1c:	2312      	movs	r3, #18
 8006c1e:	e00e      	b.n	8006c3e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d108      	bne.n	8006c38 <chk_lock+0xa0>
 8006c26:	4a09      	ldr	r2, [pc, #36]	; (8006c4c <chk_lock+0xb4>)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	4413      	add	r3, r2
 8006c2e:	330c      	adds	r3, #12
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c36:	d101      	bne.n	8006c3c <chk_lock+0xa4>
 8006c38:	2310      	movs	r3, #16
 8006c3a:	e000      	b.n	8006c3e <chk_lock+0xa6>
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	2000234c 	.word	0x2000234c

08006c50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c56:	2300      	movs	r3, #0
 8006c58:	607b      	str	r3, [r7, #4]
 8006c5a:	e002      	b.n	8006c62 <enq_lock+0x12>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	607b      	str	r3, [r7, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d806      	bhi.n	8006c76 <enq_lock+0x26>
 8006c68:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <enq_lock+0x40>)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	4413      	add	r3, r2
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f2      	bne.n	8006c5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	bf14      	ite	ne
 8006c7c:	2301      	movne	r3, #1
 8006c7e:	2300      	moveq	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	2000234c 	.word	0x2000234c

08006c94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	e01f      	b.n	8006ce4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006ca4:	4a41      	ldr	r2, [pc, #260]	; (8006dac <inc_lock+0x118>)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	011b      	lsls	r3, r3, #4
 8006caa:	4413      	add	r3, r2
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d113      	bne.n	8006cde <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006cb6:	4a3d      	ldr	r2, [pc, #244]	; (8006dac <inc_lock+0x118>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d109      	bne.n	8006cde <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006cca:	4a38      	ldr	r2, [pc, #224]	; (8006dac <inc_lock+0x118>)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3308      	adds	r3, #8
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d006      	beq.n	8006cec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d9dc      	bls.n	8006ca4 <inc_lock+0x10>
 8006cea:	e000      	b.n	8006cee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006cec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d132      	bne.n	8006d5a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	e002      	b.n	8006d00 <inc_lock+0x6c>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d806      	bhi.n	8006d14 <inc_lock+0x80>
 8006d06:	4a29      	ldr	r2, [pc, #164]	; (8006dac <inc_lock+0x118>)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	4413      	add	r3, r2
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1f2      	bne.n	8006cfa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d101      	bne.n	8006d1e <inc_lock+0x8a>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e040      	b.n	8006da0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4922      	ldr	r1, [pc, #136]	; (8006dac <inc_lock+0x118>)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	440b      	add	r3, r1
 8006d2a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	491e      	ldr	r1, [pc, #120]	; (8006dac <inc_lock+0x118>)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	011b      	lsls	r3, r3, #4
 8006d36:	440b      	add	r3, r1
 8006d38:	3304      	adds	r3, #4
 8006d3a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	695a      	ldr	r2, [r3, #20]
 8006d40:	491a      	ldr	r1, [pc, #104]	; (8006dac <inc_lock+0x118>)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	440b      	add	r3, r1
 8006d48:	3308      	adds	r3, #8
 8006d4a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006d4c:	4a17      	ldr	r2, [pc, #92]	; (8006dac <inc_lock+0x118>)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	4413      	add	r3, r2
 8006d54:	330c      	adds	r3, #12
 8006d56:	2200      	movs	r2, #0
 8006d58:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <inc_lock+0xe0>
 8006d60:	4a12      	ldr	r2, [pc, #72]	; (8006dac <inc_lock+0x118>)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	4413      	add	r3, r2
 8006d68:	330c      	adds	r3, #12
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <inc_lock+0xe0>
 8006d70:	2300      	movs	r3, #0
 8006d72:	e015      	b.n	8006da0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d108      	bne.n	8006d8c <inc_lock+0xf8>
 8006d7a:	4a0c      	ldr	r2, [pc, #48]	; (8006dac <inc_lock+0x118>)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	4413      	add	r3, r2
 8006d82:	330c      	adds	r3, #12
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	e001      	b.n	8006d90 <inc_lock+0xfc>
 8006d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d90:	4906      	ldr	r1, [pc, #24]	; (8006dac <inc_lock+0x118>)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	440b      	add	r3, r1
 8006d98:	330c      	adds	r3, #12
 8006d9a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3301      	adds	r3, #1
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	2000234c 	.word	0x2000234c

08006db0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	607b      	str	r3, [r7, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d825      	bhi.n	8006e10 <dec_lock+0x60>
		n = Files[i].ctr;
 8006dc4:	4a17      	ldr	r2, [pc, #92]	; (8006e24 <dec_lock+0x74>)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	4413      	add	r3, r2
 8006dcc:	330c      	adds	r3, #12
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006dd2:	89fb      	ldrh	r3, [r7, #14]
 8006dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd8:	d101      	bne.n	8006dde <dec_lock+0x2e>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006dde:	89fb      	ldrh	r3, [r7, #14]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <dec_lock+0x3a>
 8006de4:	89fb      	ldrh	r3, [r7, #14]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006dea:	4a0e      	ldr	r2, [pc, #56]	; (8006e24 <dec_lock+0x74>)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	4413      	add	r3, r2
 8006df2:	330c      	adds	r3, #12
 8006df4:	89fa      	ldrh	r2, [r7, #14]
 8006df6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006df8:	89fb      	ldrh	r3, [r7, #14]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d105      	bne.n	8006e0a <dec_lock+0x5a>
 8006dfe:	4a09      	ldr	r2, [pc, #36]	; (8006e24 <dec_lock+0x74>)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	4413      	add	r3, r2
 8006e06:	2200      	movs	r2, #0
 8006e08:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	737b      	strb	r3, [r7, #13]
 8006e0e:	e001      	b.n	8006e14 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006e10:	2302      	movs	r3, #2
 8006e12:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006e14:	7b7b      	ldrb	r3, [r7, #13]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	2000234c 	.word	0x2000234c

08006e28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	e010      	b.n	8006e58 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006e36:	4a0d      	ldr	r2, [pc, #52]	; (8006e6c <clear_lock+0x44>)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	4413      	add	r3, r2
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d105      	bne.n	8006e52 <clear_lock+0x2a>
 8006e46:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <clear_lock+0x44>)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	4413      	add	r3, r2
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3301      	adds	r3, #1
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d9eb      	bls.n	8006e36 <clear_lock+0xe>
	}
}
 8006e5e:	bf00      	nop
 8006e60:	bf00      	nop
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	2000234c 	.word	0x2000234c

08006e70 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	78db      	ldrb	r3, [r3, #3]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d034      	beq.n	8006eee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	7858      	ldrb	r0, [r3, #1]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006e94:	2301      	movs	r3, #1
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	f7ff fd40 	bl	800691c <disk_write>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	73fb      	strb	r3, [r7, #15]
 8006ea6:	e022      	b.n	8006eee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	1ad2      	subs	r2, r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d217      	bcs.n	8006eee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	789b      	ldrb	r3, [r3, #2]
 8006ec2:	613b      	str	r3, [r7, #16]
 8006ec4:	e010      	b.n	8006ee8 <sync_window+0x78>
					wsect += fs->fsize;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4413      	add	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	7858      	ldrb	r0, [r3, #1]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006eda:	2301      	movs	r3, #1
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	f7ff fd1d 	bl	800691c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d8eb      	bhi.n	8006ec6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d01b      	beq.n	8006f48 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff ffad 	bl	8006e70 <sync_window>
 8006f16:	4603      	mov	r3, r0
 8006f18:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d113      	bne.n	8006f48 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	7858      	ldrb	r0, [r3, #1]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	f7ff fcd5 	bl	80068dc <disk_read>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d004      	beq.n	8006f42 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006f38:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff ff87 	bl	8006e70 <sync_window>
 8006f62:	4603      	mov	r3, r0
 8006f64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d159      	bne.n	8007020 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d149      	bne.n	8007008 <sync_fs+0xb4>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	791b      	ldrb	r3, [r3, #4]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d145      	bne.n	8007008 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	899b      	ldrh	r3, [r3, #12]
 8006f86:	461a      	mov	r2, r3
 8006f88:	2100      	movs	r1, #0
 8006f8a:	f7ff fda8 	bl	8006ade <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3334      	adds	r3, #52	; 0x34
 8006f92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f96:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff fd37 	bl	8006a0e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3334      	adds	r3, #52	; 0x34
 8006fa4:	4921      	ldr	r1, [pc, #132]	; (800702c <sync_fs+0xd8>)
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff fd4c 	bl	8006a44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3334      	adds	r3, #52	; 0x34
 8006fb0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006fb4:	491e      	ldr	r1, [pc, #120]	; (8007030 <sync_fs+0xdc>)
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff fd44 	bl	8006a44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3334      	adds	r3, #52	; 0x34
 8006fc0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f7ff fd3a 	bl	8006a44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3334      	adds	r3, #52	; 0x34
 8006fd4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4610      	mov	r0, r2
 8006fe0:	f7ff fd30 	bl	8006a44 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	7858      	ldrb	r0, [r3, #1]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f7ff fc8d 	bl	800691c <disk_write>
			fs->fsi_flag = 0;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2200      	movs	r2, #0
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff fca3 	bl	800695c <disk_ioctl>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <sync_fs+0xcc>
 800701c:	2301      	movs	r3, #1
 800701e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	41615252 	.word	0x41615252
 8007030:	61417272 	.word	0x61417272

08007034 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	3b02      	subs	r3, #2
 8007042:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	3b02      	subs	r3, #2
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d301      	bcc.n	8007054 <clust2sect+0x20>
 8007050:	2300      	movs	r3, #0
 8007052:	e008      	b.n	8007066 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	895b      	ldrh	r3, [r3, #10]
 8007058:	461a      	mov	r2, r3
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	fb03 f202 	mul.w	r2, r3, r2
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	4413      	add	r3, r2
}
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b086      	sub	sp, #24
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d904      	bls.n	8007092 <get_fat+0x20>
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	429a      	cmp	r2, r3
 8007090:	d302      	bcc.n	8007098 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007092:	2301      	movs	r3, #1
 8007094:	617b      	str	r3, [r7, #20]
 8007096:	e0bb      	b.n	8007210 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007098:	f04f 33ff 	mov.w	r3, #4294967295
 800709c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	f000 8083 	beq.w	80071ae <get_fat+0x13c>
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	f300 80a7 	bgt.w	80071fc <get_fat+0x18a>
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d002      	beq.n	80070b8 <get_fat+0x46>
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d056      	beq.n	8007164 <get_fat+0xf2>
 80070b6:	e0a1      	b.n	80071fc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	899b      	ldrh	r3, [r3, #12]
 80070ce:	4619      	mov	r1, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80070d6:	4413      	add	r3, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	6938      	ldr	r0, [r7, #16]
 80070dc:	f7ff ff0c 	bl	8006ef8 <move_window>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f040 808d 	bne.w	8007202 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	60fa      	str	r2, [r7, #12]
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	8992      	ldrh	r2, [r2, #12]
 80070f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80070f6:	fb01 f202 	mul.w	r2, r1, r2
 80070fa:	1a9b      	subs	r3, r3, r2
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	4413      	add	r3, r2
 8007100:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007104:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	899b      	ldrh	r3, [r3, #12]
 800710e:	4619      	mov	r1, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	fbb3 f3f1 	udiv	r3, r3, r1
 8007116:	4413      	add	r3, r2
 8007118:	4619      	mov	r1, r3
 800711a:	6938      	ldr	r0, [r7, #16]
 800711c:	f7ff feec 	bl	8006ef8 <move_window>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d16f      	bne.n	8007206 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	899b      	ldrh	r3, [r3, #12]
 800712a:	461a      	mov	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007132:	fb01 f202 	mul.w	r2, r1, r2
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4413      	add	r3, r2
 800713c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	461a      	mov	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4313      	orrs	r3, r2
 8007148:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <get_fat+0xe8>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	091b      	lsrs	r3, r3, #4
 8007158:	e002      	b.n	8007160 <get_fat+0xee>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007160:	617b      	str	r3, [r7, #20]
			break;
 8007162:	e055      	b.n	8007210 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	899b      	ldrh	r3, [r3, #12]
 800716c:	085b      	lsrs	r3, r3, #1
 800716e:	b29b      	uxth	r3, r3
 8007170:	4619      	mov	r1, r3
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	fbb3 f3f1 	udiv	r3, r3, r1
 8007178:	4413      	add	r3, r2
 800717a:	4619      	mov	r1, r3
 800717c:	6938      	ldr	r0, [r7, #16]
 800717e:	f7ff febb 	bl	8006ef8 <move_window>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d140      	bne.n	800720a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	8992      	ldrh	r2, [r2, #12]
 8007196:	fbb3 f0f2 	udiv	r0, r3, r2
 800719a:	fb00 f202 	mul.w	r2, r0, r2
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	440b      	add	r3, r1
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7ff fbf8 	bl	8006998 <ld_word>
 80071a8:	4603      	mov	r3, r0
 80071aa:	617b      	str	r3, [r7, #20]
			break;
 80071ac:	e030      	b.n	8007210 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	899b      	ldrh	r3, [r3, #12]
 80071b6:	089b      	lsrs	r3, r3, #2
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	4619      	mov	r1, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	fbb3 f3f1 	udiv	r3, r3, r1
 80071c2:	4413      	add	r3, r2
 80071c4:	4619      	mov	r1, r3
 80071c6:	6938      	ldr	r0, [r7, #16]
 80071c8:	f7ff fe96 	bl	8006ef8 <move_window>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d11d      	bne.n	800720e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	8992      	ldrh	r2, [r2, #12]
 80071e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80071e4:	fb00 f202 	mul.w	r2, r0, r2
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	440b      	add	r3, r1
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff fbeb 	bl	80069c8 <ld_dword>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80071f8:	617b      	str	r3, [r7, #20]
			break;
 80071fa:	e009      	b.n	8007210 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80071fc:	2301      	movs	r3, #1
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	e006      	b.n	8007210 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007202:	bf00      	nop
 8007204:	e004      	b.n	8007210 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007206:	bf00      	nop
 8007208:	e002      	b.n	8007210 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800720a:	bf00      	nop
 800720c:	e000      	b.n	8007210 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800720e:	bf00      	nop
		}
	}

	return val;
 8007210:	697b      	ldr	r3, [r7, #20]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800721a:	b590      	push	{r4, r7, lr}
 800721c:	b089      	sub	sp, #36	; 0x24
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007226:	2302      	movs	r3, #2
 8007228:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b01      	cmp	r3, #1
 800722e:	f240 8102 	bls.w	8007436 <put_fat+0x21c>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	429a      	cmp	r2, r3
 800723a:	f080 80fc 	bcs.w	8007436 <put_fat+0x21c>
		switch (fs->fs_type) {
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b03      	cmp	r3, #3
 8007244:	f000 80b6 	beq.w	80073b4 <put_fat+0x19a>
 8007248:	2b03      	cmp	r3, #3
 800724a:	f300 80fd 	bgt.w	8007448 <put_fat+0x22e>
 800724e:	2b01      	cmp	r3, #1
 8007250:	d003      	beq.n	800725a <put_fat+0x40>
 8007252:	2b02      	cmp	r3, #2
 8007254:	f000 8083 	beq.w	800735e <put_fat+0x144>
 8007258:	e0f6      	b.n	8007448 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	085b      	lsrs	r3, r3, #1
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	4413      	add	r3, r2
 8007266:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	899b      	ldrh	r3, [r3, #12]
 8007270:	4619      	mov	r1, r3
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	fbb3 f3f1 	udiv	r3, r3, r1
 8007278:	4413      	add	r3, r2
 800727a:	4619      	mov	r1, r3
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f7ff fe3b 	bl	8006ef8 <move_window>
 8007282:	4603      	mov	r3, r0
 8007284:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007286:	7ffb      	ldrb	r3, [r7, #31]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f040 80d6 	bne.w	800743a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	61ba      	str	r2, [r7, #24]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	8992      	ldrh	r2, [r2, #12]
 800729e:	fbb3 f0f2 	udiv	r0, r3, r2
 80072a2:	fb00 f202 	mul.w	r2, r0, r2
 80072a6:	1a9b      	subs	r3, r3, r2
 80072a8:	440b      	add	r3, r1
 80072aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00d      	beq.n	80072d2 <put_fat+0xb8>
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	b25b      	sxtb	r3, r3
 80072bc:	f003 030f 	and.w	r3, r3, #15
 80072c0:	b25a      	sxtb	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	b25b      	sxtb	r3, r3
 80072ca:	4313      	orrs	r3, r2
 80072cc:	b25b      	sxtb	r3, r3
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	e001      	b.n	80072d6 <put_fat+0xbc>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	899b      	ldrh	r3, [r3, #12]
 80072e8:	4619      	mov	r1, r3
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80072f0:	4413      	add	r3, r2
 80072f2:	4619      	mov	r1, r3
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7ff fdff 	bl	8006ef8 <move_window>
 80072fa:	4603      	mov	r3, r0
 80072fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072fe:	7ffb      	ldrb	r3, [r7, #31]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f040 809c 	bne.w	800743e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	899b      	ldrh	r3, [r3, #12]
 8007310:	461a      	mov	r2, r3
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	fbb3 f0f2 	udiv	r0, r3, r2
 8007318:	fb00 f202 	mul.w	r2, r0, r2
 800731c:	1a9b      	subs	r3, r3, r2
 800731e:	440b      	add	r3, r1
 8007320:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <put_fat+0x11a>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	091b      	lsrs	r3, r3, #4
 8007330:	b2db      	uxtb	r3, r3
 8007332:	e00e      	b.n	8007352 <put_fat+0x138>
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	b25b      	sxtb	r3, r3
 800733a:	f023 030f 	bic.w	r3, r3, #15
 800733e:	b25a      	sxtb	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	0a1b      	lsrs	r3, r3, #8
 8007344:	b25b      	sxtb	r3, r3
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	b25b      	sxtb	r3, r3
 800734c:	4313      	orrs	r3, r2
 800734e:	b25b      	sxtb	r3, r3
 8007350:	b2db      	uxtb	r3, r3
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	70da      	strb	r2, [r3, #3]
			break;
 800735c:	e074      	b.n	8007448 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	899b      	ldrh	r3, [r3, #12]
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	b29b      	uxth	r3, r3
 800736a:	4619      	mov	r1, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007372:	4413      	add	r3, r2
 8007374:	4619      	mov	r1, r3
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff fdbe 	bl	8006ef8 <move_window>
 800737c:	4603      	mov	r3, r0
 800737e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007380:	7ffb      	ldrb	r3, [r7, #31]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d15d      	bne.n	8007442 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	8992      	ldrh	r2, [r2, #12]
 8007394:	fbb3 f0f2 	udiv	r0, r3, r2
 8007398:	fb00 f202 	mul.w	r2, r0, r2
 800739c:	1a9b      	subs	r3, r3, r2
 800739e:	440b      	add	r3, r1
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	b292      	uxth	r2, r2
 80073a4:	4611      	mov	r1, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fb31 	bl	8006a0e <st_word>
			fs->wflag = 1;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2201      	movs	r2, #1
 80073b0:	70da      	strb	r2, [r3, #3]
			break;
 80073b2:	e049      	b.n	8007448 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	899b      	ldrh	r3, [r3, #12]
 80073bc:	089b      	lsrs	r3, r3, #2
 80073be:	b29b      	uxth	r3, r3
 80073c0:	4619      	mov	r1, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80073c8:	4413      	add	r3, r2
 80073ca:	4619      	mov	r1, r3
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f7ff fd93 	bl	8006ef8 <move_window>
 80073d2:	4603      	mov	r3, r0
 80073d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073d6:	7ffb      	ldrb	r3, [r7, #31]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d134      	bne.n	8007446 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	8992      	ldrh	r2, [r2, #12]
 80073f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80073f4:	fb00 f202 	mul.w	r2, r0, r2
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	440b      	add	r3, r1
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff fae3 	bl	80069c8 <ld_dword>
 8007402:	4603      	mov	r3, r0
 8007404:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007408:	4323      	orrs	r3, r4
 800740a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	8992      	ldrh	r2, [r2, #12]
 800741a:	fbb3 f0f2 	udiv	r0, r3, r2
 800741e:	fb00 f202 	mul.w	r2, r0, r2
 8007422:	1a9b      	subs	r3, r3, r2
 8007424:	440b      	add	r3, r1
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff fb0b 	bl	8006a44 <st_dword>
			fs->wflag = 1;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2201      	movs	r2, #1
 8007432:	70da      	strb	r2, [r3, #3]
			break;
 8007434:	e008      	b.n	8007448 <put_fat+0x22e>
		}
	}
 8007436:	bf00      	nop
 8007438:	e006      	b.n	8007448 <put_fat+0x22e>
			if (res != FR_OK) break;
 800743a:	bf00      	nop
 800743c:	e004      	b.n	8007448 <put_fat+0x22e>
			if (res != FR_OK) break;
 800743e:	bf00      	nop
 8007440:	e002      	b.n	8007448 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007442:	bf00      	nop
 8007444:	e000      	b.n	8007448 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007446:	bf00      	nop
	return res;
 8007448:	7ffb      	ldrb	r3, [r7, #31]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3724      	adds	r7, #36	; 0x24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd90      	pop	{r4, r7, pc}

08007452 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b088      	sub	sp, #32
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d904      	bls.n	8007478 <remove_chain+0x26>
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	429a      	cmp	r2, r3
 8007476:	d301      	bcc.n	800747c <remove_chain+0x2a>
 8007478:	2302      	movs	r3, #2
 800747a:	e04b      	b.n	8007514 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00c      	beq.n	800749c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007482:	f04f 32ff 	mov.w	r2, #4294967295
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	69b8      	ldr	r0, [r7, #24]
 800748a:	f7ff fec6 	bl	800721a <put_fat>
 800748e:	4603      	mov	r3, r0
 8007490:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007492:	7ffb      	ldrb	r3, [r7, #31]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <remove_chain+0x4a>
 8007498:	7ffb      	ldrb	r3, [r7, #31]
 800749a:	e03b      	b.n	8007514 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f7ff fde7 	bl	8007072 <get_fat>
 80074a4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d031      	beq.n	8007510 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <remove_chain+0x64>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e02e      	b.n	8007514 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d101      	bne.n	80074c2 <remove_chain+0x70>
 80074be:	2301      	movs	r3, #1
 80074c0:	e028      	b.n	8007514 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80074c2:	2200      	movs	r2, #0
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	69b8      	ldr	r0, [r7, #24]
 80074c8:	f7ff fea7 	bl	800721a <put_fat>
 80074cc:	4603      	mov	r3, r0
 80074ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80074d0:	7ffb      	ldrb	r3, [r7, #31]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <remove_chain+0x88>
 80074d6:	7ffb      	ldrb	r3, [r7, #31]
 80074d8:	e01c      	b.n	8007514 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	695a      	ldr	r2, [r3, #20]
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	3b02      	subs	r3, #2
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d20b      	bcs.n	8007500 <remove_chain+0xae>
			fs->free_clst++;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	791b      	ldrb	r3, [r3, #4]
 80074f6:	f043 0301 	orr.w	r3, r3, #1
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	429a      	cmp	r2, r3
 800750c:	d3c6      	bcc.n	800749c <remove_chain+0x4a>
 800750e:	e000      	b.n	8007512 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007510:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3720      	adds	r7, #32
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10d      	bne.n	800754e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d004      	beq.n	8007548 <create_chain+0x2c>
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	429a      	cmp	r2, r3
 8007546:	d31b      	bcc.n	8007580 <create_chain+0x64>
 8007548:	2301      	movs	r3, #1
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	e018      	b.n	8007580 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff fd8e 	bl	8007072 <get_fat>
 8007556:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d801      	bhi.n	8007562 <create_chain+0x46>
 800755e:	2301      	movs	r3, #1
 8007560:	e070      	b.n	8007644 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007568:	d101      	bne.n	800756e <create_chain+0x52>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	e06a      	b.n	8007644 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	429a      	cmp	r2, r3
 8007576:	d201      	bcs.n	800757c <create_chain+0x60>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	e063      	b.n	8007644 <create_chain+0x128>
		scl = clst;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	3301      	adds	r3, #1
 8007588:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	429a      	cmp	r2, r3
 8007592:	d307      	bcc.n	80075a4 <create_chain+0x88>
				ncl = 2;
 8007594:	2302      	movs	r3, #2
 8007596:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	429a      	cmp	r2, r3
 800759e:	d901      	bls.n	80075a4 <create_chain+0x88>
 80075a0:	2300      	movs	r3, #0
 80075a2:	e04f      	b.n	8007644 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80075a4:	69f9      	ldr	r1, [r7, #28]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff fd63 	bl	8007072 <get_fat>
 80075ac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00e      	beq.n	80075d2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d003      	beq.n	80075c2 <create_chain+0xa6>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c0:	d101      	bne.n	80075c6 <create_chain+0xaa>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	e03e      	b.n	8007644 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d1da      	bne.n	8007584 <create_chain+0x68>
 80075ce:	2300      	movs	r3, #0
 80075d0:	e038      	b.n	8007644 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80075d2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80075d4:	f04f 32ff 	mov.w	r2, #4294967295
 80075d8:	69f9      	ldr	r1, [r7, #28]
 80075da:	6938      	ldr	r0, [r7, #16]
 80075dc:	f7ff fe1d 	bl	800721a <put_fat>
 80075e0:	4603      	mov	r3, r0
 80075e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <create_chain+0xe2>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d006      	beq.n	80075fe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80075f0:	69fa      	ldr	r2, [r7, #28]
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6938      	ldr	r0, [r7, #16]
 80075f6:	f7ff fe10 	bl	800721a <put_fat>
 80075fa:	4603      	mov	r3, r0
 80075fc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d116      	bne.n	8007632 <create_chain+0x116>
		fs->last_clst = ncl;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	695a      	ldr	r2, [r3, #20]
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	3b02      	subs	r3, #2
 8007614:	429a      	cmp	r2, r3
 8007616:	d804      	bhi.n	8007622 <create_chain+0x106>
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	1e5a      	subs	r2, r3, #1
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	791b      	ldrb	r3, [r3, #4]
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	b2da      	uxtb	r2, r3
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	711a      	strb	r2, [r3, #4]
 8007630:	e007      	b.n	8007642 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d102      	bne.n	800763e <create_chain+0x122>
 8007638:	f04f 33ff 	mov.w	r3, #4294967295
 800763c:	e000      	b.n	8007640 <create_chain+0x124>
 800763e:	2301      	movs	r3, #1
 8007640:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007642:	69fb      	ldr	r3, [r7, #28]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3720      	adds	r7, #32
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	3304      	adds	r3, #4
 8007662:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	899b      	ldrh	r3, [r3, #12]
 8007668:	461a      	mov	r2, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	8952      	ldrh	r2, [r2, #10]
 8007674:	fbb3 f3f2 	udiv	r3, r3, r2
 8007678:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	1d1a      	adds	r2, r3, #4
 800767e:	613a      	str	r2, [r7, #16]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <clmt_clust+0x42>
 800768a:	2300      	movs	r3, #0
 800768c:	e010      	b.n	80076b0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	429a      	cmp	r2, r3
 8007694:	d307      	bcc.n	80076a6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	617b      	str	r3, [r7, #20]
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	3304      	adds	r3, #4
 80076a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80076a4:	e7e9      	b.n	800767a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80076a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	4413      	add	r3, r2
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	371c      	adds	r7, #28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076d2:	d204      	bcs.n	80076de <dir_sdi+0x22>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	f003 031f 	and.w	r3, r3, #31
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80076de:	2302      	movs	r3, #2
 80076e0:	e071      	b.n	80077c6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d106      	bne.n	8007702 <dir_sdi+0x46>
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d902      	bls.n	8007702 <dir_sdi+0x46>
		clst = fs->dirbase;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10c      	bne.n	8007722 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	8912      	ldrh	r2, [r2, #8]
 8007710:	4293      	cmp	r3, r2
 8007712:	d301      	bcc.n	8007718 <dir_sdi+0x5c>
 8007714:	2302      	movs	r3, #2
 8007716:	e056      	b.n	80077c6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	61da      	str	r2, [r3, #28]
 8007720:	e02d      	b.n	800777e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	895b      	ldrh	r3, [r3, #10]
 8007726:	461a      	mov	r2, r3
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	899b      	ldrh	r3, [r3, #12]
 800772c:	fb02 f303 	mul.w	r3, r2, r3
 8007730:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007732:	e019      	b.n	8007768 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6979      	ldr	r1, [r7, #20]
 8007738:	4618      	mov	r0, r3
 800773a:	f7ff fc9a 	bl	8007072 <get_fat>
 800773e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007746:	d101      	bne.n	800774c <dir_sdi+0x90>
 8007748:	2301      	movs	r3, #1
 800774a:	e03c      	b.n	80077c6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d904      	bls.n	800775c <dir_sdi+0xa0>
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	429a      	cmp	r2, r3
 800775a:	d301      	bcc.n	8007760 <dir_sdi+0xa4>
 800775c:	2302      	movs	r3, #2
 800775e:	e032      	b.n	80077c6 <dir_sdi+0x10a>
			ofs -= csz;
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	429a      	cmp	r2, r3
 800776e:	d2e1      	bcs.n	8007734 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007770:	6979      	ldr	r1, [r7, #20]
 8007772:	6938      	ldr	r0, [r7, #16]
 8007774:	f7ff fc5e 	bl	8007034 <clust2sect>
 8007778:	4602      	mov	r2, r0
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <dir_sdi+0xd4>
 800778c:	2302      	movs	r3, #2
 800778e:	e01a      	b.n	80077c6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	69da      	ldr	r2, [r3, #28]
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	899b      	ldrh	r3, [r3, #12]
 8007798:	4619      	mov	r1, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	fbb3 f3f1 	udiv	r3, r3, r1
 80077a0:	441a      	add	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	899b      	ldrh	r3, [r3, #12]
 80077b0:	461a      	mov	r2, r3
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80077b8:	fb00 f202 	mul.w	r2, r0, r2
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	18ca      	adds	r2, r1, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b086      	sub	sp, #24
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	3320      	adds	r3, #32
 80077e4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <dir_next+0x28>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077f4:	d301      	bcc.n	80077fa <dir_next+0x2c>
 80077f6:	2304      	movs	r3, #4
 80077f8:	e0bb      	b.n	8007972 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	899b      	ldrh	r3, [r3, #12]
 80077fe:	461a      	mov	r2, r3
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	fbb3 f1f2 	udiv	r1, r3, r2
 8007806:	fb01 f202 	mul.w	r2, r1, r2
 800780a:	1a9b      	subs	r3, r3, r2
 800780c:	2b00      	cmp	r3, #0
 800780e:	f040 809d 	bne.w	800794c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10b      	bne.n	800783c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	095b      	lsrs	r3, r3, #5
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	8912      	ldrh	r2, [r2, #8]
 800782c:	4293      	cmp	r3, r2
 800782e:	f0c0 808d 	bcc.w	800794c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	61da      	str	r2, [r3, #28]
 8007838:	2304      	movs	r3, #4
 800783a:	e09a      	b.n	8007972 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	899b      	ldrh	r3, [r3, #12]
 8007840:	461a      	mov	r2, r3
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	fbb3 f3f2 	udiv	r3, r3, r2
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	8952      	ldrh	r2, [r2, #10]
 800784c:	3a01      	subs	r2, #1
 800784e:	4013      	ands	r3, r2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d17b      	bne.n	800794c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	4619      	mov	r1, r3
 800785c:	4610      	mov	r0, r2
 800785e:	f7ff fc08 	bl	8007072 <get_fat>
 8007862:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d801      	bhi.n	800786e <dir_next+0xa0>
 800786a:	2302      	movs	r3, #2
 800786c:	e081      	b.n	8007972 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d101      	bne.n	800787a <dir_next+0xac>
 8007876:	2301      	movs	r3, #1
 8007878:	e07b      	b.n	8007972 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	429a      	cmp	r2, r3
 8007882:	d359      	bcc.n	8007938 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d104      	bne.n	8007894 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	61da      	str	r2, [r3, #28]
 8007890:	2304      	movs	r3, #4
 8007892:	e06e      	b.n	8007972 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	4619      	mov	r1, r3
 800789c:	4610      	mov	r0, r2
 800789e:	f7ff fe3d 	bl	800751c <create_chain>
 80078a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <dir_next+0xe0>
 80078aa:	2307      	movs	r3, #7
 80078ac:	e061      	b.n	8007972 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <dir_next+0xea>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e05c      	b.n	8007972 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078be:	d101      	bne.n	80078c4 <dir_next+0xf6>
 80078c0:	2301      	movs	r3, #1
 80078c2:	e056      	b.n	8007972 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f7ff fad3 	bl	8006e70 <sync_window>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <dir_next+0x106>
 80078d0:	2301      	movs	r3, #1
 80078d2:	e04e      	b.n	8007972 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	899b      	ldrh	r3, [r3, #12]
 80078de:	461a      	mov	r2, r3
 80078e0:	2100      	movs	r1, #0
 80078e2:	f7ff f8fc 	bl	8006ade <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80078e6:	2300      	movs	r3, #0
 80078e8:	613b      	str	r3, [r7, #16]
 80078ea:	6979      	ldr	r1, [r7, #20]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f7ff fba1 	bl	8007034 <clust2sect>
 80078f2:	4602      	mov	r2, r0
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	631a      	str	r2, [r3, #48]	; 0x30
 80078f8:	e012      	b.n	8007920 <dir_next+0x152>
						fs->wflag = 1;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2201      	movs	r2, #1
 80078fe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f7ff fab5 	bl	8006e70 <sync_window>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <dir_next+0x142>
 800790c:	2301      	movs	r3, #1
 800790e:	e030      	b.n	8007972 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	3301      	adds	r3, #1
 8007914:	613b      	str	r3, [r7, #16]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	631a      	str	r2, [r3, #48]	; 0x30
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	895b      	ldrh	r3, [r3, #10]
 8007924:	461a      	mov	r2, r3
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	4293      	cmp	r3, r2
 800792a:	d3e6      	bcc.n	80078fa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad2      	subs	r2, r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800793e:	6979      	ldr	r1, [r7, #20]
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f7ff fb77 	bl	8007034 <clust2sect>
 8007946:	4602      	mov	r2, r0
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	899b      	ldrh	r3, [r3, #12]
 800795c:	461a      	mov	r2, r3
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	fbb3 f0f2 	udiv	r0, r3, r2
 8007964:	fb00 f202 	mul.w	r2, r0, r2
 8007968:	1a9b      	subs	r3, r3, r2
 800796a:	18ca      	adds	r2, r1, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b086      	sub	sp, #24
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800798a:	2100      	movs	r1, #0
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fe95 	bl	80076bc <dir_sdi>
 8007992:	4603      	mov	r3, r0
 8007994:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d12b      	bne.n	80079f4 <dir_alloc+0x7a>
		n = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	4619      	mov	r1, r3
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f7ff faa6 	bl	8006ef8 <move_window>
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d11d      	bne.n	80079f2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2be5      	cmp	r3, #229	; 0xe5
 80079be:	d004      	beq.n	80079ca <dir_alloc+0x50>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d107      	bne.n	80079da <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	3301      	adds	r3, #1
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d102      	bne.n	80079de <dir_alloc+0x64>
 80079d8:	e00c      	b.n	80079f4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80079da:	2300      	movs	r3, #0
 80079dc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80079de:	2101      	movs	r1, #1
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff fef4 	bl	80077ce <dir_next>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0d7      	beq.n	80079a0 <dir_alloc+0x26>
 80079f0:	e000      	b.n	80079f4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80079f2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d101      	bne.n	80079fe <dir_alloc+0x84>
 80079fa:	2307      	movs	r3, #7
 80079fc:	75fb      	strb	r3, [r7, #23]
	return res;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	331a      	adds	r3, #26
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe ffbe 	bl	8006998 <ld_word>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d109      	bne.n	8007a3c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	3314      	adds	r3, #20
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe ffb3 	bl	8006998 <ld_word>
 8007a32:	4603      	mov	r3, r0
 8007a34:	041b      	lsls	r3, r3, #16
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	331a      	adds	r3, #26
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	b292      	uxth	r2, r2
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe ffd6 	bl	8006a0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d109      	bne.n	8007a7e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f103 0214 	add.w	r2, r3, #20
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	0c1b      	lsrs	r3, r3, #16
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	4619      	mov	r1, r3
 8007a78:	4610      	mov	r0, r2
 8007a7a:	f7fe ffc8 	bl	8006a0e <st_word>
	}
}
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b086      	sub	sp, #24
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007a94:	2100      	movs	r1, #0
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff fe10 	bl	80076bc <dir_sdi>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <dir_find+0x24>
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	e03e      	b.n	8007b28 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6938      	ldr	r0, [r7, #16]
 8007ab2:	f7ff fa21 	bl	8006ef8 <move_window>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d12f      	bne.n	8007b20 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d102      	bne.n	8007ad4 <dir_find+0x4e>
 8007ace:	2304      	movs	r3, #4
 8007ad0:	75fb      	strb	r3, [r7, #23]
 8007ad2:	e028      	b.n	8007b26 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	330b      	adds	r3, #11
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	330b      	adds	r3, #11
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <dir_find+0x86>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a18      	ldr	r0, [r3, #32]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3324      	adds	r3, #36	; 0x24
 8007afe:	220b      	movs	r2, #11
 8007b00:	4619      	mov	r1, r3
 8007b02:	f7ff f807 	bl	8006b14 <mem_cmp>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff fe5d 	bl	80077ce <dir_next>
 8007b14:	4603      	mov	r3, r0
 8007b16:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0c5      	beq.n	8007aaa <dir_find+0x24>
 8007b1e:	e002      	b.n	8007b26 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007b20:	bf00      	nop
 8007b22:	e000      	b.n	8007b26 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007b24:	bf00      	nop

	return res;
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007b3e:	2101      	movs	r1, #1
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff ff1a 	bl	800797a <dir_alloc>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d11c      	bne.n	8007b8a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	4619      	mov	r1, r3
 8007b56:	68b8      	ldr	r0, [r7, #8]
 8007b58:	f7ff f9ce 	bl	8006ef8 <move_window>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d111      	bne.n	8007b8a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe ffb5 	bl	8006ade <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a18      	ldr	r0, [r3, #32]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3324      	adds	r3, #36	; 0x24
 8007b7c:	220b      	movs	r2, #11
 8007b7e:	4619      	mov	r1, r3
 8007b80:	f7fe ff8c 	bl	8006a9c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2201      	movs	r2, #1
 8007b88:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d04e      	beq.n	8007c4a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	613b      	str	r3, [r7, #16]
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007bb4:	e021      	b.n	8007bfa <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1a      	ldr	r2, [r3, #32]
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	1c59      	adds	r1, r3, #1
 8007bbe:	6179      	str	r1, [r7, #20]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d100      	bne.n	8007bce <get_fileinfo+0x3a>
 8007bcc:	e015      	b.n	8007bfa <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	2b05      	cmp	r3, #5
 8007bd2:	d101      	bne.n	8007bd8 <get_fileinfo+0x44>
 8007bd4:	23e5      	movs	r3, #229	; 0xe5
 8007bd6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2b09      	cmp	r3, #9
 8007bdc:	d106      	bne.n	8007bec <get_fileinfo+0x58>
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	613a      	str	r2, [r7, #16]
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	4413      	add	r3, r2
 8007be8:	222e      	movs	r2, #46	; 0x2e
 8007bea:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	613a      	str	r2, [r7, #16]
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	7bfa      	ldrb	r2, [r7, #15]
 8007bf8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b0a      	cmp	r3, #10
 8007bfe:	d9da      	bls.n	8007bb6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	4413      	add	r3, r2
 8007c06:	3309      	adds	r3, #9
 8007c08:	2200      	movs	r2, #0
 8007c0a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	7ada      	ldrb	r2, [r3, #11]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	331c      	adds	r3, #28
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe fed3 	bl	80069c8 <ld_dword>
 8007c22:	4602      	mov	r2, r0
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	3316      	adds	r3, #22
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe feca 	bl	80069c8 <ld_dword>
 8007c34:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	80da      	strh	r2, [r3, #6]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	0c1b      	lsrs	r3, r3, #16
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	809a      	strh	r2, [r3, #4]
 8007c48:	e000      	b.n	8007c4c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007c4a:	bf00      	nop
}
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3324      	adds	r3, #36	; 0x24
 8007c68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007c6a:	220b      	movs	r2, #11
 8007c6c:	2120      	movs	r1, #32
 8007c6e:	68b8      	ldr	r0, [r7, #8]
 8007c70:	f7fe ff35 	bl	8006ade <mem_set>
	si = i = 0; ni = 8;
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	61fb      	str	r3, [r7, #28]
 8007c7c:	2308      	movs	r3, #8
 8007c7e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	61fa      	str	r2, [r7, #28]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4413      	add	r3, r2
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007c8e:	7efb      	ldrb	r3, [r7, #27]
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	d94e      	bls.n	8007d32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007c94:	7efb      	ldrb	r3, [r7, #27]
 8007c96:	2b2f      	cmp	r3, #47	; 0x2f
 8007c98:	d006      	beq.n	8007ca8 <create_name+0x54>
 8007c9a:	7efb      	ldrb	r3, [r7, #27]
 8007c9c:	2b5c      	cmp	r3, #92	; 0x5c
 8007c9e:	d110      	bne.n	8007cc2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007ca0:	e002      	b.n	8007ca8 <create_name+0x54>
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	61fb      	str	r3, [r7, #28]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	4413      	add	r3, r2
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b2f      	cmp	r3, #47	; 0x2f
 8007cb2:	d0f6      	beq.n	8007ca2 <create_name+0x4e>
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	4413      	add	r3, r2
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b5c      	cmp	r3, #92	; 0x5c
 8007cbe:	d0f0      	beq.n	8007ca2 <create_name+0x4e>
			break;
 8007cc0:	e038      	b.n	8007d34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007cc2:	7efb      	ldrb	r3, [r7, #27]
 8007cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8007cc6:	d003      	beq.n	8007cd0 <create_name+0x7c>
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d30c      	bcc.n	8007cea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b0b      	cmp	r3, #11
 8007cd4:	d002      	beq.n	8007cdc <create_name+0x88>
 8007cd6:	7efb      	ldrb	r3, [r7, #27]
 8007cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8007cda:	d001      	beq.n	8007ce0 <create_name+0x8c>
 8007cdc:	2306      	movs	r3, #6
 8007cde:	e044      	b.n	8007d6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007ce0:	2308      	movs	r3, #8
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	230b      	movs	r3, #11
 8007ce6:	617b      	str	r3, [r7, #20]
			continue;
 8007ce8:	e022      	b.n	8007d30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007cea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	da04      	bge.n	8007cfc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007cf2:	7efb      	ldrb	r3, [r7, #27]
 8007cf4:	3b80      	subs	r3, #128	; 0x80
 8007cf6:	4a1f      	ldr	r2, [pc, #124]	; (8007d74 <create_name+0x120>)
 8007cf8:	5cd3      	ldrb	r3, [r2, r3]
 8007cfa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007cfc:	7efb      	ldrb	r3, [r7, #27]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	481d      	ldr	r0, [pc, #116]	; (8007d78 <create_name+0x124>)
 8007d02:	f7fe ff2e 	bl	8006b62 <chk_chr>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <create_name+0xbc>
 8007d0c:	2306      	movs	r3, #6
 8007d0e:	e02c      	b.n	8007d6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007d10:	7efb      	ldrb	r3, [r7, #27]
 8007d12:	2b60      	cmp	r3, #96	; 0x60
 8007d14:	d905      	bls.n	8007d22 <create_name+0xce>
 8007d16:	7efb      	ldrb	r3, [r7, #27]
 8007d18:	2b7a      	cmp	r3, #122	; 0x7a
 8007d1a:	d802      	bhi.n	8007d22 <create_name+0xce>
 8007d1c:	7efb      	ldrb	r3, [r7, #27]
 8007d1e:	3b20      	subs	r3, #32
 8007d20:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	613a      	str	r2, [r7, #16]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	7efa      	ldrb	r2, [r7, #27]
 8007d2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007d30:	e7a6      	b.n	8007c80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007d32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	441a      	add	r2, r3
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <create_name+0xf4>
 8007d44:	2306      	movs	r3, #6
 8007d46:	e010      	b.n	8007d6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2be5      	cmp	r3, #229	; 0xe5
 8007d4e:	d102      	bne.n	8007d56 <create_name+0x102>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2205      	movs	r2, #5
 8007d54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007d56:	7efb      	ldrb	r3, [r7, #27]
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	d801      	bhi.n	8007d60 <create_name+0x10c>
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	e000      	b.n	8007d62 <create_name+0x10e>
 8007d60:	2200      	movs	r2, #0
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	330b      	adds	r3, #11
 8007d66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007d68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3720      	adds	r7, #32
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	0800baa4 	.word	0x0800baa4
 8007d78:	0800ba2c 	.word	0x0800ba2c

08007d7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007d90:	e002      	b.n	8007d98 <follow_path+0x1c>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b2f      	cmp	r3, #47	; 0x2f
 8007d9e:	d0f8      	beq.n	8007d92 <follow_path+0x16>
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b5c      	cmp	r3, #92	; 0x5c
 8007da6:	d0f4      	beq.n	8007d92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	2200      	movs	r2, #0
 8007dac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b1f      	cmp	r3, #31
 8007db4:	d80a      	bhi.n	8007dcc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2280      	movs	r2, #128	; 0x80
 8007dba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff fc7b 	bl	80076bc <dir_sdi>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]
 8007dca:	e048      	b.n	8007e5e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007dcc:	463b      	mov	r3, r7
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff ff3f 	bl	8007c54 <create_name>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d139      	bne.n	8007e54 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff fe50 	bl	8007a86 <dir_find>
 8007de6:	4603      	mov	r3, r0
 8007de8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007df0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d12c      	bne.n	8007e58 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	f003 0304 	and.w	r3, r3, #4
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d127      	bne.n	8007e58 <follow_path+0xdc>
 8007e08:	2305      	movs	r3, #5
 8007e0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007e0c:	e024      	b.n	8007e58 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e0e:	7afb      	ldrb	r3, [r7, #11]
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d121      	bne.n	8007e5c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	799b      	ldrb	r3, [r3, #6]
 8007e1c:	f003 0310 	and.w	r3, r3, #16
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007e24:	2305      	movs	r3, #5
 8007e26:	75fb      	strb	r3, [r7, #23]
 8007e28:	e019      	b.n	8007e5e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	8992      	ldrh	r2, [r2, #12]
 8007e38:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e3c:	fb00 f202 	mul.w	r2, r0, r2
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	440b      	add	r3, r1
 8007e44:	4619      	mov	r1, r3
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f7ff fdde 	bl	8007a08 <ld_clust>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e52:	e7bb      	b.n	8007dcc <follow_path+0x50>
			if (res != FR_OK) break;
 8007e54:	bf00      	nop
 8007e56:	e002      	b.n	8007e5e <follow_path+0xe2>
				break;
 8007e58:	bf00      	nop
 8007e5a:	e000      	b.n	8007e5e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e5c:	bf00      	nop
			}
		}
	}

	return res;
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007e70:	f04f 33ff 	mov.w	r3, #4294967295
 8007e74:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d031      	beq.n	8007ee2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e002      	b.n	8007e8c <get_ldnumber+0x24>
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	d903      	bls.n	8007e9c <get_ldnumber+0x34>
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b3a      	cmp	r3, #58	; 0x3a
 8007e9a:	d1f4      	bne.n	8007e86 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b3a      	cmp	r3, #58	; 0x3a
 8007ea2:	d11c      	bne.n	8007ede <get_ldnumber+0x76>
			tp = *path;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	60fa      	str	r2, [r7, #12]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	3b30      	subs	r3, #48	; 0x30
 8007eb4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b09      	cmp	r3, #9
 8007eba:	d80e      	bhi.n	8007eda <get_ldnumber+0x72>
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d10a      	bne.n	8007eda <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d107      	bne.n	8007eda <get_ldnumber+0x72>
					vol = (int)i;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	617b      	str	r3, [r7, #20]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	e002      	b.n	8007ee4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ede:	2300      	movs	r3, #0
 8007ee0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007ee2:	693b      	ldr	r3, [r7, #16]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	371c      	adds	r7, #28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	70da      	strb	r2, [r3, #3]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f04f 32ff 	mov.w	r2, #4294967295
 8007f06:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7fe fff4 	bl	8006ef8 <move_window>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <check_fs+0x2a>
 8007f16:	2304      	movs	r3, #4
 8007f18:	e038      	b.n	8007f8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3334      	adds	r3, #52	; 0x34
 8007f1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fe fd38 	bl	8006998 <ld_word>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d001      	beq.n	8007f38 <check_fs+0x48>
 8007f34:	2303      	movs	r3, #3
 8007f36:	e029      	b.n	8007f8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f3e:	2be9      	cmp	r3, #233	; 0xe9
 8007f40:	d009      	beq.n	8007f56 <check_fs+0x66>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f48:	2beb      	cmp	r3, #235	; 0xeb
 8007f4a:	d11e      	bne.n	8007f8a <check_fs+0x9a>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007f52:	2b90      	cmp	r3, #144	; 0x90
 8007f54:	d119      	bne.n	8007f8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3334      	adds	r3, #52	; 0x34
 8007f5a:	3336      	adds	r3, #54	; 0x36
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fe fd33 	bl	80069c8 <ld_dword>
 8007f62:	4603      	mov	r3, r0
 8007f64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f68:	4a0a      	ldr	r2, [pc, #40]	; (8007f94 <check_fs+0xa4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d101      	bne.n	8007f72 <check_fs+0x82>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e00c      	b.n	8007f8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3334      	adds	r3, #52	; 0x34
 8007f76:	3352      	adds	r3, #82	; 0x52
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fe fd25 	bl	80069c8 <ld_dword>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	4a05      	ldr	r2, [pc, #20]	; (8007f98 <check_fs+0xa8>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d101      	bne.n	8007f8a <check_fs+0x9a>
 8007f86:	2300      	movs	r3, #0
 8007f88:	e000      	b.n	8007f8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007f8a:	2302      	movs	r3, #2
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	00544146 	.word	0x00544146
 8007f98:	33544146 	.word	0x33544146

08007f9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b096      	sub	sp, #88	; 0x58
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2200      	movs	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f7ff ff59 	bl	8007e68 <get_ldnumber>
 8007fb6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	da01      	bge.n	8007fc2 <find_volume+0x26>
 8007fbe:	230b      	movs	r3, #11
 8007fc0:	e262      	b.n	8008488 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007fc2:	4a9f      	ldr	r2, [pc, #636]	; (8008240 <find_volume+0x2a4>)
 8007fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <find_volume+0x3a>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	e258      	b.n	8008488 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	f023 0301 	bic.w	r3, r3, #1
 8007fe2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01a      	beq.n	8008022 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	785b      	ldrb	r3, [r3, #1]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fe fc33 	bl	800685c <disk_status>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10c      	bne.n	8008022 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d007      	beq.n	800801e <find_volume+0x82>
 800800e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008012:	f003 0304 	and.w	r3, r3, #4
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800801a:	230a      	movs	r3, #10
 800801c:	e234      	b.n	8008488 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800801e:	2300      	movs	r3, #0
 8008020:	e232      	b.n	8008488 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802a:	b2da      	uxtb	r2, r3
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008032:	785b      	ldrb	r3, [r3, #1]
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe fc2b 	bl	8006890 <disk_initialize>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008040:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800804c:	2303      	movs	r3, #3
 800804e:	e21b      	b.n	8008488 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d007      	beq.n	8008066 <find_volume+0xca>
 8008056:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008062:	230a      	movs	r3, #10
 8008064:	e210      	b.n	8008488 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008068:	7858      	ldrb	r0, [r3, #1]
 800806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806c:	330c      	adds	r3, #12
 800806e:	461a      	mov	r2, r3
 8008070:	2102      	movs	r1, #2
 8008072:	f7fe fc73 	bl	800695c <disk_ioctl>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <find_volume+0xe4>
 800807c:	2301      	movs	r3, #1
 800807e:	e203      	b.n	8008488 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	899b      	ldrh	r3, [r3, #12]
 8008084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008088:	d80d      	bhi.n	80080a6 <find_volume+0x10a>
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	899b      	ldrh	r3, [r3, #12]
 800808e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008092:	d308      	bcc.n	80080a6 <find_volume+0x10a>
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	899b      	ldrh	r3, [r3, #12]
 8008098:	461a      	mov	r2, r3
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	899b      	ldrh	r3, [r3, #12]
 800809e:	3b01      	subs	r3, #1
 80080a0:	4013      	ands	r3, r2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <find_volume+0x10e>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e1ee      	b.n	8008488 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80080ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080b2:	f7ff ff1d 	bl	8007ef0 <check_fs>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80080bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d149      	bne.n	8008158 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80080c4:	2300      	movs	r3, #0
 80080c6:	643b      	str	r3, [r7, #64]	; 0x40
 80080c8:	e01e      	b.n	8008108 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80080d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d2:	011b      	lsls	r3, r3, #4
 80080d4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80080d8:	4413      	add	r3, r2
 80080da:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	3304      	adds	r3, #4
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d006      	beq.n	80080f4 <find_volume+0x158>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	3308      	adds	r3, #8
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe fc6c 	bl	80069c8 <ld_dword>
 80080f0:	4602      	mov	r2, r0
 80080f2:	e000      	b.n	80080f6 <find_volume+0x15a>
 80080f4:	2200      	movs	r2, #0
 80080f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	3358      	adds	r3, #88	; 0x58
 80080fc:	443b      	add	r3, r7
 80080fe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008104:	3301      	adds	r3, #1
 8008106:	643b      	str	r3, [r7, #64]	; 0x40
 8008108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800810a:	2b03      	cmp	r3, #3
 800810c:	d9dd      	bls.n	80080ca <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800810e:	2300      	movs	r3, #0
 8008110:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <find_volume+0x182>
 8008118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800811a:	3b01      	subs	r3, #1
 800811c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800811e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	3358      	adds	r3, #88	; 0x58
 8008124:	443b      	add	r3, r7
 8008126:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800812a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800812c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800812e:	2b00      	cmp	r3, #0
 8008130:	d005      	beq.n	800813e <find_volume+0x1a2>
 8008132:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008134:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008136:	f7ff fedb 	bl	8007ef0 <check_fs>
 800813a:	4603      	mov	r3, r0
 800813c:	e000      	b.n	8008140 <find_volume+0x1a4>
 800813e:	2303      	movs	r3, #3
 8008140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008148:	2b01      	cmp	r3, #1
 800814a:	d905      	bls.n	8008158 <find_volume+0x1bc>
 800814c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800814e:	3301      	adds	r3, #1
 8008150:	643b      	str	r3, [r7, #64]	; 0x40
 8008152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008154:	2b03      	cmp	r3, #3
 8008156:	d9e2      	bls.n	800811e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008158:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800815c:	2b04      	cmp	r3, #4
 800815e:	d101      	bne.n	8008164 <find_volume+0x1c8>
 8008160:	2301      	movs	r3, #1
 8008162:	e191      	b.n	8008488 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008164:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008168:	2b01      	cmp	r3, #1
 800816a:	d901      	bls.n	8008170 <find_volume+0x1d4>
 800816c:	230d      	movs	r3, #13
 800816e:	e18b      	b.n	8008488 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	3334      	adds	r3, #52	; 0x34
 8008174:	330b      	adds	r3, #11
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fc0e 	bl	8006998 <ld_word>
 800817c:	4603      	mov	r3, r0
 800817e:	461a      	mov	r2, r3
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	899b      	ldrh	r3, [r3, #12]
 8008184:	429a      	cmp	r2, r3
 8008186:	d001      	beq.n	800818c <find_volume+0x1f0>
 8008188:	230d      	movs	r3, #13
 800818a:	e17d      	b.n	8008488 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	3334      	adds	r3, #52	; 0x34
 8008190:	3316      	adds	r3, #22
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe fc00 	bl	8006998 <ld_word>
 8008198:	4603      	mov	r3, r0
 800819a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800819c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <find_volume+0x214>
 80081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a4:	3334      	adds	r3, #52	; 0x34
 80081a6:	3324      	adds	r3, #36	; 0x24
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe fc0d 	bl	80069c8 <ld_dword>
 80081ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081b4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80081b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	789b      	ldrb	r3, [r3, #2]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d005      	beq.n	80081d4 <find_volume+0x238>
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	789b      	ldrb	r3, [r3, #2]
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d001      	beq.n	80081d4 <find_volume+0x238>
 80081d0:	230d      	movs	r3, #13
 80081d2:	e159      	b.n	8008488 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	789b      	ldrb	r3, [r3, #2]
 80081d8:	461a      	mov	r2, r3
 80081da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081dc:	fb02 f303 	mul.w	r3, r2, r3
 80081e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80081ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f0:	895b      	ldrh	r3, [r3, #10]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d008      	beq.n	8008208 <find_volume+0x26c>
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	895b      	ldrh	r3, [r3, #10]
 80081fa:	461a      	mov	r2, r3
 80081fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fe:	895b      	ldrh	r3, [r3, #10]
 8008200:	3b01      	subs	r3, #1
 8008202:	4013      	ands	r3, r2
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <find_volume+0x270>
 8008208:	230d      	movs	r3, #13
 800820a:	e13d      	b.n	8008488 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	3334      	adds	r3, #52	; 0x34
 8008210:	3311      	adds	r3, #17
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fbc0 	bl	8006998 <ld_word>
 8008218:	4603      	mov	r3, r0
 800821a:	461a      	mov	r2, r3
 800821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	891b      	ldrh	r3, [r3, #8]
 8008224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008226:	8992      	ldrh	r2, [r2, #12]
 8008228:	0952      	lsrs	r2, r2, #5
 800822a:	b292      	uxth	r2, r2
 800822c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008230:	fb01 f202 	mul.w	r2, r1, r2
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	b29b      	uxth	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <find_volume+0x2a8>
 800823c:	230d      	movs	r3, #13
 800823e:	e123      	b.n	8008488 <find_volume+0x4ec>
 8008240:	20002344 	.word	0x20002344

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	3334      	adds	r3, #52	; 0x34
 8008248:	3313      	adds	r3, #19
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe fba4 	bl	8006998 <ld_word>
 8008250:	4603      	mov	r3, r0
 8008252:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008256:	2b00      	cmp	r3, #0
 8008258:	d106      	bne.n	8008268 <find_volume+0x2cc>
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	3334      	adds	r3, #52	; 0x34
 800825e:	3320      	adds	r3, #32
 8008260:	4618      	mov	r0, r3
 8008262:	f7fe fbb1 	bl	80069c8 <ld_dword>
 8008266:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	3334      	adds	r3, #52	; 0x34
 800826c:	330e      	adds	r3, #14
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe fb92 	bl	8006998 <ld_word>
 8008274:	4603      	mov	r3, r0
 8008276:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008278:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <find_volume+0x2e6>
 800827e:	230d      	movs	r3, #13
 8008280:	e102      	b.n	8008488 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008282:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008286:	4413      	add	r3, r2
 8008288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800828a:	8911      	ldrh	r1, [r2, #8]
 800828c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800828e:	8992      	ldrh	r2, [r2, #12]
 8008290:	0952      	lsrs	r2, r2, #5
 8008292:	b292      	uxth	r2, r2
 8008294:	fbb1 f2f2 	udiv	r2, r1, r2
 8008298:	b292      	uxth	r2, r2
 800829a:	4413      	add	r3, r2
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800829e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d201      	bcs.n	80082aa <find_volume+0x30e>
 80082a6:	230d      	movs	r3, #13
 80082a8:	e0ee      	b.n	8008488 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80082aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082b2:	8952      	ldrh	r2, [r2, #10]
 80082b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <find_volume+0x328>
 80082c0:	230d      	movs	r3, #13
 80082c2:	e0e1      	b.n	8008488 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80082c4:	2303      	movs	r3, #3
 80082c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d802      	bhi.n	80082da <find_volume+0x33e>
 80082d4:	2302      	movs	r3, #2
 80082d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d802      	bhi.n	80082ea <find_volume+0x34e>
 80082e4:	2301      	movs	r3, #1
 80082e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	1c9a      	adds	r2, r3, #2
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082f6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80082f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082fc:	441a      	add	r2, r3
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008302:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	441a      	add	r2, r3
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800830c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008310:	2b03      	cmp	r3, #3
 8008312:	d11e      	bne.n	8008352 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	3334      	adds	r3, #52	; 0x34
 8008318:	332a      	adds	r3, #42	; 0x2a
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fb3c 	bl	8006998 <ld_word>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <find_volume+0x38e>
 8008326:	230d      	movs	r3, #13
 8008328:	e0ae      	b.n	8008488 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832c:	891b      	ldrh	r3, [r3, #8]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <find_volume+0x39a>
 8008332:	230d      	movs	r3, #13
 8008334:	e0a8      	b.n	8008488 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008338:	3334      	adds	r3, #52	; 0x34
 800833a:	332c      	adds	r3, #44	; 0x2c
 800833c:	4618      	mov	r0, r3
 800833e:	f7fe fb43 	bl	80069c8 <ld_dword>
 8008342:	4602      	mov	r2, r0
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	647b      	str	r3, [r7, #68]	; 0x44
 8008350:	e01f      	b.n	8008392 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	891b      	ldrh	r3, [r3, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <find_volume+0x3c2>
 800835a:	230d      	movs	r3, #13
 800835c:	e094      	b.n	8008488 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008364:	441a      	add	r2, r3
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800836a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800836e:	2b02      	cmp	r3, #2
 8008370:	d103      	bne.n	800837a <find_volume+0x3de>
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	e00a      	b.n	8008390 <find_volume+0x3f4>
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	699a      	ldr	r2, [r3, #24]
 800837e:	4613      	mov	r3, r2
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	4413      	add	r3, r2
 8008384:	085a      	lsrs	r2, r3, #1
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008390:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	69da      	ldr	r2, [r3, #28]
 8008396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008398:	899b      	ldrh	r3, [r3, #12]
 800839a:	4619      	mov	r1, r3
 800839c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800839e:	440b      	add	r3, r1
 80083a0:	3b01      	subs	r3, #1
 80083a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083a4:	8989      	ldrh	r1, [r1, #12]
 80083a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d201      	bcs.n	80083b2 <find_volume+0x416>
 80083ae:	230d      	movs	r3, #13
 80083b0:	e06a      	b.n	8008488 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	f04f 32ff 	mov.w	r2, #4294967295
 80083b8:	615a      	str	r2, [r3, #20]
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	695a      	ldr	r2, [r3, #20]
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	2280      	movs	r2, #128	; 0x80
 80083c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80083c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d149      	bne.n	8008464 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	3334      	adds	r3, #52	; 0x34
 80083d4:	3330      	adds	r3, #48	; 0x30
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fade 	bl	8006998 <ld_word>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d140      	bne.n	8008464 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80083e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e4:	3301      	adds	r3, #1
 80083e6:	4619      	mov	r1, r3
 80083e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083ea:	f7fe fd85 	bl	8006ef8 <move_window>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d137      	bne.n	8008464 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	2200      	movs	r2, #0
 80083f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	3334      	adds	r3, #52	; 0x34
 80083fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fac8 	bl	8006998 <ld_word>
 8008408:	4603      	mov	r3, r0
 800840a:	461a      	mov	r2, r3
 800840c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008410:	429a      	cmp	r2, r3
 8008412:	d127      	bne.n	8008464 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	3334      	adds	r3, #52	; 0x34
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe fad5 	bl	80069c8 <ld_dword>
 800841e:	4603      	mov	r3, r0
 8008420:	4a1b      	ldr	r2, [pc, #108]	; (8008490 <find_volume+0x4f4>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d11e      	bne.n	8008464 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	3334      	adds	r3, #52	; 0x34
 800842a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe faca 	bl	80069c8 <ld_dword>
 8008434:	4603      	mov	r3, r0
 8008436:	4a17      	ldr	r2, [pc, #92]	; (8008494 <find_volume+0x4f8>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d113      	bne.n	8008464 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	3334      	adds	r3, #52	; 0x34
 8008440:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe fabf 	bl	80069c8 <ld_dword>
 800844a:	4602      	mov	r2, r0
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008452:	3334      	adds	r3, #52	; 0x34
 8008454:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe fab5 	bl	80069c8 <ld_dword>
 800845e:	4602      	mov	r2, r0
 8008460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008462:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800846a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800846c:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <find_volume+0x4fc>)
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	3301      	adds	r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	4b08      	ldr	r3, [pc, #32]	; (8008498 <find_volume+0x4fc>)
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	4b07      	ldr	r3, [pc, #28]	; (8008498 <find_volume+0x4fc>)
 800847a:	881a      	ldrh	r2, [r3, #0]
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008482:	f7fe fcd1 	bl	8006e28 <clear_lock>
#endif
	return FR_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3758      	adds	r7, #88	; 0x58
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	41615252 	.word	0x41615252
 8008494:	61417272 	.word	0x61417272
 8008498:	20002348 	.word	0x20002348

0800849c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80084a6:	2309      	movs	r3, #9
 80084a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d01c      	beq.n	80084ea <validate+0x4e>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d018      	beq.n	80084ea <validate+0x4e>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d013      	beq.n	80084ea <validate+0x4e>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	889a      	ldrh	r2, [r3, #4]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	88db      	ldrh	r3, [r3, #6]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d10c      	bne.n	80084ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe f9c0 	bl	800685c <disk_status>
 80084dc:	4603      	mov	r3, r0
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <validate+0x4e>
			res = FR_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <validate+0x5a>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	e000      	b.n	80084f8 <validate+0x5c>
 80084f6:	2300      	movs	r3, #0
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	6013      	str	r3, [r2, #0]
	return res;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
	...

08008508 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4613      	mov	r3, r2
 8008514:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800851a:	f107 0310 	add.w	r3, r7, #16
 800851e:	4618      	mov	r0, r3
 8008520:	f7ff fca2 	bl	8007e68 <get_ldnumber>
 8008524:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	2b00      	cmp	r3, #0
 800852a:	da01      	bge.n	8008530 <f_mount+0x28>
 800852c:	230b      	movs	r3, #11
 800852e:	e02b      	b.n	8008588 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008530:	4a17      	ldr	r2, [pc, #92]	; (8008590 <f_mount+0x88>)
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008538:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008540:	69b8      	ldr	r0, [r7, #24]
 8008542:	f7fe fc71 	bl	8006e28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2200      	movs	r2, #0
 800854a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d002      	beq.n	8008558 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	490d      	ldr	r1, [pc, #52]	; (8008590 <f_mount+0x88>)
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <f_mount+0x66>
 8008568:	79fb      	ldrb	r3, [r7, #7]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d001      	beq.n	8008572 <f_mount+0x6a>
 800856e:	2300      	movs	r3, #0
 8008570:	e00a      	b.n	8008588 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008572:	f107 010c 	add.w	r1, r7, #12
 8008576:	f107 0308 	add.w	r3, r7, #8
 800857a:	2200      	movs	r2, #0
 800857c:	4618      	mov	r0, r3
 800857e:	f7ff fd0d 	bl	8007f9c <find_volume>
 8008582:	4603      	mov	r3, r0
 8008584:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008586:	7dfb      	ldrb	r3, [r7, #23]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3720      	adds	r7, #32
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20002344 	.word	0x20002344

08008594 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b098      	sub	sp, #96	; 0x60
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <f_open+0x18>
 80085a8:	2309      	movs	r3, #9
 80085aa:	e1bb      	b.n	8008924 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80085ac:	79fb      	ldrb	r3, [r7, #7]
 80085ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80085b4:	79fa      	ldrb	r2, [r7, #7]
 80085b6:	f107 0110 	add.w	r1, r7, #16
 80085ba:	f107 0308 	add.w	r3, r7, #8
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff fcec 	bl	8007f9c <find_volume>
 80085c4:	4603      	mov	r3, r0
 80085c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80085ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f040 819f 	bne.w	8008912 <f_open+0x37e>
		dj.obj.fs = fs;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	f107 0314 	add.w	r3, r7, #20
 80085de:	4611      	mov	r1, r2
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7ff fbcb 	bl	8007d7c <follow_path>
 80085e6:	4603      	mov	r3, r0
 80085e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80085ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d11a      	bne.n	800862a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80085f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085f8:	b25b      	sxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	da03      	bge.n	8008606 <f_open+0x72>
				res = FR_INVALID_NAME;
 80085fe:	2306      	movs	r3, #6
 8008600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008604:	e011      	b.n	800862a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	f023 0301 	bic.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	bf14      	ite	ne
 8008610:	2301      	movne	r3, #1
 8008612:	2300      	moveq	r3, #0
 8008614:	b2db      	uxtb	r3, r3
 8008616:	461a      	mov	r2, r3
 8008618:	f107 0314 	add.w	r3, r7, #20
 800861c:	4611      	mov	r1, r2
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe faba 	bl	8006b98 <chk_lock>
 8008624:	4603      	mov	r3, r0
 8008626:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	f003 031c 	and.w	r3, r3, #28
 8008630:	2b00      	cmp	r3, #0
 8008632:	d07f      	beq.n	8008734 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008638:	2b00      	cmp	r3, #0
 800863a:	d017      	beq.n	800866c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800863c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008640:	2b04      	cmp	r3, #4
 8008642:	d10e      	bne.n	8008662 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008644:	f7fe fb04 	bl	8006c50 <enq_lock>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d006      	beq.n	800865c <f_open+0xc8>
 800864e:	f107 0314 	add.w	r3, r7, #20
 8008652:	4618      	mov	r0, r3
 8008654:	f7ff fa6c 	bl	8007b30 <dir_register>
 8008658:	4603      	mov	r3, r0
 800865a:	e000      	b.n	800865e <f_open+0xca>
 800865c:	2312      	movs	r3, #18
 800865e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008662:	79fb      	ldrb	r3, [r7, #7]
 8008664:	f043 0308 	orr.w	r3, r3, #8
 8008668:	71fb      	strb	r3, [r7, #7]
 800866a:	e010      	b.n	800868e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800866c:	7ebb      	ldrb	r3, [r7, #26]
 800866e:	f003 0311 	and.w	r3, r3, #17
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <f_open+0xea>
					res = FR_DENIED;
 8008676:	2307      	movs	r3, #7
 8008678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800867c:	e007      	b.n	800868e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <f_open+0xfa>
 8008688:	2308      	movs	r3, #8
 800868a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800868e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008692:	2b00      	cmp	r3, #0
 8008694:	d168      	bne.n	8008768 <f_open+0x1d4>
 8008696:	79fb      	ldrb	r3, [r7, #7]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d063      	beq.n	8008768 <f_open+0x1d4>
				dw = GET_FATTIME();
 80086a0:	f7fd ff70 	bl	8006584 <get_fattime>
 80086a4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80086a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a8:	330e      	adds	r3, #14
 80086aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe f9c9 	bl	8006a44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80086b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b4:	3316      	adds	r3, #22
 80086b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe f9c3 	bl	8006a44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80086be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c0:	330b      	adds	r3, #11
 80086c2:	2220      	movs	r2, #32
 80086c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086ca:	4611      	mov	r1, r2
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7ff f99b 	bl	8007a08 <ld_clust>
 80086d2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086d8:	2200      	movs	r2, #0
 80086da:	4618      	mov	r0, r3
 80086dc:	f7ff f9b3 	bl	8007a46 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80086e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e2:	331c      	adds	r3, #28
 80086e4:	2100      	movs	r1, #0
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe f9ac 	bl	8006a44 <st_dword>
					fs->wflag = 1;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2201      	movs	r2, #1
 80086f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80086f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d037      	beq.n	8008768 <f_open+0x1d4>
						dw = fs->winsect;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80086fe:	f107 0314 	add.w	r3, r7, #20
 8008702:	2200      	movs	r2, #0
 8008704:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe fea3 	bl	8007452 <remove_chain>
 800870c:	4603      	mov	r3, r0
 800870e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008716:	2b00      	cmp	r3, #0
 8008718:	d126      	bne.n	8008768 <f_open+0x1d4>
							res = move_window(fs, dw);
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800871e:	4618      	mov	r0, r3
 8008720:	f7fe fbea 	bl	8006ef8 <move_window>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800872e:	3a01      	subs	r2, #1
 8008730:	611a      	str	r2, [r3, #16]
 8008732:	e019      	b.n	8008768 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008734:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008738:	2b00      	cmp	r3, #0
 800873a:	d115      	bne.n	8008768 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800873c:	7ebb      	ldrb	r3, [r7, #26]
 800873e:	f003 0310 	and.w	r3, r3, #16
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008746:	2304      	movs	r3, #4
 8008748:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800874c:	e00c      	b.n	8008768 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d007      	beq.n	8008768 <f_open+0x1d4>
 8008758:	7ebb      	ldrb	r3, [r7, #26]
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <f_open+0x1d4>
						res = FR_DENIED;
 8008762:	2307      	movs	r3, #7
 8008764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008768:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800876c:	2b00      	cmp	r3, #0
 800876e:	d128      	bne.n	80087c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	f003 0308 	and.w	r3, r3, #8
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008780:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800878a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008790:	79fb      	ldrb	r3, [r7, #7]
 8008792:	f023 0301 	bic.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	bf14      	ite	ne
 800879a:	2301      	movne	r3, #1
 800879c:	2300      	moveq	r3, #0
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	461a      	mov	r2, r3
 80087a2:	f107 0314 	add.w	r3, r7, #20
 80087a6:	4611      	mov	r1, r2
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe fa73 	bl	8006c94 <inc_lock>
 80087ae:	4602      	mov	r2, r0
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d102      	bne.n	80087c2 <f_open+0x22e>
 80087bc:	2302      	movs	r3, #2
 80087be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80087c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f040 80a3 	bne.w	8008912 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087d0:	4611      	mov	r1, r2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff f918 	bl	8007a08 <ld_clust>
 80087d8:	4602      	mov	r2, r0
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80087de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e0:	331c      	adds	r3, #28
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe f8f0 	bl	80069c8 <ld_dword>
 80087e8:	4602      	mov	r2, r0
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	88da      	ldrh	r2, [r3, #6]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	79fa      	ldrb	r2, [r7, #7]
 8008806:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3330      	adds	r3, #48	; 0x30
 800881e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008822:	2100      	movs	r1, #0
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe f95a 	bl	8006ade <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800882a:	79fb      	ldrb	r3, [r7, #7]
 800882c:	f003 0320 	and.w	r3, r3, #32
 8008830:	2b00      	cmp	r3, #0
 8008832:	d06e      	beq.n	8008912 <f_open+0x37e>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d06a      	beq.n	8008912 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	68da      	ldr	r2, [r3, #12]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	895b      	ldrh	r3, [r3, #10]
 8008848:	461a      	mov	r2, r3
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	899b      	ldrh	r3, [r3, #12]
 800884e:	fb02 f303 	mul.w	r3, r2, r3
 8008852:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	657b      	str	r3, [r7, #84]	; 0x54
 8008860:	e016      	b.n	8008890 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe fc03 	bl	8007072 <get_fat>
 800886c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800886e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008870:	2b01      	cmp	r3, #1
 8008872:	d802      	bhi.n	800887a <f_open+0x2e6>
 8008874:	2302      	movs	r3, #2
 8008876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800887a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d102      	bne.n	8008888 <f_open+0x2f4>
 8008882:	2301      	movs	r3, #1
 8008884:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800888a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	657b      	str	r3, [r7, #84]	; 0x54
 8008890:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008894:	2b00      	cmp	r3, #0
 8008896:	d103      	bne.n	80088a0 <f_open+0x30c>
 8008898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800889a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800889c:	429a      	cmp	r2, r3
 800889e:	d8e0      	bhi.n	8008862 <f_open+0x2ce>
				}
				fp->clust = clst;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80088a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d131      	bne.n	8008912 <f_open+0x37e>
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	899b      	ldrh	r3, [r3, #12]
 80088b2:	461a      	mov	r2, r3
 80088b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80088ba:	fb01 f202 	mul.w	r2, r1, r2
 80088be:	1a9b      	subs	r3, r3, r2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d026      	beq.n	8008912 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fe fbb3 	bl	8007034 <clust2sect>
 80088ce:	6478      	str	r0, [r7, #68]	; 0x44
 80088d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <f_open+0x34a>
						res = FR_INT_ERR;
 80088d6:	2302      	movs	r3, #2
 80088d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80088dc:	e019      	b.n	8008912 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	899b      	ldrh	r3, [r3, #12]
 80088e2:	461a      	mov	r2, r3
 80088e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80088ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ec:	441a      	add	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	7858      	ldrb	r0, [r3, #1]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a1a      	ldr	r2, [r3, #32]
 8008900:	2301      	movs	r3, #1
 8008902:	f7fd ffeb 	bl	80068dc <disk_read>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <f_open+0x37e>
 800890c:	2301      	movs	r3, #1
 800890e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008912:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <f_open+0x38c>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008924:	4618      	mov	r0, r3
 8008926:	3760      	adds	r7, #96	; 0x60
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08c      	sub	sp, #48	; 0x30
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f107 0210 	add.w	r2, r7, #16
 800894a:	4611      	mov	r1, r2
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fda5 	bl	800849c <validate>
 8008952:	4603      	mov	r3, r0
 8008954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800895c:	2b00      	cmp	r3, #0
 800895e:	d107      	bne.n	8008970 <f_write+0x44>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	7d5b      	ldrb	r3, [r3, #21]
 8008964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800896c:	2b00      	cmp	r3, #0
 800896e:	d002      	beq.n	8008976 <f_write+0x4a>
 8008970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008974:	e16a      	b.n	8008c4c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	7d1b      	ldrb	r3, [r3, #20]
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <f_write+0x5a>
 8008982:	2307      	movs	r3, #7
 8008984:	e162      	b.n	8008c4c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	699a      	ldr	r2, [r3, #24]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	441a      	add	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	429a      	cmp	r2, r3
 8008994:	f080 814c 	bcs.w	8008c30 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	43db      	mvns	r3, r3
 800899e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80089a0:	e146      	b.n	8008c30 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	8992      	ldrh	r2, [r2, #12]
 80089aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80089ae:	fb01 f202 	mul.w	r2, r1, r2
 80089b2:	1a9b      	subs	r3, r3, r2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f040 80f1 	bne.w	8008b9c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	8992      	ldrh	r2, [r2, #12]
 80089c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	8952      	ldrh	r2, [r2, #10]
 80089ca:	3a01      	subs	r2, #1
 80089cc:	4013      	ands	r3, r2
 80089ce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d143      	bne.n	8008a5e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10c      	bne.n	80089f8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d11a      	bne.n	8008a20 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2100      	movs	r1, #0
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fd94 	bl	800751c <create_chain>
 80089f4:	62b8      	str	r0, [r7, #40]	; 0x28
 80089f6:	e013      	b.n	8008a20 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d007      	beq.n	8008a10 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	4619      	mov	r1, r3
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f7fe fe20 	bl	800764c <clmt_clust>
 8008a0c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a0e:	e007      	b.n	8008a20 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	4619      	mov	r1, r3
 8008a18:	4610      	mov	r0, r2
 8008a1a:	f7fe fd7f 	bl	800751c <create_chain>
 8008a1e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 8109 	beq.w	8008c3a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d104      	bne.n	8008a38 <f_write+0x10c>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2202      	movs	r2, #2
 8008a32:	755a      	strb	r2, [r3, #21]
 8008a34:	2302      	movs	r3, #2
 8008a36:	e109      	b.n	8008c4c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3e:	d104      	bne.n	8008a4a <f_write+0x11e>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2201      	movs	r2, #1
 8008a44:	755a      	strb	r2, [r3, #21]
 8008a46:	2301      	movs	r3, #1
 8008a48:	e100      	b.n	8008c4c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a4e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d102      	bne.n	8008a5e <f_write+0x132>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a5c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	7d1b      	ldrb	r3, [r3, #20]
 8008a62:	b25b      	sxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	da18      	bge.n	8008a9a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	7858      	ldrb	r0, [r3, #1]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6a1a      	ldr	r2, [r3, #32]
 8008a76:	2301      	movs	r3, #1
 8008a78:	f7fd ff50 	bl	800691c <disk_write>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d004      	beq.n	8008a8c <f_write+0x160>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2201      	movs	r2, #1
 8008a86:	755a      	strb	r2, [r3, #21]
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e0df      	b.n	8008c4c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	7d1b      	ldrb	r3, [r3, #20]
 8008a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f7fe fac6 	bl	8007034 <clust2sect>
 8008aa8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d104      	bne.n	8008aba <f_write+0x18e>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	755a      	strb	r2, [r3, #21]
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	e0c8      	b.n	8008c4c <f_write+0x320>
			sect += csect;
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	4413      	add	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	899b      	ldrh	r3, [r3, #12]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ace:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d043      	beq.n	8008b5e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	4413      	add	r3, r2
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	8952      	ldrh	r2, [r2, #10]
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d905      	bls.n	8008af0 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	895b      	ldrh	r3, [r3, #10]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	7858      	ldrb	r0, [r3, #1]
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	69f9      	ldr	r1, [r7, #28]
 8008afa:	f7fd ff0f 	bl	800691c <disk_write>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d004      	beq.n	8008b0e <f_write+0x1e2>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2201      	movs	r2, #1
 8008b08:	755a      	strb	r2, [r3, #21]
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e09e      	b.n	8008c4c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6a1a      	ldr	r2, [r3, #32]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	6a3a      	ldr	r2, [r7, #32]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d918      	bls.n	8008b4e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6a1a      	ldr	r2, [r3, #32]
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	8992      	ldrh	r2, [r2, #12]
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	69fa      	ldr	r2, [r7, #28]
 8008b34:	18d1      	adds	r1, r2, r3
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	899b      	ldrh	r3, [r3, #12]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f7fd ffae 	bl	8006a9c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	7d1b      	ldrb	r3, [r3, #20]
 8008b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	899b      	ldrh	r3, [r3, #12]
 8008b52:	461a      	mov	r2, r3
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	fb02 f303 	mul.w	r3, r2, r3
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008b5c:	e04b      	b.n	8008bf6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d016      	beq.n	8008b96 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	699a      	ldr	r2, [r3, #24]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d210      	bcs.n	8008b96 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	7858      	ldrb	r0, [r3, #1]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b7e:	2301      	movs	r3, #1
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	f7fd feab 	bl	80068dc <disk_read>
 8008b86:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d004      	beq.n	8008b96 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	755a      	strb	r2, [r3, #21]
 8008b92:	2301      	movs	r3, #1
 8008b94:	e05a      	b.n	8008c4c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	899b      	ldrh	r3, [r3, #12]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	8992      	ldrh	r2, [r2, #12]
 8008baa:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bae:	fb01 f202 	mul.w	r2, r1, r2
 8008bb2:	1a9b      	subs	r3, r3, r2
 8008bb4:	1ac3      	subs	r3, r0, r3
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d901      	bls.n	8008bc4 <f_write+0x298>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	8992      	ldrh	r2, [r2, #12]
 8008bd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bd6:	fb00 f202 	mul.w	r2, r0, r2
 8008bda:	1a9b      	subs	r3, r3, r2
 8008bdc:	440b      	add	r3, r1
 8008bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be0:	69f9      	ldr	r1, [r7, #28]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fd ff5a 	bl	8006a9c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	7d1b      	ldrb	r3, [r3, #20]
 8008bec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008bf6:	69fa      	ldr	r2, [r7, #28]
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	4413      	add	r3, r2
 8008bfc:	61fb      	str	r3, [r7, #28]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	699a      	ldr	r2, [r3, #24]
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	441a      	add	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	619a      	str	r2, [r3, #24]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	bf38      	it	cc
 8008c16:	461a      	movcc	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	60da      	str	r2, [r3, #12]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	441a      	add	r2, r3
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f47f aeb5 	bne.w	80089a2 <f_write+0x76>
 8008c38:	e000      	b.n	8008c3c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c3a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	7d1b      	ldrb	r3, [r3, #20]
 8008c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3730      	adds	r7, #48	; 0x30
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f107 0208 	add.w	r2, r7, #8
 8008c62:	4611      	mov	r1, r2
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fc19 	bl	800849c <validate>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d168      	bne.n	8008d46 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	7d1b      	ldrb	r3, [r3, #20]
 8008c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d062      	beq.n	8008d46 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	7d1b      	ldrb	r3, [r3, #20]
 8008c84:	b25b      	sxtb	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	da15      	bge.n	8008cb6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	7858      	ldrb	r0, [r3, #1]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a1a      	ldr	r2, [r3, #32]
 8008c98:	2301      	movs	r3, #1
 8008c9a:	f7fd fe3f 	bl	800691c <disk_write>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <f_sync+0x54>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e04f      	b.n	8008d48 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	7d1b      	ldrb	r3, [r3, #20]
 8008cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008cb6:	f7fd fc65 	bl	8006584 <get_fattime>
 8008cba:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	f7fe f917 	bl	8006ef8 <move_window>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d138      	bne.n	8008d46 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	330b      	adds	r3, #11
 8008cde:	781a      	ldrb	r2, [r3, #0]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	330b      	adds	r3, #11
 8008ce4:	f042 0220 	orr.w	r2, r2, #32
 8008ce8:	b2d2      	uxtb	r2, r2
 8008cea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	68f9      	ldr	r1, [r7, #12]
 8008cf8:	f7fe fea5 	bl	8007a46 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f103 021c 	add.w	r2, r3, #28
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	4619      	mov	r1, r3
 8008d08:	4610      	mov	r0, r2
 8008d0a:	f7fd fe9b 	bl	8006a44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3316      	adds	r3, #22
 8008d12:	6939      	ldr	r1, [r7, #16]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fd fe95 	bl	8006a44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3312      	adds	r3, #18
 8008d1e:	2100      	movs	r1, #0
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fd fe74 	bl	8006a0e <st_word>
					fs->wflag = 1;
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fe f910 	bl	8006f54 <sync_fs>
 8008d34:	4603      	mov	r3, r0
 8008d36:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	7d1b      	ldrb	r3, [r3, #20]
 8008d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff ff7b 	bl	8008c54 <f_sync>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d118      	bne.n	8008d9a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f107 0208 	add.w	r2, r7, #8
 8008d6e:	4611      	mov	r1, r2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7ff fb93 	bl	800849c <validate>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10c      	bne.n	8008d9a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fe f813 	bl	8006db0 <dec_lock>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d102      	bne.n	8008d9a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b090      	sub	sp, #64	; 0x40
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f107 0208 	add.w	r2, r7, #8
 8008db4:	4611      	mov	r1, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7ff fb70 	bl	800849c <validate>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008dc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d103      	bne.n	8008dd2 <f_lseek+0x2e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	7d5b      	ldrb	r3, [r3, #21]
 8008dce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008dd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <f_lseek+0x3c>
 8008dda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dde:	e201      	b.n	80091e4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 80d9 	beq.w	8008f9c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d15a      	bne.n	8008ea8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	1d1a      	adds	r2, r3, #4
 8008dfc:	627a      	str	r2, [r7, #36]	; 0x24
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	617b      	str	r3, [r7, #20]
 8008e02:	2302      	movs	r3, #2
 8008e04:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d03a      	beq.n	8008e88 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	613b      	str	r3, [r7, #16]
 8008e16:	2300      	movs	r3, #0
 8008e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1c:	3302      	adds	r3, #2
 8008e1e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	3301      	adds	r3, #1
 8008e28:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe f91f 	bl	8007072 <get_fat>
 8008e34:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d804      	bhi.n	8008e46 <f_lseek+0xa2>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	755a      	strb	r2, [r3, #21]
 8008e42:	2302      	movs	r3, #2
 8008e44:	e1ce      	b.n	80091e4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d104      	bne.n	8008e58 <f_lseek+0xb4>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	755a      	strb	r2, [r3, #21]
 8008e54:	2301      	movs	r3, #1
 8008e56:	e1c5      	b.n	80091e4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d0de      	beq.n	8008e20 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d809      	bhi.n	8008e7e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	1d1a      	adds	r2, r3, #4
 8008e6e:	627a      	str	r2, [r7, #36]	; 0x24
 8008e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	1d1a      	adds	r2, r3, #4
 8008e78:	627a      	str	r2, [r7, #36]	; 0x24
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d3c4      	bcc.n	8008e12 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e8e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d803      	bhi.n	8008ea0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]
 8008e9e:	e19f      	b.n	80091e0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008ea0:	2311      	movs	r3, #17
 8008ea2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008ea6:	e19b      	b.n	80091e0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d902      	bls.n	8008eb8 <f_lseek+0x114>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 818d 	beq.w	80091e0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7fe fbbd 	bl	800764c <clmt_clust>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	f7fe f8a7 	bl	8007034 <clust2sect>
 8008ee6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d104      	bne.n	8008ef8 <f_lseek+0x154>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	755a      	strb	r2, [r3, #21]
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	e175      	b.n	80091e4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	8992      	ldrh	r2, [r2, #12]
 8008f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	8952      	ldrh	r2, [r2, #10]
 8008f08:	3a01      	subs	r2, #1
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	4413      	add	r3, r2
 8008f10:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	8992      	ldrh	r2, [r2, #12]
 8008f1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f1e:	fb01 f202 	mul.w	r2, r1, r2
 8008f22:	1a9b      	subs	r3, r3, r2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 815b 	beq.w	80091e0 <f_lseek+0x43c>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	f000 8155 	beq.w	80091e0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	7d1b      	ldrb	r3, [r3, #20]
 8008f3a:	b25b      	sxtb	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	da18      	bge.n	8008f72 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	7858      	ldrb	r0, [r3, #1]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1a      	ldr	r2, [r3, #32]
 8008f4e:	2301      	movs	r3, #1
 8008f50:	f7fd fce4 	bl	800691c <disk_write>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d004      	beq.n	8008f64 <f_lseek+0x1c0>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	755a      	strb	r2, [r3, #21]
 8008f60:	2301      	movs	r3, #1
 8008f62:	e13f      	b.n	80091e4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	7d1b      	ldrb	r3, [r3, #20]
 8008f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	7858      	ldrb	r0, [r3, #1]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	69ba      	ldr	r2, [r7, #24]
 8008f80:	f7fd fcac 	bl	80068dc <disk_read>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d004      	beq.n	8008f94 <f_lseek+0x1f0>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	755a      	strb	r2, [r3, #21]
 8008f90:	2301      	movs	r3, #1
 8008f92:	e127      	b.n	80091e4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	69ba      	ldr	r2, [r7, #24]
 8008f98:	621a      	str	r2, [r3, #32]
 8008f9a:	e121      	b.n	80091e0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d908      	bls.n	8008fb8 <f_lseek+0x214>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	7d1b      	ldrb	r3, [r3, #20]
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d102      	bne.n	8008fb8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 80b5 	beq.w	800913a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	895b      	ldrh	r3, [r3, #10]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	899b      	ldrh	r3, [r3, #12]
 8008fda:	fb02 f303 	mul.w	r3, r2, r3
 8008fde:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d01b      	beq.n	800901e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	1e5a      	subs	r2, r3, #1
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	1e59      	subs	r1, r3, #1
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d30f      	bcc.n	800901e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	1e5a      	subs	r2, r3, #1
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	425b      	negs	r3, r3
 8009006:	401a      	ands	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	63bb      	str	r3, [r7, #56]	; 0x38
 800901c:	e022      	b.n	8009064 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009026:	2b00      	cmp	r3, #0
 8009028:	d119      	bne.n	800905e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2100      	movs	r1, #0
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe fa74 	bl	800751c <create_chain>
 8009034:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	2b01      	cmp	r3, #1
 800903a:	d104      	bne.n	8009046 <f_lseek+0x2a2>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	755a      	strb	r2, [r3, #21]
 8009042:	2302      	movs	r3, #2
 8009044:	e0ce      	b.n	80091e4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904c:	d104      	bne.n	8009058 <f_lseek+0x2b4>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	755a      	strb	r2, [r3, #21]
 8009054:	2301      	movs	r3, #1
 8009056:	e0c5      	b.n	80091e4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800905c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009062:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	2b00      	cmp	r3, #0
 8009068:	d067      	beq.n	800913a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800906a:	e03a      	b.n	80090e2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	603b      	str	r3, [r7, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	699a      	ldr	r2, [r3, #24]
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	441a      	add	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	7d1b      	ldrb	r3, [r3, #20]
 8009084:	f003 0302 	and.w	r3, r3, #2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00b      	beq.n	80090a4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe fa43 	bl	800751c <create_chain>
 8009096:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	2b00      	cmp	r3, #0
 800909c:	d108      	bne.n	80090b0 <f_lseek+0x30c>
							ofs = 0; break;
 800909e:	2300      	movs	r3, #0
 80090a0:	603b      	str	r3, [r7, #0]
 80090a2:	e022      	b.n	80090ea <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fd ffe2 	bl	8007072 <get_fat>
 80090ae:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80090b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b6:	d104      	bne.n	80090c2 <f_lseek+0x31e>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	755a      	strb	r2, [r3, #21]
 80090be:	2301      	movs	r3, #1
 80090c0:	e090      	b.n	80091e4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d904      	bls.n	80090d2 <f_lseek+0x32e>
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d304      	bcc.n	80090dc <f_lseek+0x338>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2202      	movs	r2, #2
 80090d6:	755a      	strb	r2, [r3, #21]
 80090d8:	2302      	movs	r3, #2
 80090da:	e083      	b.n	80091e4 <f_lseek+0x440>
					fp->clust = clst;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090e0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d8c0      	bhi.n	800906c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	699a      	ldr	r2, [r3, #24]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	441a      	add	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	899b      	ldrh	r3, [r3, #12]
 80090fa:	461a      	mov	r2, r3
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009102:	fb01 f202 	mul.w	r2, r1, r2
 8009106:	1a9b      	subs	r3, r3, r2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d016      	beq.n	800913a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009110:	4618      	mov	r0, r3
 8009112:	f7fd ff8f 	bl	8007034 <clust2sect>
 8009116:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911a:	2b00      	cmp	r3, #0
 800911c:	d104      	bne.n	8009128 <f_lseek+0x384>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2202      	movs	r2, #2
 8009122:	755a      	strb	r2, [r3, #21]
 8009124:	2302      	movs	r3, #2
 8009126:	e05d      	b.n	80091e4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	899b      	ldrh	r3, [r3, #12]
 800912c:	461a      	mov	r2, r3
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	fbb3 f3f2 	udiv	r3, r3, r2
 8009134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009136:	4413      	add	r3, r2
 8009138:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	699a      	ldr	r2, [r3, #24]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	429a      	cmp	r2, r3
 8009144:	d90a      	bls.n	800915c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	699a      	ldr	r2, [r3, #24]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	7d1b      	ldrb	r3, [r3, #20]
 8009152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009156:	b2da      	uxtb	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	8992      	ldrh	r2, [r2, #12]
 8009164:	fbb3 f1f2 	udiv	r1, r3, r2
 8009168:	fb01 f202 	mul.w	r2, r1, r2
 800916c:	1a9b      	subs	r3, r3, r2
 800916e:	2b00      	cmp	r3, #0
 8009170:	d036      	beq.n	80091e0 <f_lseek+0x43c>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009178:	429a      	cmp	r2, r3
 800917a:	d031      	beq.n	80091e0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	7d1b      	ldrb	r3, [r3, #20]
 8009180:	b25b      	sxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	da18      	bge.n	80091b8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	7858      	ldrb	r0, [r3, #1]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a1a      	ldr	r2, [r3, #32]
 8009194:	2301      	movs	r3, #1
 8009196:	f7fd fbc1 	bl	800691c <disk_write>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d004      	beq.n	80091aa <f_lseek+0x406>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	755a      	strb	r2, [r3, #21]
 80091a6:	2301      	movs	r3, #1
 80091a8:	e01c      	b.n	80091e4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7d1b      	ldrb	r3, [r3, #20]
 80091ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	7858      	ldrb	r0, [r3, #1]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091c2:	2301      	movs	r3, #1
 80091c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091c6:	f7fd fb89 	bl	80068dc <disk_read>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d004      	beq.n	80091da <f_lseek+0x436>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	755a      	strb	r2, [r3, #21]
 80091d6:	2301      	movs	r3, #1
 80091d8:	e004      	b.n	80091e4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091de:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80091e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3740      	adds	r7, #64	; 0x40
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b090      	sub	sp, #64	; 0x40
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80091f6:	f107 010c 	add.w	r1, r7, #12
 80091fa:	1d3b      	adds	r3, r7, #4
 80091fc:	2200      	movs	r2, #0
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe fecc 	bl	8007f9c <find_volume>
 8009204:	4603      	mov	r3, r0
 8009206:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800920a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800920e:	2b00      	cmp	r3, #0
 8009210:	d11f      	bne.n	8009252 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	f107 030c 	add.w	r3, r7, #12
 8009218:	4611      	mov	r1, r2
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fdae 	bl	8007d7c <follow_path>
 8009220:	4603      	mov	r3, r0
 8009222:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8009226:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800922a:	2b00      	cmp	r3, #0
 800922c:	d111      	bne.n	8009252 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800922e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009232:	b25b      	sxtb	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	da03      	bge.n	8009240 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8009238:	2306      	movs	r3, #6
 800923a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800923e:	e008      	b.n	8009252 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d005      	beq.n	8009252 <f_stat+0x66>
 8009246:	f107 030c 	add.w	r3, r7, #12
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	4618      	mov	r0, r3
 800924e:	f7fe fca1 	bl	8007b94 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8009252:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009256:	4618      	mov	r0, r3
 8009258:	3740      	adds	r7, #64	; 0x40
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b092      	sub	sp, #72	; 0x48
 8009262:	af00      	add	r7, sp, #0
 8009264:	60f8      	str	r0, [r7, #12]
 8009266:	60b9      	str	r1, [r7, #8]
 8009268:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800926a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800926e:	f107 030c 	add.w	r3, r7, #12
 8009272:	2200      	movs	r2, #0
 8009274:	4618      	mov	r0, r3
 8009276:	f7fe fe91 	bl	8007f9c <find_volume>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009280:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009284:	2b00      	cmp	r3, #0
 8009286:	f040 8099 	bne.w	80093bc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800928a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	695a      	ldr	r2, [r3, #20]
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	3b02      	subs	r3, #2
 800929a:	429a      	cmp	r2, r3
 800929c:	d804      	bhi.n	80092a8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800929e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a0:	695a      	ldr	r2, [r3, #20]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	e089      	b.n	80093bc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80092a8:	2300      	movs	r3, #0
 80092aa:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d128      	bne.n	8009306 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80092b4:	2302      	movs	r3, #2
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ba:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80092bc:	f107 0314 	add.w	r3, r7, #20
 80092c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fd fed5 	bl	8007072 <get_fat>
 80092c8:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80092ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d0:	d103      	bne.n	80092da <f_getfree+0x7c>
 80092d2:	2301      	movs	r3, #1
 80092d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80092d8:	e063      	b.n	80093a2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80092da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d103      	bne.n	80092e8 <f_getfree+0x8a>
 80092e0:	2302      	movs	r3, #2
 80092e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80092e6:	e05c      	b.n	80093a2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d102      	bne.n	80092f4 <f_getfree+0x96>
 80092ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092f0:	3301      	adds	r3, #1
 80092f2:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80092f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f6:	3301      	adds	r3, #1
 80092f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009300:	429a      	cmp	r2, r3
 8009302:	d3db      	bcc.n	80092bc <f_getfree+0x5e>
 8009304:	e04d      	b.n	80093a2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	637b      	str	r3, [r7, #52]	; 0x34
 8009316:	2300      	movs	r3, #0
 8009318:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800931a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931c:	2b00      	cmp	r3, #0
 800931e:	d113      	bne.n	8009348 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	63ba      	str	r2, [r7, #56]	; 0x38
 8009328:	4619      	mov	r1, r3
 800932a:	f7fd fde5 	bl	8006ef8 <move_window>
 800932e:	4603      	mov	r3, r0
 8009330:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009334:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009338:	2b00      	cmp	r3, #0
 800933a:	d131      	bne.n	80093a0 <f_getfree+0x142>
							p = fs->win;
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	3334      	adds	r3, #52	; 0x34
 8009340:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	899b      	ldrh	r3, [r3, #12]
 8009346:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d10f      	bne.n	8009370 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009352:	f7fd fb21 	bl	8006998 <ld_word>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d102      	bne.n	8009362 <f_getfree+0x104>
 800935c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800935e:	3301      	adds	r3, #1
 8009360:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009364:	3302      	adds	r3, #2
 8009366:	633b      	str	r3, [r7, #48]	; 0x30
 8009368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936a:	3b02      	subs	r3, #2
 800936c:	637b      	str	r3, [r7, #52]	; 0x34
 800936e:	e010      	b.n	8009392 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009372:	f7fd fb29 	bl	80069c8 <ld_dword>
 8009376:	4603      	mov	r3, r0
 8009378:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <f_getfree+0x128>
 8009380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009382:	3301      	adds	r3, #1
 8009384:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009388:	3304      	adds	r3, #4
 800938a:	633b      	str	r3, [r7, #48]	; 0x30
 800938c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938e:	3b04      	subs	r3, #4
 8009390:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009394:	3b01      	subs	r3, #1
 8009396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1bd      	bne.n	800931a <f_getfree+0xbc>
 800939e:	e000      	b.n	80093a2 <f_getfree+0x144>
							if (res != FR_OK) break;
 80093a0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093a6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093ac:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	791a      	ldrb	r2, [r3, #4]
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	f042 0201 	orr.w	r2, r2, #1
 80093b8:	b2d2      	uxtb	r2, r2
 80093ba:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80093bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3748      	adds	r7, #72	; 0x48
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	2b0a      	cmp	r3, #10
 80093d8:	d103      	bne.n	80093e2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80093da:	210d      	movs	r1, #13
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7ff fff3 	bl	80093c8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	db25      	blt.n	800943a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	1c5a      	adds	r2, r3, #1
 80093f2:	60fa      	str	r2, [r7, #12]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	4413      	add	r3, r2
 80093f8:	78fa      	ldrb	r2, [r7, #3]
 80093fa:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b3c      	cmp	r3, #60	; 0x3c
 8009400:	dd12      	ble.n	8009428 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6818      	ldr	r0, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f103 010c 	add.w	r1, r3, #12
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	f107 0308 	add.w	r3, r7, #8
 8009412:	f7ff fa8b 	bl	800892c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	429a      	cmp	r2, r3
 800941c:	d101      	bne.n	8009422 <putc_bfd+0x5a>
 800941e:	2300      	movs	r3, #0
 8009420:	e001      	b.n	8009426 <putc_bfd+0x5e>
 8009422:	f04f 33ff 	mov.w	r3, #4294967295
 8009426:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	609a      	str	r2, [r3, #8]
 8009438:	e000      	b.n	800943c <putc_bfd+0x74>
	if (i < 0) return;
 800943a:	bf00      	nop
}
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	db16      	blt.n	8009480 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f103 010c 	add.w	r1, r3, #12
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	461a      	mov	r2, r3
 8009462:	f107 030c 	add.w	r3, r7, #12
 8009466:	f7ff fa61 	bl	800892c <f_write>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d107      	bne.n	8009480 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	4293      	cmp	r3, r2
 8009478:	d102      	bne.n	8009480 <putc_flush+0x3e>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	e001      	b.n	8009484 <putc_flush+0x42>
	return EOF;
 8009480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	605a      	str	r2, [r3, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	609a      	str	r2, [r3, #8]
}
 80094aa:	bf00      	nop
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
	...

080094b8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80094b8:	b40e      	push	{r1, r2, r3}
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b0a7      	sub	sp, #156	; 0x9c
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80094c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff ffdf 	bl	800948c <putc_init>

	va_start(arp, fmt);
 80094ce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80094d2:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80094d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80094e4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 81f2 	beq.w	80098d2 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80094ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80094f2:	2b25      	cmp	r3, #37	; 0x25
 80094f4:	d008      	beq.n	8009508 <f_printf+0x50>
			putc_bfd(&pb, c);
 80094f6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80094fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094fe:	4611      	mov	r1, r2
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff ff61 	bl	80093c8 <putc_bfd>
			continue;
 8009506:	e1e3      	b.n	80098d0 <f_printf+0x418>
		}
		w = f = 0;
 8009508:	2300      	movs	r3, #0
 800950a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800950e:	2300      	movs	r3, #0
 8009510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8009514:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8009524:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009528:	2b30      	cmp	r3, #48	; 0x30
 800952a:	d10b      	bne.n	8009544 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800952c:	2301      	movs	r3, #1
 800952e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009532:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8009542:	e024      	b.n	800958e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8009544:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009548:	2b2d      	cmp	r3, #45	; 0x2d
 800954a:	d120      	bne.n	800958e <f_printf+0xd6>
				f = 2; c = *fmt++;
 800954c:	2302      	movs	r3, #2
 800954e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009556:	1c5a      	adds	r2, r3, #1
 8009558:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8009562:	e014      	b.n	800958e <f_printf+0xd6>
			w = w * 10 + c - '0';
 8009564:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	461a      	mov	r2, r3
 8009572:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009576:	4413      	add	r3, r2
 8009578:	3b30      	subs	r3, #48	; 0x30
 800957a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800957e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800958e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009592:	2b2f      	cmp	r3, #47	; 0x2f
 8009594:	d903      	bls.n	800959e <f_printf+0xe6>
 8009596:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800959a:	2b39      	cmp	r3, #57	; 0x39
 800959c:	d9e2      	bls.n	8009564 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800959e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80095a2:	2b6c      	cmp	r3, #108	; 0x6c
 80095a4:	d003      	beq.n	80095ae <f_printf+0xf6>
 80095a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80095aa:	2b4c      	cmp	r3, #76	; 0x4c
 80095ac:	d10d      	bne.n	80095ca <f_printf+0x112>
			f |= 4; c = *fmt++;
 80095ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80095b2:	f043 0304 	orr.w	r3, r3, #4
 80095b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80095ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 80095ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 8181 	beq.w	80098d6 <f_printf+0x41e>
		d = c;
 80095d4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80095d8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80095dc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80095e0:	2b60      	cmp	r3, #96	; 0x60
 80095e2:	d908      	bls.n	80095f6 <f_printf+0x13e>
 80095e4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80095e8:	2b7a      	cmp	r3, #122	; 0x7a
 80095ea:	d804      	bhi.n	80095f6 <f_printf+0x13e>
 80095ec:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80095f0:	3b20      	subs	r3, #32
 80095f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 80095f6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80095fa:	3b42      	subs	r3, #66	; 0x42
 80095fc:	2b16      	cmp	r3, #22
 80095fe:	f200 8098 	bhi.w	8009732 <f_printf+0x27a>
 8009602:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <f_printf+0x150>)
 8009604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009608:	08009713 	.word	0x08009713
 800960c:	080096fb 	.word	0x080096fb
 8009610:	08009723 	.word	0x08009723
 8009614:	08009733 	.word	0x08009733
 8009618:	08009733 	.word	0x08009733
 800961c:	08009733 	.word	0x08009733
 8009620:	08009733 	.word	0x08009733
 8009624:	08009733 	.word	0x08009733
 8009628:	08009733 	.word	0x08009733
 800962c:	08009733 	.word	0x08009733
 8009630:	08009733 	.word	0x08009733
 8009634:	08009733 	.word	0x08009733
 8009638:	08009733 	.word	0x08009733
 800963c:	0800971b 	.word	0x0800971b
 8009640:	08009733 	.word	0x08009733
 8009644:	08009733 	.word	0x08009733
 8009648:	08009733 	.word	0x08009733
 800964c:	08009665 	.word	0x08009665
 8009650:	08009733 	.word	0x08009733
 8009654:	08009723 	.word	0x08009723
 8009658:	08009733 	.word	0x08009733
 800965c:	08009733 	.word	0x08009733
 8009660:	0800972b 	.word	0x0800972b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8009664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009666:	1d1a      	adds	r2, r3, #4
 8009668:	67ba      	str	r2, [r7, #120]	; 0x78
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800966e:	2300      	movs	r3, #0
 8009670:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009674:	e004      	b.n	8009680 <f_printf+0x1c8>
 8009676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800967a:	3301      	adds	r3, #1
 800967c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009680:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009686:	4413      	add	r3, r2
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1f3      	bne.n	8009676 <f_printf+0x1be>
			if (!(f & 2)) {
 800968e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009692:	f003 0302 	and.w	r3, r3, #2
 8009696:	2b00      	cmp	r3, #0
 8009698:	d11a      	bne.n	80096d0 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800969a:	e005      	b.n	80096a8 <f_printf+0x1f0>
 800969c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096a0:	2120      	movs	r1, #32
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7ff fe90 	bl	80093c8 <putc_bfd>
 80096a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ac:	1c5a      	adds	r2, r3, #1
 80096ae:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80096b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d8f0      	bhi.n	800969c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80096ba:	e009      	b.n	80096d0 <f_printf+0x218>
 80096bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096be:	1c5a      	adds	r2, r3, #1
 80096c0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80096c2:	781a      	ldrb	r2, [r3, #0]
 80096c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096c8:	4611      	mov	r1, r2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff fe7c 	bl	80093c8 <putc_bfd>
 80096d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1f1      	bne.n	80096bc <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80096d8:	e005      	b.n	80096e6 <f_printf+0x22e>
 80096da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096de:	2120      	movs	r1, #32
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7ff fe71 	bl	80093c8 <putc_bfd>
 80096e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80096f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d8f0      	bhi.n	80096da <f_printf+0x222>
			continue;
 80096f8:	e0ea      	b.n	80098d0 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80096fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096fc:	1d1a      	adds	r2, r3, #4
 80096fe:	67ba      	str	r2, [r7, #120]	; 0x78
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	b2da      	uxtb	r2, r3
 8009704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009708:	4611      	mov	r1, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff fe5c 	bl	80093c8 <putc_bfd>
 8009710:	e0de      	b.n	80098d0 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8009712:	2302      	movs	r3, #2
 8009714:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009718:	e014      	b.n	8009744 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800971a:	2308      	movs	r3, #8
 800971c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009720:	e010      	b.n	8009744 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8009722:	230a      	movs	r3, #10
 8009724:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009728:	e00c      	b.n	8009744 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800972a:	2310      	movs	r3, #16
 800972c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009730:	e008      	b.n	8009744 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8009732:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800973a:	4611      	mov	r1, r2
 800973c:	4618      	mov	r0, r3
 800973e:	f7ff fe43 	bl	80093c8 <putc_bfd>
 8009742:	e0c5      	b.n	80098d0 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8009744:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b00      	cmp	r3, #0
 800974e:	d004      	beq.n	800975a <f_printf+0x2a2>
 8009750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009752:	1d1a      	adds	r2, r3, #4
 8009754:	67ba      	str	r2, [r7, #120]	; 0x78
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	e00c      	b.n	8009774 <f_printf+0x2bc>
 800975a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800975e:	2b44      	cmp	r3, #68	; 0x44
 8009760:	d104      	bne.n	800976c <f_printf+0x2b4>
 8009762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009764:	1d1a      	adds	r2, r3, #4
 8009766:	67ba      	str	r2, [r7, #120]	; 0x78
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	e003      	b.n	8009774 <f_printf+0x2bc>
 800976c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800976e:	1d1a      	adds	r2, r3, #4
 8009770:	67ba      	str	r2, [r7, #120]	; 0x78
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8009778:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800977c:	2b44      	cmp	r3, #68	; 0x44
 800977e:	d10e      	bne.n	800979e <f_printf+0x2e6>
 8009780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009784:	2b00      	cmp	r3, #0
 8009786:	da0a      	bge.n	800979e <f_printf+0x2e6>
			v = 0 - v;
 8009788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800978c:	425b      	negs	r3, r3
 800978e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8009792:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009796:	f043 0308 	orr.w	r3, r3, #8
 800979a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80097a4:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80097a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80097b0:	fb01 f202 	mul.w	r2, r1, r2
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80097ba:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80097be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80097c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80097ca:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80097ce:	2b09      	cmp	r3, #9
 80097d0:	d90b      	bls.n	80097ea <f_printf+0x332>
 80097d2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80097d6:	2b78      	cmp	r3, #120	; 0x78
 80097d8:	d101      	bne.n	80097de <f_printf+0x326>
 80097da:	2227      	movs	r2, #39	; 0x27
 80097dc:	e000      	b.n	80097e0 <f_printf+0x328>
 80097de:	2207      	movs	r2, #7
 80097e0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80097e4:	4413      	add	r3, r2
 80097e6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80097ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80097f4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80097f8:	3230      	adds	r2, #48	; 0x30
 80097fa:	b2d2      	uxtb	r2, r2
 80097fc:	3398      	adds	r3, #152	; 0x98
 80097fe:	443b      	add	r3, r7
 8009800:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8009804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <f_printf+0x35c>
 800980c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009810:	2b1f      	cmp	r3, #31
 8009812:	d9c7      	bls.n	80097a4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8009814:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009818:	f003 0308 	and.w	r3, r3, #8
 800981c:	2b00      	cmp	r3, #0
 800981e:	d009      	beq.n	8009834 <f_printf+0x37c>
 8009820:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800982a:	3398      	adds	r3, #152	; 0x98
 800982c:	443b      	add	r3, r7
 800982e:	222d      	movs	r2, #45	; 0x2d
 8009830:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8009834:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800983c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <f_printf+0x394>
 8009848:	2330      	movs	r3, #48	; 0x30
 800984a:	e000      	b.n	800984e <f_printf+0x396>
 800984c:	2320      	movs	r3, #32
 800984e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8009852:	e007      	b.n	8009864 <f_printf+0x3ac>
 8009854:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800985c:	4611      	mov	r1, r2
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff fdb2 	bl	80093c8 <putc_bfd>
 8009864:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009868:	f003 0302 	and.w	r3, r3, #2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d108      	bne.n	8009882 <f_printf+0x3ca>
 8009870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800987a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800987e:	429a      	cmp	r2, r3
 8009880:	d8e8      	bhi.n	8009854 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8009882:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009886:	3b01      	subs	r3, #1
 8009888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800988c:	f107 020c 	add.w	r2, r7, #12
 8009890:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009894:	4413      	add	r3, r2
 8009896:	781a      	ldrb	r2, [r3, #0]
 8009898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800989c:	4611      	mov	r1, r2
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff fd92 	bl	80093c8 <putc_bfd>
		} while (i);
 80098a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1ea      	bne.n	8009882 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80098ac:	e007      	b.n	80098be <f_printf+0x406>
 80098ae:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80098b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098b6:	4611      	mov	r1, r2
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7ff fd85 	bl	80093c8 <putc_bfd>
 80098be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098c2:	1c5a      	adds	r2, r3, #1
 80098c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80098c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d8ee      	bhi.n	80098ae <f_printf+0x3f6>
		c = *fmt++;
 80098d0:	e600      	b.n	80094d4 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80098d2:	bf00      	nop
 80098d4:	e000      	b.n	80098d8 <f_printf+0x420>
		if (!c) break;
 80098d6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80098d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098dc:	4618      	mov	r0, r3
 80098de:	f7ff fdb0 	bl	8009442 <putc_flush>
 80098e2:	4603      	mov	r3, r0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	379c      	adds	r7, #156	; 0x9c
 80098e8:	46bd      	mov	sp, r7
 80098ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098ee:	b003      	add	sp, #12
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop

080098f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	4613      	mov	r3, r2
 8009900:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009902:	2301      	movs	r3, #1
 8009904:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800990a:	4b1f      	ldr	r3, [pc, #124]	; (8009988 <FATFS_LinkDriverEx+0x94>)
 800990c:	7a5b      	ldrb	r3, [r3, #9]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	d131      	bne.n	8009978 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009914:	4b1c      	ldr	r3, [pc, #112]	; (8009988 <FATFS_LinkDriverEx+0x94>)
 8009916:	7a5b      	ldrb	r3, [r3, #9]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	461a      	mov	r2, r3
 800991c:	4b1a      	ldr	r3, [pc, #104]	; (8009988 <FATFS_LinkDriverEx+0x94>)
 800991e:	2100      	movs	r1, #0
 8009920:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009922:	4b19      	ldr	r3, [pc, #100]	; (8009988 <FATFS_LinkDriverEx+0x94>)
 8009924:	7a5b      	ldrb	r3, [r3, #9]
 8009926:	b2db      	uxtb	r3, r3
 8009928:	4a17      	ldr	r2, [pc, #92]	; (8009988 <FATFS_LinkDriverEx+0x94>)
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009932:	4b15      	ldr	r3, [pc, #84]	; (8009988 <FATFS_LinkDriverEx+0x94>)
 8009934:	7a5b      	ldrb	r3, [r3, #9]
 8009936:	b2db      	uxtb	r3, r3
 8009938:	461a      	mov	r2, r3
 800993a:	4b13      	ldr	r3, [pc, #76]	; (8009988 <FATFS_LinkDriverEx+0x94>)
 800993c:	4413      	add	r3, r2
 800993e:	79fa      	ldrb	r2, [r7, #7]
 8009940:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009942:	4b11      	ldr	r3, [pc, #68]	; (8009988 <FATFS_LinkDriverEx+0x94>)
 8009944:	7a5b      	ldrb	r3, [r3, #9]
 8009946:	b2db      	uxtb	r3, r3
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	b2d1      	uxtb	r1, r2
 800994c:	4a0e      	ldr	r2, [pc, #56]	; (8009988 <FATFS_LinkDriverEx+0x94>)
 800994e:	7251      	strb	r1, [r2, #9]
 8009950:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009952:	7dbb      	ldrb	r3, [r7, #22]
 8009954:	3330      	adds	r3, #48	; 0x30
 8009956:	b2da      	uxtb	r2, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	3301      	adds	r3, #1
 8009960:	223a      	movs	r2, #58	; 0x3a
 8009962:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	3302      	adds	r3, #2
 8009968:	222f      	movs	r2, #47	; 0x2f
 800996a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	3303      	adds	r3, #3
 8009970:	2200      	movs	r2, #0
 8009972:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009978:	7dfb      	ldrb	r3, [r7, #23]
}
 800997a:	4618      	mov	r0, r3
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	2000236c 	.word	0x2000236c

0800998c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009996:	2200      	movs	r2, #0
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff ffaa 	bl	80098f4 <FATFS_LinkDriverEx>
 80099a0:	4603      	mov	r3, r0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <__errno>:
 80099ac:	4b01      	ldr	r3, [pc, #4]	; (80099b4 <__errno+0x8>)
 80099ae:	6818      	ldr	r0, [r3, #0]
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	20000010 	.word	0x20000010

080099b8 <__libc_init_array>:
 80099b8:	b570      	push	{r4, r5, r6, lr}
 80099ba:	4d0d      	ldr	r5, [pc, #52]	; (80099f0 <__libc_init_array+0x38>)
 80099bc:	4c0d      	ldr	r4, [pc, #52]	; (80099f4 <__libc_init_array+0x3c>)
 80099be:	1b64      	subs	r4, r4, r5
 80099c0:	10a4      	asrs	r4, r4, #2
 80099c2:	2600      	movs	r6, #0
 80099c4:	42a6      	cmp	r6, r4
 80099c6:	d109      	bne.n	80099dc <__libc_init_array+0x24>
 80099c8:	4d0b      	ldr	r5, [pc, #44]	; (80099f8 <__libc_init_array+0x40>)
 80099ca:	4c0c      	ldr	r4, [pc, #48]	; (80099fc <__libc_init_array+0x44>)
 80099cc:	f001 ff6a 	bl	800b8a4 <_init>
 80099d0:	1b64      	subs	r4, r4, r5
 80099d2:	10a4      	asrs	r4, r4, #2
 80099d4:	2600      	movs	r6, #0
 80099d6:	42a6      	cmp	r6, r4
 80099d8:	d105      	bne.n	80099e6 <__libc_init_array+0x2e>
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80099e0:	4798      	blx	r3
 80099e2:	3601      	adds	r6, #1
 80099e4:	e7ee      	b.n	80099c4 <__libc_init_array+0xc>
 80099e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ea:	4798      	blx	r3
 80099ec:	3601      	adds	r6, #1
 80099ee:	e7f2      	b.n	80099d6 <__libc_init_array+0x1e>
 80099f0:	0800bbf8 	.word	0x0800bbf8
 80099f4:	0800bbf8 	.word	0x0800bbf8
 80099f8:	0800bbf8 	.word	0x0800bbf8
 80099fc:	0800bbfc 	.word	0x0800bbfc

08009a00 <memset>:
 8009a00:	4402      	add	r2, r0
 8009a02:	4603      	mov	r3, r0
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d100      	bne.n	8009a0a <memset+0xa>
 8009a08:	4770      	bx	lr
 8009a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a0e:	e7f9      	b.n	8009a04 <memset+0x4>

08009a10 <iprintf>:
 8009a10:	b40f      	push	{r0, r1, r2, r3}
 8009a12:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <iprintf+0x2c>)
 8009a14:	b513      	push	{r0, r1, r4, lr}
 8009a16:	681c      	ldr	r4, [r3, #0]
 8009a18:	b124      	cbz	r4, 8009a24 <iprintf+0x14>
 8009a1a:	69a3      	ldr	r3, [r4, #24]
 8009a1c:	b913      	cbnz	r3, 8009a24 <iprintf+0x14>
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f000 fa5e 	bl	8009ee0 <__sinit>
 8009a24:	ab05      	add	r3, sp, #20
 8009a26:	9a04      	ldr	r2, [sp, #16]
 8009a28:	68a1      	ldr	r1, [r4, #8]
 8009a2a:	9301      	str	r3, [sp, #4]
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f000 fc67 	bl	800a300 <_vfiprintf_r>
 8009a32:	b002      	add	sp, #8
 8009a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a38:	b004      	add	sp, #16
 8009a3a:	4770      	bx	lr
 8009a3c:	20000010 	.word	0x20000010

08009a40 <_puts_r>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	460e      	mov	r6, r1
 8009a44:	4605      	mov	r5, r0
 8009a46:	b118      	cbz	r0, 8009a50 <_puts_r+0x10>
 8009a48:	6983      	ldr	r3, [r0, #24]
 8009a4a:	b90b      	cbnz	r3, 8009a50 <_puts_r+0x10>
 8009a4c:	f000 fa48 	bl	8009ee0 <__sinit>
 8009a50:	69ab      	ldr	r3, [r5, #24]
 8009a52:	68ac      	ldr	r4, [r5, #8]
 8009a54:	b913      	cbnz	r3, 8009a5c <_puts_r+0x1c>
 8009a56:	4628      	mov	r0, r5
 8009a58:	f000 fa42 	bl	8009ee0 <__sinit>
 8009a5c:	4b2c      	ldr	r3, [pc, #176]	; (8009b10 <_puts_r+0xd0>)
 8009a5e:	429c      	cmp	r4, r3
 8009a60:	d120      	bne.n	8009aa4 <_puts_r+0x64>
 8009a62:	686c      	ldr	r4, [r5, #4]
 8009a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a66:	07db      	lsls	r3, r3, #31
 8009a68:	d405      	bmi.n	8009a76 <_puts_r+0x36>
 8009a6a:	89a3      	ldrh	r3, [r4, #12]
 8009a6c:	0598      	lsls	r0, r3, #22
 8009a6e:	d402      	bmi.n	8009a76 <_puts_r+0x36>
 8009a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a72:	f000 fad3 	bl	800a01c <__retarget_lock_acquire_recursive>
 8009a76:	89a3      	ldrh	r3, [r4, #12]
 8009a78:	0719      	lsls	r1, r3, #28
 8009a7a:	d51d      	bpl.n	8009ab8 <_puts_r+0x78>
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	b1db      	cbz	r3, 8009ab8 <_puts_r+0x78>
 8009a80:	3e01      	subs	r6, #1
 8009a82:	68a3      	ldr	r3, [r4, #8]
 8009a84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	60a3      	str	r3, [r4, #8]
 8009a8c:	bb39      	cbnz	r1, 8009ade <_puts_r+0x9e>
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	da38      	bge.n	8009b04 <_puts_r+0xc4>
 8009a92:	4622      	mov	r2, r4
 8009a94:	210a      	movs	r1, #10
 8009a96:	4628      	mov	r0, r5
 8009a98:	f000 f848 	bl	8009b2c <__swbuf_r>
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	d011      	beq.n	8009ac4 <_puts_r+0x84>
 8009aa0:	250a      	movs	r5, #10
 8009aa2:	e011      	b.n	8009ac8 <_puts_r+0x88>
 8009aa4:	4b1b      	ldr	r3, [pc, #108]	; (8009b14 <_puts_r+0xd4>)
 8009aa6:	429c      	cmp	r4, r3
 8009aa8:	d101      	bne.n	8009aae <_puts_r+0x6e>
 8009aaa:	68ac      	ldr	r4, [r5, #8]
 8009aac:	e7da      	b.n	8009a64 <_puts_r+0x24>
 8009aae:	4b1a      	ldr	r3, [pc, #104]	; (8009b18 <_puts_r+0xd8>)
 8009ab0:	429c      	cmp	r4, r3
 8009ab2:	bf08      	it	eq
 8009ab4:	68ec      	ldreq	r4, [r5, #12]
 8009ab6:	e7d5      	b.n	8009a64 <_puts_r+0x24>
 8009ab8:	4621      	mov	r1, r4
 8009aba:	4628      	mov	r0, r5
 8009abc:	f000 f888 	bl	8009bd0 <__swsetup_r>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d0dd      	beq.n	8009a80 <_puts_r+0x40>
 8009ac4:	f04f 35ff 	mov.w	r5, #4294967295
 8009ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aca:	07da      	lsls	r2, r3, #31
 8009acc:	d405      	bmi.n	8009ada <_puts_r+0x9a>
 8009ace:	89a3      	ldrh	r3, [r4, #12]
 8009ad0:	059b      	lsls	r3, r3, #22
 8009ad2:	d402      	bmi.n	8009ada <_puts_r+0x9a>
 8009ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ad6:	f000 faa2 	bl	800a01e <__retarget_lock_release_recursive>
 8009ada:	4628      	mov	r0, r5
 8009adc:	bd70      	pop	{r4, r5, r6, pc}
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	da04      	bge.n	8009aec <_puts_r+0xac>
 8009ae2:	69a2      	ldr	r2, [r4, #24]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	dc06      	bgt.n	8009af6 <_puts_r+0xb6>
 8009ae8:	290a      	cmp	r1, #10
 8009aea:	d004      	beq.n	8009af6 <_puts_r+0xb6>
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	1c5a      	adds	r2, r3, #1
 8009af0:	6022      	str	r2, [r4, #0]
 8009af2:	7019      	strb	r1, [r3, #0]
 8009af4:	e7c5      	b.n	8009a82 <_puts_r+0x42>
 8009af6:	4622      	mov	r2, r4
 8009af8:	4628      	mov	r0, r5
 8009afa:	f000 f817 	bl	8009b2c <__swbuf_r>
 8009afe:	3001      	adds	r0, #1
 8009b00:	d1bf      	bne.n	8009a82 <_puts_r+0x42>
 8009b02:	e7df      	b.n	8009ac4 <_puts_r+0x84>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	250a      	movs	r5, #10
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	6022      	str	r2, [r4, #0]
 8009b0c:	701d      	strb	r5, [r3, #0]
 8009b0e:	e7db      	b.n	8009ac8 <_puts_r+0x88>
 8009b10:	0800bb48 	.word	0x0800bb48
 8009b14:	0800bb68 	.word	0x0800bb68
 8009b18:	0800bb28 	.word	0x0800bb28

08009b1c <puts>:
 8009b1c:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <puts+0xc>)
 8009b1e:	4601      	mov	r1, r0
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	f7ff bf8d 	b.w	8009a40 <_puts_r>
 8009b26:	bf00      	nop
 8009b28:	20000010 	.word	0x20000010

08009b2c <__swbuf_r>:
 8009b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2e:	460e      	mov	r6, r1
 8009b30:	4614      	mov	r4, r2
 8009b32:	4605      	mov	r5, r0
 8009b34:	b118      	cbz	r0, 8009b3e <__swbuf_r+0x12>
 8009b36:	6983      	ldr	r3, [r0, #24]
 8009b38:	b90b      	cbnz	r3, 8009b3e <__swbuf_r+0x12>
 8009b3a:	f000 f9d1 	bl	8009ee0 <__sinit>
 8009b3e:	4b21      	ldr	r3, [pc, #132]	; (8009bc4 <__swbuf_r+0x98>)
 8009b40:	429c      	cmp	r4, r3
 8009b42:	d12b      	bne.n	8009b9c <__swbuf_r+0x70>
 8009b44:	686c      	ldr	r4, [r5, #4]
 8009b46:	69a3      	ldr	r3, [r4, #24]
 8009b48:	60a3      	str	r3, [r4, #8]
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	071a      	lsls	r2, r3, #28
 8009b4e:	d52f      	bpl.n	8009bb0 <__swbuf_r+0x84>
 8009b50:	6923      	ldr	r3, [r4, #16]
 8009b52:	b36b      	cbz	r3, 8009bb0 <__swbuf_r+0x84>
 8009b54:	6923      	ldr	r3, [r4, #16]
 8009b56:	6820      	ldr	r0, [r4, #0]
 8009b58:	1ac0      	subs	r0, r0, r3
 8009b5a:	6963      	ldr	r3, [r4, #20]
 8009b5c:	b2f6      	uxtb	r6, r6
 8009b5e:	4283      	cmp	r3, r0
 8009b60:	4637      	mov	r7, r6
 8009b62:	dc04      	bgt.n	8009b6e <__swbuf_r+0x42>
 8009b64:	4621      	mov	r1, r4
 8009b66:	4628      	mov	r0, r5
 8009b68:	f000 f926 	bl	8009db8 <_fflush_r>
 8009b6c:	bb30      	cbnz	r0, 8009bbc <__swbuf_r+0x90>
 8009b6e:	68a3      	ldr	r3, [r4, #8]
 8009b70:	3b01      	subs	r3, #1
 8009b72:	60a3      	str	r3, [r4, #8]
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	1c5a      	adds	r2, r3, #1
 8009b78:	6022      	str	r2, [r4, #0]
 8009b7a:	701e      	strb	r6, [r3, #0]
 8009b7c:	6963      	ldr	r3, [r4, #20]
 8009b7e:	3001      	adds	r0, #1
 8009b80:	4283      	cmp	r3, r0
 8009b82:	d004      	beq.n	8009b8e <__swbuf_r+0x62>
 8009b84:	89a3      	ldrh	r3, [r4, #12]
 8009b86:	07db      	lsls	r3, r3, #31
 8009b88:	d506      	bpl.n	8009b98 <__swbuf_r+0x6c>
 8009b8a:	2e0a      	cmp	r6, #10
 8009b8c:	d104      	bne.n	8009b98 <__swbuf_r+0x6c>
 8009b8e:	4621      	mov	r1, r4
 8009b90:	4628      	mov	r0, r5
 8009b92:	f000 f911 	bl	8009db8 <_fflush_r>
 8009b96:	b988      	cbnz	r0, 8009bbc <__swbuf_r+0x90>
 8009b98:	4638      	mov	r0, r7
 8009b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b9c:	4b0a      	ldr	r3, [pc, #40]	; (8009bc8 <__swbuf_r+0x9c>)
 8009b9e:	429c      	cmp	r4, r3
 8009ba0:	d101      	bne.n	8009ba6 <__swbuf_r+0x7a>
 8009ba2:	68ac      	ldr	r4, [r5, #8]
 8009ba4:	e7cf      	b.n	8009b46 <__swbuf_r+0x1a>
 8009ba6:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <__swbuf_r+0xa0>)
 8009ba8:	429c      	cmp	r4, r3
 8009baa:	bf08      	it	eq
 8009bac:	68ec      	ldreq	r4, [r5, #12]
 8009bae:	e7ca      	b.n	8009b46 <__swbuf_r+0x1a>
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	f000 f80c 	bl	8009bd0 <__swsetup_r>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d0cb      	beq.n	8009b54 <__swbuf_r+0x28>
 8009bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8009bc0:	e7ea      	b.n	8009b98 <__swbuf_r+0x6c>
 8009bc2:	bf00      	nop
 8009bc4:	0800bb48 	.word	0x0800bb48
 8009bc8:	0800bb68 	.word	0x0800bb68
 8009bcc:	0800bb28 	.word	0x0800bb28

08009bd0 <__swsetup_r>:
 8009bd0:	4b32      	ldr	r3, [pc, #200]	; (8009c9c <__swsetup_r+0xcc>)
 8009bd2:	b570      	push	{r4, r5, r6, lr}
 8009bd4:	681d      	ldr	r5, [r3, #0]
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	460c      	mov	r4, r1
 8009bda:	b125      	cbz	r5, 8009be6 <__swsetup_r+0x16>
 8009bdc:	69ab      	ldr	r3, [r5, #24]
 8009bde:	b913      	cbnz	r3, 8009be6 <__swsetup_r+0x16>
 8009be0:	4628      	mov	r0, r5
 8009be2:	f000 f97d 	bl	8009ee0 <__sinit>
 8009be6:	4b2e      	ldr	r3, [pc, #184]	; (8009ca0 <__swsetup_r+0xd0>)
 8009be8:	429c      	cmp	r4, r3
 8009bea:	d10f      	bne.n	8009c0c <__swsetup_r+0x3c>
 8009bec:	686c      	ldr	r4, [r5, #4]
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bf4:	0719      	lsls	r1, r3, #28
 8009bf6:	d42c      	bmi.n	8009c52 <__swsetup_r+0x82>
 8009bf8:	06dd      	lsls	r5, r3, #27
 8009bfa:	d411      	bmi.n	8009c20 <__swsetup_r+0x50>
 8009bfc:	2309      	movs	r3, #9
 8009bfe:	6033      	str	r3, [r6, #0]
 8009c00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0a:	e03e      	b.n	8009c8a <__swsetup_r+0xba>
 8009c0c:	4b25      	ldr	r3, [pc, #148]	; (8009ca4 <__swsetup_r+0xd4>)
 8009c0e:	429c      	cmp	r4, r3
 8009c10:	d101      	bne.n	8009c16 <__swsetup_r+0x46>
 8009c12:	68ac      	ldr	r4, [r5, #8]
 8009c14:	e7eb      	b.n	8009bee <__swsetup_r+0x1e>
 8009c16:	4b24      	ldr	r3, [pc, #144]	; (8009ca8 <__swsetup_r+0xd8>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	bf08      	it	eq
 8009c1c:	68ec      	ldreq	r4, [r5, #12]
 8009c1e:	e7e6      	b.n	8009bee <__swsetup_r+0x1e>
 8009c20:	0758      	lsls	r0, r3, #29
 8009c22:	d512      	bpl.n	8009c4a <__swsetup_r+0x7a>
 8009c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c26:	b141      	cbz	r1, 8009c3a <__swsetup_r+0x6a>
 8009c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c2c:	4299      	cmp	r1, r3
 8009c2e:	d002      	beq.n	8009c36 <__swsetup_r+0x66>
 8009c30:	4630      	mov	r0, r6
 8009c32:	f000 fa5b 	bl	800a0ec <_free_r>
 8009c36:	2300      	movs	r3, #0
 8009c38:	6363      	str	r3, [r4, #52]	; 0x34
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	2300      	movs	r3, #0
 8009c44:	6063      	str	r3, [r4, #4]
 8009c46:	6923      	ldr	r3, [r4, #16]
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	f043 0308 	orr.w	r3, r3, #8
 8009c50:	81a3      	strh	r3, [r4, #12]
 8009c52:	6923      	ldr	r3, [r4, #16]
 8009c54:	b94b      	cbnz	r3, 8009c6a <__swsetup_r+0x9a>
 8009c56:	89a3      	ldrh	r3, [r4, #12]
 8009c58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c60:	d003      	beq.n	8009c6a <__swsetup_r+0x9a>
 8009c62:	4621      	mov	r1, r4
 8009c64:	4630      	mov	r0, r6
 8009c66:	f000 fa01 	bl	800a06c <__smakebuf_r>
 8009c6a:	89a0      	ldrh	r0, [r4, #12]
 8009c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c70:	f010 0301 	ands.w	r3, r0, #1
 8009c74:	d00a      	beq.n	8009c8c <__swsetup_r+0xbc>
 8009c76:	2300      	movs	r3, #0
 8009c78:	60a3      	str	r3, [r4, #8]
 8009c7a:	6963      	ldr	r3, [r4, #20]
 8009c7c:	425b      	negs	r3, r3
 8009c7e:	61a3      	str	r3, [r4, #24]
 8009c80:	6923      	ldr	r3, [r4, #16]
 8009c82:	b943      	cbnz	r3, 8009c96 <__swsetup_r+0xc6>
 8009c84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c88:	d1ba      	bne.n	8009c00 <__swsetup_r+0x30>
 8009c8a:	bd70      	pop	{r4, r5, r6, pc}
 8009c8c:	0781      	lsls	r1, r0, #30
 8009c8e:	bf58      	it	pl
 8009c90:	6963      	ldrpl	r3, [r4, #20]
 8009c92:	60a3      	str	r3, [r4, #8]
 8009c94:	e7f4      	b.n	8009c80 <__swsetup_r+0xb0>
 8009c96:	2000      	movs	r0, #0
 8009c98:	e7f7      	b.n	8009c8a <__swsetup_r+0xba>
 8009c9a:	bf00      	nop
 8009c9c:	20000010 	.word	0x20000010
 8009ca0:	0800bb48 	.word	0x0800bb48
 8009ca4:	0800bb68 	.word	0x0800bb68
 8009ca8:	0800bb28 	.word	0x0800bb28

08009cac <__sflush_r>:
 8009cac:	898a      	ldrh	r2, [r1, #12]
 8009cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb2:	4605      	mov	r5, r0
 8009cb4:	0710      	lsls	r0, r2, #28
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	d458      	bmi.n	8009d6c <__sflush_r+0xc0>
 8009cba:	684b      	ldr	r3, [r1, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	dc05      	bgt.n	8009ccc <__sflush_r+0x20>
 8009cc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	dc02      	bgt.n	8009ccc <__sflush_r+0x20>
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cce:	2e00      	cmp	r6, #0
 8009cd0:	d0f9      	beq.n	8009cc6 <__sflush_r+0x1a>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cd8:	682f      	ldr	r7, [r5, #0]
 8009cda:	602b      	str	r3, [r5, #0]
 8009cdc:	d032      	beq.n	8009d44 <__sflush_r+0x98>
 8009cde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	075a      	lsls	r2, r3, #29
 8009ce4:	d505      	bpl.n	8009cf2 <__sflush_r+0x46>
 8009ce6:	6863      	ldr	r3, [r4, #4]
 8009ce8:	1ac0      	subs	r0, r0, r3
 8009cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cec:	b10b      	cbz	r3, 8009cf2 <__sflush_r+0x46>
 8009cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cf0:	1ac0      	subs	r0, r0, r3
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cf8:	6a21      	ldr	r1, [r4, #32]
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	47b0      	blx	r6
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	d106      	bne.n	8009d12 <__sflush_r+0x66>
 8009d04:	6829      	ldr	r1, [r5, #0]
 8009d06:	291d      	cmp	r1, #29
 8009d08:	d82c      	bhi.n	8009d64 <__sflush_r+0xb8>
 8009d0a:	4a2a      	ldr	r2, [pc, #168]	; (8009db4 <__sflush_r+0x108>)
 8009d0c:	40ca      	lsrs	r2, r1
 8009d0e:	07d6      	lsls	r6, r2, #31
 8009d10:	d528      	bpl.n	8009d64 <__sflush_r+0xb8>
 8009d12:	2200      	movs	r2, #0
 8009d14:	6062      	str	r2, [r4, #4]
 8009d16:	04d9      	lsls	r1, r3, #19
 8009d18:	6922      	ldr	r2, [r4, #16]
 8009d1a:	6022      	str	r2, [r4, #0]
 8009d1c:	d504      	bpl.n	8009d28 <__sflush_r+0x7c>
 8009d1e:	1c42      	adds	r2, r0, #1
 8009d20:	d101      	bne.n	8009d26 <__sflush_r+0x7a>
 8009d22:	682b      	ldr	r3, [r5, #0]
 8009d24:	b903      	cbnz	r3, 8009d28 <__sflush_r+0x7c>
 8009d26:	6560      	str	r0, [r4, #84]	; 0x54
 8009d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d2a:	602f      	str	r7, [r5, #0]
 8009d2c:	2900      	cmp	r1, #0
 8009d2e:	d0ca      	beq.n	8009cc6 <__sflush_r+0x1a>
 8009d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d34:	4299      	cmp	r1, r3
 8009d36:	d002      	beq.n	8009d3e <__sflush_r+0x92>
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f000 f9d7 	bl	800a0ec <_free_r>
 8009d3e:	2000      	movs	r0, #0
 8009d40:	6360      	str	r0, [r4, #52]	; 0x34
 8009d42:	e7c1      	b.n	8009cc8 <__sflush_r+0x1c>
 8009d44:	6a21      	ldr	r1, [r4, #32]
 8009d46:	2301      	movs	r3, #1
 8009d48:	4628      	mov	r0, r5
 8009d4a:	47b0      	blx	r6
 8009d4c:	1c41      	adds	r1, r0, #1
 8009d4e:	d1c7      	bne.n	8009ce0 <__sflush_r+0x34>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0c4      	beq.n	8009ce0 <__sflush_r+0x34>
 8009d56:	2b1d      	cmp	r3, #29
 8009d58:	d001      	beq.n	8009d5e <__sflush_r+0xb2>
 8009d5a:	2b16      	cmp	r3, #22
 8009d5c:	d101      	bne.n	8009d62 <__sflush_r+0xb6>
 8009d5e:	602f      	str	r7, [r5, #0]
 8009d60:	e7b1      	b.n	8009cc6 <__sflush_r+0x1a>
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	e7ad      	b.n	8009cc8 <__sflush_r+0x1c>
 8009d6c:	690f      	ldr	r7, [r1, #16]
 8009d6e:	2f00      	cmp	r7, #0
 8009d70:	d0a9      	beq.n	8009cc6 <__sflush_r+0x1a>
 8009d72:	0793      	lsls	r3, r2, #30
 8009d74:	680e      	ldr	r6, [r1, #0]
 8009d76:	bf08      	it	eq
 8009d78:	694b      	ldreq	r3, [r1, #20]
 8009d7a:	600f      	str	r7, [r1, #0]
 8009d7c:	bf18      	it	ne
 8009d7e:	2300      	movne	r3, #0
 8009d80:	eba6 0807 	sub.w	r8, r6, r7
 8009d84:	608b      	str	r3, [r1, #8]
 8009d86:	f1b8 0f00 	cmp.w	r8, #0
 8009d8a:	dd9c      	ble.n	8009cc6 <__sflush_r+0x1a>
 8009d8c:	6a21      	ldr	r1, [r4, #32]
 8009d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d90:	4643      	mov	r3, r8
 8009d92:	463a      	mov	r2, r7
 8009d94:	4628      	mov	r0, r5
 8009d96:	47b0      	blx	r6
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	dc06      	bgt.n	8009daa <__sflush_r+0xfe>
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	e78e      	b.n	8009cc8 <__sflush_r+0x1c>
 8009daa:	4407      	add	r7, r0
 8009dac:	eba8 0800 	sub.w	r8, r8, r0
 8009db0:	e7e9      	b.n	8009d86 <__sflush_r+0xda>
 8009db2:	bf00      	nop
 8009db4:	20400001 	.word	0x20400001

08009db8 <_fflush_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	690b      	ldr	r3, [r1, #16]
 8009dbc:	4605      	mov	r5, r0
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	b913      	cbnz	r3, 8009dc8 <_fflush_r+0x10>
 8009dc2:	2500      	movs	r5, #0
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	bd38      	pop	{r3, r4, r5, pc}
 8009dc8:	b118      	cbz	r0, 8009dd2 <_fflush_r+0x1a>
 8009dca:	6983      	ldr	r3, [r0, #24]
 8009dcc:	b90b      	cbnz	r3, 8009dd2 <_fflush_r+0x1a>
 8009dce:	f000 f887 	bl	8009ee0 <__sinit>
 8009dd2:	4b14      	ldr	r3, [pc, #80]	; (8009e24 <_fflush_r+0x6c>)
 8009dd4:	429c      	cmp	r4, r3
 8009dd6:	d11b      	bne.n	8009e10 <_fflush_r+0x58>
 8009dd8:	686c      	ldr	r4, [r5, #4]
 8009dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0ef      	beq.n	8009dc2 <_fflush_r+0xa>
 8009de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009de4:	07d0      	lsls	r0, r2, #31
 8009de6:	d404      	bmi.n	8009df2 <_fflush_r+0x3a>
 8009de8:	0599      	lsls	r1, r3, #22
 8009dea:	d402      	bmi.n	8009df2 <_fflush_r+0x3a>
 8009dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dee:	f000 f915 	bl	800a01c <__retarget_lock_acquire_recursive>
 8009df2:	4628      	mov	r0, r5
 8009df4:	4621      	mov	r1, r4
 8009df6:	f7ff ff59 	bl	8009cac <__sflush_r>
 8009dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dfc:	07da      	lsls	r2, r3, #31
 8009dfe:	4605      	mov	r5, r0
 8009e00:	d4e0      	bmi.n	8009dc4 <_fflush_r+0xc>
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	059b      	lsls	r3, r3, #22
 8009e06:	d4dd      	bmi.n	8009dc4 <_fflush_r+0xc>
 8009e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e0a:	f000 f908 	bl	800a01e <__retarget_lock_release_recursive>
 8009e0e:	e7d9      	b.n	8009dc4 <_fflush_r+0xc>
 8009e10:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <_fflush_r+0x70>)
 8009e12:	429c      	cmp	r4, r3
 8009e14:	d101      	bne.n	8009e1a <_fflush_r+0x62>
 8009e16:	68ac      	ldr	r4, [r5, #8]
 8009e18:	e7df      	b.n	8009dda <_fflush_r+0x22>
 8009e1a:	4b04      	ldr	r3, [pc, #16]	; (8009e2c <_fflush_r+0x74>)
 8009e1c:	429c      	cmp	r4, r3
 8009e1e:	bf08      	it	eq
 8009e20:	68ec      	ldreq	r4, [r5, #12]
 8009e22:	e7da      	b.n	8009dda <_fflush_r+0x22>
 8009e24:	0800bb48 	.word	0x0800bb48
 8009e28:	0800bb68 	.word	0x0800bb68
 8009e2c:	0800bb28 	.word	0x0800bb28

08009e30 <std>:
 8009e30:	2300      	movs	r3, #0
 8009e32:	b510      	push	{r4, lr}
 8009e34:	4604      	mov	r4, r0
 8009e36:	e9c0 3300 	strd	r3, r3, [r0]
 8009e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e3e:	6083      	str	r3, [r0, #8]
 8009e40:	8181      	strh	r1, [r0, #12]
 8009e42:	6643      	str	r3, [r0, #100]	; 0x64
 8009e44:	81c2      	strh	r2, [r0, #14]
 8009e46:	6183      	str	r3, [r0, #24]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	2208      	movs	r2, #8
 8009e4c:	305c      	adds	r0, #92	; 0x5c
 8009e4e:	f7ff fdd7 	bl	8009a00 <memset>
 8009e52:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <std+0x38>)
 8009e54:	6263      	str	r3, [r4, #36]	; 0x24
 8009e56:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <std+0x3c>)
 8009e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e5a:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <std+0x40>)
 8009e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e5e:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <std+0x44>)
 8009e60:	6224      	str	r4, [r4, #32]
 8009e62:	6323      	str	r3, [r4, #48]	; 0x30
 8009e64:	bd10      	pop	{r4, pc}
 8009e66:	bf00      	nop
 8009e68:	0800a8a9 	.word	0x0800a8a9
 8009e6c:	0800a8cb 	.word	0x0800a8cb
 8009e70:	0800a903 	.word	0x0800a903
 8009e74:	0800a927 	.word	0x0800a927

08009e78 <_cleanup_r>:
 8009e78:	4901      	ldr	r1, [pc, #4]	; (8009e80 <_cleanup_r+0x8>)
 8009e7a:	f000 b8af 	b.w	8009fdc <_fwalk_reent>
 8009e7e:	bf00      	nop
 8009e80:	08009db9 	.word	0x08009db9

08009e84 <__sfmoreglue>:
 8009e84:	b570      	push	{r4, r5, r6, lr}
 8009e86:	2268      	movs	r2, #104	; 0x68
 8009e88:	1e4d      	subs	r5, r1, #1
 8009e8a:	4355      	muls	r5, r2
 8009e8c:	460e      	mov	r6, r1
 8009e8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e92:	f000 f997 	bl	800a1c4 <_malloc_r>
 8009e96:	4604      	mov	r4, r0
 8009e98:	b140      	cbz	r0, 8009eac <__sfmoreglue+0x28>
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	e9c0 1600 	strd	r1, r6, [r0]
 8009ea0:	300c      	adds	r0, #12
 8009ea2:	60a0      	str	r0, [r4, #8]
 8009ea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ea8:	f7ff fdaa 	bl	8009a00 <memset>
 8009eac:	4620      	mov	r0, r4
 8009eae:	bd70      	pop	{r4, r5, r6, pc}

08009eb0 <__sfp_lock_acquire>:
 8009eb0:	4801      	ldr	r0, [pc, #4]	; (8009eb8 <__sfp_lock_acquire+0x8>)
 8009eb2:	f000 b8b3 	b.w	800a01c <__retarget_lock_acquire_recursive>
 8009eb6:	bf00      	nop
 8009eb8:	20002379 	.word	0x20002379

08009ebc <__sfp_lock_release>:
 8009ebc:	4801      	ldr	r0, [pc, #4]	; (8009ec4 <__sfp_lock_release+0x8>)
 8009ebe:	f000 b8ae 	b.w	800a01e <__retarget_lock_release_recursive>
 8009ec2:	bf00      	nop
 8009ec4:	20002379 	.word	0x20002379

08009ec8 <__sinit_lock_acquire>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	; (8009ed0 <__sinit_lock_acquire+0x8>)
 8009eca:	f000 b8a7 	b.w	800a01c <__retarget_lock_acquire_recursive>
 8009ece:	bf00      	nop
 8009ed0:	2000237a 	.word	0x2000237a

08009ed4 <__sinit_lock_release>:
 8009ed4:	4801      	ldr	r0, [pc, #4]	; (8009edc <__sinit_lock_release+0x8>)
 8009ed6:	f000 b8a2 	b.w	800a01e <__retarget_lock_release_recursive>
 8009eda:	bf00      	nop
 8009edc:	2000237a 	.word	0x2000237a

08009ee0 <__sinit>:
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	f7ff fff0 	bl	8009ec8 <__sinit_lock_acquire>
 8009ee8:	69a3      	ldr	r3, [r4, #24]
 8009eea:	b11b      	cbz	r3, 8009ef4 <__sinit+0x14>
 8009eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ef0:	f7ff bff0 	b.w	8009ed4 <__sinit_lock_release>
 8009ef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ef8:	6523      	str	r3, [r4, #80]	; 0x50
 8009efa:	4b13      	ldr	r3, [pc, #76]	; (8009f48 <__sinit+0x68>)
 8009efc:	4a13      	ldr	r2, [pc, #76]	; (8009f4c <__sinit+0x6c>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f02:	42a3      	cmp	r3, r4
 8009f04:	bf04      	itt	eq
 8009f06:	2301      	moveq	r3, #1
 8009f08:	61a3      	streq	r3, [r4, #24]
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f000 f820 	bl	8009f50 <__sfp>
 8009f10:	6060      	str	r0, [r4, #4]
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 f81c 	bl	8009f50 <__sfp>
 8009f18:	60a0      	str	r0, [r4, #8]
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f000 f818 	bl	8009f50 <__sfp>
 8009f20:	2200      	movs	r2, #0
 8009f22:	60e0      	str	r0, [r4, #12]
 8009f24:	2104      	movs	r1, #4
 8009f26:	6860      	ldr	r0, [r4, #4]
 8009f28:	f7ff ff82 	bl	8009e30 <std>
 8009f2c:	68a0      	ldr	r0, [r4, #8]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	2109      	movs	r1, #9
 8009f32:	f7ff ff7d 	bl	8009e30 <std>
 8009f36:	68e0      	ldr	r0, [r4, #12]
 8009f38:	2202      	movs	r2, #2
 8009f3a:	2112      	movs	r1, #18
 8009f3c:	f7ff ff78 	bl	8009e30 <std>
 8009f40:	2301      	movs	r3, #1
 8009f42:	61a3      	str	r3, [r4, #24]
 8009f44:	e7d2      	b.n	8009eec <__sinit+0xc>
 8009f46:	bf00      	nop
 8009f48:	0800bb24 	.word	0x0800bb24
 8009f4c:	08009e79 	.word	0x08009e79

08009f50 <__sfp>:
 8009f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f52:	4607      	mov	r7, r0
 8009f54:	f7ff ffac 	bl	8009eb0 <__sfp_lock_acquire>
 8009f58:	4b1e      	ldr	r3, [pc, #120]	; (8009fd4 <__sfp+0x84>)
 8009f5a:	681e      	ldr	r6, [r3, #0]
 8009f5c:	69b3      	ldr	r3, [r6, #24]
 8009f5e:	b913      	cbnz	r3, 8009f66 <__sfp+0x16>
 8009f60:	4630      	mov	r0, r6
 8009f62:	f7ff ffbd 	bl	8009ee0 <__sinit>
 8009f66:	3648      	adds	r6, #72	; 0x48
 8009f68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	d503      	bpl.n	8009f78 <__sfp+0x28>
 8009f70:	6833      	ldr	r3, [r6, #0]
 8009f72:	b30b      	cbz	r3, 8009fb8 <__sfp+0x68>
 8009f74:	6836      	ldr	r6, [r6, #0]
 8009f76:	e7f7      	b.n	8009f68 <__sfp+0x18>
 8009f78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f7c:	b9d5      	cbnz	r5, 8009fb4 <__sfp+0x64>
 8009f7e:	4b16      	ldr	r3, [pc, #88]	; (8009fd8 <__sfp+0x88>)
 8009f80:	60e3      	str	r3, [r4, #12]
 8009f82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f86:	6665      	str	r5, [r4, #100]	; 0x64
 8009f88:	f000 f847 	bl	800a01a <__retarget_lock_init_recursive>
 8009f8c:	f7ff ff96 	bl	8009ebc <__sfp_lock_release>
 8009f90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f98:	6025      	str	r5, [r4, #0]
 8009f9a:	61a5      	str	r5, [r4, #24]
 8009f9c:	2208      	movs	r2, #8
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fa4:	f7ff fd2c 	bl	8009a00 <memset>
 8009fa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb4:	3468      	adds	r4, #104	; 0x68
 8009fb6:	e7d9      	b.n	8009f6c <__sfp+0x1c>
 8009fb8:	2104      	movs	r1, #4
 8009fba:	4638      	mov	r0, r7
 8009fbc:	f7ff ff62 	bl	8009e84 <__sfmoreglue>
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	6030      	str	r0, [r6, #0]
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d1d5      	bne.n	8009f74 <__sfp+0x24>
 8009fc8:	f7ff ff78 	bl	8009ebc <__sfp_lock_release>
 8009fcc:	230c      	movs	r3, #12
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	e7ee      	b.n	8009fb0 <__sfp+0x60>
 8009fd2:	bf00      	nop
 8009fd4:	0800bb24 	.word	0x0800bb24
 8009fd8:	ffff0001 	.word	0xffff0001

08009fdc <_fwalk_reent>:
 8009fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	4688      	mov	r8, r1
 8009fe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fe8:	2700      	movs	r7, #0
 8009fea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fee:	f1b9 0901 	subs.w	r9, r9, #1
 8009ff2:	d505      	bpl.n	800a000 <_fwalk_reent+0x24>
 8009ff4:	6824      	ldr	r4, [r4, #0]
 8009ff6:	2c00      	cmp	r4, #0
 8009ff8:	d1f7      	bne.n	8009fea <_fwalk_reent+0xe>
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a000:	89ab      	ldrh	r3, [r5, #12]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d907      	bls.n	800a016 <_fwalk_reent+0x3a>
 800a006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a00a:	3301      	adds	r3, #1
 800a00c:	d003      	beq.n	800a016 <_fwalk_reent+0x3a>
 800a00e:	4629      	mov	r1, r5
 800a010:	4630      	mov	r0, r6
 800a012:	47c0      	blx	r8
 800a014:	4307      	orrs	r7, r0
 800a016:	3568      	adds	r5, #104	; 0x68
 800a018:	e7e9      	b.n	8009fee <_fwalk_reent+0x12>

0800a01a <__retarget_lock_init_recursive>:
 800a01a:	4770      	bx	lr

0800a01c <__retarget_lock_acquire_recursive>:
 800a01c:	4770      	bx	lr

0800a01e <__retarget_lock_release_recursive>:
 800a01e:	4770      	bx	lr

0800a020 <__swhatbuf_r>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	460e      	mov	r6, r1
 800a024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a028:	2900      	cmp	r1, #0
 800a02a:	b096      	sub	sp, #88	; 0x58
 800a02c:	4614      	mov	r4, r2
 800a02e:	461d      	mov	r5, r3
 800a030:	da08      	bge.n	800a044 <__swhatbuf_r+0x24>
 800a032:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	602a      	str	r2, [r5, #0]
 800a03a:	061a      	lsls	r2, r3, #24
 800a03c:	d410      	bmi.n	800a060 <__swhatbuf_r+0x40>
 800a03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a042:	e00e      	b.n	800a062 <__swhatbuf_r+0x42>
 800a044:	466a      	mov	r2, sp
 800a046:	f000 fc95 	bl	800a974 <_fstat_r>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	dbf1      	blt.n	800a032 <__swhatbuf_r+0x12>
 800a04e:	9a01      	ldr	r2, [sp, #4]
 800a050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a058:	425a      	negs	r2, r3
 800a05a:	415a      	adcs	r2, r3
 800a05c:	602a      	str	r2, [r5, #0]
 800a05e:	e7ee      	b.n	800a03e <__swhatbuf_r+0x1e>
 800a060:	2340      	movs	r3, #64	; 0x40
 800a062:	2000      	movs	r0, #0
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	b016      	add	sp, #88	; 0x58
 800a068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a06c <__smakebuf_r>:
 800a06c:	898b      	ldrh	r3, [r1, #12]
 800a06e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a070:	079d      	lsls	r5, r3, #30
 800a072:	4606      	mov	r6, r0
 800a074:	460c      	mov	r4, r1
 800a076:	d507      	bpl.n	800a088 <__smakebuf_r+0x1c>
 800a078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	6123      	str	r3, [r4, #16]
 800a080:	2301      	movs	r3, #1
 800a082:	6163      	str	r3, [r4, #20]
 800a084:	b002      	add	sp, #8
 800a086:	bd70      	pop	{r4, r5, r6, pc}
 800a088:	ab01      	add	r3, sp, #4
 800a08a:	466a      	mov	r2, sp
 800a08c:	f7ff ffc8 	bl	800a020 <__swhatbuf_r>
 800a090:	9900      	ldr	r1, [sp, #0]
 800a092:	4605      	mov	r5, r0
 800a094:	4630      	mov	r0, r6
 800a096:	f000 f895 	bl	800a1c4 <_malloc_r>
 800a09a:	b948      	cbnz	r0, 800a0b0 <__smakebuf_r+0x44>
 800a09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a0:	059a      	lsls	r2, r3, #22
 800a0a2:	d4ef      	bmi.n	800a084 <__smakebuf_r+0x18>
 800a0a4:	f023 0303 	bic.w	r3, r3, #3
 800a0a8:	f043 0302 	orr.w	r3, r3, #2
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	e7e3      	b.n	800a078 <__smakebuf_r+0xc>
 800a0b0:	4b0d      	ldr	r3, [pc, #52]	; (800a0e8 <__smakebuf_r+0x7c>)
 800a0b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0b4:	89a3      	ldrh	r3, [r4, #12]
 800a0b6:	6020      	str	r0, [r4, #0]
 800a0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0bc:	81a3      	strh	r3, [r4, #12]
 800a0be:	9b00      	ldr	r3, [sp, #0]
 800a0c0:	6163      	str	r3, [r4, #20]
 800a0c2:	9b01      	ldr	r3, [sp, #4]
 800a0c4:	6120      	str	r0, [r4, #16]
 800a0c6:	b15b      	cbz	r3, 800a0e0 <__smakebuf_r+0x74>
 800a0c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f000 fc63 	bl	800a998 <_isatty_r>
 800a0d2:	b128      	cbz	r0, 800a0e0 <__smakebuf_r+0x74>
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	f023 0303 	bic.w	r3, r3, #3
 800a0da:	f043 0301 	orr.w	r3, r3, #1
 800a0de:	81a3      	strh	r3, [r4, #12]
 800a0e0:	89a0      	ldrh	r0, [r4, #12]
 800a0e2:	4305      	orrs	r5, r0
 800a0e4:	81a5      	strh	r5, [r4, #12]
 800a0e6:	e7cd      	b.n	800a084 <__smakebuf_r+0x18>
 800a0e8:	08009e79 	.word	0x08009e79

0800a0ec <_free_r>:
 800a0ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0ee:	2900      	cmp	r1, #0
 800a0f0:	d044      	beq.n	800a17c <_free_r+0x90>
 800a0f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0f6:	9001      	str	r0, [sp, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f1a1 0404 	sub.w	r4, r1, #4
 800a0fe:	bfb8      	it	lt
 800a100:	18e4      	addlt	r4, r4, r3
 800a102:	f000 fc6b 	bl	800a9dc <__malloc_lock>
 800a106:	4a1e      	ldr	r2, [pc, #120]	; (800a180 <_free_r+0x94>)
 800a108:	9801      	ldr	r0, [sp, #4]
 800a10a:	6813      	ldr	r3, [r2, #0]
 800a10c:	b933      	cbnz	r3, 800a11c <_free_r+0x30>
 800a10e:	6063      	str	r3, [r4, #4]
 800a110:	6014      	str	r4, [r2, #0]
 800a112:	b003      	add	sp, #12
 800a114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a118:	f000 bc66 	b.w	800a9e8 <__malloc_unlock>
 800a11c:	42a3      	cmp	r3, r4
 800a11e:	d908      	bls.n	800a132 <_free_r+0x46>
 800a120:	6825      	ldr	r5, [r4, #0]
 800a122:	1961      	adds	r1, r4, r5
 800a124:	428b      	cmp	r3, r1
 800a126:	bf01      	itttt	eq
 800a128:	6819      	ldreq	r1, [r3, #0]
 800a12a:	685b      	ldreq	r3, [r3, #4]
 800a12c:	1949      	addeq	r1, r1, r5
 800a12e:	6021      	streq	r1, [r4, #0]
 800a130:	e7ed      	b.n	800a10e <_free_r+0x22>
 800a132:	461a      	mov	r2, r3
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	b10b      	cbz	r3, 800a13c <_free_r+0x50>
 800a138:	42a3      	cmp	r3, r4
 800a13a:	d9fa      	bls.n	800a132 <_free_r+0x46>
 800a13c:	6811      	ldr	r1, [r2, #0]
 800a13e:	1855      	adds	r5, r2, r1
 800a140:	42a5      	cmp	r5, r4
 800a142:	d10b      	bne.n	800a15c <_free_r+0x70>
 800a144:	6824      	ldr	r4, [r4, #0]
 800a146:	4421      	add	r1, r4
 800a148:	1854      	adds	r4, r2, r1
 800a14a:	42a3      	cmp	r3, r4
 800a14c:	6011      	str	r1, [r2, #0]
 800a14e:	d1e0      	bne.n	800a112 <_free_r+0x26>
 800a150:	681c      	ldr	r4, [r3, #0]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	6053      	str	r3, [r2, #4]
 800a156:	4421      	add	r1, r4
 800a158:	6011      	str	r1, [r2, #0]
 800a15a:	e7da      	b.n	800a112 <_free_r+0x26>
 800a15c:	d902      	bls.n	800a164 <_free_r+0x78>
 800a15e:	230c      	movs	r3, #12
 800a160:	6003      	str	r3, [r0, #0]
 800a162:	e7d6      	b.n	800a112 <_free_r+0x26>
 800a164:	6825      	ldr	r5, [r4, #0]
 800a166:	1961      	adds	r1, r4, r5
 800a168:	428b      	cmp	r3, r1
 800a16a:	bf04      	itt	eq
 800a16c:	6819      	ldreq	r1, [r3, #0]
 800a16e:	685b      	ldreq	r3, [r3, #4]
 800a170:	6063      	str	r3, [r4, #4]
 800a172:	bf04      	itt	eq
 800a174:	1949      	addeq	r1, r1, r5
 800a176:	6021      	streq	r1, [r4, #0]
 800a178:	6054      	str	r4, [r2, #4]
 800a17a:	e7ca      	b.n	800a112 <_free_r+0x26>
 800a17c:	b003      	add	sp, #12
 800a17e:	bd30      	pop	{r4, r5, pc}
 800a180:	2000237c 	.word	0x2000237c

0800a184 <sbrk_aligned>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	4e0e      	ldr	r6, [pc, #56]	; (800a1c0 <sbrk_aligned+0x3c>)
 800a188:	460c      	mov	r4, r1
 800a18a:	6831      	ldr	r1, [r6, #0]
 800a18c:	4605      	mov	r5, r0
 800a18e:	b911      	cbnz	r1, 800a196 <sbrk_aligned+0x12>
 800a190:	f000 fb7a 	bl	800a888 <_sbrk_r>
 800a194:	6030      	str	r0, [r6, #0]
 800a196:	4621      	mov	r1, r4
 800a198:	4628      	mov	r0, r5
 800a19a:	f000 fb75 	bl	800a888 <_sbrk_r>
 800a19e:	1c43      	adds	r3, r0, #1
 800a1a0:	d00a      	beq.n	800a1b8 <sbrk_aligned+0x34>
 800a1a2:	1cc4      	adds	r4, r0, #3
 800a1a4:	f024 0403 	bic.w	r4, r4, #3
 800a1a8:	42a0      	cmp	r0, r4
 800a1aa:	d007      	beq.n	800a1bc <sbrk_aligned+0x38>
 800a1ac:	1a21      	subs	r1, r4, r0
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f000 fb6a 	bl	800a888 <_sbrk_r>
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	d101      	bne.n	800a1bc <sbrk_aligned+0x38>
 800a1b8:	f04f 34ff 	mov.w	r4, #4294967295
 800a1bc:	4620      	mov	r0, r4
 800a1be:	bd70      	pop	{r4, r5, r6, pc}
 800a1c0:	20002380 	.word	0x20002380

0800a1c4 <_malloc_r>:
 800a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c8:	1ccd      	adds	r5, r1, #3
 800a1ca:	f025 0503 	bic.w	r5, r5, #3
 800a1ce:	3508      	adds	r5, #8
 800a1d0:	2d0c      	cmp	r5, #12
 800a1d2:	bf38      	it	cc
 800a1d4:	250c      	movcc	r5, #12
 800a1d6:	2d00      	cmp	r5, #0
 800a1d8:	4607      	mov	r7, r0
 800a1da:	db01      	blt.n	800a1e0 <_malloc_r+0x1c>
 800a1dc:	42a9      	cmp	r1, r5
 800a1de:	d905      	bls.n	800a1ec <_malloc_r+0x28>
 800a1e0:	230c      	movs	r3, #12
 800a1e2:	603b      	str	r3, [r7, #0]
 800a1e4:	2600      	movs	r6, #0
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ec:	4e2e      	ldr	r6, [pc, #184]	; (800a2a8 <_malloc_r+0xe4>)
 800a1ee:	f000 fbf5 	bl	800a9dc <__malloc_lock>
 800a1f2:	6833      	ldr	r3, [r6, #0]
 800a1f4:	461c      	mov	r4, r3
 800a1f6:	bb34      	cbnz	r4, 800a246 <_malloc_r+0x82>
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	4638      	mov	r0, r7
 800a1fc:	f7ff ffc2 	bl	800a184 <sbrk_aligned>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	4604      	mov	r4, r0
 800a204:	d14d      	bne.n	800a2a2 <_malloc_r+0xde>
 800a206:	6834      	ldr	r4, [r6, #0]
 800a208:	4626      	mov	r6, r4
 800a20a:	2e00      	cmp	r6, #0
 800a20c:	d140      	bne.n	800a290 <_malloc_r+0xcc>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	4631      	mov	r1, r6
 800a212:	4638      	mov	r0, r7
 800a214:	eb04 0803 	add.w	r8, r4, r3
 800a218:	f000 fb36 	bl	800a888 <_sbrk_r>
 800a21c:	4580      	cmp	r8, r0
 800a21e:	d13a      	bne.n	800a296 <_malloc_r+0xd2>
 800a220:	6821      	ldr	r1, [r4, #0]
 800a222:	3503      	adds	r5, #3
 800a224:	1a6d      	subs	r5, r5, r1
 800a226:	f025 0503 	bic.w	r5, r5, #3
 800a22a:	3508      	adds	r5, #8
 800a22c:	2d0c      	cmp	r5, #12
 800a22e:	bf38      	it	cc
 800a230:	250c      	movcc	r5, #12
 800a232:	4629      	mov	r1, r5
 800a234:	4638      	mov	r0, r7
 800a236:	f7ff ffa5 	bl	800a184 <sbrk_aligned>
 800a23a:	3001      	adds	r0, #1
 800a23c:	d02b      	beq.n	800a296 <_malloc_r+0xd2>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	442b      	add	r3, r5
 800a242:	6023      	str	r3, [r4, #0]
 800a244:	e00e      	b.n	800a264 <_malloc_r+0xa0>
 800a246:	6822      	ldr	r2, [r4, #0]
 800a248:	1b52      	subs	r2, r2, r5
 800a24a:	d41e      	bmi.n	800a28a <_malloc_r+0xc6>
 800a24c:	2a0b      	cmp	r2, #11
 800a24e:	d916      	bls.n	800a27e <_malloc_r+0xba>
 800a250:	1961      	adds	r1, r4, r5
 800a252:	42a3      	cmp	r3, r4
 800a254:	6025      	str	r5, [r4, #0]
 800a256:	bf18      	it	ne
 800a258:	6059      	strne	r1, [r3, #4]
 800a25a:	6863      	ldr	r3, [r4, #4]
 800a25c:	bf08      	it	eq
 800a25e:	6031      	streq	r1, [r6, #0]
 800a260:	5162      	str	r2, [r4, r5]
 800a262:	604b      	str	r3, [r1, #4]
 800a264:	4638      	mov	r0, r7
 800a266:	f104 060b 	add.w	r6, r4, #11
 800a26a:	f000 fbbd 	bl	800a9e8 <__malloc_unlock>
 800a26e:	f026 0607 	bic.w	r6, r6, #7
 800a272:	1d23      	adds	r3, r4, #4
 800a274:	1af2      	subs	r2, r6, r3
 800a276:	d0b6      	beq.n	800a1e6 <_malloc_r+0x22>
 800a278:	1b9b      	subs	r3, r3, r6
 800a27a:	50a3      	str	r3, [r4, r2]
 800a27c:	e7b3      	b.n	800a1e6 <_malloc_r+0x22>
 800a27e:	6862      	ldr	r2, [r4, #4]
 800a280:	42a3      	cmp	r3, r4
 800a282:	bf0c      	ite	eq
 800a284:	6032      	streq	r2, [r6, #0]
 800a286:	605a      	strne	r2, [r3, #4]
 800a288:	e7ec      	b.n	800a264 <_malloc_r+0xa0>
 800a28a:	4623      	mov	r3, r4
 800a28c:	6864      	ldr	r4, [r4, #4]
 800a28e:	e7b2      	b.n	800a1f6 <_malloc_r+0x32>
 800a290:	4634      	mov	r4, r6
 800a292:	6876      	ldr	r6, [r6, #4]
 800a294:	e7b9      	b.n	800a20a <_malloc_r+0x46>
 800a296:	230c      	movs	r3, #12
 800a298:	603b      	str	r3, [r7, #0]
 800a29a:	4638      	mov	r0, r7
 800a29c:	f000 fba4 	bl	800a9e8 <__malloc_unlock>
 800a2a0:	e7a1      	b.n	800a1e6 <_malloc_r+0x22>
 800a2a2:	6025      	str	r5, [r4, #0]
 800a2a4:	e7de      	b.n	800a264 <_malloc_r+0xa0>
 800a2a6:	bf00      	nop
 800a2a8:	2000237c 	.word	0x2000237c

0800a2ac <__sfputc_r>:
 800a2ac:	6893      	ldr	r3, [r2, #8]
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	b410      	push	{r4}
 800a2b4:	6093      	str	r3, [r2, #8]
 800a2b6:	da08      	bge.n	800a2ca <__sfputc_r+0x1e>
 800a2b8:	6994      	ldr	r4, [r2, #24]
 800a2ba:	42a3      	cmp	r3, r4
 800a2bc:	db01      	blt.n	800a2c2 <__sfputc_r+0x16>
 800a2be:	290a      	cmp	r1, #10
 800a2c0:	d103      	bne.n	800a2ca <__sfputc_r+0x1e>
 800a2c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2c6:	f7ff bc31 	b.w	8009b2c <__swbuf_r>
 800a2ca:	6813      	ldr	r3, [r2, #0]
 800a2cc:	1c58      	adds	r0, r3, #1
 800a2ce:	6010      	str	r0, [r2, #0]
 800a2d0:	7019      	strb	r1, [r3, #0]
 800a2d2:	4608      	mov	r0, r1
 800a2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <__sfputs_r>:
 800a2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2dc:	4606      	mov	r6, r0
 800a2de:	460f      	mov	r7, r1
 800a2e0:	4614      	mov	r4, r2
 800a2e2:	18d5      	adds	r5, r2, r3
 800a2e4:	42ac      	cmp	r4, r5
 800a2e6:	d101      	bne.n	800a2ec <__sfputs_r+0x12>
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	e007      	b.n	800a2fc <__sfputs_r+0x22>
 800a2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f0:	463a      	mov	r2, r7
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7ff ffda 	bl	800a2ac <__sfputc_r>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	d1f3      	bne.n	800a2e4 <__sfputs_r+0xa>
 800a2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a300 <_vfiprintf_r>:
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	460d      	mov	r5, r1
 800a306:	b09d      	sub	sp, #116	; 0x74
 800a308:	4614      	mov	r4, r2
 800a30a:	4698      	mov	r8, r3
 800a30c:	4606      	mov	r6, r0
 800a30e:	b118      	cbz	r0, 800a318 <_vfiprintf_r+0x18>
 800a310:	6983      	ldr	r3, [r0, #24]
 800a312:	b90b      	cbnz	r3, 800a318 <_vfiprintf_r+0x18>
 800a314:	f7ff fde4 	bl	8009ee0 <__sinit>
 800a318:	4b89      	ldr	r3, [pc, #548]	; (800a540 <_vfiprintf_r+0x240>)
 800a31a:	429d      	cmp	r5, r3
 800a31c:	d11b      	bne.n	800a356 <_vfiprintf_r+0x56>
 800a31e:	6875      	ldr	r5, [r6, #4]
 800a320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a322:	07d9      	lsls	r1, r3, #31
 800a324:	d405      	bmi.n	800a332 <_vfiprintf_r+0x32>
 800a326:	89ab      	ldrh	r3, [r5, #12]
 800a328:	059a      	lsls	r2, r3, #22
 800a32a:	d402      	bmi.n	800a332 <_vfiprintf_r+0x32>
 800a32c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a32e:	f7ff fe75 	bl	800a01c <__retarget_lock_acquire_recursive>
 800a332:	89ab      	ldrh	r3, [r5, #12]
 800a334:	071b      	lsls	r3, r3, #28
 800a336:	d501      	bpl.n	800a33c <_vfiprintf_r+0x3c>
 800a338:	692b      	ldr	r3, [r5, #16]
 800a33a:	b9eb      	cbnz	r3, 800a378 <_vfiprintf_r+0x78>
 800a33c:	4629      	mov	r1, r5
 800a33e:	4630      	mov	r0, r6
 800a340:	f7ff fc46 	bl	8009bd0 <__swsetup_r>
 800a344:	b1c0      	cbz	r0, 800a378 <_vfiprintf_r+0x78>
 800a346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a348:	07dc      	lsls	r4, r3, #31
 800a34a:	d50e      	bpl.n	800a36a <_vfiprintf_r+0x6a>
 800a34c:	f04f 30ff 	mov.w	r0, #4294967295
 800a350:	b01d      	add	sp, #116	; 0x74
 800a352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a356:	4b7b      	ldr	r3, [pc, #492]	; (800a544 <_vfiprintf_r+0x244>)
 800a358:	429d      	cmp	r5, r3
 800a35a:	d101      	bne.n	800a360 <_vfiprintf_r+0x60>
 800a35c:	68b5      	ldr	r5, [r6, #8]
 800a35e:	e7df      	b.n	800a320 <_vfiprintf_r+0x20>
 800a360:	4b79      	ldr	r3, [pc, #484]	; (800a548 <_vfiprintf_r+0x248>)
 800a362:	429d      	cmp	r5, r3
 800a364:	bf08      	it	eq
 800a366:	68f5      	ldreq	r5, [r6, #12]
 800a368:	e7da      	b.n	800a320 <_vfiprintf_r+0x20>
 800a36a:	89ab      	ldrh	r3, [r5, #12]
 800a36c:	0598      	lsls	r0, r3, #22
 800a36e:	d4ed      	bmi.n	800a34c <_vfiprintf_r+0x4c>
 800a370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a372:	f7ff fe54 	bl	800a01e <__retarget_lock_release_recursive>
 800a376:	e7e9      	b.n	800a34c <_vfiprintf_r+0x4c>
 800a378:	2300      	movs	r3, #0
 800a37a:	9309      	str	r3, [sp, #36]	; 0x24
 800a37c:	2320      	movs	r3, #32
 800a37e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a382:	f8cd 800c 	str.w	r8, [sp, #12]
 800a386:	2330      	movs	r3, #48	; 0x30
 800a388:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a54c <_vfiprintf_r+0x24c>
 800a38c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a390:	f04f 0901 	mov.w	r9, #1
 800a394:	4623      	mov	r3, r4
 800a396:	469a      	mov	sl, r3
 800a398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a39c:	b10a      	cbz	r2, 800a3a2 <_vfiprintf_r+0xa2>
 800a39e:	2a25      	cmp	r2, #37	; 0x25
 800a3a0:	d1f9      	bne.n	800a396 <_vfiprintf_r+0x96>
 800a3a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a3a6:	d00b      	beq.n	800a3c0 <_vfiprintf_r+0xc0>
 800a3a8:	465b      	mov	r3, fp
 800a3aa:	4622      	mov	r2, r4
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f7ff ff93 	bl	800a2da <__sfputs_r>
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	f000 80aa 	beq.w	800a50e <_vfiprintf_r+0x20e>
 800a3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3bc:	445a      	add	r2, fp
 800a3be:	9209      	str	r2, [sp, #36]	; 0x24
 800a3c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 80a2 	beq.w	800a50e <_vfiprintf_r+0x20e>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3d4:	f10a 0a01 	add.w	sl, sl, #1
 800a3d8:	9304      	str	r3, [sp, #16]
 800a3da:	9307      	str	r3, [sp, #28]
 800a3dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a3e2:	4654      	mov	r4, sl
 800a3e4:	2205      	movs	r2, #5
 800a3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ea:	4858      	ldr	r0, [pc, #352]	; (800a54c <_vfiprintf_r+0x24c>)
 800a3ec:	f7f5 ff10 	bl	8000210 <memchr>
 800a3f0:	9a04      	ldr	r2, [sp, #16]
 800a3f2:	b9d8      	cbnz	r0, 800a42c <_vfiprintf_r+0x12c>
 800a3f4:	06d1      	lsls	r1, r2, #27
 800a3f6:	bf44      	itt	mi
 800a3f8:	2320      	movmi	r3, #32
 800a3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3fe:	0713      	lsls	r3, r2, #28
 800a400:	bf44      	itt	mi
 800a402:	232b      	movmi	r3, #43	; 0x2b
 800a404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a408:	f89a 3000 	ldrb.w	r3, [sl]
 800a40c:	2b2a      	cmp	r3, #42	; 0x2a
 800a40e:	d015      	beq.n	800a43c <_vfiprintf_r+0x13c>
 800a410:	9a07      	ldr	r2, [sp, #28]
 800a412:	4654      	mov	r4, sl
 800a414:	2000      	movs	r0, #0
 800a416:	f04f 0c0a 	mov.w	ip, #10
 800a41a:	4621      	mov	r1, r4
 800a41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a420:	3b30      	subs	r3, #48	; 0x30
 800a422:	2b09      	cmp	r3, #9
 800a424:	d94e      	bls.n	800a4c4 <_vfiprintf_r+0x1c4>
 800a426:	b1b0      	cbz	r0, 800a456 <_vfiprintf_r+0x156>
 800a428:	9207      	str	r2, [sp, #28]
 800a42a:	e014      	b.n	800a456 <_vfiprintf_r+0x156>
 800a42c:	eba0 0308 	sub.w	r3, r0, r8
 800a430:	fa09 f303 	lsl.w	r3, r9, r3
 800a434:	4313      	orrs	r3, r2
 800a436:	9304      	str	r3, [sp, #16]
 800a438:	46a2      	mov	sl, r4
 800a43a:	e7d2      	b.n	800a3e2 <_vfiprintf_r+0xe2>
 800a43c:	9b03      	ldr	r3, [sp, #12]
 800a43e:	1d19      	adds	r1, r3, #4
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	9103      	str	r1, [sp, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	bfbb      	ittet	lt
 800a448:	425b      	neglt	r3, r3
 800a44a:	f042 0202 	orrlt.w	r2, r2, #2
 800a44e:	9307      	strge	r3, [sp, #28]
 800a450:	9307      	strlt	r3, [sp, #28]
 800a452:	bfb8      	it	lt
 800a454:	9204      	strlt	r2, [sp, #16]
 800a456:	7823      	ldrb	r3, [r4, #0]
 800a458:	2b2e      	cmp	r3, #46	; 0x2e
 800a45a:	d10c      	bne.n	800a476 <_vfiprintf_r+0x176>
 800a45c:	7863      	ldrb	r3, [r4, #1]
 800a45e:	2b2a      	cmp	r3, #42	; 0x2a
 800a460:	d135      	bne.n	800a4ce <_vfiprintf_r+0x1ce>
 800a462:	9b03      	ldr	r3, [sp, #12]
 800a464:	1d1a      	adds	r2, r3, #4
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	9203      	str	r2, [sp, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	bfb8      	it	lt
 800a46e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a472:	3402      	adds	r4, #2
 800a474:	9305      	str	r3, [sp, #20]
 800a476:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a55c <_vfiprintf_r+0x25c>
 800a47a:	7821      	ldrb	r1, [r4, #0]
 800a47c:	2203      	movs	r2, #3
 800a47e:	4650      	mov	r0, sl
 800a480:	f7f5 fec6 	bl	8000210 <memchr>
 800a484:	b140      	cbz	r0, 800a498 <_vfiprintf_r+0x198>
 800a486:	2340      	movs	r3, #64	; 0x40
 800a488:	eba0 000a 	sub.w	r0, r0, sl
 800a48c:	fa03 f000 	lsl.w	r0, r3, r0
 800a490:	9b04      	ldr	r3, [sp, #16]
 800a492:	4303      	orrs	r3, r0
 800a494:	3401      	adds	r4, #1
 800a496:	9304      	str	r3, [sp, #16]
 800a498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a49c:	482c      	ldr	r0, [pc, #176]	; (800a550 <_vfiprintf_r+0x250>)
 800a49e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4a2:	2206      	movs	r2, #6
 800a4a4:	f7f5 feb4 	bl	8000210 <memchr>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d03f      	beq.n	800a52c <_vfiprintf_r+0x22c>
 800a4ac:	4b29      	ldr	r3, [pc, #164]	; (800a554 <_vfiprintf_r+0x254>)
 800a4ae:	bb1b      	cbnz	r3, 800a4f8 <_vfiprintf_r+0x1f8>
 800a4b0:	9b03      	ldr	r3, [sp, #12]
 800a4b2:	3307      	adds	r3, #7
 800a4b4:	f023 0307 	bic.w	r3, r3, #7
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	9303      	str	r3, [sp, #12]
 800a4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4be:	443b      	add	r3, r7
 800a4c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c2:	e767      	b.n	800a394 <_vfiprintf_r+0x94>
 800a4c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	2001      	movs	r0, #1
 800a4cc:	e7a5      	b.n	800a41a <_vfiprintf_r+0x11a>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	3401      	adds	r4, #1
 800a4d2:	9305      	str	r3, [sp, #20]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	f04f 0c0a 	mov.w	ip, #10
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4e0:	3a30      	subs	r2, #48	; 0x30
 800a4e2:	2a09      	cmp	r2, #9
 800a4e4:	d903      	bls.n	800a4ee <_vfiprintf_r+0x1ee>
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d0c5      	beq.n	800a476 <_vfiprintf_r+0x176>
 800a4ea:	9105      	str	r1, [sp, #20]
 800a4ec:	e7c3      	b.n	800a476 <_vfiprintf_r+0x176>
 800a4ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e7f0      	b.n	800a4da <_vfiprintf_r+0x1da>
 800a4f8:	ab03      	add	r3, sp, #12
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	462a      	mov	r2, r5
 800a4fe:	4b16      	ldr	r3, [pc, #88]	; (800a558 <_vfiprintf_r+0x258>)
 800a500:	a904      	add	r1, sp, #16
 800a502:	4630      	mov	r0, r6
 800a504:	f3af 8000 	nop.w
 800a508:	4607      	mov	r7, r0
 800a50a:	1c78      	adds	r0, r7, #1
 800a50c:	d1d6      	bne.n	800a4bc <_vfiprintf_r+0x1bc>
 800a50e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a510:	07d9      	lsls	r1, r3, #31
 800a512:	d405      	bmi.n	800a520 <_vfiprintf_r+0x220>
 800a514:	89ab      	ldrh	r3, [r5, #12]
 800a516:	059a      	lsls	r2, r3, #22
 800a518:	d402      	bmi.n	800a520 <_vfiprintf_r+0x220>
 800a51a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a51c:	f7ff fd7f 	bl	800a01e <__retarget_lock_release_recursive>
 800a520:	89ab      	ldrh	r3, [r5, #12]
 800a522:	065b      	lsls	r3, r3, #25
 800a524:	f53f af12 	bmi.w	800a34c <_vfiprintf_r+0x4c>
 800a528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a52a:	e711      	b.n	800a350 <_vfiprintf_r+0x50>
 800a52c:	ab03      	add	r3, sp, #12
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	462a      	mov	r2, r5
 800a532:	4b09      	ldr	r3, [pc, #36]	; (800a558 <_vfiprintf_r+0x258>)
 800a534:	a904      	add	r1, sp, #16
 800a536:	4630      	mov	r0, r6
 800a538:	f000 f880 	bl	800a63c <_printf_i>
 800a53c:	e7e4      	b.n	800a508 <_vfiprintf_r+0x208>
 800a53e:	bf00      	nop
 800a540:	0800bb48 	.word	0x0800bb48
 800a544:	0800bb68 	.word	0x0800bb68
 800a548:	0800bb28 	.word	0x0800bb28
 800a54c:	0800bb88 	.word	0x0800bb88
 800a550:	0800bb92 	.word	0x0800bb92
 800a554:	00000000 	.word	0x00000000
 800a558:	0800a2db 	.word	0x0800a2db
 800a55c:	0800bb8e 	.word	0x0800bb8e

0800a560 <_printf_common>:
 800a560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a564:	4616      	mov	r6, r2
 800a566:	4699      	mov	r9, r3
 800a568:	688a      	ldr	r2, [r1, #8]
 800a56a:	690b      	ldr	r3, [r1, #16]
 800a56c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a570:	4293      	cmp	r3, r2
 800a572:	bfb8      	it	lt
 800a574:	4613      	movlt	r3, r2
 800a576:	6033      	str	r3, [r6, #0]
 800a578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a57c:	4607      	mov	r7, r0
 800a57e:	460c      	mov	r4, r1
 800a580:	b10a      	cbz	r2, 800a586 <_printf_common+0x26>
 800a582:	3301      	adds	r3, #1
 800a584:	6033      	str	r3, [r6, #0]
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	0699      	lsls	r1, r3, #26
 800a58a:	bf42      	ittt	mi
 800a58c:	6833      	ldrmi	r3, [r6, #0]
 800a58e:	3302      	addmi	r3, #2
 800a590:	6033      	strmi	r3, [r6, #0]
 800a592:	6825      	ldr	r5, [r4, #0]
 800a594:	f015 0506 	ands.w	r5, r5, #6
 800a598:	d106      	bne.n	800a5a8 <_printf_common+0x48>
 800a59a:	f104 0a19 	add.w	sl, r4, #25
 800a59e:	68e3      	ldr	r3, [r4, #12]
 800a5a0:	6832      	ldr	r2, [r6, #0]
 800a5a2:	1a9b      	subs	r3, r3, r2
 800a5a4:	42ab      	cmp	r3, r5
 800a5a6:	dc26      	bgt.n	800a5f6 <_printf_common+0x96>
 800a5a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5ac:	1e13      	subs	r3, r2, #0
 800a5ae:	6822      	ldr	r2, [r4, #0]
 800a5b0:	bf18      	it	ne
 800a5b2:	2301      	movne	r3, #1
 800a5b4:	0692      	lsls	r2, r2, #26
 800a5b6:	d42b      	bmi.n	800a610 <_printf_common+0xb0>
 800a5b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5bc:	4649      	mov	r1, r9
 800a5be:	4638      	mov	r0, r7
 800a5c0:	47c0      	blx	r8
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	d01e      	beq.n	800a604 <_printf_common+0xa4>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	68e5      	ldr	r5, [r4, #12]
 800a5ca:	6832      	ldr	r2, [r6, #0]
 800a5cc:	f003 0306 	and.w	r3, r3, #6
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	bf08      	it	eq
 800a5d4:	1aad      	subeq	r5, r5, r2
 800a5d6:	68a3      	ldr	r3, [r4, #8]
 800a5d8:	6922      	ldr	r2, [r4, #16]
 800a5da:	bf0c      	ite	eq
 800a5dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5e0:	2500      	movne	r5, #0
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	bfc4      	itt	gt
 800a5e6:	1a9b      	subgt	r3, r3, r2
 800a5e8:	18ed      	addgt	r5, r5, r3
 800a5ea:	2600      	movs	r6, #0
 800a5ec:	341a      	adds	r4, #26
 800a5ee:	42b5      	cmp	r5, r6
 800a5f0:	d11a      	bne.n	800a628 <_printf_common+0xc8>
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	e008      	b.n	800a608 <_printf_common+0xa8>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4652      	mov	r2, sl
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	47c0      	blx	r8
 800a600:	3001      	adds	r0, #1
 800a602:	d103      	bne.n	800a60c <_printf_common+0xac>
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a60c:	3501      	adds	r5, #1
 800a60e:	e7c6      	b.n	800a59e <_printf_common+0x3e>
 800a610:	18e1      	adds	r1, r4, r3
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	2030      	movs	r0, #48	; 0x30
 800a616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a61a:	4422      	add	r2, r4
 800a61c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a624:	3302      	adds	r3, #2
 800a626:	e7c7      	b.n	800a5b8 <_printf_common+0x58>
 800a628:	2301      	movs	r3, #1
 800a62a:	4622      	mov	r2, r4
 800a62c:	4649      	mov	r1, r9
 800a62e:	4638      	mov	r0, r7
 800a630:	47c0      	blx	r8
 800a632:	3001      	adds	r0, #1
 800a634:	d0e6      	beq.n	800a604 <_printf_common+0xa4>
 800a636:	3601      	adds	r6, #1
 800a638:	e7d9      	b.n	800a5ee <_printf_common+0x8e>
	...

0800a63c <_printf_i>:
 800a63c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a640:	7e0f      	ldrb	r7, [r1, #24]
 800a642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a644:	2f78      	cmp	r7, #120	; 0x78
 800a646:	4691      	mov	r9, r2
 800a648:	4680      	mov	r8, r0
 800a64a:	460c      	mov	r4, r1
 800a64c:	469a      	mov	sl, r3
 800a64e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a652:	d807      	bhi.n	800a664 <_printf_i+0x28>
 800a654:	2f62      	cmp	r7, #98	; 0x62
 800a656:	d80a      	bhi.n	800a66e <_printf_i+0x32>
 800a658:	2f00      	cmp	r7, #0
 800a65a:	f000 80d8 	beq.w	800a80e <_printf_i+0x1d2>
 800a65e:	2f58      	cmp	r7, #88	; 0x58
 800a660:	f000 80a3 	beq.w	800a7aa <_printf_i+0x16e>
 800a664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a66c:	e03a      	b.n	800a6e4 <_printf_i+0xa8>
 800a66e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a672:	2b15      	cmp	r3, #21
 800a674:	d8f6      	bhi.n	800a664 <_printf_i+0x28>
 800a676:	a101      	add	r1, pc, #4	; (adr r1, 800a67c <_printf_i+0x40>)
 800a678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a67c:	0800a6d5 	.word	0x0800a6d5
 800a680:	0800a6e9 	.word	0x0800a6e9
 800a684:	0800a665 	.word	0x0800a665
 800a688:	0800a665 	.word	0x0800a665
 800a68c:	0800a665 	.word	0x0800a665
 800a690:	0800a665 	.word	0x0800a665
 800a694:	0800a6e9 	.word	0x0800a6e9
 800a698:	0800a665 	.word	0x0800a665
 800a69c:	0800a665 	.word	0x0800a665
 800a6a0:	0800a665 	.word	0x0800a665
 800a6a4:	0800a665 	.word	0x0800a665
 800a6a8:	0800a7f5 	.word	0x0800a7f5
 800a6ac:	0800a719 	.word	0x0800a719
 800a6b0:	0800a7d7 	.word	0x0800a7d7
 800a6b4:	0800a665 	.word	0x0800a665
 800a6b8:	0800a665 	.word	0x0800a665
 800a6bc:	0800a817 	.word	0x0800a817
 800a6c0:	0800a665 	.word	0x0800a665
 800a6c4:	0800a719 	.word	0x0800a719
 800a6c8:	0800a665 	.word	0x0800a665
 800a6cc:	0800a665 	.word	0x0800a665
 800a6d0:	0800a7df 	.word	0x0800a7df
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	1d1a      	adds	r2, r3, #4
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	602a      	str	r2, [r5, #0]
 800a6dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e0a3      	b.n	800a830 <_printf_i+0x1f4>
 800a6e8:	6820      	ldr	r0, [r4, #0]
 800a6ea:	6829      	ldr	r1, [r5, #0]
 800a6ec:	0606      	lsls	r6, r0, #24
 800a6ee:	f101 0304 	add.w	r3, r1, #4
 800a6f2:	d50a      	bpl.n	800a70a <_printf_i+0xce>
 800a6f4:	680e      	ldr	r6, [r1, #0]
 800a6f6:	602b      	str	r3, [r5, #0]
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	da03      	bge.n	800a704 <_printf_i+0xc8>
 800a6fc:	232d      	movs	r3, #45	; 0x2d
 800a6fe:	4276      	negs	r6, r6
 800a700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a704:	485e      	ldr	r0, [pc, #376]	; (800a880 <_printf_i+0x244>)
 800a706:	230a      	movs	r3, #10
 800a708:	e019      	b.n	800a73e <_printf_i+0x102>
 800a70a:	680e      	ldr	r6, [r1, #0]
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a712:	bf18      	it	ne
 800a714:	b236      	sxthne	r6, r6
 800a716:	e7ef      	b.n	800a6f8 <_printf_i+0xbc>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	6820      	ldr	r0, [r4, #0]
 800a71c:	1d19      	adds	r1, r3, #4
 800a71e:	6029      	str	r1, [r5, #0]
 800a720:	0601      	lsls	r1, r0, #24
 800a722:	d501      	bpl.n	800a728 <_printf_i+0xec>
 800a724:	681e      	ldr	r6, [r3, #0]
 800a726:	e002      	b.n	800a72e <_printf_i+0xf2>
 800a728:	0646      	lsls	r6, r0, #25
 800a72a:	d5fb      	bpl.n	800a724 <_printf_i+0xe8>
 800a72c:	881e      	ldrh	r6, [r3, #0]
 800a72e:	4854      	ldr	r0, [pc, #336]	; (800a880 <_printf_i+0x244>)
 800a730:	2f6f      	cmp	r7, #111	; 0x6f
 800a732:	bf0c      	ite	eq
 800a734:	2308      	moveq	r3, #8
 800a736:	230a      	movne	r3, #10
 800a738:	2100      	movs	r1, #0
 800a73a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a73e:	6865      	ldr	r5, [r4, #4]
 800a740:	60a5      	str	r5, [r4, #8]
 800a742:	2d00      	cmp	r5, #0
 800a744:	bfa2      	ittt	ge
 800a746:	6821      	ldrge	r1, [r4, #0]
 800a748:	f021 0104 	bicge.w	r1, r1, #4
 800a74c:	6021      	strge	r1, [r4, #0]
 800a74e:	b90e      	cbnz	r6, 800a754 <_printf_i+0x118>
 800a750:	2d00      	cmp	r5, #0
 800a752:	d04d      	beq.n	800a7f0 <_printf_i+0x1b4>
 800a754:	4615      	mov	r5, r2
 800a756:	fbb6 f1f3 	udiv	r1, r6, r3
 800a75a:	fb03 6711 	mls	r7, r3, r1, r6
 800a75e:	5dc7      	ldrb	r7, [r0, r7]
 800a760:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a764:	4637      	mov	r7, r6
 800a766:	42bb      	cmp	r3, r7
 800a768:	460e      	mov	r6, r1
 800a76a:	d9f4      	bls.n	800a756 <_printf_i+0x11a>
 800a76c:	2b08      	cmp	r3, #8
 800a76e:	d10b      	bne.n	800a788 <_printf_i+0x14c>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	07de      	lsls	r6, r3, #31
 800a774:	d508      	bpl.n	800a788 <_printf_i+0x14c>
 800a776:	6923      	ldr	r3, [r4, #16]
 800a778:	6861      	ldr	r1, [r4, #4]
 800a77a:	4299      	cmp	r1, r3
 800a77c:	bfde      	ittt	le
 800a77e:	2330      	movle	r3, #48	; 0x30
 800a780:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a784:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a788:	1b52      	subs	r2, r2, r5
 800a78a:	6122      	str	r2, [r4, #16]
 800a78c:	f8cd a000 	str.w	sl, [sp]
 800a790:	464b      	mov	r3, r9
 800a792:	aa03      	add	r2, sp, #12
 800a794:	4621      	mov	r1, r4
 800a796:	4640      	mov	r0, r8
 800a798:	f7ff fee2 	bl	800a560 <_printf_common>
 800a79c:	3001      	adds	r0, #1
 800a79e:	d14c      	bne.n	800a83a <_printf_i+0x1fe>
 800a7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a4:	b004      	add	sp, #16
 800a7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7aa:	4835      	ldr	r0, [pc, #212]	; (800a880 <_printf_i+0x244>)
 800a7ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7b0:	6829      	ldr	r1, [r5, #0]
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7b8:	6029      	str	r1, [r5, #0]
 800a7ba:	061d      	lsls	r5, r3, #24
 800a7bc:	d514      	bpl.n	800a7e8 <_printf_i+0x1ac>
 800a7be:	07df      	lsls	r7, r3, #31
 800a7c0:	bf44      	itt	mi
 800a7c2:	f043 0320 	orrmi.w	r3, r3, #32
 800a7c6:	6023      	strmi	r3, [r4, #0]
 800a7c8:	b91e      	cbnz	r6, 800a7d2 <_printf_i+0x196>
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	f023 0320 	bic.w	r3, r3, #32
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	2310      	movs	r3, #16
 800a7d4:	e7b0      	b.n	800a738 <_printf_i+0xfc>
 800a7d6:	6823      	ldr	r3, [r4, #0]
 800a7d8:	f043 0320 	orr.w	r3, r3, #32
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	2378      	movs	r3, #120	; 0x78
 800a7e0:	4828      	ldr	r0, [pc, #160]	; (800a884 <_printf_i+0x248>)
 800a7e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7e6:	e7e3      	b.n	800a7b0 <_printf_i+0x174>
 800a7e8:	0659      	lsls	r1, r3, #25
 800a7ea:	bf48      	it	mi
 800a7ec:	b2b6      	uxthmi	r6, r6
 800a7ee:	e7e6      	b.n	800a7be <_printf_i+0x182>
 800a7f0:	4615      	mov	r5, r2
 800a7f2:	e7bb      	b.n	800a76c <_printf_i+0x130>
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	6826      	ldr	r6, [r4, #0]
 800a7f8:	6961      	ldr	r1, [r4, #20]
 800a7fa:	1d18      	adds	r0, r3, #4
 800a7fc:	6028      	str	r0, [r5, #0]
 800a7fe:	0635      	lsls	r5, r6, #24
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	d501      	bpl.n	800a808 <_printf_i+0x1cc>
 800a804:	6019      	str	r1, [r3, #0]
 800a806:	e002      	b.n	800a80e <_printf_i+0x1d2>
 800a808:	0670      	lsls	r0, r6, #25
 800a80a:	d5fb      	bpl.n	800a804 <_printf_i+0x1c8>
 800a80c:	8019      	strh	r1, [r3, #0]
 800a80e:	2300      	movs	r3, #0
 800a810:	6123      	str	r3, [r4, #16]
 800a812:	4615      	mov	r5, r2
 800a814:	e7ba      	b.n	800a78c <_printf_i+0x150>
 800a816:	682b      	ldr	r3, [r5, #0]
 800a818:	1d1a      	adds	r2, r3, #4
 800a81a:	602a      	str	r2, [r5, #0]
 800a81c:	681d      	ldr	r5, [r3, #0]
 800a81e:	6862      	ldr	r2, [r4, #4]
 800a820:	2100      	movs	r1, #0
 800a822:	4628      	mov	r0, r5
 800a824:	f7f5 fcf4 	bl	8000210 <memchr>
 800a828:	b108      	cbz	r0, 800a82e <_printf_i+0x1f2>
 800a82a:	1b40      	subs	r0, r0, r5
 800a82c:	6060      	str	r0, [r4, #4]
 800a82e:	6863      	ldr	r3, [r4, #4]
 800a830:	6123      	str	r3, [r4, #16]
 800a832:	2300      	movs	r3, #0
 800a834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a838:	e7a8      	b.n	800a78c <_printf_i+0x150>
 800a83a:	6923      	ldr	r3, [r4, #16]
 800a83c:	462a      	mov	r2, r5
 800a83e:	4649      	mov	r1, r9
 800a840:	4640      	mov	r0, r8
 800a842:	47d0      	blx	sl
 800a844:	3001      	adds	r0, #1
 800a846:	d0ab      	beq.n	800a7a0 <_printf_i+0x164>
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	079b      	lsls	r3, r3, #30
 800a84c:	d413      	bmi.n	800a876 <_printf_i+0x23a>
 800a84e:	68e0      	ldr	r0, [r4, #12]
 800a850:	9b03      	ldr	r3, [sp, #12]
 800a852:	4298      	cmp	r0, r3
 800a854:	bfb8      	it	lt
 800a856:	4618      	movlt	r0, r3
 800a858:	e7a4      	b.n	800a7a4 <_printf_i+0x168>
 800a85a:	2301      	movs	r3, #1
 800a85c:	4632      	mov	r2, r6
 800a85e:	4649      	mov	r1, r9
 800a860:	4640      	mov	r0, r8
 800a862:	47d0      	blx	sl
 800a864:	3001      	adds	r0, #1
 800a866:	d09b      	beq.n	800a7a0 <_printf_i+0x164>
 800a868:	3501      	adds	r5, #1
 800a86a:	68e3      	ldr	r3, [r4, #12]
 800a86c:	9903      	ldr	r1, [sp, #12]
 800a86e:	1a5b      	subs	r3, r3, r1
 800a870:	42ab      	cmp	r3, r5
 800a872:	dcf2      	bgt.n	800a85a <_printf_i+0x21e>
 800a874:	e7eb      	b.n	800a84e <_printf_i+0x212>
 800a876:	2500      	movs	r5, #0
 800a878:	f104 0619 	add.w	r6, r4, #25
 800a87c:	e7f5      	b.n	800a86a <_printf_i+0x22e>
 800a87e:	bf00      	nop
 800a880:	0800bb99 	.word	0x0800bb99
 800a884:	0800bbaa 	.word	0x0800bbaa

0800a888 <_sbrk_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4d06      	ldr	r5, [pc, #24]	; (800a8a4 <_sbrk_r+0x1c>)
 800a88c:	2300      	movs	r3, #0
 800a88e:	4604      	mov	r4, r0
 800a890:	4608      	mov	r0, r1
 800a892:	602b      	str	r3, [r5, #0]
 800a894:	f7f7 f976 	bl	8001b84 <_sbrk>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d102      	bne.n	800a8a2 <_sbrk_r+0x1a>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	b103      	cbz	r3, 800a8a2 <_sbrk_r+0x1a>
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	20002384 	.word	0x20002384

0800a8a8 <__sread>:
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	460c      	mov	r4, r1
 800a8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b0:	f000 f8a0 	bl	800a9f4 <_read_r>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	bfab      	itete	ge
 800a8b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8ba:	89a3      	ldrhlt	r3, [r4, #12]
 800a8bc:	181b      	addge	r3, r3, r0
 800a8be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8c2:	bfac      	ite	ge
 800a8c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8c6:	81a3      	strhlt	r3, [r4, #12]
 800a8c8:	bd10      	pop	{r4, pc}

0800a8ca <__swrite>:
 800a8ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ce:	461f      	mov	r7, r3
 800a8d0:	898b      	ldrh	r3, [r1, #12]
 800a8d2:	05db      	lsls	r3, r3, #23
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	4616      	mov	r6, r2
 800a8da:	d505      	bpl.n	800a8e8 <__swrite+0x1e>
 800a8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f000 f868 	bl	800a9b8 <_lseek_r>
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8f2:	81a3      	strh	r3, [r4, #12]
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	463b      	mov	r3, r7
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fe:	f000 b817 	b.w	800a930 <_write_r>

0800a902 <__sseek>:
 800a902:	b510      	push	{r4, lr}
 800a904:	460c      	mov	r4, r1
 800a906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90a:	f000 f855 	bl	800a9b8 <_lseek_r>
 800a90e:	1c43      	adds	r3, r0, #1
 800a910:	89a3      	ldrh	r3, [r4, #12]
 800a912:	bf15      	itete	ne
 800a914:	6560      	strne	r0, [r4, #84]	; 0x54
 800a916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a91a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a91e:	81a3      	strheq	r3, [r4, #12]
 800a920:	bf18      	it	ne
 800a922:	81a3      	strhne	r3, [r4, #12]
 800a924:	bd10      	pop	{r4, pc}

0800a926 <__sclose>:
 800a926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a92a:	f000 b813 	b.w	800a954 <_close_r>
	...

0800a930 <_write_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4d07      	ldr	r5, [pc, #28]	; (800a950 <_write_r+0x20>)
 800a934:	4604      	mov	r4, r0
 800a936:	4608      	mov	r0, r1
 800a938:	4611      	mov	r1, r2
 800a93a:	2200      	movs	r2, #0
 800a93c:	602a      	str	r2, [r5, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	f7f6 faeb 	bl	8000f1a <_write>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_write_r+0x1e>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_write_r+0x1e>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	20002384 	.word	0x20002384

0800a954 <_close_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4d06      	ldr	r5, [pc, #24]	; (800a970 <_close_r+0x1c>)
 800a958:	2300      	movs	r3, #0
 800a95a:	4604      	mov	r4, r0
 800a95c:	4608      	mov	r0, r1
 800a95e:	602b      	str	r3, [r5, #0]
 800a960:	f7f7 f8db 	bl	8001b1a <_close>
 800a964:	1c43      	adds	r3, r0, #1
 800a966:	d102      	bne.n	800a96e <_close_r+0x1a>
 800a968:	682b      	ldr	r3, [r5, #0]
 800a96a:	b103      	cbz	r3, 800a96e <_close_r+0x1a>
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
 800a970:	20002384 	.word	0x20002384

0800a974 <_fstat_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	4d07      	ldr	r5, [pc, #28]	; (800a994 <_fstat_r+0x20>)
 800a978:	2300      	movs	r3, #0
 800a97a:	4604      	mov	r4, r0
 800a97c:	4608      	mov	r0, r1
 800a97e:	4611      	mov	r1, r2
 800a980:	602b      	str	r3, [r5, #0]
 800a982:	f7f7 f8d6 	bl	8001b32 <_fstat>
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	d102      	bne.n	800a990 <_fstat_r+0x1c>
 800a98a:	682b      	ldr	r3, [r5, #0]
 800a98c:	b103      	cbz	r3, 800a990 <_fstat_r+0x1c>
 800a98e:	6023      	str	r3, [r4, #0]
 800a990:	bd38      	pop	{r3, r4, r5, pc}
 800a992:	bf00      	nop
 800a994:	20002384 	.word	0x20002384

0800a998 <_isatty_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4d06      	ldr	r5, [pc, #24]	; (800a9b4 <_isatty_r+0x1c>)
 800a99c:	2300      	movs	r3, #0
 800a99e:	4604      	mov	r4, r0
 800a9a0:	4608      	mov	r0, r1
 800a9a2:	602b      	str	r3, [r5, #0]
 800a9a4:	f7f7 f8d5 	bl	8001b52 <_isatty>
 800a9a8:	1c43      	adds	r3, r0, #1
 800a9aa:	d102      	bne.n	800a9b2 <_isatty_r+0x1a>
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	b103      	cbz	r3, 800a9b2 <_isatty_r+0x1a>
 800a9b0:	6023      	str	r3, [r4, #0]
 800a9b2:	bd38      	pop	{r3, r4, r5, pc}
 800a9b4:	20002384 	.word	0x20002384

0800a9b8 <_lseek_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	4d07      	ldr	r5, [pc, #28]	; (800a9d8 <_lseek_r+0x20>)
 800a9bc:	4604      	mov	r4, r0
 800a9be:	4608      	mov	r0, r1
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	602a      	str	r2, [r5, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	f7f7 f8ce 	bl	8001b68 <_lseek>
 800a9cc:	1c43      	adds	r3, r0, #1
 800a9ce:	d102      	bne.n	800a9d6 <_lseek_r+0x1e>
 800a9d0:	682b      	ldr	r3, [r5, #0]
 800a9d2:	b103      	cbz	r3, 800a9d6 <_lseek_r+0x1e>
 800a9d4:	6023      	str	r3, [r4, #0]
 800a9d6:	bd38      	pop	{r3, r4, r5, pc}
 800a9d8:	20002384 	.word	0x20002384

0800a9dc <__malloc_lock>:
 800a9dc:	4801      	ldr	r0, [pc, #4]	; (800a9e4 <__malloc_lock+0x8>)
 800a9de:	f7ff bb1d 	b.w	800a01c <__retarget_lock_acquire_recursive>
 800a9e2:	bf00      	nop
 800a9e4:	20002378 	.word	0x20002378

0800a9e8 <__malloc_unlock>:
 800a9e8:	4801      	ldr	r0, [pc, #4]	; (800a9f0 <__malloc_unlock+0x8>)
 800a9ea:	f7ff bb18 	b.w	800a01e <__retarget_lock_release_recursive>
 800a9ee:	bf00      	nop
 800a9f0:	20002378 	.word	0x20002378

0800a9f4 <_read_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	4d07      	ldr	r5, [pc, #28]	; (800aa14 <_read_r+0x20>)
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	4608      	mov	r0, r1
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	2200      	movs	r2, #0
 800aa00:	602a      	str	r2, [r5, #0]
 800aa02:	461a      	mov	r2, r3
 800aa04:	f7f7 f86c 	bl	8001ae0 <_read>
 800aa08:	1c43      	adds	r3, r0, #1
 800aa0a:	d102      	bne.n	800aa12 <_read_r+0x1e>
 800aa0c:	682b      	ldr	r3, [r5, #0]
 800aa0e:	b103      	cbz	r3, 800aa12 <_read_r+0x1e>
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	bd38      	pop	{r3, r4, r5, pc}
 800aa14:	20002384 	.word	0x20002384

0800aa18 <pow>:
 800aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1a:	ed2d 8b02 	vpush	{d8}
 800aa1e:	eeb0 8a40 	vmov.f32	s16, s0
 800aa22:	eef0 8a60 	vmov.f32	s17, s1
 800aa26:	ec55 4b11 	vmov	r4, r5, d1
 800aa2a:	f000 f891 	bl	800ab50 <__ieee754_pow>
 800aa2e:	4622      	mov	r2, r4
 800aa30:	462b      	mov	r3, r5
 800aa32:	4620      	mov	r0, r4
 800aa34:	4629      	mov	r1, r5
 800aa36:	ec57 6b10 	vmov	r6, r7, d0
 800aa3a:	f7f6 f88f 	bl	8000b5c <__aeabi_dcmpun>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d13b      	bne.n	800aaba <pow+0xa2>
 800aa42:	ec51 0b18 	vmov	r0, r1, d8
 800aa46:	2200      	movs	r2, #0
 800aa48:	2300      	movs	r3, #0
 800aa4a:	f7f6 f855 	bl	8000af8 <__aeabi_dcmpeq>
 800aa4e:	b1b8      	cbz	r0, 800aa80 <pow+0x68>
 800aa50:	2200      	movs	r2, #0
 800aa52:	2300      	movs	r3, #0
 800aa54:	4620      	mov	r0, r4
 800aa56:	4629      	mov	r1, r5
 800aa58:	f7f6 f84e 	bl	8000af8 <__aeabi_dcmpeq>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d146      	bne.n	800aaee <pow+0xd6>
 800aa60:	ec45 4b10 	vmov	d0, r4, r5
 800aa64:	f000 fe8d 	bl	800b782 <finite>
 800aa68:	b338      	cbz	r0, 800aaba <pow+0xa2>
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	4620      	mov	r0, r4
 800aa70:	4629      	mov	r1, r5
 800aa72:	f7f6 f84b 	bl	8000b0c <__aeabi_dcmplt>
 800aa76:	b300      	cbz	r0, 800aaba <pow+0xa2>
 800aa78:	f7fe ff98 	bl	80099ac <__errno>
 800aa7c:	2322      	movs	r3, #34	; 0x22
 800aa7e:	e01b      	b.n	800aab8 <pow+0xa0>
 800aa80:	ec47 6b10 	vmov	d0, r6, r7
 800aa84:	f000 fe7d 	bl	800b782 <finite>
 800aa88:	b9e0      	cbnz	r0, 800aac4 <pow+0xac>
 800aa8a:	eeb0 0a48 	vmov.f32	s0, s16
 800aa8e:	eef0 0a68 	vmov.f32	s1, s17
 800aa92:	f000 fe76 	bl	800b782 <finite>
 800aa96:	b1a8      	cbz	r0, 800aac4 <pow+0xac>
 800aa98:	ec45 4b10 	vmov	d0, r4, r5
 800aa9c:	f000 fe71 	bl	800b782 <finite>
 800aaa0:	b180      	cbz	r0, 800aac4 <pow+0xac>
 800aaa2:	4632      	mov	r2, r6
 800aaa4:	463b      	mov	r3, r7
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	4639      	mov	r1, r7
 800aaaa:	f7f6 f857 	bl	8000b5c <__aeabi_dcmpun>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d0e2      	beq.n	800aa78 <pow+0x60>
 800aab2:	f7fe ff7b 	bl	80099ac <__errno>
 800aab6:	2321      	movs	r3, #33	; 0x21
 800aab8:	6003      	str	r3, [r0, #0]
 800aaba:	ecbd 8b02 	vpop	{d8}
 800aabe:	ec47 6b10 	vmov	d0, r6, r7
 800aac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aac4:	2200      	movs	r2, #0
 800aac6:	2300      	movs	r3, #0
 800aac8:	4630      	mov	r0, r6
 800aaca:	4639      	mov	r1, r7
 800aacc:	f7f6 f814 	bl	8000af8 <__aeabi_dcmpeq>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d0f2      	beq.n	800aaba <pow+0xa2>
 800aad4:	eeb0 0a48 	vmov.f32	s0, s16
 800aad8:	eef0 0a68 	vmov.f32	s1, s17
 800aadc:	f000 fe51 	bl	800b782 <finite>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d0ea      	beq.n	800aaba <pow+0xa2>
 800aae4:	ec45 4b10 	vmov	d0, r4, r5
 800aae8:	f000 fe4b 	bl	800b782 <finite>
 800aaec:	e7c3      	b.n	800aa76 <pow+0x5e>
 800aaee:	4f01      	ldr	r7, [pc, #4]	; (800aaf4 <pow+0xdc>)
 800aaf0:	2600      	movs	r6, #0
 800aaf2:	e7e2      	b.n	800aaba <pow+0xa2>
 800aaf4:	3ff00000 	.word	0x3ff00000

0800aaf8 <sqrt>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	ed2d 8b02 	vpush	{d8}
 800aafe:	ec55 4b10 	vmov	r4, r5, d0
 800ab02:	f000 fd53 	bl	800b5ac <__ieee754_sqrt>
 800ab06:	4622      	mov	r2, r4
 800ab08:	462b      	mov	r3, r5
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	eeb0 8a40 	vmov.f32	s16, s0
 800ab12:	eef0 8a60 	vmov.f32	s17, s1
 800ab16:	f7f6 f821 	bl	8000b5c <__aeabi_dcmpun>
 800ab1a:	b990      	cbnz	r0, 800ab42 <sqrt+0x4a>
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2300      	movs	r3, #0
 800ab20:	4620      	mov	r0, r4
 800ab22:	4629      	mov	r1, r5
 800ab24:	f7f5 fff2 	bl	8000b0c <__aeabi_dcmplt>
 800ab28:	b158      	cbz	r0, 800ab42 <sqrt+0x4a>
 800ab2a:	f7fe ff3f 	bl	80099ac <__errno>
 800ab2e:	2321      	movs	r3, #33	; 0x21
 800ab30:	6003      	str	r3, [r0, #0]
 800ab32:	2200      	movs	r2, #0
 800ab34:	2300      	movs	r3, #0
 800ab36:	4610      	mov	r0, r2
 800ab38:	4619      	mov	r1, r3
 800ab3a:	f7f5 fe9f 	bl	800087c <__aeabi_ddiv>
 800ab3e:	ec41 0b18 	vmov	d8, r0, r1
 800ab42:	eeb0 0a48 	vmov.f32	s0, s16
 800ab46:	eef0 0a68 	vmov.f32	s1, s17
 800ab4a:	ecbd 8b02 	vpop	{d8}
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}

0800ab50 <__ieee754_pow>:
 800ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	ed2d 8b06 	vpush	{d8-d10}
 800ab58:	b089      	sub	sp, #36	; 0x24
 800ab5a:	ed8d 1b00 	vstr	d1, [sp]
 800ab5e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ab62:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ab66:	ea58 0102 	orrs.w	r1, r8, r2
 800ab6a:	ec57 6b10 	vmov	r6, r7, d0
 800ab6e:	d115      	bne.n	800ab9c <__ieee754_pow+0x4c>
 800ab70:	19b3      	adds	r3, r6, r6
 800ab72:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ab76:	4152      	adcs	r2, r2
 800ab78:	4299      	cmp	r1, r3
 800ab7a:	4b89      	ldr	r3, [pc, #548]	; (800ada0 <__ieee754_pow+0x250>)
 800ab7c:	4193      	sbcs	r3, r2
 800ab7e:	f080 84d2 	bcs.w	800b526 <__ieee754_pow+0x9d6>
 800ab82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab86:	4630      	mov	r0, r6
 800ab88:	4639      	mov	r1, r7
 800ab8a:	f7f5 fb97 	bl	80002bc <__adddf3>
 800ab8e:	ec41 0b10 	vmov	d0, r0, r1
 800ab92:	b009      	add	sp, #36	; 0x24
 800ab94:	ecbd 8b06 	vpop	{d8-d10}
 800ab98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9c:	4b81      	ldr	r3, [pc, #516]	; (800ada4 <__ieee754_pow+0x254>)
 800ab9e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800aba2:	429c      	cmp	r4, r3
 800aba4:	ee10 aa10 	vmov	sl, s0
 800aba8:	463d      	mov	r5, r7
 800abaa:	dc06      	bgt.n	800abba <__ieee754_pow+0x6a>
 800abac:	d101      	bne.n	800abb2 <__ieee754_pow+0x62>
 800abae:	2e00      	cmp	r6, #0
 800abb0:	d1e7      	bne.n	800ab82 <__ieee754_pow+0x32>
 800abb2:	4598      	cmp	r8, r3
 800abb4:	dc01      	bgt.n	800abba <__ieee754_pow+0x6a>
 800abb6:	d10f      	bne.n	800abd8 <__ieee754_pow+0x88>
 800abb8:	b172      	cbz	r2, 800abd8 <__ieee754_pow+0x88>
 800abba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800abbe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800abc2:	ea55 050a 	orrs.w	r5, r5, sl
 800abc6:	d1dc      	bne.n	800ab82 <__ieee754_pow+0x32>
 800abc8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abcc:	18db      	adds	r3, r3, r3
 800abce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800abd2:	4152      	adcs	r2, r2
 800abd4:	429d      	cmp	r5, r3
 800abd6:	e7d0      	b.n	800ab7a <__ieee754_pow+0x2a>
 800abd8:	2d00      	cmp	r5, #0
 800abda:	da3b      	bge.n	800ac54 <__ieee754_pow+0x104>
 800abdc:	4b72      	ldr	r3, [pc, #456]	; (800ada8 <__ieee754_pow+0x258>)
 800abde:	4598      	cmp	r8, r3
 800abe0:	dc51      	bgt.n	800ac86 <__ieee754_pow+0x136>
 800abe2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800abe6:	4598      	cmp	r8, r3
 800abe8:	f340 84ac 	ble.w	800b544 <__ieee754_pow+0x9f4>
 800abec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800abf0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800abf4:	2b14      	cmp	r3, #20
 800abf6:	dd0f      	ble.n	800ac18 <__ieee754_pow+0xc8>
 800abf8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800abfc:	fa22 f103 	lsr.w	r1, r2, r3
 800ac00:	fa01 f303 	lsl.w	r3, r1, r3
 800ac04:	4293      	cmp	r3, r2
 800ac06:	f040 849d 	bne.w	800b544 <__ieee754_pow+0x9f4>
 800ac0a:	f001 0101 	and.w	r1, r1, #1
 800ac0e:	f1c1 0302 	rsb	r3, r1, #2
 800ac12:	9304      	str	r3, [sp, #16]
 800ac14:	b182      	cbz	r2, 800ac38 <__ieee754_pow+0xe8>
 800ac16:	e05f      	b.n	800acd8 <__ieee754_pow+0x188>
 800ac18:	2a00      	cmp	r2, #0
 800ac1a:	d15b      	bne.n	800acd4 <__ieee754_pow+0x184>
 800ac1c:	f1c3 0314 	rsb	r3, r3, #20
 800ac20:	fa48 f103 	asr.w	r1, r8, r3
 800ac24:	fa01 f303 	lsl.w	r3, r1, r3
 800ac28:	4543      	cmp	r3, r8
 800ac2a:	f040 8488 	bne.w	800b53e <__ieee754_pow+0x9ee>
 800ac2e:	f001 0101 	and.w	r1, r1, #1
 800ac32:	f1c1 0302 	rsb	r3, r1, #2
 800ac36:	9304      	str	r3, [sp, #16]
 800ac38:	4b5c      	ldr	r3, [pc, #368]	; (800adac <__ieee754_pow+0x25c>)
 800ac3a:	4598      	cmp	r8, r3
 800ac3c:	d132      	bne.n	800aca4 <__ieee754_pow+0x154>
 800ac3e:	f1b9 0f00 	cmp.w	r9, #0
 800ac42:	f280 8478 	bge.w	800b536 <__ieee754_pow+0x9e6>
 800ac46:	4959      	ldr	r1, [pc, #356]	; (800adac <__ieee754_pow+0x25c>)
 800ac48:	4632      	mov	r2, r6
 800ac4a:	463b      	mov	r3, r7
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	f7f5 fe15 	bl	800087c <__aeabi_ddiv>
 800ac52:	e79c      	b.n	800ab8e <__ieee754_pow+0x3e>
 800ac54:	2300      	movs	r3, #0
 800ac56:	9304      	str	r3, [sp, #16]
 800ac58:	2a00      	cmp	r2, #0
 800ac5a:	d13d      	bne.n	800acd8 <__ieee754_pow+0x188>
 800ac5c:	4b51      	ldr	r3, [pc, #324]	; (800ada4 <__ieee754_pow+0x254>)
 800ac5e:	4598      	cmp	r8, r3
 800ac60:	d1ea      	bne.n	800ac38 <__ieee754_pow+0xe8>
 800ac62:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ac66:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ac6a:	ea53 030a 	orrs.w	r3, r3, sl
 800ac6e:	f000 845a 	beq.w	800b526 <__ieee754_pow+0x9d6>
 800ac72:	4b4f      	ldr	r3, [pc, #316]	; (800adb0 <__ieee754_pow+0x260>)
 800ac74:	429c      	cmp	r4, r3
 800ac76:	dd08      	ble.n	800ac8a <__ieee754_pow+0x13a>
 800ac78:	f1b9 0f00 	cmp.w	r9, #0
 800ac7c:	f2c0 8457 	blt.w	800b52e <__ieee754_pow+0x9de>
 800ac80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac84:	e783      	b.n	800ab8e <__ieee754_pow+0x3e>
 800ac86:	2302      	movs	r3, #2
 800ac88:	e7e5      	b.n	800ac56 <__ieee754_pow+0x106>
 800ac8a:	f1b9 0f00 	cmp.w	r9, #0
 800ac8e:	f04f 0000 	mov.w	r0, #0
 800ac92:	f04f 0100 	mov.w	r1, #0
 800ac96:	f6bf af7a 	bge.w	800ab8e <__ieee754_pow+0x3e>
 800ac9a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ac9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aca2:	e774      	b.n	800ab8e <__ieee754_pow+0x3e>
 800aca4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800aca8:	d106      	bne.n	800acb8 <__ieee754_pow+0x168>
 800acaa:	4632      	mov	r2, r6
 800acac:	463b      	mov	r3, r7
 800acae:	4630      	mov	r0, r6
 800acb0:	4639      	mov	r1, r7
 800acb2:	f7f5 fcb9 	bl	8000628 <__aeabi_dmul>
 800acb6:	e76a      	b.n	800ab8e <__ieee754_pow+0x3e>
 800acb8:	4b3e      	ldr	r3, [pc, #248]	; (800adb4 <__ieee754_pow+0x264>)
 800acba:	4599      	cmp	r9, r3
 800acbc:	d10c      	bne.n	800acd8 <__ieee754_pow+0x188>
 800acbe:	2d00      	cmp	r5, #0
 800acc0:	db0a      	blt.n	800acd8 <__ieee754_pow+0x188>
 800acc2:	ec47 6b10 	vmov	d0, r6, r7
 800acc6:	b009      	add	sp, #36	; 0x24
 800acc8:	ecbd 8b06 	vpop	{d8-d10}
 800accc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd0:	f000 bc6c 	b.w	800b5ac <__ieee754_sqrt>
 800acd4:	2300      	movs	r3, #0
 800acd6:	9304      	str	r3, [sp, #16]
 800acd8:	ec47 6b10 	vmov	d0, r6, r7
 800acdc:	f000 fd48 	bl	800b770 <fabs>
 800ace0:	ec51 0b10 	vmov	r0, r1, d0
 800ace4:	f1ba 0f00 	cmp.w	sl, #0
 800ace8:	d129      	bne.n	800ad3e <__ieee754_pow+0x1ee>
 800acea:	b124      	cbz	r4, 800acf6 <__ieee754_pow+0x1a6>
 800acec:	4b2f      	ldr	r3, [pc, #188]	; (800adac <__ieee754_pow+0x25c>)
 800acee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d123      	bne.n	800ad3e <__ieee754_pow+0x1ee>
 800acf6:	f1b9 0f00 	cmp.w	r9, #0
 800acfa:	da05      	bge.n	800ad08 <__ieee754_pow+0x1b8>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	2000      	movs	r0, #0
 800ad02:	492a      	ldr	r1, [pc, #168]	; (800adac <__ieee754_pow+0x25c>)
 800ad04:	f7f5 fdba 	bl	800087c <__aeabi_ddiv>
 800ad08:	2d00      	cmp	r5, #0
 800ad0a:	f6bf af40 	bge.w	800ab8e <__ieee754_pow+0x3e>
 800ad0e:	9b04      	ldr	r3, [sp, #16]
 800ad10:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ad14:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ad18:	4323      	orrs	r3, r4
 800ad1a:	d108      	bne.n	800ad2e <__ieee754_pow+0x1de>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	460b      	mov	r3, r1
 800ad20:	4610      	mov	r0, r2
 800ad22:	4619      	mov	r1, r3
 800ad24:	f7f5 fac8 	bl	80002b8 <__aeabi_dsub>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	e78f      	b.n	800ac4e <__ieee754_pow+0xfe>
 800ad2e:	9b04      	ldr	r3, [sp, #16]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	f47f af2c 	bne.w	800ab8e <__ieee754_pow+0x3e>
 800ad36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	e727      	b.n	800ab8e <__ieee754_pow+0x3e>
 800ad3e:	0feb      	lsrs	r3, r5, #31
 800ad40:	3b01      	subs	r3, #1
 800ad42:	9306      	str	r3, [sp, #24]
 800ad44:	9a06      	ldr	r2, [sp, #24]
 800ad46:	9b04      	ldr	r3, [sp, #16]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	d102      	bne.n	800ad52 <__ieee754_pow+0x202>
 800ad4c:	4632      	mov	r2, r6
 800ad4e:	463b      	mov	r3, r7
 800ad50:	e7e6      	b.n	800ad20 <__ieee754_pow+0x1d0>
 800ad52:	4b19      	ldr	r3, [pc, #100]	; (800adb8 <__ieee754_pow+0x268>)
 800ad54:	4598      	cmp	r8, r3
 800ad56:	f340 80fb 	ble.w	800af50 <__ieee754_pow+0x400>
 800ad5a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ad5e:	4598      	cmp	r8, r3
 800ad60:	4b13      	ldr	r3, [pc, #76]	; (800adb0 <__ieee754_pow+0x260>)
 800ad62:	dd0c      	ble.n	800ad7e <__ieee754_pow+0x22e>
 800ad64:	429c      	cmp	r4, r3
 800ad66:	dc0f      	bgt.n	800ad88 <__ieee754_pow+0x238>
 800ad68:	f1b9 0f00 	cmp.w	r9, #0
 800ad6c:	da0f      	bge.n	800ad8e <__ieee754_pow+0x23e>
 800ad6e:	2000      	movs	r0, #0
 800ad70:	b009      	add	sp, #36	; 0x24
 800ad72:	ecbd 8b06 	vpop	{d8-d10}
 800ad76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7a:	f000 bcf0 	b.w	800b75e <__math_oflow>
 800ad7e:	429c      	cmp	r4, r3
 800ad80:	dbf2      	blt.n	800ad68 <__ieee754_pow+0x218>
 800ad82:	4b0a      	ldr	r3, [pc, #40]	; (800adac <__ieee754_pow+0x25c>)
 800ad84:	429c      	cmp	r4, r3
 800ad86:	dd19      	ble.n	800adbc <__ieee754_pow+0x26c>
 800ad88:	f1b9 0f00 	cmp.w	r9, #0
 800ad8c:	dcef      	bgt.n	800ad6e <__ieee754_pow+0x21e>
 800ad8e:	2000      	movs	r0, #0
 800ad90:	b009      	add	sp, #36	; 0x24
 800ad92:	ecbd 8b06 	vpop	{d8-d10}
 800ad96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9a:	f000 bcd7 	b.w	800b74c <__math_uflow>
 800ad9e:	bf00      	nop
 800ada0:	fff00000 	.word	0xfff00000
 800ada4:	7ff00000 	.word	0x7ff00000
 800ada8:	433fffff 	.word	0x433fffff
 800adac:	3ff00000 	.word	0x3ff00000
 800adb0:	3fefffff 	.word	0x3fefffff
 800adb4:	3fe00000 	.word	0x3fe00000
 800adb8:	41e00000 	.word	0x41e00000
 800adbc:	4b60      	ldr	r3, [pc, #384]	; (800af40 <__ieee754_pow+0x3f0>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	f7f5 fa7a 	bl	80002b8 <__aeabi_dsub>
 800adc4:	a354      	add	r3, pc, #336	; (adr r3, 800af18 <__ieee754_pow+0x3c8>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	4604      	mov	r4, r0
 800adcc:	460d      	mov	r5, r1
 800adce:	f7f5 fc2b 	bl	8000628 <__aeabi_dmul>
 800add2:	a353      	add	r3, pc, #332	; (adr r3, 800af20 <__ieee754_pow+0x3d0>)
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	4606      	mov	r6, r0
 800adda:	460f      	mov	r7, r1
 800addc:	4620      	mov	r0, r4
 800adde:	4629      	mov	r1, r5
 800ade0:	f7f5 fc22 	bl	8000628 <__aeabi_dmul>
 800ade4:	4b57      	ldr	r3, [pc, #348]	; (800af44 <__ieee754_pow+0x3f4>)
 800ade6:	4682      	mov	sl, r0
 800ade8:	468b      	mov	fp, r1
 800adea:	2200      	movs	r2, #0
 800adec:	4620      	mov	r0, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	f7f5 fc1a 	bl	8000628 <__aeabi_dmul>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	a14b      	add	r1, pc, #300	; (adr r1, 800af28 <__ieee754_pow+0x3d8>)
 800adfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adfe:	f7f5 fa5b 	bl	80002b8 <__aeabi_dsub>
 800ae02:	4622      	mov	r2, r4
 800ae04:	462b      	mov	r3, r5
 800ae06:	f7f5 fc0f 	bl	8000628 <__aeabi_dmul>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	2000      	movs	r0, #0
 800ae10:	494d      	ldr	r1, [pc, #308]	; (800af48 <__ieee754_pow+0x3f8>)
 800ae12:	f7f5 fa51 	bl	80002b8 <__aeabi_dsub>
 800ae16:	4622      	mov	r2, r4
 800ae18:	4680      	mov	r8, r0
 800ae1a:	4689      	mov	r9, r1
 800ae1c:	462b      	mov	r3, r5
 800ae1e:	4620      	mov	r0, r4
 800ae20:	4629      	mov	r1, r5
 800ae22:	f7f5 fc01 	bl	8000628 <__aeabi_dmul>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4640      	mov	r0, r8
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	f7f5 fbfb 	bl	8000628 <__aeabi_dmul>
 800ae32:	a33f      	add	r3, pc, #252	; (adr r3, 800af30 <__ieee754_pow+0x3e0>)
 800ae34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae38:	f7f5 fbf6 	bl	8000628 <__aeabi_dmul>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4650      	mov	r0, sl
 800ae42:	4659      	mov	r1, fp
 800ae44:	f7f5 fa38 	bl	80002b8 <__aeabi_dsub>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4680      	mov	r8, r0
 800ae4e:	4689      	mov	r9, r1
 800ae50:	4630      	mov	r0, r6
 800ae52:	4639      	mov	r1, r7
 800ae54:	f7f5 fa32 	bl	80002bc <__adddf3>
 800ae58:	2000      	movs	r0, #0
 800ae5a:	4632      	mov	r2, r6
 800ae5c:	463b      	mov	r3, r7
 800ae5e:	4604      	mov	r4, r0
 800ae60:	460d      	mov	r5, r1
 800ae62:	f7f5 fa29 	bl	80002b8 <__aeabi_dsub>
 800ae66:	4602      	mov	r2, r0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	f7f5 fa23 	bl	80002b8 <__aeabi_dsub>
 800ae72:	9b04      	ldr	r3, [sp, #16]
 800ae74:	9a06      	ldr	r2, [sp, #24]
 800ae76:	3b01      	subs	r3, #1
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	4682      	mov	sl, r0
 800ae7c:	468b      	mov	fp, r1
 800ae7e:	f040 81e7 	bne.w	800b250 <__ieee754_pow+0x700>
 800ae82:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800af38 <__ieee754_pow+0x3e8>
 800ae86:	eeb0 8a47 	vmov.f32	s16, s14
 800ae8a:	eef0 8a67 	vmov.f32	s17, s15
 800ae8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ae92:	2600      	movs	r6, #0
 800ae94:	4632      	mov	r2, r6
 800ae96:	463b      	mov	r3, r7
 800ae98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae9c:	f7f5 fa0c 	bl	80002b8 <__aeabi_dsub>
 800aea0:	4622      	mov	r2, r4
 800aea2:	462b      	mov	r3, r5
 800aea4:	f7f5 fbc0 	bl	8000628 <__aeabi_dmul>
 800aea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeac:	4680      	mov	r8, r0
 800aeae:	4689      	mov	r9, r1
 800aeb0:	4650      	mov	r0, sl
 800aeb2:	4659      	mov	r1, fp
 800aeb4:	f7f5 fbb8 	bl	8000628 <__aeabi_dmul>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4640      	mov	r0, r8
 800aebe:	4649      	mov	r1, r9
 800aec0:	f7f5 f9fc 	bl	80002bc <__adddf3>
 800aec4:	4632      	mov	r2, r6
 800aec6:	463b      	mov	r3, r7
 800aec8:	4680      	mov	r8, r0
 800aeca:	4689      	mov	r9, r1
 800aecc:	4620      	mov	r0, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	f7f5 fbaa 	bl	8000628 <__aeabi_dmul>
 800aed4:	460b      	mov	r3, r1
 800aed6:	4604      	mov	r4, r0
 800aed8:	460d      	mov	r5, r1
 800aeda:	4602      	mov	r2, r0
 800aedc:	4649      	mov	r1, r9
 800aede:	4640      	mov	r0, r8
 800aee0:	f7f5 f9ec 	bl	80002bc <__adddf3>
 800aee4:	4b19      	ldr	r3, [pc, #100]	; (800af4c <__ieee754_pow+0x3fc>)
 800aee6:	4299      	cmp	r1, r3
 800aee8:	ec45 4b19 	vmov	d9, r4, r5
 800aeec:	4606      	mov	r6, r0
 800aeee:	460f      	mov	r7, r1
 800aef0:	468b      	mov	fp, r1
 800aef2:	f340 82f1 	ble.w	800b4d8 <__ieee754_pow+0x988>
 800aef6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aefa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aefe:	4303      	orrs	r3, r0
 800af00:	f000 81e4 	beq.w	800b2cc <__ieee754_pow+0x77c>
 800af04:	ec51 0b18 	vmov	r0, r1, d8
 800af08:	2200      	movs	r2, #0
 800af0a:	2300      	movs	r3, #0
 800af0c:	f7f5 fdfe 	bl	8000b0c <__aeabi_dcmplt>
 800af10:	3800      	subs	r0, #0
 800af12:	bf18      	it	ne
 800af14:	2001      	movne	r0, #1
 800af16:	e72b      	b.n	800ad70 <__ieee754_pow+0x220>
 800af18:	60000000 	.word	0x60000000
 800af1c:	3ff71547 	.word	0x3ff71547
 800af20:	f85ddf44 	.word	0xf85ddf44
 800af24:	3e54ae0b 	.word	0x3e54ae0b
 800af28:	55555555 	.word	0x55555555
 800af2c:	3fd55555 	.word	0x3fd55555
 800af30:	652b82fe 	.word	0x652b82fe
 800af34:	3ff71547 	.word	0x3ff71547
 800af38:	00000000 	.word	0x00000000
 800af3c:	bff00000 	.word	0xbff00000
 800af40:	3ff00000 	.word	0x3ff00000
 800af44:	3fd00000 	.word	0x3fd00000
 800af48:	3fe00000 	.word	0x3fe00000
 800af4c:	408fffff 	.word	0x408fffff
 800af50:	4bd5      	ldr	r3, [pc, #852]	; (800b2a8 <__ieee754_pow+0x758>)
 800af52:	402b      	ands	r3, r5
 800af54:	2200      	movs	r2, #0
 800af56:	b92b      	cbnz	r3, 800af64 <__ieee754_pow+0x414>
 800af58:	4bd4      	ldr	r3, [pc, #848]	; (800b2ac <__ieee754_pow+0x75c>)
 800af5a:	f7f5 fb65 	bl	8000628 <__aeabi_dmul>
 800af5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800af62:	460c      	mov	r4, r1
 800af64:	1523      	asrs	r3, r4, #20
 800af66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af6a:	4413      	add	r3, r2
 800af6c:	9305      	str	r3, [sp, #20]
 800af6e:	4bd0      	ldr	r3, [pc, #832]	; (800b2b0 <__ieee754_pow+0x760>)
 800af70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800af74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800af78:	429c      	cmp	r4, r3
 800af7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800af7e:	dd08      	ble.n	800af92 <__ieee754_pow+0x442>
 800af80:	4bcc      	ldr	r3, [pc, #816]	; (800b2b4 <__ieee754_pow+0x764>)
 800af82:	429c      	cmp	r4, r3
 800af84:	f340 8162 	ble.w	800b24c <__ieee754_pow+0x6fc>
 800af88:	9b05      	ldr	r3, [sp, #20]
 800af8a:	3301      	adds	r3, #1
 800af8c:	9305      	str	r3, [sp, #20]
 800af8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800af92:	2400      	movs	r4, #0
 800af94:	00e3      	lsls	r3, r4, #3
 800af96:	9307      	str	r3, [sp, #28]
 800af98:	4bc7      	ldr	r3, [pc, #796]	; (800b2b8 <__ieee754_pow+0x768>)
 800af9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af9e:	ed93 7b00 	vldr	d7, [r3]
 800afa2:	4629      	mov	r1, r5
 800afa4:	ec53 2b17 	vmov	r2, r3, d7
 800afa8:	eeb0 9a47 	vmov.f32	s18, s14
 800afac:	eef0 9a67 	vmov.f32	s19, s15
 800afb0:	4682      	mov	sl, r0
 800afb2:	f7f5 f981 	bl	80002b8 <__aeabi_dsub>
 800afb6:	4652      	mov	r2, sl
 800afb8:	4606      	mov	r6, r0
 800afba:	460f      	mov	r7, r1
 800afbc:	462b      	mov	r3, r5
 800afbe:	ec51 0b19 	vmov	r0, r1, d9
 800afc2:	f7f5 f97b 	bl	80002bc <__adddf3>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	2000      	movs	r0, #0
 800afcc:	49bb      	ldr	r1, [pc, #748]	; (800b2bc <__ieee754_pow+0x76c>)
 800afce:	f7f5 fc55 	bl	800087c <__aeabi_ddiv>
 800afd2:	ec41 0b1a 	vmov	d10, r0, r1
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4630      	mov	r0, r6
 800afdc:	4639      	mov	r1, r7
 800afde:	f7f5 fb23 	bl	8000628 <__aeabi_dmul>
 800afe2:	2300      	movs	r3, #0
 800afe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afe8:	9302      	str	r3, [sp, #8]
 800afea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800afee:	46ab      	mov	fp, r5
 800aff0:	106d      	asrs	r5, r5, #1
 800aff2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aff6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800affa:	ec41 0b18 	vmov	d8, r0, r1
 800affe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b002:	2200      	movs	r2, #0
 800b004:	4640      	mov	r0, r8
 800b006:	4649      	mov	r1, r9
 800b008:	4614      	mov	r4, r2
 800b00a:	461d      	mov	r5, r3
 800b00c:	f7f5 fb0c 	bl	8000628 <__aeabi_dmul>
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	4630      	mov	r0, r6
 800b016:	4639      	mov	r1, r7
 800b018:	f7f5 f94e 	bl	80002b8 <__aeabi_dsub>
 800b01c:	ec53 2b19 	vmov	r2, r3, d9
 800b020:	4606      	mov	r6, r0
 800b022:	460f      	mov	r7, r1
 800b024:	4620      	mov	r0, r4
 800b026:	4629      	mov	r1, r5
 800b028:	f7f5 f946 	bl	80002b8 <__aeabi_dsub>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4650      	mov	r0, sl
 800b032:	4659      	mov	r1, fp
 800b034:	f7f5 f940 	bl	80002b8 <__aeabi_dsub>
 800b038:	4642      	mov	r2, r8
 800b03a:	464b      	mov	r3, r9
 800b03c:	f7f5 faf4 	bl	8000628 <__aeabi_dmul>
 800b040:	4602      	mov	r2, r0
 800b042:	460b      	mov	r3, r1
 800b044:	4630      	mov	r0, r6
 800b046:	4639      	mov	r1, r7
 800b048:	f7f5 f936 	bl	80002b8 <__aeabi_dsub>
 800b04c:	ec53 2b1a 	vmov	r2, r3, d10
 800b050:	f7f5 faea 	bl	8000628 <__aeabi_dmul>
 800b054:	ec53 2b18 	vmov	r2, r3, d8
 800b058:	ec41 0b19 	vmov	d9, r0, r1
 800b05c:	ec51 0b18 	vmov	r0, r1, d8
 800b060:	f7f5 fae2 	bl	8000628 <__aeabi_dmul>
 800b064:	a37c      	add	r3, pc, #496	; (adr r3, 800b258 <__ieee754_pow+0x708>)
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	4604      	mov	r4, r0
 800b06c:	460d      	mov	r5, r1
 800b06e:	f7f5 fadb 	bl	8000628 <__aeabi_dmul>
 800b072:	a37b      	add	r3, pc, #492	; (adr r3, 800b260 <__ieee754_pow+0x710>)
 800b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b078:	f7f5 f920 	bl	80002bc <__adddf3>
 800b07c:	4622      	mov	r2, r4
 800b07e:	462b      	mov	r3, r5
 800b080:	f7f5 fad2 	bl	8000628 <__aeabi_dmul>
 800b084:	a378      	add	r3, pc, #480	; (adr r3, 800b268 <__ieee754_pow+0x718>)
 800b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08a:	f7f5 f917 	bl	80002bc <__adddf3>
 800b08e:	4622      	mov	r2, r4
 800b090:	462b      	mov	r3, r5
 800b092:	f7f5 fac9 	bl	8000628 <__aeabi_dmul>
 800b096:	a376      	add	r3, pc, #472	; (adr r3, 800b270 <__ieee754_pow+0x720>)
 800b098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09c:	f7f5 f90e 	bl	80002bc <__adddf3>
 800b0a0:	4622      	mov	r2, r4
 800b0a2:	462b      	mov	r3, r5
 800b0a4:	f7f5 fac0 	bl	8000628 <__aeabi_dmul>
 800b0a8:	a373      	add	r3, pc, #460	; (adr r3, 800b278 <__ieee754_pow+0x728>)
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f7f5 f905 	bl	80002bc <__adddf3>
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	462b      	mov	r3, r5
 800b0b6:	f7f5 fab7 	bl	8000628 <__aeabi_dmul>
 800b0ba:	a371      	add	r3, pc, #452	; (adr r3, 800b280 <__ieee754_pow+0x730>)
 800b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c0:	f7f5 f8fc 	bl	80002bc <__adddf3>
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	460f      	mov	r7, r1
 800b0ca:	462b      	mov	r3, r5
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	f7f5 faaa 	bl	8000628 <__aeabi_dmul>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4639      	mov	r1, r7
 800b0dc:	f7f5 faa4 	bl	8000628 <__aeabi_dmul>
 800b0e0:	4642      	mov	r2, r8
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	460d      	mov	r5, r1
 800b0e6:	464b      	mov	r3, r9
 800b0e8:	ec51 0b18 	vmov	r0, r1, d8
 800b0ec:	f7f5 f8e6 	bl	80002bc <__adddf3>
 800b0f0:	ec53 2b19 	vmov	r2, r3, d9
 800b0f4:	f7f5 fa98 	bl	8000628 <__aeabi_dmul>
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	462b      	mov	r3, r5
 800b0fc:	f7f5 f8de 	bl	80002bc <__adddf3>
 800b100:	4642      	mov	r2, r8
 800b102:	4682      	mov	sl, r0
 800b104:	468b      	mov	fp, r1
 800b106:	464b      	mov	r3, r9
 800b108:	4640      	mov	r0, r8
 800b10a:	4649      	mov	r1, r9
 800b10c:	f7f5 fa8c 	bl	8000628 <__aeabi_dmul>
 800b110:	4b6b      	ldr	r3, [pc, #428]	; (800b2c0 <__ieee754_pow+0x770>)
 800b112:	2200      	movs	r2, #0
 800b114:	4606      	mov	r6, r0
 800b116:	460f      	mov	r7, r1
 800b118:	f7f5 f8d0 	bl	80002bc <__adddf3>
 800b11c:	4652      	mov	r2, sl
 800b11e:	465b      	mov	r3, fp
 800b120:	f7f5 f8cc 	bl	80002bc <__adddf3>
 800b124:	2000      	movs	r0, #0
 800b126:	4604      	mov	r4, r0
 800b128:	460d      	mov	r5, r1
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	4640      	mov	r0, r8
 800b130:	4649      	mov	r1, r9
 800b132:	f7f5 fa79 	bl	8000628 <__aeabi_dmul>
 800b136:	4b62      	ldr	r3, [pc, #392]	; (800b2c0 <__ieee754_pow+0x770>)
 800b138:	4680      	mov	r8, r0
 800b13a:	4689      	mov	r9, r1
 800b13c:	2200      	movs	r2, #0
 800b13e:	4620      	mov	r0, r4
 800b140:	4629      	mov	r1, r5
 800b142:	f7f5 f8b9 	bl	80002b8 <__aeabi_dsub>
 800b146:	4632      	mov	r2, r6
 800b148:	463b      	mov	r3, r7
 800b14a:	f7f5 f8b5 	bl	80002b8 <__aeabi_dsub>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4650      	mov	r0, sl
 800b154:	4659      	mov	r1, fp
 800b156:	f7f5 f8af 	bl	80002b8 <__aeabi_dsub>
 800b15a:	ec53 2b18 	vmov	r2, r3, d8
 800b15e:	f7f5 fa63 	bl	8000628 <__aeabi_dmul>
 800b162:	4622      	mov	r2, r4
 800b164:	4606      	mov	r6, r0
 800b166:	460f      	mov	r7, r1
 800b168:	462b      	mov	r3, r5
 800b16a:	ec51 0b19 	vmov	r0, r1, d9
 800b16e:	f7f5 fa5b 	bl	8000628 <__aeabi_dmul>
 800b172:	4602      	mov	r2, r0
 800b174:	460b      	mov	r3, r1
 800b176:	4630      	mov	r0, r6
 800b178:	4639      	mov	r1, r7
 800b17a:	f7f5 f89f 	bl	80002bc <__adddf3>
 800b17e:	4606      	mov	r6, r0
 800b180:	460f      	mov	r7, r1
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	4640      	mov	r0, r8
 800b188:	4649      	mov	r1, r9
 800b18a:	f7f5 f897 	bl	80002bc <__adddf3>
 800b18e:	a33e      	add	r3, pc, #248	; (adr r3, 800b288 <__ieee754_pow+0x738>)
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	2000      	movs	r0, #0
 800b196:	4604      	mov	r4, r0
 800b198:	460d      	mov	r5, r1
 800b19a:	f7f5 fa45 	bl	8000628 <__aeabi_dmul>
 800b19e:	4642      	mov	r2, r8
 800b1a0:	ec41 0b18 	vmov	d8, r0, r1
 800b1a4:	464b      	mov	r3, r9
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	f7f5 f885 	bl	80002b8 <__aeabi_dsub>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	4639      	mov	r1, r7
 800b1b6:	f7f5 f87f 	bl	80002b8 <__aeabi_dsub>
 800b1ba:	a335      	add	r3, pc, #212	; (adr r3, 800b290 <__ieee754_pow+0x740>)
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	f7f5 fa32 	bl	8000628 <__aeabi_dmul>
 800b1c4:	a334      	add	r3, pc, #208	; (adr r3, 800b298 <__ieee754_pow+0x748>)
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	460f      	mov	r7, r1
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	f7f5 fa29 	bl	8000628 <__aeabi_dmul>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4630      	mov	r0, r6
 800b1dc:	4639      	mov	r1, r7
 800b1de:	f7f5 f86d 	bl	80002bc <__adddf3>
 800b1e2:	9a07      	ldr	r2, [sp, #28]
 800b1e4:	4b37      	ldr	r3, [pc, #220]	; (800b2c4 <__ieee754_pow+0x774>)
 800b1e6:	4413      	add	r3, r2
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f7f5 f866 	bl	80002bc <__adddf3>
 800b1f0:	4682      	mov	sl, r0
 800b1f2:	9805      	ldr	r0, [sp, #20]
 800b1f4:	468b      	mov	fp, r1
 800b1f6:	f7f5 f9ad 	bl	8000554 <__aeabi_i2d>
 800b1fa:	9a07      	ldr	r2, [sp, #28]
 800b1fc:	4b32      	ldr	r3, [pc, #200]	; (800b2c8 <__ieee754_pow+0x778>)
 800b1fe:	4413      	add	r3, r2
 800b200:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b204:	4606      	mov	r6, r0
 800b206:	460f      	mov	r7, r1
 800b208:	4652      	mov	r2, sl
 800b20a:	465b      	mov	r3, fp
 800b20c:	ec51 0b18 	vmov	r0, r1, d8
 800b210:	f7f5 f854 	bl	80002bc <__adddf3>
 800b214:	4642      	mov	r2, r8
 800b216:	464b      	mov	r3, r9
 800b218:	f7f5 f850 	bl	80002bc <__adddf3>
 800b21c:	4632      	mov	r2, r6
 800b21e:	463b      	mov	r3, r7
 800b220:	f7f5 f84c 	bl	80002bc <__adddf3>
 800b224:	2000      	movs	r0, #0
 800b226:	4632      	mov	r2, r6
 800b228:	463b      	mov	r3, r7
 800b22a:	4604      	mov	r4, r0
 800b22c:	460d      	mov	r5, r1
 800b22e:	f7f5 f843 	bl	80002b8 <__aeabi_dsub>
 800b232:	4642      	mov	r2, r8
 800b234:	464b      	mov	r3, r9
 800b236:	f7f5 f83f 	bl	80002b8 <__aeabi_dsub>
 800b23a:	ec53 2b18 	vmov	r2, r3, d8
 800b23e:	f7f5 f83b 	bl	80002b8 <__aeabi_dsub>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	4650      	mov	r0, sl
 800b248:	4659      	mov	r1, fp
 800b24a:	e610      	b.n	800ae6e <__ieee754_pow+0x31e>
 800b24c:	2401      	movs	r4, #1
 800b24e:	e6a1      	b.n	800af94 <__ieee754_pow+0x444>
 800b250:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b2a0 <__ieee754_pow+0x750>
 800b254:	e617      	b.n	800ae86 <__ieee754_pow+0x336>
 800b256:	bf00      	nop
 800b258:	4a454eef 	.word	0x4a454eef
 800b25c:	3fca7e28 	.word	0x3fca7e28
 800b260:	93c9db65 	.word	0x93c9db65
 800b264:	3fcd864a 	.word	0x3fcd864a
 800b268:	a91d4101 	.word	0xa91d4101
 800b26c:	3fd17460 	.word	0x3fd17460
 800b270:	518f264d 	.word	0x518f264d
 800b274:	3fd55555 	.word	0x3fd55555
 800b278:	db6fabff 	.word	0xdb6fabff
 800b27c:	3fdb6db6 	.word	0x3fdb6db6
 800b280:	33333303 	.word	0x33333303
 800b284:	3fe33333 	.word	0x3fe33333
 800b288:	e0000000 	.word	0xe0000000
 800b28c:	3feec709 	.word	0x3feec709
 800b290:	dc3a03fd 	.word	0xdc3a03fd
 800b294:	3feec709 	.word	0x3feec709
 800b298:	145b01f5 	.word	0x145b01f5
 800b29c:	be3e2fe0 	.word	0xbe3e2fe0
 800b2a0:	00000000 	.word	0x00000000
 800b2a4:	3ff00000 	.word	0x3ff00000
 800b2a8:	7ff00000 	.word	0x7ff00000
 800b2ac:	43400000 	.word	0x43400000
 800b2b0:	0003988e 	.word	0x0003988e
 800b2b4:	000bb679 	.word	0x000bb679
 800b2b8:	0800bbc0 	.word	0x0800bbc0
 800b2bc:	3ff00000 	.word	0x3ff00000
 800b2c0:	40080000 	.word	0x40080000
 800b2c4:	0800bbe0 	.word	0x0800bbe0
 800b2c8:	0800bbd0 	.word	0x0800bbd0
 800b2cc:	a3b5      	add	r3, pc, #724	; (adr r3, 800b5a4 <__ieee754_pow+0xa54>)
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	4649      	mov	r1, r9
 800b2d6:	f7f4 fff1 	bl	80002bc <__adddf3>
 800b2da:	4622      	mov	r2, r4
 800b2dc:	ec41 0b1a 	vmov	d10, r0, r1
 800b2e0:	462b      	mov	r3, r5
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	4639      	mov	r1, r7
 800b2e6:	f7f4 ffe7 	bl	80002b8 <__aeabi_dsub>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	ec51 0b1a 	vmov	r0, r1, d10
 800b2f2:	f7f5 fc29 	bl	8000b48 <__aeabi_dcmpgt>
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	f47f ae04 	bne.w	800af04 <__ieee754_pow+0x3b4>
 800b2fc:	4aa4      	ldr	r2, [pc, #656]	; (800b590 <__ieee754_pow+0xa40>)
 800b2fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b302:	4293      	cmp	r3, r2
 800b304:	f340 8108 	ble.w	800b518 <__ieee754_pow+0x9c8>
 800b308:	151b      	asrs	r3, r3, #20
 800b30a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b30e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b312:	fa4a f303 	asr.w	r3, sl, r3
 800b316:	445b      	add	r3, fp
 800b318:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b31c:	4e9d      	ldr	r6, [pc, #628]	; (800b594 <__ieee754_pow+0xa44>)
 800b31e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b322:	4116      	asrs	r6, r2
 800b324:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b328:	2000      	movs	r0, #0
 800b32a:	ea23 0106 	bic.w	r1, r3, r6
 800b32e:	f1c2 0214 	rsb	r2, r2, #20
 800b332:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b336:	fa4a fa02 	asr.w	sl, sl, r2
 800b33a:	f1bb 0f00 	cmp.w	fp, #0
 800b33e:	4602      	mov	r2, r0
 800b340:	460b      	mov	r3, r1
 800b342:	4620      	mov	r0, r4
 800b344:	4629      	mov	r1, r5
 800b346:	bfb8      	it	lt
 800b348:	f1ca 0a00 	rsblt	sl, sl, #0
 800b34c:	f7f4 ffb4 	bl	80002b8 <__aeabi_dsub>
 800b350:	ec41 0b19 	vmov	d9, r0, r1
 800b354:	4642      	mov	r2, r8
 800b356:	464b      	mov	r3, r9
 800b358:	ec51 0b19 	vmov	r0, r1, d9
 800b35c:	f7f4 ffae 	bl	80002bc <__adddf3>
 800b360:	a37b      	add	r3, pc, #492	; (adr r3, 800b550 <__ieee754_pow+0xa00>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	2000      	movs	r0, #0
 800b368:	4604      	mov	r4, r0
 800b36a:	460d      	mov	r5, r1
 800b36c:	f7f5 f95c 	bl	8000628 <__aeabi_dmul>
 800b370:	ec53 2b19 	vmov	r2, r3, d9
 800b374:	4606      	mov	r6, r0
 800b376:	460f      	mov	r7, r1
 800b378:	4620      	mov	r0, r4
 800b37a:	4629      	mov	r1, r5
 800b37c:	f7f4 ff9c 	bl	80002b8 <__aeabi_dsub>
 800b380:	4602      	mov	r2, r0
 800b382:	460b      	mov	r3, r1
 800b384:	4640      	mov	r0, r8
 800b386:	4649      	mov	r1, r9
 800b388:	f7f4 ff96 	bl	80002b8 <__aeabi_dsub>
 800b38c:	a372      	add	r3, pc, #456	; (adr r3, 800b558 <__ieee754_pow+0xa08>)
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	f7f5 f949 	bl	8000628 <__aeabi_dmul>
 800b396:	a372      	add	r3, pc, #456	; (adr r3, 800b560 <__ieee754_pow+0xa10>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	4680      	mov	r8, r0
 800b39e:	4689      	mov	r9, r1
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	f7f5 f940 	bl	8000628 <__aeabi_dmul>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4640      	mov	r0, r8
 800b3ae:	4649      	mov	r1, r9
 800b3b0:	f7f4 ff84 	bl	80002bc <__adddf3>
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	460d      	mov	r5, r1
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	4630      	mov	r0, r6
 800b3be:	4639      	mov	r1, r7
 800b3c0:	f7f4 ff7c 	bl	80002bc <__adddf3>
 800b3c4:	4632      	mov	r2, r6
 800b3c6:	463b      	mov	r3, r7
 800b3c8:	4680      	mov	r8, r0
 800b3ca:	4689      	mov	r9, r1
 800b3cc:	f7f4 ff74 	bl	80002b8 <__aeabi_dsub>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	f7f4 ff6e 	bl	80002b8 <__aeabi_dsub>
 800b3dc:	4642      	mov	r2, r8
 800b3de:	4606      	mov	r6, r0
 800b3e0:	460f      	mov	r7, r1
 800b3e2:	464b      	mov	r3, r9
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	4649      	mov	r1, r9
 800b3e8:	f7f5 f91e 	bl	8000628 <__aeabi_dmul>
 800b3ec:	a35e      	add	r3, pc, #376	; (adr r3, 800b568 <__ieee754_pow+0xa18>)
 800b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	460d      	mov	r5, r1
 800b3f6:	f7f5 f917 	bl	8000628 <__aeabi_dmul>
 800b3fa:	a35d      	add	r3, pc, #372	; (adr r3, 800b570 <__ieee754_pow+0xa20>)
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	f7f4 ff5a 	bl	80002b8 <__aeabi_dsub>
 800b404:	4622      	mov	r2, r4
 800b406:	462b      	mov	r3, r5
 800b408:	f7f5 f90e 	bl	8000628 <__aeabi_dmul>
 800b40c:	a35a      	add	r3, pc, #360	; (adr r3, 800b578 <__ieee754_pow+0xa28>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	f7f4 ff53 	bl	80002bc <__adddf3>
 800b416:	4622      	mov	r2, r4
 800b418:	462b      	mov	r3, r5
 800b41a:	f7f5 f905 	bl	8000628 <__aeabi_dmul>
 800b41e:	a358      	add	r3, pc, #352	; (adr r3, 800b580 <__ieee754_pow+0xa30>)
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7f4 ff48 	bl	80002b8 <__aeabi_dsub>
 800b428:	4622      	mov	r2, r4
 800b42a:	462b      	mov	r3, r5
 800b42c:	f7f5 f8fc 	bl	8000628 <__aeabi_dmul>
 800b430:	a355      	add	r3, pc, #340	; (adr r3, 800b588 <__ieee754_pow+0xa38>)
 800b432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b436:	f7f4 ff41 	bl	80002bc <__adddf3>
 800b43a:	4622      	mov	r2, r4
 800b43c:	462b      	mov	r3, r5
 800b43e:	f7f5 f8f3 	bl	8000628 <__aeabi_dmul>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	4640      	mov	r0, r8
 800b448:	4649      	mov	r1, r9
 800b44a:	f7f4 ff35 	bl	80002b8 <__aeabi_dsub>
 800b44e:	4604      	mov	r4, r0
 800b450:	460d      	mov	r5, r1
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4640      	mov	r0, r8
 800b458:	4649      	mov	r1, r9
 800b45a:	f7f5 f8e5 	bl	8000628 <__aeabi_dmul>
 800b45e:	2200      	movs	r2, #0
 800b460:	ec41 0b19 	vmov	d9, r0, r1
 800b464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b468:	4620      	mov	r0, r4
 800b46a:	4629      	mov	r1, r5
 800b46c:	f7f4 ff24 	bl	80002b8 <__aeabi_dsub>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	ec51 0b19 	vmov	r0, r1, d9
 800b478:	f7f5 fa00 	bl	800087c <__aeabi_ddiv>
 800b47c:	4632      	mov	r2, r6
 800b47e:	4604      	mov	r4, r0
 800b480:	460d      	mov	r5, r1
 800b482:	463b      	mov	r3, r7
 800b484:	4640      	mov	r0, r8
 800b486:	4649      	mov	r1, r9
 800b488:	f7f5 f8ce 	bl	8000628 <__aeabi_dmul>
 800b48c:	4632      	mov	r2, r6
 800b48e:	463b      	mov	r3, r7
 800b490:	f7f4 ff14 	bl	80002bc <__adddf3>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	4620      	mov	r0, r4
 800b49a:	4629      	mov	r1, r5
 800b49c:	f7f4 ff0c 	bl	80002b8 <__aeabi_dsub>
 800b4a0:	4642      	mov	r2, r8
 800b4a2:	464b      	mov	r3, r9
 800b4a4:	f7f4 ff08 	bl	80002b8 <__aeabi_dsub>
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	493a      	ldr	r1, [pc, #232]	; (800b598 <__ieee754_pow+0xa48>)
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	f7f4 ff02 	bl	80002b8 <__aeabi_dsub>
 800b4b4:	ec41 0b10 	vmov	d0, r0, r1
 800b4b8:	ee10 3a90 	vmov	r3, s1
 800b4bc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b4c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4c4:	da2b      	bge.n	800b51e <__ieee754_pow+0x9ce>
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	f000 f966 	bl	800b798 <scalbn>
 800b4cc:	ec51 0b10 	vmov	r0, r1, d0
 800b4d0:	ec53 2b18 	vmov	r2, r3, d8
 800b4d4:	f7ff bbed 	b.w	800acb2 <__ieee754_pow+0x162>
 800b4d8:	4b30      	ldr	r3, [pc, #192]	; (800b59c <__ieee754_pow+0xa4c>)
 800b4da:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b4de:	429e      	cmp	r6, r3
 800b4e0:	f77f af0c 	ble.w	800b2fc <__ieee754_pow+0x7ac>
 800b4e4:	4b2e      	ldr	r3, [pc, #184]	; (800b5a0 <__ieee754_pow+0xa50>)
 800b4e6:	440b      	add	r3, r1
 800b4e8:	4303      	orrs	r3, r0
 800b4ea:	d009      	beq.n	800b500 <__ieee754_pow+0x9b0>
 800b4ec:	ec51 0b18 	vmov	r0, r1, d8
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	f7f5 fb0a 	bl	8000b0c <__aeabi_dcmplt>
 800b4f8:	3800      	subs	r0, #0
 800b4fa:	bf18      	it	ne
 800b4fc:	2001      	movne	r0, #1
 800b4fe:	e447      	b.n	800ad90 <__ieee754_pow+0x240>
 800b500:	4622      	mov	r2, r4
 800b502:	462b      	mov	r3, r5
 800b504:	f7f4 fed8 	bl	80002b8 <__aeabi_dsub>
 800b508:	4642      	mov	r2, r8
 800b50a:	464b      	mov	r3, r9
 800b50c:	f7f5 fb12 	bl	8000b34 <__aeabi_dcmpge>
 800b510:	2800      	cmp	r0, #0
 800b512:	f43f aef3 	beq.w	800b2fc <__ieee754_pow+0x7ac>
 800b516:	e7e9      	b.n	800b4ec <__ieee754_pow+0x99c>
 800b518:	f04f 0a00 	mov.w	sl, #0
 800b51c:	e71a      	b.n	800b354 <__ieee754_pow+0x804>
 800b51e:	ec51 0b10 	vmov	r0, r1, d0
 800b522:	4619      	mov	r1, r3
 800b524:	e7d4      	b.n	800b4d0 <__ieee754_pow+0x980>
 800b526:	491c      	ldr	r1, [pc, #112]	; (800b598 <__ieee754_pow+0xa48>)
 800b528:	2000      	movs	r0, #0
 800b52a:	f7ff bb30 	b.w	800ab8e <__ieee754_pow+0x3e>
 800b52e:	2000      	movs	r0, #0
 800b530:	2100      	movs	r1, #0
 800b532:	f7ff bb2c 	b.w	800ab8e <__ieee754_pow+0x3e>
 800b536:	4630      	mov	r0, r6
 800b538:	4639      	mov	r1, r7
 800b53a:	f7ff bb28 	b.w	800ab8e <__ieee754_pow+0x3e>
 800b53e:	9204      	str	r2, [sp, #16]
 800b540:	f7ff bb7a 	b.w	800ac38 <__ieee754_pow+0xe8>
 800b544:	2300      	movs	r3, #0
 800b546:	f7ff bb64 	b.w	800ac12 <__ieee754_pow+0xc2>
 800b54a:	bf00      	nop
 800b54c:	f3af 8000 	nop.w
 800b550:	00000000 	.word	0x00000000
 800b554:	3fe62e43 	.word	0x3fe62e43
 800b558:	fefa39ef 	.word	0xfefa39ef
 800b55c:	3fe62e42 	.word	0x3fe62e42
 800b560:	0ca86c39 	.word	0x0ca86c39
 800b564:	be205c61 	.word	0xbe205c61
 800b568:	72bea4d0 	.word	0x72bea4d0
 800b56c:	3e663769 	.word	0x3e663769
 800b570:	c5d26bf1 	.word	0xc5d26bf1
 800b574:	3ebbbd41 	.word	0x3ebbbd41
 800b578:	af25de2c 	.word	0xaf25de2c
 800b57c:	3f11566a 	.word	0x3f11566a
 800b580:	16bebd93 	.word	0x16bebd93
 800b584:	3f66c16c 	.word	0x3f66c16c
 800b588:	5555553e 	.word	0x5555553e
 800b58c:	3fc55555 	.word	0x3fc55555
 800b590:	3fe00000 	.word	0x3fe00000
 800b594:	000fffff 	.word	0x000fffff
 800b598:	3ff00000 	.word	0x3ff00000
 800b59c:	4090cbff 	.word	0x4090cbff
 800b5a0:	3f6f3400 	.word	0x3f6f3400
 800b5a4:	652b82fe 	.word	0x652b82fe
 800b5a8:	3c971547 	.word	0x3c971547

0800b5ac <__ieee754_sqrt>:
 800b5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b0:	ec55 4b10 	vmov	r4, r5, d0
 800b5b4:	4e55      	ldr	r6, [pc, #340]	; (800b70c <__ieee754_sqrt+0x160>)
 800b5b6:	43ae      	bics	r6, r5
 800b5b8:	ee10 0a10 	vmov	r0, s0
 800b5bc:	ee10 3a10 	vmov	r3, s0
 800b5c0:	462a      	mov	r2, r5
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	d110      	bne.n	800b5e8 <__ieee754_sqrt+0x3c>
 800b5c6:	ee10 2a10 	vmov	r2, s0
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	f7f5 f82c 	bl	8000628 <__aeabi_dmul>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	f7f4 fe70 	bl	80002bc <__adddf3>
 800b5dc:	4604      	mov	r4, r0
 800b5de:	460d      	mov	r5, r1
 800b5e0:	ec45 4b10 	vmov	d0, r4, r5
 800b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e8:	2d00      	cmp	r5, #0
 800b5ea:	dc10      	bgt.n	800b60e <__ieee754_sqrt+0x62>
 800b5ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b5f0:	4330      	orrs	r0, r6
 800b5f2:	d0f5      	beq.n	800b5e0 <__ieee754_sqrt+0x34>
 800b5f4:	b15d      	cbz	r5, 800b60e <__ieee754_sqrt+0x62>
 800b5f6:	ee10 2a10 	vmov	r2, s0
 800b5fa:	462b      	mov	r3, r5
 800b5fc:	ee10 0a10 	vmov	r0, s0
 800b600:	f7f4 fe5a 	bl	80002b8 <__aeabi_dsub>
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	f7f5 f938 	bl	800087c <__aeabi_ddiv>
 800b60c:	e7e6      	b.n	800b5dc <__ieee754_sqrt+0x30>
 800b60e:	1512      	asrs	r2, r2, #20
 800b610:	d074      	beq.n	800b6fc <__ieee754_sqrt+0x150>
 800b612:	07d4      	lsls	r4, r2, #31
 800b614:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b618:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b61c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b620:	bf5e      	ittt	pl
 800b622:	0fda      	lsrpl	r2, r3, #31
 800b624:	005b      	lslpl	r3, r3, #1
 800b626:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b62a:	2400      	movs	r4, #0
 800b62c:	0fda      	lsrs	r2, r3, #31
 800b62e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b632:	107f      	asrs	r7, r7, #1
 800b634:	005b      	lsls	r3, r3, #1
 800b636:	2516      	movs	r5, #22
 800b638:	4620      	mov	r0, r4
 800b63a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b63e:	1886      	adds	r6, r0, r2
 800b640:	428e      	cmp	r6, r1
 800b642:	bfde      	ittt	le
 800b644:	1b89      	suble	r1, r1, r6
 800b646:	18b0      	addle	r0, r6, r2
 800b648:	18a4      	addle	r4, r4, r2
 800b64a:	0049      	lsls	r1, r1, #1
 800b64c:	3d01      	subs	r5, #1
 800b64e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b652:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b656:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b65a:	d1f0      	bne.n	800b63e <__ieee754_sqrt+0x92>
 800b65c:	462a      	mov	r2, r5
 800b65e:	f04f 0e20 	mov.w	lr, #32
 800b662:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b666:	4281      	cmp	r1, r0
 800b668:	eb06 0c05 	add.w	ip, r6, r5
 800b66c:	dc02      	bgt.n	800b674 <__ieee754_sqrt+0xc8>
 800b66e:	d113      	bne.n	800b698 <__ieee754_sqrt+0xec>
 800b670:	459c      	cmp	ip, r3
 800b672:	d811      	bhi.n	800b698 <__ieee754_sqrt+0xec>
 800b674:	f1bc 0f00 	cmp.w	ip, #0
 800b678:	eb0c 0506 	add.w	r5, ip, r6
 800b67c:	da43      	bge.n	800b706 <__ieee754_sqrt+0x15a>
 800b67e:	2d00      	cmp	r5, #0
 800b680:	db41      	blt.n	800b706 <__ieee754_sqrt+0x15a>
 800b682:	f100 0801 	add.w	r8, r0, #1
 800b686:	1a09      	subs	r1, r1, r0
 800b688:	459c      	cmp	ip, r3
 800b68a:	bf88      	it	hi
 800b68c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b690:	eba3 030c 	sub.w	r3, r3, ip
 800b694:	4432      	add	r2, r6
 800b696:	4640      	mov	r0, r8
 800b698:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b69c:	f1be 0e01 	subs.w	lr, lr, #1
 800b6a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b6a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b6a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b6ac:	d1db      	bne.n	800b666 <__ieee754_sqrt+0xba>
 800b6ae:	430b      	orrs	r3, r1
 800b6b0:	d006      	beq.n	800b6c0 <__ieee754_sqrt+0x114>
 800b6b2:	1c50      	adds	r0, r2, #1
 800b6b4:	bf13      	iteet	ne
 800b6b6:	3201      	addne	r2, #1
 800b6b8:	3401      	addeq	r4, #1
 800b6ba:	4672      	moveq	r2, lr
 800b6bc:	f022 0201 	bicne.w	r2, r2, #1
 800b6c0:	1063      	asrs	r3, r4, #1
 800b6c2:	0852      	lsrs	r2, r2, #1
 800b6c4:	07e1      	lsls	r1, r4, #31
 800b6c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b6ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b6ce:	bf48      	it	mi
 800b6d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b6d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b6d8:	4614      	mov	r4, r2
 800b6da:	e781      	b.n	800b5e0 <__ieee754_sqrt+0x34>
 800b6dc:	0ad9      	lsrs	r1, r3, #11
 800b6de:	3815      	subs	r0, #21
 800b6e0:	055b      	lsls	r3, r3, #21
 800b6e2:	2900      	cmp	r1, #0
 800b6e4:	d0fa      	beq.n	800b6dc <__ieee754_sqrt+0x130>
 800b6e6:	02cd      	lsls	r5, r1, #11
 800b6e8:	d50a      	bpl.n	800b700 <__ieee754_sqrt+0x154>
 800b6ea:	f1c2 0420 	rsb	r4, r2, #32
 800b6ee:	fa23 f404 	lsr.w	r4, r3, r4
 800b6f2:	1e55      	subs	r5, r2, #1
 800b6f4:	4093      	lsls	r3, r2
 800b6f6:	4321      	orrs	r1, r4
 800b6f8:	1b42      	subs	r2, r0, r5
 800b6fa:	e78a      	b.n	800b612 <__ieee754_sqrt+0x66>
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	e7f0      	b.n	800b6e2 <__ieee754_sqrt+0x136>
 800b700:	0049      	lsls	r1, r1, #1
 800b702:	3201      	adds	r2, #1
 800b704:	e7ef      	b.n	800b6e6 <__ieee754_sqrt+0x13a>
 800b706:	4680      	mov	r8, r0
 800b708:	e7bd      	b.n	800b686 <__ieee754_sqrt+0xda>
 800b70a:	bf00      	nop
 800b70c:	7ff00000 	.word	0x7ff00000

0800b710 <with_errno>:
 800b710:	b570      	push	{r4, r5, r6, lr}
 800b712:	4604      	mov	r4, r0
 800b714:	460d      	mov	r5, r1
 800b716:	4616      	mov	r6, r2
 800b718:	f7fe f948 	bl	80099ac <__errno>
 800b71c:	4629      	mov	r1, r5
 800b71e:	6006      	str	r6, [r0, #0]
 800b720:	4620      	mov	r0, r4
 800b722:	bd70      	pop	{r4, r5, r6, pc}

0800b724 <xflow>:
 800b724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b726:	4614      	mov	r4, r2
 800b728:	461d      	mov	r5, r3
 800b72a:	b108      	cbz	r0, 800b730 <xflow+0xc>
 800b72c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b730:	e9cd 2300 	strd	r2, r3, [sp]
 800b734:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b738:	4620      	mov	r0, r4
 800b73a:	4629      	mov	r1, r5
 800b73c:	f7f4 ff74 	bl	8000628 <__aeabi_dmul>
 800b740:	2222      	movs	r2, #34	; 0x22
 800b742:	b003      	add	sp, #12
 800b744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b748:	f7ff bfe2 	b.w	800b710 <with_errno>

0800b74c <__math_uflow>:
 800b74c:	b508      	push	{r3, lr}
 800b74e:	2200      	movs	r2, #0
 800b750:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b754:	f7ff ffe6 	bl	800b724 <xflow>
 800b758:	ec41 0b10 	vmov	d0, r0, r1
 800b75c:	bd08      	pop	{r3, pc}

0800b75e <__math_oflow>:
 800b75e:	b508      	push	{r3, lr}
 800b760:	2200      	movs	r2, #0
 800b762:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b766:	f7ff ffdd 	bl	800b724 <xflow>
 800b76a:	ec41 0b10 	vmov	d0, r0, r1
 800b76e:	bd08      	pop	{r3, pc}

0800b770 <fabs>:
 800b770:	ec51 0b10 	vmov	r0, r1, d0
 800b774:	ee10 2a10 	vmov	r2, s0
 800b778:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b77c:	ec43 2b10 	vmov	d0, r2, r3
 800b780:	4770      	bx	lr

0800b782 <finite>:
 800b782:	b082      	sub	sp, #8
 800b784:	ed8d 0b00 	vstr	d0, [sp]
 800b788:	9801      	ldr	r0, [sp, #4]
 800b78a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b78e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b792:	0fc0      	lsrs	r0, r0, #31
 800b794:	b002      	add	sp, #8
 800b796:	4770      	bx	lr

0800b798 <scalbn>:
 800b798:	b570      	push	{r4, r5, r6, lr}
 800b79a:	ec55 4b10 	vmov	r4, r5, d0
 800b79e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	462b      	mov	r3, r5
 800b7a6:	b99a      	cbnz	r2, 800b7d0 <scalbn+0x38>
 800b7a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7ac:	4323      	orrs	r3, r4
 800b7ae:	d036      	beq.n	800b81e <scalbn+0x86>
 800b7b0:	4b39      	ldr	r3, [pc, #228]	; (800b898 <scalbn+0x100>)
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	ee10 0a10 	vmov	r0, s0
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f7f4 ff35 	bl	8000628 <__aeabi_dmul>
 800b7be:	4b37      	ldr	r3, [pc, #220]	; (800b89c <scalbn+0x104>)
 800b7c0:	429e      	cmp	r6, r3
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	460d      	mov	r5, r1
 800b7c6:	da10      	bge.n	800b7ea <scalbn+0x52>
 800b7c8:	a32b      	add	r3, pc, #172	; (adr r3, 800b878 <scalbn+0xe0>)
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	e03a      	b.n	800b846 <scalbn+0xae>
 800b7d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b7d4:	428a      	cmp	r2, r1
 800b7d6:	d10c      	bne.n	800b7f2 <scalbn+0x5a>
 800b7d8:	ee10 2a10 	vmov	r2, s0
 800b7dc:	4620      	mov	r0, r4
 800b7de:	4629      	mov	r1, r5
 800b7e0:	f7f4 fd6c 	bl	80002bc <__adddf3>
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	460d      	mov	r5, r1
 800b7e8:	e019      	b.n	800b81e <scalbn+0x86>
 800b7ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	3a36      	subs	r2, #54	; 0x36
 800b7f2:	4432      	add	r2, r6
 800b7f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b7f8:	428a      	cmp	r2, r1
 800b7fa:	dd08      	ble.n	800b80e <scalbn+0x76>
 800b7fc:	2d00      	cmp	r5, #0
 800b7fe:	a120      	add	r1, pc, #128	; (adr r1, 800b880 <scalbn+0xe8>)
 800b800:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b804:	da1c      	bge.n	800b840 <scalbn+0xa8>
 800b806:	a120      	add	r1, pc, #128	; (adr r1, 800b888 <scalbn+0xf0>)
 800b808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b80c:	e018      	b.n	800b840 <scalbn+0xa8>
 800b80e:	2a00      	cmp	r2, #0
 800b810:	dd08      	ble.n	800b824 <scalbn+0x8c>
 800b812:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b816:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b81a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b81e:	ec45 4b10 	vmov	d0, r4, r5
 800b822:	bd70      	pop	{r4, r5, r6, pc}
 800b824:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b828:	da19      	bge.n	800b85e <scalbn+0xc6>
 800b82a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b82e:	429e      	cmp	r6, r3
 800b830:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b834:	dd0a      	ble.n	800b84c <scalbn+0xb4>
 800b836:	a112      	add	r1, pc, #72	; (adr r1, 800b880 <scalbn+0xe8>)
 800b838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1e2      	bne.n	800b806 <scalbn+0x6e>
 800b840:	a30f      	add	r3, pc, #60	; (adr r3, 800b880 <scalbn+0xe8>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f7f4 feef 	bl	8000628 <__aeabi_dmul>
 800b84a:	e7cb      	b.n	800b7e4 <scalbn+0x4c>
 800b84c:	a10a      	add	r1, pc, #40	; (adr r1, 800b878 <scalbn+0xe0>)
 800b84e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d0b8      	beq.n	800b7c8 <scalbn+0x30>
 800b856:	a10e      	add	r1, pc, #56	; (adr r1, 800b890 <scalbn+0xf8>)
 800b858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b85c:	e7b4      	b.n	800b7c8 <scalbn+0x30>
 800b85e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b862:	3236      	adds	r2, #54	; 0x36
 800b864:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b868:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b86c:	4620      	mov	r0, r4
 800b86e:	4b0c      	ldr	r3, [pc, #48]	; (800b8a0 <scalbn+0x108>)
 800b870:	2200      	movs	r2, #0
 800b872:	e7e8      	b.n	800b846 <scalbn+0xae>
 800b874:	f3af 8000 	nop.w
 800b878:	c2f8f359 	.word	0xc2f8f359
 800b87c:	01a56e1f 	.word	0x01a56e1f
 800b880:	8800759c 	.word	0x8800759c
 800b884:	7e37e43c 	.word	0x7e37e43c
 800b888:	8800759c 	.word	0x8800759c
 800b88c:	fe37e43c 	.word	0xfe37e43c
 800b890:	c2f8f359 	.word	0xc2f8f359
 800b894:	81a56e1f 	.word	0x81a56e1f
 800b898:	43500000 	.word	0x43500000
 800b89c:	ffff3cb0 	.word	0xffff3cb0
 800b8a0:	3c900000 	.word	0x3c900000

0800b8a4 <_init>:
 800b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a6:	bf00      	nop
 800b8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8aa:	bc08      	pop	{r3}
 800b8ac:	469e      	mov	lr, r3
 800b8ae:	4770      	bx	lr

0800b8b0 <_fini>:
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	bf00      	nop
 800b8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b6:	bc08      	pop	{r3}
 800b8b8:	469e      	mov	lr, r3
 800b8ba:	4770      	bx	lr
